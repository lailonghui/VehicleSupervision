// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"VehicleSupervision/pkg/graphql/model"
	"fmt"
	"io"
	"strconv"
	"time"
)

// aggregated selection of "JJ_VEHICLE"
type JjVehicleAggregate struct {
	Aggregate *JjVehicleAggregateFields `json:"aggregate"`
	Nodes     []*JjVehicle              `json:"nodes"`
}

// aggregate fields of "JJ_VEHICLE"
type JjVehicleAggregateFields struct {
	Avg        *JjVehicleAvgFields        `json:"avg"`
	Count      *int                       `json:"count"`
	Max        *JjVehicleMaxFields        `json:"max"`
	Min        *JjVehicleMinFields        `json:"min"`
	Stddev     *JjVehicleStddevFields     `json:"stddev"`
	StddevPop  *JjVehicleStddevPopFields  `json:"stddev_pop"`
	StddevSamp *JjVehicleStddevSampFields `json:"stddev_samp"`
	Sum        *JjVehicleSumFields        `json:"sum"`
	VarPop     *JjVehicleVarPopFields     `json:"var_pop"`
	VarSamp    *JjVehicleVarSampFields    `json:"var_samp"`
	Variance   *JjVehicleVarianceFields   `json:"variance"`
}

// order by aggregate values of table "JJ_VEHICLE"
type JjVehicleAggregateOrderBy struct {
	Avg        *JjVehicleAvgOrderBy        `json:"avg"`
	Count      *model.OrderBy              `json:"count"`
	Max        *JjVehicleMaxOrderBy        `json:"max"`
	Min        *JjVehicleMinOrderBy        `json:"min"`
	Stddev     *JjVehicleStddevOrderBy     `json:"stddev"`
	StddevPop  *JjVehicleStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *JjVehicleStddevSampOrderBy `json:"stddev_samp"`
	Sum        *JjVehicleSumOrderBy        `json:"sum"`
	VarPop     *JjVehicleVarPopOrderBy     `json:"var_pop"`
	VarSamp    *JjVehicleVarSampOrderBy    `json:"var_samp"`
	Variance   *JjVehicleVarianceOrderBy   `json:"variance"`
}

// input type for inserting array relation for remote table "JJ_VEHICLE"
type JjVehicleArrRelInsertInput struct {
	Data       []*JjVehicleInsertInput `json:"data"`
	OnConflict *JjVehicleOnConflict    `json:"on_conflict"`
}

// aggregate avg on columns
type JjVehicleAvgFields struct {
	IsDeteled *float64 `json:"IS_DETELED"`
	Zt        *float64 `json:"ZT"`
	Zzl       *float64 `json:"ZZL"`
	ID        *float64 `json:"id"`
}

// order by avg() on columns of table "JJ_VEHICLE"
type JjVehicleAvgOrderBy struct {
	IsDeteled *model.OrderBy `json:"IS_DETELED"`
	Zt        *model.OrderBy `json:"ZT"`
	Zzl       *model.OrderBy `json:"ZZL"`
	ID        *model.OrderBy `json:"id"`
}

// Boolean expression to filter rows from the table "JJ_VEHICLE". All fields are combined with a logical 'AND'.
type JjVehicleBoolExp struct {
	Ccdjrq     *model.TimestamptzComparisonExp `json:"CCDJRQ"`
	Cllx       *model.StringComparisonExp      `json:"CLLX"`
	Clsbdh     *model.StringComparisonExp      `json:"CLSBDH"`
	County     *model.StringComparisonExp      `json:"COUNTY"`
	Djrq       *model.TimestamptzComparisonExp `json:"DJRQ"`
	Fprq       *model.TimestamptzComparisonExp `json:"FPRQ"`
	Gxrq       *model.TimestamptzComparisonExp `json:"GXRQ"`
	Hphm       *model.StringComparisonExp      `json:"HPHM"`
	Hpzl       *model.StringComparisonExp      `json:"HPZL"`
	IsDeteled  *model.NumericComparisonExp     `json:"IS_DETELED"`
	Lxdh       *model.StringComparisonExp      `json:"LXDH"`
	Lxdz       *model.StringComparisonExp      `json:"LXDZ"`
	Other      *model.StringComparisonExp      `json:"OTHER"`
	Qzbfqz     *model.TimestamptzComparisonExp `json:"QZBFQZ"`
	Sjhm       *model.StringComparisonExp      `json:"SJHM"`
	Syr        *model.StringComparisonExp      `json:"SYR"`
	Syxz       *model.StringComparisonExp      `json:"SYXZ"`
	Updatetime *model.TimestamptzComparisonExp `json:"UPDATETIME"`
	Vehmontype *model.StringComparisonExp      `json:"VEHMONTYPE"`
	Xh         *model.StringComparisonExp      `json:"XH"`
	Yxqz       *model.TimestamptzComparisonExp `json:"YXQZ"`
	Zt         *model.IntComparisonExp         `json:"ZT"`
	Zzl        *model.NumericComparisonExp     `json:"ZZL"`
	And        []*JjVehicleBoolExp             `json:"_and"`
	Not        *JjVehicleBoolExp               `json:"_not"`
	Or         []*JjVehicleBoolExp             `json:"_or"`
	ID         *model.BigintComparisonExp      `json:"id"`
	VehicleID  *model.StringComparisonExp      `json:"vehicle_id"`
}

// input type for incrementing integer column in table "JJ_VEHICLE"
type JjVehicleIncInput struct {
	IsDeteled *float64 `json:"IS_DETELED"`
	Zt        *int     `json:"ZT"`
	Zzl       *float64 `json:"ZZL"`
	ID        *int64   `json:"id"`
}

// input type for inserting data into table "JJ_VEHICLE"
type JjVehicleInsertInput struct {
	Ccdjrq     *time.Time `json:"CCDJRQ"`
	Cllx       *string    `json:"CLLX"`
	Clsbdh     *string    `json:"CLSBDH"`
	County     *string    `json:"COUNTY"`
	Djrq       *time.Time `json:"DJRQ"`
	Fprq       *time.Time `json:"FPRQ"`
	Gxrq       *time.Time `json:"GXRQ"`
	Hphm       *string    `json:"HPHM"`
	Hpzl       *string    `json:"HPZL"`
	IsDeteled  *float64   `json:"IS_DETELED"`
	Lxdh       *string    `json:"LXDH"`
	Lxdz       *string    `json:"LXDZ"`
	Other      *string    `json:"OTHER"`
	Qzbfqz     *time.Time `json:"QZBFQZ"`
	Sjhm       *string    `json:"SJHM"`
	Syr        *string    `json:"SYR"`
	Syxz       *string    `json:"SYXZ"`
	Updatetime *time.Time `json:"UPDATETIME"`
	Vehmontype *string    `json:"VEHMONTYPE"`
	Xh         *string    `json:"XH"`
	Yxqz       *time.Time `json:"YXQZ"`
	Zt         *int       `json:"ZT"`
	Zzl        *float64   `json:"ZZL"`
	ID         *int64     `json:"id"`
	VehicleID  *string    `json:"vehicle_id"`
}

// aggregate max on columns
type JjVehicleMaxFields struct {
	Ccdjrq     *time.Time `json:"CCDJRQ"`
	Cllx       *string    `json:"CLLX"`
	Clsbdh     *string    `json:"CLSBDH"`
	County     *string    `json:"COUNTY"`
	Djrq       *time.Time `json:"DJRQ"`
	Fprq       *time.Time `json:"FPRQ"`
	Gxrq       *time.Time `json:"GXRQ"`
	Hphm       *string    `json:"HPHM"`
	Hpzl       *string    `json:"HPZL"`
	IsDeteled  *float64   `json:"IS_DETELED"`
	Lxdh       *string    `json:"LXDH"`
	Lxdz       *string    `json:"LXDZ"`
	Other      *string    `json:"OTHER"`
	Qzbfqz     *time.Time `json:"QZBFQZ"`
	Sjhm       *string    `json:"SJHM"`
	Syr        *string    `json:"SYR"`
	Syxz       *string    `json:"SYXZ"`
	Updatetime *time.Time `json:"UPDATETIME"`
	Vehmontype *string    `json:"VEHMONTYPE"`
	Xh         *string    `json:"XH"`
	Yxqz       *time.Time `json:"YXQZ"`
	Zt         *int       `json:"ZT"`
	Zzl        *float64   `json:"ZZL"`
	ID         *int64     `json:"id"`
	VehicleID  *string    `json:"vehicle_id"`
}

// order by max() on columns of table "JJ_VEHICLE"
type JjVehicleMaxOrderBy struct {
	Ccdjrq     *model.OrderBy `json:"CCDJRQ"`
	Cllx       *model.OrderBy `json:"CLLX"`
	Clsbdh     *model.OrderBy `json:"CLSBDH"`
	County     *model.OrderBy `json:"COUNTY"`
	Djrq       *model.OrderBy `json:"DJRQ"`
	Fprq       *model.OrderBy `json:"FPRQ"`
	Gxrq       *model.OrderBy `json:"GXRQ"`
	Hphm       *model.OrderBy `json:"HPHM"`
	Hpzl       *model.OrderBy `json:"HPZL"`
	IsDeteled  *model.OrderBy `json:"IS_DETELED"`
	Lxdh       *model.OrderBy `json:"LXDH"`
	Lxdz       *model.OrderBy `json:"LXDZ"`
	Other      *model.OrderBy `json:"OTHER"`
	Qzbfqz     *model.OrderBy `json:"QZBFQZ"`
	Sjhm       *model.OrderBy `json:"SJHM"`
	Syr        *model.OrderBy `json:"SYR"`
	Syxz       *model.OrderBy `json:"SYXZ"`
	Updatetime *model.OrderBy `json:"UPDATETIME"`
	Vehmontype *model.OrderBy `json:"VEHMONTYPE"`
	Xh         *model.OrderBy `json:"XH"`
	Yxqz       *model.OrderBy `json:"YXQZ"`
	Zt         *model.OrderBy `json:"ZT"`
	Zzl        *model.OrderBy `json:"ZZL"`
	ID         *model.OrderBy `json:"id"`
	VehicleID  *model.OrderBy `json:"vehicle_id"`
}

// aggregate min on columns
type JjVehicleMinFields struct {
	Ccdjrq     *time.Time `json:"CCDJRQ"`
	Cllx       *string    `json:"CLLX"`
	Clsbdh     *string    `json:"CLSBDH"`
	County     *string    `json:"COUNTY"`
	Djrq       *time.Time `json:"DJRQ"`
	Fprq       *time.Time `json:"FPRQ"`
	Gxrq       *time.Time `json:"GXRQ"`
	Hphm       *string    `json:"HPHM"`
	Hpzl       *string    `json:"HPZL"`
	IsDeteled  *float64   `json:"IS_DETELED"`
	Lxdh       *string    `json:"LXDH"`
	Lxdz       *string    `json:"LXDZ"`
	Other      *string    `json:"OTHER"`
	Qzbfqz     *time.Time `json:"QZBFQZ"`
	Sjhm       *string    `json:"SJHM"`
	Syr        *string    `json:"SYR"`
	Syxz       *string    `json:"SYXZ"`
	Updatetime *time.Time `json:"UPDATETIME"`
	Vehmontype *string    `json:"VEHMONTYPE"`
	Xh         *string    `json:"XH"`
	Yxqz       *time.Time `json:"YXQZ"`
	Zt         *int       `json:"ZT"`
	Zzl        *float64   `json:"ZZL"`
	ID         *int64     `json:"id"`
	VehicleID  *string    `json:"vehicle_id"`
}

// order by min() on columns of table "JJ_VEHICLE"
type JjVehicleMinOrderBy struct {
	Ccdjrq     *model.OrderBy `json:"CCDJRQ"`
	Cllx       *model.OrderBy `json:"CLLX"`
	Clsbdh     *model.OrderBy `json:"CLSBDH"`
	County     *model.OrderBy `json:"COUNTY"`
	Djrq       *model.OrderBy `json:"DJRQ"`
	Fprq       *model.OrderBy `json:"FPRQ"`
	Gxrq       *model.OrderBy `json:"GXRQ"`
	Hphm       *model.OrderBy `json:"HPHM"`
	Hpzl       *model.OrderBy `json:"HPZL"`
	IsDeteled  *model.OrderBy `json:"IS_DETELED"`
	Lxdh       *model.OrderBy `json:"LXDH"`
	Lxdz       *model.OrderBy `json:"LXDZ"`
	Other      *model.OrderBy `json:"OTHER"`
	Qzbfqz     *model.OrderBy `json:"QZBFQZ"`
	Sjhm       *model.OrderBy `json:"SJHM"`
	Syr        *model.OrderBy `json:"SYR"`
	Syxz       *model.OrderBy `json:"SYXZ"`
	Updatetime *model.OrderBy `json:"UPDATETIME"`
	Vehmontype *model.OrderBy `json:"VEHMONTYPE"`
	Xh         *model.OrderBy `json:"XH"`
	Yxqz       *model.OrderBy `json:"YXQZ"`
	Zt         *model.OrderBy `json:"ZT"`
	Zzl        *model.OrderBy `json:"ZZL"`
	ID         *model.OrderBy `json:"id"`
	VehicleID  *model.OrderBy `json:"vehicle_id"`
}

// response of any mutation on the table "JJ_VEHICLE"
type JjVehicleMutationResponse struct {
	// number of affected rows by the mutation
	AffectedRows int `json:"affected_rows"`
	// data of the affected rows by the mutation
	Returning []*JjVehicle `json:"returning"`
}

// input type for inserting object relation for remote table "JJ_VEHICLE"
type JjVehicleObjRelInsertInput struct {
	Data       *JjVehicleInsertInput `json:"data"`
	OnConflict *JjVehicleOnConflict  `json:"on_conflict"`
}

// on conflict condition type for table "JJ_VEHICLE"
type JjVehicleOnConflict struct {
	Constraint    JjVehicleConstraint     `json:"constraint"`
	UpdateColumns []JjVehicleUpdateColumn `json:"update_columns"`
	Where         *JjVehicleBoolExp       `json:"where"`
}

// ordering options when selecting data from "JJ_VEHICLE"
type JjVehicleOrderBy struct {
	Ccdjrq     *model.OrderBy `json:"CCDJRQ"`
	Cllx       *model.OrderBy `json:"CLLX"`
	Clsbdh     *model.OrderBy `json:"CLSBDH"`
	County     *model.OrderBy `json:"COUNTY"`
	Djrq       *model.OrderBy `json:"DJRQ"`
	Fprq       *model.OrderBy `json:"FPRQ"`
	Gxrq       *model.OrderBy `json:"GXRQ"`
	Hphm       *model.OrderBy `json:"HPHM"`
	Hpzl       *model.OrderBy `json:"HPZL"`
	IsDeteled  *model.OrderBy `json:"IS_DETELED"`
	Lxdh       *model.OrderBy `json:"LXDH"`
	Lxdz       *model.OrderBy `json:"LXDZ"`
	Other      *model.OrderBy `json:"OTHER"`
	Qzbfqz     *model.OrderBy `json:"QZBFQZ"`
	Sjhm       *model.OrderBy `json:"SJHM"`
	Syr        *model.OrderBy `json:"SYR"`
	Syxz       *model.OrderBy `json:"SYXZ"`
	Updatetime *model.OrderBy `json:"UPDATETIME"`
	Vehmontype *model.OrderBy `json:"VEHMONTYPE"`
	Xh         *model.OrderBy `json:"XH"`
	Yxqz       *model.OrderBy `json:"YXQZ"`
	Zt         *model.OrderBy `json:"ZT"`
	Zzl        *model.OrderBy `json:"ZZL"`
	ID         *model.OrderBy `json:"id"`
	VehicleID  *model.OrderBy `json:"vehicle_id"`
}

// primary key columns input for table: "JJ_VEHICLE"
type JjVehiclePkColumnsInput struct {
	// 主键
	ID int64 `json:"id"`
}

// input type for updating data in table "JJ_VEHICLE"
type JjVehicleSetInput struct {
	Ccdjrq     *time.Time `json:"CCDJRQ"`
	Cllx       *string    `json:"CLLX"`
	Clsbdh     *string    `json:"CLSBDH"`
	County     *string    `json:"COUNTY"`
	Djrq       *time.Time `json:"DJRQ"`
	Fprq       *time.Time `json:"FPRQ"`
	Gxrq       *time.Time `json:"GXRQ"`
	Hphm       *string    `json:"HPHM"`
	Hpzl       *string    `json:"HPZL"`
	IsDeteled  *float64   `json:"IS_DETELED"`
	Lxdh       *string    `json:"LXDH"`
	Lxdz       *string    `json:"LXDZ"`
	Other      *string    `json:"OTHER"`
	Qzbfqz     *time.Time `json:"QZBFQZ"`
	Sjhm       *string    `json:"SJHM"`
	Syr        *string    `json:"SYR"`
	Syxz       *string    `json:"SYXZ"`
	Updatetime *time.Time `json:"UPDATETIME"`
	Vehmontype *string    `json:"VEHMONTYPE"`
	Xh         *string    `json:"XH"`
	Yxqz       *time.Time `json:"YXQZ"`
	Zt         *int       `json:"ZT"`
	Zzl        *float64   `json:"ZZL"`
	ID         *int64     `json:"id"`
	VehicleID  *string    `json:"vehicle_id"`
}

// aggregate stddev on columns
type JjVehicleStddevFields struct {
	IsDeteled *float64 `json:"IS_DETELED"`
	Zt        *float64 `json:"ZT"`
	Zzl       *float64 `json:"ZZL"`
	ID        *float64 `json:"id"`
}

// order by stddev() on columns of table "JJ_VEHICLE"
type JjVehicleStddevOrderBy struct {
	IsDeteled *model.OrderBy `json:"IS_DETELED"`
	Zt        *model.OrderBy `json:"ZT"`
	Zzl       *model.OrderBy `json:"ZZL"`
	ID        *model.OrderBy `json:"id"`
}

// aggregate stddev_pop on columns
type JjVehicleStddevPopFields struct {
	IsDeteled *float64 `json:"IS_DETELED"`
	Zt        *float64 `json:"ZT"`
	Zzl       *float64 `json:"ZZL"`
	ID        *float64 `json:"id"`
}

// order by stddev_pop() on columns of table "JJ_VEHICLE"
type JjVehicleStddevPopOrderBy struct {
	IsDeteled *model.OrderBy `json:"IS_DETELED"`
	Zt        *model.OrderBy `json:"ZT"`
	Zzl       *model.OrderBy `json:"ZZL"`
	ID        *model.OrderBy `json:"id"`
}

// aggregate stddev_samp on columns
type JjVehicleStddevSampFields struct {
	IsDeteled *float64 `json:"IS_DETELED"`
	Zt        *float64 `json:"ZT"`
	Zzl       *float64 `json:"ZZL"`
	ID        *float64 `json:"id"`
}

// order by stddev_samp() on columns of table "JJ_VEHICLE"
type JjVehicleStddevSampOrderBy struct {
	IsDeteled *model.OrderBy `json:"IS_DETELED"`
	Zt        *model.OrderBy `json:"ZT"`
	Zzl       *model.OrderBy `json:"ZZL"`
	ID        *model.OrderBy `json:"id"`
}

// aggregate sum on columns
type JjVehicleSumFields struct {
	IsDeteled *float64 `json:"IS_DETELED"`
	Zt        *int     `json:"ZT"`
	Zzl       *float64 `json:"ZZL"`
	ID        *int64   `json:"id"`
}

// order by sum() on columns of table "JJ_VEHICLE"
type JjVehicleSumOrderBy struct {
	IsDeteled *model.OrderBy `json:"IS_DETELED"`
	Zt        *model.OrderBy `json:"ZT"`
	Zzl       *model.OrderBy `json:"ZZL"`
	ID        *model.OrderBy `json:"id"`
}

// aggregate var_pop on columns
type JjVehicleVarPopFields struct {
	IsDeteled *float64 `json:"IS_DETELED"`
	Zt        *float64 `json:"ZT"`
	Zzl       *float64 `json:"ZZL"`
	ID        *float64 `json:"id"`
}

// order by var_pop() on columns of table "JJ_VEHICLE"
type JjVehicleVarPopOrderBy struct {
	IsDeteled *model.OrderBy `json:"IS_DETELED"`
	Zt        *model.OrderBy `json:"ZT"`
	Zzl       *model.OrderBy `json:"ZZL"`
	ID        *model.OrderBy `json:"id"`
}

// aggregate var_samp on columns
type JjVehicleVarSampFields struct {
	IsDeteled *float64 `json:"IS_DETELED"`
	Zt        *float64 `json:"ZT"`
	Zzl       *float64 `json:"ZZL"`
	ID        *float64 `json:"id"`
}

// order by var_samp() on columns of table "JJ_VEHICLE"
type JjVehicleVarSampOrderBy struct {
	IsDeteled *model.OrderBy `json:"IS_DETELED"`
	Zt        *model.OrderBy `json:"ZT"`
	Zzl       *model.OrderBy `json:"ZZL"`
	ID        *model.OrderBy `json:"id"`
}

// aggregate variance on columns
type JjVehicleVarianceFields struct {
	IsDeteled *float64 `json:"IS_DETELED"`
	Zt        *float64 `json:"ZT"`
	Zzl       *float64 `json:"ZZL"`
	ID        *float64 `json:"id"`
}

// order by variance() on columns of table "JJ_VEHICLE"
type JjVehicleVarianceOrderBy struct {
	IsDeteled *model.OrderBy `json:"IS_DETELED"`
	Zt        *model.OrderBy `json:"ZT"`
	Zzl       *model.OrderBy `json:"ZZL"`
	ID        *model.OrderBy `json:"id"`
}

// aggregated selection of "muck_truck_category_info"
type MuckTruckCategoryInfoAggregate struct {
	Aggregate *MuckTruckCategoryInfoAggregateFields `json:"aggregate"`
	Nodes     []*MuckTruckCategoryInfo              `json:"nodes"`
}

// aggregate fields of "muck_truck_category_info"
type MuckTruckCategoryInfoAggregateFields struct {
	Avg        *MuckTruckCategoryInfoAvgFields        `json:"avg"`
	Count      *int                                   `json:"count"`
	Max        *MuckTruckCategoryInfoMaxFields        `json:"max"`
	Min        *MuckTruckCategoryInfoMinFields        `json:"min"`
	Stddev     *MuckTruckCategoryInfoStddevFields     `json:"stddev"`
	StddevPop  *MuckTruckCategoryInfoStddevPopFields  `json:"stddev_pop"`
	StddevSamp *MuckTruckCategoryInfoStddevSampFields `json:"stddev_samp"`
	Sum        *MuckTruckCategoryInfoSumFields        `json:"sum"`
	VarPop     *MuckTruckCategoryInfoVarPopFields     `json:"var_pop"`
	VarSamp    *MuckTruckCategoryInfoVarSampFields    `json:"var_samp"`
	Variance   *MuckTruckCategoryInfoVarianceFields   `json:"variance"`
}

// order by aggregate values of table "muck_truck_category_info"
type MuckTruckCategoryInfoAggregateOrderBy struct {
	Avg        *MuckTruckCategoryInfoAvgOrderBy        `json:"avg"`
	Count      *model.OrderBy                          `json:"count"`
	Max        *MuckTruckCategoryInfoMaxOrderBy        `json:"max"`
	Min        *MuckTruckCategoryInfoMinOrderBy        `json:"min"`
	Stddev     *MuckTruckCategoryInfoStddevOrderBy     `json:"stddev"`
	StddevPop  *MuckTruckCategoryInfoStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *MuckTruckCategoryInfoStddevSampOrderBy `json:"stddev_samp"`
	Sum        *MuckTruckCategoryInfoSumOrderBy        `json:"sum"`
	VarPop     *MuckTruckCategoryInfoVarPopOrderBy     `json:"var_pop"`
	VarSamp    *MuckTruckCategoryInfoVarSampOrderBy    `json:"var_samp"`
	Variance   *MuckTruckCategoryInfoVarianceOrderBy   `json:"variance"`
}

// input type for inserting array relation for remote table "muck_truck_category_info"
type MuckTruckCategoryInfoArrRelInsertInput struct {
	Data       []*MuckTruckCategoryInfoInsertInput `json:"data"`
	OnConflict *MuckTruckCategoryInfoOnConflict    `json:"on_conflict"`
}

// aggregate avg on columns
type MuckTruckCategoryInfoAvgFields struct {
	AxesNumber    *float64 `json:"axes_number"`
	ID            *float64 `json:"id"`
	TotalMass     *float64 `json:"total_mass"`
	VehicleNature *float64 `json:"vehicle_nature"`
}

// order by avg() on columns of table "muck_truck_category_info"
type MuckTruckCategoryInfoAvgOrderBy struct {
	AxesNumber    *model.OrderBy `json:"axes_number"`
	ID            *model.OrderBy `json:"id"`
	TotalMass     *model.OrderBy `json:"total_mass"`
	VehicleNature *model.OrderBy `json:"vehicle_nature"`
}

// Boolean expression to filter rows from the table "muck_truck_category_info". All fields are combined with a logical 'AND'.
type MuckTruckCategoryInfoBoolExp struct {
	And                               []*MuckTruckCategoryInfoBoolExp `json:"_and"`
	Not                               *MuckTruckCategoryInfoBoolExp   `json:"_not"`
	Or                                []*MuckTruckCategoryInfoBoolExp `json:"_or"`
	ActualOwnerContactPhone           *model.StringComparisonExp      `json:"actual_owner_contact_phone"`
	ActualOwnerIDNumber               *model.StringComparisonExp      `json:"actual_owner_id_number"`
	ActualOwnerIDPhoto                *model.StringComparisonExp      `json:"actual_owner_id_photo"`
	ActualOwnerName                   *model.StringComparisonExp      `json:"actual_owner_name"`
	AnnualInspectionExpirationTime    *model.TimestamptzComparisonExp `json:"annual_inspection_expiration_time"`
	ApplyInspectionTime               *model.TimestamptzComparisonExp `json:"apply_inspection_time"`
	AxesNumber                        *model.IntComparisonExp         `json:"axes_number"`
	BlacklistDeadline                 *model.TimestamptzComparisonExp `json:"blacklist_deadline"`
	CompulsoryInsurancePolicyPicture  *model.StringComparisonExp      `json:"compulsory_insurance_policy_picture"`
	CreateAt                          *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy                          *model.StringComparisonExp      `json:"create_by"`
	DeleteAt                          *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy                          *model.StringComparisonExp      `json:"delete_by"`
	DrivingLicenseContactPhone        *model.StringComparisonExp      `json:"driving_license_contact_phone"`
	DrivingLicenseIDNumber            *model.StringComparisonExp      `json:"driving_license_id_number"`
	DrivingLiscenseOwnerIDPhoto       *model.StringComparisonExp      `json:"driving_liscense_owner_id_photo"`
	EngineNumber                      *model.StringComparisonExp      `json:"engine_number"`
	ID                                *model.BigintComparisonExp      `json:"id"`
	IllegalNoticeNumberEndorsement    *model.StringComparisonExp      `json:"illegal_notice_number_endorsement"`
	IllegalNumberEndorsement          *model.StringComparisonExp      `json:"illegal_number_endorsement"`
	IncidentNumberEndorsement         *model.StringComparisonExp      `json:"incident_number_endorsement"`
	InitialRegistrationDate           *model.TimestamptzComparisonExp `json:"initial_registration_date"`
	InsuranceExpiryTime               *model.TimestamptzComparisonExp `json:"insurance_expiry_time"`
	IsBlacklist                       *model.BooleanComparisonExp     `json:"is_blacklist"`
	IsDelete                          *model.BooleanComparisonExp     `json:"is_delete"`
	IsDueSecurityAlarmProcessing      *model.BooleanComparisonExp     `json:"is_due_security_alarm_processing"`
	IsFirstRegister                   *model.BooleanComparisonExp     `json:"is_first_register"`
	IsMuckOfficeAudit                 *model.BooleanComparisonExp     `json:"is_muck_office_audit"`
	IsSendSms                         *model.BooleanComparisonExp     `json:"is_send_sms"`
	IssueDateOfQuangongNumber         *model.TimestamptzComparisonExp `json:"issue_date_of_quangong_number"`
	OwnerIDPhoto                      *model.StringComparisonExp      `json:"owner_id_photo"`
	ProcessingNotes                   *model.StringComparisonExp      `json:"processing_notes"`
	ProcessingTime                    *model.TimestamptzComparisonExp `json:"processing_time"`
	Processor                         *model.StringComparisonExp      `json:"processor"`
	ReviewNotes                       *model.StringComparisonExp      `json:"review_notes"`
	ReviewStatus                      *model.StringComparisonExp      `json:"review_status"`
	ReviewTime                        *model.TimestamptzComparisonExp `json:"review_time"`
	Reviewer                          *model.StringComparisonExp      `json:"reviewer"`
	SecondaryMaintenanceExpiryDate    *model.TimestamptzComparisonExp `json:"secondary_maintenance_expiry_date"`
	SecondaryMaintenanceLocation      *model.StringComparisonExp      `json:"secondary_maintenance_location"`
	SigningAcceptanceApplicationTime  *model.TimestamptzComparisonExp `json:"signing_acceptance_application_time"`
	ThirdPartyInsuranceCoverage       *model.StringComparisonExp      `json:"third_party_insurance_coverage"`
	ThirdPartyInsuranceExpiryTime     *model.TimestamptzComparisonExp `json:"third_party_insurance_expiry_time"`
	ThirdPartyInsurancePolicyPicture  *model.StringComparisonExp      `json:"third_party_insurance_policy_picture"`
	TotalMass                         *model.NumericComparisonExp     `json:"total_mass"`
	UpdateAt                          *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy                          *model.StringComparisonExp      `json:"update_by"`
	VehicleDescription                *model.StringComparisonExp      `json:"vehicle_description"`
	VehicleID                         *model.StringComparisonExp      `json:"vehicle_id"`
	VehicleNature                     *model.IntComparisonExp         `json:"vehicle_nature"`
	VehicleOperatingCertificateNumber *model.StringComparisonExp      `json:"vehicle_operating_certificate_number"`
	VehicleOperatingCertificatePhoto  *model.StringComparisonExp      `json:"vehicle_operating_certificate_photo"`
	VehiclePicture                    *model.StringComparisonExp      `json:"vehicle_picture"`
}

// input type for incrementing integer column in table "muck_truck_category_info"
type MuckTruckCategoryInfoIncInput struct {
	AxesNumber    *int     `json:"axes_number"`
	ID            *int64   `json:"id"`
	TotalMass     *float64 `json:"total_mass"`
	VehicleNature *int     `json:"vehicle_nature"`
}

// input type for inserting data into table "muck_truck_category_info"
type MuckTruckCategoryInfoInsertInput struct {
	ActualOwnerContactPhone           *string    `json:"actual_owner_contact_phone"`
	ActualOwnerIDNumber               *string    `json:"actual_owner_id_number"`
	ActualOwnerIDPhoto                *string    `json:"actual_owner_id_photo"`
	ActualOwnerName                   *string    `json:"actual_owner_name"`
	AnnualInspectionExpirationTime    *time.Time `json:"annual_inspection_expiration_time"`
	ApplyInspectionTime               *time.Time `json:"apply_inspection_time"`
	AxesNumber                        *int       `json:"axes_number"`
	BlacklistDeadline                 *time.Time `json:"blacklist_deadline"`
	CompulsoryInsurancePolicyPicture  *string    `json:"compulsory_insurance_policy_picture"`
	CreateAt                          *time.Time `json:"create_at"`
	CreateBy                          *string    `json:"create_by"`
	DeleteAt                          *time.Time `json:"delete_at"`
	DeleteBy                          *string    `json:"delete_by"`
	DrivingLicenseContactPhone        *string    `json:"driving_license_contact_phone"`
	DrivingLicenseIDNumber            *string    `json:"driving_license_id_number"`
	DrivingLiscenseOwnerIDPhoto       *string    `json:"driving_liscense_owner_id_photo"`
	EngineNumber                      *string    `json:"engine_number"`
	ID                                *int64     `json:"id"`
	IllegalNoticeNumberEndorsement    *string    `json:"illegal_notice_number_endorsement"`
	IllegalNumberEndorsement          *string    `json:"illegal_number_endorsement"`
	IncidentNumberEndorsement         *string    `json:"incident_number_endorsement"`
	InitialRegistrationDate           *time.Time `json:"initial_registration_date"`
	InsuranceExpiryTime               *time.Time `json:"insurance_expiry_time"`
	IsBlacklist                       *bool      `json:"is_blacklist"`
	IsDelete                          *bool      `json:"is_delete"`
	IsDueSecurityAlarmProcessing      *bool      `json:"is_due_security_alarm_processing"`
	IsFirstRegister                   *bool      `json:"is_first_register"`
	IsMuckOfficeAudit                 *bool      `json:"is_muck_office_audit"`
	IsSendSms                         *bool      `json:"is_send_sms"`
	IssueDateOfQuangongNumber         *time.Time `json:"issue_date_of_quangong_number"`
	OwnerIDPhoto                      *string    `json:"owner_id_photo"`
	ProcessingNotes                   *string    `json:"processing_notes"`
	ProcessingTime                    *time.Time `json:"processing_time"`
	Processor                         *string    `json:"processor"`
	ReviewNotes                       *string    `json:"review_notes"`
	ReviewStatus                      *string    `json:"review_status"`
	ReviewTime                        *time.Time `json:"review_time"`
	Reviewer                          *string    `json:"reviewer"`
	SecondaryMaintenanceExpiryDate    *time.Time `json:"secondary_maintenance_expiry_date"`
	SecondaryMaintenanceLocation      *string    `json:"secondary_maintenance_location"`
	SigningAcceptanceApplicationTime  *time.Time `json:"signing_acceptance_application_time"`
	ThirdPartyInsuranceCoverage       *string    `json:"third_party_insurance_coverage"`
	ThirdPartyInsuranceExpiryTime     *time.Time `json:"third_party_insurance_expiry_time"`
	ThirdPartyInsurancePolicyPicture  *string    `json:"third_party_insurance_policy_picture"`
	TotalMass                         *float64   `json:"total_mass"`
	UpdateAt                          *time.Time `json:"update_at"`
	UpdateBy                          *string    `json:"update_by"`
	VehicleDescription                *string    `json:"vehicle_description"`
	VehicleID                         *string    `json:"vehicle_id"`
	VehicleNature                     *int       `json:"vehicle_nature"`
	VehicleOperatingCertificateNumber *string    `json:"vehicle_operating_certificate_number"`
	VehicleOperatingCertificatePhoto  *string    `json:"vehicle_operating_certificate_photo"`
	VehiclePicture                    *string    `json:"vehicle_picture"`
}

// aggregate max on columns
type MuckTruckCategoryInfoMaxFields struct {
	ActualOwnerContactPhone           *string    `json:"actual_owner_contact_phone"`
	ActualOwnerIDNumber               *string    `json:"actual_owner_id_number"`
	ActualOwnerIDPhoto                *string    `json:"actual_owner_id_photo"`
	ActualOwnerName                   *string    `json:"actual_owner_name"`
	AnnualInspectionExpirationTime    *time.Time `json:"annual_inspection_expiration_time"`
	ApplyInspectionTime               *time.Time `json:"apply_inspection_time"`
	AxesNumber                        *int       `json:"axes_number"`
	BlacklistDeadline                 *time.Time `json:"blacklist_deadline"`
	CompulsoryInsurancePolicyPicture  *string    `json:"compulsory_insurance_policy_picture"`
	CreateAt                          *time.Time `json:"create_at"`
	CreateBy                          *string    `json:"create_by"`
	DeleteAt                          *time.Time `json:"delete_at"`
	DeleteBy                          *string    `json:"delete_by"`
	DrivingLicenseContactPhone        *string    `json:"driving_license_contact_phone"`
	DrivingLicenseIDNumber            *string    `json:"driving_license_id_number"`
	DrivingLiscenseOwnerIDPhoto       *string    `json:"driving_liscense_owner_id_photo"`
	EngineNumber                      *string    `json:"engine_number"`
	ID                                *int64     `json:"id"`
	IllegalNoticeNumberEndorsement    *string    `json:"illegal_notice_number_endorsement"`
	IllegalNumberEndorsement          *string    `json:"illegal_number_endorsement"`
	IncidentNumberEndorsement         *string    `json:"incident_number_endorsement"`
	InitialRegistrationDate           *time.Time `json:"initial_registration_date"`
	InsuranceExpiryTime               *time.Time `json:"insurance_expiry_time"`
	IssueDateOfQuangongNumber         *time.Time `json:"issue_date_of_quangong_number"`
	OwnerIDPhoto                      *string    `json:"owner_id_photo"`
	ProcessingNotes                   *string    `json:"processing_notes"`
	ProcessingTime                    *time.Time `json:"processing_time"`
	Processor                         *string    `json:"processor"`
	ReviewNotes                       *string    `json:"review_notes"`
	ReviewStatus                      *string    `json:"review_status"`
	ReviewTime                        *time.Time `json:"review_time"`
	Reviewer                          *string    `json:"reviewer"`
	SecondaryMaintenanceExpiryDate    *time.Time `json:"secondary_maintenance_expiry_date"`
	SecondaryMaintenanceLocation      *string    `json:"secondary_maintenance_location"`
	SigningAcceptanceApplicationTime  *time.Time `json:"signing_acceptance_application_time"`
	ThirdPartyInsuranceCoverage       *string    `json:"third_party_insurance_coverage"`
	ThirdPartyInsuranceExpiryTime     *time.Time `json:"third_party_insurance_expiry_time"`
	ThirdPartyInsurancePolicyPicture  *string    `json:"third_party_insurance_policy_picture"`
	TotalMass                         *float64   `json:"total_mass"`
	UpdateAt                          *time.Time `json:"update_at"`
	UpdateBy                          *string    `json:"update_by"`
	VehicleDescription                *string    `json:"vehicle_description"`
	VehicleID                         *string    `json:"vehicle_id"`
	VehicleNature                     *int       `json:"vehicle_nature"`
	VehicleOperatingCertificateNumber *string    `json:"vehicle_operating_certificate_number"`
	VehicleOperatingCertificatePhoto  *string    `json:"vehicle_operating_certificate_photo"`
	VehiclePicture                    *string    `json:"vehicle_picture"`
}

// order by max() on columns of table "muck_truck_category_info"
type MuckTruckCategoryInfoMaxOrderBy struct {
	ActualOwnerContactPhone           *model.OrderBy `json:"actual_owner_contact_phone"`
	ActualOwnerIDNumber               *model.OrderBy `json:"actual_owner_id_number"`
	ActualOwnerIDPhoto                *model.OrderBy `json:"actual_owner_id_photo"`
	ActualOwnerName                   *model.OrderBy `json:"actual_owner_name"`
	AnnualInspectionExpirationTime    *model.OrderBy `json:"annual_inspection_expiration_time"`
	ApplyInspectionTime               *model.OrderBy `json:"apply_inspection_time"`
	AxesNumber                        *model.OrderBy `json:"axes_number"`
	BlacklistDeadline                 *model.OrderBy `json:"blacklist_deadline"`
	CompulsoryInsurancePolicyPicture  *model.OrderBy `json:"compulsory_insurance_policy_picture"`
	CreateAt                          *model.OrderBy `json:"create_at"`
	CreateBy                          *model.OrderBy `json:"create_by"`
	DeleteAt                          *model.OrderBy `json:"delete_at"`
	DeleteBy                          *model.OrderBy `json:"delete_by"`
	DrivingLicenseContactPhone        *model.OrderBy `json:"driving_license_contact_phone"`
	DrivingLicenseIDNumber            *model.OrderBy `json:"driving_license_id_number"`
	DrivingLiscenseOwnerIDPhoto       *model.OrderBy `json:"driving_liscense_owner_id_photo"`
	EngineNumber                      *model.OrderBy `json:"engine_number"`
	ID                                *model.OrderBy `json:"id"`
	IllegalNoticeNumberEndorsement    *model.OrderBy `json:"illegal_notice_number_endorsement"`
	IllegalNumberEndorsement          *model.OrderBy `json:"illegal_number_endorsement"`
	IncidentNumberEndorsement         *model.OrderBy `json:"incident_number_endorsement"`
	InitialRegistrationDate           *model.OrderBy `json:"initial_registration_date"`
	InsuranceExpiryTime               *model.OrderBy `json:"insurance_expiry_time"`
	IssueDateOfQuangongNumber         *model.OrderBy `json:"issue_date_of_quangong_number"`
	OwnerIDPhoto                      *model.OrderBy `json:"owner_id_photo"`
	ProcessingNotes                   *model.OrderBy `json:"processing_notes"`
	ProcessingTime                    *model.OrderBy `json:"processing_time"`
	Processor                         *model.OrderBy `json:"processor"`
	ReviewNotes                       *model.OrderBy `json:"review_notes"`
	ReviewStatus                      *model.OrderBy `json:"review_status"`
	ReviewTime                        *model.OrderBy `json:"review_time"`
	Reviewer                          *model.OrderBy `json:"reviewer"`
	SecondaryMaintenanceExpiryDate    *model.OrderBy `json:"secondary_maintenance_expiry_date"`
	SecondaryMaintenanceLocation      *model.OrderBy `json:"secondary_maintenance_location"`
	SigningAcceptanceApplicationTime  *model.OrderBy `json:"signing_acceptance_application_time"`
	ThirdPartyInsuranceCoverage       *model.OrderBy `json:"third_party_insurance_coverage"`
	ThirdPartyInsuranceExpiryTime     *model.OrderBy `json:"third_party_insurance_expiry_time"`
	ThirdPartyInsurancePolicyPicture  *model.OrderBy `json:"third_party_insurance_policy_picture"`
	TotalMass                         *model.OrderBy `json:"total_mass"`
	UpdateAt                          *model.OrderBy `json:"update_at"`
	UpdateBy                          *model.OrderBy `json:"update_by"`
	VehicleDescription                *model.OrderBy `json:"vehicle_description"`
	VehicleID                         *model.OrderBy `json:"vehicle_id"`
	VehicleNature                     *model.OrderBy `json:"vehicle_nature"`
	VehicleOperatingCertificateNumber *model.OrderBy `json:"vehicle_operating_certificate_number"`
	VehicleOperatingCertificatePhoto  *model.OrderBy `json:"vehicle_operating_certificate_photo"`
	VehiclePicture                    *model.OrderBy `json:"vehicle_picture"`
}

// aggregate min on columns
type MuckTruckCategoryInfoMinFields struct {
	ActualOwnerContactPhone           *string    `json:"actual_owner_contact_phone"`
	ActualOwnerIDNumber               *string    `json:"actual_owner_id_number"`
	ActualOwnerIDPhoto                *string    `json:"actual_owner_id_photo"`
	ActualOwnerName                   *string    `json:"actual_owner_name"`
	AnnualInspectionExpirationTime    *time.Time `json:"annual_inspection_expiration_time"`
	ApplyInspectionTime               *time.Time `json:"apply_inspection_time"`
	AxesNumber                        *int       `json:"axes_number"`
	BlacklistDeadline                 *time.Time `json:"blacklist_deadline"`
	CompulsoryInsurancePolicyPicture  *string    `json:"compulsory_insurance_policy_picture"`
	CreateAt                          *time.Time `json:"create_at"`
	CreateBy                          *string    `json:"create_by"`
	DeleteAt                          *time.Time `json:"delete_at"`
	DeleteBy                          *string    `json:"delete_by"`
	DrivingLicenseContactPhone        *string    `json:"driving_license_contact_phone"`
	DrivingLicenseIDNumber            *string    `json:"driving_license_id_number"`
	DrivingLiscenseOwnerIDPhoto       *string    `json:"driving_liscense_owner_id_photo"`
	EngineNumber                      *string    `json:"engine_number"`
	ID                                *int64     `json:"id"`
	IllegalNoticeNumberEndorsement    *string    `json:"illegal_notice_number_endorsement"`
	IllegalNumberEndorsement          *string    `json:"illegal_number_endorsement"`
	IncidentNumberEndorsement         *string    `json:"incident_number_endorsement"`
	InitialRegistrationDate           *time.Time `json:"initial_registration_date"`
	InsuranceExpiryTime               *time.Time `json:"insurance_expiry_time"`
	IssueDateOfQuangongNumber         *time.Time `json:"issue_date_of_quangong_number"`
	OwnerIDPhoto                      *string    `json:"owner_id_photo"`
	ProcessingNotes                   *string    `json:"processing_notes"`
	ProcessingTime                    *time.Time `json:"processing_time"`
	Processor                         *string    `json:"processor"`
	ReviewNotes                       *string    `json:"review_notes"`
	ReviewStatus                      *string    `json:"review_status"`
	ReviewTime                        *time.Time `json:"review_time"`
	Reviewer                          *string    `json:"reviewer"`
	SecondaryMaintenanceExpiryDate    *time.Time `json:"secondary_maintenance_expiry_date"`
	SecondaryMaintenanceLocation      *string    `json:"secondary_maintenance_location"`
	SigningAcceptanceApplicationTime  *time.Time `json:"signing_acceptance_application_time"`
	ThirdPartyInsuranceCoverage       *string    `json:"third_party_insurance_coverage"`
	ThirdPartyInsuranceExpiryTime     *time.Time `json:"third_party_insurance_expiry_time"`
	ThirdPartyInsurancePolicyPicture  *string    `json:"third_party_insurance_policy_picture"`
	TotalMass                         *float64   `json:"total_mass"`
	UpdateAt                          *time.Time `json:"update_at"`
	UpdateBy                          *string    `json:"update_by"`
	VehicleDescription                *string    `json:"vehicle_description"`
	VehicleID                         *string    `json:"vehicle_id"`
	VehicleNature                     *int       `json:"vehicle_nature"`
	VehicleOperatingCertificateNumber *string    `json:"vehicle_operating_certificate_number"`
	VehicleOperatingCertificatePhoto  *string    `json:"vehicle_operating_certificate_photo"`
	VehiclePicture                    *string    `json:"vehicle_picture"`
}

// order by min() on columns of table "muck_truck_category_info"
type MuckTruckCategoryInfoMinOrderBy struct {
	ActualOwnerContactPhone           *model.OrderBy `json:"actual_owner_contact_phone"`
	ActualOwnerIDNumber               *model.OrderBy `json:"actual_owner_id_number"`
	ActualOwnerIDPhoto                *model.OrderBy `json:"actual_owner_id_photo"`
	ActualOwnerName                   *model.OrderBy `json:"actual_owner_name"`
	AnnualInspectionExpirationTime    *model.OrderBy `json:"annual_inspection_expiration_time"`
	ApplyInspectionTime               *model.OrderBy `json:"apply_inspection_time"`
	AxesNumber                        *model.OrderBy `json:"axes_number"`
	BlacklistDeadline                 *model.OrderBy `json:"blacklist_deadline"`
	CompulsoryInsurancePolicyPicture  *model.OrderBy `json:"compulsory_insurance_policy_picture"`
	CreateAt                          *model.OrderBy `json:"create_at"`
	CreateBy                          *model.OrderBy `json:"create_by"`
	DeleteAt                          *model.OrderBy `json:"delete_at"`
	DeleteBy                          *model.OrderBy `json:"delete_by"`
	DrivingLicenseContactPhone        *model.OrderBy `json:"driving_license_contact_phone"`
	DrivingLicenseIDNumber            *model.OrderBy `json:"driving_license_id_number"`
	DrivingLiscenseOwnerIDPhoto       *model.OrderBy `json:"driving_liscense_owner_id_photo"`
	EngineNumber                      *model.OrderBy `json:"engine_number"`
	ID                                *model.OrderBy `json:"id"`
	IllegalNoticeNumberEndorsement    *model.OrderBy `json:"illegal_notice_number_endorsement"`
	IllegalNumberEndorsement          *model.OrderBy `json:"illegal_number_endorsement"`
	IncidentNumberEndorsement         *model.OrderBy `json:"incident_number_endorsement"`
	InitialRegistrationDate           *model.OrderBy `json:"initial_registration_date"`
	InsuranceExpiryTime               *model.OrderBy `json:"insurance_expiry_time"`
	IssueDateOfQuangongNumber         *model.OrderBy `json:"issue_date_of_quangong_number"`
	OwnerIDPhoto                      *model.OrderBy `json:"owner_id_photo"`
	ProcessingNotes                   *model.OrderBy `json:"processing_notes"`
	ProcessingTime                    *model.OrderBy `json:"processing_time"`
	Processor                         *model.OrderBy `json:"processor"`
	ReviewNotes                       *model.OrderBy `json:"review_notes"`
	ReviewStatus                      *model.OrderBy `json:"review_status"`
	ReviewTime                        *model.OrderBy `json:"review_time"`
	Reviewer                          *model.OrderBy `json:"reviewer"`
	SecondaryMaintenanceExpiryDate    *model.OrderBy `json:"secondary_maintenance_expiry_date"`
	SecondaryMaintenanceLocation      *model.OrderBy `json:"secondary_maintenance_location"`
	SigningAcceptanceApplicationTime  *model.OrderBy `json:"signing_acceptance_application_time"`
	ThirdPartyInsuranceCoverage       *model.OrderBy `json:"third_party_insurance_coverage"`
	ThirdPartyInsuranceExpiryTime     *model.OrderBy `json:"third_party_insurance_expiry_time"`
	ThirdPartyInsurancePolicyPicture  *model.OrderBy `json:"third_party_insurance_policy_picture"`
	TotalMass                         *model.OrderBy `json:"total_mass"`
	UpdateAt                          *model.OrderBy `json:"update_at"`
	UpdateBy                          *model.OrderBy `json:"update_by"`
	VehicleDescription                *model.OrderBy `json:"vehicle_description"`
	VehicleID                         *model.OrderBy `json:"vehicle_id"`
	VehicleNature                     *model.OrderBy `json:"vehicle_nature"`
	VehicleOperatingCertificateNumber *model.OrderBy `json:"vehicle_operating_certificate_number"`
	VehicleOperatingCertificatePhoto  *model.OrderBy `json:"vehicle_operating_certificate_photo"`
	VehiclePicture                    *model.OrderBy `json:"vehicle_picture"`
}

// response of any mutation on the table "muck_truck_category_info"
type MuckTruckCategoryInfoMutationResponse struct {
	// number of affected rows by the mutation
	AffectedRows int `json:"affected_rows"`
	// data of the affected rows by the mutation
	Returning []*MuckTruckCategoryInfo `json:"returning"`
}

// input type for inserting object relation for remote table "muck_truck_category_info"
type MuckTruckCategoryInfoObjRelInsertInput struct {
	Data       *MuckTruckCategoryInfoInsertInput `json:"data"`
	OnConflict *MuckTruckCategoryInfoOnConflict  `json:"on_conflict"`
}

// on conflict condition type for table "muck_truck_category_info"
type MuckTruckCategoryInfoOnConflict struct {
	Constraint    MuckTruckCategoryInfoConstraint     `json:"constraint"`
	UpdateColumns []MuckTruckCategoryInfoUpdateColumn `json:"update_columns"`
	Where         *MuckTruckCategoryInfoBoolExp       `json:"where"`
}

// ordering options when selecting data from "muck_truck_category_info"
type MuckTruckCategoryInfoOrderBy struct {
	ActualOwnerContactPhone           *model.OrderBy `json:"actual_owner_contact_phone"`
	ActualOwnerIDNumber               *model.OrderBy `json:"actual_owner_id_number"`
	ActualOwnerIDPhoto                *model.OrderBy `json:"actual_owner_id_photo"`
	ActualOwnerName                   *model.OrderBy `json:"actual_owner_name"`
	AnnualInspectionExpirationTime    *model.OrderBy `json:"annual_inspection_expiration_time"`
	ApplyInspectionTime               *model.OrderBy `json:"apply_inspection_time"`
	AxesNumber                        *model.OrderBy `json:"axes_number"`
	BlacklistDeadline                 *model.OrderBy `json:"blacklist_deadline"`
	CompulsoryInsurancePolicyPicture  *model.OrderBy `json:"compulsory_insurance_policy_picture"`
	CreateAt                          *model.OrderBy `json:"create_at"`
	CreateBy                          *model.OrderBy `json:"create_by"`
	DeleteAt                          *model.OrderBy `json:"delete_at"`
	DeleteBy                          *model.OrderBy `json:"delete_by"`
	DrivingLicenseContactPhone        *model.OrderBy `json:"driving_license_contact_phone"`
	DrivingLicenseIDNumber            *model.OrderBy `json:"driving_license_id_number"`
	DrivingLiscenseOwnerIDPhoto       *model.OrderBy `json:"driving_liscense_owner_id_photo"`
	EngineNumber                      *model.OrderBy `json:"engine_number"`
	ID                                *model.OrderBy `json:"id"`
	IllegalNoticeNumberEndorsement    *model.OrderBy `json:"illegal_notice_number_endorsement"`
	IllegalNumberEndorsement          *model.OrderBy `json:"illegal_number_endorsement"`
	IncidentNumberEndorsement         *model.OrderBy `json:"incident_number_endorsement"`
	InitialRegistrationDate           *model.OrderBy `json:"initial_registration_date"`
	InsuranceExpiryTime               *model.OrderBy `json:"insurance_expiry_time"`
	IsBlacklist                       *model.OrderBy `json:"is_blacklist"`
	IsDelete                          *model.OrderBy `json:"is_delete"`
	IsDueSecurityAlarmProcessing      *model.OrderBy `json:"is_due_security_alarm_processing"`
	IsFirstRegister                   *model.OrderBy `json:"is_first_register"`
	IsMuckOfficeAudit                 *model.OrderBy `json:"is_muck_office_audit"`
	IsSendSms                         *model.OrderBy `json:"is_send_sms"`
	IssueDateOfQuangongNumber         *model.OrderBy `json:"issue_date_of_quangong_number"`
	OwnerIDPhoto                      *model.OrderBy `json:"owner_id_photo"`
	ProcessingNotes                   *model.OrderBy `json:"processing_notes"`
	ProcessingTime                    *model.OrderBy `json:"processing_time"`
	Processor                         *model.OrderBy `json:"processor"`
	ReviewNotes                       *model.OrderBy `json:"review_notes"`
	ReviewStatus                      *model.OrderBy `json:"review_status"`
	ReviewTime                        *model.OrderBy `json:"review_time"`
	Reviewer                          *model.OrderBy `json:"reviewer"`
	SecondaryMaintenanceExpiryDate    *model.OrderBy `json:"secondary_maintenance_expiry_date"`
	SecondaryMaintenanceLocation      *model.OrderBy `json:"secondary_maintenance_location"`
	SigningAcceptanceApplicationTime  *model.OrderBy `json:"signing_acceptance_application_time"`
	ThirdPartyInsuranceCoverage       *model.OrderBy `json:"third_party_insurance_coverage"`
	ThirdPartyInsuranceExpiryTime     *model.OrderBy `json:"third_party_insurance_expiry_time"`
	ThirdPartyInsurancePolicyPicture  *model.OrderBy `json:"third_party_insurance_policy_picture"`
	TotalMass                         *model.OrderBy `json:"total_mass"`
	UpdateAt                          *model.OrderBy `json:"update_at"`
	UpdateBy                          *model.OrderBy `json:"update_by"`
	VehicleDescription                *model.OrderBy `json:"vehicle_description"`
	VehicleID                         *model.OrderBy `json:"vehicle_id"`
	VehicleNature                     *model.OrderBy `json:"vehicle_nature"`
	VehicleOperatingCertificateNumber *model.OrderBy `json:"vehicle_operating_certificate_number"`
	VehicleOperatingCertificatePhoto  *model.OrderBy `json:"vehicle_operating_certificate_photo"`
	VehiclePicture                    *model.OrderBy `json:"vehicle_picture"`
}

// primary key columns input for table: "muck_truck_category_info"
type MuckTruckCategoryInfoPkColumnsInput struct {
	// 主键
	ID int64 `json:"id"`
}

// input type for updating data in table "muck_truck_category_info"
type MuckTruckCategoryInfoSetInput struct {
	ActualOwnerContactPhone           *string    `json:"actual_owner_contact_phone"`
	ActualOwnerIDNumber               *string    `json:"actual_owner_id_number"`
	ActualOwnerIDPhoto                *string    `json:"actual_owner_id_photo"`
	ActualOwnerName                   *string    `json:"actual_owner_name"`
	AnnualInspectionExpirationTime    *time.Time `json:"annual_inspection_expiration_time"`
	ApplyInspectionTime               *time.Time `json:"apply_inspection_time"`
	AxesNumber                        *int       `json:"axes_number"`
	BlacklistDeadline                 *time.Time `json:"blacklist_deadline"`
	CompulsoryInsurancePolicyPicture  *string    `json:"compulsory_insurance_policy_picture"`
	CreateAt                          *time.Time `json:"create_at"`
	CreateBy                          *string    `json:"create_by"`
	DeleteAt                          *time.Time `json:"delete_at"`
	DeleteBy                          *string    `json:"delete_by"`
	DrivingLicenseContactPhone        *string    `json:"driving_license_contact_phone"`
	DrivingLicenseIDNumber            *string    `json:"driving_license_id_number"`
	DrivingLiscenseOwnerIDPhoto       *string    `json:"driving_liscense_owner_id_photo"`
	EngineNumber                      *string    `json:"engine_number"`
	ID                                *int64     `json:"id"`
	IllegalNoticeNumberEndorsement    *string    `json:"illegal_notice_number_endorsement"`
	IllegalNumberEndorsement          *string    `json:"illegal_number_endorsement"`
	IncidentNumberEndorsement         *string    `json:"incident_number_endorsement"`
	InitialRegistrationDate           *time.Time `json:"initial_registration_date"`
	InsuranceExpiryTime               *time.Time `json:"insurance_expiry_time"`
	IsBlacklist                       *bool      `json:"is_blacklist"`
	IsDelete                          *bool      `json:"is_delete"`
	IsDueSecurityAlarmProcessing      *bool      `json:"is_due_security_alarm_processing"`
	IsFirstRegister                   *bool      `json:"is_first_register"`
	IsMuckOfficeAudit                 *bool      `json:"is_muck_office_audit"`
	IsSendSms                         *bool      `json:"is_send_sms"`
	IssueDateOfQuangongNumber         *time.Time `json:"issue_date_of_quangong_number"`
	OwnerIDPhoto                      *string    `json:"owner_id_photo"`
	ProcessingNotes                   *string    `json:"processing_notes"`
	ProcessingTime                    *time.Time `json:"processing_time"`
	Processor                         *string    `json:"processor"`
	ReviewNotes                       *string    `json:"review_notes"`
	ReviewStatus                      *string    `json:"review_status"`
	ReviewTime                        *time.Time `json:"review_time"`
	Reviewer                          *string    `json:"reviewer"`
	SecondaryMaintenanceExpiryDate    *time.Time `json:"secondary_maintenance_expiry_date"`
	SecondaryMaintenanceLocation      *string    `json:"secondary_maintenance_location"`
	SigningAcceptanceApplicationTime  *time.Time `json:"signing_acceptance_application_time"`
	ThirdPartyInsuranceCoverage       *string    `json:"third_party_insurance_coverage"`
	ThirdPartyInsuranceExpiryTime     *time.Time `json:"third_party_insurance_expiry_time"`
	ThirdPartyInsurancePolicyPicture  *string    `json:"third_party_insurance_policy_picture"`
	TotalMass                         *float64   `json:"total_mass"`
	UpdateAt                          *time.Time `json:"update_at"`
	UpdateBy                          *string    `json:"update_by"`
	VehicleDescription                *string    `json:"vehicle_description"`
	VehicleID                         *string    `json:"vehicle_id"`
	VehicleNature                     *int       `json:"vehicle_nature"`
	VehicleOperatingCertificateNumber *string    `json:"vehicle_operating_certificate_number"`
	VehicleOperatingCertificatePhoto  *string    `json:"vehicle_operating_certificate_photo"`
	VehiclePicture                    *string    `json:"vehicle_picture"`
}

// aggregate stddev on columns
type MuckTruckCategoryInfoStddevFields struct {
	AxesNumber    *float64 `json:"axes_number"`
	ID            *float64 `json:"id"`
	TotalMass     *float64 `json:"total_mass"`
	VehicleNature *float64 `json:"vehicle_nature"`
}

// order by stddev() on columns of table "muck_truck_category_info"
type MuckTruckCategoryInfoStddevOrderBy struct {
	AxesNumber    *model.OrderBy `json:"axes_number"`
	ID            *model.OrderBy `json:"id"`
	TotalMass     *model.OrderBy `json:"total_mass"`
	VehicleNature *model.OrderBy `json:"vehicle_nature"`
}

// aggregate stddev_pop on columns
type MuckTruckCategoryInfoStddevPopFields struct {
	AxesNumber    *float64 `json:"axes_number"`
	ID            *float64 `json:"id"`
	TotalMass     *float64 `json:"total_mass"`
	VehicleNature *float64 `json:"vehicle_nature"`
}

// order by stddev_pop() on columns of table "muck_truck_category_info"
type MuckTruckCategoryInfoStddevPopOrderBy struct {
	AxesNumber    *model.OrderBy `json:"axes_number"`
	ID            *model.OrderBy `json:"id"`
	TotalMass     *model.OrderBy `json:"total_mass"`
	VehicleNature *model.OrderBy `json:"vehicle_nature"`
}

// aggregate stddev_samp on columns
type MuckTruckCategoryInfoStddevSampFields struct {
	AxesNumber    *float64 `json:"axes_number"`
	ID            *float64 `json:"id"`
	TotalMass     *float64 `json:"total_mass"`
	VehicleNature *float64 `json:"vehicle_nature"`
}

// order by stddev_samp() on columns of table "muck_truck_category_info"
type MuckTruckCategoryInfoStddevSampOrderBy struct {
	AxesNumber    *model.OrderBy `json:"axes_number"`
	ID            *model.OrderBy `json:"id"`
	TotalMass     *model.OrderBy `json:"total_mass"`
	VehicleNature *model.OrderBy `json:"vehicle_nature"`
}

// aggregate sum on columns
type MuckTruckCategoryInfoSumFields struct {
	AxesNumber    *int     `json:"axes_number"`
	ID            *int64   `json:"id"`
	TotalMass     *float64 `json:"total_mass"`
	VehicleNature *int     `json:"vehicle_nature"`
}

// order by sum() on columns of table "muck_truck_category_info"
type MuckTruckCategoryInfoSumOrderBy struct {
	AxesNumber    *model.OrderBy `json:"axes_number"`
	ID            *model.OrderBy `json:"id"`
	TotalMass     *model.OrderBy `json:"total_mass"`
	VehicleNature *model.OrderBy `json:"vehicle_nature"`
}

// aggregate var_pop on columns
type MuckTruckCategoryInfoVarPopFields struct {
	AxesNumber    *float64 `json:"axes_number"`
	ID            *float64 `json:"id"`
	TotalMass     *float64 `json:"total_mass"`
	VehicleNature *float64 `json:"vehicle_nature"`
}

// order by var_pop() on columns of table "muck_truck_category_info"
type MuckTruckCategoryInfoVarPopOrderBy struct {
	AxesNumber    *model.OrderBy `json:"axes_number"`
	ID            *model.OrderBy `json:"id"`
	TotalMass     *model.OrderBy `json:"total_mass"`
	VehicleNature *model.OrderBy `json:"vehicle_nature"`
}

// aggregate var_samp on columns
type MuckTruckCategoryInfoVarSampFields struct {
	AxesNumber    *float64 `json:"axes_number"`
	ID            *float64 `json:"id"`
	TotalMass     *float64 `json:"total_mass"`
	VehicleNature *float64 `json:"vehicle_nature"`
}

// order by var_samp() on columns of table "muck_truck_category_info"
type MuckTruckCategoryInfoVarSampOrderBy struct {
	AxesNumber    *model.OrderBy `json:"axes_number"`
	ID            *model.OrderBy `json:"id"`
	TotalMass     *model.OrderBy `json:"total_mass"`
	VehicleNature *model.OrderBy `json:"vehicle_nature"`
}

// aggregate variance on columns
type MuckTruckCategoryInfoVarianceFields struct {
	AxesNumber    *float64 `json:"axes_number"`
	ID            *float64 `json:"id"`
	TotalMass     *float64 `json:"total_mass"`
	VehicleNature *float64 `json:"vehicle_nature"`
}

// order by variance() on columns of table "muck_truck_category_info"
type MuckTruckCategoryInfoVarianceOrderBy struct {
	AxesNumber    *model.OrderBy `json:"axes_number"`
	ID            *model.OrderBy `json:"id"`
	TotalMass     *model.OrderBy `json:"total_mass"`
	VehicleNature *model.OrderBy `json:"vehicle_nature"`
}

// aggregated selection of "muck_truck_info"
type MuckTruckInfoAggregate struct {
	Aggregate *MuckTruckInfoAggregateFields `json:"aggregate"`
	Nodes     []*MuckTruckInfo              `json:"nodes"`
}

// aggregate fields of "muck_truck_info"
type MuckTruckInfoAggregateFields struct {
	Avg        *MuckTruckInfoAvgFields        `json:"avg"`
	Count      *int                           `json:"count"`
	Max        *MuckTruckInfoMaxFields        `json:"max"`
	Min        *MuckTruckInfoMinFields        `json:"min"`
	Stddev     *MuckTruckInfoStddevFields     `json:"stddev"`
	StddevPop  *MuckTruckInfoStddevPopFields  `json:"stddev_pop"`
	StddevSamp *MuckTruckInfoStddevSampFields `json:"stddev_samp"`
	Sum        *MuckTruckInfoSumFields        `json:"sum"`
	VarPop     *MuckTruckInfoVarPopFields     `json:"var_pop"`
	VarSamp    *MuckTruckInfoVarSampFields    `json:"var_samp"`
	Variance   *MuckTruckInfoVarianceFields   `json:"variance"`
}

// order by aggregate values of table "muck_truck_info"
type MuckTruckInfoAggregateOrderBy struct {
	Avg        *MuckTruckInfoAvgOrderBy        `json:"avg"`
	Count      *model.OrderBy                  `json:"count"`
	Max        *MuckTruckInfoMaxOrderBy        `json:"max"`
	Min        *MuckTruckInfoMinOrderBy        `json:"min"`
	Stddev     *MuckTruckInfoStddevOrderBy     `json:"stddev"`
	StddevPop  *MuckTruckInfoStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *MuckTruckInfoStddevSampOrderBy `json:"stddev_samp"`
	Sum        *MuckTruckInfoSumOrderBy        `json:"sum"`
	VarPop     *MuckTruckInfoVarPopOrderBy     `json:"var_pop"`
	VarSamp    *MuckTruckInfoVarSampOrderBy    `json:"var_samp"`
	Variance   *MuckTruckInfoVarianceOrderBy   `json:"variance"`
}

// input type for inserting array relation for remote table "muck_truck_info"
type MuckTruckInfoArrRelInsertInput struct {
	Data       []*MuckTruckInfoInsertInput `json:"data"`
	OnConflict *MuckTruckInfoOnConflict    `json:"on_conflict"`
}

// aggregate avg on columns
type MuckTruckInfoAvgFields struct {
	AreaID        *float64 `json:"area_id"`
	MuckTruckID   *float64 `json:"muck_truck_id"`
	MuckTruckType *float64 `json:"muck_truck_type"`
	ServerID      *float64 `json:"server_id"`
}

// order by avg() on columns of table "muck_truck_info"
type MuckTruckInfoAvgOrderBy struct {
	AreaID        *model.OrderBy `json:"area_id"`
	MuckTruckID   *model.OrderBy `json:"muck_truck_id"`
	MuckTruckType *model.OrderBy `json:"muck_truck_type"`
	ServerID      *model.OrderBy `json:"server_id"`
}

// Boolean expression to filter rows from the table "muck_truck_info". All fields are combined with a logical 'AND'.
type MuckTruckInfoBoolExp struct {
	And                []*MuckTruckInfoBoolExp         `json:"_and"`
	Not                *MuckTruckInfoBoolExp           `json:"_not"`
	Or                 []*MuckTruckInfoBoolExp         `json:"_or"`
	AreaID             *model.BigintComparisonExp      `json:"area_id"`
	CreateAt           *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy           *model.StringComparisonExp      `json:"create_by"`
	DeleteAt           *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy           *model.StringComparisonExp      `json:"delete_by"`
	ExpiryDate         *model.TimestamptzComparisonExp `json:"expiry_date"`
	FakeIP             *model.StringComparisonExp      `json:"fake_ip"`
	IsReserveLibrary   *model.BooleanComparisonExp     `json:"is_reserve_library"`
	LoadCategory       *model.StringComparisonExp      `json:"load_category"`
	MobileCardLocation *model.StringComparisonExp      `json:"mobile_card_location"`
	MuckTruckID        *model.BigintComparisonExp      `json:"muck_truck_id"`
	MuckTruckType      *model.IntComparisonExp         `json:"muck_truck_type"`
	RegistrationDate   *model.TimestamptzComparisonExp `json:"registration_date"`
	SelfNumber         *model.StringComparisonExp      `json:"self_number"`
	ServerID           *model.BigintComparisonExp      `json:"server_id"`
	SimCardNumber      *model.StringComparisonExp      `json:"sim_card_number"`
	UpdateAt           *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy           *model.StringComparisonExp      `json:"update_by"`
	VehicleID          *model.StringComparisonExp      `json:"vehicle_id"`
}

// input type for incrementing integer column in table "muck_truck_info"
type MuckTruckInfoIncInput struct {
	AreaID        *int64 `json:"area_id"`
	MuckTruckID   *int64 `json:"muck_truck_id"`
	MuckTruckType *int   `json:"muck_truck_type"`
	ServerID      *int64 `json:"server_id"`
}

// input type for inserting data into table "muck_truck_info"
type MuckTruckInfoInsertInput struct {
	AreaID             *int64     `json:"area_id"`
	CreateAt           *time.Time `json:"create_at"`
	CreateBy           *string    `json:"create_by"`
	DeleteAt           *time.Time `json:"delete_at"`
	DeleteBy           *string    `json:"delete_by"`
	ExpiryDate         *time.Time `json:"expiry_date"`
	FakeIP             *string    `json:"fake_ip"`
	IsReserveLibrary   *bool      `json:"is_reserve_library"`
	LoadCategory       *string    `json:"load_category"`
	MobileCardLocation *string    `json:"mobile_card_location"`
	MuckTruckID        *int64     `json:"muck_truck_id"`
	MuckTruckType      *int       `json:"muck_truck_type"`
	RegistrationDate   *time.Time `json:"registration_date"`
	SelfNumber         *string    `json:"self_number"`
	ServerID           *int64     `json:"server_id"`
	SimCardNumber      *string    `json:"sim_card_number"`
	UpdateAt           *time.Time `json:"update_at"`
	UpdateBy           *string    `json:"update_by"`
	VehicleID          *string    `json:"vehicle_id"`
}

// aggregate max on columns
type MuckTruckInfoMaxFields struct {
	AreaID             *int64     `json:"area_id"`
	CreateAt           *time.Time `json:"create_at"`
	CreateBy           *string    `json:"create_by"`
	DeleteAt           *time.Time `json:"delete_at"`
	DeleteBy           *string    `json:"delete_by"`
	ExpiryDate         *time.Time `json:"expiry_date"`
	FakeIP             *string    `json:"fake_ip"`
	LoadCategory       *string    `json:"load_category"`
	MobileCardLocation *string    `json:"mobile_card_location"`
	MuckTruckID        *int64     `json:"muck_truck_id"`
	MuckTruckType      *int       `json:"muck_truck_type"`
	RegistrationDate   *time.Time `json:"registration_date"`
	SelfNumber         *string    `json:"self_number"`
	ServerID           *int64     `json:"server_id"`
	SimCardNumber      *string    `json:"sim_card_number"`
	UpdateAt           *time.Time `json:"update_at"`
	UpdateBy           *string    `json:"update_by"`
	VehicleID          *string    `json:"vehicle_id"`
}

// order by max() on columns of table "muck_truck_info"
type MuckTruckInfoMaxOrderBy struct {
	AreaID             *model.OrderBy `json:"area_id"`
	CreateAt           *model.OrderBy `json:"create_at"`
	CreateBy           *model.OrderBy `json:"create_by"`
	DeleteAt           *model.OrderBy `json:"delete_at"`
	DeleteBy           *model.OrderBy `json:"delete_by"`
	ExpiryDate         *model.OrderBy `json:"expiry_date"`
	FakeIP             *model.OrderBy `json:"fake_ip"`
	LoadCategory       *model.OrderBy `json:"load_category"`
	MobileCardLocation *model.OrderBy `json:"mobile_card_location"`
	MuckTruckID        *model.OrderBy `json:"muck_truck_id"`
	MuckTruckType      *model.OrderBy `json:"muck_truck_type"`
	RegistrationDate   *model.OrderBy `json:"registration_date"`
	SelfNumber         *model.OrderBy `json:"self_number"`
	ServerID           *model.OrderBy `json:"server_id"`
	SimCardNumber      *model.OrderBy `json:"sim_card_number"`
	UpdateAt           *model.OrderBy `json:"update_at"`
	UpdateBy           *model.OrderBy `json:"update_by"`
	VehicleID          *model.OrderBy `json:"vehicle_id"`
}

// aggregate min on columns
type MuckTruckInfoMinFields struct {
	AreaID             *int64     `json:"area_id"`
	CreateAt           *time.Time `json:"create_at"`
	CreateBy           *string    `json:"create_by"`
	DeleteAt           *time.Time `json:"delete_at"`
	DeleteBy           *string    `json:"delete_by"`
	ExpiryDate         *time.Time `json:"expiry_date"`
	FakeIP             *string    `json:"fake_ip"`
	LoadCategory       *string    `json:"load_category"`
	MobileCardLocation *string    `json:"mobile_card_location"`
	MuckTruckID        *int64     `json:"muck_truck_id"`
	MuckTruckType      *int       `json:"muck_truck_type"`
	RegistrationDate   *time.Time `json:"registration_date"`
	SelfNumber         *string    `json:"self_number"`
	ServerID           *int64     `json:"server_id"`
	SimCardNumber      *string    `json:"sim_card_number"`
	UpdateAt           *time.Time `json:"update_at"`
	UpdateBy           *string    `json:"update_by"`
	VehicleID          *string    `json:"vehicle_id"`
}

// order by min() on columns of table "muck_truck_info"
type MuckTruckInfoMinOrderBy struct {
	AreaID             *model.OrderBy `json:"area_id"`
	CreateAt           *model.OrderBy `json:"create_at"`
	CreateBy           *model.OrderBy `json:"create_by"`
	DeleteAt           *model.OrderBy `json:"delete_at"`
	DeleteBy           *model.OrderBy `json:"delete_by"`
	ExpiryDate         *model.OrderBy `json:"expiry_date"`
	FakeIP             *model.OrderBy `json:"fake_ip"`
	LoadCategory       *model.OrderBy `json:"load_category"`
	MobileCardLocation *model.OrderBy `json:"mobile_card_location"`
	MuckTruckID        *model.OrderBy `json:"muck_truck_id"`
	MuckTruckType      *model.OrderBy `json:"muck_truck_type"`
	RegistrationDate   *model.OrderBy `json:"registration_date"`
	SelfNumber         *model.OrderBy `json:"self_number"`
	ServerID           *model.OrderBy `json:"server_id"`
	SimCardNumber      *model.OrderBy `json:"sim_card_number"`
	UpdateAt           *model.OrderBy `json:"update_at"`
	UpdateBy           *model.OrderBy `json:"update_by"`
	VehicleID          *model.OrderBy `json:"vehicle_id"`
}

// response of any mutation on the table "muck_truck_info"
type MuckTruckInfoMutationResponse struct {
	// number of affected rows by the mutation
	AffectedRows int `json:"affected_rows"`
	// data of the affected rows by the mutation
	Returning []*MuckTruckInfo `json:"returning"`
}

// input type for inserting object relation for remote table "muck_truck_info"
type MuckTruckInfoObjRelInsertInput struct {
	Data       *MuckTruckInfoInsertInput `json:"data"`
	OnConflict *MuckTruckInfoOnConflict  `json:"on_conflict"`
}

// on conflict condition type for table "muck_truck_info"
type MuckTruckInfoOnConflict struct {
	Constraint    MuckTruckInfoConstraint     `json:"constraint"`
	UpdateColumns []MuckTruckInfoUpdateColumn `json:"update_columns"`
	Where         *MuckTruckInfoBoolExp       `json:"where"`
}

// ordering options when selecting data from "muck_truck_info"
type MuckTruckInfoOrderBy struct {
	AreaID             *model.OrderBy `json:"area_id"`
	CreateAt           *model.OrderBy `json:"create_at"`
	CreateBy           *model.OrderBy `json:"create_by"`
	DeleteAt           *model.OrderBy `json:"delete_at"`
	DeleteBy           *model.OrderBy `json:"delete_by"`
	ExpiryDate         *model.OrderBy `json:"expiry_date"`
	FakeIP             *model.OrderBy `json:"fake_ip"`
	IsReserveLibrary   *model.OrderBy `json:"is_reserve_library"`
	LoadCategory       *model.OrderBy `json:"load_category"`
	MobileCardLocation *model.OrderBy `json:"mobile_card_location"`
	MuckTruckID        *model.OrderBy `json:"muck_truck_id"`
	MuckTruckType      *model.OrderBy `json:"muck_truck_type"`
	RegistrationDate   *model.OrderBy `json:"registration_date"`
	SelfNumber         *model.OrderBy `json:"self_number"`
	ServerID           *model.OrderBy `json:"server_id"`
	SimCardNumber      *model.OrderBy `json:"sim_card_number"`
	UpdateAt           *model.OrderBy `json:"update_at"`
	UpdateBy           *model.OrderBy `json:"update_by"`
	VehicleID          *model.OrderBy `json:"vehicle_id"`
}

// primary key columns input for table: "muck_truck_info"
type MuckTruckInfoPkColumnsInput struct {
	// 主键
	MuckTruckID int64 `json:"muck_truck_id"`
}

// input type for updating data in table "muck_truck_info"
type MuckTruckInfoSetInput struct {
	AreaID             *int64     `json:"area_id"`
	CreateAt           *time.Time `json:"create_at"`
	CreateBy           *string    `json:"create_by"`
	DeleteAt           *time.Time `json:"delete_at"`
	DeleteBy           *string    `json:"delete_by"`
	ExpiryDate         *time.Time `json:"expiry_date"`
	FakeIP             *string    `json:"fake_ip"`
	IsReserveLibrary   *bool      `json:"is_reserve_library"`
	LoadCategory       *string    `json:"load_category"`
	MobileCardLocation *string    `json:"mobile_card_location"`
	MuckTruckID        *int64     `json:"muck_truck_id"`
	MuckTruckType      *int       `json:"muck_truck_type"`
	RegistrationDate   *time.Time `json:"registration_date"`
	SelfNumber         *string    `json:"self_number"`
	ServerID           *int64     `json:"server_id"`
	SimCardNumber      *string    `json:"sim_card_number"`
	UpdateAt           *time.Time `json:"update_at"`
	UpdateBy           *string    `json:"update_by"`
	VehicleID          *string    `json:"vehicle_id"`
}

// aggregate stddev on columns
type MuckTruckInfoStddevFields struct {
	AreaID        *float64 `json:"area_id"`
	MuckTruckID   *float64 `json:"muck_truck_id"`
	MuckTruckType *float64 `json:"muck_truck_type"`
	ServerID      *float64 `json:"server_id"`
}

// order by stddev() on columns of table "muck_truck_info"
type MuckTruckInfoStddevOrderBy struct {
	AreaID        *model.OrderBy `json:"area_id"`
	MuckTruckID   *model.OrderBy `json:"muck_truck_id"`
	MuckTruckType *model.OrderBy `json:"muck_truck_type"`
	ServerID      *model.OrderBy `json:"server_id"`
}

// aggregate stddev_pop on columns
type MuckTruckInfoStddevPopFields struct {
	AreaID        *float64 `json:"area_id"`
	MuckTruckID   *float64 `json:"muck_truck_id"`
	MuckTruckType *float64 `json:"muck_truck_type"`
	ServerID      *float64 `json:"server_id"`
}

// order by stddev_pop() on columns of table "muck_truck_info"
type MuckTruckInfoStddevPopOrderBy struct {
	AreaID        *model.OrderBy `json:"area_id"`
	MuckTruckID   *model.OrderBy `json:"muck_truck_id"`
	MuckTruckType *model.OrderBy `json:"muck_truck_type"`
	ServerID      *model.OrderBy `json:"server_id"`
}

// aggregate stddev_samp on columns
type MuckTruckInfoStddevSampFields struct {
	AreaID        *float64 `json:"area_id"`
	MuckTruckID   *float64 `json:"muck_truck_id"`
	MuckTruckType *float64 `json:"muck_truck_type"`
	ServerID      *float64 `json:"server_id"`
}

// order by stddev_samp() on columns of table "muck_truck_info"
type MuckTruckInfoStddevSampOrderBy struct {
	AreaID        *model.OrderBy `json:"area_id"`
	MuckTruckID   *model.OrderBy `json:"muck_truck_id"`
	MuckTruckType *model.OrderBy `json:"muck_truck_type"`
	ServerID      *model.OrderBy `json:"server_id"`
}

// aggregate sum on columns
type MuckTruckInfoSumFields struct {
	AreaID        *int64 `json:"area_id"`
	MuckTruckID   *int64 `json:"muck_truck_id"`
	MuckTruckType *int   `json:"muck_truck_type"`
	ServerID      *int64 `json:"server_id"`
}

// order by sum() on columns of table "muck_truck_info"
type MuckTruckInfoSumOrderBy struct {
	AreaID        *model.OrderBy `json:"area_id"`
	MuckTruckID   *model.OrderBy `json:"muck_truck_id"`
	MuckTruckType *model.OrderBy `json:"muck_truck_type"`
	ServerID      *model.OrderBy `json:"server_id"`
}

// aggregate var_pop on columns
type MuckTruckInfoVarPopFields struct {
	AreaID        *float64 `json:"area_id"`
	MuckTruckID   *float64 `json:"muck_truck_id"`
	MuckTruckType *float64 `json:"muck_truck_type"`
	ServerID      *float64 `json:"server_id"`
}

// order by var_pop() on columns of table "muck_truck_info"
type MuckTruckInfoVarPopOrderBy struct {
	AreaID        *model.OrderBy `json:"area_id"`
	MuckTruckID   *model.OrderBy `json:"muck_truck_id"`
	MuckTruckType *model.OrderBy `json:"muck_truck_type"`
	ServerID      *model.OrderBy `json:"server_id"`
}

// aggregate var_samp on columns
type MuckTruckInfoVarSampFields struct {
	AreaID        *float64 `json:"area_id"`
	MuckTruckID   *float64 `json:"muck_truck_id"`
	MuckTruckType *float64 `json:"muck_truck_type"`
	ServerID      *float64 `json:"server_id"`
}

// order by var_samp() on columns of table "muck_truck_info"
type MuckTruckInfoVarSampOrderBy struct {
	AreaID        *model.OrderBy `json:"area_id"`
	MuckTruckID   *model.OrderBy `json:"muck_truck_id"`
	MuckTruckType *model.OrderBy `json:"muck_truck_type"`
	ServerID      *model.OrderBy `json:"server_id"`
}

// aggregate variance on columns
type MuckTruckInfoVarianceFields struct {
	AreaID        *float64 `json:"area_id"`
	MuckTruckID   *float64 `json:"muck_truck_id"`
	MuckTruckType *float64 `json:"muck_truck_type"`
	ServerID      *float64 `json:"server_id"`
}

// order by variance() on columns of table "muck_truck_info"
type MuckTruckInfoVarianceOrderBy struct {
	AreaID        *model.OrderBy `json:"area_id"`
	MuckTruckID   *model.OrderBy `json:"muck_truck_id"`
	MuckTruckType *model.OrderBy `json:"muck_truck_type"`
	ServerID      *model.OrderBy `json:"server_id"`
}

// aggregated selection of "muck_truck_preview_number"
type MuckTruckPreviewNumberAggregate struct {
	Aggregate *MuckTruckPreviewNumberAggregateFields `json:"aggregate"`
	Nodes     []*MuckTruckPreviewNumber              `json:"nodes"`
}

// aggregate fields of "muck_truck_preview_number"
type MuckTruckPreviewNumberAggregateFields struct {
	Avg        *MuckTruckPreviewNumberAvgFields        `json:"avg"`
	Count      *int                                    `json:"count"`
	Max        *MuckTruckPreviewNumberMaxFields        `json:"max"`
	Min        *MuckTruckPreviewNumberMinFields        `json:"min"`
	Stddev     *MuckTruckPreviewNumberStddevFields     `json:"stddev"`
	StddevPop  *MuckTruckPreviewNumberStddevPopFields  `json:"stddev_pop"`
	StddevSamp *MuckTruckPreviewNumberStddevSampFields `json:"stddev_samp"`
	Sum        *MuckTruckPreviewNumberSumFields        `json:"sum"`
	VarPop     *MuckTruckPreviewNumberVarPopFields     `json:"var_pop"`
	VarSamp    *MuckTruckPreviewNumberVarSampFields    `json:"var_samp"`
	Variance   *MuckTruckPreviewNumberVarianceFields   `json:"variance"`
}

// order by aggregate values of table "muck_truck_preview_number"
type MuckTruckPreviewNumberAggregateOrderBy struct {
	Avg        *MuckTruckPreviewNumberAvgOrderBy        `json:"avg"`
	Count      *model.OrderBy                           `json:"count"`
	Max        *MuckTruckPreviewNumberMaxOrderBy        `json:"max"`
	Min        *MuckTruckPreviewNumberMinOrderBy        `json:"min"`
	Stddev     *MuckTruckPreviewNumberStddevOrderBy     `json:"stddev"`
	StddevPop  *MuckTruckPreviewNumberStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *MuckTruckPreviewNumberStddevSampOrderBy `json:"stddev_samp"`
	Sum        *MuckTruckPreviewNumberSumOrderBy        `json:"sum"`
	VarPop     *MuckTruckPreviewNumberVarPopOrderBy     `json:"var_pop"`
	VarSamp    *MuckTruckPreviewNumberVarSampOrderBy    `json:"var_samp"`
	Variance   *MuckTruckPreviewNumberVarianceOrderBy   `json:"variance"`
}

// input type for inserting array relation for remote table "muck_truck_preview_number"
type MuckTruckPreviewNumberArrRelInsertInput struct {
	Data       []*MuckTruckPreviewNumberInsertInput `json:"data"`
	OnConflict *MuckTruckPreviewNumberOnConflict    `json:"on_conflict"`
}

// aggregate avg on columns
type MuckTruckPreviewNumberAvgFields struct {
	ConfirmStatus           *float64 `json:"confirm_status"`
	ID                      *float64 `json:"id"`
	ProductionStatus        *float64 `json:"production_status"`
	ProductionTimes         *float64 `json:"production_times"`
	UnlawfulViolationNumber *float64 `json:"unlawful_violation_number"`
}

// order by avg() on columns of table "muck_truck_preview_number"
type MuckTruckPreviewNumberAvgOrderBy struct {
	ConfirmStatus           *model.OrderBy `json:"confirm_status"`
	ID                      *model.OrderBy `json:"id"`
	ProductionStatus        *model.OrderBy `json:"production_status"`
	ProductionTimes         *model.OrderBy `json:"production_times"`
	UnlawfulViolationNumber *model.OrderBy `json:"unlawful_violation_number"`
}

// Boolean expression to filter rows from the table "muck_truck_preview_number". All fields are combined with a logical 'AND'.
type MuckTruckPreviewNumberBoolExp struct {
	And                     []*MuckTruckPreviewNumberBoolExp `json:"_and"`
	Not                     *MuckTruckPreviewNumberBoolExp   `json:"_not"`
	Or                      []*MuckTruckPreviewNumberBoolExp `json:"_or"`
	ConfirmStatus           *model.IntComparisonExp          `json:"confirm_status"`
	ConfirmTime             *model.TimestamptzComparisonExp  `json:"confirm_time"`
	Confirmor               *model.StringComparisonExp       `json:"confirmor"`
	ContactPerson           *model.StringComparisonExp       `json:"contact_person"`
	ContactPhone            *model.StringComparisonExp       `json:"contact_phone"`
	CreateBy                *model.StringComparisonExp       `json:"create_by"`
	DeleteAt                *model.TimestamptzComparisonExp  `json:"delete_at"`
	DeleteBy                *model.StringComparisonExp       `json:"delete_by"`
	FrontLicensePlate       *model.StringComparisonExp       `json:"front_license_plate"`
	ID                      *model.BigintComparisonExp       `json:"id"`
	InitialRegistrationDate *model.TimestamptzComparisonExp  `json:"initial_registration_date"`
	IsDelete                *model.BooleanComparisonExp      `json:"is_delete"`
	IsRegisterSaleOrder     *model.BooleanComparisonExp      `json:"is_register_sale_order"`
	IsReviewAutomatically   *model.BooleanComparisonExp      `json:"is_review_automatically"`
	MarkingTime             *model.TimestamptzComparisonExp  `json:"marking_time"`
	OriginalNumber          *model.StringComparisonExp       `json:"original_number"`
	ProductionStatus        *model.IntComparisonExp          `json:"production_status"`
	ProductionTime          *model.TimestamptzComparisonExp  `json:"production_time"`
	ProductionTimes         *model.IntComparisonExp          `json:"production_times"`
	RearLicensePlate        *model.StringComparisonExp       `json:"rear_license_plate"`
	RegistrationTime        *model.TimestamptzComparisonExp  `json:"registration_time"`
	Remarks                 *model.StringComparisonExp       `json:"remarks"`
	SideLicensePlate        *model.StringComparisonExp       `json:"side_license_plate"`
	SvnNumber               *model.StringComparisonExp       `json:"svn_number"`
	UnlawfulViolationNumber *model.IntComparisonExp          `json:"unlawful_violation_number"`
	UpdateAt                *model.TimestamptzComparisonExp  `json:"update_at"`
	UpdateBy                *model.StringComparisonExp       `json:"update_by"`
	VehicleID               *model.StringComparisonExp       `json:"vehicle_id"`
	WorkNumberPlateColor    *model.StringComparisonExp       `json:"work_number_plate_color"`
}

// input type for incrementing integer column in table "muck_truck_preview_number"
type MuckTruckPreviewNumberIncInput struct {
	ConfirmStatus           *int   `json:"confirm_status"`
	ID                      *int64 `json:"id"`
	ProductionStatus        *int   `json:"production_status"`
	ProductionTimes         *int   `json:"production_times"`
	UnlawfulViolationNumber *int   `json:"unlawful_violation_number"`
}

// input type for inserting data into table "muck_truck_preview_number"
type MuckTruckPreviewNumberInsertInput struct {
	ConfirmStatus           *int       `json:"confirm_status"`
	ConfirmTime             *time.Time `json:"confirm_time"`
	Confirmor               *string    `json:"confirmor"`
	ContactPerson           *string    `json:"contact_person"`
	ContactPhone            *string    `json:"contact_phone"`
	CreateBy                *string    `json:"create_by"`
	DeleteAt                *time.Time `json:"delete_at"`
	DeleteBy                *string    `json:"delete_by"`
	FrontLicensePlate       *string    `json:"front_license_plate"`
	ID                      *int64     `json:"id"`
	InitialRegistrationDate *time.Time `json:"initial_registration_date"`
	IsDelete                *bool      `json:"is_delete"`
	IsRegisterSaleOrder     *bool      `json:"is_register_sale_order"`
	IsReviewAutomatically   *bool      `json:"is_review_automatically"`
	MarkingTime             *time.Time `json:"marking_time"`
	OriginalNumber          *string    `json:"original_number"`
	ProductionStatus        *int       `json:"production_status"`
	ProductionTime          *time.Time `json:"production_time"`
	ProductionTimes         *int       `json:"production_times"`
	RearLicensePlate        *string    `json:"rear_license_plate"`
	RegistrationTime        *time.Time `json:"registration_time"`
	Remarks                 *string    `json:"remarks"`
	SideLicensePlate        *string    `json:"side_license_plate"`
	SvnNumber               *string    `json:"svn_number"`
	UnlawfulViolationNumber *int       `json:"unlawful_violation_number"`
	UpdateAt                *time.Time `json:"update_at"`
	UpdateBy                *string    `json:"update_by"`
	VehicleID               *string    `json:"vehicle_id"`
	WorkNumberPlateColor    *string    `json:"work_number_plate_color"`
}

// aggregate max on columns
type MuckTruckPreviewNumberMaxFields struct {
	ConfirmStatus           *int       `json:"confirm_status"`
	ConfirmTime             *time.Time `json:"confirm_time"`
	Confirmor               *string    `json:"confirmor"`
	ContactPerson           *string    `json:"contact_person"`
	ContactPhone            *string    `json:"contact_phone"`
	CreateBy                *string    `json:"create_by"`
	DeleteAt                *time.Time `json:"delete_at"`
	DeleteBy                *string    `json:"delete_by"`
	FrontLicensePlate       *string    `json:"front_license_plate"`
	ID                      *int64     `json:"id"`
	InitialRegistrationDate *time.Time `json:"initial_registration_date"`
	MarkingTime             *time.Time `json:"marking_time"`
	OriginalNumber          *string    `json:"original_number"`
	ProductionStatus        *int       `json:"production_status"`
	ProductionTime          *time.Time `json:"production_time"`
	ProductionTimes         *int       `json:"production_times"`
	RearLicensePlate        *string    `json:"rear_license_plate"`
	RegistrationTime        *time.Time `json:"registration_time"`
	Remarks                 *string    `json:"remarks"`
	SideLicensePlate        *string    `json:"side_license_plate"`
	SvnNumber               *string    `json:"svn_number"`
	UnlawfulViolationNumber *int       `json:"unlawful_violation_number"`
	UpdateAt                *time.Time `json:"update_at"`
	UpdateBy                *string    `json:"update_by"`
	VehicleID               *string    `json:"vehicle_id"`
	WorkNumberPlateColor    *string    `json:"work_number_plate_color"`
}

// order by max() on columns of table "muck_truck_preview_number"
type MuckTruckPreviewNumberMaxOrderBy struct {
	ConfirmStatus           *model.OrderBy `json:"confirm_status"`
	ConfirmTime             *model.OrderBy `json:"confirm_time"`
	Confirmor               *model.OrderBy `json:"confirmor"`
	ContactPerson           *model.OrderBy `json:"contact_person"`
	ContactPhone            *model.OrderBy `json:"contact_phone"`
	CreateBy                *model.OrderBy `json:"create_by"`
	DeleteAt                *model.OrderBy `json:"delete_at"`
	DeleteBy                *model.OrderBy `json:"delete_by"`
	FrontLicensePlate       *model.OrderBy `json:"front_license_plate"`
	ID                      *model.OrderBy `json:"id"`
	InitialRegistrationDate *model.OrderBy `json:"initial_registration_date"`
	MarkingTime             *model.OrderBy `json:"marking_time"`
	OriginalNumber          *model.OrderBy `json:"original_number"`
	ProductionStatus        *model.OrderBy `json:"production_status"`
	ProductionTime          *model.OrderBy `json:"production_time"`
	ProductionTimes         *model.OrderBy `json:"production_times"`
	RearLicensePlate        *model.OrderBy `json:"rear_license_plate"`
	RegistrationTime        *model.OrderBy `json:"registration_time"`
	Remarks                 *model.OrderBy `json:"remarks"`
	SideLicensePlate        *model.OrderBy `json:"side_license_plate"`
	SvnNumber               *model.OrderBy `json:"svn_number"`
	UnlawfulViolationNumber *model.OrderBy `json:"unlawful_violation_number"`
	UpdateAt                *model.OrderBy `json:"update_at"`
	UpdateBy                *model.OrderBy `json:"update_by"`
	VehicleID               *model.OrderBy `json:"vehicle_id"`
	WorkNumberPlateColor    *model.OrderBy `json:"work_number_plate_color"`
}

// aggregate min on columns
type MuckTruckPreviewNumberMinFields struct {
	ConfirmStatus           *int       `json:"confirm_status"`
	ConfirmTime             *time.Time `json:"confirm_time"`
	Confirmor               *string    `json:"confirmor"`
	ContactPerson           *string    `json:"contact_person"`
	ContactPhone            *string    `json:"contact_phone"`
	CreateBy                *string    `json:"create_by"`
	DeleteAt                *time.Time `json:"delete_at"`
	DeleteBy                *string    `json:"delete_by"`
	FrontLicensePlate       *string    `json:"front_license_plate"`
	ID                      *int64     `json:"id"`
	InitialRegistrationDate *time.Time `json:"initial_registration_date"`
	MarkingTime             *time.Time `json:"marking_time"`
	OriginalNumber          *string    `json:"original_number"`
	ProductionStatus        *int       `json:"production_status"`
	ProductionTime          *time.Time `json:"production_time"`
	ProductionTimes         *int       `json:"production_times"`
	RearLicensePlate        *string    `json:"rear_license_plate"`
	RegistrationTime        *time.Time `json:"registration_time"`
	Remarks                 *string    `json:"remarks"`
	SideLicensePlate        *string    `json:"side_license_plate"`
	SvnNumber               *string    `json:"svn_number"`
	UnlawfulViolationNumber *int       `json:"unlawful_violation_number"`
	UpdateAt                *time.Time `json:"update_at"`
	UpdateBy                *string    `json:"update_by"`
	VehicleID               *string    `json:"vehicle_id"`
	WorkNumberPlateColor    *string    `json:"work_number_plate_color"`
}

// order by min() on columns of table "muck_truck_preview_number"
type MuckTruckPreviewNumberMinOrderBy struct {
	ConfirmStatus           *model.OrderBy `json:"confirm_status"`
	ConfirmTime             *model.OrderBy `json:"confirm_time"`
	Confirmor               *model.OrderBy `json:"confirmor"`
	ContactPerson           *model.OrderBy `json:"contact_person"`
	ContactPhone            *model.OrderBy `json:"contact_phone"`
	CreateBy                *model.OrderBy `json:"create_by"`
	DeleteAt                *model.OrderBy `json:"delete_at"`
	DeleteBy                *model.OrderBy `json:"delete_by"`
	FrontLicensePlate       *model.OrderBy `json:"front_license_plate"`
	ID                      *model.OrderBy `json:"id"`
	InitialRegistrationDate *model.OrderBy `json:"initial_registration_date"`
	MarkingTime             *model.OrderBy `json:"marking_time"`
	OriginalNumber          *model.OrderBy `json:"original_number"`
	ProductionStatus        *model.OrderBy `json:"production_status"`
	ProductionTime          *model.OrderBy `json:"production_time"`
	ProductionTimes         *model.OrderBy `json:"production_times"`
	RearLicensePlate        *model.OrderBy `json:"rear_license_plate"`
	RegistrationTime        *model.OrderBy `json:"registration_time"`
	Remarks                 *model.OrderBy `json:"remarks"`
	SideLicensePlate        *model.OrderBy `json:"side_license_plate"`
	SvnNumber               *model.OrderBy `json:"svn_number"`
	UnlawfulViolationNumber *model.OrderBy `json:"unlawful_violation_number"`
	UpdateAt                *model.OrderBy `json:"update_at"`
	UpdateBy                *model.OrderBy `json:"update_by"`
	VehicleID               *model.OrderBy `json:"vehicle_id"`
	WorkNumberPlateColor    *model.OrderBy `json:"work_number_plate_color"`
}

// response of any mutation on the table "muck_truck_preview_number"
type MuckTruckPreviewNumberMutationResponse struct {
	// number of affected rows by the mutation
	AffectedRows int `json:"affected_rows"`
	// data of the affected rows by the mutation
	Returning []*MuckTruckPreviewNumber `json:"returning"`
}

// input type for inserting object relation for remote table "muck_truck_preview_number"
type MuckTruckPreviewNumberObjRelInsertInput struct {
	Data       *MuckTruckPreviewNumberInsertInput `json:"data"`
	OnConflict *MuckTruckPreviewNumberOnConflict  `json:"on_conflict"`
}

// on conflict condition type for table "muck_truck_preview_number"
type MuckTruckPreviewNumberOnConflict struct {
	Constraint    MuckTruckPreviewNumberConstraint     `json:"constraint"`
	UpdateColumns []MuckTruckPreviewNumberUpdateColumn `json:"update_columns"`
	Where         *MuckTruckPreviewNumberBoolExp       `json:"where"`
}

// ordering options when selecting data from "muck_truck_preview_number"
type MuckTruckPreviewNumberOrderBy struct {
	ConfirmStatus           *model.OrderBy `json:"confirm_status"`
	ConfirmTime             *model.OrderBy `json:"confirm_time"`
	Confirmor               *model.OrderBy `json:"confirmor"`
	ContactPerson           *model.OrderBy `json:"contact_person"`
	ContactPhone            *model.OrderBy `json:"contact_phone"`
	CreateBy                *model.OrderBy `json:"create_by"`
	DeleteAt                *model.OrderBy `json:"delete_at"`
	DeleteBy                *model.OrderBy `json:"delete_by"`
	FrontLicensePlate       *model.OrderBy `json:"front_license_plate"`
	ID                      *model.OrderBy `json:"id"`
	InitialRegistrationDate *model.OrderBy `json:"initial_registration_date"`
	IsDelete                *model.OrderBy `json:"is_delete"`
	IsRegisterSaleOrder     *model.OrderBy `json:"is_register_sale_order"`
	IsReviewAutomatically   *model.OrderBy `json:"is_review_automatically"`
	MarkingTime             *model.OrderBy `json:"marking_time"`
	OriginalNumber          *model.OrderBy `json:"original_number"`
	ProductionStatus        *model.OrderBy `json:"production_status"`
	ProductionTime          *model.OrderBy `json:"production_time"`
	ProductionTimes         *model.OrderBy `json:"production_times"`
	RearLicensePlate        *model.OrderBy `json:"rear_license_plate"`
	RegistrationTime        *model.OrderBy `json:"registration_time"`
	Remarks                 *model.OrderBy `json:"remarks"`
	SideLicensePlate        *model.OrderBy `json:"side_license_plate"`
	SvnNumber               *model.OrderBy `json:"svn_number"`
	UnlawfulViolationNumber *model.OrderBy `json:"unlawful_violation_number"`
	UpdateAt                *model.OrderBy `json:"update_at"`
	UpdateBy                *model.OrderBy `json:"update_by"`
	VehicleID               *model.OrderBy `json:"vehicle_id"`
	WorkNumberPlateColor    *model.OrderBy `json:"work_number_plate_color"`
}

// primary key columns input for table: "muck_truck_preview_number"
type MuckTruckPreviewNumberPkColumnsInput struct {
	// 主键
	ID int64 `json:"id"`
}

// input type for updating data in table "muck_truck_preview_number"
type MuckTruckPreviewNumberSetInput struct {
	ConfirmStatus           *int       `json:"confirm_status"`
	ConfirmTime             *time.Time `json:"confirm_time"`
	Confirmor               *string    `json:"confirmor"`
	ContactPerson           *string    `json:"contact_person"`
	ContactPhone            *string    `json:"contact_phone"`
	CreateBy                *string    `json:"create_by"`
	DeleteAt                *time.Time `json:"delete_at"`
	DeleteBy                *string    `json:"delete_by"`
	FrontLicensePlate       *string    `json:"front_license_plate"`
	ID                      *int64     `json:"id"`
	InitialRegistrationDate *time.Time `json:"initial_registration_date"`
	IsDelete                *bool      `json:"is_delete"`
	IsRegisterSaleOrder     *bool      `json:"is_register_sale_order"`
	IsReviewAutomatically   *bool      `json:"is_review_automatically"`
	MarkingTime             *time.Time `json:"marking_time"`
	OriginalNumber          *string    `json:"original_number"`
	ProductionStatus        *int       `json:"production_status"`
	ProductionTime          *time.Time `json:"production_time"`
	ProductionTimes         *int       `json:"production_times"`
	RearLicensePlate        *string    `json:"rear_license_plate"`
	RegistrationTime        *time.Time `json:"registration_time"`
	Remarks                 *string    `json:"remarks"`
	SideLicensePlate        *string    `json:"side_license_plate"`
	SvnNumber               *string    `json:"svn_number"`
	UnlawfulViolationNumber *int       `json:"unlawful_violation_number"`
	UpdateAt                *time.Time `json:"update_at"`
	UpdateBy                *string    `json:"update_by"`
	VehicleID               *string    `json:"vehicle_id"`
	WorkNumberPlateColor    *string    `json:"work_number_plate_color"`
}

// aggregate stddev on columns
type MuckTruckPreviewNumberStddevFields struct {
	ConfirmStatus           *float64 `json:"confirm_status"`
	ID                      *float64 `json:"id"`
	ProductionStatus        *float64 `json:"production_status"`
	ProductionTimes         *float64 `json:"production_times"`
	UnlawfulViolationNumber *float64 `json:"unlawful_violation_number"`
}

// order by stddev() on columns of table "muck_truck_preview_number"
type MuckTruckPreviewNumberStddevOrderBy struct {
	ConfirmStatus           *model.OrderBy `json:"confirm_status"`
	ID                      *model.OrderBy `json:"id"`
	ProductionStatus        *model.OrderBy `json:"production_status"`
	ProductionTimes         *model.OrderBy `json:"production_times"`
	UnlawfulViolationNumber *model.OrderBy `json:"unlawful_violation_number"`
}

// aggregate stddev_pop on columns
type MuckTruckPreviewNumberStddevPopFields struct {
	ConfirmStatus           *float64 `json:"confirm_status"`
	ID                      *float64 `json:"id"`
	ProductionStatus        *float64 `json:"production_status"`
	ProductionTimes         *float64 `json:"production_times"`
	UnlawfulViolationNumber *float64 `json:"unlawful_violation_number"`
}

// order by stddev_pop() on columns of table "muck_truck_preview_number"
type MuckTruckPreviewNumberStddevPopOrderBy struct {
	ConfirmStatus           *model.OrderBy `json:"confirm_status"`
	ID                      *model.OrderBy `json:"id"`
	ProductionStatus        *model.OrderBy `json:"production_status"`
	ProductionTimes         *model.OrderBy `json:"production_times"`
	UnlawfulViolationNumber *model.OrderBy `json:"unlawful_violation_number"`
}

// aggregate stddev_samp on columns
type MuckTruckPreviewNumberStddevSampFields struct {
	ConfirmStatus           *float64 `json:"confirm_status"`
	ID                      *float64 `json:"id"`
	ProductionStatus        *float64 `json:"production_status"`
	ProductionTimes         *float64 `json:"production_times"`
	UnlawfulViolationNumber *float64 `json:"unlawful_violation_number"`
}

// order by stddev_samp() on columns of table "muck_truck_preview_number"
type MuckTruckPreviewNumberStddevSampOrderBy struct {
	ConfirmStatus           *model.OrderBy `json:"confirm_status"`
	ID                      *model.OrderBy `json:"id"`
	ProductionStatus        *model.OrderBy `json:"production_status"`
	ProductionTimes         *model.OrderBy `json:"production_times"`
	UnlawfulViolationNumber *model.OrderBy `json:"unlawful_violation_number"`
}

// aggregate sum on columns
type MuckTruckPreviewNumberSumFields struct {
	ConfirmStatus           *int   `json:"confirm_status"`
	ID                      *int64 `json:"id"`
	ProductionStatus        *int   `json:"production_status"`
	ProductionTimes         *int   `json:"production_times"`
	UnlawfulViolationNumber *int   `json:"unlawful_violation_number"`
}

// order by sum() on columns of table "muck_truck_preview_number"
type MuckTruckPreviewNumberSumOrderBy struct {
	ConfirmStatus           *model.OrderBy `json:"confirm_status"`
	ID                      *model.OrderBy `json:"id"`
	ProductionStatus        *model.OrderBy `json:"production_status"`
	ProductionTimes         *model.OrderBy `json:"production_times"`
	UnlawfulViolationNumber *model.OrderBy `json:"unlawful_violation_number"`
}

// aggregate var_pop on columns
type MuckTruckPreviewNumberVarPopFields struct {
	ConfirmStatus           *float64 `json:"confirm_status"`
	ID                      *float64 `json:"id"`
	ProductionStatus        *float64 `json:"production_status"`
	ProductionTimes         *float64 `json:"production_times"`
	UnlawfulViolationNumber *float64 `json:"unlawful_violation_number"`
}

// order by var_pop() on columns of table "muck_truck_preview_number"
type MuckTruckPreviewNumberVarPopOrderBy struct {
	ConfirmStatus           *model.OrderBy `json:"confirm_status"`
	ID                      *model.OrderBy `json:"id"`
	ProductionStatus        *model.OrderBy `json:"production_status"`
	ProductionTimes         *model.OrderBy `json:"production_times"`
	UnlawfulViolationNumber *model.OrderBy `json:"unlawful_violation_number"`
}

// aggregate var_samp on columns
type MuckTruckPreviewNumberVarSampFields struct {
	ConfirmStatus           *float64 `json:"confirm_status"`
	ID                      *float64 `json:"id"`
	ProductionStatus        *float64 `json:"production_status"`
	ProductionTimes         *float64 `json:"production_times"`
	UnlawfulViolationNumber *float64 `json:"unlawful_violation_number"`
}

// order by var_samp() on columns of table "muck_truck_preview_number"
type MuckTruckPreviewNumberVarSampOrderBy struct {
	ConfirmStatus           *model.OrderBy `json:"confirm_status"`
	ID                      *model.OrderBy `json:"id"`
	ProductionStatus        *model.OrderBy `json:"production_status"`
	ProductionTimes         *model.OrderBy `json:"production_times"`
	UnlawfulViolationNumber *model.OrderBy `json:"unlawful_violation_number"`
}

// aggregate variance on columns
type MuckTruckPreviewNumberVarianceFields struct {
	ConfirmStatus           *float64 `json:"confirm_status"`
	ID                      *float64 `json:"id"`
	ProductionStatus        *float64 `json:"production_status"`
	ProductionTimes         *float64 `json:"production_times"`
	UnlawfulViolationNumber *float64 `json:"unlawful_violation_number"`
}

// order by variance() on columns of table "muck_truck_preview_number"
type MuckTruckPreviewNumberVarianceOrderBy struct {
	ConfirmStatus           *model.OrderBy `json:"confirm_status"`
	ID                      *model.OrderBy `json:"id"`
	ProductionStatus        *model.OrderBy `json:"production_status"`
	ProductionTimes         *model.OrderBy `json:"production_times"`
	UnlawfulViolationNumber *model.OrderBy `json:"unlawful_violation_number"`
}

// aggregated selection of "muck_truck_worker_id_card_orders"
type MuckTruckWorkerIDCardOrdersAggregate struct {
	Aggregate *MuckTruckWorkerIDCardOrdersAggregateFields `json:"aggregate"`
	Nodes     []*MuckTruckWorkerIDCardOrders              `json:"nodes"`
}

// aggregate fields of "muck_truck_worker_id_card_orders"
type MuckTruckWorkerIDCardOrdersAggregateFields struct {
	Avg        *MuckTruckWorkerIDCardOrdersAvgFields        `json:"avg"`
	Count      *int                                         `json:"count"`
	Max        *MuckTruckWorkerIDCardOrdersMaxFields        `json:"max"`
	Min        *MuckTruckWorkerIDCardOrdersMinFields        `json:"min"`
	Stddev     *MuckTruckWorkerIDCardOrdersStddevFields     `json:"stddev"`
	StddevPop  *MuckTruckWorkerIDCardOrdersStddevPopFields  `json:"stddev_pop"`
	StddevSamp *MuckTruckWorkerIDCardOrdersStddevSampFields `json:"stddev_samp"`
	Sum        *MuckTruckWorkerIDCardOrdersSumFields        `json:"sum"`
	VarPop     *MuckTruckWorkerIDCardOrdersVarPopFields     `json:"var_pop"`
	VarSamp    *MuckTruckWorkerIDCardOrdersVarSampFields    `json:"var_samp"`
	Variance   *MuckTruckWorkerIDCardOrdersVarianceFields   `json:"variance"`
}

// order by aggregate values of table "muck_truck_worker_id_card_orders"
type MuckTruckWorkerIDCardOrdersAggregateOrderBy struct {
	Avg        *MuckTruckWorkerIDCardOrdersAvgOrderBy        `json:"avg"`
	Count      *model.OrderBy                                `json:"count"`
	Max        *MuckTruckWorkerIDCardOrdersMaxOrderBy        `json:"max"`
	Min        *MuckTruckWorkerIDCardOrdersMinOrderBy        `json:"min"`
	Stddev     *MuckTruckWorkerIDCardOrdersStddevOrderBy     `json:"stddev"`
	StddevPop  *MuckTruckWorkerIDCardOrdersStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *MuckTruckWorkerIDCardOrdersStddevSampOrderBy `json:"stddev_samp"`
	Sum        *MuckTruckWorkerIDCardOrdersSumOrderBy        `json:"sum"`
	VarPop     *MuckTruckWorkerIDCardOrdersVarPopOrderBy     `json:"var_pop"`
	VarSamp    *MuckTruckWorkerIDCardOrdersVarSampOrderBy    `json:"var_samp"`
	Variance   *MuckTruckWorkerIDCardOrdersVarianceOrderBy   `json:"variance"`
}

// input type for inserting array relation for remote table "muck_truck_worker_id_card_orders"
type MuckTruckWorkerIDCardOrdersArrRelInsertInput struct {
	Data       []*MuckTruckWorkerIDCardOrdersInsertInput `json:"data"`
	OnConflict *MuckTruckWorkerIDCardOrdersOnConflict    `json:"on_conflict"`
}

// aggregate avg on columns
type MuckTruckWorkerIDCardOrdersAvgFields struct {
	ID              *float64 `json:"id"`
	PreviewNumberID *float64 `json:"preview_number_id"`
}

// order by avg() on columns of table "muck_truck_worker_id_card_orders"
type MuckTruckWorkerIDCardOrdersAvgOrderBy struct {
	ID              *model.OrderBy `json:"id"`
	PreviewNumberID *model.OrderBy `json:"preview_number_id"`
}

// Boolean expression to filter rows from the table
// "muck_truck_worker_id_card_orders". All fields are combined with a logical 'AND'.
type MuckTruckWorkerIDCardOrdersBoolExp struct {
	And             []*MuckTruckWorkerIDCardOrdersBoolExp `json:"_and"`
	Not             *MuckTruckWorkerIDCardOrdersBoolExp   `json:"_not"`
	Or              []*MuckTruckWorkerIDCardOrdersBoolExp `json:"_or"`
	CreateAt        *model.TimestamptzComparisonExp       `json:"create_at"`
	CreateBy        *model.StringComparisonExp            `json:"create_by"`
	DeleteAt        *model.TimestamptzComparisonExp       `json:"delete_at"`
	DeleteBy        *model.StringComparisonExp            `json:"delete_by"`
	ID              *model.BigintComparisonExp            `json:"id"`
	PreviewNumberID *model.BigintComparisonExp            `json:"preview_number_id"`
	UpdateAt        *model.TimestamptzComparisonExp       `json:"update_at"`
	UpdateBy        *model.StringComparisonExp            `json:"update_by"`
	VehicleID       *model.StringComparisonExp            `json:"vehicle_id"`
}

// input type for incrementing integer column in table "muck_truck_worker_id_card_orders"
type MuckTruckWorkerIDCardOrdersIncInput struct {
	ID              *int64 `json:"id"`
	PreviewNumberID *int64 `json:"preview_number_id"`
}

// input type for inserting data into table "muck_truck_worker_id_card_orders"
type MuckTruckWorkerIDCardOrdersInsertInput struct {
	CreateAt        *time.Time `json:"create_at"`
	CreateBy        *string    `json:"create_by"`
	DeleteAt        *time.Time `json:"delete_at"`
	DeleteBy        *string    `json:"delete_by"`
	ID              *int64     `json:"id"`
	PreviewNumberID *int64     `json:"preview_number_id"`
	UpdateAt        *time.Time `json:"update_at"`
	UpdateBy        *string    `json:"update_by"`
	VehicleID       *string    `json:"vehicle_id"`
}

// aggregate max on columns
type MuckTruckWorkerIDCardOrdersMaxFields struct {
	CreateAt        *time.Time `json:"create_at"`
	CreateBy        *string    `json:"create_by"`
	DeleteAt        *time.Time `json:"delete_at"`
	DeleteBy        *string    `json:"delete_by"`
	ID              *int64     `json:"id"`
	PreviewNumberID *int64     `json:"preview_number_id"`
	UpdateAt        *time.Time `json:"update_at"`
	UpdateBy        *string    `json:"update_by"`
	VehicleID       *string    `json:"vehicle_id"`
}

// order by max() on columns of table "muck_truck_worker_id_card_orders"
type MuckTruckWorkerIDCardOrdersMaxOrderBy struct {
	CreateAt        *model.OrderBy `json:"create_at"`
	CreateBy        *model.OrderBy `json:"create_by"`
	DeleteAt        *model.OrderBy `json:"delete_at"`
	DeleteBy        *model.OrderBy `json:"delete_by"`
	ID              *model.OrderBy `json:"id"`
	PreviewNumberID *model.OrderBy `json:"preview_number_id"`
	UpdateAt        *model.OrderBy `json:"update_at"`
	UpdateBy        *model.OrderBy `json:"update_by"`
	VehicleID       *model.OrderBy `json:"vehicle_id"`
}

// aggregate min on columns
type MuckTruckWorkerIDCardOrdersMinFields struct {
	CreateAt        *time.Time `json:"create_at"`
	CreateBy        *string    `json:"create_by"`
	DeleteAt        *time.Time `json:"delete_at"`
	DeleteBy        *string    `json:"delete_by"`
	ID              *int64     `json:"id"`
	PreviewNumberID *int64     `json:"preview_number_id"`
	UpdateAt        *time.Time `json:"update_at"`
	UpdateBy        *string    `json:"update_by"`
	VehicleID       *string    `json:"vehicle_id"`
}

// order by min() on columns of table "muck_truck_worker_id_card_orders"
type MuckTruckWorkerIDCardOrdersMinOrderBy struct {
	CreateAt        *model.OrderBy `json:"create_at"`
	CreateBy        *model.OrderBy `json:"create_by"`
	DeleteAt        *model.OrderBy `json:"delete_at"`
	DeleteBy        *model.OrderBy `json:"delete_by"`
	ID              *model.OrderBy `json:"id"`
	PreviewNumberID *model.OrderBy `json:"preview_number_id"`
	UpdateAt        *model.OrderBy `json:"update_at"`
	UpdateBy        *model.OrderBy `json:"update_by"`
	VehicleID       *model.OrderBy `json:"vehicle_id"`
}

// response of any mutation on the table "muck_truck_worker_id_card_orders"
type MuckTruckWorkerIDCardOrdersMutationResponse struct {
	// number of affected rows by the mutation
	AffectedRows int `json:"affected_rows"`
	// data of the affected rows by the mutation
	Returning []*MuckTruckWorkerIDCardOrders `json:"returning"`
}

// input type for inserting object relation for remote table "muck_truck_worker_id_card_orders"
type MuckTruckWorkerIDCardOrdersObjRelInsertInput struct {
	Data       *MuckTruckWorkerIDCardOrdersInsertInput `json:"data"`
	OnConflict *MuckTruckWorkerIDCardOrdersOnConflict  `json:"on_conflict"`
}

// on conflict condition type for table "muck_truck_worker_id_card_orders"
type MuckTruckWorkerIDCardOrdersOnConflict struct {
	Constraint    MuckTruckWorkerIDCardOrdersConstraint     `json:"constraint"`
	UpdateColumns []MuckTruckWorkerIDCardOrdersUpdateColumn `json:"update_columns"`
	Where         *MuckTruckWorkerIDCardOrdersBoolExp       `json:"where"`
}

// ordering options when selecting data from "muck_truck_worker_id_card_orders"
type MuckTruckWorkerIDCardOrdersOrderBy struct {
	CreateAt        *model.OrderBy `json:"create_at"`
	CreateBy        *model.OrderBy `json:"create_by"`
	DeleteAt        *model.OrderBy `json:"delete_at"`
	DeleteBy        *model.OrderBy `json:"delete_by"`
	ID              *model.OrderBy `json:"id"`
	PreviewNumberID *model.OrderBy `json:"preview_number_id"`
	UpdateAt        *model.OrderBy `json:"update_at"`
	UpdateBy        *model.OrderBy `json:"update_by"`
	VehicleID       *model.OrderBy `json:"vehicle_id"`
}

// primary key columns input for table: "muck_truck_worker_id_card_orders"
type MuckTruckWorkerIDCardOrdersPkColumnsInput struct {
	// 主键
	ID int64 `json:"id"`
}

// input type for updating data in table "muck_truck_worker_id_card_orders"
type MuckTruckWorkerIDCardOrdersSetInput struct {
	CreateAt        *time.Time `json:"create_at"`
	CreateBy        *string    `json:"create_by"`
	DeleteAt        *time.Time `json:"delete_at"`
	DeleteBy        *string    `json:"delete_by"`
	ID              *int64     `json:"id"`
	PreviewNumberID *int64     `json:"preview_number_id"`
	UpdateAt        *time.Time `json:"update_at"`
	UpdateBy        *string    `json:"update_by"`
	VehicleID       *string    `json:"vehicle_id"`
}

// aggregate stddev on columns
type MuckTruckWorkerIDCardOrdersStddevFields struct {
	ID              *float64 `json:"id"`
	PreviewNumberID *float64 `json:"preview_number_id"`
}

// order by stddev() on columns of table "muck_truck_worker_id_card_orders"
type MuckTruckWorkerIDCardOrdersStddevOrderBy struct {
	ID              *model.OrderBy `json:"id"`
	PreviewNumberID *model.OrderBy `json:"preview_number_id"`
}

// aggregate stddev_pop on columns
type MuckTruckWorkerIDCardOrdersStddevPopFields struct {
	ID              *float64 `json:"id"`
	PreviewNumberID *float64 `json:"preview_number_id"`
}

// order by stddev_pop() on columns of table "muck_truck_worker_id_card_orders"
type MuckTruckWorkerIDCardOrdersStddevPopOrderBy struct {
	ID              *model.OrderBy `json:"id"`
	PreviewNumberID *model.OrderBy `json:"preview_number_id"`
}

// aggregate stddev_samp on columns
type MuckTruckWorkerIDCardOrdersStddevSampFields struct {
	ID              *float64 `json:"id"`
	PreviewNumberID *float64 `json:"preview_number_id"`
}

// order by stddev_samp() on columns of table "muck_truck_worker_id_card_orders"
type MuckTruckWorkerIDCardOrdersStddevSampOrderBy struct {
	ID              *model.OrderBy `json:"id"`
	PreviewNumberID *model.OrderBy `json:"preview_number_id"`
}

// aggregate sum on columns
type MuckTruckWorkerIDCardOrdersSumFields struct {
	ID              *int64 `json:"id"`
	PreviewNumberID *int64 `json:"preview_number_id"`
}

// order by sum() on columns of table "muck_truck_worker_id_card_orders"
type MuckTruckWorkerIDCardOrdersSumOrderBy struct {
	ID              *model.OrderBy `json:"id"`
	PreviewNumberID *model.OrderBy `json:"preview_number_id"`
}

// aggregate var_pop on columns
type MuckTruckWorkerIDCardOrdersVarPopFields struct {
	ID              *float64 `json:"id"`
	PreviewNumberID *float64 `json:"preview_number_id"`
}

// order by var_pop() on columns of table "muck_truck_worker_id_card_orders"
type MuckTruckWorkerIDCardOrdersVarPopOrderBy struct {
	ID              *model.OrderBy `json:"id"`
	PreviewNumberID *model.OrderBy `json:"preview_number_id"`
}

// aggregate var_samp on columns
type MuckTruckWorkerIDCardOrdersVarSampFields struct {
	ID              *float64 `json:"id"`
	PreviewNumberID *float64 `json:"preview_number_id"`
}

// order by var_samp() on columns of table "muck_truck_worker_id_card_orders"
type MuckTruckWorkerIDCardOrdersVarSampOrderBy struct {
	ID              *model.OrderBy `json:"id"`
	PreviewNumberID *model.OrderBy `json:"preview_number_id"`
}

// aggregate variance on columns
type MuckTruckWorkerIDCardOrdersVarianceFields struct {
	ID              *float64 `json:"id"`
	PreviewNumberID *float64 `json:"preview_number_id"`
}

// order by variance() on columns of table "muck_truck_worker_id_card_orders"
type MuckTruckWorkerIDCardOrdersVarianceOrderBy struct {
	ID              *model.OrderBy `json:"id"`
	PreviewNumberID *model.OrderBy `json:"preview_number_id"`
}

// aggregated selection of "operating_vehicle_info"
type OperatingVehicleInfoAggregate struct {
	Aggregate *OperatingVehicleInfoAggregateFields `json:"aggregate"`
	Nodes     []*OperatingVehicleInfo              `json:"nodes"`
}

// aggregate fields of "operating_vehicle_info"
type OperatingVehicleInfoAggregateFields struct {
	Avg        *OperatingVehicleInfoAvgFields        `json:"avg"`
	Count      *int                                  `json:"count"`
	Max        *OperatingVehicleInfoMaxFields        `json:"max"`
	Min        *OperatingVehicleInfoMinFields        `json:"min"`
	Stddev     *OperatingVehicleInfoStddevFields     `json:"stddev"`
	StddevPop  *OperatingVehicleInfoStddevPopFields  `json:"stddev_pop"`
	StddevSamp *OperatingVehicleInfoStddevSampFields `json:"stddev_samp"`
	Sum        *OperatingVehicleInfoSumFields        `json:"sum"`
	VarPop     *OperatingVehicleInfoVarPopFields     `json:"var_pop"`
	VarSamp    *OperatingVehicleInfoVarSampFields    `json:"var_samp"`
	Variance   *OperatingVehicleInfoVarianceFields   `json:"variance"`
}

// order by aggregate values of table "operating_vehicle_info"
type OperatingVehicleInfoAggregateOrderBy struct {
	Avg        *OperatingVehicleInfoAvgOrderBy        `json:"avg"`
	Count      *model.OrderBy                         `json:"count"`
	Max        *OperatingVehicleInfoMaxOrderBy        `json:"max"`
	Min        *OperatingVehicleInfoMinOrderBy        `json:"min"`
	Stddev     *OperatingVehicleInfoStddevOrderBy     `json:"stddev"`
	StddevPop  *OperatingVehicleInfoStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *OperatingVehicleInfoStddevSampOrderBy `json:"stddev_samp"`
	Sum        *OperatingVehicleInfoSumOrderBy        `json:"sum"`
	VarPop     *OperatingVehicleInfoVarPopOrderBy     `json:"var_pop"`
	VarSamp    *OperatingVehicleInfoVarSampOrderBy    `json:"var_samp"`
	Variance   *OperatingVehicleInfoVarianceOrderBy   `json:"variance"`
}

// input type for inserting array relation for remote table "operating_vehicle_info"
type OperatingVehicleInfoArrRelInsertInput struct {
	Data       []*OperatingVehicleInfoInsertInput `json:"data"`
	OnConflict *OperatingVehicleInfoOnConflict    `json:"on_conflict"`
}

// aggregate avg on columns
type OperatingVehicleInfoAvgFields struct {
	MuckTruckType            *float64 `json:"muck_truck_type"`
	OperatingVehicleID       *float64 `json:"operating_vehicle_id"`
	Platform                 *float64 `json:"platform"`
	ScrapTimeCheck           *float64 `json:"scrap_time_check"`
	TemporaryLibrary         *float64 `json:"temporary_library"`
	TemporaryTransportBureau *float64 `json:"temporary_transport_bureau"`
}

// order by avg() on columns of table "operating_vehicle_info"
type OperatingVehicleInfoAvgOrderBy struct {
	MuckTruckType            *model.OrderBy `json:"muck_truck_type"`
	OperatingVehicleID       *model.OrderBy `json:"operating_vehicle_id"`
	Platform                 *model.OrderBy `json:"platform"`
	ScrapTimeCheck           *model.OrderBy `json:"scrap_time_check"`
	TemporaryLibrary         *model.OrderBy `json:"temporary_library"`
	TemporaryTransportBureau *model.OrderBy `json:"temporary_transport_bureau"`
}

// Boolean expression to filter rows from the table "operating_vehicle_info". All fields are combined with a logical 'AND'.
type OperatingVehicleInfoBoolExp struct {
	And                          []*OperatingVehicleInfoBoolExp  `json:"_and"`
	Not                          *OperatingVehicleInfoBoolExp    `json:"_not"`
	Or                           []*OperatingVehicleInfoBoolExp  `json:"_or"`
	AdministrativeRegion         *model.StringComparisonExp      `json:"administrative_region"`
	Agent                        *model.StringComparisonExp      `json:"agent"`
	ContactNumber                *model.StringComparisonExp      `json:"contact_number"`
	ContractTime                 *model.TimestamptzComparisonExp `json:"contract_time"`
	CreateAt                     *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy                     *model.StringComparisonExp      `json:"create_by"`
	DeleteAt                     *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy                     *model.StringComparisonExp      `json:"delete_by"`
	DrivingLicenseOwner          *model.StringComparisonExp      `json:"driving_license_owner"`
	FirstOnlineTime              *model.TimestamptzComparisonExp `json:"first_online_time"`
	InstallationTime             *model.TimestamptzComparisonExp `json:"installation_time"`
	IsBd                         *model.BooleanComparisonExp     `json:"is_BD"`
	IsActive                     *model.BooleanComparisonExp     `json:"is_active"`
	IsApplayTerminalInstallation *model.BooleanComparisonExp     `json:"is_applay_terminal_installation"`
	IsBlock                      *model.BooleanComparisonExp     `json:"is_block"`
	IsEngineeringVehicle         *model.BooleanComparisonExp     `json:"is_engineering_vehicle"`
	IsFunctionOk                 *model.BooleanComparisonExp     `json:"is_function_ok"`
	IsInOperatingSystem          *model.BooleanComparisonExp     `json:"is_in_operating_system"`
	IsInUploadPlatform           *model.BooleanComparisonExp     `json:"is_in_upload_platform"`
	IsNeedSupervise              *model.BooleanComparisonExp     `json:"is_need_supervise"`
	IsSupervise                  *model.BooleanComparisonExp     `json:"is_supervise"`
	LastBindingTerminalTime      *model.TimestamptzComparisonExp `json:"last_binding_terminal_time"`
	LicensePlatePhoto            *model.StringComparisonExp      `json:"license_plate_photo"`
	MuckTruckType                *model.IntComparisonExp         `json:"muck_truck_type"`
	OperatingVehicleID           *model.BigintComparisonExp      `json:"operating_vehicle_id"`
	OtherPhoto                   *model.StringComparisonExp      `json:"other_photo"`
	Platform                     *model.IntComparisonExp         `json:"platform"`
	PositionDbID                 *model.StringComparisonExp      `json:"position_db_id"`
	ScrapReason                  *model.StringComparisonExp      `json:"scrap_reason"`
	ScrapTime                    *model.TimestamptzComparisonExp `json:"scrap_time"`
	ScrapTimeCheck               *model.IntComparisonExp         `json:"scrap_time_check"`
	SerialNumber                 *model.StringComparisonExp      `json:"serial_number"`
	ServiceExpirationTime        *model.TimestamptzComparisonExp `json:"service_expiration_time"`
	SpeedModeStatus              *model.StringComparisonExp      `json:"speed_mode_status"`
	SpeedModeStatusTime          *model.TimestamptzComparisonExp `json:"speed_mode_status_time"`
	TemporaryLibrary             *model.IntComparisonExp         `json:"temporary_library"`
	TemporaryTransportBureau     *model.IntComparisonExp         `json:"temporary_transport_bureau"`
	UpdateAt                     *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy                     *model.StringComparisonExp      `json:"update_by"`
	VehicleID                    *model.StringComparisonExp      `json:"vehicle_id"`
}

// input type for incrementing integer column in table "operating_vehicle_info"
type OperatingVehicleInfoIncInput struct {
	MuckTruckType            *int   `json:"muck_truck_type"`
	OperatingVehicleID       *int64 `json:"operating_vehicle_id"`
	Platform                 *int   `json:"platform"`
	ScrapTimeCheck           *int   `json:"scrap_time_check"`
	TemporaryLibrary         *int   `json:"temporary_library"`
	TemporaryTransportBureau *int   `json:"temporary_transport_bureau"`
}

// input type for inserting data into table "operating_vehicle_info"
type OperatingVehicleInfoInsertInput struct {
	AdministrativeRegion         *string    `json:"administrative_region"`
	Agent                        *string    `json:"agent"`
	ContactNumber                *string    `json:"contact_number"`
	ContractTime                 *time.Time `json:"contract_time"`
	CreateAt                     *time.Time `json:"create_at"`
	CreateBy                     *string    `json:"create_by"`
	DeleteAt                     *time.Time `json:"delete_at"`
	DeleteBy                     *string    `json:"delete_by"`
	DrivingLicenseOwner          *string    `json:"driving_license_owner"`
	FirstOnlineTime              *time.Time `json:"first_online_time"`
	InstallationTime             *time.Time `json:"installation_time"`
	IsBd                         *bool      `json:"is_BD"`
	IsActive                     *bool      `json:"is_active"`
	IsApplayTerminalInstallation *bool      `json:"is_applay_terminal_installation"`
	IsBlock                      *bool      `json:"is_block"`
	IsEngineeringVehicle         *bool      `json:"is_engineering_vehicle"`
	IsFunctionOk                 *bool      `json:"is_function_ok"`
	IsInOperatingSystem          *bool      `json:"is_in_operating_system"`
	IsInUploadPlatform           *bool      `json:"is_in_upload_platform"`
	IsNeedSupervise              *bool      `json:"is_need_supervise"`
	IsSupervise                  *bool      `json:"is_supervise"`
	LastBindingTerminalTime      *time.Time `json:"last_binding_terminal_time"`
	LicensePlatePhoto            *string    `json:"license_plate_photo"`
	MuckTruckType                *int       `json:"muck_truck_type"`
	OperatingVehicleID           *int64     `json:"operating_vehicle_id"`
	OtherPhoto                   *string    `json:"other_photo"`
	Platform                     *int       `json:"platform"`
	PositionDbID                 *string    `json:"position_db_id"`
	ScrapReason                  *string    `json:"scrap_reason"`
	ScrapTime                    *time.Time `json:"scrap_time"`
	ScrapTimeCheck               *int       `json:"scrap_time_check"`
	SerialNumber                 *string    `json:"serial_number"`
	ServiceExpirationTime        *time.Time `json:"service_expiration_time"`
	SpeedModeStatus              *string    `json:"speed_mode_status"`
	SpeedModeStatusTime          *time.Time `json:"speed_mode_status_time"`
	TemporaryLibrary             *int       `json:"temporary_library"`
	TemporaryTransportBureau     *int       `json:"temporary_transport_bureau"`
	UpdateAt                     *time.Time `json:"update_at"`
	UpdateBy                     *string    `json:"update_by"`
	VehicleID                    *string    `json:"vehicle_id"`
}

// aggregate max on columns
type OperatingVehicleInfoMaxFields struct {
	AdministrativeRegion     *string    `json:"administrative_region"`
	Agent                    *string    `json:"agent"`
	ContactNumber            *string    `json:"contact_number"`
	ContractTime             *time.Time `json:"contract_time"`
	CreateAt                 *time.Time `json:"create_at"`
	CreateBy                 *string    `json:"create_by"`
	DeleteAt                 *time.Time `json:"delete_at"`
	DeleteBy                 *string    `json:"delete_by"`
	DrivingLicenseOwner      *string    `json:"driving_license_owner"`
	FirstOnlineTime          *time.Time `json:"first_online_time"`
	InstallationTime         *time.Time `json:"installation_time"`
	LastBindingTerminalTime  *time.Time `json:"last_binding_terminal_time"`
	LicensePlatePhoto        *string    `json:"license_plate_photo"`
	MuckTruckType            *int       `json:"muck_truck_type"`
	OperatingVehicleID       *int64     `json:"operating_vehicle_id"`
	OtherPhoto               *string    `json:"other_photo"`
	Platform                 *int       `json:"platform"`
	PositionDbID             *string    `json:"position_db_id"`
	ScrapReason              *string    `json:"scrap_reason"`
	ScrapTime                *time.Time `json:"scrap_time"`
	ScrapTimeCheck           *int       `json:"scrap_time_check"`
	SerialNumber             *string    `json:"serial_number"`
	ServiceExpirationTime    *time.Time `json:"service_expiration_time"`
	SpeedModeStatus          *string    `json:"speed_mode_status"`
	SpeedModeStatusTime      *time.Time `json:"speed_mode_status_time"`
	TemporaryLibrary         *int       `json:"temporary_library"`
	TemporaryTransportBureau *int       `json:"temporary_transport_bureau"`
	UpdateAt                 *time.Time `json:"update_at"`
	UpdateBy                 *string    `json:"update_by"`
	VehicleID                *string    `json:"vehicle_id"`
}

// order by max() on columns of table "operating_vehicle_info"
type OperatingVehicleInfoMaxOrderBy struct {
	AdministrativeRegion     *model.OrderBy `json:"administrative_region"`
	Agent                    *model.OrderBy `json:"agent"`
	ContactNumber            *model.OrderBy `json:"contact_number"`
	ContractTime             *model.OrderBy `json:"contract_time"`
	CreateAt                 *model.OrderBy `json:"create_at"`
	CreateBy                 *model.OrderBy `json:"create_by"`
	DeleteAt                 *model.OrderBy `json:"delete_at"`
	DeleteBy                 *model.OrderBy `json:"delete_by"`
	DrivingLicenseOwner      *model.OrderBy `json:"driving_license_owner"`
	FirstOnlineTime          *model.OrderBy `json:"first_online_time"`
	InstallationTime         *model.OrderBy `json:"installation_time"`
	LastBindingTerminalTime  *model.OrderBy `json:"last_binding_terminal_time"`
	LicensePlatePhoto        *model.OrderBy `json:"license_plate_photo"`
	MuckTruckType            *model.OrderBy `json:"muck_truck_type"`
	OperatingVehicleID       *model.OrderBy `json:"operating_vehicle_id"`
	OtherPhoto               *model.OrderBy `json:"other_photo"`
	Platform                 *model.OrderBy `json:"platform"`
	PositionDbID             *model.OrderBy `json:"position_db_id"`
	ScrapReason              *model.OrderBy `json:"scrap_reason"`
	ScrapTime                *model.OrderBy `json:"scrap_time"`
	ScrapTimeCheck           *model.OrderBy `json:"scrap_time_check"`
	SerialNumber             *model.OrderBy `json:"serial_number"`
	ServiceExpirationTime    *model.OrderBy `json:"service_expiration_time"`
	SpeedModeStatus          *model.OrderBy `json:"speed_mode_status"`
	SpeedModeStatusTime      *model.OrderBy `json:"speed_mode_status_time"`
	TemporaryLibrary         *model.OrderBy `json:"temporary_library"`
	TemporaryTransportBureau *model.OrderBy `json:"temporary_transport_bureau"`
	UpdateAt                 *model.OrderBy `json:"update_at"`
	UpdateBy                 *model.OrderBy `json:"update_by"`
	VehicleID                *model.OrderBy `json:"vehicle_id"`
}

// aggregate min on columns
type OperatingVehicleInfoMinFields struct {
	AdministrativeRegion     *string    `json:"administrative_region"`
	Agent                    *string    `json:"agent"`
	ContactNumber            *string    `json:"contact_number"`
	ContractTime             *time.Time `json:"contract_time"`
	CreateAt                 *time.Time `json:"create_at"`
	CreateBy                 *string    `json:"create_by"`
	DeleteAt                 *time.Time `json:"delete_at"`
	DeleteBy                 *string    `json:"delete_by"`
	DrivingLicenseOwner      *string    `json:"driving_license_owner"`
	FirstOnlineTime          *time.Time `json:"first_online_time"`
	InstallationTime         *time.Time `json:"installation_time"`
	LastBindingTerminalTime  *time.Time `json:"last_binding_terminal_time"`
	LicensePlatePhoto        *string    `json:"license_plate_photo"`
	MuckTruckType            *int       `json:"muck_truck_type"`
	OperatingVehicleID       *int64     `json:"operating_vehicle_id"`
	OtherPhoto               *string    `json:"other_photo"`
	Platform                 *int       `json:"platform"`
	PositionDbID             *string    `json:"position_db_id"`
	ScrapReason              *string    `json:"scrap_reason"`
	ScrapTime                *time.Time `json:"scrap_time"`
	ScrapTimeCheck           *int       `json:"scrap_time_check"`
	SerialNumber             *string    `json:"serial_number"`
	ServiceExpirationTime    *time.Time `json:"service_expiration_time"`
	SpeedModeStatus          *string    `json:"speed_mode_status"`
	SpeedModeStatusTime      *time.Time `json:"speed_mode_status_time"`
	TemporaryLibrary         *int       `json:"temporary_library"`
	TemporaryTransportBureau *int       `json:"temporary_transport_bureau"`
	UpdateAt                 *time.Time `json:"update_at"`
	UpdateBy                 *string    `json:"update_by"`
	VehicleID                *string    `json:"vehicle_id"`
}

// order by min() on columns of table "operating_vehicle_info"
type OperatingVehicleInfoMinOrderBy struct {
	AdministrativeRegion     *model.OrderBy `json:"administrative_region"`
	Agent                    *model.OrderBy `json:"agent"`
	ContactNumber            *model.OrderBy `json:"contact_number"`
	ContractTime             *model.OrderBy `json:"contract_time"`
	CreateAt                 *model.OrderBy `json:"create_at"`
	CreateBy                 *model.OrderBy `json:"create_by"`
	DeleteAt                 *model.OrderBy `json:"delete_at"`
	DeleteBy                 *model.OrderBy `json:"delete_by"`
	DrivingLicenseOwner      *model.OrderBy `json:"driving_license_owner"`
	FirstOnlineTime          *model.OrderBy `json:"first_online_time"`
	InstallationTime         *model.OrderBy `json:"installation_time"`
	LastBindingTerminalTime  *model.OrderBy `json:"last_binding_terminal_time"`
	LicensePlatePhoto        *model.OrderBy `json:"license_plate_photo"`
	MuckTruckType            *model.OrderBy `json:"muck_truck_type"`
	OperatingVehicleID       *model.OrderBy `json:"operating_vehicle_id"`
	OtherPhoto               *model.OrderBy `json:"other_photo"`
	Platform                 *model.OrderBy `json:"platform"`
	PositionDbID             *model.OrderBy `json:"position_db_id"`
	ScrapReason              *model.OrderBy `json:"scrap_reason"`
	ScrapTime                *model.OrderBy `json:"scrap_time"`
	ScrapTimeCheck           *model.OrderBy `json:"scrap_time_check"`
	SerialNumber             *model.OrderBy `json:"serial_number"`
	ServiceExpirationTime    *model.OrderBy `json:"service_expiration_time"`
	SpeedModeStatus          *model.OrderBy `json:"speed_mode_status"`
	SpeedModeStatusTime      *model.OrderBy `json:"speed_mode_status_time"`
	TemporaryLibrary         *model.OrderBy `json:"temporary_library"`
	TemporaryTransportBureau *model.OrderBy `json:"temporary_transport_bureau"`
	UpdateAt                 *model.OrderBy `json:"update_at"`
	UpdateBy                 *model.OrderBy `json:"update_by"`
	VehicleID                *model.OrderBy `json:"vehicle_id"`
}

// response of any mutation on the table "operating_vehicle_info"
type OperatingVehicleInfoMutationResponse struct {
	// number of affected rows by the mutation
	AffectedRows int `json:"affected_rows"`
	// data of the affected rows by the mutation
	Returning []*OperatingVehicleInfo `json:"returning"`
}

// input type for inserting object relation for remote table "operating_vehicle_info"
type OperatingVehicleInfoObjRelInsertInput struct {
	Data       *OperatingVehicleInfoInsertInput `json:"data"`
	OnConflict *OperatingVehicleInfoOnConflict  `json:"on_conflict"`
}

// on conflict condition type for table "operating_vehicle_info"
type OperatingVehicleInfoOnConflict struct {
	Constraint    OperatingVehicleInfoConstraint     `json:"constraint"`
	UpdateColumns []OperatingVehicleInfoUpdateColumn `json:"update_columns"`
	Where         *OperatingVehicleInfoBoolExp       `json:"where"`
}

// ordering options when selecting data from "operating_vehicle_info"
type OperatingVehicleInfoOrderBy struct {
	AdministrativeRegion         *model.OrderBy `json:"administrative_region"`
	Agent                        *model.OrderBy `json:"agent"`
	ContactNumber                *model.OrderBy `json:"contact_number"`
	ContractTime                 *model.OrderBy `json:"contract_time"`
	CreateAt                     *model.OrderBy `json:"create_at"`
	CreateBy                     *model.OrderBy `json:"create_by"`
	DeleteAt                     *model.OrderBy `json:"delete_at"`
	DeleteBy                     *model.OrderBy `json:"delete_by"`
	DrivingLicenseOwner          *model.OrderBy `json:"driving_license_owner"`
	FirstOnlineTime              *model.OrderBy `json:"first_online_time"`
	InstallationTime             *model.OrderBy `json:"installation_time"`
	IsBd                         *model.OrderBy `json:"is_BD"`
	IsActive                     *model.OrderBy `json:"is_active"`
	IsApplayTerminalInstallation *model.OrderBy `json:"is_applay_terminal_installation"`
	IsBlock                      *model.OrderBy `json:"is_block"`
	IsEngineeringVehicle         *model.OrderBy `json:"is_engineering_vehicle"`
	IsFunctionOk                 *model.OrderBy `json:"is_function_ok"`
	IsInOperatingSystem          *model.OrderBy `json:"is_in_operating_system"`
	IsInUploadPlatform           *model.OrderBy `json:"is_in_upload_platform"`
	IsNeedSupervise              *model.OrderBy `json:"is_need_supervise"`
	IsSupervise                  *model.OrderBy `json:"is_supervise"`
	LastBindingTerminalTime      *model.OrderBy `json:"last_binding_terminal_time"`
	LicensePlatePhoto            *model.OrderBy `json:"license_plate_photo"`
	MuckTruckType                *model.OrderBy `json:"muck_truck_type"`
	OperatingVehicleID           *model.OrderBy `json:"operating_vehicle_id"`
	OtherPhoto                   *model.OrderBy `json:"other_photo"`
	Platform                     *model.OrderBy `json:"platform"`
	PositionDbID                 *model.OrderBy `json:"position_db_id"`
	ScrapReason                  *model.OrderBy `json:"scrap_reason"`
	ScrapTime                    *model.OrderBy `json:"scrap_time"`
	ScrapTimeCheck               *model.OrderBy `json:"scrap_time_check"`
	SerialNumber                 *model.OrderBy `json:"serial_number"`
	ServiceExpirationTime        *model.OrderBy `json:"service_expiration_time"`
	SpeedModeStatus              *model.OrderBy `json:"speed_mode_status"`
	SpeedModeStatusTime          *model.OrderBy `json:"speed_mode_status_time"`
	TemporaryLibrary             *model.OrderBy `json:"temporary_library"`
	TemporaryTransportBureau     *model.OrderBy `json:"temporary_transport_bureau"`
	UpdateAt                     *model.OrderBy `json:"update_at"`
	UpdateBy                     *model.OrderBy `json:"update_by"`
	VehicleID                    *model.OrderBy `json:"vehicle_id"`
}

// primary key columns input for table: "operating_vehicle_info"
type OperatingVehicleInfoPkColumnsInput struct {
	// 主键
	OperatingVehicleID int64 `json:"operating_vehicle_id"`
}

// input type for updating data in table "operating_vehicle_info"
type OperatingVehicleInfoSetInput struct {
	AdministrativeRegion         *string    `json:"administrative_region"`
	Agent                        *string    `json:"agent"`
	ContactNumber                *string    `json:"contact_number"`
	ContractTime                 *time.Time `json:"contract_time"`
	CreateAt                     *time.Time `json:"create_at"`
	CreateBy                     *string    `json:"create_by"`
	DeleteAt                     *time.Time `json:"delete_at"`
	DeleteBy                     *string    `json:"delete_by"`
	DrivingLicenseOwner          *string    `json:"driving_license_owner"`
	FirstOnlineTime              *time.Time `json:"first_online_time"`
	InstallationTime             *time.Time `json:"installation_time"`
	IsBd                         *bool      `json:"is_BD"`
	IsActive                     *bool      `json:"is_active"`
	IsApplayTerminalInstallation *bool      `json:"is_applay_terminal_installation"`
	IsBlock                      *bool      `json:"is_block"`
	IsEngineeringVehicle         *bool      `json:"is_engineering_vehicle"`
	IsFunctionOk                 *bool      `json:"is_function_ok"`
	IsInOperatingSystem          *bool      `json:"is_in_operating_system"`
	IsInUploadPlatform           *bool      `json:"is_in_upload_platform"`
	IsNeedSupervise              *bool      `json:"is_need_supervise"`
	IsSupervise                  *bool      `json:"is_supervise"`
	LastBindingTerminalTime      *time.Time `json:"last_binding_terminal_time"`
	LicensePlatePhoto            *string    `json:"license_plate_photo"`
	MuckTruckType                *int       `json:"muck_truck_type"`
	OperatingVehicleID           *int64     `json:"operating_vehicle_id"`
	OtherPhoto                   *string    `json:"other_photo"`
	Platform                     *int       `json:"platform"`
	PositionDbID                 *string    `json:"position_db_id"`
	ScrapReason                  *string    `json:"scrap_reason"`
	ScrapTime                    *time.Time `json:"scrap_time"`
	ScrapTimeCheck               *int       `json:"scrap_time_check"`
	SerialNumber                 *string    `json:"serial_number"`
	ServiceExpirationTime        *time.Time `json:"service_expiration_time"`
	SpeedModeStatus              *string    `json:"speed_mode_status"`
	SpeedModeStatusTime          *time.Time `json:"speed_mode_status_time"`
	TemporaryLibrary             *int       `json:"temporary_library"`
	TemporaryTransportBureau     *int       `json:"temporary_transport_bureau"`
	UpdateAt                     *time.Time `json:"update_at"`
	UpdateBy                     *string    `json:"update_by"`
	VehicleID                    *string    `json:"vehicle_id"`
}

// aggregate stddev on columns
type OperatingVehicleInfoStddevFields struct {
	MuckTruckType            *float64 `json:"muck_truck_type"`
	OperatingVehicleID       *float64 `json:"operating_vehicle_id"`
	Platform                 *float64 `json:"platform"`
	ScrapTimeCheck           *float64 `json:"scrap_time_check"`
	TemporaryLibrary         *float64 `json:"temporary_library"`
	TemporaryTransportBureau *float64 `json:"temporary_transport_bureau"`
}

// order by stddev() on columns of table "operating_vehicle_info"
type OperatingVehicleInfoStddevOrderBy struct {
	MuckTruckType            *model.OrderBy `json:"muck_truck_type"`
	OperatingVehicleID       *model.OrderBy `json:"operating_vehicle_id"`
	Platform                 *model.OrderBy `json:"platform"`
	ScrapTimeCheck           *model.OrderBy `json:"scrap_time_check"`
	TemporaryLibrary         *model.OrderBy `json:"temporary_library"`
	TemporaryTransportBureau *model.OrderBy `json:"temporary_transport_bureau"`
}

// aggregate stddev_pop on columns
type OperatingVehicleInfoStddevPopFields struct {
	MuckTruckType            *float64 `json:"muck_truck_type"`
	OperatingVehicleID       *float64 `json:"operating_vehicle_id"`
	Platform                 *float64 `json:"platform"`
	ScrapTimeCheck           *float64 `json:"scrap_time_check"`
	TemporaryLibrary         *float64 `json:"temporary_library"`
	TemporaryTransportBureau *float64 `json:"temporary_transport_bureau"`
}

// order by stddev_pop() on columns of table "operating_vehicle_info"
type OperatingVehicleInfoStddevPopOrderBy struct {
	MuckTruckType            *model.OrderBy `json:"muck_truck_type"`
	OperatingVehicleID       *model.OrderBy `json:"operating_vehicle_id"`
	Platform                 *model.OrderBy `json:"platform"`
	ScrapTimeCheck           *model.OrderBy `json:"scrap_time_check"`
	TemporaryLibrary         *model.OrderBy `json:"temporary_library"`
	TemporaryTransportBureau *model.OrderBy `json:"temporary_transport_bureau"`
}

// aggregate stddev_samp on columns
type OperatingVehicleInfoStddevSampFields struct {
	MuckTruckType            *float64 `json:"muck_truck_type"`
	OperatingVehicleID       *float64 `json:"operating_vehicle_id"`
	Platform                 *float64 `json:"platform"`
	ScrapTimeCheck           *float64 `json:"scrap_time_check"`
	TemporaryLibrary         *float64 `json:"temporary_library"`
	TemporaryTransportBureau *float64 `json:"temporary_transport_bureau"`
}

// order by stddev_samp() on columns of table "operating_vehicle_info"
type OperatingVehicleInfoStddevSampOrderBy struct {
	MuckTruckType            *model.OrderBy `json:"muck_truck_type"`
	OperatingVehicleID       *model.OrderBy `json:"operating_vehicle_id"`
	Platform                 *model.OrderBy `json:"platform"`
	ScrapTimeCheck           *model.OrderBy `json:"scrap_time_check"`
	TemporaryLibrary         *model.OrderBy `json:"temporary_library"`
	TemporaryTransportBureau *model.OrderBy `json:"temporary_transport_bureau"`
}

// aggregate sum on columns
type OperatingVehicleInfoSumFields struct {
	MuckTruckType            *int   `json:"muck_truck_type"`
	OperatingVehicleID       *int64 `json:"operating_vehicle_id"`
	Platform                 *int   `json:"platform"`
	ScrapTimeCheck           *int   `json:"scrap_time_check"`
	TemporaryLibrary         *int   `json:"temporary_library"`
	TemporaryTransportBureau *int   `json:"temporary_transport_bureau"`
}

// order by sum() on columns of table "operating_vehicle_info"
type OperatingVehicleInfoSumOrderBy struct {
	MuckTruckType            *model.OrderBy `json:"muck_truck_type"`
	OperatingVehicleID       *model.OrderBy `json:"operating_vehicle_id"`
	Platform                 *model.OrderBy `json:"platform"`
	ScrapTimeCheck           *model.OrderBy `json:"scrap_time_check"`
	TemporaryLibrary         *model.OrderBy `json:"temporary_library"`
	TemporaryTransportBureau *model.OrderBy `json:"temporary_transport_bureau"`
}

// aggregate var_pop on columns
type OperatingVehicleInfoVarPopFields struct {
	MuckTruckType            *float64 `json:"muck_truck_type"`
	OperatingVehicleID       *float64 `json:"operating_vehicle_id"`
	Platform                 *float64 `json:"platform"`
	ScrapTimeCheck           *float64 `json:"scrap_time_check"`
	TemporaryLibrary         *float64 `json:"temporary_library"`
	TemporaryTransportBureau *float64 `json:"temporary_transport_bureau"`
}

// order by var_pop() on columns of table "operating_vehicle_info"
type OperatingVehicleInfoVarPopOrderBy struct {
	MuckTruckType            *model.OrderBy `json:"muck_truck_type"`
	OperatingVehicleID       *model.OrderBy `json:"operating_vehicle_id"`
	Platform                 *model.OrderBy `json:"platform"`
	ScrapTimeCheck           *model.OrderBy `json:"scrap_time_check"`
	TemporaryLibrary         *model.OrderBy `json:"temporary_library"`
	TemporaryTransportBureau *model.OrderBy `json:"temporary_transport_bureau"`
}

// aggregate var_samp on columns
type OperatingVehicleInfoVarSampFields struct {
	MuckTruckType            *float64 `json:"muck_truck_type"`
	OperatingVehicleID       *float64 `json:"operating_vehicle_id"`
	Platform                 *float64 `json:"platform"`
	ScrapTimeCheck           *float64 `json:"scrap_time_check"`
	TemporaryLibrary         *float64 `json:"temporary_library"`
	TemporaryTransportBureau *float64 `json:"temporary_transport_bureau"`
}

// order by var_samp() on columns of table "operating_vehicle_info"
type OperatingVehicleInfoVarSampOrderBy struct {
	MuckTruckType            *model.OrderBy `json:"muck_truck_type"`
	OperatingVehicleID       *model.OrderBy `json:"operating_vehicle_id"`
	Platform                 *model.OrderBy `json:"platform"`
	ScrapTimeCheck           *model.OrderBy `json:"scrap_time_check"`
	TemporaryLibrary         *model.OrderBy `json:"temporary_library"`
	TemporaryTransportBureau *model.OrderBy `json:"temporary_transport_bureau"`
}

// aggregate variance on columns
type OperatingVehicleInfoVarianceFields struct {
	MuckTruckType            *float64 `json:"muck_truck_type"`
	OperatingVehicleID       *float64 `json:"operating_vehicle_id"`
	Platform                 *float64 `json:"platform"`
	ScrapTimeCheck           *float64 `json:"scrap_time_check"`
	TemporaryLibrary         *float64 `json:"temporary_library"`
	TemporaryTransportBureau *float64 `json:"temporary_transport_bureau"`
}

// order by variance() on columns of table "operating_vehicle_info"
type OperatingVehicleInfoVarianceOrderBy struct {
	MuckTruckType            *model.OrderBy `json:"muck_truck_type"`
	OperatingVehicleID       *model.OrderBy `json:"operating_vehicle_id"`
	Platform                 *model.OrderBy `json:"platform"`
	ScrapTimeCheck           *model.OrderBy `json:"scrap_time_check"`
	TemporaryLibrary         *model.OrderBy `json:"temporary_library"`
	TemporaryTransportBureau *model.OrderBy `json:"temporary_transport_bureau"`
}

// aggregated selection of "owner_info"
type OwnerInfoAggregate struct {
	Aggregate *OwnerInfoAggregateFields `json:"aggregate"`
	Nodes     []*OwnerInfo              `json:"nodes"`
}

// aggregate fields of "owner_info"
type OwnerInfoAggregateFields struct {
	Avg        *OwnerInfoAvgFields        `json:"avg"`
	Count      *int                       `json:"count"`
	Max        *OwnerInfoMaxFields        `json:"max"`
	Min        *OwnerInfoMinFields        `json:"min"`
	Stddev     *OwnerInfoStddevFields     `json:"stddev"`
	StddevPop  *OwnerInfoStddevPopFields  `json:"stddev_pop"`
	StddevSamp *OwnerInfoStddevSampFields `json:"stddev_samp"`
	Sum        *OwnerInfoSumFields        `json:"sum"`
	VarPop     *OwnerInfoVarPopFields     `json:"var_pop"`
	VarSamp    *OwnerInfoVarSampFields    `json:"var_samp"`
	Variance   *OwnerInfoVarianceFields   `json:"variance"`
}

// order by aggregate values of table "owner_info"
type OwnerInfoAggregateOrderBy struct {
	Avg        *OwnerInfoAvgOrderBy        `json:"avg"`
	Count      *model.OrderBy              `json:"count"`
	Max        *OwnerInfoMaxOrderBy        `json:"max"`
	Min        *OwnerInfoMinOrderBy        `json:"min"`
	Stddev     *OwnerInfoStddevOrderBy     `json:"stddev"`
	StddevPop  *OwnerInfoStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *OwnerInfoStddevSampOrderBy `json:"stddev_samp"`
	Sum        *OwnerInfoSumOrderBy        `json:"sum"`
	VarPop     *OwnerInfoVarPopOrderBy     `json:"var_pop"`
	VarSamp    *OwnerInfoVarSampOrderBy    `json:"var_samp"`
	Variance   *OwnerInfoVarianceOrderBy   `json:"variance"`
}

// input type for inserting array relation for remote table "owner_info"
type OwnerInfoArrRelInsertInput struct {
	Data       []*OwnerInfoInsertInput `json:"data"`
	OnConflict *OwnerInfoOnConflict    `json:"on_conflict"`
}

// aggregate avg on columns
type OwnerInfoAvgFields struct {
	ID  *float64 `json:"id"`
	Sex *float64 `json:"sex"`
}

// order by avg() on columns of table "owner_info"
type OwnerInfoAvgOrderBy struct {
	ID  *model.OrderBy `json:"id"`
	Sex *model.OrderBy `json:"sex"`
}

// Boolean expression to filter rows from the table "owner_info". All fields are combined with a logical 'AND'.
type OwnerInfoBoolExp struct {
	And          []*OwnerInfoBoolExp             `json:"_and"`
	Not          *OwnerInfoBoolExp               `json:"_not"`
	Or           []*OwnerInfoBoolExp             `json:"_or"`
	Address      *model.StringComparisonExp      `json:"address"`
	Agent        *model.StringComparisonExp      `json:"agent"`
	Cellphone    *model.StringComparisonExp      `json:"cellphone"`
	CreateAt     *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy     *model.StringComparisonExp      `json:"create_by"`
	DeleteAt     *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy     *model.StringComparisonExp      `json:"delete_by"`
	DepartmentID *model.StringComparisonExp      `json:"department_id"`
	Email        *model.StringComparisonExp      `json:"email"`
	ExpiryDate   *model.TimestamptzComparisonExp `json:"expiry_date"`
	ID           *model.BigintComparisonExp      `json:"id"`
	IDNumber     *model.StringComparisonExp      `json:"id_number"`
	IsDelete     *model.BooleanComparisonExp     `json:"is_delete"`
	Name         *model.StringComparisonExp      `json:"name"`
	Operator     *model.StringComparisonExp      `json:"operator"`
	OwnerID      *model.StringComparisonExp      `json:"owner_id"`
	Remarks      *model.StringComparisonExp      `json:"remarks"`
	Sex          *model.IntComparisonExp         `json:"sex"`
	Telephone    *model.StringComparisonExp      `json:"telephone"`
	UpdateAt     *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy     *model.StringComparisonExp      `json:"update_by"`
}

// input type for incrementing integer column in table "owner_info"
type OwnerInfoIncInput struct {
	ID  *int64 `json:"id"`
	Sex *int   `json:"sex"`
}

// input type for inserting data into table "owner_info"
type OwnerInfoInsertInput struct {
	Address      *string    `json:"address"`
	Agent        *string    `json:"agent"`
	Cellphone    *string    `json:"cellphone"`
	CreateAt     *time.Time `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	DepartmentID *string    `json:"department_id"`
	Email        *string    `json:"email"`
	ExpiryDate   *time.Time `json:"expiry_date"`
	ID           *int64     `json:"id"`
	IDNumber     *string    `json:"id_number"`
	IsDelete     *bool      `json:"is_delete"`
	Name         *string    `json:"name"`
	Operator     *string    `json:"operator"`
	OwnerID      *string    `json:"owner_id"`
	Remarks      *string    `json:"remarks"`
	Sex          *int       `json:"sex"`
	Telephone    *string    `json:"telephone"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
}

// aggregate max on columns
type OwnerInfoMaxFields struct {
	Address      *string    `json:"address"`
	Agent        *string    `json:"agent"`
	Cellphone    *string    `json:"cellphone"`
	CreateAt     *time.Time `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	DepartmentID *string    `json:"department_id"`
	Email        *string    `json:"email"`
	ExpiryDate   *time.Time `json:"expiry_date"`
	ID           *int64     `json:"id"`
	IDNumber     *string    `json:"id_number"`
	Name         *string    `json:"name"`
	Operator     *string    `json:"operator"`
	OwnerID      *string    `json:"owner_id"`
	Remarks      *string    `json:"remarks"`
	Sex          *int       `json:"sex"`
	Telephone    *string    `json:"telephone"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
}

// order by max() on columns of table "owner_info"
type OwnerInfoMaxOrderBy struct {
	Address      *model.OrderBy `json:"address"`
	Agent        *model.OrderBy `json:"agent"`
	Cellphone    *model.OrderBy `json:"cellphone"`
	CreateAt     *model.OrderBy `json:"create_at"`
	CreateBy     *model.OrderBy `json:"create_by"`
	DeleteAt     *model.OrderBy `json:"delete_at"`
	DeleteBy     *model.OrderBy `json:"delete_by"`
	DepartmentID *model.OrderBy `json:"department_id"`
	Email        *model.OrderBy `json:"email"`
	ExpiryDate   *model.OrderBy `json:"expiry_date"`
	ID           *model.OrderBy `json:"id"`
	IDNumber     *model.OrderBy `json:"id_number"`
	Name         *model.OrderBy `json:"name"`
	Operator     *model.OrderBy `json:"operator"`
	OwnerID      *model.OrderBy `json:"owner_id"`
	Remarks      *model.OrderBy `json:"remarks"`
	Sex          *model.OrderBy `json:"sex"`
	Telephone    *model.OrderBy `json:"telephone"`
	UpdateAt     *model.OrderBy `json:"update_at"`
	UpdateBy     *model.OrderBy `json:"update_by"`
}

// aggregate min on columns
type OwnerInfoMinFields struct {
	Address      *string    `json:"address"`
	Agent        *string    `json:"agent"`
	Cellphone    *string    `json:"cellphone"`
	CreateAt     *time.Time `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	DepartmentID *string    `json:"department_id"`
	Email        *string    `json:"email"`
	ExpiryDate   *time.Time `json:"expiry_date"`
	ID           *int64     `json:"id"`
	IDNumber     *string    `json:"id_number"`
	Name         *string    `json:"name"`
	Operator     *string    `json:"operator"`
	OwnerID      *string    `json:"owner_id"`
	Remarks      *string    `json:"remarks"`
	Sex          *int       `json:"sex"`
	Telephone    *string    `json:"telephone"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
}

// order by min() on columns of table "owner_info"
type OwnerInfoMinOrderBy struct {
	Address      *model.OrderBy `json:"address"`
	Agent        *model.OrderBy `json:"agent"`
	Cellphone    *model.OrderBy `json:"cellphone"`
	CreateAt     *model.OrderBy `json:"create_at"`
	CreateBy     *model.OrderBy `json:"create_by"`
	DeleteAt     *model.OrderBy `json:"delete_at"`
	DeleteBy     *model.OrderBy `json:"delete_by"`
	DepartmentID *model.OrderBy `json:"department_id"`
	Email        *model.OrderBy `json:"email"`
	ExpiryDate   *model.OrderBy `json:"expiry_date"`
	ID           *model.OrderBy `json:"id"`
	IDNumber     *model.OrderBy `json:"id_number"`
	Name         *model.OrderBy `json:"name"`
	Operator     *model.OrderBy `json:"operator"`
	OwnerID      *model.OrderBy `json:"owner_id"`
	Remarks      *model.OrderBy `json:"remarks"`
	Sex          *model.OrderBy `json:"sex"`
	Telephone    *model.OrderBy `json:"telephone"`
	UpdateAt     *model.OrderBy `json:"update_at"`
	UpdateBy     *model.OrderBy `json:"update_by"`
}

// response of any mutation on the table "owner_info"
type OwnerInfoMutationResponse struct {
	// number of affected rows by the mutation
	AffectedRows int `json:"affected_rows"`
	// data of the affected rows by the mutation
	Returning []*OwnerInfo `json:"returning"`
}

// input type for inserting object relation for remote table "owner_info"
type OwnerInfoObjRelInsertInput struct {
	Data       *OwnerInfoInsertInput `json:"data"`
	OnConflict *OwnerInfoOnConflict  `json:"on_conflict"`
}

// on conflict condition type for table "owner_info"
type OwnerInfoOnConflict struct {
	Constraint    OwnerInfoConstraint     `json:"constraint"`
	UpdateColumns []OwnerInfoUpdateColumn `json:"update_columns"`
	Where         *OwnerInfoBoolExp       `json:"where"`
}

// ordering options when selecting data from "owner_info"
type OwnerInfoOrderBy struct {
	Address      *model.OrderBy `json:"address"`
	Agent        *model.OrderBy `json:"agent"`
	Cellphone    *model.OrderBy `json:"cellphone"`
	CreateAt     *model.OrderBy `json:"create_at"`
	CreateBy     *model.OrderBy `json:"create_by"`
	DeleteAt     *model.OrderBy `json:"delete_at"`
	DeleteBy     *model.OrderBy `json:"delete_by"`
	DepartmentID *model.OrderBy `json:"department_id"`
	Email        *model.OrderBy `json:"email"`
	ExpiryDate   *model.OrderBy `json:"expiry_date"`
	ID           *model.OrderBy `json:"id"`
	IDNumber     *model.OrderBy `json:"id_number"`
	IsDelete     *model.OrderBy `json:"is_delete"`
	Name         *model.OrderBy `json:"name"`
	Operator     *model.OrderBy `json:"operator"`
	OwnerID      *model.OrderBy `json:"owner_id"`
	Remarks      *model.OrderBy `json:"remarks"`
	Sex          *model.OrderBy `json:"sex"`
	Telephone    *model.OrderBy `json:"telephone"`
	UpdateAt     *model.OrderBy `json:"update_at"`
	UpdateBy     *model.OrderBy `json:"update_by"`
}

// primary key columns input for table: "owner_info"
type OwnerInfoPkColumnsInput struct {
	// 主键
	ID int64 `json:"id"`
}

// input type for updating data in table "owner_info"
type OwnerInfoSetInput struct {
	Address      *string    `json:"address"`
	Agent        *string    `json:"agent"`
	Cellphone    *string    `json:"cellphone"`
	CreateAt     *time.Time `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	DepartmentID *string    `json:"department_id"`
	Email        *string    `json:"email"`
	ExpiryDate   *time.Time `json:"expiry_date"`
	ID           *int64     `json:"id"`
	IDNumber     *string    `json:"id_number"`
	IsDelete     *bool      `json:"is_delete"`
	Name         *string    `json:"name"`
	Operator     *string    `json:"operator"`
	OwnerID      *string    `json:"owner_id"`
	Remarks      *string    `json:"remarks"`
	Sex          *int       `json:"sex"`
	Telephone    *string    `json:"telephone"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
}

// aggregate stddev on columns
type OwnerInfoStddevFields struct {
	ID  *float64 `json:"id"`
	Sex *float64 `json:"sex"`
}

// order by stddev() on columns of table "owner_info"
type OwnerInfoStddevOrderBy struct {
	ID  *model.OrderBy `json:"id"`
	Sex *model.OrderBy `json:"sex"`
}

// aggregate stddev_pop on columns
type OwnerInfoStddevPopFields struct {
	ID  *float64 `json:"id"`
	Sex *float64 `json:"sex"`
}

// order by stddev_pop() on columns of table "owner_info"
type OwnerInfoStddevPopOrderBy struct {
	ID  *model.OrderBy `json:"id"`
	Sex *model.OrderBy `json:"sex"`
}

// aggregate stddev_samp on columns
type OwnerInfoStddevSampFields struct {
	ID  *float64 `json:"id"`
	Sex *float64 `json:"sex"`
}

// order by stddev_samp() on columns of table "owner_info"
type OwnerInfoStddevSampOrderBy struct {
	ID  *model.OrderBy `json:"id"`
	Sex *model.OrderBy `json:"sex"`
}

// aggregate sum on columns
type OwnerInfoSumFields struct {
	ID  *int64 `json:"id"`
	Sex *int   `json:"sex"`
}

// order by sum() on columns of table "owner_info"
type OwnerInfoSumOrderBy struct {
	ID  *model.OrderBy `json:"id"`
	Sex *model.OrderBy `json:"sex"`
}

// aggregate var_pop on columns
type OwnerInfoVarPopFields struct {
	ID  *float64 `json:"id"`
	Sex *float64 `json:"sex"`
}

// order by var_pop() on columns of table "owner_info"
type OwnerInfoVarPopOrderBy struct {
	ID  *model.OrderBy `json:"id"`
	Sex *model.OrderBy `json:"sex"`
}

// aggregate var_samp on columns
type OwnerInfoVarSampFields struct {
	ID  *float64 `json:"id"`
	Sex *float64 `json:"sex"`
}

// order by var_samp() on columns of table "owner_info"
type OwnerInfoVarSampOrderBy struct {
	ID  *model.OrderBy `json:"id"`
	Sex *model.OrderBy `json:"sex"`
}

// aggregate variance on columns
type OwnerInfoVarianceFields struct {
	ID  *float64 `json:"id"`
	Sex *float64 `json:"sex"`
}

// order by variance() on columns of table "owner_info"
type OwnerInfoVarianceOrderBy struct {
	ID  *model.OrderBy `json:"id"`
	Sex *model.OrderBy `json:"sex"`
}

// aggregated selection of "vehicle_info"
type VehicleInfoAggregate struct {
	Aggregate *VehicleInfoAggregateFields `json:"aggregate"`
	Nodes     []*VehicleInfo              `json:"nodes"`
}

// aggregate fields of "vehicle_info"
type VehicleInfoAggregateFields struct {
	Avg        *VehicleInfoAvgFields        `json:"avg"`
	Count      *int                         `json:"count"`
	Max        *VehicleInfoMaxFields        `json:"max"`
	Min        *VehicleInfoMinFields        `json:"min"`
	Stddev     *VehicleInfoStddevFields     `json:"stddev"`
	StddevPop  *VehicleInfoStddevPopFields  `json:"stddev_pop"`
	StddevSamp *VehicleInfoStddevSampFields `json:"stddev_samp"`
	Sum        *VehicleInfoSumFields        `json:"sum"`
	VarPop     *VehicleInfoVarPopFields     `json:"var_pop"`
	VarSamp    *VehicleInfoVarSampFields    `json:"var_samp"`
	Variance   *VehicleInfoVarianceFields   `json:"variance"`
}

// order by aggregate values of table "vehicle_info"
type VehicleInfoAggregateOrderBy struct {
	Avg        *VehicleInfoAvgOrderBy        `json:"avg"`
	Count      *model.OrderBy                `json:"count"`
	Max        *VehicleInfoMaxOrderBy        `json:"max"`
	Min        *VehicleInfoMinOrderBy        `json:"min"`
	Stddev     *VehicleInfoStddevOrderBy     `json:"stddev"`
	StddevPop  *VehicleInfoStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *VehicleInfoStddevSampOrderBy `json:"stddev_samp"`
	Sum        *VehicleInfoSumOrderBy        `json:"sum"`
	VarPop     *VehicleInfoVarPopOrderBy     `json:"var_pop"`
	VarSamp    *VehicleInfoVarSampOrderBy    `json:"var_samp"`
	Variance   *VehicleInfoVarianceOrderBy   `json:"variance"`
}

// input type for inserting array relation for remote table "vehicle_info"
type VehicleInfoArrRelInsertInput struct {
	Data       []*VehicleInfoInsertInput `json:"data"`
	OnConflict *VehicleInfoOnConflict    `json:"on_conflict"`
}

// aggregate avg on columns
type VehicleInfoAvgFields struct {
	BusinessScope      *float64 `json:"business_scope"`
	CarRentalPrice     *float64 `json:"car_rental_price"`
	CheckState         *float64 `json:"check_state"`
	Heavy              *float64 `json:"heavy"`
	ID                 *float64 `json:"id"`
	IndustryCategory   *float64 `json:"industry_category"`
	InsuranceCompany   *float64 `json:"insurance_company"`
	LicensePlateColor  *float64 `json:"license_plate_color"`
	LicensePlateType   *float64 `json:"license_plate_type"`
	MuckTruckID        *float64 `json:"muck_truck_id"`
	OperatingState     *float64 `json:"operating_state"`
	OperatingType      *float64 `json:"operating_type"`
	OperatingVehicleID *float64 `json:"operating_vehicle_id"`
	QuasiDrivingModels *float64 `json:"quasi_driving_models"`
	Seats              *float64 `json:"seats"`
	VehicleBrand       *float64 `json:"vehicle_brand"`
	VehicleState       *float64 `json:"vehicle_state"`
	VehicleType        *float64 `json:"vehicle_type"`
}

// order by avg() on columns of table "vehicle_info"
type VehicleInfoAvgOrderBy struct {
	BusinessScope      *model.OrderBy `json:"business_scope"`
	CarRentalPrice     *model.OrderBy `json:"car_rental_price"`
	CheckState         *model.OrderBy `json:"check_state"`
	Heavy              *model.OrderBy `json:"heavy"`
	ID                 *model.OrderBy `json:"id"`
	IndustryCategory   *model.OrderBy `json:"industry_category"`
	InsuranceCompany   *model.OrderBy `json:"insurance_company"`
	LicensePlateColor  *model.OrderBy `json:"license_plate_color"`
	LicensePlateType   *model.OrderBy `json:"license_plate_type"`
	MuckTruckID        *model.OrderBy `json:"muck_truck_id"`
	OperatingState     *model.OrderBy `json:"operating_state"`
	OperatingType      *model.OrderBy `json:"operating_type"`
	OperatingVehicleID *model.OrderBy `json:"operating_vehicle_id"`
	QuasiDrivingModels *model.OrderBy `json:"quasi_driving_models"`
	Seats              *model.OrderBy `json:"seats"`
	VehicleBrand       *model.OrderBy `json:"vehicle_brand"`
	VehicleState       *model.OrderBy `json:"vehicle_state"`
	VehicleType        *model.OrderBy `json:"vehicle_type"`
}

// Boolean expression to filter rows from the table "vehicle_info". All fields are combined with a logical 'AND'.
type VehicleInfoBoolExp struct {
	And                         []*VehicleInfoBoolExp           `json:"_and"`
	Not                         *VehicleInfoBoolExp             `json:"_not"`
	Or                          []*VehicleInfoBoolExp           `json:"_or"`
	BusinessScope               *model.IntComparisonExp         `json:"business_scope"`
	CarRentalPrice              *model.NumericComparisonExp     `json:"car_rental_price"`
	CheckState                  *model.IntComparisonExp         `json:"check_state"`
	CreateAt                    *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy                    *model.StringComparisonExp      `json:"create_by"`
	DeleteAt                    *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy                    *model.TimestamptzComparisonExp `json:"delete_by"`
	DepartmentID                *model.StringComparisonExp      `json:"department_id"`
	DrivingLicenseePic          *model.StringComparisonExp      `json:"driving_licensee_pic"`
	EnterpriseID                *model.StringComparisonExp      `json:"enterprise_id"`
	Heavy                       *model.NumericComparisonExp     `json:"heavy"`
	ID                          *model.BigintComparisonExp      `json:"id"`
	IndustryCategory            *model.IntComparisonExp         `json:"industry_category"`
	InspectionDate              *model.TimestamptzComparisonExp `json:"inspection_date"`
	InsuranceCompany            *model.IntComparisonExp         `json:"insurance_company"`
	InsuranceDate               *model.TimestamptzComparisonExp `json:"insurance_date"`
	IsActive                    *model.BooleanComparisonExp     `json:"is_active"`
	IsApplyInstallTerminal      *model.BooleanComparisonExp     `json:"is_apply_install_terminal"`
	IsComplete                  *model.BooleanComparisonExp     `json:"is_complete"`
	IsDelete                    *model.BooleanComparisonExp     `json:"is_delete"`
	IsImport                    *model.BooleanComparisonExp     `json:"is_import"`
	IsInput                     *model.BooleanComparisonExp     `json:"is_input"`
	IsUploadProvince            *model.BooleanComparisonExp     `json:"is_upload_province"`
	LicensePlateColor           *model.IntComparisonExp         `json:"license_plate_color"`
	LicensePlateNumber          *model.StringComparisonExp      `json:"license_plate_number"`
	LicensePlateType            *model.IntComparisonExp         `json:"license_plate_type"`
	MuckTruckID                 *model.BigintComparisonExp      `json:"muck_truck_id"`
	OperatingRoute              *model.StringComparisonExp      `json:"operating_route"`
	OperatingState              *model.IntComparisonExp         `json:"operating_state"`
	OperatingType               *model.IntComparisonExp         `json:"operating_type"`
	OperatingVehicleID          *model.BigintComparisonExp      `json:"operating_vehicle_id"`
	Owner                       *model.StringComparisonExp      `json:"owner"`
	QuasiDrivingModels          *model.IntComparisonExp         `json:"quasi_driving_models"`
	RecordAt                    *model.TimestamptzComparisonExp `json:"record_at"`
	RecordBy                    *model.StringComparisonExp      `json:"record_by"`
	RemarkIn                    *model.StringComparisonExp      `json:"remark_in"`
	Remarks                     *model.StringComparisonExp      `json:"remarks"`
	RetirementDate              *model.TimestamptzComparisonExp `json:"retirement_date"`
	RoadTransportLicenseNumber  *model.StringComparisonExp      `json:"road_transport_license_number"`
	Seats                       *model.IntComparisonExp         `json:"seats"`
	TerminalID                  *model.StringComparisonExp      `json:"terminal_id"`
	UpdateAt                    *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy                    *model.StringComparisonExp      `json:"update_by"`
	UpdateTimeIn                *model.TimestamptzComparisonExp `json:"update_time_in"`
	UseNature                   *model.StringComparisonExp      `json:"use_nature"`
	VehicleBrand                *model.IntComparisonExp         `json:"vehicle_brand"`
	VehicleDisplacement         *model.StringComparisonExp      `json:"vehicle_displacement"`
	VehicleID                   *model.StringComparisonExp      `json:"vehicle_id"`
	VehicleIdentificationNumber *model.StringComparisonExp      `json:"vehicle_identification_number"`
	VehicleMaintenances         *model.JsonbComparisonExp       `json:"vehicle_maintenances"`
	VehicleManager              *model.StringComparisonExp      `json:"vehicle_manager"`
	VehicleManagerIDCard        *model.StringComparisonExp      `json:"vehicle_manager_id_card"`
	VehicleManagerPhone         *model.StringComparisonExp      `json:"vehicle_manager_phone"`
	VehicleState                *model.IntComparisonExp         `json:"vehicle_state"`
	VehicleType                 *model.IntComparisonExp         `json:"vehicle_type"`
}

// aggregated selection of "vehicle_info_change_log"
type VehicleInfoChangeLogAggregate struct {
	Aggregate *VehicleInfoChangeLogAggregateFields `json:"aggregate"`
	Nodes     []*VehicleInfoChangeLog              `json:"nodes"`
}

// aggregate fields of "vehicle_info_change_log"
type VehicleInfoChangeLogAggregateFields struct {
	Avg        *VehicleInfoChangeLogAvgFields        `json:"avg"`
	Count      *int                                  `json:"count"`
	Max        *VehicleInfoChangeLogMaxFields        `json:"max"`
	Min        *VehicleInfoChangeLogMinFields        `json:"min"`
	Stddev     *VehicleInfoChangeLogStddevFields     `json:"stddev"`
	StddevPop  *VehicleInfoChangeLogStddevPopFields  `json:"stddev_pop"`
	StddevSamp *VehicleInfoChangeLogStddevSampFields `json:"stddev_samp"`
	Sum        *VehicleInfoChangeLogSumFields        `json:"sum"`
	VarPop     *VehicleInfoChangeLogVarPopFields     `json:"var_pop"`
	VarSamp    *VehicleInfoChangeLogVarSampFields    `json:"var_samp"`
	Variance   *VehicleInfoChangeLogVarianceFields   `json:"variance"`
}

// order by aggregate values of table "vehicle_info_change_log"
type VehicleInfoChangeLogAggregateOrderBy struct {
	Avg        *VehicleInfoChangeLogAvgOrderBy        `json:"avg"`
	Count      *model.OrderBy                         `json:"count"`
	Max        *VehicleInfoChangeLogMaxOrderBy        `json:"max"`
	Min        *VehicleInfoChangeLogMinOrderBy        `json:"min"`
	Stddev     *VehicleInfoChangeLogStddevOrderBy     `json:"stddev"`
	StddevPop  *VehicleInfoChangeLogStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *VehicleInfoChangeLogStddevSampOrderBy `json:"stddev_samp"`
	Sum        *VehicleInfoChangeLogSumOrderBy        `json:"sum"`
	VarPop     *VehicleInfoChangeLogVarPopOrderBy     `json:"var_pop"`
	VarSamp    *VehicleInfoChangeLogVarSampOrderBy    `json:"var_samp"`
	Variance   *VehicleInfoChangeLogVarianceOrderBy   `json:"variance"`
}

// input type for inserting array relation for remote table "vehicle_info_change_log"
type VehicleInfoChangeLogArrRelInsertInput struct {
	Data       []*VehicleInfoChangeLogInsertInput `json:"data"`
	OnConflict *VehicleInfoChangeLogOnConflict    `json:"on_conflict"`
}

// aggregate avg on columns
type VehicleInfoChangeLogAvgFields struct {
	BusinessScope      *float64 `json:"business_scope"`
	CarRentalPrice     *float64 `json:"car_rental_price"`
	CheckState         *float64 `json:"check_state"`
	Heavy              *float64 `json:"heavy"`
	ID                 *float64 `json:"id"`
	IndustryCategory   *float64 `json:"industry_category"`
	InsuranceCompany   *float64 `json:"insurance_company"`
	LicensePlateColor  *float64 `json:"license_plate_color"`
	LicensePlateType   *float64 `json:"license_plate_type"`
	MuckTruckID        *float64 `json:"muck_truck_id"`
	OperatingState     *float64 `json:"operating_state"`
	OperatingType      *float64 `json:"operating_type"`
	OperatingVehicleID *float64 `json:"operating_vehicle_id"`
	QuasiDrivingModels *float64 `json:"quasi_driving_models"`
	Seats              *float64 `json:"seats"`
	VehicleBrand       *float64 `json:"vehicle_brand"`
	VehicleState       *float64 `json:"vehicle_state"`
	VehicleType        *float64 `json:"vehicle_type"`
}

// order by avg() on columns of table "vehicle_info_change_log"
type VehicleInfoChangeLogAvgOrderBy struct {
	BusinessScope      *model.OrderBy `json:"business_scope"`
	CarRentalPrice     *model.OrderBy `json:"car_rental_price"`
	CheckState         *model.OrderBy `json:"check_state"`
	Heavy              *model.OrderBy `json:"heavy"`
	ID                 *model.OrderBy `json:"id"`
	IndustryCategory   *model.OrderBy `json:"industry_category"`
	InsuranceCompany   *model.OrderBy `json:"insurance_company"`
	LicensePlateColor  *model.OrderBy `json:"license_plate_color"`
	LicensePlateType   *model.OrderBy `json:"license_plate_type"`
	MuckTruckID        *model.OrderBy `json:"muck_truck_id"`
	OperatingState     *model.OrderBy `json:"operating_state"`
	OperatingType      *model.OrderBy `json:"operating_type"`
	OperatingVehicleID *model.OrderBy `json:"operating_vehicle_id"`
	QuasiDrivingModels *model.OrderBy `json:"quasi_driving_models"`
	Seats              *model.OrderBy `json:"seats"`
	VehicleBrand       *model.OrderBy `json:"vehicle_brand"`
	VehicleState       *model.OrderBy `json:"vehicle_state"`
	VehicleType        *model.OrderBy `json:"vehicle_type"`
}

// Boolean expression to filter rows from the table "vehicle_info_change_log". All fields are combined with a logical 'AND'.
type VehicleInfoChangeLogBoolExp struct {
	And                         []*VehicleInfoChangeLogBoolExp  `json:"_and"`
	Not                         *VehicleInfoChangeLogBoolExp    `json:"_not"`
	Or                          []*VehicleInfoChangeLogBoolExp  `json:"_or"`
	BusinessScope               *model.IntComparisonExp         `json:"business_scope"`
	CarRentalPrice              *model.NumericComparisonExp     `json:"car_rental_price"`
	CheckState                  *model.IntComparisonExp         `json:"check_state"`
	CreateAt                    *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy                    *model.StringComparisonExp      `json:"create_by"`
	DeleteAt                    *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy                    *model.TimestamptzComparisonExp `json:"delete_by"`
	DepartmentID                *model.StringComparisonExp      `json:"department_id"`
	DrivingLicenseePic          *model.StringComparisonExp      `json:"driving_licensee_pic"`
	EnterpriseID                *model.StringComparisonExp      `json:"enterprise_id"`
	Heavy                       *model.NumericComparisonExp     `json:"heavy"`
	ID                          *model.BigintComparisonExp      `json:"id"`
	IndustryCategory            *model.IntComparisonExp         `json:"industry_category"`
	InspectionDate              *model.TimestamptzComparisonExp `json:"inspection_date"`
	InsuranceCompany            *model.IntComparisonExp         `json:"insurance_company"`
	InsuranceDate               *model.TimestamptzComparisonExp `json:"insurance_date"`
	IsActive                    *model.BooleanComparisonExp     `json:"is_active"`
	IsApplyInstallTerminal      *model.BooleanComparisonExp     `json:"is_apply_install_terminal"`
	IsComplete                  *model.BooleanComparisonExp     `json:"is_complete"`
	IsDelete                    *model.BooleanComparisonExp     `json:"is_delete"`
	IsImport                    *model.BooleanComparisonExp     `json:"is_import"`
	IsInput                     *model.BooleanComparisonExp     `json:"is_input"`
	IsUploadProvince            *model.BooleanComparisonExp     `json:"is_upload_province"`
	LicensePlateColor           *model.IntComparisonExp         `json:"license_plate_color"`
	LicensePlateNumber          *model.StringComparisonExp      `json:"license_plate_number"`
	LicensePlateType            *model.IntComparisonExp         `json:"license_plate_type"`
	MuckTruckID                 *model.BigintComparisonExp      `json:"muck_truck_id"`
	OperatingRoute              *model.StringComparisonExp      `json:"operating_route"`
	OperatingState              *model.IntComparisonExp         `json:"operating_state"`
	OperatingType               *model.IntComparisonExp         `json:"operating_type"`
	OperatingVehicleID          *model.BigintComparisonExp      `json:"operating_vehicle_id"`
	Owner                       *model.StringComparisonExp      `json:"owner"`
	QuasiDrivingModels          *model.IntComparisonExp         `json:"quasi_driving_models"`
	RecordAt                    *model.TimestamptzComparisonExp `json:"record_at"`
	RecordBy                    *model.StringComparisonExp      `json:"record_by"`
	RemarkIn                    *model.StringComparisonExp      `json:"remark_in"`
	Remarks                     *model.StringComparisonExp      `json:"remarks"`
	RetirementDate              *model.TimestamptzComparisonExp `json:"retirement_date"`
	RoadTransportLicenseNumber  *model.StringComparisonExp      `json:"road_transport_license_number"`
	Seats                       *model.IntComparisonExp         `json:"seats"`
	TerminalID                  *model.StringComparisonExp      `json:"terminal_id"`
	UpdateAt                    *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy                    *model.StringComparisonExp      `json:"update_by"`
	UpdateTimeIn                *model.TimestamptzComparisonExp `json:"update_time_in"`
	UseNature                   *model.StringComparisonExp      `json:"use_nature"`
	VehicleBrand                *model.IntComparisonExp         `json:"vehicle_brand"`
	VehicleDisplacement         *model.StringComparisonExp      `json:"vehicle_displacement"`
	VehicleIdentificationNumber *model.StringComparisonExp      `json:"vehicle_identification_number"`
	VehicleInfoChangeID         *model.StringComparisonExp      `json:"vehicle_info_change_id"`
	VehicleMaintenances         *model.JsonbComparisonExp       `json:"vehicle_maintenances"`
	VehicleManager              *model.StringComparisonExp      `json:"vehicle_manager"`
	VehicleManagerIDCard        *model.StringComparisonExp      `json:"vehicle_manager_id_card"`
	VehicleManagerPhone         *model.StringComparisonExp      `json:"vehicle_manager_phone"`
	VehicleState                *model.IntComparisonExp         `json:"vehicle_state"`
	VehicleType                 *model.IntComparisonExp         `json:"vehicle_type"`
}

// input type for incrementing integer column in table "vehicle_info_change_log"
type VehicleInfoChangeLogIncInput struct {
	BusinessScope      *int     `json:"business_scope"`
	CarRentalPrice     *float64 `json:"car_rental_price"`
	CheckState         *int     `json:"check_state"`
	Heavy              *float64 `json:"heavy"`
	ID                 *int64   `json:"id"`
	IndustryCategory   *int     `json:"industry_category"`
	InsuranceCompany   *int     `json:"insurance_company"`
	LicensePlateColor  *int     `json:"license_plate_color"`
	LicensePlateType   *int     `json:"license_plate_type"`
	MuckTruckID        *int64   `json:"muck_truck_id"`
	OperatingState     *int     `json:"operating_state"`
	OperatingType      *int     `json:"operating_type"`
	OperatingVehicleID *int64   `json:"operating_vehicle_id"`
	QuasiDrivingModels *int     `json:"quasi_driving_models"`
	Seats              *int     `json:"seats"`
	VehicleBrand       *int     `json:"vehicle_brand"`
	VehicleState       *int     `json:"vehicle_state"`
	VehicleType        *int     `json:"vehicle_type"`
}

// input type for inserting data into table "vehicle_info_change_log"
type VehicleInfoChangeLogInsertInput struct {
	BusinessScope               *int       `json:"business_scope"`
	CarRentalPrice              *float64   `json:"car_rental_price"`
	CheckState                  *int       `json:"check_state"`
	CreateAt                    *time.Time `json:"create_at"`
	CreateBy                    *string    `json:"create_by"`
	DeleteAt                    *time.Time `json:"delete_at"`
	DeleteBy                    *time.Time `json:"delete_by"`
	DepartmentID                *string    `json:"department_id"`
	DrivingLicenseePic          *string    `json:"driving_licensee_pic"`
	EnterpriseID                *string    `json:"enterprise_id"`
	Heavy                       *float64   `json:"heavy"`
	ID                          *int64     `json:"id"`
	IndustryCategory            *int       `json:"industry_category"`
	InspectionDate              *time.Time `json:"inspection_date"`
	InsuranceCompany            *int       `json:"insurance_company"`
	InsuranceDate               *time.Time `json:"insurance_date"`
	IsActive                    *bool      `json:"is_active"`
	IsApplyInstallTerminal      *bool      `json:"is_apply_install_terminal"`
	IsComplete                  *bool      `json:"is_complete"`
	IsDelete                    *bool      `json:"is_delete"`
	IsImport                    *bool      `json:"is_import"`
	IsInput                     *bool      `json:"is_input"`
	IsUploadProvince            *bool      `json:"is_upload_province"`
	LicensePlateColor           *int       `json:"license_plate_color"`
	LicensePlateNumber          *string    `json:"license_plate_number"`
	LicensePlateType            *int       `json:"license_plate_type"`
	MuckTruckID                 *int64     `json:"muck_truck_id"`
	OperatingRoute              *string    `json:"operating_route"`
	OperatingState              *int       `json:"operating_state"`
	OperatingType               *int       `json:"operating_type"`
	OperatingVehicleID          *int64     `json:"operating_vehicle_id"`
	Owner                       *string    `json:"owner"`
	QuasiDrivingModels          *int       `json:"quasi_driving_models"`
	RecordAt                    *time.Time `json:"record_at"`
	RecordBy                    *string    `json:"record_by"`
	RemarkIn                    *string    `json:"remark_in"`
	Remarks                     *string    `json:"remarks"`
	RetirementDate              *time.Time `json:"retirement_date"`
	RoadTransportLicenseNumber  *string    `json:"road_transport_license_number"`
	Seats                       *int       `json:"seats"`
	TerminalID                  *string    `json:"terminal_id"`
	UpdateAt                    *time.Time `json:"update_at"`
	UpdateBy                    *string    `json:"update_by"`
	UpdateTimeIn                *time.Time `json:"update_time_in"`
	UseNature                   *string    `json:"use_nature"`
	VehicleBrand                *int       `json:"vehicle_brand"`
	VehicleDisplacement         *string    `json:"vehicle_displacement"`
	VehicleIdentificationNumber *string    `json:"vehicle_identification_number"`
	VehicleInfoChangeID         *string    `json:"vehicle_info_change_id"`
	VehicleMaintenances         *string    `json:"vehicle_maintenances"`
	VehicleManager              *string    `json:"vehicle_manager"`
	VehicleManagerIDCard        *string    `json:"vehicle_manager_id_card"`
	VehicleManagerPhone         *string    `json:"vehicle_manager_phone"`
	VehicleState                *int       `json:"vehicle_state"`
	VehicleType                 *int       `json:"vehicle_type"`
}

// aggregate max on columns
type VehicleInfoChangeLogMaxFields struct {
	BusinessScope               *int       `json:"business_scope"`
	CarRentalPrice              *float64   `json:"car_rental_price"`
	CheckState                  *int       `json:"check_state"`
	CreateAt                    *time.Time `json:"create_at"`
	CreateBy                    *string    `json:"create_by"`
	DeleteAt                    *time.Time `json:"delete_at"`
	DeleteBy                    *time.Time `json:"delete_by"`
	DepartmentID                *string    `json:"department_id"`
	DrivingLicenseePic          *string    `json:"driving_licensee_pic"`
	EnterpriseID                *string    `json:"enterprise_id"`
	Heavy                       *float64   `json:"heavy"`
	ID                          *int64     `json:"id"`
	IndustryCategory            *int       `json:"industry_category"`
	InspectionDate              *time.Time `json:"inspection_date"`
	InsuranceCompany            *int       `json:"insurance_company"`
	InsuranceDate               *time.Time `json:"insurance_date"`
	LicensePlateColor           *int       `json:"license_plate_color"`
	LicensePlateNumber          *string    `json:"license_plate_number"`
	LicensePlateType            *int       `json:"license_plate_type"`
	MuckTruckID                 *int64     `json:"muck_truck_id"`
	OperatingRoute              *string    `json:"operating_route"`
	OperatingState              *int       `json:"operating_state"`
	OperatingType               *int       `json:"operating_type"`
	OperatingVehicleID          *int64     `json:"operating_vehicle_id"`
	Owner                       *string    `json:"owner"`
	QuasiDrivingModels          *int       `json:"quasi_driving_models"`
	RecordAt                    *time.Time `json:"record_at"`
	RecordBy                    *string    `json:"record_by"`
	RemarkIn                    *string    `json:"remark_in"`
	Remarks                     *string    `json:"remarks"`
	RetirementDate              *time.Time `json:"retirement_date"`
	RoadTransportLicenseNumber  *string    `json:"road_transport_license_number"`
	Seats                       *int       `json:"seats"`
	TerminalID                  *string    `json:"terminal_id"`
	UpdateAt                    *time.Time `json:"update_at"`
	UpdateBy                    *string    `json:"update_by"`
	UpdateTimeIn                *time.Time `json:"update_time_in"`
	UseNature                   *string    `json:"use_nature"`
	VehicleBrand                *int       `json:"vehicle_brand"`
	VehicleDisplacement         *string    `json:"vehicle_displacement"`
	VehicleIdentificationNumber *string    `json:"vehicle_identification_number"`
	VehicleInfoChangeID         *string    `json:"vehicle_info_change_id"`
	VehicleManager              *string    `json:"vehicle_manager"`
	VehicleManagerIDCard        *string    `json:"vehicle_manager_id_card"`
	VehicleManagerPhone         *string    `json:"vehicle_manager_phone"`
	VehicleState                *int       `json:"vehicle_state"`
	VehicleType                 *int       `json:"vehicle_type"`
}

// order by max() on columns of table "vehicle_info_change_log"
type VehicleInfoChangeLogMaxOrderBy struct {
	BusinessScope               *model.OrderBy `json:"business_scope"`
	CarRentalPrice              *model.OrderBy `json:"car_rental_price"`
	CheckState                  *model.OrderBy `json:"check_state"`
	CreateAt                    *model.OrderBy `json:"create_at"`
	CreateBy                    *model.OrderBy `json:"create_by"`
	DeleteAt                    *model.OrderBy `json:"delete_at"`
	DeleteBy                    *model.OrderBy `json:"delete_by"`
	DepartmentID                *model.OrderBy `json:"department_id"`
	DrivingLicenseePic          *model.OrderBy `json:"driving_licensee_pic"`
	EnterpriseID                *model.OrderBy `json:"enterprise_id"`
	Heavy                       *model.OrderBy `json:"heavy"`
	ID                          *model.OrderBy `json:"id"`
	IndustryCategory            *model.OrderBy `json:"industry_category"`
	InspectionDate              *model.OrderBy `json:"inspection_date"`
	InsuranceCompany            *model.OrderBy `json:"insurance_company"`
	InsuranceDate               *model.OrderBy `json:"insurance_date"`
	LicensePlateColor           *model.OrderBy `json:"license_plate_color"`
	LicensePlateNumber          *model.OrderBy `json:"license_plate_number"`
	LicensePlateType            *model.OrderBy `json:"license_plate_type"`
	MuckTruckID                 *model.OrderBy `json:"muck_truck_id"`
	OperatingRoute              *model.OrderBy `json:"operating_route"`
	OperatingState              *model.OrderBy `json:"operating_state"`
	OperatingType               *model.OrderBy `json:"operating_type"`
	OperatingVehicleID          *model.OrderBy `json:"operating_vehicle_id"`
	Owner                       *model.OrderBy `json:"owner"`
	QuasiDrivingModels          *model.OrderBy `json:"quasi_driving_models"`
	RecordAt                    *model.OrderBy `json:"record_at"`
	RecordBy                    *model.OrderBy `json:"record_by"`
	RemarkIn                    *model.OrderBy `json:"remark_in"`
	Remarks                     *model.OrderBy `json:"remarks"`
	RetirementDate              *model.OrderBy `json:"retirement_date"`
	RoadTransportLicenseNumber  *model.OrderBy `json:"road_transport_license_number"`
	Seats                       *model.OrderBy `json:"seats"`
	TerminalID                  *model.OrderBy `json:"terminal_id"`
	UpdateAt                    *model.OrderBy `json:"update_at"`
	UpdateBy                    *model.OrderBy `json:"update_by"`
	UpdateTimeIn                *model.OrderBy `json:"update_time_in"`
	UseNature                   *model.OrderBy `json:"use_nature"`
	VehicleBrand                *model.OrderBy `json:"vehicle_brand"`
	VehicleDisplacement         *model.OrderBy `json:"vehicle_displacement"`
	VehicleIdentificationNumber *model.OrderBy `json:"vehicle_identification_number"`
	VehicleInfoChangeID         *model.OrderBy `json:"vehicle_info_change_id"`
	VehicleManager              *model.OrderBy `json:"vehicle_manager"`
	VehicleManagerIDCard        *model.OrderBy `json:"vehicle_manager_id_card"`
	VehicleManagerPhone         *model.OrderBy `json:"vehicle_manager_phone"`
	VehicleState                *model.OrderBy `json:"vehicle_state"`
	VehicleType                 *model.OrderBy `json:"vehicle_type"`
}

// aggregate min on columns
type VehicleInfoChangeLogMinFields struct {
	BusinessScope               *int       `json:"business_scope"`
	CarRentalPrice              *float64   `json:"car_rental_price"`
	CheckState                  *int       `json:"check_state"`
	CreateAt                    *time.Time `json:"create_at"`
	CreateBy                    *string    `json:"create_by"`
	DeleteAt                    *time.Time `json:"delete_at"`
	DeleteBy                    *time.Time `json:"delete_by"`
	DepartmentID                *string    `json:"department_id"`
	DrivingLicenseePic          *string    `json:"driving_licensee_pic"`
	EnterpriseID                *string    `json:"enterprise_id"`
	Heavy                       *float64   `json:"heavy"`
	ID                          *int64     `json:"id"`
	IndustryCategory            *int       `json:"industry_category"`
	InspectionDate              *time.Time `json:"inspection_date"`
	InsuranceCompany            *int       `json:"insurance_company"`
	InsuranceDate               *time.Time `json:"insurance_date"`
	LicensePlateColor           *int       `json:"license_plate_color"`
	LicensePlateNumber          *string    `json:"license_plate_number"`
	LicensePlateType            *int       `json:"license_plate_type"`
	MuckTruckID                 *int64     `json:"muck_truck_id"`
	OperatingRoute              *string    `json:"operating_route"`
	OperatingState              *int       `json:"operating_state"`
	OperatingType               *int       `json:"operating_type"`
	OperatingVehicleID          *int64     `json:"operating_vehicle_id"`
	Owner                       *string    `json:"owner"`
	QuasiDrivingModels          *int       `json:"quasi_driving_models"`
	RecordAt                    *time.Time `json:"record_at"`
	RecordBy                    *string    `json:"record_by"`
	RemarkIn                    *string    `json:"remark_in"`
	Remarks                     *string    `json:"remarks"`
	RetirementDate              *time.Time `json:"retirement_date"`
	RoadTransportLicenseNumber  *string    `json:"road_transport_license_number"`
	Seats                       *int       `json:"seats"`
	TerminalID                  *string    `json:"terminal_id"`
	UpdateAt                    *time.Time `json:"update_at"`
	UpdateBy                    *string    `json:"update_by"`
	UpdateTimeIn                *time.Time `json:"update_time_in"`
	UseNature                   *string    `json:"use_nature"`
	VehicleBrand                *int       `json:"vehicle_brand"`
	VehicleDisplacement         *string    `json:"vehicle_displacement"`
	VehicleIdentificationNumber *string    `json:"vehicle_identification_number"`
	VehicleInfoChangeID         *string    `json:"vehicle_info_change_id"`
	VehicleManager              *string    `json:"vehicle_manager"`
	VehicleManagerIDCard        *string    `json:"vehicle_manager_id_card"`
	VehicleManagerPhone         *string    `json:"vehicle_manager_phone"`
	VehicleState                *int       `json:"vehicle_state"`
	VehicleType                 *int       `json:"vehicle_type"`
}

// order by min() on columns of table "vehicle_info_change_log"
type VehicleInfoChangeLogMinOrderBy struct {
	BusinessScope               *model.OrderBy `json:"business_scope"`
	CarRentalPrice              *model.OrderBy `json:"car_rental_price"`
	CheckState                  *model.OrderBy `json:"check_state"`
	CreateAt                    *model.OrderBy `json:"create_at"`
	CreateBy                    *model.OrderBy `json:"create_by"`
	DeleteAt                    *model.OrderBy `json:"delete_at"`
	DeleteBy                    *model.OrderBy `json:"delete_by"`
	DepartmentID                *model.OrderBy `json:"department_id"`
	DrivingLicenseePic          *model.OrderBy `json:"driving_licensee_pic"`
	EnterpriseID                *model.OrderBy `json:"enterprise_id"`
	Heavy                       *model.OrderBy `json:"heavy"`
	ID                          *model.OrderBy `json:"id"`
	IndustryCategory            *model.OrderBy `json:"industry_category"`
	InspectionDate              *model.OrderBy `json:"inspection_date"`
	InsuranceCompany            *model.OrderBy `json:"insurance_company"`
	InsuranceDate               *model.OrderBy `json:"insurance_date"`
	LicensePlateColor           *model.OrderBy `json:"license_plate_color"`
	LicensePlateNumber          *model.OrderBy `json:"license_plate_number"`
	LicensePlateType            *model.OrderBy `json:"license_plate_type"`
	MuckTruckID                 *model.OrderBy `json:"muck_truck_id"`
	OperatingRoute              *model.OrderBy `json:"operating_route"`
	OperatingState              *model.OrderBy `json:"operating_state"`
	OperatingType               *model.OrderBy `json:"operating_type"`
	OperatingVehicleID          *model.OrderBy `json:"operating_vehicle_id"`
	Owner                       *model.OrderBy `json:"owner"`
	QuasiDrivingModels          *model.OrderBy `json:"quasi_driving_models"`
	RecordAt                    *model.OrderBy `json:"record_at"`
	RecordBy                    *model.OrderBy `json:"record_by"`
	RemarkIn                    *model.OrderBy `json:"remark_in"`
	Remarks                     *model.OrderBy `json:"remarks"`
	RetirementDate              *model.OrderBy `json:"retirement_date"`
	RoadTransportLicenseNumber  *model.OrderBy `json:"road_transport_license_number"`
	Seats                       *model.OrderBy `json:"seats"`
	TerminalID                  *model.OrderBy `json:"terminal_id"`
	UpdateAt                    *model.OrderBy `json:"update_at"`
	UpdateBy                    *model.OrderBy `json:"update_by"`
	UpdateTimeIn                *model.OrderBy `json:"update_time_in"`
	UseNature                   *model.OrderBy `json:"use_nature"`
	VehicleBrand                *model.OrderBy `json:"vehicle_brand"`
	VehicleDisplacement         *model.OrderBy `json:"vehicle_displacement"`
	VehicleIdentificationNumber *model.OrderBy `json:"vehicle_identification_number"`
	VehicleInfoChangeID         *model.OrderBy `json:"vehicle_info_change_id"`
	VehicleManager              *model.OrderBy `json:"vehicle_manager"`
	VehicleManagerIDCard        *model.OrderBy `json:"vehicle_manager_id_card"`
	VehicleManagerPhone         *model.OrderBy `json:"vehicle_manager_phone"`
	VehicleState                *model.OrderBy `json:"vehicle_state"`
	VehicleType                 *model.OrderBy `json:"vehicle_type"`
}

// response of any mutation on the table "vehicle_info_change_log"
type VehicleInfoChangeLogMutationResponse struct {
	// number of affected rows by the mutation
	AffectedRows int `json:"affected_rows"`
	// data of the affected rows by the mutation
	Returning []*VehicleInfoChangeLog `json:"returning"`
}

// input type for inserting object relation for remote table "vehicle_info_change_log"
type VehicleInfoChangeLogObjRelInsertInput struct {
	Data       *VehicleInfoChangeLogInsertInput `json:"data"`
	OnConflict *VehicleInfoChangeLogOnConflict  `json:"on_conflict"`
}

// on conflict condition type for table "vehicle_info_change_log"
type VehicleInfoChangeLogOnConflict struct {
	Constraint    VehicleInfoChangeLogConstraint     `json:"constraint"`
	UpdateColumns []VehicleInfoChangeLogUpdateColumn `json:"update_columns"`
	Where         *VehicleInfoChangeLogBoolExp       `json:"where"`
}

// ordering options when selecting data from "vehicle_info_change_log"
type VehicleInfoChangeLogOrderBy struct {
	BusinessScope               *model.OrderBy `json:"business_scope"`
	CarRentalPrice              *model.OrderBy `json:"car_rental_price"`
	CheckState                  *model.OrderBy `json:"check_state"`
	CreateAt                    *model.OrderBy `json:"create_at"`
	CreateBy                    *model.OrderBy `json:"create_by"`
	DeleteAt                    *model.OrderBy `json:"delete_at"`
	DeleteBy                    *model.OrderBy `json:"delete_by"`
	DepartmentID                *model.OrderBy `json:"department_id"`
	DrivingLicenseePic          *model.OrderBy `json:"driving_licensee_pic"`
	EnterpriseID                *model.OrderBy `json:"enterprise_id"`
	Heavy                       *model.OrderBy `json:"heavy"`
	ID                          *model.OrderBy `json:"id"`
	IndustryCategory            *model.OrderBy `json:"industry_category"`
	InspectionDate              *model.OrderBy `json:"inspection_date"`
	InsuranceCompany            *model.OrderBy `json:"insurance_company"`
	InsuranceDate               *model.OrderBy `json:"insurance_date"`
	IsActive                    *model.OrderBy `json:"is_active"`
	IsApplyInstallTerminal      *model.OrderBy `json:"is_apply_install_terminal"`
	IsComplete                  *model.OrderBy `json:"is_complete"`
	IsDelete                    *model.OrderBy `json:"is_delete"`
	IsImport                    *model.OrderBy `json:"is_import"`
	IsInput                     *model.OrderBy `json:"is_input"`
	IsUploadProvince            *model.OrderBy `json:"is_upload_province"`
	LicensePlateColor           *model.OrderBy `json:"license_plate_color"`
	LicensePlateNumber          *model.OrderBy `json:"license_plate_number"`
	LicensePlateType            *model.OrderBy `json:"license_plate_type"`
	MuckTruckID                 *model.OrderBy `json:"muck_truck_id"`
	OperatingRoute              *model.OrderBy `json:"operating_route"`
	OperatingState              *model.OrderBy `json:"operating_state"`
	OperatingType               *model.OrderBy `json:"operating_type"`
	OperatingVehicleID          *model.OrderBy `json:"operating_vehicle_id"`
	Owner                       *model.OrderBy `json:"owner"`
	QuasiDrivingModels          *model.OrderBy `json:"quasi_driving_models"`
	RecordAt                    *model.OrderBy `json:"record_at"`
	RecordBy                    *model.OrderBy `json:"record_by"`
	RemarkIn                    *model.OrderBy `json:"remark_in"`
	Remarks                     *model.OrderBy `json:"remarks"`
	RetirementDate              *model.OrderBy `json:"retirement_date"`
	RoadTransportLicenseNumber  *model.OrderBy `json:"road_transport_license_number"`
	Seats                       *model.OrderBy `json:"seats"`
	TerminalID                  *model.OrderBy `json:"terminal_id"`
	UpdateAt                    *model.OrderBy `json:"update_at"`
	UpdateBy                    *model.OrderBy `json:"update_by"`
	UpdateTimeIn                *model.OrderBy `json:"update_time_in"`
	UseNature                   *model.OrderBy `json:"use_nature"`
	VehicleBrand                *model.OrderBy `json:"vehicle_brand"`
	VehicleDisplacement         *model.OrderBy `json:"vehicle_displacement"`
	VehicleIdentificationNumber *model.OrderBy `json:"vehicle_identification_number"`
	VehicleInfoChangeID         *model.OrderBy `json:"vehicle_info_change_id"`
	VehicleMaintenances         *model.OrderBy `json:"vehicle_maintenances"`
	VehicleManager              *model.OrderBy `json:"vehicle_manager"`
	VehicleManagerIDCard        *model.OrderBy `json:"vehicle_manager_id_card"`
	VehicleManagerPhone         *model.OrderBy `json:"vehicle_manager_phone"`
	VehicleState                *model.OrderBy `json:"vehicle_state"`
	VehicleType                 *model.OrderBy `json:"vehicle_type"`
}

// primary key columns input for table: "vehicle_info_change_log"
type VehicleInfoChangeLogPkColumnsInput struct {
	// 主键
	ID int64 `json:"id"`
	// 车辆信息变更日志外部编码，由golang程序生成的xid，暴露到外部使用
	VehicleInfoChangeID string `json:"vehicle_info_change_id"`
}

// input type for updating data in table "vehicle_info_change_log"
type VehicleInfoChangeLogSetInput struct {
	BusinessScope               *int       `json:"business_scope"`
	CarRentalPrice              *float64   `json:"car_rental_price"`
	CheckState                  *int       `json:"check_state"`
	CreateAt                    *time.Time `json:"create_at"`
	CreateBy                    *string    `json:"create_by"`
	DeleteAt                    *time.Time `json:"delete_at"`
	DeleteBy                    *time.Time `json:"delete_by"`
	DepartmentID                *string    `json:"department_id"`
	DrivingLicenseePic          *string    `json:"driving_licensee_pic"`
	EnterpriseID                *string    `json:"enterprise_id"`
	Heavy                       *float64   `json:"heavy"`
	ID                          *int64     `json:"id"`
	IndustryCategory            *int       `json:"industry_category"`
	InspectionDate              *time.Time `json:"inspection_date"`
	InsuranceCompany            *int       `json:"insurance_company"`
	InsuranceDate               *time.Time `json:"insurance_date"`
	IsActive                    *bool      `json:"is_active"`
	IsApplyInstallTerminal      *bool      `json:"is_apply_install_terminal"`
	IsComplete                  *bool      `json:"is_complete"`
	IsDelete                    *bool      `json:"is_delete"`
	IsImport                    *bool      `json:"is_import"`
	IsInput                     *bool      `json:"is_input"`
	IsUploadProvince            *bool      `json:"is_upload_province"`
	LicensePlateColor           *int       `json:"license_plate_color"`
	LicensePlateNumber          *string    `json:"license_plate_number"`
	LicensePlateType            *int       `json:"license_plate_type"`
	MuckTruckID                 *int64     `json:"muck_truck_id"`
	OperatingRoute              *string    `json:"operating_route"`
	OperatingState              *int       `json:"operating_state"`
	OperatingType               *int       `json:"operating_type"`
	OperatingVehicleID          *int64     `json:"operating_vehicle_id"`
	Owner                       *string    `json:"owner"`
	QuasiDrivingModels          *int       `json:"quasi_driving_models"`
	RecordAt                    *time.Time `json:"record_at"`
	RecordBy                    *string    `json:"record_by"`
	RemarkIn                    *string    `json:"remark_in"`
	Remarks                     *string    `json:"remarks"`
	RetirementDate              *time.Time `json:"retirement_date"`
	RoadTransportLicenseNumber  *string    `json:"road_transport_license_number"`
	Seats                       *int       `json:"seats"`
	TerminalID                  *string    `json:"terminal_id"`
	UpdateAt                    *time.Time `json:"update_at"`
	UpdateBy                    *string    `json:"update_by"`
	UpdateTimeIn                *time.Time `json:"update_time_in"`
	UseNature                   *string    `json:"use_nature"`
	VehicleBrand                *int       `json:"vehicle_brand"`
	VehicleDisplacement         *string    `json:"vehicle_displacement"`
	VehicleIdentificationNumber *string    `json:"vehicle_identification_number"`
	VehicleInfoChangeID         *string    `json:"vehicle_info_change_id"`
	VehicleMaintenances         *string    `json:"vehicle_maintenances"`
	VehicleManager              *string    `json:"vehicle_manager"`
	VehicleManagerIDCard        *string    `json:"vehicle_manager_id_card"`
	VehicleManagerPhone         *string    `json:"vehicle_manager_phone"`
	VehicleState                *int       `json:"vehicle_state"`
	VehicleType                 *int       `json:"vehicle_type"`
}

// aggregate stddev on columns
type VehicleInfoChangeLogStddevFields struct {
	BusinessScope      *float64 `json:"business_scope"`
	CarRentalPrice     *float64 `json:"car_rental_price"`
	CheckState         *float64 `json:"check_state"`
	Heavy              *float64 `json:"heavy"`
	ID                 *float64 `json:"id"`
	IndustryCategory   *float64 `json:"industry_category"`
	InsuranceCompany   *float64 `json:"insurance_company"`
	LicensePlateColor  *float64 `json:"license_plate_color"`
	LicensePlateType   *float64 `json:"license_plate_type"`
	MuckTruckID        *float64 `json:"muck_truck_id"`
	OperatingState     *float64 `json:"operating_state"`
	OperatingType      *float64 `json:"operating_type"`
	OperatingVehicleID *float64 `json:"operating_vehicle_id"`
	QuasiDrivingModels *float64 `json:"quasi_driving_models"`
	Seats              *float64 `json:"seats"`
	VehicleBrand       *float64 `json:"vehicle_brand"`
	VehicleState       *float64 `json:"vehicle_state"`
	VehicleType        *float64 `json:"vehicle_type"`
}

// order by stddev() on columns of table "vehicle_info_change_log"
type VehicleInfoChangeLogStddevOrderBy struct {
	BusinessScope      *model.OrderBy `json:"business_scope"`
	CarRentalPrice     *model.OrderBy `json:"car_rental_price"`
	CheckState         *model.OrderBy `json:"check_state"`
	Heavy              *model.OrderBy `json:"heavy"`
	ID                 *model.OrderBy `json:"id"`
	IndustryCategory   *model.OrderBy `json:"industry_category"`
	InsuranceCompany   *model.OrderBy `json:"insurance_company"`
	LicensePlateColor  *model.OrderBy `json:"license_plate_color"`
	LicensePlateType   *model.OrderBy `json:"license_plate_type"`
	MuckTruckID        *model.OrderBy `json:"muck_truck_id"`
	OperatingState     *model.OrderBy `json:"operating_state"`
	OperatingType      *model.OrderBy `json:"operating_type"`
	OperatingVehicleID *model.OrderBy `json:"operating_vehicle_id"`
	QuasiDrivingModels *model.OrderBy `json:"quasi_driving_models"`
	Seats              *model.OrderBy `json:"seats"`
	VehicleBrand       *model.OrderBy `json:"vehicle_brand"`
	VehicleState       *model.OrderBy `json:"vehicle_state"`
	VehicleType        *model.OrderBy `json:"vehicle_type"`
}

// aggregate stddev_pop on columns
type VehicleInfoChangeLogStddevPopFields struct {
	BusinessScope      *float64 `json:"business_scope"`
	CarRentalPrice     *float64 `json:"car_rental_price"`
	CheckState         *float64 `json:"check_state"`
	Heavy              *float64 `json:"heavy"`
	ID                 *float64 `json:"id"`
	IndustryCategory   *float64 `json:"industry_category"`
	InsuranceCompany   *float64 `json:"insurance_company"`
	LicensePlateColor  *float64 `json:"license_plate_color"`
	LicensePlateType   *float64 `json:"license_plate_type"`
	MuckTruckID        *float64 `json:"muck_truck_id"`
	OperatingState     *float64 `json:"operating_state"`
	OperatingType      *float64 `json:"operating_type"`
	OperatingVehicleID *float64 `json:"operating_vehicle_id"`
	QuasiDrivingModels *float64 `json:"quasi_driving_models"`
	Seats              *float64 `json:"seats"`
	VehicleBrand       *float64 `json:"vehicle_brand"`
	VehicleState       *float64 `json:"vehicle_state"`
	VehicleType        *float64 `json:"vehicle_type"`
}

// order by stddev_pop() on columns of table "vehicle_info_change_log"
type VehicleInfoChangeLogStddevPopOrderBy struct {
	BusinessScope      *model.OrderBy `json:"business_scope"`
	CarRentalPrice     *model.OrderBy `json:"car_rental_price"`
	CheckState         *model.OrderBy `json:"check_state"`
	Heavy              *model.OrderBy `json:"heavy"`
	ID                 *model.OrderBy `json:"id"`
	IndustryCategory   *model.OrderBy `json:"industry_category"`
	InsuranceCompany   *model.OrderBy `json:"insurance_company"`
	LicensePlateColor  *model.OrderBy `json:"license_plate_color"`
	LicensePlateType   *model.OrderBy `json:"license_plate_type"`
	MuckTruckID        *model.OrderBy `json:"muck_truck_id"`
	OperatingState     *model.OrderBy `json:"operating_state"`
	OperatingType      *model.OrderBy `json:"operating_type"`
	OperatingVehicleID *model.OrderBy `json:"operating_vehicle_id"`
	QuasiDrivingModels *model.OrderBy `json:"quasi_driving_models"`
	Seats              *model.OrderBy `json:"seats"`
	VehicleBrand       *model.OrderBy `json:"vehicle_brand"`
	VehicleState       *model.OrderBy `json:"vehicle_state"`
	VehicleType        *model.OrderBy `json:"vehicle_type"`
}

// aggregate stddev_samp on columns
type VehicleInfoChangeLogStddevSampFields struct {
	BusinessScope      *float64 `json:"business_scope"`
	CarRentalPrice     *float64 `json:"car_rental_price"`
	CheckState         *float64 `json:"check_state"`
	Heavy              *float64 `json:"heavy"`
	ID                 *float64 `json:"id"`
	IndustryCategory   *float64 `json:"industry_category"`
	InsuranceCompany   *float64 `json:"insurance_company"`
	LicensePlateColor  *float64 `json:"license_plate_color"`
	LicensePlateType   *float64 `json:"license_plate_type"`
	MuckTruckID        *float64 `json:"muck_truck_id"`
	OperatingState     *float64 `json:"operating_state"`
	OperatingType      *float64 `json:"operating_type"`
	OperatingVehicleID *float64 `json:"operating_vehicle_id"`
	QuasiDrivingModels *float64 `json:"quasi_driving_models"`
	Seats              *float64 `json:"seats"`
	VehicleBrand       *float64 `json:"vehicle_brand"`
	VehicleState       *float64 `json:"vehicle_state"`
	VehicleType        *float64 `json:"vehicle_type"`
}

// order by stddev_samp() on columns of table "vehicle_info_change_log"
type VehicleInfoChangeLogStddevSampOrderBy struct {
	BusinessScope      *model.OrderBy `json:"business_scope"`
	CarRentalPrice     *model.OrderBy `json:"car_rental_price"`
	CheckState         *model.OrderBy `json:"check_state"`
	Heavy              *model.OrderBy `json:"heavy"`
	ID                 *model.OrderBy `json:"id"`
	IndustryCategory   *model.OrderBy `json:"industry_category"`
	InsuranceCompany   *model.OrderBy `json:"insurance_company"`
	LicensePlateColor  *model.OrderBy `json:"license_plate_color"`
	LicensePlateType   *model.OrderBy `json:"license_plate_type"`
	MuckTruckID        *model.OrderBy `json:"muck_truck_id"`
	OperatingState     *model.OrderBy `json:"operating_state"`
	OperatingType      *model.OrderBy `json:"operating_type"`
	OperatingVehicleID *model.OrderBy `json:"operating_vehicle_id"`
	QuasiDrivingModels *model.OrderBy `json:"quasi_driving_models"`
	Seats              *model.OrderBy `json:"seats"`
	VehicleBrand       *model.OrderBy `json:"vehicle_brand"`
	VehicleState       *model.OrderBy `json:"vehicle_state"`
	VehicleType        *model.OrderBy `json:"vehicle_type"`
}

// aggregate sum on columns
type VehicleInfoChangeLogSumFields struct {
	BusinessScope      *int     `json:"business_scope"`
	CarRentalPrice     *float64 `json:"car_rental_price"`
	CheckState         *int     `json:"check_state"`
	Heavy              *float64 `json:"heavy"`
	ID                 *int64   `json:"id"`
	IndustryCategory   *int     `json:"industry_category"`
	InsuranceCompany   *int     `json:"insurance_company"`
	LicensePlateColor  *int     `json:"license_plate_color"`
	LicensePlateType   *int     `json:"license_plate_type"`
	MuckTruckID        *int64   `json:"muck_truck_id"`
	OperatingState     *int     `json:"operating_state"`
	OperatingType      *int     `json:"operating_type"`
	OperatingVehicleID *int64   `json:"operating_vehicle_id"`
	QuasiDrivingModels *int     `json:"quasi_driving_models"`
	Seats              *int     `json:"seats"`
	VehicleBrand       *int     `json:"vehicle_brand"`
	VehicleState       *int     `json:"vehicle_state"`
	VehicleType        *int     `json:"vehicle_type"`
}

// order by sum() on columns of table "vehicle_info_change_log"
type VehicleInfoChangeLogSumOrderBy struct {
	BusinessScope      *model.OrderBy `json:"business_scope"`
	CarRentalPrice     *model.OrderBy `json:"car_rental_price"`
	CheckState         *model.OrderBy `json:"check_state"`
	Heavy              *model.OrderBy `json:"heavy"`
	ID                 *model.OrderBy `json:"id"`
	IndustryCategory   *model.OrderBy `json:"industry_category"`
	InsuranceCompany   *model.OrderBy `json:"insurance_company"`
	LicensePlateColor  *model.OrderBy `json:"license_plate_color"`
	LicensePlateType   *model.OrderBy `json:"license_plate_type"`
	MuckTruckID        *model.OrderBy `json:"muck_truck_id"`
	OperatingState     *model.OrderBy `json:"operating_state"`
	OperatingType      *model.OrderBy `json:"operating_type"`
	OperatingVehicleID *model.OrderBy `json:"operating_vehicle_id"`
	QuasiDrivingModels *model.OrderBy `json:"quasi_driving_models"`
	Seats              *model.OrderBy `json:"seats"`
	VehicleBrand       *model.OrderBy `json:"vehicle_brand"`
	VehicleState       *model.OrderBy `json:"vehicle_state"`
	VehicleType        *model.OrderBy `json:"vehicle_type"`
}

// aggregate var_pop on columns
type VehicleInfoChangeLogVarPopFields struct {
	BusinessScope      *float64 `json:"business_scope"`
	CarRentalPrice     *float64 `json:"car_rental_price"`
	CheckState         *float64 `json:"check_state"`
	Heavy              *float64 `json:"heavy"`
	ID                 *float64 `json:"id"`
	IndustryCategory   *float64 `json:"industry_category"`
	InsuranceCompany   *float64 `json:"insurance_company"`
	LicensePlateColor  *float64 `json:"license_plate_color"`
	LicensePlateType   *float64 `json:"license_plate_type"`
	MuckTruckID        *float64 `json:"muck_truck_id"`
	OperatingState     *float64 `json:"operating_state"`
	OperatingType      *float64 `json:"operating_type"`
	OperatingVehicleID *float64 `json:"operating_vehicle_id"`
	QuasiDrivingModels *float64 `json:"quasi_driving_models"`
	Seats              *float64 `json:"seats"`
	VehicleBrand       *float64 `json:"vehicle_brand"`
	VehicleState       *float64 `json:"vehicle_state"`
	VehicleType        *float64 `json:"vehicle_type"`
}

// order by var_pop() on columns of table "vehicle_info_change_log"
type VehicleInfoChangeLogVarPopOrderBy struct {
	BusinessScope      *model.OrderBy `json:"business_scope"`
	CarRentalPrice     *model.OrderBy `json:"car_rental_price"`
	CheckState         *model.OrderBy `json:"check_state"`
	Heavy              *model.OrderBy `json:"heavy"`
	ID                 *model.OrderBy `json:"id"`
	IndustryCategory   *model.OrderBy `json:"industry_category"`
	InsuranceCompany   *model.OrderBy `json:"insurance_company"`
	LicensePlateColor  *model.OrderBy `json:"license_plate_color"`
	LicensePlateType   *model.OrderBy `json:"license_plate_type"`
	MuckTruckID        *model.OrderBy `json:"muck_truck_id"`
	OperatingState     *model.OrderBy `json:"operating_state"`
	OperatingType      *model.OrderBy `json:"operating_type"`
	OperatingVehicleID *model.OrderBy `json:"operating_vehicle_id"`
	QuasiDrivingModels *model.OrderBy `json:"quasi_driving_models"`
	Seats              *model.OrderBy `json:"seats"`
	VehicleBrand       *model.OrderBy `json:"vehicle_brand"`
	VehicleState       *model.OrderBy `json:"vehicle_state"`
	VehicleType        *model.OrderBy `json:"vehicle_type"`
}

// aggregate var_samp on columns
type VehicleInfoChangeLogVarSampFields struct {
	BusinessScope      *float64 `json:"business_scope"`
	CarRentalPrice     *float64 `json:"car_rental_price"`
	CheckState         *float64 `json:"check_state"`
	Heavy              *float64 `json:"heavy"`
	ID                 *float64 `json:"id"`
	IndustryCategory   *float64 `json:"industry_category"`
	InsuranceCompany   *float64 `json:"insurance_company"`
	LicensePlateColor  *float64 `json:"license_plate_color"`
	LicensePlateType   *float64 `json:"license_plate_type"`
	MuckTruckID        *float64 `json:"muck_truck_id"`
	OperatingState     *float64 `json:"operating_state"`
	OperatingType      *float64 `json:"operating_type"`
	OperatingVehicleID *float64 `json:"operating_vehicle_id"`
	QuasiDrivingModels *float64 `json:"quasi_driving_models"`
	Seats              *float64 `json:"seats"`
	VehicleBrand       *float64 `json:"vehicle_brand"`
	VehicleState       *float64 `json:"vehicle_state"`
	VehicleType        *float64 `json:"vehicle_type"`
}

// order by var_samp() on columns of table "vehicle_info_change_log"
type VehicleInfoChangeLogVarSampOrderBy struct {
	BusinessScope      *model.OrderBy `json:"business_scope"`
	CarRentalPrice     *model.OrderBy `json:"car_rental_price"`
	CheckState         *model.OrderBy `json:"check_state"`
	Heavy              *model.OrderBy `json:"heavy"`
	ID                 *model.OrderBy `json:"id"`
	IndustryCategory   *model.OrderBy `json:"industry_category"`
	InsuranceCompany   *model.OrderBy `json:"insurance_company"`
	LicensePlateColor  *model.OrderBy `json:"license_plate_color"`
	LicensePlateType   *model.OrderBy `json:"license_plate_type"`
	MuckTruckID        *model.OrderBy `json:"muck_truck_id"`
	OperatingState     *model.OrderBy `json:"operating_state"`
	OperatingType      *model.OrderBy `json:"operating_type"`
	OperatingVehicleID *model.OrderBy `json:"operating_vehicle_id"`
	QuasiDrivingModels *model.OrderBy `json:"quasi_driving_models"`
	Seats              *model.OrderBy `json:"seats"`
	VehicleBrand       *model.OrderBy `json:"vehicle_brand"`
	VehicleState       *model.OrderBy `json:"vehicle_state"`
	VehicleType        *model.OrderBy `json:"vehicle_type"`
}

// aggregate variance on columns
type VehicleInfoChangeLogVarianceFields struct {
	BusinessScope      *float64 `json:"business_scope"`
	CarRentalPrice     *float64 `json:"car_rental_price"`
	CheckState         *float64 `json:"check_state"`
	Heavy              *float64 `json:"heavy"`
	ID                 *float64 `json:"id"`
	IndustryCategory   *float64 `json:"industry_category"`
	InsuranceCompany   *float64 `json:"insurance_company"`
	LicensePlateColor  *float64 `json:"license_plate_color"`
	LicensePlateType   *float64 `json:"license_plate_type"`
	MuckTruckID        *float64 `json:"muck_truck_id"`
	OperatingState     *float64 `json:"operating_state"`
	OperatingType      *float64 `json:"operating_type"`
	OperatingVehicleID *float64 `json:"operating_vehicle_id"`
	QuasiDrivingModels *float64 `json:"quasi_driving_models"`
	Seats              *float64 `json:"seats"`
	VehicleBrand       *float64 `json:"vehicle_brand"`
	VehicleState       *float64 `json:"vehicle_state"`
	VehicleType        *float64 `json:"vehicle_type"`
}

// order by variance() on columns of table "vehicle_info_change_log"
type VehicleInfoChangeLogVarianceOrderBy struct {
	BusinessScope      *model.OrderBy `json:"business_scope"`
	CarRentalPrice     *model.OrderBy `json:"car_rental_price"`
	CheckState         *model.OrderBy `json:"check_state"`
	Heavy              *model.OrderBy `json:"heavy"`
	ID                 *model.OrderBy `json:"id"`
	IndustryCategory   *model.OrderBy `json:"industry_category"`
	InsuranceCompany   *model.OrderBy `json:"insurance_company"`
	LicensePlateColor  *model.OrderBy `json:"license_plate_color"`
	LicensePlateType   *model.OrderBy `json:"license_plate_type"`
	MuckTruckID        *model.OrderBy `json:"muck_truck_id"`
	OperatingState     *model.OrderBy `json:"operating_state"`
	OperatingType      *model.OrderBy `json:"operating_type"`
	OperatingVehicleID *model.OrderBy `json:"operating_vehicle_id"`
	QuasiDrivingModels *model.OrderBy `json:"quasi_driving_models"`
	Seats              *model.OrderBy `json:"seats"`
	VehicleBrand       *model.OrderBy `json:"vehicle_brand"`
	VehicleState       *model.OrderBy `json:"vehicle_state"`
	VehicleType        *model.OrderBy `json:"vehicle_type"`
}

// input type for incrementing integer column in table "vehicle_info"
type VehicleInfoIncInput struct {
	BusinessScope      *int     `json:"business_scope"`
	CarRentalPrice     *float64 `json:"car_rental_price"`
	CheckState         *int     `json:"check_state"`
	Heavy              *float64 `json:"heavy"`
	ID                 *int64   `json:"id"`
	IndustryCategory   *int     `json:"industry_category"`
	InsuranceCompany   *int     `json:"insurance_company"`
	LicensePlateColor  *int     `json:"license_plate_color"`
	LicensePlateType   *int     `json:"license_plate_type"`
	MuckTruckID        *int64   `json:"muck_truck_id"`
	OperatingState     *int     `json:"operating_state"`
	OperatingType      *int     `json:"operating_type"`
	OperatingVehicleID *int64   `json:"operating_vehicle_id"`
	QuasiDrivingModels *int     `json:"quasi_driving_models"`
	Seats              *int     `json:"seats"`
	VehicleBrand       *int     `json:"vehicle_brand"`
	VehicleState       *int     `json:"vehicle_state"`
	VehicleType        *int     `json:"vehicle_type"`
}

// input type for inserting data into table "vehicle_info"
type VehicleInfoInsertInput struct {
	BusinessScope               *int       `json:"business_scope"`
	CarRentalPrice              *float64   `json:"car_rental_price"`
	CheckState                  *int       `json:"check_state"`
	DepartmentID                *string    `json:"department_id"`
	DrivingLicenseePic          *string    `json:"driving_licensee_pic"`
	EnterpriseID                *string    `json:"enterprise_id"`
	Heavy                       *float64   `json:"heavy"`
	IndustryCategory            *int       `json:"industry_category"`
	InspectionDate              *time.Time `json:"inspection_date"`
	InsuranceCompany            *int       `json:"insurance_company"`
	InsuranceDate               *time.Time `json:"insurance_date"`
	IsActive                    *bool      `json:"is_active"`
	IsApplyInstallTerminal      *bool      `json:"is_apply_install_terminal"`
	IsComplete                  *bool      `json:"is_complete"`
	IsDelete                    *bool      `json:"is_delete"`
	IsImport                    *bool      `json:"is_import"`
	IsInput                     *bool      `json:"is_input"`
	IsUploadProvince            *bool      `json:"is_upload_province"`
	LicensePlateColor           *int       `json:"license_plate_color"`
	LicensePlateNumber          *string    `json:"license_plate_number"`
	LicensePlateType            *int       `json:"license_plate_type"`
	MuckTruckID                 *int64     `json:"muck_truck_id"`
	OperatingRoute              *string    `json:"operating_route"`
	OperatingState              *int       `json:"operating_state"`
	OperatingType               *int       `json:"operating_type"`
	OperatingVehicleID          *int64     `json:"operating_vehicle_id"`
	Owner                       *string    `json:"owner"`
	QuasiDrivingModels          *int       `json:"quasi_driving_models"`
	RecordAt                    *time.Time `json:"record_at"`
	RecordBy                    *string    `json:"record_by"`
	RemarkIn                    *string    `json:"remark_in"`
	Remarks                     *string    `json:"remarks"`
	RetirementDate              *time.Time `json:"retirement_date"`
	RoadTransportLicenseNumber  *string    `json:"road_transport_license_number"`
	Seats                       *int       `json:"seats"`
	TerminalID                  *string    `json:"terminal_id"`
	UpdateTimeIn                *time.Time `json:"update_time_in"`
	UseNature                   *string    `json:"use_nature"`
	VehicleBrand                *int       `json:"vehicle_brand"`
	VehicleDisplacement         *string    `json:"vehicle_displacement"`
	VehicleIdentificationNumber *string    `json:"vehicle_identification_number"`
	VehicleMaintenances         *string    `json:"vehicle_maintenances"`
	VehicleManager              *string    `json:"vehicle_manager"`
	VehicleManagerIDCard        *string    `json:"vehicle_manager_id_card"`
	VehicleManagerPhone         *string    `json:"vehicle_manager_phone"`
	VehicleState                *int       `json:"vehicle_state"`
	VehicleType                 *int       `json:"vehicle_type"`
}

// aggregate max on columns
type VehicleInfoMaxFields struct {
	BusinessScope               *int       `json:"business_scope"`
	CarRentalPrice              *float64   `json:"car_rental_price"`
	CheckState                  *int       `json:"check_state"`
	CreateAt                    *time.Time `json:"create_at"`
	CreateBy                    *string    `json:"create_by"`
	DeleteAt                    *time.Time `json:"delete_at"`
	DeleteBy                    *time.Time `json:"delete_by"`
	DepartmentID                *string    `json:"department_id"`
	DrivingLicenseePic          *string    `json:"driving_licensee_pic"`
	EnterpriseID                *string    `json:"enterprise_id"`
	Heavy                       *float64   `json:"heavy"`
	ID                          *int64     `json:"id"`
	IndustryCategory            *int       `json:"industry_category"`
	InspectionDate              *time.Time `json:"inspection_date"`
	InsuranceCompany            *int       `json:"insurance_company"`
	InsuranceDate               *time.Time `json:"insurance_date"`
	LicensePlateColor           *int       `json:"license_plate_color"`
	LicensePlateNumber          *string    `json:"license_plate_number"`
	LicensePlateType            *int       `json:"license_plate_type"`
	MuckTruckID                 *int64     `json:"muck_truck_id"`
	OperatingRoute              *string    `json:"operating_route"`
	OperatingState              *int       `json:"operating_state"`
	OperatingType               *int       `json:"operating_type"`
	OperatingVehicleID          *int64     `json:"operating_vehicle_id"`
	Owner                       *string    `json:"owner"`
	QuasiDrivingModels          *int       `json:"quasi_driving_models"`
	RecordAt                    *time.Time `json:"record_at"`
	RecordBy                    *string    `json:"record_by"`
	RemarkIn                    *string    `json:"remark_in"`
	Remarks                     *string    `json:"remarks"`
	RetirementDate              *time.Time `json:"retirement_date"`
	RoadTransportLicenseNumber  *string    `json:"road_transport_license_number"`
	Seats                       *int       `json:"seats"`
	TerminalID                  *string    `json:"terminal_id"`
	UpdateAt                    *time.Time `json:"update_at"`
	UpdateBy                    *string    `json:"update_by"`
	UpdateTimeIn                *time.Time `json:"update_time_in"`
	UseNature                   *string    `json:"use_nature"`
	VehicleBrand                *int       `json:"vehicle_brand"`
	VehicleDisplacement         *string    `json:"vehicle_displacement"`
	VehicleID                   *string    `json:"vehicle_id"`
	VehicleIdentificationNumber *string    `json:"vehicle_identification_number"`
	VehicleManager              *string    `json:"vehicle_manager"`
	VehicleManagerIDCard        *string    `json:"vehicle_manager_id_card"`
	VehicleManagerPhone         *string    `json:"vehicle_manager_phone"`
	VehicleState                *int       `json:"vehicle_state"`
	VehicleType                 *int       `json:"vehicle_type"`
}

// order by max() on columns of table "vehicle_info"
type VehicleInfoMaxOrderBy struct {
	BusinessScope               *model.OrderBy `json:"business_scope"`
	CarRentalPrice              *model.OrderBy `json:"car_rental_price"`
	CheckState                  *model.OrderBy `json:"check_state"`
	CreateAt                    *model.OrderBy `json:"create_at"`
	CreateBy                    *model.OrderBy `json:"create_by"`
	DeleteAt                    *model.OrderBy `json:"delete_at"`
	DeleteBy                    *model.OrderBy `json:"delete_by"`
	DepartmentID                *model.OrderBy `json:"department_id"`
	DrivingLicenseePic          *model.OrderBy `json:"driving_licensee_pic"`
	EnterpriseID                *model.OrderBy `json:"enterprise_id"`
	Heavy                       *model.OrderBy `json:"heavy"`
	ID                          *model.OrderBy `json:"id"`
	IndustryCategory            *model.OrderBy `json:"industry_category"`
	InspectionDate              *model.OrderBy `json:"inspection_date"`
	InsuranceCompany            *model.OrderBy `json:"insurance_company"`
	InsuranceDate               *model.OrderBy `json:"insurance_date"`
	LicensePlateColor           *model.OrderBy `json:"license_plate_color"`
	LicensePlateNumber          *model.OrderBy `json:"license_plate_number"`
	LicensePlateType            *model.OrderBy `json:"license_plate_type"`
	MuckTruckID                 *model.OrderBy `json:"muck_truck_id"`
	OperatingRoute              *model.OrderBy `json:"operating_route"`
	OperatingState              *model.OrderBy `json:"operating_state"`
	OperatingType               *model.OrderBy `json:"operating_type"`
	OperatingVehicleID          *model.OrderBy `json:"operating_vehicle_id"`
	Owner                       *model.OrderBy `json:"owner"`
	QuasiDrivingModels          *model.OrderBy `json:"quasi_driving_models"`
	RecordAt                    *model.OrderBy `json:"record_at"`
	RecordBy                    *model.OrderBy `json:"record_by"`
	RemarkIn                    *model.OrderBy `json:"remark_in"`
	Remarks                     *model.OrderBy `json:"remarks"`
	RetirementDate              *model.OrderBy `json:"retirement_date"`
	RoadTransportLicenseNumber  *model.OrderBy `json:"road_transport_license_number"`
	Seats                       *model.OrderBy `json:"seats"`
	TerminalID                  *model.OrderBy `json:"terminal_id"`
	UpdateAt                    *model.OrderBy `json:"update_at"`
	UpdateBy                    *model.OrderBy `json:"update_by"`
	UpdateTimeIn                *model.OrderBy `json:"update_time_in"`
	UseNature                   *model.OrderBy `json:"use_nature"`
	VehicleBrand                *model.OrderBy `json:"vehicle_brand"`
	VehicleDisplacement         *model.OrderBy `json:"vehicle_displacement"`
	VehicleID                   *model.OrderBy `json:"vehicle_id"`
	VehicleIdentificationNumber *model.OrderBy `json:"vehicle_identification_number"`
	VehicleManager              *model.OrderBy `json:"vehicle_manager"`
	VehicleManagerIDCard        *model.OrderBy `json:"vehicle_manager_id_card"`
	VehicleManagerPhone         *model.OrderBy `json:"vehicle_manager_phone"`
	VehicleState                *model.OrderBy `json:"vehicle_state"`
	VehicleType                 *model.OrderBy `json:"vehicle_type"`
}

// aggregate min on columns
type VehicleInfoMinFields struct {
	BusinessScope               *int       `json:"business_scope"`
	CarRentalPrice              *float64   `json:"car_rental_price"`
	CheckState                  *int       `json:"check_state"`
	CreateAt                    *time.Time `json:"create_at"`
	CreateBy                    *string    `json:"create_by"`
	DeleteAt                    *time.Time `json:"delete_at"`
	DeleteBy                    *time.Time `json:"delete_by"`
	DepartmentID                *string    `json:"department_id"`
	DrivingLicenseePic          *string    `json:"driving_licensee_pic"`
	EnterpriseID                *string    `json:"enterprise_id"`
	Heavy                       *float64   `json:"heavy"`
	ID                          *int64     `json:"id"`
	IndustryCategory            *int       `json:"industry_category"`
	InspectionDate              *time.Time `json:"inspection_date"`
	InsuranceCompany            *int       `json:"insurance_company"`
	InsuranceDate               *time.Time `json:"insurance_date"`
	LicensePlateColor           *int       `json:"license_plate_color"`
	LicensePlateNumber          *string    `json:"license_plate_number"`
	LicensePlateType            *int       `json:"license_plate_type"`
	MuckTruckID                 *int64     `json:"muck_truck_id"`
	OperatingRoute              *string    `json:"operating_route"`
	OperatingState              *int       `json:"operating_state"`
	OperatingType               *int       `json:"operating_type"`
	OperatingVehicleID          *int64     `json:"operating_vehicle_id"`
	Owner                       *string    `json:"owner"`
	QuasiDrivingModels          *int       `json:"quasi_driving_models"`
	RecordAt                    *time.Time `json:"record_at"`
	RecordBy                    *string    `json:"record_by"`
	RemarkIn                    *string    `json:"remark_in"`
	Remarks                     *string    `json:"remarks"`
	RetirementDate              *time.Time `json:"retirement_date"`
	RoadTransportLicenseNumber  *string    `json:"road_transport_license_number"`
	Seats                       *int       `json:"seats"`
	TerminalID                  *string    `json:"terminal_id"`
	UpdateAt                    *time.Time `json:"update_at"`
	UpdateBy                    *string    `json:"update_by"`
	UpdateTimeIn                *time.Time `json:"update_time_in"`
	UseNature                   *string    `json:"use_nature"`
	VehicleBrand                *int       `json:"vehicle_brand"`
	VehicleDisplacement         *string    `json:"vehicle_displacement"`
	VehicleID                   *string    `json:"vehicle_id"`
	VehicleIdentificationNumber *string    `json:"vehicle_identification_number"`
	VehicleManager              *string    `json:"vehicle_manager"`
	VehicleManagerIDCard        *string    `json:"vehicle_manager_id_card"`
	VehicleManagerPhone         *string    `json:"vehicle_manager_phone"`
	VehicleState                *int       `json:"vehicle_state"`
	VehicleType                 *int       `json:"vehicle_type"`
}

// order by min() on columns of table "vehicle_info"
type VehicleInfoMinOrderBy struct {
	BusinessScope               *model.OrderBy `json:"business_scope"`
	CarRentalPrice              *model.OrderBy `json:"car_rental_price"`
	CheckState                  *model.OrderBy `json:"check_state"`
	CreateAt                    *model.OrderBy `json:"create_at"`
	CreateBy                    *model.OrderBy `json:"create_by"`
	DeleteAt                    *model.OrderBy `json:"delete_at"`
	DeleteBy                    *model.OrderBy `json:"delete_by"`
	DepartmentID                *model.OrderBy `json:"department_id"`
	DrivingLicenseePic          *model.OrderBy `json:"driving_licensee_pic"`
	EnterpriseID                *model.OrderBy `json:"enterprise_id"`
	Heavy                       *model.OrderBy `json:"heavy"`
	ID                          *model.OrderBy `json:"id"`
	IndustryCategory            *model.OrderBy `json:"industry_category"`
	InspectionDate              *model.OrderBy `json:"inspection_date"`
	InsuranceCompany            *model.OrderBy `json:"insurance_company"`
	InsuranceDate               *model.OrderBy `json:"insurance_date"`
	LicensePlateColor           *model.OrderBy `json:"license_plate_color"`
	LicensePlateNumber          *model.OrderBy `json:"license_plate_number"`
	LicensePlateType            *model.OrderBy `json:"license_plate_type"`
	MuckTruckID                 *model.OrderBy `json:"muck_truck_id"`
	OperatingRoute              *model.OrderBy `json:"operating_route"`
	OperatingState              *model.OrderBy `json:"operating_state"`
	OperatingType               *model.OrderBy `json:"operating_type"`
	OperatingVehicleID          *model.OrderBy `json:"operating_vehicle_id"`
	Owner                       *model.OrderBy `json:"owner"`
	QuasiDrivingModels          *model.OrderBy `json:"quasi_driving_models"`
	RecordAt                    *model.OrderBy `json:"record_at"`
	RecordBy                    *model.OrderBy `json:"record_by"`
	RemarkIn                    *model.OrderBy `json:"remark_in"`
	Remarks                     *model.OrderBy `json:"remarks"`
	RetirementDate              *model.OrderBy `json:"retirement_date"`
	RoadTransportLicenseNumber  *model.OrderBy `json:"road_transport_license_number"`
	Seats                       *model.OrderBy `json:"seats"`
	TerminalID                  *model.OrderBy `json:"terminal_id"`
	UpdateAt                    *model.OrderBy `json:"update_at"`
	UpdateBy                    *model.OrderBy `json:"update_by"`
	UpdateTimeIn                *model.OrderBy `json:"update_time_in"`
	UseNature                   *model.OrderBy `json:"use_nature"`
	VehicleBrand                *model.OrderBy `json:"vehicle_brand"`
	VehicleDisplacement         *model.OrderBy `json:"vehicle_displacement"`
	VehicleID                   *model.OrderBy `json:"vehicle_id"`
	VehicleIdentificationNumber *model.OrderBy `json:"vehicle_identification_number"`
	VehicleManager              *model.OrderBy `json:"vehicle_manager"`
	VehicleManagerIDCard        *model.OrderBy `json:"vehicle_manager_id_card"`
	VehicleManagerPhone         *model.OrderBy `json:"vehicle_manager_phone"`
	VehicleState                *model.OrderBy `json:"vehicle_state"`
	VehicleType                 *model.OrderBy `json:"vehicle_type"`
}

// response of any mutation on the table "vehicle_info"
type VehicleInfoMutationResponse struct {
	// number of affected rows by the mutation
	AffectedRows int `json:"affected_rows"`
	// data of the affected rows by the mutation
	Returning []*VehicleInfo `json:"returning"`
}

// input type for inserting object relation for remote table "vehicle_info"
type VehicleInfoObjRelInsertInput struct {
	Data       *VehicleInfoInsertInput `json:"data"`
	OnConflict *VehicleInfoOnConflict  `json:"on_conflict"`
}

// on conflict condition type for table "vehicle_info"
type VehicleInfoOnConflict struct {
	Constraint    VehicleInfoConstraint     `json:"constraint"`
	UpdateColumns []VehicleInfoUpdateColumn `json:"update_columns"`
	Where         *VehicleInfoBoolExp       `json:"where"`
}

// ordering options when selecting data from "vehicle_info"
type VehicleInfoOrderBy struct {
	BusinessScope               *model.OrderBy `json:"business_scope"`
	CarRentalPrice              *model.OrderBy `json:"car_rental_price"`
	CheckState                  *model.OrderBy `json:"check_state"`
	CreateAt                    *model.OrderBy `json:"create_at"`
	CreateBy                    *model.OrderBy `json:"create_by"`
	DeleteAt                    *model.OrderBy `json:"delete_at"`
	DeleteBy                    *model.OrderBy `json:"delete_by"`
	DepartmentID                *model.OrderBy `json:"department_id"`
	DrivingLicenseePic          *model.OrderBy `json:"driving_licensee_pic"`
	EnterpriseID                *model.OrderBy `json:"enterprise_id"`
	Heavy                       *model.OrderBy `json:"heavy"`
	ID                          *model.OrderBy `json:"id"`
	IndustryCategory            *model.OrderBy `json:"industry_category"`
	InspectionDate              *model.OrderBy `json:"inspection_date"`
	InsuranceCompany            *model.OrderBy `json:"insurance_company"`
	InsuranceDate               *model.OrderBy `json:"insurance_date"`
	IsActive                    *model.OrderBy `json:"is_active"`
	IsApplyInstallTerminal      *model.OrderBy `json:"is_apply_install_terminal"`
	IsComplete                  *model.OrderBy `json:"is_complete"`
	IsDelete                    *model.OrderBy `json:"is_delete"`
	IsImport                    *model.OrderBy `json:"is_import"`
	IsInput                     *model.OrderBy `json:"is_input"`
	IsUploadProvince            *model.OrderBy `json:"is_upload_province"`
	LicensePlateColor           *model.OrderBy `json:"license_plate_color"`
	LicensePlateNumber          *model.OrderBy `json:"license_plate_number"`
	LicensePlateType            *model.OrderBy `json:"license_plate_type"`
	MuckTruckID                 *model.OrderBy `json:"muck_truck_id"`
	OperatingRoute              *model.OrderBy `json:"operating_route"`
	OperatingState              *model.OrderBy `json:"operating_state"`
	OperatingType               *model.OrderBy `json:"operating_type"`
	OperatingVehicleID          *model.OrderBy `json:"operating_vehicle_id"`
	Owner                       *model.OrderBy `json:"owner"`
	QuasiDrivingModels          *model.OrderBy `json:"quasi_driving_models"`
	RecordAt                    *model.OrderBy `json:"record_at"`
	RecordBy                    *model.OrderBy `json:"record_by"`
	RemarkIn                    *model.OrderBy `json:"remark_in"`
	Remarks                     *model.OrderBy `json:"remarks"`
	RetirementDate              *model.OrderBy `json:"retirement_date"`
	RoadTransportLicenseNumber  *model.OrderBy `json:"road_transport_license_number"`
	Seats                       *model.OrderBy `json:"seats"`
	TerminalID                  *model.OrderBy `json:"terminal_id"`
	UpdateAt                    *model.OrderBy `json:"update_at"`
	UpdateBy                    *model.OrderBy `json:"update_by"`
	UpdateTimeIn                *model.OrderBy `json:"update_time_in"`
	UseNature                   *model.OrderBy `json:"use_nature"`
	VehicleBrand                *model.OrderBy `json:"vehicle_brand"`
	VehicleDisplacement         *model.OrderBy `json:"vehicle_displacement"`
	VehicleID                   *model.OrderBy `json:"vehicle_id"`
	VehicleIdentificationNumber *model.OrderBy `json:"vehicle_identification_number"`
	VehicleMaintenances         *model.OrderBy `json:"vehicle_maintenances"`
	VehicleManager              *model.OrderBy `json:"vehicle_manager"`
	VehicleManagerIDCard        *model.OrderBy `json:"vehicle_manager_id_card"`
	VehicleManagerPhone         *model.OrderBy `json:"vehicle_manager_phone"`
	VehicleState                *model.OrderBy `json:"vehicle_state"`
	VehicleType                 *model.OrderBy `json:"vehicle_type"`
}

// primary key columns input for table: "vehicle_info"
type VehicleInfoPkColumnsInput struct {
	// 主键
	ID int64 `json:"id"`
	// 车辆外部编码，由golang程序生成的xid，暴露到外部使用
	VehicleID string `json:"vehicle_id"`
}

// input type for updating data in table "vehicle_info"
type VehicleInfoSetInput struct {
	BusinessScope               *int       `json:"business_scope"`
	CarRentalPrice              *float64   `json:"car_rental_price"`
	CheckState                  *int       `json:"check_state"`
	CreateAt                    *time.Time `json:"create_at"`
	CreateBy                    *string    `json:"create_by"`
	DeleteAt                    *time.Time `json:"delete_at"`
	DeleteBy                    *time.Time `json:"delete_by"`
	DepartmentID                *string    `json:"department_id"`
	DrivingLicenseePic          *string    `json:"driving_licensee_pic"`
	EnterpriseID                *string    `json:"enterprise_id"`
	Heavy                       *float64   `json:"heavy"`
	ID                          *int64     `json:"id"`
	IndustryCategory            *int       `json:"industry_category"`
	InspectionDate              *time.Time `json:"inspection_date"`
	InsuranceCompany            *int       `json:"insurance_company"`
	InsuranceDate               *time.Time `json:"insurance_date"`
	IsActive                    *bool      `json:"is_active"`
	IsApplyInstallTerminal      *bool      `json:"is_apply_install_terminal"`
	IsComplete                  *bool      `json:"is_complete"`
	IsDelete                    *bool      `json:"is_delete"`
	IsImport                    *bool      `json:"is_import"`
	IsInput                     *bool      `json:"is_input"`
	IsUploadProvince            *bool      `json:"is_upload_province"`
	LicensePlateColor           *int       `json:"license_plate_color"`
	LicensePlateNumber          *string    `json:"license_plate_number"`
	LicensePlateType            *int       `json:"license_plate_type"`
	MuckTruckID                 *int64     `json:"muck_truck_id"`
	OperatingRoute              *string    `json:"operating_route"`
	OperatingState              *int       `json:"operating_state"`
	OperatingType               *int       `json:"operating_type"`
	OperatingVehicleID          *int64     `json:"operating_vehicle_id"`
	Owner                       *string    `json:"owner"`
	QuasiDrivingModels          *int       `json:"quasi_driving_models"`
	RecordAt                    *time.Time `json:"record_at"`
	RecordBy                    *string    `json:"record_by"`
	RemarkIn                    *string    `json:"remark_in"`
	Remarks                     *string    `json:"remarks"`
	RetirementDate              *time.Time `json:"retirement_date"`
	RoadTransportLicenseNumber  *string    `json:"road_transport_license_number"`
	Seats                       *int       `json:"seats"`
	TerminalID                  *string    `json:"terminal_id"`
	UpdateAt                    *time.Time `json:"update_at"`
	UpdateBy                    *string    `json:"update_by"`
	UpdateTimeIn                *time.Time `json:"update_time_in"`
	UseNature                   *string    `json:"use_nature"`
	VehicleBrand                *int       `json:"vehicle_brand"`
	VehicleDisplacement         *string    `json:"vehicle_displacement"`
	VehicleID                   *string    `json:"vehicle_id"`
	VehicleIdentificationNumber *string    `json:"vehicle_identification_number"`
	VehicleMaintenances         *string    `json:"vehicle_maintenances"`
	VehicleManager              *string    `json:"vehicle_manager"`
	VehicleManagerIDCard        *string    `json:"vehicle_manager_id_card"`
	VehicleManagerPhone         *string    `json:"vehicle_manager_phone"`
	VehicleState                *int       `json:"vehicle_state"`
	VehicleType                 *int       `json:"vehicle_type"`
}

// aggregate stddev on columns
type VehicleInfoStddevFields struct {
	BusinessScope      *float64 `json:"business_scope"`
	CarRentalPrice     *float64 `json:"car_rental_price"`
	CheckState         *float64 `json:"check_state"`
	Heavy              *float64 `json:"heavy"`
	ID                 *float64 `json:"id"`
	IndustryCategory   *float64 `json:"industry_category"`
	InsuranceCompany   *float64 `json:"insurance_company"`
	LicensePlateColor  *float64 `json:"license_plate_color"`
	LicensePlateType   *float64 `json:"license_plate_type"`
	MuckTruckID        *float64 `json:"muck_truck_id"`
	OperatingState     *float64 `json:"operating_state"`
	OperatingType      *float64 `json:"operating_type"`
	OperatingVehicleID *float64 `json:"operating_vehicle_id"`
	QuasiDrivingModels *float64 `json:"quasi_driving_models"`
	Seats              *float64 `json:"seats"`
	VehicleBrand       *float64 `json:"vehicle_brand"`
	VehicleState       *float64 `json:"vehicle_state"`
	VehicleType        *float64 `json:"vehicle_type"`
}

// order by stddev() on columns of table "vehicle_info"
type VehicleInfoStddevOrderBy struct {
	BusinessScope      *model.OrderBy `json:"business_scope"`
	CarRentalPrice     *model.OrderBy `json:"car_rental_price"`
	CheckState         *model.OrderBy `json:"check_state"`
	Heavy              *model.OrderBy `json:"heavy"`
	ID                 *model.OrderBy `json:"id"`
	IndustryCategory   *model.OrderBy `json:"industry_category"`
	InsuranceCompany   *model.OrderBy `json:"insurance_company"`
	LicensePlateColor  *model.OrderBy `json:"license_plate_color"`
	LicensePlateType   *model.OrderBy `json:"license_plate_type"`
	MuckTruckID        *model.OrderBy `json:"muck_truck_id"`
	OperatingState     *model.OrderBy `json:"operating_state"`
	OperatingType      *model.OrderBy `json:"operating_type"`
	OperatingVehicleID *model.OrderBy `json:"operating_vehicle_id"`
	QuasiDrivingModels *model.OrderBy `json:"quasi_driving_models"`
	Seats              *model.OrderBy `json:"seats"`
	VehicleBrand       *model.OrderBy `json:"vehicle_brand"`
	VehicleState       *model.OrderBy `json:"vehicle_state"`
	VehicleType        *model.OrderBy `json:"vehicle_type"`
}

// aggregate stddev_pop on columns
type VehicleInfoStddevPopFields struct {
	BusinessScope      *float64 `json:"business_scope"`
	CarRentalPrice     *float64 `json:"car_rental_price"`
	CheckState         *float64 `json:"check_state"`
	Heavy              *float64 `json:"heavy"`
	ID                 *float64 `json:"id"`
	IndustryCategory   *float64 `json:"industry_category"`
	InsuranceCompany   *float64 `json:"insurance_company"`
	LicensePlateColor  *float64 `json:"license_plate_color"`
	LicensePlateType   *float64 `json:"license_plate_type"`
	MuckTruckID        *float64 `json:"muck_truck_id"`
	OperatingState     *float64 `json:"operating_state"`
	OperatingType      *float64 `json:"operating_type"`
	OperatingVehicleID *float64 `json:"operating_vehicle_id"`
	QuasiDrivingModels *float64 `json:"quasi_driving_models"`
	Seats              *float64 `json:"seats"`
	VehicleBrand       *float64 `json:"vehicle_brand"`
	VehicleState       *float64 `json:"vehicle_state"`
	VehicleType        *float64 `json:"vehicle_type"`
}

// order by stddev_pop() on columns of table "vehicle_info"
type VehicleInfoStddevPopOrderBy struct {
	BusinessScope      *model.OrderBy `json:"business_scope"`
	CarRentalPrice     *model.OrderBy `json:"car_rental_price"`
	CheckState         *model.OrderBy `json:"check_state"`
	Heavy              *model.OrderBy `json:"heavy"`
	ID                 *model.OrderBy `json:"id"`
	IndustryCategory   *model.OrderBy `json:"industry_category"`
	InsuranceCompany   *model.OrderBy `json:"insurance_company"`
	LicensePlateColor  *model.OrderBy `json:"license_plate_color"`
	LicensePlateType   *model.OrderBy `json:"license_plate_type"`
	MuckTruckID        *model.OrderBy `json:"muck_truck_id"`
	OperatingState     *model.OrderBy `json:"operating_state"`
	OperatingType      *model.OrderBy `json:"operating_type"`
	OperatingVehicleID *model.OrderBy `json:"operating_vehicle_id"`
	QuasiDrivingModels *model.OrderBy `json:"quasi_driving_models"`
	Seats              *model.OrderBy `json:"seats"`
	VehicleBrand       *model.OrderBy `json:"vehicle_brand"`
	VehicleState       *model.OrderBy `json:"vehicle_state"`
	VehicleType        *model.OrderBy `json:"vehicle_type"`
}

// aggregate stddev_samp on columns
type VehicleInfoStddevSampFields struct {
	BusinessScope      *float64 `json:"business_scope"`
	CarRentalPrice     *float64 `json:"car_rental_price"`
	CheckState         *float64 `json:"check_state"`
	Heavy              *float64 `json:"heavy"`
	ID                 *float64 `json:"id"`
	IndustryCategory   *float64 `json:"industry_category"`
	InsuranceCompany   *float64 `json:"insurance_company"`
	LicensePlateColor  *float64 `json:"license_plate_color"`
	LicensePlateType   *float64 `json:"license_plate_type"`
	MuckTruckID        *float64 `json:"muck_truck_id"`
	OperatingState     *float64 `json:"operating_state"`
	OperatingType      *float64 `json:"operating_type"`
	OperatingVehicleID *float64 `json:"operating_vehicle_id"`
	QuasiDrivingModels *float64 `json:"quasi_driving_models"`
	Seats              *float64 `json:"seats"`
	VehicleBrand       *float64 `json:"vehicle_brand"`
	VehicleState       *float64 `json:"vehicle_state"`
	VehicleType        *float64 `json:"vehicle_type"`
}

// order by stddev_samp() on columns of table "vehicle_info"
type VehicleInfoStddevSampOrderBy struct {
	BusinessScope      *model.OrderBy `json:"business_scope"`
	CarRentalPrice     *model.OrderBy `json:"car_rental_price"`
	CheckState         *model.OrderBy `json:"check_state"`
	Heavy              *model.OrderBy `json:"heavy"`
	ID                 *model.OrderBy `json:"id"`
	IndustryCategory   *model.OrderBy `json:"industry_category"`
	InsuranceCompany   *model.OrderBy `json:"insurance_company"`
	LicensePlateColor  *model.OrderBy `json:"license_plate_color"`
	LicensePlateType   *model.OrderBy `json:"license_plate_type"`
	MuckTruckID        *model.OrderBy `json:"muck_truck_id"`
	OperatingState     *model.OrderBy `json:"operating_state"`
	OperatingType      *model.OrderBy `json:"operating_type"`
	OperatingVehicleID *model.OrderBy `json:"operating_vehicle_id"`
	QuasiDrivingModels *model.OrderBy `json:"quasi_driving_models"`
	Seats              *model.OrderBy `json:"seats"`
	VehicleBrand       *model.OrderBy `json:"vehicle_brand"`
	VehicleState       *model.OrderBy `json:"vehicle_state"`
	VehicleType        *model.OrderBy `json:"vehicle_type"`
}

// aggregate sum on columns
type VehicleInfoSumFields struct {
	BusinessScope      *int     `json:"business_scope"`
	CarRentalPrice     *float64 `json:"car_rental_price"`
	CheckState         *int     `json:"check_state"`
	Heavy              *float64 `json:"heavy"`
	ID                 *int64   `json:"id"`
	IndustryCategory   *int     `json:"industry_category"`
	InsuranceCompany   *int     `json:"insurance_company"`
	LicensePlateColor  *int     `json:"license_plate_color"`
	LicensePlateType   *int     `json:"license_plate_type"`
	MuckTruckID        *int64   `json:"muck_truck_id"`
	OperatingState     *int     `json:"operating_state"`
	OperatingType      *int     `json:"operating_type"`
	OperatingVehicleID *int64   `json:"operating_vehicle_id"`
	QuasiDrivingModels *int     `json:"quasi_driving_models"`
	Seats              *int     `json:"seats"`
	VehicleBrand       *int     `json:"vehicle_brand"`
	VehicleState       *int     `json:"vehicle_state"`
	VehicleType        *int     `json:"vehicle_type"`
}

// order by sum() on columns of table "vehicle_info"
type VehicleInfoSumOrderBy struct {
	BusinessScope      *model.OrderBy `json:"business_scope"`
	CarRentalPrice     *model.OrderBy `json:"car_rental_price"`
	CheckState         *model.OrderBy `json:"check_state"`
	Heavy              *model.OrderBy `json:"heavy"`
	ID                 *model.OrderBy `json:"id"`
	IndustryCategory   *model.OrderBy `json:"industry_category"`
	InsuranceCompany   *model.OrderBy `json:"insurance_company"`
	LicensePlateColor  *model.OrderBy `json:"license_plate_color"`
	LicensePlateType   *model.OrderBy `json:"license_plate_type"`
	MuckTruckID        *model.OrderBy `json:"muck_truck_id"`
	OperatingState     *model.OrderBy `json:"operating_state"`
	OperatingType      *model.OrderBy `json:"operating_type"`
	OperatingVehicleID *model.OrderBy `json:"operating_vehicle_id"`
	QuasiDrivingModels *model.OrderBy `json:"quasi_driving_models"`
	Seats              *model.OrderBy `json:"seats"`
	VehicleBrand       *model.OrderBy `json:"vehicle_brand"`
	VehicleState       *model.OrderBy `json:"vehicle_state"`
	VehicleType        *model.OrderBy `json:"vehicle_type"`
}

// aggregate var_pop on columns
type VehicleInfoVarPopFields struct {
	BusinessScope      *float64 `json:"business_scope"`
	CarRentalPrice     *float64 `json:"car_rental_price"`
	CheckState         *float64 `json:"check_state"`
	Heavy              *float64 `json:"heavy"`
	ID                 *float64 `json:"id"`
	IndustryCategory   *float64 `json:"industry_category"`
	InsuranceCompany   *float64 `json:"insurance_company"`
	LicensePlateColor  *float64 `json:"license_plate_color"`
	LicensePlateType   *float64 `json:"license_plate_type"`
	MuckTruckID        *float64 `json:"muck_truck_id"`
	OperatingState     *float64 `json:"operating_state"`
	OperatingType      *float64 `json:"operating_type"`
	OperatingVehicleID *float64 `json:"operating_vehicle_id"`
	QuasiDrivingModels *float64 `json:"quasi_driving_models"`
	Seats              *float64 `json:"seats"`
	VehicleBrand       *float64 `json:"vehicle_brand"`
	VehicleState       *float64 `json:"vehicle_state"`
	VehicleType        *float64 `json:"vehicle_type"`
}

// order by var_pop() on columns of table "vehicle_info"
type VehicleInfoVarPopOrderBy struct {
	BusinessScope      *model.OrderBy `json:"business_scope"`
	CarRentalPrice     *model.OrderBy `json:"car_rental_price"`
	CheckState         *model.OrderBy `json:"check_state"`
	Heavy              *model.OrderBy `json:"heavy"`
	ID                 *model.OrderBy `json:"id"`
	IndustryCategory   *model.OrderBy `json:"industry_category"`
	InsuranceCompany   *model.OrderBy `json:"insurance_company"`
	LicensePlateColor  *model.OrderBy `json:"license_plate_color"`
	LicensePlateType   *model.OrderBy `json:"license_plate_type"`
	MuckTruckID        *model.OrderBy `json:"muck_truck_id"`
	OperatingState     *model.OrderBy `json:"operating_state"`
	OperatingType      *model.OrderBy `json:"operating_type"`
	OperatingVehicleID *model.OrderBy `json:"operating_vehicle_id"`
	QuasiDrivingModels *model.OrderBy `json:"quasi_driving_models"`
	Seats              *model.OrderBy `json:"seats"`
	VehicleBrand       *model.OrderBy `json:"vehicle_brand"`
	VehicleState       *model.OrderBy `json:"vehicle_state"`
	VehicleType        *model.OrderBy `json:"vehicle_type"`
}

// aggregate var_samp on columns
type VehicleInfoVarSampFields struct {
	BusinessScope      *float64 `json:"business_scope"`
	CarRentalPrice     *float64 `json:"car_rental_price"`
	CheckState         *float64 `json:"check_state"`
	Heavy              *float64 `json:"heavy"`
	ID                 *float64 `json:"id"`
	IndustryCategory   *float64 `json:"industry_category"`
	InsuranceCompany   *float64 `json:"insurance_company"`
	LicensePlateColor  *float64 `json:"license_plate_color"`
	LicensePlateType   *float64 `json:"license_plate_type"`
	MuckTruckID        *float64 `json:"muck_truck_id"`
	OperatingState     *float64 `json:"operating_state"`
	OperatingType      *float64 `json:"operating_type"`
	OperatingVehicleID *float64 `json:"operating_vehicle_id"`
	QuasiDrivingModels *float64 `json:"quasi_driving_models"`
	Seats              *float64 `json:"seats"`
	VehicleBrand       *float64 `json:"vehicle_brand"`
	VehicleState       *float64 `json:"vehicle_state"`
	VehicleType        *float64 `json:"vehicle_type"`
}

// order by var_samp() on columns of table "vehicle_info"
type VehicleInfoVarSampOrderBy struct {
	BusinessScope      *model.OrderBy `json:"business_scope"`
	CarRentalPrice     *model.OrderBy `json:"car_rental_price"`
	CheckState         *model.OrderBy `json:"check_state"`
	Heavy              *model.OrderBy `json:"heavy"`
	ID                 *model.OrderBy `json:"id"`
	IndustryCategory   *model.OrderBy `json:"industry_category"`
	InsuranceCompany   *model.OrderBy `json:"insurance_company"`
	LicensePlateColor  *model.OrderBy `json:"license_plate_color"`
	LicensePlateType   *model.OrderBy `json:"license_plate_type"`
	MuckTruckID        *model.OrderBy `json:"muck_truck_id"`
	OperatingState     *model.OrderBy `json:"operating_state"`
	OperatingType      *model.OrderBy `json:"operating_type"`
	OperatingVehicleID *model.OrderBy `json:"operating_vehicle_id"`
	QuasiDrivingModels *model.OrderBy `json:"quasi_driving_models"`
	Seats              *model.OrderBy `json:"seats"`
	VehicleBrand       *model.OrderBy `json:"vehicle_brand"`
	VehicleState       *model.OrderBy `json:"vehicle_state"`
	VehicleType        *model.OrderBy `json:"vehicle_type"`
}

// aggregate variance on columns
type VehicleInfoVarianceFields struct {
	BusinessScope      *float64 `json:"business_scope"`
	CarRentalPrice     *float64 `json:"car_rental_price"`
	CheckState         *float64 `json:"check_state"`
	Heavy              *float64 `json:"heavy"`
	ID                 *float64 `json:"id"`
	IndustryCategory   *float64 `json:"industry_category"`
	InsuranceCompany   *float64 `json:"insurance_company"`
	LicensePlateColor  *float64 `json:"license_plate_color"`
	LicensePlateType   *float64 `json:"license_plate_type"`
	MuckTruckID        *float64 `json:"muck_truck_id"`
	OperatingState     *float64 `json:"operating_state"`
	OperatingType      *float64 `json:"operating_type"`
	OperatingVehicleID *float64 `json:"operating_vehicle_id"`
	QuasiDrivingModels *float64 `json:"quasi_driving_models"`
	Seats              *float64 `json:"seats"`
	VehicleBrand       *float64 `json:"vehicle_brand"`
	VehicleState       *float64 `json:"vehicle_state"`
	VehicleType        *float64 `json:"vehicle_type"`
}

// order by variance() on columns of table "vehicle_info"
type VehicleInfoVarianceOrderBy struct {
	BusinessScope      *model.OrderBy `json:"business_scope"`
	CarRentalPrice     *model.OrderBy `json:"car_rental_price"`
	CheckState         *model.OrderBy `json:"check_state"`
	Heavy              *model.OrderBy `json:"heavy"`
	ID                 *model.OrderBy `json:"id"`
	IndustryCategory   *model.OrderBy `json:"industry_category"`
	InsuranceCompany   *model.OrderBy `json:"insurance_company"`
	LicensePlateColor  *model.OrderBy `json:"license_plate_color"`
	LicensePlateType   *model.OrderBy `json:"license_plate_type"`
	MuckTruckID        *model.OrderBy `json:"muck_truck_id"`
	OperatingState     *model.OrderBy `json:"operating_state"`
	OperatingType      *model.OrderBy `json:"operating_type"`
	OperatingVehicleID *model.OrderBy `json:"operating_vehicle_id"`
	QuasiDrivingModels *model.OrderBy `json:"quasi_driving_models"`
	Seats              *model.OrderBy `json:"seats"`
	VehicleBrand       *model.OrderBy `json:"vehicle_brand"`
	VehicleState       *model.OrderBy `json:"vehicle_state"`
	VehicleType        *model.OrderBy `json:"vehicle_type"`
}

// aggregated selection of "vehicle_supervision_photo"
type VehicleSupervisionPhotoAggregate struct {
	Aggregate *VehicleSupervisionPhotoAggregateFields `json:"aggregate"`
	Nodes     []*VehicleSupervisionPhoto              `json:"nodes"`
}

// aggregate fields of "vehicle_supervision_photo"
type VehicleSupervisionPhotoAggregateFields struct {
	Avg        *VehicleSupervisionPhotoAvgFields        `json:"avg"`
	Count      *int                                     `json:"count"`
	Max        *VehicleSupervisionPhotoMaxFields        `json:"max"`
	Min        *VehicleSupervisionPhotoMinFields        `json:"min"`
	Stddev     *VehicleSupervisionPhotoStddevFields     `json:"stddev"`
	StddevPop  *VehicleSupervisionPhotoStddevPopFields  `json:"stddev_pop"`
	StddevSamp *VehicleSupervisionPhotoStddevSampFields `json:"stddev_samp"`
	Sum        *VehicleSupervisionPhotoSumFields        `json:"sum"`
	VarPop     *VehicleSupervisionPhotoVarPopFields     `json:"var_pop"`
	VarSamp    *VehicleSupervisionPhotoVarSampFields    `json:"var_samp"`
	Variance   *VehicleSupervisionPhotoVarianceFields   `json:"variance"`
}

// order by aggregate values of table "vehicle_supervision_photo"
type VehicleSupervisionPhotoAggregateOrderBy struct {
	Avg        *VehicleSupervisionPhotoAvgOrderBy        `json:"avg"`
	Count      *model.OrderBy                            `json:"count"`
	Max        *VehicleSupervisionPhotoMaxOrderBy        `json:"max"`
	Min        *VehicleSupervisionPhotoMinOrderBy        `json:"min"`
	Stddev     *VehicleSupervisionPhotoStddevOrderBy     `json:"stddev"`
	StddevPop  *VehicleSupervisionPhotoStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *VehicleSupervisionPhotoStddevSampOrderBy `json:"stddev_samp"`
	Sum        *VehicleSupervisionPhotoSumOrderBy        `json:"sum"`
	VarPop     *VehicleSupervisionPhotoVarPopOrderBy     `json:"var_pop"`
	VarSamp    *VehicleSupervisionPhotoVarSampOrderBy    `json:"var_samp"`
	Variance   *VehicleSupervisionPhotoVarianceOrderBy   `json:"variance"`
}

// input type for inserting array relation for remote table "vehicle_supervision_photo"
type VehicleSupervisionPhotoArrRelInsertInput struct {
	Data       []*VehicleSupervisionPhotoInsertInput `json:"data"`
	OnConflict *VehicleSupervisionPhotoOnConflict    `json:"on_conflict"`
}

// aggregate avg on columns
type VehicleSupervisionPhotoAvgFields struct {
	CameraID *float64 `json:"camera_id"`
	ID       *float64 `json:"id"`
}

// order by avg() on columns of table "vehicle_supervision_photo"
type VehicleSupervisionPhotoAvgOrderBy struct {
	CameraID *model.OrderBy `json:"camera_id"`
	ID       *model.OrderBy `json:"id"`
}

// Boolean expression to filter rows from the table "vehicle_supervision_photo". All fields are combined with a logical 'AND'.
type VehicleSupervisionPhotoBoolExp struct {
	Imei                    *model.StringComparisonExp        `json:"IMEI"`
	And                     []*VehicleSupervisionPhotoBoolExp `json:"_and"`
	Not                     *VehicleSupervisionPhotoBoolExp   `json:"_not"`
	Or                      []*VehicleSupervisionPhotoBoolExp `json:"_or"`
	CameraID                *model.IntComparisonExp           `json:"camera_id"`
	DriverID                *model.StringComparisonExp        `json:"driver_id"`
	EnterpriseID            *model.StringComparisonExp        `json:"enterprise_id"`
	ID                      *model.BigintComparisonExp        `json:"id"`
	MonitoringPicAddress    *model.StringComparisonExp        `json:"monitoring_pic_address"`
	MonitoringPicName       *model.StringComparisonExp        `json:"monitoring_pic_name"`
	MonitoringPicUploadTime *model.TimestamptzComparisonExp   `json:"monitoring_pic_upload_time"`
	PhotoCondition          *model.StringComparisonExp        `json:"photo_condition"`
	SimNumber               *model.StringComparisonExp        `json:"sim_number"`
	SupervisionPhotoID      *model.StringComparisonExp        `json:"supervision_photo_id"`
	UpdateTime              *model.TimestamptzComparisonExp   `json:"update_time"`
	VehicleID               *model.StringComparisonExp        `json:"vehicle_id"`
}

// input type for incrementing integer column in table "vehicle_supervision_photo"
type VehicleSupervisionPhotoIncInput struct {
	CameraID *int   `json:"camera_id"`
	ID       *int64 `json:"id"`
}

// input type for inserting data into table "vehicle_supervision_photo"
type VehicleSupervisionPhotoInsertInput struct {
	Imei                    *string    `json:"IMEI"`
	CameraID                *int       `json:"camera_id"`
	DriverID                *string    `json:"driver_id"`
	EnterpriseID            *string    `json:"enterprise_id"`
	ID                      *int64     `json:"id"`
	MonitoringPicAddress    *string    `json:"monitoring_pic_address"`
	MonitoringPicName       *string    `json:"monitoring_pic_name"`
	MonitoringPicUploadTime *time.Time `json:"monitoring_pic_upload_time"`
	PhotoCondition          *string    `json:"photo_condition"`
	SimNumber               *string    `json:"sim_number"`
	SupervisionPhotoID      *string    `json:"supervision_photo_id"`
	UpdateTime              *time.Time `json:"update_time"`
	VehicleID               *string    `json:"vehicle_id"`
}

// aggregate max on columns
type VehicleSupervisionPhotoMaxFields struct {
	Imei                    *string    `json:"IMEI"`
	CameraID                *int       `json:"camera_id"`
	DriverID                *string    `json:"driver_id"`
	EnterpriseID            *string    `json:"enterprise_id"`
	ID                      *int64     `json:"id"`
	MonitoringPicAddress    *string    `json:"monitoring_pic_address"`
	MonitoringPicName       *string    `json:"monitoring_pic_name"`
	MonitoringPicUploadTime *time.Time `json:"monitoring_pic_upload_time"`
	PhotoCondition          *string    `json:"photo_condition"`
	SimNumber               *string    `json:"sim_number"`
	SupervisionPhotoID      *string    `json:"supervision_photo_id"`
	UpdateTime              *time.Time `json:"update_time"`
	VehicleID               *string    `json:"vehicle_id"`
}

// order by max() on columns of table "vehicle_supervision_photo"
type VehicleSupervisionPhotoMaxOrderBy struct {
	Imei                    *model.OrderBy `json:"IMEI"`
	CameraID                *model.OrderBy `json:"camera_id"`
	DriverID                *model.OrderBy `json:"driver_id"`
	EnterpriseID            *model.OrderBy `json:"enterprise_id"`
	ID                      *model.OrderBy `json:"id"`
	MonitoringPicAddress    *model.OrderBy `json:"monitoring_pic_address"`
	MonitoringPicName       *model.OrderBy `json:"monitoring_pic_name"`
	MonitoringPicUploadTime *model.OrderBy `json:"monitoring_pic_upload_time"`
	PhotoCondition          *model.OrderBy `json:"photo_condition"`
	SimNumber               *model.OrderBy `json:"sim_number"`
	SupervisionPhotoID      *model.OrderBy `json:"supervision_photo_id"`
	UpdateTime              *model.OrderBy `json:"update_time"`
	VehicleID               *model.OrderBy `json:"vehicle_id"`
}

// aggregate min on columns
type VehicleSupervisionPhotoMinFields struct {
	Imei                    *string    `json:"IMEI"`
	CameraID                *int       `json:"camera_id"`
	DriverID                *string    `json:"driver_id"`
	EnterpriseID            *string    `json:"enterprise_id"`
	ID                      *int64     `json:"id"`
	MonitoringPicAddress    *string    `json:"monitoring_pic_address"`
	MonitoringPicName       *string    `json:"monitoring_pic_name"`
	MonitoringPicUploadTime *time.Time `json:"monitoring_pic_upload_time"`
	PhotoCondition          *string    `json:"photo_condition"`
	SimNumber               *string    `json:"sim_number"`
	SupervisionPhotoID      *string    `json:"supervision_photo_id"`
	UpdateTime              *time.Time `json:"update_time"`
	VehicleID               *string    `json:"vehicle_id"`
}

// order by min() on columns of table "vehicle_supervision_photo"
type VehicleSupervisionPhotoMinOrderBy struct {
	Imei                    *model.OrderBy `json:"IMEI"`
	CameraID                *model.OrderBy `json:"camera_id"`
	DriverID                *model.OrderBy `json:"driver_id"`
	EnterpriseID            *model.OrderBy `json:"enterprise_id"`
	ID                      *model.OrderBy `json:"id"`
	MonitoringPicAddress    *model.OrderBy `json:"monitoring_pic_address"`
	MonitoringPicName       *model.OrderBy `json:"monitoring_pic_name"`
	MonitoringPicUploadTime *model.OrderBy `json:"monitoring_pic_upload_time"`
	PhotoCondition          *model.OrderBy `json:"photo_condition"`
	SimNumber               *model.OrderBy `json:"sim_number"`
	SupervisionPhotoID      *model.OrderBy `json:"supervision_photo_id"`
	UpdateTime              *model.OrderBy `json:"update_time"`
	VehicleID               *model.OrderBy `json:"vehicle_id"`
}

// response of any mutation on the table "vehicle_supervision_photo"
type VehicleSupervisionPhotoMutationResponse struct {
	// number of affected rows by the mutation
	AffectedRows int `json:"affected_rows"`
	// data of the affected rows by the mutation
	Returning []*VehicleSupervisionPhoto `json:"returning"`
}

// input type for inserting object relation for remote table "vehicle_supervision_photo"
type VehicleSupervisionPhotoObjRelInsertInput struct {
	Data       *VehicleSupervisionPhotoInsertInput `json:"data"`
	OnConflict *VehicleSupervisionPhotoOnConflict  `json:"on_conflict"`
}

// on conflict condition type for table "vehicle_supervision_photo"
type VehicleSupervisionPhotoOnConflict struct {
	Constraint    VehicleSupervisionPhotoConstraint     `json:"constraint"`
	UpdateColumns []VehicleSupervisionPhotoUpdateColumn `json:"update_columns"`
	Where         *VehicleSupervisionPhotoBoolExp       `json:"where"`
}

// ordering options when selecting data from "vehicle_supervision_photo"
type VehicleSupervisionPhotoOrderBy struct {
	Imei                    *model.OrderBy `json:"IMEI"`
	CameraID                *model.OrderBy `json:"camera_id"`
	DriverID                *model.OrderBy `json:"driver_id"`
	EnterpriseID            *model.OrderBy `json:"enterprise_id"`
	ID                      *model.OrderBy `json:"id"`
	MonitoringPicAddress    *model.OrderBy `json:"monitoring_pic_address"`
	MonitoringPicName       *model.OrderBy `json:"monitoring_pic_name"`
	MonitoringPicUploadTime *model.OrderBy `json:"monitoring_pic_upload_time"`
	PhotoCondition          *model.OrderBy `json:"photo_condition"`
	SimNumber               *model.OrderBy `json:"sim_number"`
	SupervisionPhotoID      *model.OrderBy `json:"supervision_photo_id"`
	UpdateTime              *model.OrderBy `json:"update_time"`
	VehicleID               *model.OrderBy `json:"vehicle_id"`
}

// primary key columns input for table: "vehicle_supervision_photo"
type VehicleSupervisionPhotoPkColumnsInput struct {
	// 主键
	ID int64 `json:"id"`
	// 车辆监控图片外部编码，由golang程序生成的xid，暴露到外部使用
	SupervisionPhotoID string `json:"supervision_photo_id"`
}

// input type for updating data in table "vehicle_supervision_photo"
type VehicleSupervisionPhotoSetInput struct {
	Imei                    *string    `json:"IMEI"`
	CameraID                *int       `json:"camera_id"`
	DriverID                *string    `json:"driver_id"`
	EnterpriseID            *string    `json:"enterprise_id"`
	ID                      *int64     `json:"id"`
	MonitoringPicAddress    *string    `json:"monitoring_pic_address"`
	MonitoringPicName       *string    `json:"monitoring_pic_name"`
	MonitoringPicUploadTime *time.Time `json:"monitoring_pic_upload_time"`
	PhotoCondition          *string    `json:"photo_condition"`
	SimNumber               *string    `json:"sim_number"`
	SupervisionPhotoID      *string    `json:"supervision_photo_id"`
	UpdateTime              *time.Time `json:"update_time"`
	VehicleID               *string    `json:"vehicle_id"`
}

// aggregate stddev on columns
type VehicleSupervisionPhotoStddevFields struct {
	CameraID *float64 `json:"camera_id"`
	ID       *float64 `json:"id"`
}

// order by stddev() on columns of table "vehicle_supervision_photo"
type VehicleSupervisionPhotoStddevOrderBy struct {
	CameraID *model.OrderBy `json:"camera_id"`
	ID       *model.OrderBy `json:"id"`
}

// aggregate stddev_pop on columns
type VehicleSupervisionPhotoStddevPopFields struct {
	CameraID *float64 `json:"camera_id"`
	ID       *float64 `json:"id"`
}

// order by stddev_pop() on columns of table "vehicle_supervision_photo"
type VehicleSupervisionPhotoStddevPopOrderBy struct {
	CameraID *model.OrderBy `json:"camera_id"`
	ID       *model.OrderBy `json:"id"`
}

// aggregate stddev_samp on columns
type VehicleSupervisionPhotoStddevSampFields struct {
	CameraID *float64 `json:"camera_id"`
	ID       *float64 `json:"id"`
}

// order by stddev_samp() on columns of table "vehicle_supervision_photo"
type VehicleSupervisionPhotoStddevSampOrderBy struct {
	CameraID *model.OrderBy `json:"camera_id"`
	ID       *model.OrderBy `json:"id"`
}

// aggregate sum on columns
type VehicleSupervisionPhotoSumFields struct {
	CameraID *int   `json:"camera_id"`
	ID       *int64 `json:"id"`
}

// order by sum() on columns of table "vehicle_supervision_photo"
type VehicleSupervisionPhotoSumOrderBy struct {
	CameraID *model.OrderBy `json:"camera_id"`
	ID       *model.OrderBy `json:"id"`
}

// aggregate var_pop on columns
type VehicleSupervisionPhotoVarPopFields struct {
	CameraID *float64 `json:"camera_id"`
	ID       *float64 `json:"id"`
}

// order by var_pop() on columns of table "vehicle_supervision_photo"
type VehicleSupervisionPhotoVarPopOrderBy struct {
	CameraID *model.OrderBy `json:"camera_id"`
	ID       *model.OrderBy `json:"id"`
}

// aggregate var_samp on columns
type VehicleSupervisionPhotoVarSampFields struct {
	CameraID *float64 `json:"camera_id"`
	ID       *float64 `json:"id"`
}

// order by var_samp() on columns of table "vehicle_supervision_photo"
type VehicleSupervisionPhotoVarSampOrderBy struct {
	CameraID *model.OrderBy `json:"camera_id"`
	ID       *model.OrderBy `json:"id"`
}

// aggregate variance on columns
type VehicleSupervisionPhotoVarianceFields struct {
	CameraID *float64 `json:"camera_id"`
	ID       *float64 `json:"id"`
}

// order by variance() on columns of table "vehicle_supervision_photo"
type VehicleSupervisionPhotoVarianceOrderBy struct {
	CameraID *model.OrderBy `json:"camera_id"`
	ID       *model.OrderBy `json:"id"`
}

// unique or primary key constraints on table "JJ_VEHICLE"
type JjVehicleConstraint string

const (
	// unique or primary key constraint
	JjVehicleConstraintJjVehiclePkey JjVehicleConstraint = "JJ_VEHICLE_pkey"
)

var AllJjVehicleConstraint = []JjVehicleConstraint{
	JjVehicleConstraintJjVehiclePkey,
}

func (e JjVehicleConstraint) IsValid() bool {
	switch e {
	case JjVehicleConstraintJjVehiclePkey:
		return true
	}
	return false
}

func (e JjVehicleConstraint) String() string {
	return string(e)
}

func (e *JjVehicleConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = JjVehicleConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid JJ_VEHICLE_constraint", str)
	}
	return nil
}

func (e JjVehicleConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// select columns of table "JJ_VEHICLE"
type JjVehicleSelectColumn string

const (
	// column name
	JjVehicleSelectColumnCcdjrq JjVehicleSelectColumn = "CCDJRQ"
	// column name
	JjVehicleSelectColumnCllx JjVehicleSelectColumn = "CLLX"
	// column name
	JjVehicleSelectColumnClsbdh JjVehicleSelectColumn = "CLSBDH"
	// column name
	JjVehicleSelectColumnCounty JjVehicleSelectColumn = "COUNTY"
	// column name
	JjVehicleSelectColumnDjrq JjVehicleSelectColumn = "DJRQ"
	// column name
	JjVehicleSelectColumnFprq JjVehicleSelectColumn = "FPRQ"
	// column name
	JjVehicleSelectColumnGxrq JjVehicleSelectColumn = "GXRQ"
	// column name
	JjVehicleSelectColumnHphm JjVehicleSelectColumn = "HPHM"
	// column name
	JjVehicleSelectColumnHpzl JjVehicleSelectColumn = "HPZL"
	// column name
	JjVehicleSelectColumnIsDeteled JjVehicleSelectColumn = "IS_DETELED"
	// column name
	JjVehicleSelectColumnLxdh JjVehicleSelectColumn = "LXDH"
	// column name
	JjVehicleSelectColumnLxdz JjVehicleSelectColumn = "LXDZ"
	// column name
	JjVehicleSelectColumnOther JjVehicleSelectColumn = "OTHER"
	// column name
	JjVehicleSelectColumnQzbfqz JjVehicleSelectColumn = "QZBFQZ"
	// column name
	JjVehicleSelectColumnSjhm JjVehicleSelectColumn = "SJHM"
	// column name
	JjVehicleSelectColumnSyr JjVehicleSelectColumn = "SYR"
	// column name
	JjVehicleSelectColumnSyxz JjVehicleSelectColumn = "SYXZ"
	// column name
	JjVehicleSelectColumnUpdatetime JjVehicleSelectColumn = "UPDATETIME"
	// column name
	JjVehicleSelectColumnVehmontype JjVehicleSelectColumn = "VEHMONTYPE"
	// column name
	JjVehicleSelectColumnXh JjVehicleSelectColumn = "XH"
	// column name
	JjVehicleSelectColumnYxqz JjVehicleSelectColumn = "YXQZ"
	// column name
	JjVehicleSelectColumnZt JjVehicleSelectColumn = "ZT"
	// column name
	JjVehicleSelectColumnZzl JjVehicleSelectColumn = "ZZL"
	// column name
	JjVehicleSelectColumnID JjVehicleSelectColumn = "id"
	// column name
	JjVehicleSelectColumnVehicleID JjVehicleSelectColumn = "vehicle_id"
)

var AllJjVehicleSelectColumn = []JjVehicleSelectColumn{
	JjVehicleSelectColumnCcdjrq,
	JjVehicleSelectColumnCllx,
	JjVehicleSelectColumnClsbdh,
	JjVehicleSelectColumnCounty,
	JjVehicleSelectColumnDjrq,
	JjVehicleSelectColumnFprq,
	JjVehicleSelectColumnGxrq,
	JjVehicleSelectColumnHphm,
	JjVehicleSelectColumnHpzl,
	JjVehicleSelectColumnIsDeteled,
	JjVehicleSelectColumnLxdh,
	JjVehicleSelectColumnLxdz,
	JjVehicleSelectColumnOther,
	JjVehicleSelectColumnQzbfqz,
	JjVehicleSelectColumnSjhm,
	JjVehicleSelectColumnSyr,
	JjVehicleSelectColumnSyxz,
	JjVehicleSelectColumnUpdatetime,
	JjVehicleSelectColumnVehmontype,
	JjVehicleSelectColumnXh,
	JjVehicleSelectColumnYxqz,
	JjVehicleSelectColumnZt,
	JjVehicleSelectColumnZzl,
	JjVehicleSelectColumnID,
	JjVehicleSelectColumnVehicleID,
}

func (e JjVehicleSelectColumn) IsValid() bool {
	switch e {
	case JjVehicleSelectColumnCcdjrq, JjVehicleSelectColumnCllx, JjVehicleSelectColumnClsbdh, JjVehicleSelectColumnCounty, JjVehicleSelectColumnDjrq, JjVehicleSelectColumnFprq, JjVehicleSelectColumnGxrq, JjVehicleSelectColumnHphm, JjVehicleSelectColumnHpzl, JjVehicleSelectColumnIsDeteled, JjVehicleSelectColumnLxdh, JjVehicleSelectColumnLxdz, JjVehicleSelectColumnOther, JjVehicleSelectColumnQzbfqz, JjVehicleSelectColumnSjhm, JjVehicleSelectColumnSyr, JjVehicleSelectColumnSyxz, JjVehicleSelectColumnUpdatetime, JjVehicleSelectColumnVehmontype, JjVehicleSelectColumnXh, JjVehicleSelectColumnYxqz, JjVehicleSelectColumnZt, JjVehicleSelectColumnZzl, JjVehicleSelectColumnID, JjVehicleSelectColumnVehicleID:
		return true
	}
	return false
}

func (e JjVehicleSelectColumn) String() string {
	return string(e)
}

func (e *JjVehicleSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = JjVehicleSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid JJ_VEHICLE_select_column", str)
	}
	return nil
}

func (e JjVehicleSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// update columns of table "JJ_VEHICLE"
type JjVehicleUpdateColumn string

const (
	// column name
	JjVehicleUpdateColumnCcdjrq JjVehicleUpdateColumn = "CCDJRQ"
	// column name
	JjVehicleUpdateColumnCllx JjVehicleUpdateColumn = "CLLX"
	// column name
	JjVehicleUpdateColumnClsbdh JjVehicleUpdateColumn = "CLSBDH"
	// column name
	JjVehicleUpdateColumnCounty JjVehicleUpdateColumn = "COUNTY"
	// column name
	JjVehicleUpdateColumnDjrq JjVehicleUpdateColumn = "DJRQ"
	// column name
	JjVehicleUpdateColumnFprq JjVehicleUpdateColumn = "FPRQ"
	// column name
	JjVehicleUpdateColumnGxrq JjVehicleUpdateColumn = "GXRQ"
	// column name
	JjVehicleUpdateColumnHphm JjVehicleUpdateColumn = "HPHM"
	// column name
	JjVehicleUpdateColumnHpzl JjVehicleUpdateColumn = "HPZL"
	// column name
	JjVehicleUpdateColumnIsDeteled JjVehicleUpdateColumn = "IS_DETELED"
	// column name
	JjVehicleUpdateColumnLxdh JjVehicleUpdateColumn = "LXDH"
	// column name
	JjVehicleUpdateColumnLxdz JjVehicleUpdateColumn = "LXDZ"
	// column name
	JjVehicleUpdateColumnOther JjVehicleUpdateColumn = "OTHER"
	// column name
	JjVehicleUpdateColumnQzbfqz JjVehicleUpdateColumn = "QZBFQZ"
	// column name
	JjVehicleUpdateColumnSjhm JjVehicleUpdateColumn = "SJHM"
	// column name
	JjVehicleUpdateColumnSyr JjVehicleUpdateColumn = "SYR"
	// column name
	JjVehicleUpdateColumnSyxz JjVehicleUpdateColumn = "SYXZ"
	// column name
	JjVehicleUpdateColumnUpdatetime JjVehicleUpdateColumn = "UPDATETIME"
	// column name
	JjVehicleUpdateColumnVehmontype JjVehicleUpdateColumn = "VEHMONTYPE"
	// column name
	JjVehicleUpdateColumnXh JjVehicleUpdateColumn = "XH"
	// column name
	JjVehicleUpdateColumnYxqz JjVehicleUpdateColumn = "YXQZ"
	// column name
	JjVehicleUpdateColumnZt JjVehicleUpdateColumn = "ZT"
	// column name
	JjVehicleUpdateColumnZzl JjVehicleUpdateColumn = "ZZL"
	// column name
	JjVehicleUpdateColumnID JjVehicleUpdateColumn = "id"
	// column name
	JjVehicleUpdateColumnVehicleID JjVehicleUpdateColumn = "vehicle_id"
)

var AllJjVehicleUpdateColumn = []JjVehicleUpdateColumn{
	JjVehicleUpdateColumnCcdjrq,
	JjVehicleUpdateColumnCllx,
	JjVehicleUpdateColumnClsbdh,
	JjVehicleUpdateColumnCounty,
	JjVehicleUpdateColumnDjrq,
	JjVehicleUpdateColumnFprq,
	JjVehicleUpdateColumnGxrq,
	JjVehicleUpdateColumnHphm,
	JjVehicleUpdateColumnHpzl,
	JjVehicleUpdateColumnIsDeteled,
	JjVehicleUpdateColumnLxdh,
	JjVehicleUpdateColumnLxdz,
	JjVehicleUpdateColumnOther,
	JjVehicleUpdateColumnQzbfqz,
	JjVehicleUpdateColumnSjhm,
	JjVehicleUpdateColumnSyr,
	JjVehicleUpdateColumnSyxz,
	JjVehicleUpdateColumnUpdatetime,
	JjVehicleUpdateColumnVehmontype,
	JjVehicleUpdateColumnXh,
	JjVehicleUpdateColumnYxqz,
	JjVehicleUpdateColumnZt,
	JjVehicleUpdateColumnZzl,
	JjVehicleUpdateColumnID,
	JjVehicleUpdateColumnVehicleID,
}

func (e JjVehicleUpdateColumn) IsValid() bool {
	switch e {
	case JjVehicleUpdateColumnCcdjrq, JjVehicleUpdateColumnCllx, JjVehicleUpdateColumnClsbdh, JjVehicleUpdateColumnCounty, JjVehicleUpdateColumnDjrq, JjVehicleUpdateColumnFprq, JjVehicleUpdateColumnGxrq, JjVehicleUpdateColumnHphm, JjVehicleUpdateColumnHpzl, JjVehicleUpdateColumnIsDeteled, JjVehicleUpdateColumnLxdh, JjVehicleUpdateColumnLxdz, JjVehicleUpdateColumnOther, JjVehicleUpdateColumnQzbfqz, JjVehicleUpdateColumnSjhm, JjVehicleUpdateColumnSyr, JjVehicleUpdateColumnSyxz, JjVehicleUpdateColumnUpdatetime, JjVehicleUpdateColumnVehmontype, JjVehicleUpdateColumnXh, JjVehicleUpdateColumnYxqz, JjVehicleUpdateColumnZt, JjVehicleUpdateColumnZzl, JjVehicleUpdateColumnID, JjVehicleUpdateColumnVehicleID:
		return true
	}
	return false
}

func (e JjVehicleUpdateColumn) String() string {
	return string(e)
}

func (e *JjVehicleUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = JjVehicleUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid JJ_VEHICLE_update_column", str)
	}
	return nil
}

func (e JjVehicleUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// unique or primary key constraints on table "muck_truck_category_info"
type MuckTruckCategoryInfoConstraint string

const (
	// unique or primary key constraint
	MuckTruckCategoryInfoConstraintMuckTruckCategoryInfoPkey MuckTruckCategoryInfoConstraint = "muck_truck_category_info_pkey"
)

var AllMuckTruckCategoryInfoConstraint = []MuckTruckCategoryInfoConstraint{
	MuckTruckCategoryInfoConstraintMuckTruckCategoryInfoPkey,
}

func (e MuckTruckCategoryInfoConstraint) IsValid() bool {
	switch e {
	case MuckTruckCategoryInfoConstraintMuckTruckCategoryInfoPkey:
		return true
	}
	return false
}

func (e MuckTruckCategoryInfoConstraint) String() string {
	return string(e)
}

func (e *MuckTruckCategoryInfoConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MuckTruckCategoryInfoConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid muck_truck_category_info_constraint", str)
	}
	return nil
}

func (e MuckTruckCategoryInfoConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// select columns of table "muck_truck_category_info"
type MuckTruckCategoryInfoSelectColumn string

const (
	// column name
	MuckTruckCategoryInfoSelectColumnActualOwnerContactPhone MuckTruckCategoryInfoSelectColumn = "actual_owner_contact_phone"
	// column name
	MuckTruckCategoryInfoSelectColumnActualOwnerIDNumber MuckTruckCategoryInfoSelectColumn = "actual_owner_id_number"
	// column name
	MuckTruckCategoryInfoSelectColumnActualOwnerIDPhoto MuckTruckCategoryInfoSelectColumn = "actual_owner_id_photo"
	// column name
	MuckTruckCategoryInfoSelectColumnActualOwnerName MuckTruckCategoryInfoSelectColumn = "actual_owner_name"
	// column name
	MuckTruckCategoryInfoSelectColumnAnnualInspectionExpirationTime MuckTruckCategoryInfoSelectColumn = "annual_inspection_expiration_time"
	// column name
	MuckTruckCategoryInfoSelectColumnApplyInspectionTime MuckTruckCategoryInfoSelectColumn = "apply_inspection_time"
	// column name
	MuckTruckCategoryInfoSelectColumnAxesNumber MuckTruckCategoryInfoSelectColumn = "axes_number"
	// column name
	MuckTruckCategoryInfoSelectColumnBlacklistDeadline MuckTruckCategoryInfoSelectColumn = "blacklist_deadline"
	// column name
	MuckTruckCategoryInfoSelectColumnCompulsoryInsurancePolicyPicture MuckTruckCategoryInfoSelectColumn = "compulsory_insurance_policy_picture"
	// column name
	MuckTruckCategoryInfoSelectColumnCreateAt MuckTruckCategoryInfoSelectColumn = "create_at"
	// column name
	MuckTruckCategoryInfoSelectColumnCreateBy MuckTruckCategoryInfoSelectColumn = "create_by"
	// column name
	MuckTruckCategoryInfoSelectColumnDeleteAt MuckTruckCategoryInfoSelectColumn = "delete_at"
	// column name
	MuckTruckCategoryInfoSelectColumnDeleteBy MuckTruckCategoryInfoSelectColumn = "delete_by"
	// column name
	MuckTruckCategoryInfoSelectColumnDrivingLicenseContactPhone MuckTruckCategoryInfoSelectColumn = "driving_license_contact_phone"
	// column name
	MuckTruckCategoryInfoSelectColumnDrivingLicenseIDNumber MuckTruckCategoryInfoSelectColumn = "driving_license_id_number"
	// column name
	MuckTruckCategoryInfoSelectColumnDrivingLiscenseOwnerIDPhoto MuckTruckCategoryInfoSelectColumn = "driving_liscense_owner_id_photo"
	// column name
	MuckTruckCategoryInfoSelectColumnEngineNumber MuckTruckCategoryInfoSelectColumn = "engine_number"
	// column name
	MuckTruckCategoryInfoSelectColumnID MuckTruckCategoryInfoSelectColumn = "id"
	// column name
	MuckTruckCategoryInfoSelectColumnIllegalNoticeNumberEndorsement MuckTruckCategoryInfoSelectColumn = "illegal_notice_number_endorsement"
	// column name
	MuckTruckCategoryInfoSelectColumnIllegalNumberEndorsement MuckTruckCategoryInfoSelectColumn = "illegal_number_endorsement"
	// column name
	MuckTruckCategoryInfoSelectColumnIncidentNumberEndorsement MuckTruckCategoryInfoSelectColumn = "incident_number_endorsement"
	// column name
	MuckTruckCategoryInfoSelectColumnInitialRegistrationDate MuckTruckCategoryInfoSelectColumn = "initial_registration_date"
	// column name
	MuckTruckCategoryInfoSelectColumnInsuranceExpiryTime MuckTruckCategoryInfoSelectColumn = "insurance_expiry_time"
	// column name
	MuckTruckCategoryInfoSelectColumnIsBlacklist MuckTruckCategoryInfoSelectColumn = "is_blacklist"
	// column name
	MuckTruckCategoryInfoSelectColumnIsDelete MuckTruckCategoryInfoSelectColumn = "is_delete"
	// column name
	MuckTruckCategoryInfoSelectColumnIsDueSecurityAlarmProcessing MuckTruckCategoryInfoSelectColumn = "is_due_security_alarm_processing"
	// column name
	MuckTruckCategoryInfoSelectColumnIsFirstRegister MuckTruckCategoryInfoSelectColumn = "is_first_register"
	// column name
	MuckTruckCategoryInfoSelectColumnIsMuckOfficeAudit MuckTruckCategoryInfoSelectColumn = "is_muck_office_audit"
	// column name
	MuckTruckCategoryInfoSelectColumnIsSendSms MuckTruckCategoryInfoSelectColumn = "is_send_sms"
	// column name
	MuckTruckCategoryInfoSelectColumnIssueDateOfQuangongNumber MuckTruckCategoryInfoSelectColumn = "issue_date_of_quangong_number"
	// column name
	MuckTruckCategoryInfoSelectColumnOwnerIDPhoto MuckTruckCategoryInfoSelectColumn = "owner_id_photo"
	// column name
	MuckTruckCategoryInfoSelectColumnProcessingNotes MuckTruckCategoryInfoSelectColumn = "processing_notes"
	// column name
	MuckTruckCategoryInfoSelectColumnProcessingTime MuckTruckCategoryInfoSelectColumn = "processing_time"
	// column name
	MuckTruckCategoryInfoSelectColumnProcessor MuckTruckCategoryInfoSelectColumn = "processor"
	// column name
	MuckTruckCategoryInfoSelectColumnReviewNotes MuckTruckCategoryInfoSelectColumn = "review_notes"
	// column name
	MuckTruckCategoryInfoSelectColumnReviewStatus MuckTruckCategoryInfoSelectColumn = "review_status"
	// column name
	MuckTruckCategoryInfoSelectColumnReviewTime MuckTruckCategoryInfoSelectColumn = "review_time"
	// column name
	MuckTruckCategoryInfoSelectColumnReviewer MuckTruckCategoryInfoSelectColumn = "reviewer"
	// column name
	MuckTruckCategoryInfoSelectColumnSecondaryMaintenanceExpiryDate MuckTruckCategoryInfoSelectColumn = "secondary_maintenance_expiry_date"
	// column name
	MuckTruckCategoryInfoSelectColumnSecondaryMaintenanceLocation MuckTruckCategoryInfoSelectColumn = "secondary_maintenance_location"
	// column name
	MuckTruckCategoryInfoSelectColumnSigningAcceptanceApplicationTime MuckTruckCategoryInfoSelectColumn = "signing_acceptance_application_time"
	// column name
	MuckTruckCategoryInfoSelectColumnThirdPartyInsuranceCoverage MuckTruckCategoryInfoSelectColumn = "third_party_insurance_coverage"
	// column name
	MuckTruckCategoryInfoSelectColumnThirdPartyInsuranceExpiryTime MuckTruckCategoryInfoSelectColumn = "third_party_insurance_expiry_time"
	// column name
	MuckTruckCategoryInfoSelectColumnThirdPartyInsurancePolicyPicture MuckTruckCategoryInfoSelectColumn = "third_party_insurance_policy_picture"
	// column name
	MuckTruckCategoryInfoSelectColumnTotalMass MuckTruckCategoryInfoSelectColumn = "total_mass"
	// column name
	MuckTruckCategoryInfoSelectColumnUpdateAt MuckTruckCategoryInfoSelectColumn = "update_at"
	// column name
	MuckTruckCategoryInfoSelectColumnUpdateBy MuckTruckCategoryInfoSelectColumn = "update_by"
	// column name
	MuckTruckCategoryInfoSelectColumnVehicleDescription MuckTruckCategoryInfoSelectColumn = "vehicle_description"
	// column name
	MuckTruckCategoryInfoSelectColumnVehicleID MuckTruckCategoryInfoSelectColumn = "vehicle_id"
	// column name
	MuckTruckCategoryInfoSelectColumnVehicleNature MuckTruckCategoryInfoSelectColumn = "vehicle_nature"
	// column name
	MuckTruckCategoryInfoSelectColumnVehicleOperatingCertificateNumber MuckTruckCategoryInfoSelectColumn = "vehicle_operating_certificate_number"
	// column name
	MuckTruckCategoryInfoSelectColumnVehicleOperatingCertificatePhoto MuckTruckCategoryInfoSelectColumn = "vehicle_operating_certificate_photo"
	// column name
	MuckTruckCategoryInfoSelectColumnVehiclePicture MuckTruckCategoryInfoSelectColumn = "vehicle_picture"
)

var AllMuckTruckCategoryInfoSelectColumn = []MuckTruckCategoryInfoSelectColumn{
	MuckTruckCategoryInfoSelectColumnActualOwnerContactPhone,
	MuckTruckCategoryInfoSelectColumnActualOwnerIDNumber,
	MuckTruckCategoryInfoSelectColumnActualOwnerIDPhoto,
	MuckTruckCategoryInfoSelectColumnActualOwnerName,
	MuckTruckCategoryInfoSelectColumnAnnualInspectionExpirationTime,
	MuckTruckCategoryInfoSelectColumnApplyInspectionTime,
	MuckTruckCategoryInfoSelectColumnAxesNumber,
	MuckTruckCategoryInfoSelectColumnBlacklistDeadline,
	MuckTruckCategoryInfoSelectColumnCompulsoryInsurancePolicyPicture,
	MuckTruckCategoryInfoSelectColumnCreateAt,
	MuckTruckCategoryInfoSelectColumnCreateBy,
	MuckTruckCategoryInfoSelectColumnDeleteAt,
	MuckTruckCategoryInfoSelectColumnDeleteBy,
	MuckTruckCategoryInfoSelectColumnDrivingLicenseContactPhone,
	MuckTruckCategoryInfoSelectColumnDrivingLicenseIDNumber,
	MuckTruckCategoryInfoSelectColumnDrivingLiscenseOwnerIDPhoto,
	MuckTruckCategoryInfoSelectColumnEngineNumber,
	MuckTruckCategoryInfoSelectColumnID,
	MuckTruckCategoryInfoSelectColumnIllegalNoticeNumberEndorsement,
	MuckTruckCategoryInfoSelectColumnIllegalNumberEndorsement,
	MuckTruckCategoryInfoSelectColumnIncidentNumberEndorsement,
	MuckTruckCategoryInfoSelectColumnInitialRegistrationDate,
	MuckTruckCategoryInfoSelectColumnInsuranceExpiryTime,
	MuckTruckCategoryInfoSelectColumnIsBlacklist,
	MuckTruckCategoryInfoSelectColumnIsDelete,
	MuckTruckCategoryInfoSelectColumnIsDueSecurityAlarmProcessing,
	MuckTruckCategoryInfoSelectColumnIsFirstRegister,
	MuckTruckCategoryInfoSelectColumnIsMuckOfficeAudit,
	MuckTruckCategoryInfoSelectColumnIsSendSms,
	MuckTruckCategoryInfoSelectColumnIssueDateOfQuangongNumber,
	MuckTruckCategoryInfoSelectColumnOwnerIDPhoto,
	MuckTruckCategoryInfoSelectColumnProcessingNotes,
	MuckTruckCategoryInfoSelectColumnProcessingTime,
	MuckTruckCategoryInfoSelectColumnProcessor,
	MuckTruckCategoryInfoSelectColumnReviewNotes,
	MuckTruckCategoryInfoSelectColumnReviewStatus,
	MuckTruckCategoryInfoSelectColumnReviewTime,
	MuckTruckCategoryInfoSelectColumnReviewer,
	MuckTruckCategoryInfoSelectColumnSecondaryMaintenanceExpiryDate,
	MuckTruckCategoryInfoSelectColumnSecondaryMaintenanceLocation,
	MuckTruckCategoryInfoSelectColumnSigningAcceptanceApplicationTime,
	MuckTruckCategoryInfoSelectColumnThirdPartyInsuranceCoverage,
	MuckTruckCategoryInfoSelectColumnThirdPartyInsuranceExpiryTime,
	MuckTruckCategoryInfoSelectColumnThirdPartyInsurancePolicyPicture,
	MuckTruckCategoryInfoSelectColumnTotalMass,
	MuckTruckCategoryInfoSelectColumnUpdateAt,
	MuckTruckCategoryInfoSelectColumnUpdateBy,
	MuckTruckCategoryInfoSelectColumnVehicleDescription,
	MuckTruckCategoryInfoSelectColumnVehicleID,
	MuckTruckCategoryInfoSelectColumnVehicleNature,
	MuckTruckCategoryInfoSelectColumnVehicleOperatingCertificateNumber,
	MuckTruckCategoryInfoSelectColumnVehicleOperatingCertificatePhoto,
	MuckTruckCategoryInfoSelectColumnVehiclePicture,
}

func (e MuckTruckCategoryInfoSelectColumn) IsValid() bool {
	switch e {
	case MuckTruckCategoryInfoSelectColumnActualOwnerContactPhone, MuckTruckCategoryInfoSelectColumnActualOwnerIDNumber, MuckTruckCategoryInfoSelectColumnActualOwnerIDPhoto, MuckTruckCategoryInfoSelectColumnActualOwnerName, MuckTruckCategoryInfoSelectColumnAnnualInspectionExpirationTime, MuckTruckCategoryInfoSelectColumnApplyInspectionTime, MuckTruckCategoryInfoSelectColumnAxesNumber, MuckTruckCategoryInfoSelectColumnBlacklistDeadline, MuckTruckCategoryInfoSelectColumnCompulsoryInsurancePolicyPicture, MuckTruckCategoryInfoSelectColumnCreateAt, MuckTruckCategoryInfoSelectColumnCreateBy, MuckTruckCategoryInfoSelectColumnDeleteAt, MuckTruckCategoryInfoSelectColumnDeleteBy, MuckTruckCategoryInfoSelectColumnDrivingLicenseContactPhone, MuckTruckCategoryInfoSelectColumnDrivingLicenseIDNumber, MuckTruckCategoryInfoSelectColumnDrivingLiscenseOwnerIDPhoto, MuckTruckCategoryInfoSelectColumnEngineNumber, MuckTruckCategoryInfoSelectColumnID, MuckTruckCategoryInfoSelectColumnIllegalNoticeNumberEndorsement, MuckTruckCategoryInfoSelectColumnIllegalNumberEndorsement, MuckTruckCategoryInfoSelectColumnIncidentNumberEndorsement, MuckTruckCategoryInfoSelectColumnInitialRegistrationDate, MuckTruckCategoryInfoSelectColumnInsuranceExpiryTime, MuckTruckCategoryInfoSelectColumnIsBlacklist, MuckTruckCategoryInfoSelectColumnIsDelete, MuckTruckCategoryInfoSelectColumnIsDueSecurityAlarmProcessing, MuckTruckCategoryInfoSelectColumnIsFirstRegister, MuckTruckCategoryInfoSelectColumnIsMuckOfficeAudit, MuckTruckCategoryInfoSelectColumnIsSendSms, MuckTruckCategoryInfoSelectColumnIssueDateOfQuangongNumber, MuckTruckCategoryInfoSelectColumnOwnerIDPhoto, MuckTruckCategoryInfoSelectColumnProcessingNotes, MuckTruckCategoryInfoSelectColumnProcessingTime, MuckTruckCategoryInfoSelectColumnProcessor, MuckTruckCategoryInfoSelectColumnReviewNotes, MuckTruckCategoryInfoSelectColumnReviewStatus, MuckTruckCategoryInfoSelectColumnReviewTime, MuckTruckCategoryInfoSelectColumnReviewer, MuckTruckCategoryInfoSelectColumnSecondaryMaintenanceExpiryDate, MuckTruckCategoryInfoSelectColumnSecondaryMaintenanceLocation, MuckTruckCategoryInfoSelectColumnSigningAcceptanceApplicationTime, MuckTruckCategoryInfoSelectColumnThirdPartyInsuranceCoverage, MuckTruckCategoryInfoSelectColumnThirdPartyInsuranceExpiryTime, MuckTruckCategoryInfoSelectColumnThirdPartyInsurancePolicyPicture, MuckTruckCategoryInfoSelectColumnTotalMass, MuckTruckCategoryInfoSelectColumnUpdateAt, MuckTruckCategoryInfoSelectColumnUpdateBy, MuckTruckCategoryInfoSelectColumnVehicleDescription, MuckTruckCategoryInfoSelectColumnVehicleID, MuckTruckCategoryInfoSelectColumnVehicleNature, MuckTruckCategoryInfoSelectColumnVehicleOperatingCertificateNumber, MuckTruckCategoryInfoSelectColumnVehicleOperatingCertificatePhoto, MuckTruckCategoryInfoSelectColumnVehiclePicture:
		return true
	}
	return false
}

func (e MuckTruckCategoryInfoSelectColumn) String() string {
	return string(e)
}

func (e *MuckTruckCategoryInfoSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MuckTruckCategoryInfoSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid muck_truck_category_info_select_column", str)
	}
	return nil
}

func (e MuckTruckCategoryInfoSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// update columns of table "muck_truck_category_info"
type MuckTruckCategoryInfoUpdateColumn string

const (
	// column name
	MuckTruckCategoryInfoUpdateColumnActualOwnerContactPhone MuckTruckCategoryInfoUpdateColumn = "actual_owner_contact_phone"
	// column name
	MuckTruckCategoryInfoUpdateColumnActualOwnerIDNumber MuckTruckCategoryInfoUpdateColumn = "actual_owner_id_number"
	// column name
	MuckTruckCategoryInfoUpdateColumnActualOwnerIDPhoto MuckTruckCategoryInfoUpdateColumn = "actual_owner_id_photo"
	// column name
	MuckTruckCategoryInfoUpdateColumnActualOwnerName MuckTruckCategoryInfoUpdateColumn = "actual_owner_name"
	// column name
	MuckTruckCategoryInfoUpdateColumnAnnualInspectionExpirationTime MuckTruckCategoryInfoUpdateColumn = "annual_inspection_expiration_time"
	// column name
	MuckTruckCategoryInfoUpdateColumnApplyInspectionTime MuckTruckCategoryInfoUpdateColumn = "apply_inspection_time"
	// column name
	MuckTruckCategoryInfoUpdateColumnAxesNumber MuckTruckCategoryInfoUpdateColumn = "axes_number"
	// column name
	MuckTruckCategoryInfoUpdateColumnBlacklistDeadline MuckTruckCategoryInfoUpdateColumn = "blacklist_deadline"
	// column name
	MuckTruckCategoryInfoUpdateColumnCompulsoryInsurancePolicyPicture MuckTruckCategoryInfoUpdateColumn = "compulsory_insurance_policy_picture"
	// column name
	MuckTruckCategoryInfoUpdateColumnCreateAt MuckTruckCategoryInfoUpdateColumn = "create_at"
	// column name
	MuckTruckCategoryInfoUpdateColumnCreateBy MuckTruckCategoryInfoUpdateColumn = "create_by"
	// column name
	MuckTruckCategoryInfoUpdateColumnDeleteAt MuckTruckCategoryInfoUpdateColumn = "delete_at"
	// column name
	MuckTruckCategoryInfoUpdateColumnDeleteBy MuckTruckCategoryInfoUpdateColumn = "delete_by"
	// column name
	MuckTruckCategoryInfoUpdateColumnDrivingLicenseContactPhone MuckTruckCategoryInfoUpdateColumn = "driving_license_contact_phone"
	// column name
	MuckTruckCategoryInfoUpdateColumnDrivingLicenseIDNumber MuckTruckCategoryInfoUpdateColumn = "driving_license_id_number"
	// column name
	MuckTruckCategoryInfoUpdateColumnDrivingLiscenseOwnerIDPhoto MuckTruckCategoryInfoUpdateColumn = "driving_liscense_owner_id_photo"
	// column name
	MuckTruckCategoryInfoUpdateColumnEngineNumber MuckTruckCategoryInfoUpdateColumn = "engine_number"
	// column name
	MuckTruckCategoryInfoUpdateColumnID MuckTruckCategoryInfoUpdateColumn = "id"
	// column name
	MuckTruckCategoryInfoUpdateColumnIllegalNoticeNumberEndorsement MuckTruckCategoryInfoUpdateColumn = "illegal_notice_number_endorsement"
	// column name
	MuckTruckCategoryInfoUpdateColumnIllegalNumberEndorsement MuckTruckCategoryInfoUpdateColumn = "illegal_number_endorsement"
	// column name
	MuckTruckCategoryInfoUpdateColumnIncidentNumberEndorsement MuckTruckCategoryInfoUpdateColumn = "incident_number_endorsement"
	// column name
	MuckTruckCategoryInfoUpdateColumnInitialRegistrationDate MuckTruckCategoryInfoUpdateColumn = "initial_registration_date"
	// column name
	MuckTruckCategoryInfoUpdateColumnInsuranceExpiryTime MuckTruckCategoryInfoUpdateColumn = "insurance_expiry_time"
	// column name
	MuckTruckCategoryInfoUpdateColumnIsBlacklist MuckTruckCategoryInfoUpdateColumn = "is_blacklist"
	// column name
	MuckTruckCategoryInfoUpdateColumnIsDelete MuckTruckCategoryInfoUpdateColumn = "is_delete"
	// column name
	MuckTruckCategoryInfoUpdateColumnIsDueSecurityAlarmProcessing MuckTruckCategoryInfoUpdateColumn = "is_due_security_alarm_processing"
	// column name
	MuckTruckCategoryInfoUpdateColumnIsFirstRegister MuckTruckCategoryInfoUpdateColumn = "is_first_register"
	// column name
	MuckTruckCategoryInfoUpdateColumnIsMuckOfficeAudit MuckTruckCategoryInfoUpdateColumn = "is_muck_office_audit"
	// column name
	MuckTruckCategoryInfoUpdateColumnIsSendSms MuckTruckCategoryInfoUpdateColumn = "is_send_sms"
	// column name
	MuckTruckCategoryInfoUpdateColumnIssueDateOfQuangongNumber MuckTruckCategoryInfoUpdateColumn = "issue_date_of_quangong_number"
	// column name
	MuckTruckCategoryInfoUpdateColumnOwnerIDPhoto MuckTruckCategoryInfoUpdateColumn = "owner_id_photo"
	// column name
	MuckTruckCategoryInfoUpdateColumnProcessingNotes MuckTruckCategoryInfoUpdateColumn = "processing_notes"
	// column name
	MuckTruckCategoryInfoUpdateColumnProcessingTime MuckTruckCategoryInfoUpdateColumn = "processing_time"
	// column name
	MuckTruckCategoryInfoUpdateColumnProcessor MuckTruckCategoryInfoUpdateColumn = "processor"
	// column name
	MuckTruckCategoryInfoUpdateColumnReviewNotes MuckTruckCategoryInfoUpdateColumn = "review_notes"
	// column name
	MuckTruckCategoryInfoUpdateColumnReviewStatus MuckTruckCategoryInfoUpdateColumn = "review_status"
	// column name
	MuckTruckCategoryInfoUpdateColumnReviewTime MuckTruckCategoryInfoUpdateColumn = "review_time"
	// column name
	MuckTruckCategoryInfoUpdateColumnReviewer MuckTruckCategoryInfoUpdateColumn = "reviewer"
	// column name
	MuckTruckCategoryInfoUpdateColumnSecondaryMaintenanceExpiryDate MuckTruckCategoryInfoUpdateColumn = "secondary_maintenance_expiry_date"
	// column name
	MuckTruckCategoryInfoUpdateColumnSecondaryMaintenanceLocation MuckTruckCategoryInfoUpdateColumn = "secondary_maintenance_location"
	// column name
	MuckTruckCategoryInfoUpdateColumnSigningAcceptanceApplicationTime MuckTruckCategoryInfoUpdateColumn = "signing_acceptance_application_time"
	// column name
	MuckTruckCategoryInfoUpdateColumnThirdPartyInsuranceCoverage MuckTruckCategoryInfoUpdateColumn = "third_party_insurance_coverage"
	// column name
	MuckTruckCategoryInfoUpdateColumnThirdPartyInsuranceExpiryTime MuckTruckCategoryInfoUpdateColumn = "third_party_insurance_expiry_time"
	// column name
	MuckTruckCategoryInfoUpdateColumnThirdPartyInsurancePolicyPicture MuckTruckCategoryInfoUpdateColumn = "third_party_insurance_policy_picture"
	// column name
	MuckTruckCategoryInfoUpdateColumnTotalMass MuckTruckCategoryInfoUpdateColumn = "total_mass"
	// column name
	MuckTruckCategoryInfoUpdateColumnUpdateAt MuckTruckCategoryInfoUpdateColumn = "update_at"
	// column name
	MuckTruckCategoryInfoUpdateColumnUpdateBy MuckTruckCategoryInfoUpdateColumn = "update_by"
	// column name
	MuckTruckCategoryInfoUpdateColumnVehicleDescription MuckTruckCategoryInfoUpdateColumn = "vehicle_description"
	// column name
	MuckTruckCategoryInfoUpdateColumnVehicleID MuckTruckCategoryInfoUpdateColumn = "vehicle_id"
	// column name
	MuckTruckCategoryInfoUpdateColumnVehicleNature MuckTruckCategoryInfoUpdateColumn = "vehicle_nature"
	// column name
	MuckTruckCategoryInfoUpdateColumnVehicleOperatingCertificateNumber MuckTruckCategoryInfoUpdateColumn = "vehicle_operating_certificate_number"
	// column name
	MuckTruckCategoryInfoUpdateColumnVehicleOperatingCertificatePhoto MuckTruckCategoryInfoUpdateColumn = "vehicle_operating_certificate_photo"
	// column name
	MuckTruckCategoryInfoUpdateColumnVehiclePicture MuckTruckCategoryInfoUpdateColumn = "vehicle_picture"
)

var AllMuckTruckCategoryInfoUpdateColumn = []MuckTruckCategoryInfoUpdateColumn{
	MuckTruckCategoryInfoUpdateColumnActualOwnerContactPhone,
	MuckTruckCategoryInfoUpdateColumnActualOwnerIDNumber,
	MuckTruckCategoryInfoUpdateColumnActualOwnerIDPhoto,
	MuckTruckCategoryInfoUpdateColumnActualOwnerName,
	MuckTruckCategoryInfoUpdateColumnAnnualInspectionExpirationTime,
	MuckTruckCategoryInfoUpdateColumnApplyInspectionTime,
	MuckTruckCategoryInfoUpdateColumnAxesNumber,
	MuckTruckCategoryInfoUpdateColumnBlacklistDeadline,
	MuckTruckCategoryInfoUpdateColumnCompulsoryInsurancePolicyPicture,
	MuckTruckCategoryInfoUpdateColumnCreateAt,
	MuckTruckCategoryInfoUpdateColumnCreateBy,
	MuckTruckCategoryInfoUpdateColumnDeleteAt,
	MuckTruckCategoryInfoUpdateColumnDeleteBy,
	MuckTruckCategoryInfoUpdateColumnDrivingLicenseContactPhone,
	MuckTruckCategoryInfoUpdateColumnDrivingLicenseIDNumber,
	MuckTruckCategoryInfoUpdateColumnDrivingLiscenseOwnerIDPhoto,
	MuckTruckCategoryInfoUpdateColumnEngineNumber,
	MuckTruckCategoryInfoUpdateColumnID,
	MuckTruckCategoryInfoUpdateColumnIllegalNoticeNumberEndorsement,
	MuckTruckCategoryInfoUpdateColumnIllegalNumberEndorsement,
	MuckTruckCategoryInfoUpdateColumnIncidentNumberEndorsement,
	MuckTruckCategoryInfoUpdateColumnInitialRegistrationDate,
	MuckTruckCategoryInfoUpdateColumnInsuranceExpiryTime,
	MuckTruckCategoryInfoUpdateColumnIsBlacklist,
	MuckTruckCategoryInfoUpdateColumnIsDelete,
	MuckTruckCategoryInfoUpdateColumnIsDueSecurityAlarmProcessing,
	MuckTruckCategoryInfoUpdateColumnIsFirstRegister,
	MuckTruckCategoryInfoUpdateColumnIsMuckOfficeAudit,
	MuckTruckCategoryInfoUpdateColumnIsSendSms,
	MuckTruckCategoryInfoUpdateColumnIssueDateOfQuangongNumber,
	MuckTruckCategoryInfoUpdateColumnOwnerIDPhoto,
	MuckTruckCategoryInfoUpdateColumnProcessingNotes,
	MuckTruckCategoryInfoUpdateColumnProcessingTime,
	MuckTruckCategoryInfoUpdateColumnProcessor,
	MuckTruckCategoryInfoUpdateColumnReviewNotes,
	MuckTruckCategoryInfoUpdateColumnReviewStatus,
	MuckTruckCategoryInfoUpdateColumnReviewTime,
	MuckTruckCategoryInfoUpdateColumnReviewer,
	MuckTruckCategoryInfoUpdateColumnSecondaryMaintenanceExpiryDate,
	MuckTruckCategoryInfoUpdateColumnSecondaryMaintenanceLocation,
	MuckTruckCategoryInfoUpdateColumnSigningAcceptanceApplicationTime,
	MuckTruckCategoryInfoUpdateColumnThirdPartyInsuranceCoverage,
	MuckTruckCategoryInfoUpdateColumnThirdPartyInsuranceExpiryTime,
	MuckTruckCategoryInfoUpdateColumnThirdPartyInsurancePolicyPicture,
	MuckTruckCategoryInfoUpdateColumnTotalMass,
	MuckTruckCategoryInfoUpdateColumnUpdateAt,
	MuckTruckCategoryInfoUpdateColumnUpdateBy,
	MuckTruckCategoryInfoUpdateColumnVehicleDescription,
	MuckTruckCategoryInfoUpdateColumnVehicleID,
	MuckTruckCategoryInfoUpdateColumnVehicleNature,
	MuckTruckCategoryInfoUpdateColumnVehicleOperatingCertificateNumber,
	MuckTruckCategoryInfoUpdateColumnVehicleOperatingCertificatePhoto,
	MuckTruckCategoryInfoUpdateColumnVehiclePicture,
}

func (e MuckTruckCategoryInfoUpdateColumn) IsValid() bool {
	switch e {
	case MuckTruckCategoryInfoUpdateColumnActualOwnerContactPhone, MuckTruckCategoryInfoUpdateColumnActualOwnerIDNumber, MuckTruckCategoryInfoUpdateColumnActualOwnerIDPhoto, MuckTruckCategoryInfoUpdateColumnActualOwnerName, MuckTruckCategoryInfoUpdateColumnAnnualInspectionExpirationTime, MuckTruckCategoryInfoUpdateColumnApplyInspectionTime, MuckTruckCategoryInfoUpdateColumnAxesNumber, MuckTruckCategoryInfoUpdateColumnBlacklistDeadline, MuckTruckCategoryInfoUpdateColumnCompulsoryInsurancePolicyPicture, MuckTruckCategoryInfoUpdateColumnCreateAt, MuckTruckCategoryInfoUpdateColumnCreateBy, MuckTruckCategoryInfoUpdateColumnDeleteAt, MuckTruckCategoryInfoUpdateColumnDeleteBy, MuckTruckCategoryInfoUpdateColumnDrivingLicenseContactPhone, MuckTruckCategoryInfoUpdateColumnDrivingLicenseIDNumber, MuckTruckCategoryInfoUpdateColumnDrivingLiscenseOwnerIDPhoto, MuckTruckCategoryInfoUpdateColumnEngineNumber, MuckTruckCategoryInfoUpdateColumnID, MuckTruckCategoryInfoUpdateColumnIllegalNoticeNumberEndorsement, MuckTruckCategoryInfoUpdateColumnIllegalNumberEndorsement, MuckTruckCategoryInfoUpdateColumnIncidentNumberEndorsement, MuckTruckCategoryInfoUpdateColumnInitialRegistrationDate, MuckTruckCategoryInfoUpdateColumnInsuranceExpiryTime, MuckTruckCategoryInfoUpdateColumnIsBlacklist, MuckTruckCategoryInfoUpdateColumnIsDelete, MuckTruckCategoryInfoUpdateColumnIsDueSecurityAlarmProcessing, MuckTruckCategoryInfoUpdateColumnIsFirstRegister, MuckTruckCategoryInfoUpdateColumnIsMuckOfficeAudit, MuckTruckCategoryInfoUpdateColumnIsSendSms, MuckTruckCategoryInfoUpdateColumnIssueDateOfQuangongNumber, MuckTruckCategoryInfoUpdateColumnOwnerIDPhoto, MuckTruckCategoryInfoUpdateColumnProcessingNotes, MuckTruckCategoryInfoUpdateColumnProcessingTime, MuckTruckCategoryInfoUpdateColumnProcessor, MuckTruckCategoryInfoUpdateColumnReviewNotes, MuckTruckCategoryInfoUpdateColumnReviewStatus, MuckTruckCategoryInfoUpdateColumnReviewTime, MuckTruckCategoryInfoUpdateColumnReviewer, MuckTruckCategoryInfoUpdateColumnSecondaryMaintenanceExpiryDate, MuckTruckCategoryInfoUpdateColumnSecondaryMaintenanceLocation, MuckTruckCategoryInfoUpdateColumnSigningAcceptanceApplicationTime, MuckTruckCategoryInfoUpdateColumnThirdPartyInsuranceCoverage, MuckTruckCategoryInfoUpdateColumnThirdPartyInsuranceExpiryTime, MuckTruckCategoryInfoUpdateColumnThirdPartyInsurancePolicyPicture, MuckTruckCategoryInfoUpdateColumnTotalMass, MuckTruckCategoryInfoUpdateColumnUpdateAt, MuckTruckCategoryInfoUpdateColumnUpdateBy, MuckTruckCategoryInfoUpdateColumnVehicleDescription, MuckTruckCategoryInfoUpdateColumnVehicleID, MuckTruckCategoryInfoUpdateColumnVehicleNature, MuckTruckCategoryInfoUpdateColumnVehicleOperatingCertificateNumber, MuckTruckCategoryInfoUpdateColumnVehicleOperatingCertificatePhoto, MuckTruckCategoryInfoUpdateColumnVehiclePicture:
		return true
	}
	return false
}

func (e MuckTruckCategoryInfoUpdateColumn) String() string {
	return string(e)
}

func (e *MuckTruckCategoryInfoUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MuckTruckCategoryInfoUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid muck_truck_category_info_update_column", str)
	}
	return nil
}

func (e MuckTruckCategoryInfoUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// unique or primary key constraints on table "muck_truck_info"
type MuckTruckInfoConstraint string

const (
	// unique or primary key constraint
	MuckTruckInfoConstraintMuckTruckInfoPkey MuckTruckInfoConstraint = "muck_truck_info_pkey"
)

var AllMuckTruckInfoConstraint = []MuckTruckInfoConstraint{
	MuckTruckInfoConstraintMuckTruckInfoPkey,
}

func (e MuckTruckInfoConstraint) IsValid() bool {
	switch e {
	case MuckTruckInfoConstraintMuckTruckInfoPkey:
		return true
	}
	return false
}

func (e MuckTruckInfoConstraint) String() string {
	return string(e)
}

func (e *MuckTruckInfoConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MuckTruckInfoConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid muck_truck_info_constraint", str)
	}
	return nil
}

func (e MuckTruckInfoConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// select columns of table "muck_truck_info"
type MuckTruckInfoSelectColumn string

const (
	// column name
	MuckTruckInfoSelectColumnAreaID MuckTruckInfoSelectColumn = "area_id"
	// column name
	MuckTruckInfoSelectColumnCreateAt MuckTruckInfoSelectColumn = "create_at"
	// column name
	MuckTruckInfoSelectColumnCreateBy MuckTruckInfoSelectColumn = "create_by"
	// column name
	MuckTruckInfoSelectColumnDeleteAt MuckTruckInfoSelectColumn = "delete_at"
	// column name
	MuckTruckInfoSelectColumnDeleteBy MuckTruckInfoSelectColumn = "delete_by"
	// column name
	MuckTruckInfoSelectColumnExpiryDate MuckTruckInfoSelectColumn = "expiry_date"
	// column name
	MuckTruckInfoSelectColumnFakeIP MuckTruckInfoSelectColumn = "fake_ip"
	// column name
	MuckTruckInfoSelectColumnIsReserveLibrary MuckTruckInfoSelectColumn = "is_reserve_library"
	// column name
	MuckTruckInfoSelectColumnLoadCategory MuckTruckInfoSelectColumn = "load_category"
	// column name
	MuckTruckInfoSelectColumnMobileCardLocation MuckTruckInfoSelectColumn = "mobile_card_location"
	// column name
	MuckTruckInfoSelectColumnMuckTruckID MuckTruckInfoSelectColumn = "muck_truck_id"
	// column name
	MuckTruckInfoSelectColumnMuckTruckType MuckTruckInfoSelectColumn = "muck_truck_type"
	// column name
	MuckTruckInfoSelectColumnRegistrationDate MuckTruckInfoSelectColumn = "registration_date"
	// column name
	MuckTruckInfoSelectColumnSelfNumber MuckTruckInfoSelectColumn = "self_number"
	// column name
	MuckTruckInfoSelectColumnServerID MuckTruckInfoSelectColumn = "server_id"
	// column name
	MuckTruckInfoSelectColumnSimCardNumber MuckTruckInfoSelectColumn = "sim_card_number"
	// column name
	MuckTruckInfoSelectColumnUpdateAt MuckTruckInfoSelectColumn = "update_at"
	// column name
	MuckTruckInfoSelectColumnUpdateBy MuckTruckInfoSelectColumn = "update_by"
	// column name
	MuckTruckInfoSelectColumnVehicleID MuckTruckInfoSelectColumn = "vehicle_id"
)

var AllMuckTruckInfoSelectColumn = []MuckTruckInfoSelectColumn{
	MuckTruckInfoSelectColumnAreaID,
	MuckTruckInfoSelectColumnCreateAt,
	MuckTruckInfoSelectColumnCreateBy,
	MuckTruckInfoSelectColumnDeleteAt,
	MuckTruckInfoSelectColumnDeleteBy,
	MuckTruckInfoSelectColumnExpiryDate,
	MuckTruckInfoSelectColumnFakeIP,
	MuckTruckInfoSelectColumnIsReserveLibrary,
	MuckTruckInfoSelectColumnLoadCategory,
	MuckTruckInfoSelectColumnMobileCardLocation,
	MuckTruckInfoSelectColumnMuckTruckID,
	MuckTruckInfoSelectColumnMuckTruckType,
	MuckTruckInfoSelectColumnRegistrationDate,
	MuckTruckInfoSelectColumnSelfNumber,
	MuckTruckInfoSelectColumnServerID,
	MuckTruckInfoSelectColumnSimCardNumber,
	MuckTruckInfoSelectColumnUpdateAt,
	MuckTruckInfoSelectColumnUpdateBy,
	MuckTruckInfoSelectColumnVehicleID,
}

func (e MuckTruckInfoSelectColumn) IsValid() bool {
	switch e {
	case MuckTruckInfoSelectColumnAreaID, MuckTruckInfoSelectColumnCreateAt, MuckTruckInfoSelectColumnCreateBy, MuckTruckInfoSelectColumnDeleteAt, MuckTruckInfoSelectColumnDeleteBy, MuckTruckInfoSelectColumnExpiryDate, MuckTruckInfoSelectColumnFakeIP, MuckTruckInfoSelectColumnIsReserveLibrary, MuckTruckInfoSelectColumnLoadCategory, MuckTruckInfoSelectColumnMobileCardLocation, MuckTruckInfoSelectColumnMuckTruckID, MuckTruckInfoSelectColumnMuckTruckType, MuckTruckInfoSelectColumnRegistrationDate, MuckTruckInfoSelectColumnSelfNumber, MuckTruckInfoSelectColumnServerID, MuckTruckInfoSelectColumnSimCardNumber, MuckTruckInfoSelectColumnUpdateAt, MuckTruckInfoSelectColumnUpdateBy, MuckTruckInfoSelectColumnVehicleID:
		return true
	}
	return false
}

func (e MuckTruckInfoSelectColumn) String() string {
	return string(e)
}

func (e *MuckTruckInfoSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MuckTruckInfoSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid muck_truck_info_select_column", str)
	}
	return nil
}

func (e MuckTruckInfoSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// update columns of table "muck_truck_info"
type MuckTruckInfoUpdateColumn string

const (
	// column name
	MuckTruckInfoUpdateColumnAreaID MuckTruckInfoUpdateColumn = "area_id"
	// column name
	MuckTruckInfoUpdateColumnCreateAt MuckTruckInfoUpdateColumn = "create_at"
	// column name
	MuckTruckInfoUpdateColumnCreateBy MuckTruckInfoUpdateColumn = "create_by"
	// column name
	MuckTruckInfoUpdateColumnDeleteAt MuckTruckInfoUpdateColumn = "delete_at"
	// column name
	MuckTruckInfoUpdateColumnDeleteBy MuckTruckInfoUpdateColumn = "delete_by"
	// column name
	MuckTruckInfoUpdateColumnExpiryDate MuckTruckInfoUpdateColumn = "expiry_date"
	// column name
	MuckTruckInfoUpdateColumnFakeIP MuckTruckInfoUpdateColumn = "fake_ip"
	// column name
	MuckTruckInfoUpdateColumnIsReserveLibrary MuckTruckInfoUpdateColumn = "is_reserve_library"
	// column name
	MuckTruckInfoUpdateColumnLoadCategory MuckTruckInfoUpdateColumn = "load_category"
	// column name
	MuckTruckInfoUpdateColumnMobileCardLocation MuckTruckInfoUpdateColumn = "mobile_card_location"
	// column name
	MuckTruckInfoUpdateColumnMuckTruckID MuckTruckInfoUpdateColumn = "muck_truck_id"
	// column name
	MuckTruckInfoUpdateColumnMuckTruckType MuckTruckInfoUpdateColumn = "muck_truck_type"
	// column name
	MuckTruckInfoUpdateColumnRegistrationDate MuckTruckInfoUpdateColumn = "registration_date"
	// column name
	MuckTruckInfoUpdateColumnSelfNumber MuckTruckInfoUpdateColumn = "self_number"
	// column name
	MuckTruckInfoUpdateColumnServerID MuckTruckInfoUpdateColumn = "server_id"
	// column name
	MuckTruckInfoUpdateColumnSimCardNumber MuckTruckInfoUpdateColumn = "sim_card_number"
	// column name
	MuckTruckInfoUpdateColumnUpdateAt MuckTruckInfoUpdateColumn = "update_at"
	// column name
	MuckTruckInfoUpdateColumnUpdateBy MuckTruckInfoUpdateColumn = "update_by"
	// column name
	MuckTruckInfoUpdateColumnVehicleID MuckTruckInfoUpdateColumn = "vehicle_id"
)

var AllMuckTruckInfoUpdateColumn = []MuckTruckInfoUpdateColumn{
	MuckTruckInfoUpdateColumnAreaID,
	MuckTruckInfoUpdateColumnCreateAt,
	MuckTruckInfoUpdateColumnCreateBy,
	MuckTruckInfoUpdateColumnDeleteAt,
	MuckTruckInfoUpdateColumnDeleteBy,
	MuckTruckInfoUpdateColumnExpiryDate,
	MuckTruckInfoUpdateColumnFakeIP,
	MuckTruckInfoUpdateColumnIsReserveLibrary,
	MuckTruckInfoUpdateColumnLoadCategory,
	MuckTruckInfoUpdateColumnMobileCardLocation,
	MuckTruckInfoUpdateColumnMuckTruckID,
	MuckTruckInfoUpdateColumnMuckTruckType,
	MuckTruckInfoUpdateColumnRegistrationDate,
	MuckTruckInfoUpdateColumnSelfNumber,
	MuckTruckInfoUpdateColumnServerID,
	MuckTruckInfoUpdateColumnSimCardNumber,
	MuckTruckInfoUpdateColumnUpdateAt,
	MuckTruckInfoUpdateColumnUpdateBy,
	MuckTruckInfoUpdateColumnVehicleID,
}

func (e MuckTruckInfoUpdateColumn) IsValid() bool {
	switch e {
	case MuckTruckInfoUpdateColumnAreaID, MuckTruckInfoUpdateColumnCreateAt, MuckTruckInfoUpdateColumnCreateBy, MuckTruckInfoUpdateColumnDeleteAt, MuckTruckInfoUpdateColumnDeleteBy, MuckTruckInfoUpdateColumnExpiryDate, MuckTruckInfoUpdateColumnFakeIP, MuckTruckInfoUpdateColumnIsReserveLibrary, MuckTruckInfoUpdateColumnLoadCategory, MuckTruckInfoUpdateColumnMobileCardLocation, MuckTruckInfoUpdateColumnMuckTruckID, MuckTruckInfoUpdateColumnMuckTruckType, MuckTruckInfoUpdateColumnRegistrationDate, MuckTruckInfoUpdateColumnSelfNumber, MuckTruckInfoUpdateColumnServerID, MuckTruckInfoUpdateColumnSimCardNumber, MuckTruckInfoUpdateColumnUpdateAt, MuckTruckInfoUpdateColumnUpdateBy, MuckTruckInfoUpdateColumnVehicleID:
		return true
	}
	return false
}

func (e MuckTruckInfoUpdateColumn) String() string {
	return string(e)
}

func (e *MuckTruckInfoUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MuckTruckInfoUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid muck_truck_info_update_column", str)
	}
	return nil
}

func (e MuckTruckInfoUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// unique or primary key constraints on table "muck_truck_preview_number"
type MuckTruckPreviewNumberConstraint string

const (
	// unique or primary key constraint
	MuckTruckPreviewNumberConstraintMuckTruckPreviewNumberPkey MuckTruckPreviewNumberConstraint = "muck_truck_preview_number_pkey"
)

var AllMuckTruckPreviewNumberConstraint = []MuckTruckPreviewNumberConstraint{
	MuckTruckPreviewNumberConstraintMuckTruckPreviewNumberPkey,
}

func (e MuckTruckPreviewNumberConstraint) IsValid() bool {
	switch e {
	case MuckTruckPreviewNumberConstraintMuckTruckPreviewNumberPkey:
		return true
	}
	return false
}

func (e MuckTruckPreviewNumberConstraint) String() string {
	return string(e)
}

func (e *MuckTruckPreviewNumberConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MuckTruckPreviewNumberConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid muck_truck_preview_number_constraint", str)
	}
	return nil
}

func (e MuckTruckPreviewNumberConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// select columns of table "muck_truck_preview_number"
type MuckTruckPreviewNumberSelectColumn string

const (
	// column name
	MuckTruckPreviewNumberSelectColumnConfirmStatus MuckTruckPreviewNumberSelectColumn = "confirm_status"
	// column name
	MuckTruckPreviewNumberSelectColumnConfirmTime MuckTruckPreviewNumberSelectColumn = "confirm_time"
	// column name
	MuckTruckPreviewNumberSelectColumnConfirmor MuckTruckPreviewNumberSelectColumn = "confirmor"
	// column name
	MuckTruckPreviewNumberSelectColumnContactPerson MuckTruckPreviewNumberSelectColumn = "contact_person"
	// column name
	MuckTruckPreviewNumberSelectColumnContactPhone MuckTruckPreviewNumberSelectColumn = "contact_phone"
	// column name
	MuckTruckPreviewNumberSelectColumnCreateBy MuckTruckPreviewNumberSelectColumn = "create_by"
	// column name
	MuckTruckPreviewNumberSelectColumnDeleteAt MuckTruckPreviewNumberSelectColumn = "delete_at"
	// column name
	MuckTruckPreviewNumberSelectColumnDeleteBy MuckTruckPreviewNumberSelectColumn = "delete_by"
	// column name
	MuckTruckPreviewNumberSelectColumnFrontLicensePlate MuckTruckPreviewNumberSelectColumn = "front_license_plate"
	// column name
	MuckTruckPreviewNumberSelectColumnID MuckTruckPreviewNumberSelectColumn = "id"
	// column name
	MuckTruckPreviewNumberSelectColumnInitialRegistrationDate MuckTruckPreviewNumberSelectColumn = "initial_registration_date"
	// column name
	MuckTruckPreviewNumberSelectColumnIsDelete MuckTruckPreviewNumberSelectColumn = "is_delete"
	// column name
	MuckTruckPreviewNumberSelectColumnIsRegisterSaleOrder MuckTruckPreviewNumberSelectColumn = "is_register_sale_order"
	// column name
	MuckTruckPreviewNumberSelectColumnIsReviewAutomatically MuckTruckPreviewNumberSelectColumn = "is_review_automatically"
	// column name
	MuckTruckPreviewNumberSelectColumnMarkingTime MuckTruckPreviewNumberSelectColumn = "marking_time"
	// column name
	MuckTruckPreviewNumberSelectColumnOriginalNumber MuckTruckPreviewNumberSelectColumn = "original_number"
	// column name
	MuckTruckPreviewNumberSelectColumnProductionStatus MuckTruckPreviewNumberSelectColumn = "production_status"
	// column name
	MuckTruckPreviewNumberSelectColumnProductionTime MuckTruckPreviewNumberSelectColumn = "production_time"
	// column name
	MuckTruckPreviewNumberSelectColumnProductionTimes MuckTruckPreviewNumberSelectColumn = "production_times"
	// column name
	MuckTruckPreviewNumberSelectColumnRearLicensePlate MuckTruckPreviewNumberSelectColumn = "rear_license_plate"
	// column name
	MuckTruckPreviewNumberSelectColumnRegistrationTime MuckTruckPreviewNumberSelectColumn = "registration_time"
	// column name
	MuckTruckPreviewNumberSelectColumnRemarks MuckTruckPreviewNumberSelectColumn = "remarks"
	// column name
	MuckTruckPreviewNumberSelectColumnSideLicensePlate MuckTruckPreviewNumberSelectColumn = "side_license_plate"
	// column name
	MuckTruckPreviewNumberSelectColumnSvnNumber MuckTruckPreviewNumberSelectColumn = "svn_number"
	// column name
	MuckTruckPreviewNumberSelectColumnUnlawfulViolationNumber MuckTruckPreviewNumberSelectColumn = "unlawful_violation_number"
	// column name
	MuckTruckPreviewNumberSelectColumnUpdateAt MuckTruckPreviewNumberSelectColumn = "update_at"
	// column name
	MuckTruckPreviewNumberSelectColumnUpdateBy MuckTruckPreviewNumberSelectColumn = "update_by"
	// column name
	MuckTruckPreviewNumberSelectColumnVehicleID MuckTruckPreviewNumberSelectColumn = "vehicle_id"
	// column name
	MuckTruckPreviewNumberSelectColumnWorkNumberPlateColor MuckTruckPreviewNumberSelectColumn = "work_number_plate_color"
)

var AllMuckTruckPreviewNumberSelectColumn = []MuckTruckPreviewNumberSelectColumn{
	MuckTruckPreviewNumberSelectColumnConfirmStatus,
	MuckTruckPreviewNumberSelectColumnConfirmTime,
	MuckTruckPreviewNumberSelectColumnConfirmor,
	MuckTruckPreviewNumberSelectColumnContactPerson,
	MuckTruckPreviewNumberSelectColumnContactPhone,
	MuckTruckPreviewNumberSelectColumnCreateBy,
	MuckTruckPreviewNumberSelectColumnDeleteAt,
	MuckTruckPreviewNumberSelectColumnDeleteBy,
	MuckTruckPreviewNumberSelectColumnFrontLicensePlate,
	MuckTruckPreviewNumberSelectColumnID,
	MuckTruckPreviewNumberSelectColumnInitialRegistrationDate,
	MuckTruckPreviewNumberSelectColumnIsDelete,
	MuckTruckPreviewNumberSelectColumnIsRegisterSaleOrder,
	MuckTruckPreviewNumberSelectColumnIsReviewAutomatically,
	MuckTruckPreviewNumberSelectColumnMarkingTime,
	MuckTruckPreviewNumberSelectColumnOriginalNumber,
	MuckTruckPreviewNumberSelectColumnProductionStatus,
	MuckTruckPreviewNumberSelectColumnProductionTime,
	MuckTruckPreviewNumberSelectColumnProductionTimes,
	MuckTruckPreviewNumberSelectColumnRearLicensePlate,
	MuckTruckPreviewNumberSelectColumnRegistrationTime,
	MuckTruckPreviewNumberSelectColumnRemarks,
	MuckTruckPreviewNumberSelectColumnSideLicensePlate,
	MuckTruckPreviewNumberSelectColumnSvnNumber,
	MuckTruckPreviewNumberSelectColumnUnlawfulViolationNumber,
	MuckTruckPreviewNumberSelectColumnUpdateAt,
	MuckTruckPreviewNumberSelectColumnUpdateBy,
	MuckTruckPreviewNumberSelectColumnVehicleID,
	MuckTruckPreviewNumberSelectColumnWorkNumberPlateColor,
}

func (e MuckTruckPreviewNumberSelectColumn) IsValid() bool {
	switch e {
	case MuckTruckPreviewNumberSelectColumnConfirmStatus, MuckTruckPreviewNumberSelectColumnConfirmTime, MuckTruckPreviewNumberSelectColumnConfirmor, MuckTruckPreviewNumberSelectColumnContactPerson, MuckTruckPreviewNumberSelectColumnContactPhone, MuckTruckPreviewNumberSelectColumnCreateBy, MuckTruckPreviewNumberSelectColumnDeleteAt, MuckTruckPreviewNumberSelectColumnDeleteBy, MuckTruckPreviewNumberSelectColumnFrontLicensePlate, MuckTruckPreviewNumberSelectColumnID, MuckTruckPreviewNumberSelectColumnInitialRegistrationDate, MuckTruckPreviewNumberSelectColumnIsDelete, MuckTruckPreviewNumberSelectColumnIsRegisterSaleOrder, MuckTruckPreviewNumberSelectColumnIsReviewAutomatically, MuckTruckPreviewNumberSelectColumnMarkingTime, MuckTruckPreviewNumberSelectColumnOriginalNumber, MuckTruckPreviewNumberSelectColumnProductionStatus, MuckTruckPreviewNumberSelectColumnProductionTime, MuckTruckPreviewNumberSelectColumnProductionTimes, MuckTruckPreviewNumberSelectColumnRearLicensePlate, MuckTruckPreviewNumberSelectColumnRegistrationTime, MuckTruckPreviewNumberSelectColumnRemarks, MuckTruckPreviewNumberSelectColumnSideLicensePlate, MuckTruckPreviewNumberSelectColumnSvnNumber, MuckTruckPreviewNumberSelectColumnUnlawfulViolationNumber, MuckTruckPreviewNumberSelectColumnUpdateAt, MuckTruckPreviewNumberSelectColumnUpdateBy, MuckTruckPreviewNumberSelectColumnVehicleID, MuckTruckPreviewNumberSelectColumnWorkNumberPlateColor:
		return true
	}
	return false
}

func (e MuckTruckPreviewNumberSelectColumn) String() string {
	return string(e)
}

func (e *MuckTruckPreviewNumberSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MuckTruckPreviewNumberSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid muck_truck_preview_number_select_column", str)
	}
	return nil
}

func (e MuckTruckPreviewNumberSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// update columns of table "muck_truck_preview_number"
type MuckTruckPreviewNumberUpdateColumn string

const (
	// column name
	MuckTruckPreviewNumberUpdateColumnConfirmStatus MuckTruckPreviewNumberUpdateColumn = "confirm_status"
	// column name
	MuckTruckPreviewNumberUpdateColumnConfirmTime MuckTruckPreviewNumberUpdateColumn = "confirm_time"
	// column name
	MuckTruckPreviewNumberUpdateColumnConfirmor MuckTruckPreviewNumberUpdateColumn = "confirmor"
	// column name
	MuckTruckPreviewNumberUpdateColumnContactPerson MuckTruckPreviewNumberUpdateColumn = "contact_person"
	// column name
	MuckTruckPreviewNumberUpdateColumnContactPhone MuckTruckPreviewNumberUpdateColumn = "contact_phone"
	// column name
	MuckTruckPreviewNumberUpdateColumnCreateBy MuckTruckPreviewNumberUpdateColumn = "create_by"
	// column name
	MuckTruckPreviewNumberUpdateColumnDeleteAt MuckTruckPreviewNumberUpdateColumn = "delete_at"
	// column name
	MuckTruckPreviewNumberUpdateColumnDeleteBy MuckTruckPreviewNumberUpdateColumn = "delete_by"
	// column name
	MuckTruckPreviewNumberUpdateColumnFrontLicensePlate MuckTruckPreviewNumberUpdateColumn = "front_license_plate"
	// column name
	MuckTruckPreviewNumberUpdateColumnID MuckTruckPreviewNumberUpdateColumn = "id"
	// column name
	MuckTruckPreviewNumberUpdateColumnInitialRegistrationDate MuckTruckPreviewNumberUpdateColumn = "initial_registration_date"
	// column name
	MuckTruckPreviewNumberUpdateColumnIsDelete MuckTruckPreviewNumberUpdateColumn = "is_delete"
	// column name
	MuckTruckPreviewNumberUpdateColumnIsRegisterSaleOrder MuckTruckPreviewNumberUpdateColumn = "is_register_sale_order"
	// column name
	MuckTruckPreviewNumberUpdateColumnIsReviewAutomatically MuckTruckPreviewNumberUpdateColumn = "is_review_automatically"
	// column name
	MuckTruckPreviewNumberUpdateColumnMarkingTime MuckTruckPreviewNumberUpdateColumn = "marking_time"
	// column name
	MuckTruckPreviewNumberUpdateColumnOriginalNumber MuckTruckPreviewNumberUpdateColumn = "original_number"
	// column name
	MuckTruckPreviewNumberUpdateColumnProductionStatus MuckTruckPreviewNumberUpdateColumn = "production_status"
	// column name
	MuckTruckPreviewNumberUpdateColumnProductionTime MuckTruckPreviewNumberUpdateColumn = "production_time"
	// column name
	MuckTruckPreviewNumberUpdateColumnProductionTimes MuckTruckPreviewNumberUpdateColumn = "production_times"
	// column name
	MuckTruckPreviewNumberUpdateColumnRearLicensePlate MuckTruckPreviewNumberUpdateColumn = "rear_license_plate"
	// column name
	MuckTruckPreviewNumberUpdateColumnRegistrationTime MuckTruckPreviewNumberUpdateColumn = "registration_time"
	// column name
	MuckTruckPreviewNumberUpdateColumnRemarks MuckTruckPreviewNumberUpdateColumn = "remarks"
	// column name
	MuckTruckPreviewNumberUpdateColumnSideLicensePlate MuckTruckPreviewNumberUpdateColumn = "side_license_plate"
	// column name
	MuckTruckPreviewNumberUpdateColumnSvnNumber MuckTruckPreviewNumberUpdateColumn = "svn_number"
	// column name
	MuckTruckPreviewNumberUpdateColumnUnlawfulViolationNumber MuckTruckPreviewNumberUpdateColumn = "unlawful_violation_number"
	// column name
	MuckTruckPreviewNumberUpdateColumnUpdateAt MuckTruckPreviewNumberUpdateColumn = "update_at"
	// column name
	MuckTruckPreviewNumberUpdateColumnUpdateBy MuckTruckPreviewNumberUpdateColumn = "update_by"
	// column name
	MuckTruckPreviewNumberUpdateColumnVehicleID MuckTruckPreviewNumberUpdateColumn = "vehicle_id"
	// column name
	MuckTruckPreviewNumberUpdateColumnWorkNumberPlateColor MuckTruckPreviewNumberUpdateColumn = "work_number_plate_color"
)

var AllMuckTruckPreviewNumberUpdateColumn = []MuckTruckPreviewNumberUpdateColumn{
	MuckTruckPreviewNumberUpdateColumnConfirmStatus,
	MuckTruckPreviewNumberUpdateColumnConfirmTime,
	MuckTruckPreviewNumberUpdateColumnConfirmor,
	MuckTruckPreviewNumberUpdateColumnContactPerson,
	MuckTruckPreviewNumberUpdateColumnContactPhone,
	MuckTruckPreviewNumberUpdateColumnCreateBy,
	MuckTruckPreviewNumberUpdateColumnDeleteAt,
	MuckTruckPreviewNumberUpdateColumnDeleteBy,
	MuckTruckPreviewNumberUpdateColumnFrontLicensePlate,
	MuckTruckPreviewNumberUpdateColumnID,
	MuckTruckPreviewNumberUpdateColumnInitialRegistrationDate,
	MuckTruckPreviewNumberUpdateColumnIsDelete,
	MuckTruckPreviewNumberUpdateColumnIsRegisterSaleOrder,
	MuckTruckPreviewNumberUpdateColumnIsReviewAutomatically,
	MuckTruckPreviewNumberUpdateColumnMarkingTime,
	MuckTruckPreviewNumberUpdateColumnOriginalNumber,
	MuckTruckPreviewNumberUpdateColumnProductionStatus,
	MuckTruckPreviewNumberUpdateColumnProductionTime,
	MuckTruckPreviewNumberUpdateColumnProductionTimes,
	MuckTruckPreviewNumberUpdateColumnRearLicensePlate,
	MuckTruckPreviewNumberUpdateColumnRegistrationTime,
	MuckTruckPreviewNumberUpdateColumnRemarks,
	MuckTruckPreviewNumberUpdateColumnSideLicensePlate,
	MuckTruckPreviewNumberUpdateColumnSvnNumber,
	MuckTruckPreviewNumberUpdateColumnUnlawfulViolationNumber,
	MuckTruckPreviewNumberUpdateColumnUpdateAt,
	MuckTruckPreviewNumberUpdateColumnUpdateBy,
	MuckTruckPreviewNumberUpdateColumnVehicleID,
	MuckTruckPreviewNumberUpdateColumnWorkNumberPlateColor,
}

func (e MuckTruckPreviewNumberUpdateColumn) IsValid() bool {
	switch e {
	case MuckTruckPreviewNumberUpdateColumnConfirmStatus, MuckTruckPreviewNumberUpdateColumnConfirmTime, MuckTruckPreviewNumberUpdateColumnConfirmor, MuckTruckPreviewNumberUpdateColumnContactPerson, MuckTruckPreviewNumberUpdateColumnContactPhone, MuckTruckPreviewNumberUpdateColumnCreateBy, MuckTruckPreviewNumberUpdateColumnDeleteAt, MuckTruckPreviewNumberUpdateColumnDeleteBy, MuckTruckPreviewNumberUpdateColumnFrontLicensePlate, MuckTruckPreviewNumberUpdateColumnID, MuckTruckPreviewNumberUpdateColumnInitialRegistrationDate, MuckTruckPreviewNumberUpdateColumnIsDelete, MuckTruckPreviewNumberUpdateColumnIsRegisterSaleOrder, MuckTruckPreviewNumberUpdateColumnIsReviewAutomatically, MuckTruckPreviewNumberUpdateColumnMarkingTime, MuckTruckPreviewNumberUpdateColumnOriginalNumber, MuckTruckPreviewNumberUpdateColumnProductionStatus, MuckTruckPreviewNumberUpdateColumnProductionTime, MuckTruckPreviewNumberUpdateColumnProductionTimes, MuckTruckPreviewNumberUpdateColumnRearLicensePlate, MuckTruckPreviewNumberUpdateColumnRegistrationTime, MuckTruckPreviewNumberUpdateColumnRemarks, MuckTruckPreviewNumberUpdateColumnSideLicensePlate, MuckTruckPreviewNumberUpdateColumnSvnNumber, MuckTruckPreviewNumberUpdateColumnUnlawfulViolationNumber, MuckTruckPreviewNumberUpdateColumnUpdateAt, MuckTruckPreviewNumberUpdateColumnUpdateBy, MuckTruckPreviewNumberUpdateColumnVehicleID, MuckTruckPreviewNumberUpdateColumnWorkNumberPlateColor:
		return true
	}
	return false
}

func (e MuckTruckPreviewNumberUpdateColumn) String() string {
	return string(e)
}

func (e *MuckTruckPreviewNumberUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MuckTruckPreviewNumberUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid muck_truck_preview_number_update_column", str)
	}
	return nil
}

func (e MuckTruckPreviewNumberUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// unique or primary key constraints on table "muck_truck_worker_id_card_orders"
type MuckTruckWorkerIDCardOrdersConstraint string

const (
	// unique or primary key constraint
	MuckTruckWorkerIDCardOrdersConstraintMuckTruckWorkerIDCardOrdersPkey MuckTruckWorkerIDCardOrdersConstraint = "muck_truck_worker_id_card_orders_pkey"
)

var AllMuckTruckWorkerIDCardOrdersConstraint = []MuckTruckWorkerIDCardOrdersConstraint{
	MuckTruckWorkerIDCardOrdersConstraintMuckTruckWorkerIDCardOrdersPkey,
}

func (e MuckTruckWorkerIDCardOrdersConstraint) IsValid() bool {
	switch e {
	case MuckTruckWorkerIDCardOrdersConstraintMuckTruckWorkerIDCardOrdersPkey:
		return true
	}
	return false
}

func (e MuckTruckWorkerIDCardOrdersConstraint) String() string {
	return string(e)
}

func (e *MuckTruckWorkerIDCardOrdersConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MuckTruckWorkerIDCardOrdersConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid muck_truck_worker_id_card_orders_constraint", str)
	}
	return nil
}

func (e MuckTruckWorkerIDCardOrdersConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// select columns of table "muck_truck_worker_id_card_orders"
type MuckTruckWorkerIDCardOrdersSelectColumn string

const (
	// column name
	MuckTruckWorkerIDCardOrdersSelectColumnCreateAt MuckTruckWorkerIDCardOrdersSelectColumn = "create_at"
	// column name
	MuckTruckWorkerIDCardOrdersSelectColumnCreateBy MuckTruckWorkerIDCardOrdersSelectColumn = "create_by"
	// column name
	MuckTruckWorkerIDCardOrdersSelectColumnDeleteAt MuckTruckWorkerIDCardOrdersSelectColumn = "delete_at"
	// column name
	MuckTruckWorkerIDCardOrdersSelectColumnDeleteBy MuckTruckWorkerIDCardOrdersSelectColumn = "delete_by"
	// column name
	MuckTruckWorkerIDCardOrdersSelectColumnID MuckTruckWorkerIDCardOrdersSelectColumn = "id"
	// column name
	MuckTruckWorkerIDCardOrdersSelectColumnPreviewNumberID MuckTruckWorkerIDCardOrdersSelectColumn = "preview_number_id"
	// column name
	MuckTruckWorkerIDCardOrdersSelectColumnUpdateAt MuckTruckWorkerIDCardOrdersSelectColumn = "update_at"
	// column name
	MuckTruckWorkerIDCardOrdersSelectColumnUpdateBy MuckTruckWorkerIDCardOrdersSelectColumn = "update_by"
	// column name
	MuckTruckWorkerIDCardOrdersSelectColumnVehicleID MuckTruckWorkerIDCardOrdersSelectColumn = "vehicle_id"
)

var AllMuckTruckWorkerIDCardOrdersSelectColumn = []MuckTruckWorkerIDCardOrdersSelectColumn{
	MuckTruckWorkerIDCardOrdersSelectColumnCreateAt,
	MuckTruckWorkerIDCardOrdersSelectColumnCreateBy,
	MuckTruckWorkerIDCardOrdersSelectColumnDeleteAt,
	MuckTruckWorkerIDCardOrdersSelectColumnDeleteBy,
	MuckTruckWorkerIDCardOrdersSelectColumnID,
	MuckTruckWorkerIDCardOrdersSelectColumnPreviewNumberID,
	MuckTruckWorkerIDCardOrdersSelectColumnUpdateAt,
	MuckTruckWorkerIDCardOrdersSelectColumnUpdateBy,
	MuckTruckWorkerIDCardOrdersSelectColumnVehicleID,
}

func (e MuckTruckWorkerIDCardOrdersSelectColumn) IsValid() bool {
	switch e {
	case MuckTruckWorkerIDCardOrdersSelectColumnCreateAt, MuckTruckWorkerIDCardOrdersSelectColumnCreateBy, MuckTruckWorkerIDCardOrdersSelectColumnDeleteAt, MuckTruckWorkerIDCardOrdersSelectColumnDeleteBy, MuckTruckWorkerIDCardOrdersSelectColumnID, MuckTruckWorkerIDCardOrdersSelectColumnPreviewNumberID, MuckTruckWorkerIDCardOrdersSelectColumnUpdateAt, MuckTruckWorkerIDCardOrdersSelectColumnUpdateBy, MuckTruckWorkerIDCardOrdersSelectColumnVehicleID:
		return true
	}
	return false
}

func (e MuckTruckWorkerIDCardOrdersSelectColumn) String() string {
	return string(e)
}

func (e *MuckTruckWorkerIDCardOrdersSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MuckTruckWorkerIDCardOrdersSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid muck_truck_worker_id_card_orders_select_column", str)
	}
	return nil
}

func (e MuckTruckWorkerIDCardOrdersSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// update columns of table "muck_truck_worker_id_card_orders"
type MuckTruckWorkerIDCardOrdersUpdateColumn string

const (
	// column name
	MuckTruckWorkerIDCardOrdersUpdateColumnCreateAt MuckTruckWorkerIDCardOrdersUpdateColumn = "create_at"
	// column name
	MuckTruckWorkerIDCardOrdersUpdateColumnCreateBy MuckTruckWorkerIDCardOrdersUpdateColumn = "create_by"
	// column name
	MuckTruckWorkerIDCardOrdersUpdateColumnDeleteAt MuckTruckWorkerIDCardOrdersUpdateColumn = "delete_at"
	// column name
	MuckTruckWorkerIDCardOrdersUpdateColumnDeleteBy MuckTruckWorkerIDCardOrdersUpdateColumn = "delete_by"
	// column name
	MuckTruckWorkerIDCardOrdersUpdateColumnID MuckTruckWorkerIDCardOrdersUpdateColumn = "id"
	// column name
	MuckTruckWorkerIDCardOrdersUpdateColumnPreviewNumberID MuckTruckWorkerIDCardOrdersUpdateColumn = "preview_number_id"
	// column name
	MuckTruckWorkerIDCardOrdersUpdateColumnUpdateAt MuckTruckWorkerIDCardOrdersUpdateColumn = "update_at"
	// column name
	MuckTruckWorkerIDCardOrdersUpdateColumnUpdateBy MuckTruckWorkerIDCardOrdersUpdateColumn = "update_by"
	// column name
	MuckTruckWorkerIDCardOrdersUpdateColumnVehicleID MuckTruckWorkerIDCardOrdersUpdateColumn = "vehicle_id"
)

var AllMuckTruckWorkerIDCardOrdersUpdateColumn = []MuckTruckWorkerIDCardOrdersUpdateColumn{
	MuckTruckWorkerIDCardOrdersUpdateColumnCreateAt,
	MuckTruckWorkerIDCardOrdersUpdateColumnCreateBy,
	MuckTruckWorkerIDCardOrdersUpdateColumnDeleteAt,
	MuckTruckWorkerIDCardOrdersUpdateColumnDeleteBy,
	MuckTruckWorkerIDCardOrdersUpdateColumnID,
	MuckTruckWorkerIDCardOrdersUpdateColumnPreviewNumberID,
	MuckTruckWorkerIDCardOrdersUpdateColumnUpdateAt,
	MuckTruckWorkerIDCardOrdersUpdateColumnUpdateBy,
	MuckTruckWorkerIDCardOrdersUpdateColumnVehicleID,
}

func (e MuckTruckWorkerIDCardOrdersUpdateColumn) IsValid() bool {
	switch e {
	case MuckTruckWorkerIDCardOrdersUpdateColumnCreateAt, MuckTruckWorkerIDCardOrdersUpdateColumnCreateBy, MuckTruckWorkerIDCardOrdersUpdateColumnDeleteAt, MuckTruckWorkerIDCardOrdersUpdateColumnDeleteBy, MuckTruckWorkerIDCardOrdersUpdateColumnID, MuckTruckWorkerIDCardOrdersUpdateColumnPreviewNumberID, MuckTruckWorkerIDCardOrdersUpdateColumnUpdateAt, MuckTruckWorkerIDCardOrdersUpdateColumnUpdateBy, MuckTruckWorkerIDCardOrdersUpdateColumnVehicleID:
		return true
	}
	return false
}

func (e MuckTruckWorkerIDCardOrdersUpdateColumn) String() string {
	return string(e)
}

func (e *MuckTruckWorkerIDCardOrdersUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MuckTruckWorkerIDCardOrdersUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid muck_truck_worker_id_card_orders_update_column", str)
	}
	return nil
}

func (e MuckTruckWorkerIDCardOrdersUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// unique or primary key constraints on table "operating_vehicle_info"
type OperatingVehicleInfoConstraint string

const (
	// unique or primary key constraint
	OperatingVehicleInfoConstraintOperatingVehicleInfoPkey OperatingVehicleInfoConstraint = "operating_vehicle_info_pkey"
)

var AllOperatingVehicleInfoConstraint = []OperatingVehicleInfoConstraint{
	OperatingVehicleInfoConstraintOperatingVehicleInfoPkey,
}

func (e OperatingVehicleInfoConstraint) IsValid() bool {
	switch e {
	case OperatingVehicleInfoConstraintOperatingVehicleInfoPkey:
		return true
	}
	return false
}

func (e OperatingVehicleInfoConstraint) String() string {
	return string(e)
}

func (e *OperatingVehicleInfoConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OperatingVehicleInfoConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid operating_vehicle_info_constraint", str)
	}
	return nil
}

func (e OperatingVehicleInfoConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// select columns of table "operating_vehicle_info"
type OperatingVehicleInfoSelectColumn string

const (
	// column name
	OperatingVehicleInfoSelectColumnAdministrativeRegion OperatingVehicleInfoSelectColumn = "administrative_region"
	// column name
	OperatingVehicleInfoSelectColumnAgent OperatingVehicleInfoSelectColumn = "agent"
	// column name
	OperatingVehicleInfoSelectColumnContactNumber OperatingVehicleInfoSelectColumn = "contact_number"
	// column name
	OperatingVehicleInfoSelectColumnContractTime OperatingVehicleInfoSelectColumn = "contract_time"
	// column name
	OperatingVehicleInfoSelectColumnCreateAt OperatingVehicleInfoSelectColumn = "create_at"
	// column name
	OperatingVehicleInfoSelectColumnCreateBy OperatingVehicleInfoSelectColumn = "create_by"
	// column name
	OperatingVehicleInfoSelectColumnDeleteAt OperatingVehicleInfoSelectColumn = "delete_at"
	// column name
	OperatingVehicleInfoSelectColumnDeleteBy OperatingVehicleInfoSelectColumn = "delete_by"
	// column name
	OperatingVehicleInfoSelectColumnDrivingLicenseOwner OperatingVehicleInfoSelectColumn = "driving_license_owner"
	// column name
	OperatingVehicleInfoSelectColumnFirstOnlineTime OperatingVehicleInfoSelectColumn = "first_online_time"
	// column name
	OperatingVehicleInfoSelectColumnInstallationTime OperatingVehicleInfoSelectColumn = "installation_time"
	// column name
	OperatingVehicleInfoSelectColumnIsBd OperatingVehicleInfoSelectColumn = "is_BD"
	// column name
	OperatingVehicleInfoSelectColumnIsActive OperatingVehicleInfoSelectColumn = "is_active"
	// column name
	OperatingVehicleInfoSelectColumnIsApplayTerminalInstallation OperatingVehicleInfoSelectColumn = "is_applay_terminal_installation"
	// column name
	OperatingVehicleInfoSelectColumnIsBlock OperatingVehicleInfoSelectColumn = "is_block"
	// column name
	OperatingVehicleInfoSelectColumnIsEngineeringVehicle OperatingVehicleInfoSelectColumn = "is_engineering_vehicle"
	// column name
	OperatingVehicleInfoSelectColumnIsFunctionOk OperatingVehicleInfoSelectColumn = "is_function_ok"
	// column name
	OperatingVehicleInfoSelectColumnIsInOperatingSystem OperatingVehicleInfoSelectColumn = "is_in_operating_system"
	// column name
	OperatingVehicleInfoSelectColumnIsInUploadPlatform OperatingVehicleInfoSelectColumn = "is_in_upload_platform"
	// column name
	OperatingVehicleInfoSelectColumnIsNeedSupervise OperatingVehicleInfoSelectColumn = "is_need_supervise"
	// column name
	OperatingVehicleInfoSelectColumnIsSupervise OperatingVehicleInfoSelectColumn = "is_supervise"
	// column name
	OperatingVehicleInfoSelectColumnLastBindingTerminalTime OperatingVehicleInfoSelectColumn = "last_binding_terminal_time"
	// column name
	OperatingVehicleInfoSelectColumnLicensePlatePhoto OperatingVehicleInfoSelectColumn = "license_plate_photo"
	// column name
	OperatingVehicleInfoSelectColumnMuckTruckType OperatingVehicleInfoSelectColumn = "muck_truck_type"
	// column name
	OperatingVehicleInfoSelectColumnOperatingVehicleID OperatingVehicleInfoSelectColumn = "operating_vehicle_id"
	// column name
	OperatingVehicleInfoSelectColumnOtherPhoto OperatingVehicleInfoSelectColumn = "other_photo"
	// column name
	OperatingVehicleInfoSelectColumnPlatform OperatingVehicleInfoSelectColumn = "platform"
	// column name
	OperatingVehicleInfoSelectColumnPositionDbID OperatingVehicleInfoSelectColumn = "position_db_id"
	// column name
	OperatingVehicleInfoSelectColumnScrapReason OperatingVehicleInfoSelectColumn = "scrap_reason"
	// column name
	OperatingVehicleInfoSelectColumnScrapTime OperatingVehicleInfoSelectColumn = "scrap_time"
	// column name
	OperatingVehicleInfoSelectColumnScrapTimeCheck OperatingVehicleInfoSelectColumn = "scrap_time_check"
	// column name
	OperatingVehicleInfoSelectColumnSerialNumber OperatingVehicleInfoSelectColumn = "serial_number"
	// column name
	OperatingVehicleInfoSelectColumnServiceExpirationTime OperatingVehicleInfoSelectColumn = "service_expiration_time"
	// column name
	OperatingVehicleInfoSelectColumnSpeedModeStatus OperatingVehicleInfoSelectColumn = "speed_mode_status"
	// column name
	OperatingVehicleInfoSelectColumnSpeedModeStatusTime OperatingVehicleInfoSelectColumn = "speed_mode_status_time"
	// column name
	OperatingVehicleInfoSelectColumnTemporaryLibrary OperatingVehicleInfoSelectColumn = "temporary_library"
	// column name
	OperatingVehicleInfoSelectColumnTemporaryTransportBureau OperatingVehicleInfoSelectColumn = "temporary_transport_bureau"
	// column name
	OperatingVehicleInfoSelectColumnUpdateAt OperatingVehicleInfoSelectColumn = "update_at"
	// column name
	OperatingVehicleInfoSelectColumnUpdateBy OperatingVehicleInfoSelectColumn = "update_by"
	// column name
	OperatingVehicleInfoSelectColumnVehicleID OperatingVehicleInfoSelectColumn = "vehicle_id"
)

var AllOperatingVehicleInfoSelectColumn = []OperatingVehicleInfoSelectColumn{
	OperatingVehicleInfoSelectColumnAdministrativeRegion,
	OperatingVehicleInfoSelectColumnAgent,
	OperatingVehicleInfoSelectColumnContactNumber,
	OperatingVehicleInfoSelectColumnContractTime,
	OperatingVehicleInfoSelectColumnCreateAt,
	OperatingVehicleInfoSelectColumnCreateBy,
	OperatingVehicleInfoSelectColumnDeleteAt,
	OperatingVehicleInfoSelectColumnDeleteBy,
	OperatingVehicleInfoSelectColumnDrivingLicenseOwner,
	OperatingVehicleInfoSelectColumnFirstOnlineTime,
	OperatingVehicleInfoSelectColumnInstallationTime,
	OperatingVehicleInfoSelectColumnIsBd,
	OperatingVehicleInfoSelectColumnIsActive,
	OperatingVehicleInfoSelectColumnIsApplayTerminalInstallation,
	OperatingVehicleInfoSelectColumnIsBlock,
	OperatingVehicleInfoSelectColumnIsEngineeringVehicle,
	OperatingVehicleInfoSelectColumnIsFunctionOk,
	OperatingVehicleInfoSelectColumnIsInOperatingSystem,
	OperatingVehicleInfoSelectColumnIsInUploadPlatform,
	OperatingVehicleInfoSelectColumnIsNeedSupervise,
	OperatingVehicleInfoSelectColumnIsSupervise,
	OperatingVehicleInfoSelectColumnLastBindingTerminalTime,
	OperatingVehicleInfoSelectColumnLicensePlatePhoto,
	OperatingVehicleInfoSelectColumnMuckTruckType,
	OperatingVehicleInfoSelectColumnOperatingVehicleID,
	OperatingVehicleInfoSelectColumnOtherPhoto,
	OperatingVehicleInfoSelectColumnPlatform,
	OperatingVehicleInfoSelectColumnPositionDbID,
	OperatingVehicleInfoSelectColumnScrapReason,
	OperatingVehicleInfoSelectColumnScrapTime,
	OperatingVehicleInfoSelectColumnScrapTimeCheck,
	OperatingVehicleInfoSelectColumnSerialNumber,
	OperatingVehicleInfoSelectColumnServiceExpirationTime,
	OperatingVehicleInfoSelectColumnSpeedModeStatus,
	OperatingVehicleInfoSelectColumnSpeedModeStatusTime,
	OperatingVehicleInfoSelectColumnTemporaryLibrary,
	OperatingVehicleInfoSelectColumnTemporaryTransportBureau,
	OperatingVehicleInfoSelectColumnUpdateAt,
	OperatingVehicleInfoSelectColumnUpdateBy,
	OperatingVehicleInfoSelectColumnVehicleID,
}

func (e OperatingVehicleInfoSelectColumn) IsValid() bool {
	switch e {
	case OperatingVehicleInfoSelectColumnAdministrativeRegion, OperatingVehicleInfoSelectColumnAgent, OperatingVehicleInfoSelectColumnContactNumber, OperatingVehicleInfoSelectColumnContractTime, OperatingVehicleInfoSelectColumnCreateAt, OperatingVehicleInfoSelectColumnCreateBy, OperatingVehicleInfoSelectColumnDeleteAt, OperatingVehicleInfoSelectColumnDeleteBy, OperatingVehicleInfoSelectColumnDrivingLicenseOwner, OperatingVehicleInfoSelectColumnFirstOnlineTime, OperatingVehicleInfoSelectColumnInstallationTime, OperatingVehicleInfoSelectColumnIsBd, OperatingVehicleInfoSelectColumnIsActive, OperatingVehicleInfoSelectColumnIsApplayTerminalInstallation, OperatingVehicleInfoSelectColumnIsBlock, OperatingVehicleInfoSelectColumnIsEngineeringVehicle, OperatingVehicleInfoSelectColumnIsFunctionOk, OperatingVehicleInfoSelectColumnIsInOperatingSystem, OperatingVehicleInfoSelectColumnIsInUploadPlatform, OperatingVehicleInfoSelectColumnIsNeedSupervise, OperatingVehicleInfoSelectColumnIsSupervise, OperatingVehicleInfoSelectColumnLastBindingTerminalTime, OperatingVehicleInfoSelectColumnLicensePlatePhoto, OperatingVehicleInfoSelectColumnMuckTruckType, OperatingVehicleInfoSelectColumnOperatingVehicleID, OperatingVehicleInfoSelectColumnOtherPhoto, OperatingVehicleInfoSelectColumnPlatform, OperatingVehicleInfoSelectColumnPositionDbID, OperatingVehicleInfoSelectColumnScrapReason, OperatingVehicleInfoSelectColumnScrapTime, OperatingVehicleInfoSelectColumnScrapTimeCheck, OperatingVehicleInfoSelectColumnSerialNumber, OperatingVehicleInfoSelectColumnServiceExpirationTime, OperatingVehicleInfoSelectColumnSpeedModeStatus, OperatingVehicleInfoSelectColumnSpeedModeStatusTime, OperatingVehicleInfoSelectColumnTemporaryLibrary, OperatingVehicleInfoSelectColumnTemporaryTransportBureau, OperatingVehicleInfoSelectColumnUpdateAt, OperatingVehicleInfoSelectColumnUpdateBy, OperatingVehicleInfoSelectColumnVehicleID:
		return true
	}
	return false
}

func (e OperatingVehicleInfoSelectColumn) String() string {
	return string(e)
}

func (e *OperatingVehicleInfoSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OperatingVehicleInfoSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid operating_vehicle_info_select_column", str)
	}
	return nil
}

func (e OperatingVehicleInfoSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// update columns of table "operating_vehicle_info"
type OperatingVehicleInfoUpdateColumn string

const (
	// column name
	OperatingVehicleInfoUpdateColumnAdministrativeRegion OperatingVehicleInfoUpdateColumn = "administrative_region"
	// column name
	OperatingVehicleInfoUpdateColumnAgent OperatingVehicleInfoUpdateColumn = "agent"
	// column name
	OperatingVehicleInfoUpdateColumnContactNumber OperatingVehicleInfoUpdateColumn = "contact_number"
	// column name
	OperatingVehicleInfoUpdateColumnContractTime OperatingVehicleInfoUpdateColumn = "contract_time"
	// column name
	OperatingVehicleInfoUpdateColumnCreateAt OperatingVehicleInfoUpdateColumn = "create_at"
	// column name
	OperatingVehicleInfoUpdateColumnCreateBy OperatingVehicleInfoUpdateColumn = "create_by"
	// column name
	OperatingVehicleInfoUpdateColumnDeleteAt OperatingVehicleInfoUpdateColumn = "delete_at"
	// column name
	OperatingVehicleInfoUpdateColumnDeleteBy OperatingVehicleInfoUpdateColumn = "delete_by"
	// column name
	OperatingVehicleInfoUpdateColumnDrivingLicenseOwner OperatingVehicleInfoUpdateColumn = "driving_license_owner"
	// column name
	OperatingVehicleInfoUpdateColumnFirstOnlineTime OperatingVehicleInfoUpdateColumn = "first_online_time"
	// column name
	OperatingVehicleInfoUpdateColumnInstallationTime OperatingVehicleInfoUpdateColumn = "installation_time"
	// column name
	OperatingVehicleInfoUpdateColumnIsBd OperatingVehicleInfoUpdateColumn = "is_BD"
	// column name
	OperatingVehicleInfoUpdateColumnIsActive OperatingVehicleInfoUpdateColumn = "is_active"
	// column name
	OperatingVehicleInfoUpdateColumnIsApplayTerminalInstallation OperatingVehicleInfoUpdateColumn = "is_applay_terminal_installation"
	// column name
	OperatingVehicleInfoUpdateColumnIsBlock OperatingVehicleInfoUpdateColumn = "is_block"
	// column name
	OperatingVehicleInfoUpdateColumnIsEngineeringVehicle OperatingVehicleInfoUpdateColumn = "is_engineering_vehicle"
	// column name
	OperatingVehicleInfoUpdateColumnIsFunctionOk OperatingVehicleInfoUpdateColumn = "is_function_ok"
	// column name
	OperatingVehicleInfoUpdateColumnIsInOperatingSystem OperatingVehicleInfoUpdateColumn = "is_in_operating_system"
	// column name
	OperatingVehicleInfoUpdateColumnIsInUploadPlatform OperatingVehicleInfoUpdateColumn = "is_in_upload_platform"
	// column name
	OperatingVehicleInfoUpdateColumnIsNeedSupervise OperatingVehicleInfoUpdateColumn = "is_need_supervise"
	// column name
	OperatingVehicleInfoUpdateColumnIsSupervise OperatingVehicleInfoUpdateColumn = "is_supervise"
	// column name
	OperatingVehicleInfoUpdateColumnLastBindingTerminalTime OperatingVehicleInfoUpdateColumn = "last_binding_terminal_time"
	// column name
	OperatingVehicleInfoUpdateColumnLicensePlatePhoto OperatingVehicleInfoUpdateColumn = "license_plate_photo"
	// column name
	OperatingVehicleInfoUpdateColumnMuckTruckType OperatingVehicleInfoUpdateColumn = "muck_truck_type"
	// column name
	OperatingVehicleInfoUpdateColumnOperatingVehicleID OperatingVehicleInfoUpdateColumn = "operating_vehicle_id"
	// column name
	OperatingVehicleInfoUpdateColumnOtherPhoto OperatingVehicleInfoUpdateColumn = "other_photo"
	// column name
	OperatingVehicleInfoUpdateColumnPlatform OperatingVehicleInfoUpdateColumn = "platform"
	// column name
	OperatingVehicleInfoUpdateColumnPositionDbID OperatingVehicleInfoUpdateColumn = "position_db_id"
	// column name
	OperatingVehicleInfoUpdateColumnScrapReason OperatingVehicleInfoUpdateColumn = "scrap_reason"
	// column name
	OperatingVehicleInfoUpdateColumnScrapTime OperatingVehicleInfoUpdateColumn = "scrap_time"
	// column name
	OperatingVehicleInfoUpdateColumnScrapTimeCheck OperatingVehicleInfoUpdateColumn = "scrap_time_check"
	// column name
	OperatingVehicleInfoUpdateColumnSerialNumber OperatingVehicleInfoUpdateColumn = "serial_number"
	// column name
	OperatingVehicleInfoUpdateColumnServiceExpirationTime OperatingVehicleInfoUpdateColumn = "service_expiration_time"
	// column name
	OperatingVehicleInfoUpdateColumnSpeedModeStatus OperatingVehicleInfoUpdateColumn = "speed_mode_status"
	// column name
	OperatingVehicleInfoUpdateColumnSpeedModeStatusTime OperatingVehicleInfoUpdateColumn = "speed_mode_status_time"
	// column name
	OperatingVehicleInfoUpdateColumnTemporaryLibrary OperatingVehicleInfoUpdateColumn = "temporary_library"
	// column name
	OperatingVehicleInfoUpdateColumnTemporaryTransportBureau OperatingVehicleInfoUpdateColumn = "temporary_transport_bureau"
	// column name
	OperatingVehicleInfoUpdateColumnUpdateAt OperatingVehicleInfoUpdateColumn = "update_at"
	// column name
	OperatingVehicleInfoUpdateColumnUpdateBy OperatingVehicleInfoUpdateColumn = "update_by"
	// column name
	OperatingVehicleInfoUpdateColumnVehicleID OperatingVehicleInfoUpdateColumn = "vehicle_id"
)

var AllOperatingVehicleInfoUpdateColumn = []OperatingVehicleInfoUpdateColumn{
	OperatingVehicleInfoUpdateColumnAdministrativeRegion,
	OperatingVehicleInfoUpdateColumnAgent,
	OperatingVehicleInfoUpdateColumnContactNumber,
	OperatingVehicleInfoUpdateColumnContractTime,
	OperatingVehicleInfoUpdateColumnCreateAt,
	OperatingVehicleInfoUpdateColumnCreateBy,
	OperatingVehicleInfoUpdateColumnDeleteAt,
	OperatingVehicleInfoUpdateColumnDeleteBy,
	OperatingVehicleInfoUpdateColumnDrivingLicenseOwner,
	OperatingVehicleInfoUpdateColumnFirstOnlineTime,
	OperatingVehicleInfoUpdateColumnInstallationTime,
	OperatingVehicleInfoUpdateColumnIsBd,
	OperatingVehicleInfoUpdateColumnIsActive,
	OperatingVehicleInfoUpdateColumnIsApplayTerminalInstallation,
	OperatingVehicleInfoUpdateColumnIsBlock,
	OperatingVehicleInfoUpdateColumnIsEngineeringVehicle,
	OperatingVehicleInfoUpdateColumnIsFunctionOk,
	OperatingVehicleInfoUpdateColumnIsInOperatingSystem,
	OperatingVehicleInfoUpdateColumnIsInUploadPlatform,
	OperatingVehicleInfoUpdateColumnIsNeedSupervise,
	OperatingVehicleInfoUpdateColumnIsSupervise,
	OperatingVehicleInfoUpdateColumnLastBindingTerminalTime,
	OperatingVehicleInfoUpdateColumnLicensePlatePhoto,
	OperatingVehicleInfoUpdateColumnMuckTruckType,
	OperatingVehicleInfoUpdateColumnOperatingVehicleID,
	OperatingVehicleInfoUpdateColumnOtherPhoto,
	OperatingVehicleInfoUpdateColumnPlatform,
	OperatingVehicleInfoUpdateColumnPositionDbID,
	OperatingVehicleInfoUpdateColumnScrapReason,
	OperatingVehicleInfoUpdateColumnScrapTime,
	OperatingVehicleInfoUpdateColumnScrapTimeCheck,
	OperatingVehicleInfoUpdateColumnSerialNumber,
	OperatingVehicleInfoUpdateColumnServiceExpirationTime,
	OperatingVehicleInfoUpdateColumnSpeedModeStatus,
	OperatingVehicleInfoUpdateColumnSpeedModeStatusTime,
	OperatingVehicleInfoUpdateColumnTemporaryLibrary,
	OperatingVehicleInfoUpdateColumnTemporaryTransportBureau,
	OperatingVehicleInfoUpdateColumnUpdateAt,
	OperatingVehicleInfoUpdateColumnUpdateBy,
	OperatingVehicleInfoUpdateColumnVehicleID,
}

func (e OperatingVehicleInfoUpdateColumn) IsValid() bool {
	switch e {
	case OperatingVehicleInfoUpdateColumnAdministrativeRegion, OperatingVehicleInfoUpdateColumnAgent, OperatingVehicleInfoUpdateColumnContactNumber, OperatingVehicleInfoUpdateColumnContractTime, OperatingVehicleInfoUpdateColumnCreateAt, OperatingVehicleInfoUpdateColumnCreateBy, OperatingVehicleInfoUpdateColumnDeleteAt, OperatingVehicleInfoUpdateColumnDeleteBy, OperatingVehicleInfoUpdateColumnDrivingLicenseOwner, OperatingVehicleInfoUpdateColumnFirstOnlineTime, OperatingVehicleInfoUpdateColumnInstallationTime, OperatingVehicleInfoUpdateColumnIsBd, OperatingVehicleInfoUpdateColumnIsActive, OperatingVehicleInfoUpdateColumnIsApplayTerminalInstallation, OperatingVehicleInfoUpdateColumnIsBlock, OperatingVehicleInfoUpdateColumnIsEngineeringVehicle, OperatingVehicleInfoUpdateColumnIsFunctionOk, OperatingVehicleInfoUpdateColumnIsInOperatingSystem, OperatingVehicleInfoUpdateColumnIsInUploadPlatform, OperatingVehicleInfoUpdateColumnIsNeedSupervise, OperatingVehicleInfoUpdateColumnIsSupervise, OperatingVehicleInfoUpdateColumnLastBindingTerminalTime, OperatingVehicleInfoUpdateColumnLicensePlatePhoto, OperatingVehicleInfoUpdateColumnMuckTruckType, OperatingVehicleInfoUpdateColumnOperatingVehicleID, OperatingVehicleInfoUpdateColumnOtherPhoto, OperatingVehicleInfoUpdateColumnPlatform, OperatingVehicleInfoUpdateColumnPositionDbID, OperatingVehicleInfoUpdateColumnScrapReason, OperatingVehicleInfoUpdateColumnScrapTime, OperatingVehicleInfoUpdateColumnScrapTimeCheck, OperatingVehicleInfoUpdateColumnSerialNumber, OperatingVehicleInfoUpdateColumnServiceExpirationTime, OperatingVehicleInfoUpdateColumnSpeedModeStatus, OperatingVehicleInfoUpdateColumnSpeedModeStatusTime, OperatingVehicleInfoUpdateColumnTemporaryLibrary, OperatingVehicleInfoUpdateColumnTemporaryTransportBureau, OperatingVehicleInfoUpdateColumnUpdateAt, OperatingVehicleInfoUpdateColumnUpdateBy, OperatingVehicleInfoUpdateColumnVehicleID:
		return true
	}
	return false
}

func (e OperatingVehicleInfoUpdateColumn) String() string {
	return string(e)
}

func (e *OperatingVehicleInfoUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OperatingVehicleInfoUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid operating_vehicle_info_update_column", str)
	}
	return nil
}

func (e OperatingVehicleInfoUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// unique or primary key constraints on table "owner_info"
type OwnerInfoConstraint string

const (
	// unique or primary key constraint
	OwnerInfoConstraintOwnerInfoPkey OwnerInfoConstraint = "owner_info_pkey"
)

var AllOwnerInfoConstraint = []OwnerInfoConstraint{
	OwnerInfoConstraintOwnerInfoPkey,
}

func (e OwnerInfoConstraint) IsValid() bool {
	switch e {
	case OwnerInfoConstraintOwnerInfoPkey:
		return true
	}
	return false
}

func (e OwnerInfoConstraint) String() string {
	return string(e)
}

func (e *OwnerInfoConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OwnerInfoConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid owner_info_constraint", str)
	}
	return nil
}

func (e OwnerInfoConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// select columns of table "owner_info"
type OwnerInfoSelectColumn string

const (
	// column name
	OwnerInfoSelectColumnAddress OwnerInfoSelectColumn = "address"
	// column name
	OwnerInfoSelectColumnAgent OwnerInfoSelectColumn = "agent"
	// column name
	OwnerInfoSelectColumnCellphone OwnerInfoSelectColumn = "cellphone"
	// column name
	OwnerInfoSelectColumnCreateAt OwnerInfoSelectColumn = "create_at"
	// column name
	OwnerInfoSelectColumnCreateBy OwnerInfoSelectColumn = "create_by"
	// column name
	OwnerInfoSelectColumnDeleteAt OwnerInfoSelectColumn = "delete_at"
	// column name
	OwnerInfoSelectColumnDeleteBy OwnerInfoSelectColumn = "delete_by"
	// column name
	OwnerInfoSelectColumnDepartmentID OwnerInfoSelectColumn = "department_id"
	// column name
	OwnerInfoSelectColumnEmail OwnerInfoSelectColumn = "email"
	// column name
	OwnerInfoSelectColumnExpiryDate OwnerInfoSelectColumn = "expiry_date"
	// column name
	OwnerInfoSelectColumnID OwnerInfoSelectColumn = "id"
	// column name
	OwnerInfoSelectColumnIDNumber OwnerInfoSelectColumn = "id_number"
	// column name
	OwnerInfoSelectColumnIsDelete OwnerInfoSelectColumn = "is_delete"
	// column name
	OwnerInfoSelectColumnName OwnerInfoSelectColumn = "name"
	// column name
	OwnerInfoSelectColumnOperator OwnerInfoSelectColumn = "operator"
	// column name
	OwnerInfoSelectColumnOwnerID OwnerInfoSelectColumn = "owner_id"
	// column name
	OwnerInfoSelectColumnRemarks OwnerInfoSelectColumn = "remarks"
	// column name
	OwnerInfoSelectColumnSex OwnerInfoSelectColumn = "sex"
	// column name
	OwnerInfoSelectColumnTelephone OwnerInfoSelectColumn = "telephone"
	// column name
	OwnerInfoSelectColumnUpdateAt OwnerInfoSelectColumn = "update_at"
	// column name
	OwnerInfoSelectColumnUpdateBy OwnerInfoSelectColumn = "update_by"
)

var AllOwnerInfoSelectColumn = []OwnerInfoSelectColumn{
	OwnerInfoSelectColumnAddress,
	OwnerInfoSelectColumnAgent,
	OwnerInfoSelectColumnCellphone,
	OwnerInfoSelectColumnCreateAt,
	OwnerInfoSelectColumnCreateBy,
	OwnerInfoSelectColumnDeleteAt,
	OwnerInfoSelectColumnDeleteBy,
	OwnerInfoSelectColumnDepartmentID,
	OwnerInfoSelectColumnEmail,
	OwnerInfoSelectColumnExpiryDate,
	OwnerInfoSelectColumnID,
	OwnerInfoSelectColumnIDNumber,
	OwnerInfoSelectColumnIsDelete,
	OwnerInfoSelectColumnName,
	OwnerInfoSelectColumnOperator,
	OwnerInfoSelectColumnOwnerID,
	OwnerInfoSelectColumnRemarks,
	OwnerInfoSelectColumnSex,
	OwnerInfoSelectColumnTelephone,
	OwnerInfoSelectColumnUpdateAt,
	OwnerInfoSelectColumnUpdateBy,
}

func (e OwnerInfoSelectColumn) IsValid() bool {
	switch e {
	case OwnerInfoSelectColumnAddress, OwnerInfoSelectColumnAgent, OwnerInfoSelectColumnCellphone, OwnerInfoSelectColumnCreateAt, OwnerInfoSelectColumnCreateBy, OwnerInfoSelectColumnDeleteAt, OwnerInfoSelectColumnDeleteBy, OwnerInfoSelectColumnDepartmentID, OwnerInfoSelectColumnEmail, OwnerInfoSelectColumnExpiryDate, OwnerInfoSelectColumnID, OwnerInfoSelectColumnIDNumber, OwnerInfoSelectColumnIsDelete, OwnerInfoSelectColumnName, OwnerInfoSelectColumnOperator, OwnerInfoSelectColumnOwnerID, OwnerInfoSelectColumnRemarks, OwnerInfoSelectColumnSex, OwnerInfoSelectColumnTelephone, OwnerInfoSelectColumnUpdateAt, OwnerInfoSelectColumnUpdateBy:
		return true
	}
	return false
}

func (e OwnerInfoSelectColumn) String() string {
	return string(e)
}

func (e *OwnerInfoSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OwnerInfoSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid owner_info_select_column", str)
	}
	return nil
}

func (e OwnerInfoSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// update columns of table "owner_info"
type OwnerInfoUpdateColumn string

const (
	// column name
	OwnerInfoUpdateColumnAddress OwnerInfoUpdateColumn = "address"
	// column name
	OwnerInfoUpdateColumnAgent OwnerInfoUpdateColumn = "agent"
	// column name
	OwnerInfoUpdateColumnCellphone OwnerInfoUpdateColumn = "cellphone"
	// column name
	OwnerInfoUpdateColumnCreateAt OwnerInfoUpdateColumn = "create_at"
	// column name
	OwnerInfoUpdateColumnCreateBy OwnerInfoUpdateColumn = "create_by"
	// column name
	OwnerInfoUpdateColumnDeleteAt OwnerInfoUpdateColumn = "delete_at"
	// column name
	OwnerInfoUpdateColumnDeleteBy OwnerInfoUpdateColumn = "delete_by"
	// column name
	OwnerInfoUpdateColumnDepartmentID OwnerInfoUpdateColumn = "department_id"
	// column name
	OwnerInfoUpdateColumnEmail OwnerInfoUpdateColumn = "email"
	// column name
	OwnerInfoUpdateColumnExpiryDate OwnerInfoUpdateColumn = "expiry_date"
	// column name
	OwnerInfoUpdateColumnID OwnerInfoUpdateColumn = "id"
	// column name
	OwnerInfoUpdateColumnIDNumber OwnerInfoUpdateColumn = "id_number"
	// column name
	OwnerInfoUpdateColumnIsDelete OwnerInfoUpdateColumn = "is_delete"
	// column name
	OwnerInfoUpdateColumnName OwnerInfoUpdateColumn = "name"
	// column name
	OwnerInfoUpdateColumnOperator OwnerInfoUpdateColumn = "operator"
	// column name
	OwnerInfoUpdateColumnOwnerID OwnerInfoUpdateColumn = "owner_id"
	// column name
	OwnerInfoUpdateColumnRemarks OwnerInfoUpdateColumn = "remarks"
	// column name
	OwnerInfoUpdateColumnSex OwnerInfoUpdateColumn = "sex"
	// column name
	OwnerInfoUpdateColumnTelephone OwnerInfoUpdateColumn = "telephone"
	// column name
	OwnerInfoUpdateColumnUpdateAt OwnerInfoUpdateColumn = "update_at"
	// column name
	OwnerInfoUpdateColumnUpdateBy OwnerInfoUpdateColumn = "update_by"
)

var AllOwnerInfoUpdateColumn = []OwnerInfoUpdateColumn{
	OwnerInfoUpdateColumnAddress,
	OwnerInfoUpdateColumnAgent,
	OwnerInfoUpdateColumnCellphone,
	OwnerInfoUpdateColumnCreateAt,
	OwnerInfoUpdateColumnCreateBy,
	OwnerInfoUpdateColumnDeleteAt,
	OwnerInfoUpdateColumnDeleteBy,
	OwnerInfoUpdateColumnDepartmentID,
	OwnerInfoUpdateColumnEmail,
	OwnerInfoUpdateColumnExpiryDate,
	OwnerInfoUpdateColumnID,
	OwnerInfoUpdateColumnIDNumber,
	OwnerInfoUpdateColumnIsDelete,
	OwnerInfoUpdateColumnName,
	OwnerInfoUpdateColumnOperator,
	OwnerInfoUpdateColumnOwnerID,
	OwnerInfoUpdateColumnRemarks,
	OwnerInfoUpdateColumnSex,
	OwnerInfoUpdateColumnTelephone,
	OwnerInfoUpdateColumnUpdateAt,
	OwnerInfoUpdateColumnUpdateBy,
}

func (e OwnerInfoUpdateColumn) IsValid() bool {
	switch e {
	case OwnerInfoUpdateColumnAddress, OwnerInfoUpdateColumnAgent, OwnerInfoUpdateColumnCellphone, OwnerInfoUpdateColumnCreateAt, OwnerInfoUpdateColumnCreateBy, OwnerInfoUpdateColumnDeleteAt, OwnerInfoUpdateColumnDeleteBy, OwnerInfoUpdateColumnDepartmentID, OwnerInfoUpdateColumnEmail, OwnerInfoUpdateColumnExpiryDate, OwnerInfoUpdateColumnID, OwnerInfoUpdateColumnIDNumber, OwnerInfoUpdateColumnIsDelete, OwnerInfoUpdateColumnName, OwnerInfoUpdateColumnOperator, OwnerInfoUpdateColumnOwnerID, OwnerInfoUpdateColumnRemarks, OwnerInfoUpdateColumnSex, OwnerInfoUpdateColumnTelephone, OwnerInfoUpdateColumnUpdateAt, OwnerInfoUpdateColumnUpdateBy:
		return true
	}
	return false
}

func (e OwnerInfoUpdateColumn) String() string {
	return string(e)
}

func (e *OwnerInfoUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OwnerInfoUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid owner_info_update_column", str)
	}
	return nil
}

func (e OwnerInfoUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// unique or primary key constraints on table "vehicle_info_change_log"
type VehicleInfoChangeLogConstraint string

const (
	// unique or primary key constraint
	VehicleInfoChangeLogConstraintVehicleInfoChangeLogPkey VehicleInfoChangeLogConstraint = "vehicle_info_change_log_pkey"
)

var AllVehicleInfoChangeLogConstraint = []VehicleInfoChangeLogConstraint{
	VehicleInfoChangeLogConstraintVehicleInfoChangeLogPkey,
}

func (e VehicleInfoChangeLogConstraint) IsValid() bool {
	switch e {
	case VehicleInfoChangeLogConstraintVehicleInfoChangeLogPkey:
		return true
	}
	return false
}

func (e VehicleInfoChangeLogConstraint) String() string {
	return string(e)
}

func (e *VehicleInfoChangeLogConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleInfoChangeLogConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid vehicle_info_change_log_constraint", str)
	}
	return nil
}

func (e VehicleInfoChangeLogConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// select columns of table "vehicle_info_change_log"
type VehicleInfoChangeLogSelectColumn string

const (
	// column name
	VehicleInfoChangeLogSelectColumnBusinessScope VehicleInfoChangeLogSelectColumn = "business_scope"
	// column name
	VehicleInfoChangeLogSelectColumnCarRentalPrice VehicleInfoChangeLogSelectColumn = "car_rental_price"
	// column name
	VehicleInfoChangeLogSelectColumnCheckState VehicleInfoChangeLogSelectColumn = "check_state"
	// column name
	VehicleInfoChangeLogSelectColumnCreateAt VehicleInfoChangeLogSelectColumn = "create_at"
	// column name
	VehicleInfoChangeLogSelectColumnCreateBy VehicleInfoChangeLogSelectColumn = "create_by"
	// column name
	VehicleInfoChangeLogSelectColumnDeleteAt VehicleInfoChangeLogSelectColumn = "delete_at"
	// column name
	VehicleInfoChangeLogSelectColumnDeleteBy VehicleInfoChangeLogSelectColumn = "delete_by"
	// column name
	VehicleInfoChangeLogSelectColumnDepartmentID VehicleInfoChangeLogSelectColumn = "department_id"
	// column name
	VehicleInfoChangeLogSelectColumnDrivingLicenseePic VehicleInfoChangeLogSelectColumn = "driving_licensee_pic"
	// column name
	VehicleInfoChangeLogSelectColumnEnterpriseID VehicleInfoChangeLogSelectColumn = "enterprise_id"
	// column name
	VehicleInfoChangeLogSelectColumnHeavy VehicleInfoChangeLogSelectColumn = "heavy"
	// column name
	VehicleInfoChangeLogSelectColumnID VehicleInfoChangeLogSelectColumn = "id"
	// column name
	VehicleInfoChangeLogSelectColumnIndustryCategory VehicleInfoChangeLogSelectColumn = "industry_category"
	// column name
	VehicleInfoChangeLogSelectColumnInspectionDate VehicleInfoChangeLogSelectColumn = "inspection_date"
	// column name
	VehicleInfoChangeLogSelectColumnInsuranceCompany VehicleInfoChangeLogSelectColumn = "insurance_company"
	// column name
	VehicleInfoChangeLogSelectColumnInsuranceDate VehicleInfoChangeLogSelectColumn = "insurance_date"
	// column name
	VehicleInfoChangeLogSelectColumnIsActive VehicleInfoChangeLogSelectColumn = "is_active"
	// column name
	VehicleInfoChangeLogSelectColumnIsApplyInstallTerminal VehicleInfoChangeLogSelectColumn = "is_apply_install_terminal"
	// column name
	VehicleInfoChangeLogSelectColumnIsComplete VehicleInfoChangeLogSelectColumn = "is_complete"
	// column name
	VehicleInfoChangeLogSelectColumnIsDelete VehicleInfoChangeLogSelectColumn = "is_delete"
	// column name
	VehicleInfoChangeLogSelectColumnIsImport VehicleInfoChangeLogSelectColumn = "is_import"
	// column name
	VehicleInfoChangeLogSelectColumnIsInput VehicleInfoChangeLogSelectColumn = "is_input"
	// column name
	VehicleInfoChangeLogSelectColumnIsUploadProvince VehicleInfoChangeLogSelectColumn = "is_upload_province"
	// column name
	VehicleInfoChangeLogSelectColumnLicensePlateColor VehicleInfoChangeLogSelectColumn = "license_plate_color"
	// column name
	VehicleInfoChangeLogSelectColumnLicensePlateNumber VehicleInfoChangeLogSelectColumn = "license_plate_number"
	// column name
	VehicleInfoChangeLogSelectColumnLicensePlateType VehicleInfoChangeLogSelectColumn = "license_plate_type"
	// column name
	VehicleInfoChangeLogSelectColumnMuckTruckID VehicleInfoChangeLogSelectColumn = "muck_truck_id"
	// column name
	VehicleInfoChangeLogSelectColumnOperatingRoute VehicleInfoChangeLogSelectColumn = "operating_route"
	// column name
	VehicleInfoChangeLogSelectColumnOperatingState VehicleInfoChangeLogSelectColumn = "operating_state"
	// column name
	VehicleInfoChangeLogSelectColumnOperatingType VehicleInfoChangeLogSelectColumn = "operating_type"
	// column name
	VehicleInfoChangeLogSelectColumnOperatingVehicleID VehicleInfoChangeLogSelectColumn = "operating_vehicle_id"
	// column name
	VehicleInfoChangeLogSelectColumnOwner VehicleInfoChangeLogSelectColumn = "owner"
	// column name
	VehicleInfoChangeLogSelectColumnQuasiDrivingModels VehicleInfoChangeLogSelectColumn = "quasi_driving_models"
	// column name
	VehicleInfoChangeLogSelectColumnRecordAt VehicleInfoChangeLogSelectColumn = "record_at"
	// column name
	VehicleInfoChangeLogSelectColumnRecordBy VehicleInfoChangeLogSelectColumn = "record_by"
	// column name
	VehicleInfoChangeLogSelectColumnRemarkIn VehicleInfoChangeLogSelectColumn = "remark_in"
	// column name
	VehicleInfoChangeLogSelectColumnRemarks VehicleInfoChangeLogSelectColumn = "remarks"
	// column name
	VehicleInfoChangeLogSelectColumnRetirementDate VehicleInfoChangeLogSelectColumn = "retirement_date"
	// column name
	VehicleInfoChangeLogSelectColumnRoadTransportLicenseNumber VehicleInfoChangeLogSelectColumn = "road_transport_license_number"
	// column name
	VehicleInfoChangeLogSelectColumnSeats VehicleInfoChangeLogSelectColumn = "seats"
	// column name
	VehicleInfoChangeLogSelectColumnTerminalID VehicleInfoChangeLogSelectColumn = "terminal_id"
	// column name
	VehicleInfoChangeLogSelectColumnUpdateAt VehicleInfoChangeLogSelectColumn = "update_at"
	// column name
	VehicleInfoChangeLogSelectColumnUpdateBy VehicleInfoChangeLogSelectColumn = "update_by"
	// column name
	VehicleInfoChangeLogSelectColumnUpdateTimeIn VehicleInfoChangeLogSelectColumn = "update_time_in"
	// column name
	VehicleInfoChangeLogSelectColumnUseNature VehicleInfoChangeLogSelectColumn = "use_nature"
	// column name
	VehicleInfoChangeLogSelectColumnVehicleBrand VehicleInfoChangeLogSelectColumn = "vehicle_brand"
	// column name
	VehicleInfoChangeLogSelectColumnVehicleDisplacement VehicleInfoChangeLogSelectColumn = "vehicle_displacement"
	// column name
	VehicleInfoChangeLogSelectColumnVehicleIdentificationNumber VehicleInfoChangeLogSelectColumn = "vehicle_identification_number"
	// column name
	VehicleInfoChangeLogSelectColumnVehicleInfoChangeID VehicleInfoChangeLogSelectColumn = "vehicle_info_change_id"
	// column name
	VehicleInfoChangeLogSelectColumnVehicleMaintenances VehicleInfoChangeLogSelectColumn = "vehicle_maintenances"
	// column name
	VehicleInfoChangeLogSelectColumnVehicleManager VehicleInfoChangeLogSelectColumn = "vehicle_manager"
	// column name
	VehicleInfoChangeLogSelectColumnVehicleManagerIDCard VehicleInfoChangeLogSelectColumn = "vehicle_manager_id_card"
	// column name
	VehicleInfoChangeLogSelectColumnVehicleManagerPhone VehicleInfoChangeLogSelectColumn = "vehicle_manager_phone"
	// column name
	VehicleInfoChangeLogSelectColumnVehicleState VehicleInfoChangeLogSelectColumn = "vehicle_state"
	// column name
	VehicleInfoChangeLogSelectColumnVehicleType VehicleInfoChangeLogSelectColumn = "vehicle_type"
)

var AllVehicleInfoChangeLogSelectColumn = []VehicleInfoChangeLogSelectColumn{
	VehicleInfoChangeLogSelectColumnBusinessScope,
	VehicleInfoChangeLogSelectColumnCarRentalPrice,
	VehicleInfoChangeLogSelectColumnCheckState,
	VehicleInfoChangeLogSelectColumnCreateAt,
	VehicleInfoChangeLogSelectColumnCreateBy,
	VehicleInfoChangeLogSelectColumnDeleteAt,
	VehicleInfoChangeLogSelectColumnDeleteBy,
	VehicleInfoChangeLogSelectColumnDepartmentID,
	VehicleInfoChangeLogSelectColumnDrivingLicenseePic,
	VehicleInfoChangeLogSelectColumnEnterpriseID,
	VehicleInfoChangeLogSelectColumnHeavy,
	VehicleInfoChangeLogSelectColumnID,
	VehicleInfoChangeLogSelectColumnIndustryCategory,
	VehicleInfoChangeLogSelectColumnInspectionDate,
	VehicleInfoChangeLogSelectColumnInsuranceCompany,
	VehicleInfoChangeLogSelectColumnInsuranceDate,
	VehicleInfoChangeLogSelectColumnIsActive,
	VehicleInfoChangeLogSelectColumnIsApplyInstallTerminal,
	VehicleInfoChangeLogSelectColumnIsComplete,
	VehicleInfoChangeLogSelectColumnIsDelete,
	VehicleInfoChangeLogSelectColumnIsImport,
	VehicleInfoChangeLogSelectColumnIsInput,
	VehicleInfoChangeLogSelectColumnIsUploadProvince,
	VehicleInfoChangeLogSelectColumnLicensePlateColor,
	VehicleInfoChangeLogSelectColumnLicensePlateNumber,
	VehicleInfoChangeLogSelectColumnLicensePlateType,
	VehicleInfoChangeLogSelectColumnMuckTruckID,
	VehicleInfoChangeLogSelectColumnOperatingRoute,
	VehicleInfoChangeLogSelectColumnOperatingState,
	VehicleInfoChangeLogSelectColumnOperatingType,
	VehicleInfoChangeLogSelectColumnOperatingVehicleID,
	VehicleInfoChangeLogSelectColumnOwner,
	VehicleInfoChangeLogSelectColumnQuasiDrivingModels,
	VehicleInfoChangeLogSelectColumnRecordAt,
	VehicleInfoChangeLogSelectColumnRecordBy,
	VehicleInfoChangeLogSelectColumnRemarkIn,
	VehicleInfoChangeLogSelectColumnRemarks,
	VehicleInfoChangeLogSelectColumnRetirementDate,
	VehicleInfoChangeLogSelectColumnRoadTransportLicenseNumber,
	VehicleInfoChangeLogSelectColumnSeats,
	VehicleInfoChangeLogSelectColumnTerminalID,
	VehicleInfoChangeLogSelectColumnUpdateAt,
	VehicleInfoChangeLogSelectColumnUpdateBy,
	VehicleInfoChangeLogSelectColumnUpdateTimeIn,
	VehicleInfoChangeLogSelectColumnUseNature,
	VehicleInfoChangeLogSelectColumnVehicleBrand,
	VehicleInfoChangeLogSelectColumnVehicleDisplacement,
	VehicleInfoChangeLogSelectColumnVehicleIdentificationNumber,
	VehicleInfoChangeLogSelectColumnVehicleInfoChangeID,
	VehicleInfoChangeLogSelectColumnVehicleMaintenances,
	VehicleInfoChangeLogSelectColumnVehicleManager,
	VehicleInfoChangeLogSelectColumnVehicleManagerIDCard,
	VehicleInfoChangeLogSelectColumnVehicleManagerPhone,
	VehicleInfoChangeLogSelectColumnVehicleState,
	VehicleInfoChangeLogSelectColumnVehicleType,
}

func (e VehicleInfoChangeLogSelectColumn) IsValid() bool {
	switch e {
	case VehicleInfoChangeLogSelectColumnBusinessScope, VehicleInfoChangeLogSelectColumnCarRentalPrice, VehicleInfoChangeLogSelectColumnCheckState, VehicleInfoChangeLogSelectColumnCreateAt, VehicleInfoChangeLogSelectColumnCreateBy, VehicleInfoChangeLogSelectColumnDeleteAt, VehicleInfoChangeLogSelectColumnDeleteBy, VehicleInfoChangeLogSelectColumnDepartmentID, VehicleInfoChangeLogSelectColumnDrivingLicenseePic, VehicleInfoChangeLogSelectColumnEnterpriseID, VehicleInfoChangeLogSelectColumnHeavy, VehicleInfoChangeLogSelectColumnID, VehicleInfoChangeLogSelectColumnIndustryCategory, VehicleInfoChangeLogSelectColumnInspectionDate, VehicleInfoChangeLogSelectColumnInsuranceCompany, VehicleInfoChangeLogSelectColumnInsuranceDate, VehicleInfoChangeLogSelectColumnIsActive, VehicleInfoChangeLogSelectColumnIsApplyInstallTerminal, VehicleInfoChangeLogSelectColumnIsComplete, VehicleInfoChangeLogSelectColumnIsDelete, VehicleInfoChangeLogSelectColumnIsImport, VehicleInfoChangeLogSelectColumnIsInput, VehicleInfoChangeLogSelectColumnIsUploadProvince, VehicleInfoChangeLogSelectColumnLicensePlateColor, VehicleInfoChangeLogSelectColumnLicensePlateNumber, VehicleInfoChangeLogSelectColumnLicensePlateType, VehicleInfoChangeLogSelectColumnMuckTruckID, VehicleInfoChangeLogSelectColumnOperatingRoute, VehicleInfoChangeLogSelectColumnOperatingState, VehicleInfoChangeLogSelectColumnOperatingType, VehicleInfoChangeLogSelectColumnOperatingVehicleID, VehicleInfoChangeLogSelectColumnOwner, VehicleInfoChangeLogSelectColumnQuasiDrivingModels, VehicleInfoChangeLogSelectColumnRecordAt, VehicleInfoChangeLogSelectColumnRecordBy, VehicleInfoChangeLogSelectColumnRemarkIn, VehicleInfoChangeLogSelectColumnRemarks, VehicleInfoChangeLogSelectColumnRetirementDate, VehicleInfoChangeLogSelectColumnRoadTransportLicenseNumber, VehicleInfoChangeLogSelectColumnSeats, VehicleInfoChangeLogSelectColumnTerminalID, VehicleInfoChangeLogSelectColumnUpdateAt, VehicleInfoChangeLogSelectColumnUpdateBy, VehicleInfoChangeLogSelectColumnUpdateTimeIn, VehicleInfoChangeLogSelectColumnUseNature, VehicleInfoChangeLogSelectColumnVehicleBrand, VehicleInfoChangeLogSelectColumnVehicleDisplacement, VehicleInfoChangeLogSelectColumnVehicleIdentificationNumber, VehicleInfoChangeLogSelectColumnVehicleInfoChangeID, VehicleInfoChangeLogSelectColumnVehicleMaintenances, VehicleInfoChangeLogSelectColumnVehicleManager, VehicleInfoChangeLogSelectColumnVehicleManagerIDCard, VehicleInfoChangeLogSelectColumnVehicleManagerPhone, VehicleInfoChangeLogSelectColumnVehicleState, VehicleInfoChangeLogSelectColumnVehicleType:
		return true
	}
	return false
}

func (e VehicleInfoChangeLogSelectColumn) String() string {
	return string(e)
}

func (e *VehicleInfoChangeLogSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleInfoChangeLogSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid vehicle_info_change_log_select_column", str)
	}
	return nil
}

func (e VehicleInfoChangeLogSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// update columns of table "vehicle_info_change_log"
type VehicleInfoChangeLogUpdateColumn string

const (
	// column name
	VehicleInfoChangeLogUpdateColumnBusinessScope VehicleInfoChangeLogUpdateColumn = "business_scope"
	// column name
	VehicleInfoChangeLogUpdateColumnCarRentalPrice VehicleInfoChangeLogUpdateColumn = "car_rental_price"
	// column name
	VehicleInfoChangeLogUpdateColumnCheckState VehicleInfoChangeLogUpdateColumn = "check_state"
	// column name
	VehicleInfoChangeLogUpdateColumnCreateAt VehicleInfoChangeLogUpdateColumn = "create_at"
	// column name
	VehicleInfoChangeLogUpdateColumnCreateBy VehicleInfoChangeLogUpdateColumn = "create_by"
	// column name
	VehicleInfoChangeLogUpdateColumnDeleteAt VehicleInfoChangeLogUpdateColumn = "delete_at"
	// column name
	VehicleInfoChangeLogUpdateColumnDeleteBy VehicleInfoChangeLogUpdateColumn = "delete_by"
	// column name
	VehicleInfoChangeLogUpdateColumnDepartmentID VehicleInfoChangeLogUpdateColumn = "department_id"
	// column name
	VehicleInfoChangeLogUpdateColumnDrivingLicenseePic VehicleInfoChangeLogUpdateColumn = "driving_licensee_pic"
	// column name
	VehicleInfoChangeLogUpdateColumnEnterpriseID VehicleInfoChangeLogUpdateColumn = "enterprise_id"
	// column name
	VehicleInfoChangeLogUpdateColumnHeavy VehicleInfoChangeLogUpdateColumn = "heavy"
	// column name
	VehicleInfoChangeLogUpdateColumnID VehicleInfoChangeLogUpdateColumn = "id"
	// column name
	VehicleInfoChangeLogUpdateColumnIndustryCategory VehicleInfoChangeLogUpdateColumn = "industry_category"
	// column name
	VehicleInfoChangeLogUpdateColumnInspectionDate VehicleInfoChangeLogUpdateColumn = "inspection_date"
	// column name
	VehicleInfoChangeLogUpdateColumnInsuranceCompany VehicleInfoChangeLogUpdateColumn = "insurance_company"
	// column name
	VehicleInfoChangeLogUpdateColumnInsuranceDate VehicleInfoChangeLogUpdateColumn = "insurance_date"
	// column name
	VehicleInfoChangeLogUpdateColumnIsActive VehicleInfoChangeLogUpdateColumn = "is_active"
	// column name
	VehicleInfoChangeLogUpdateColumnIsApplyInstallTerminal VehicleInfoChangeLogUpdateColumn = "is_apply_install_terminal"
	// column name
	VehicleInfoChangeLogUpdateColumnIsComplete VehicleInfoChangeLogUpdateColumn = "is_complete"
	// column name
	VehicleInfoChangeLogUpdateColumnIsDelete VehicleInfoChangeLogUpdateColumn = "is_delete"
	// column name
	VehicleInfoChangeLogUpdateColumnIsImport VehicleInfoChangeLogUpdateColumn = "is_import"
	// column name
	VehicleInfoChangeLogUpdateColumnIsInput VehicleInfoChangeLogUpdateColumn = "is_input"
	// column name
	VehicleInfoChangeLogUpdateColumnIsUploadProvince VehicleInfoChangeLogUpdateColumn = "is_upload_province"
	// column name
	VehicleInfoChangeLogUpdateColumnLicensePlateColor VehicleInfoChangeLogUpdateColumn = "license_plate_color"
	// column name
	VehicleInfoChangeLogUpdateColumnLicensePlateNumber VehicleInfoChangeLogUpdateColumn = "license_plate_number"
	// column name
	VehicleInfoChangeLogUpdateColumnLicensePlateType VehicleInfoChangeLogUpdateColumn = "license_plate_type"
	// column name
	VehicleInfoChangeLogUpdateColumnMuckTruckID VehicleInfoChangeLogUpdateColumn = "muck_truck_id"
	// column name
	VehicleInfoChangeLogUpdateColumnOperatingRoute VehicleInfoChangeLogUpdateColumn = "operating_route"
	// column name
	VehicleInfoChangeLogUpdateColumnOperatingState VehicleInfoChangeLogUpdateColumn = "operating_state"
	// column name
	VehicleInfoChangeLogUpdateColumnOperatingType VehicleInfoChangeLogUpdateColumn = "operating_type"
	// column name
	VehicleInfoChangeLogUpdateColumnOperatingVehicleID VehicleInfoChangeLogUpdateColumn = "operating_vehicle_id"
	// column name
	VehicleInfoChangeLogUpdateColumnOwner VehicleInfoChangeLogUpdateColumn = "owner"
	// column name
	VehicleInfoChangeLogUpdateColumnQuasiDrivingModels VehicleInfoChangeLogUpdateColumn = "quasi_driving_models"
	// column name
	VehicleInfoChangeLogUpdateColumnRecordAt VehicleInfoChangeLogUpdateColumn = "record_at"
	// column name
	VehicleInfoChangeLogUpdateColumnRecordBy VehicleInfoChangeLogUpdateColumn = "record_by"
	// column name
	VehicleInfoChangeLogUpdateColumnRemarkIn VehicleInfoChangeLogUpdateColumn = "remark_in"
	// column name
	VehicleInfoChangeLogUpdateColumnRemarks VehicleInfoChangeLogUpdateColumn = "remarks"
	// column name
	VehicleInfoChangeLogUpdateColumnRetirementDate VehicleInfoChangeLogUpdateColumn = "retirement_date"
	// column name
	VehicleInfoChangeLogUpdateColumnRoadTransportLicenseNumber VehicleInfoChangeLogUpdateColumn = "road_transport_license_number"
	// column name
	VehicleInfoChangeLogUpdateColumnSeats VehicleInfoChangeLogUpdateColumn = "seats"
	// column name
	VehicleInfoChangeLogUpdateColumnTerminalID VehicleInfoChangeLogUpdateColumn = "terminal_id"
	// column name
	VehicleInfoChangeLogUpdateColumnUpdateAt VehicleInfoChangeLogUpdateColumn = "update_at"
	// column name
	VehicleInfoChangeLogUpdateColumnUpdateBy VehicleInfoChangeLogUpdateColumn = "update_by"
	// column name
	VehicleInfoChangeLogUpdateColumnUpdateTimeIn VehicleInfoChangeLogUpdateColumn = "update_time_in"
	// column name
	VehicleInfoChangeLogUpdateColumnUseNature VehicleInfoChangeLogUpdateColumn = "use_nature"
	// column name
	VehicleInfoChangeLogUpdateColumnVehicleBrand VehicleInfoChangeLogUpdateColumn = "vehicle_brand"
	// column name
	VehicleInfoChangeLogUpdateColumnVehicleDisplacement VehicleInfoChangeLogUpdateColumn = "vehicle_displacement"
	// column name
	VehicleInfoChangeLogUpdateColumnVehicleIdentificationNumber VehicleInfoChangeLogUpdateColumn = "vehicle_identification_number"
	// column name
	VehicleInfoChangeLogUpdateColumnVehicleInfoChangeID VehicleInfoChangeLogUpdateColumn = "vehicle_info_change_id"
	// column name
	VehicleInfoChangeLogUpdateColumnVehicleMaintenances VehicleInfoChangeLogUpdateColumn = "vehicle_maintenances"
	// column name
	VehicleInfoChangeLogUpdateColumnVehicleManager VehicleInfoChangeLogUpdateColumn = "vehicle_manager"
	// column name
	VehicleInfoChangeLogUpdateColumnVehicleManagerIDCard VehicleInfoChangeLogUpdateColumn = "vehicle_manager_id_card"
	// column name
	VehicleInfoChangeLogUpdateColumnVehicleManagerPhone VehicleInfoChangeLogUpdateColumn = "vehicle_manager_phone"
	// column name
	VehicleInfoChangeLogUpdateColumnVehicleState VehicleInfoChangeLogUpdateColumn = "vehicle_state"
	// column name
	VehicleInfoChangeLogUpdateColumnVehicleType VehicleInfoChangeLogUpdateColumn = "vehicle_type"
)

var AllVehicleInfoChangeLogUpdateColumn = []VehicleInfoChangeLogUpdateColumn{
	VehicleInfoChangeLogUpdateColumnBusinessScope,
	VehicleInfoChangeLogUpdateColumnCarRentalPrice,
	VehicleInfoChangeLogUpdateColumnCheckState,
	VehicleInfoChangeLogUpdateColumnCreateAt,
	VehicleInfoChangeLogUpdateColumnCreateBy,
	VehicleInfoChangeLogUpdateColumnDeleteAt,
	VehicleInfoChangeLogUpdateColumnDeleteBy,
	VehicleInfoChangeLogUpdateColumnDepartmentID,
	VehicleInfoChangeLogUpdateColumnDrivingLicenseePic,
	VehicleInfoChangeLogUpdateColumnEnterpriseID,
	VehicleInfoChangeLogUpdateColumnHeavy,
	VehicleInfoChangeLogUpdateColumnID,
	VehicleInfoChangeLogUpdateColumnIndustryCategory,
	VehicleInfoChangeLogUpdateColumnInspectionDate,
	VehicleInfoChangeLogUpdateColumnInsuranceCompany,
	VehicleInfoChangeLogUpdateColumnInsuranceDate,
	VehicleInfoChangeLogUpdateColumnIsActive,
	VehicleInfoChangeLogUpdateColumnIsApplyInstallTerminal,
	VehicleInfoChangeLogUpdateColumnIsComplete,
	VehicleInfoChangeLogUpdateColumnIsDelete,
	VehicleInfoChangeLogUpdateColumnIsImport,
	VehicleInfoChangeLogUpdateColumnIsInput,
	VehicleInfoChangeLogUpdateColumnIsUploadProvince,
	VehicleInfoChangeLogUpdateColumnLicensePlateColor,
	VehicleInfoChangeLogUpdateColumnLicensePlateNumber,
	VehicleInfoChangeLogUpdateColumnLicensePlateType,
	VehicleInfoChangeLogUpdateColumnMuckTruckID,
	VehicleInfoChangeLogUpdateColumnOperatingRoute,
	VehicleInfoChangeLogUpdateColumnOperatingState,
	VehicleInfoChangeLogUpdateColumnOperatingType,
	VehicleInfoChangeLogUpdateColumnOperatingVehicleID,
	VehicleInfoChangeLogUpdateColumnOwner,
	VehicleInfoChangeLogUpdateColumnQuasiDrivingModels,
	VehicleInfoChangeLogUpdateColumnRecordAt,
	VehicleInfoChangeLogUpdateColumnRecordBy,
	VehicleInfoChangeLogUpdateColumnRemarkIn,
	VehicleInfoChangeLogUpdateColumnRemarks,
	VehicleInfoChangeLogUpdateColumnRetirementDate,
	VehicleInfoChangeLogUpdateColumnRoadTransportLicenseNumber,
	VehicleInfoChangeLogUpdateColumnSeats,
	VehicleInfoChangeLogUpdateColumnTerminalID,
	VehicleInfoChangeLogUpdateColumnUpdateAt,
	VehicleInfoChangeLogUpdateColumnUpdateBy,
	VehicleInfoChangeLogUpdateColumnUpdateTimeIn,
	VehicleInfoChangeLogUpdateColumnUseNature,
	VehicleInfoChangeLogUpdateColumnVehicleBrand,
	VehicleInfoChangeLogUpdateColumnVehicleDisplacement,
	VehicleInfoChangeLogUpdateColumnVehicleIdentificationNumber,
	VehicleInfoChangeLogUpdateColumnVehicleInfoChangeID,
	VehicleInfoChangeLogUpdateColumnVehicleMaintenances,
	VehicleInfoChangeLogUpdateColumnVehicleManager,
	VehicleInfoChangeLogUpdateColumnVehicleManagerIDCard,
	VehicleInfoChangeLogUpdateColumnVehicleManagerPhone,
	VehicleInfoChangeLogUpdateColumnVehicleState,
	VehicleInfoChangeLogUpdateColumnVehicleType,
}

func (e VehicleInfoChangeLogUpdateColumn) IsValid() bool {
	switch e {
	case VehicleInfoChangeLogUpdateColumnBusinessScope, VehicleInfoChangeLogUpdateColumnCarRentalPrice, VehicleInfoChangeLogUpdateColumnCheckState, VehicleInfoChangeLogUpdateColumnCreateAt, VehicleInfoChangeLogUpdateColumnCreateBy, VehicleInfoChangeLogUpdateColumnDeleteAt, VehicleInfoChangeLogUpdateColumnDeleteBy, VehicleInfoChangeLogUpdateColumnDepartmentID, VehicleInfoChangeLogUpdateColumnDrivingLicenseePic, VehicleInfoChangeLogUpdateColumnEnterpriseID, VehicleInfoChangeLogUpdateColumnHeavy, VehicleInfoChangeLogUpdateColumnID, VehicleInfoChangeLogUpdateColumnIndustryCategory, VehicleInfoChangeLogUpdateColumnInspectionDate, VehicleInfoChangeLogUpdateColumnInsuranceCompany, VehicleInfoChangeLogUpdateColumnInsuranceDate, VehicleInfoChangeLogUpdateColumnIsActive, VehicleInfoChangeLogUpdateColumnIsApplyInstallTerminal, VehicleInfoChangeLogUpdateColumnIsComplete, VehicleInfoChangeLogUpdateColumnIsDelete, VehicleInfoChangeLogUpdateColumnIsImport, VehicleInfoChangeLogUpdateColumnIsInput, VehicleInfoChangeLogUpdateColumnIsUploadProvince, VehicleInfoChangeLogUpdateColumnLicensePlateColor, VehicleInfoChangeLogUpdateColumnLicensePlateNumber, VehicleInfoChangeLogUpdateColumnLicensePlateType, VehicleInfoChangeLogUpdateColumnMuckTruckID, VehicleInfoChangeLogUpdateColumnOperatingRoute, VehicleInfoChangeLogUpdateColumnOperatingState, VehicleInfoChangeLogUpdateColumnOperatingType, VehicleInfoChangeLogUpdateColumnOperatingVehicleID, VehicleInfoChangeLogUpdateColumnOwner, VehicleInfoChangeLogUpdateColumnQuasiDrivingModels, VehicleInfoChangeLogUpdateColumnRecordAt, VehicleInfoChangeLogUpdateColumnRecordBy, VehicleInfoChangeLogUpdateColumnRemarkIn, VehicleInfoChangeLogUpdateColumnRemarks, VehicleInfoChangeLogUpdateColumnRetirementDate, VehicleInfoChangeLogUpdateColumnRoadTransportLicenseNumber, VehicleInfoChangeLogUpdateColumnSeats, VehicleInfoChangeLogUpdateColumnTerminalID, VehicleInfoChangeLogUpdateColumnUpdateAt, VehicleInfoChangeLogUpdateColumnUpdateBy, VehicleInfoChangeLogUpdateColumnUpdateTimeIn, VehicleInfoChangeLogUpdateColumnUseNature, VehicleInfoChangeLogUpdateColumnVehicleBrand, VehicleInfoChangeLogUpdateColumnVehicleDisplacement, VehicleInfoChangeLogUpdateColumnVehicleIdentificationNumber, VehicleInfoChangeLogUpdateColumnVehicleInfoChangeID, VehicleInfoChangeLogUpdateColumnVehicleMaintenances, VehicleInfoChangeLogUpdateColumnVehicleManager, VehicleInfoChangeLogUpdateColumnVehicleManagerIDCard, VehicleInfoChangeLogUpdateColumnVehicleManagerPhone, VehicleInfoChangeLogUpdateColumnVehicleState, VehicleInfoChangeLogUpdateColumnVehicleType:
		return true
	}
	return false
}

func (e VehicleInfoChangeLogUpdateColumn) String() string {
	return string(e)
}

func (e *VehicleInfoChangeLogUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleInfoChangeLogUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid vehicle_info_change_log_update_column", str)
	}
	return nil
}

func (e VehicleInfoChangeLogUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// unique or primary key constraints on table "vehicle_info"
type VehicleInfoConstraint string

const (
	// unique or primary key constraint
	VehicleInfoConstraintVehicleInfoPkey VehicleInfoConstraint = "vehicle_info_pkey"
)

var AllVehicleInfoConstraint = []VehicleInfoConstraint{
	VehicleInfoConstraintVehicleInfoPkey,
}

func (e VehicleInfoConstraint) IsValid() bool {
	switch e {
	case VehicleInfoConstraintVehicleInfoPkey:
		return true
	}
	return false
}

func (e VehicleInfoConstraint) String() string {
	return string(e)
}

func (e *VehicleInfoConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleInfoConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid vehicle_info_constraint", str)
	}
	return nil
}

func (e VehicleInfoConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// select columns of table "vehicle_info"
type VehicleInfoSelectColumn string

const (
	// column name
	VehicleInfoSelectColumnBusinessScope VehicleInfoSelectColumn = "business_scope"
	// column name
	VehicleInfoSelectColumnCarRentalPrice VehicleInfoSelectColumn = "car_rental_price"
	// column name
	VehicleInfoSelectColumnCheckState VehicleInfoSelectColumn = "check_state"
	// column name
	VehicleInfoSelectColumnCreateAt VehicleInfoSelectColumn = "create_at"
	// column name
	VehicleInfoSelectColumnCreateBy VehicleInfoSelectColumn = "create_by"
	// column name
	VehicleInfoSelectColumnDeleteAt VehicleInfoSelectColumn = "delete_at"
	// column name
	VehicleInfoSelectColumnDeleteBy VehicleInfoSelectColumn = "delete_by"
	// column name
	VehicleInfoSelectColumnDepartmentID VehicleInfoSelectColumn = "department_id"
	// column name
	VehicleInfoSelectColumnDrivingLicenseePic VehicleInfoSelectColumn = "driving_licensee_pic"
	// column name
	VehicleInfoSelectColumnEnterpriseID VehicleInfoSelectColumn = "enterprise_id"
	// column name
	VehicleInfoSelectColumnHeavy VehicleInfoSelectColumn = "heavy"
	// column name
	VehicleInfoSelectColumnID VehicleInfoSelectColumn = "id"
	// column name
	VehicleInfoSelectColumnIndustryCategory VehicleInfoSelectColumn = "industry_category"
	// column name
	VehicleInfoSelectColumnInspectionDate VehicleInfoSelectColumn = "inspection_date"
	// column name
	VehicleInfoSelectColumnInsuranceCompany VehicleInfoSelectColumn = "insurance_company"
	// column name
	VehicleInfoSelectColumnInsuranceDate VehicleInfoSelectColumn = "insurance_date"
	// column name
	VehicleInfoSelectColumnIsActive VehicleInfoSelectColumn = "is_active"
	// column name
	VehicleInfoSelectColumnIsApplyInstallTerminal VehicleInfoSelectColumn = "is_apply_install_terminal"
	// column name
	VehicleInfoSelectColumnIsComplete VehicleInfoSelectColumn = "is_complete"
	// column name
	VehicleInfoSelectColumnIsDelete VehicleInfoSelectColumn = "is_delete"
	// column name
	VehicleInfoSelectColumnIsImport VehicleInfoSelectColumn = "is_import"
	// column name
	VehicleInfoSelectColumnIsInput VehicleInfoSelectColumn = "is_input"
	// column name
	VehicleInfoSelectColumnIsUploadProvince VehicleInfoSelectColumn = "is_upload_province"
	// column name
	VehicleInfoSelectColumnLicensePlateColor VehicleInfoSelectColumn = "license_plate_color"
	// column name
	VehicleInfoSelectColumnLicensePlateNumber VehicleInfoSelectColumn = "license_plate_number"
	// column name
	VehicleInfoSelectColumnLicensePlateType VehicleInfoSelectColumn = "license_plate_type"
	// column name
	VehicleInfoSelectColumnMuckTruckID VehicleInfoSelectColumn = "muck_truck_id"
	// column name
	VehicleInfoSelectColumnOperatingRoute VehicleInfoSelectColumn = "operating_route"
	// column name
	VehicleInfoSelectColumnOperatingState VehicleInfoSelectColumn = "operating_state"
	// column name
	VehicleInfoSelectColumnOperatingType VehicleInfoSelectColumn = "operating_type"
	// column name
	VehicleInfoSelectColumnOperatingVehicleID VehicleInfoSelectColumn = "operating_vehicle_id"
	// column name
	VehicleInfoSelectColumnOwner VehicleInfoSelectColumn = "owner"
	// column name
	VehicleInfoSelectColumnQuasiDrivingModels VehicleInfoSelectColumn = "quasi_driving_models"
	// column name
	VehicleInfoSelectColumnRecordAt VehicleInfoSelectColumn = "record_at"
	// column name
	VehicleInfoSelectColumnRecordBy VehicleInfoSelectColumn = "record_by"
	// column name
	VehicleInfoSelectColumnRemarkIn VehicleInfoSelectColumn = "remark_in"
	// column name
	VehicleInfoSelectColumnRemarks VehicleInfoSelectColumn = "remarks"
	// column name
	VehicleInfoSelectColumnRetirementDate VehicleInfoSelectColumn = "retirement_date"
	// column name
	VehicleInfoSelectColumnRoadTransportLicenseNumber VehicleInfoSelectColumn = "road_transport_license_number"
	// column name
	VehicleInfoSelectColumnSeats VehicleInfoSelectColumn = "seats"
	// column name
	VehicleInfoSelectColumnTerminalID VehicleInfoSelectColumn = "terminal_id"
	// column name
	VehicleInfoSelectColumnUpdateAt VehicleInfoSelectColumn = "update_at"
	// column name
	VehicleInfoSelectColumnUpdateBy VehicleInfoSelectColumn = "update_by"
	// column name
	VehicleInfoSelectColumnUpdateTimeIn VehicleInfoSelectColumn = "update_time_in"
	// column name
	VehicleInfoSelectColumnUseNature VehicleInfoSelectColumn = "use_nature"
	// column name
	VehicleInfoSelectColumnVehicleBrand VehicleInfoSelectColumn = "vehicle_brand"
	// column name
	VehicleInfoSelectColumnVehicleDisplacement VehicleInfoSelectColumn = "vehicle_displacement"
	// column name
	VehicleInfoSelectColumnVehicleID VehicleInfoSelectColumn = "vehicle_id"
	// column name
	VehicleInfoSelectColumnVehicleIdentificationNumber VehicleInfoSelectColumn = "vehicle_identification_number"
	// column name
	VehicleInfoSelectColumnVehicleMaintenances VehicleInfoSelectColumn = "vehicle_maintenances"
	// column name
	VehicleInfoSelectColumnVehicleManager VehicleInfoSelectColumn = "vehicle_manager"
	// column name
	VehicleInfoSelectColumnVehicleManagerIDCard VehicleInfoSelectColumn = "vehicle_manager_id_card"
	// column name
	VehicleInfoSelectColumnVehicleManagerPhone VehicleInfoSelectColumn = "vehicle_manager_phone"
	// column name
	VehicleInfoSelectColumnVehicleState VehicleInfoSelectColumn = "vehicle_state"
	// column name
	VehicleInfoSelectColumnVehicleType VehicleInfoSelectColumn = "vehicle_type"
)

var AllVehicleInfoSelectColumn = []VehicleInfoSelectColumn{
	VehicleInfoSelectColumnBusinessScope,
	VehicleInfoSelectColumnCarRentalPrice,
	VehicleInfoSelectColumnCheckState,
	VehicleInfoSelectColumnCreateAt,
	VehicleInfoSelectColumnCreateBy,
	VehicleInfoSelectColumnDeleteAt,
	VehicleInfoSelectColumnDeleteBy,
	VehicleInfoSelectColumnDepartmentID,
	VehicleInfoSelectColumnDrivingLicenseePic,
	VehicleInfoSelectColumnEnterpriseID,
	VehicleInfoSelectColumnHeavy,
	VehicleInfoSelectColumnID,
	VehicleInfoSelectColumnIndustryCategory,
	VehicleInfoSelectColumnInspectionDate,
	VehicleInfoSelectColumnInsuranceCompany,
	VehicleInfoSelectColumnInsuranceDate,
	VehicleInfoSelectColumnIsActive,
	VehicleInfoSelectColumnIsApplyInstallTerminal,
	VehicleInfoSelectColumnIsComplete,
	VehicleInfoSelectColumnIsDelete,
	VehicleInfoSelectColumnIsImport,
	VehicleInfoSelectColumnIsInput,
	VehicleInfoSelectColumnIsUploadProvince,
	VehicleInfoSelectColumnLicensePlateColor,
	VehicleInfoSelectColumnLicensePlateNumber,
	VehicleInfoSelectColumnLicensePlateType,
	VehicleInfoSelectColumnMuckTruckID,
	VehicleInfoSelectColumnOperatingRoute,
	VehicleInfoSelectColumnOperatingState,
	VehicleInfoSelectColumnOperatingType,
	VehicleInfoSelectColumnOperatingVehicleID,
	VehicleInfoSelectColumnOwner,
	VehicleInfoSelectColumnQuasiDrivingModels,
	VehicleInfoSelectColumnRecordAt,
	VehicleInfoSelectColumnRecordBy,
	VehicleInfoSelectColumnRemarkIn,
	VehicleInfoSelectColumnRemarks,
	VehicleInfoSelectColumnRetirementDate,
	VehicleInfoSelectColumnRoadTransportLicenseNumber,
	VehicleInfoSelectColumnSeats,
	VehicleInfoSelectColumnTerminalID,
	VehicleInfoSelectColumnUpdateAt,
	VehicleInfoSelectColumnUpdateBy,
	VehicleInfoSelectColumnUpdateTimeIn,
	VehicleInfoSelectColumnUseNature,
	VehicleInfoSelectColumnVehicleBrand,
	VehicleInfoSelectColumnVehicleDisplacement,
	VehicleInfoSelectColumnVehicleID,
	VehicleInfoSelectColumnVehicleIdentificationNumber,
	VehicleInfoSelectColumnVehicleMaintenances,
	VehicleInfoSelectColumnVehicleManager,
	VehicleInfoSelectColumnVehicleManagerIDCard,
	VehicleInfoSelectColumnVehicleManagerPhone,
	VehicleInfoSelectColumnVehicleState,
	VehicleInfoSelectColumnVehicleType,
}

func (e VehicleInfoSelectColumn) IsValid() bool {
	switch e {
	case VehicleInfoSelectColumnBusinessScope, VehicleInfoSelectColumnCarRentalPrice, VehicleInfoSelectColumnCheckState, VehicleInfoSelectColumnCreateAt, VehicleInfoSelectColumnCreateBy, VehicleInfoSelectColumnDeleteAt, VehicleInfoSelectColumnDeleteBy, VehicleInfoSelectColumnDepartmentID, VehicleInfoSelectColumnDrivingLicenseePic, VehicleInfoSelectColumnEnterpriseID, VehicleInfoSelectColumnHeavy, VehicleInfoSelectColumnID, VehicleInfoSelectColumnIndustryCategory, VehicleInfoSelectColumnInspectionDate, VehicleInfoSelectColumnInsuranceCompany, VehicleInfoSelectColumnInsuranceDate, VehicleInfoSelectColumnIsActive, VehicleInfoSelectColumnIsApplyInstallTerminal, VehicleInfoSelectColumnIsComplete, VehicleInfoSelectColumnIsDelete, VehicleInfoSelectColumnIsImport, VehicleInfoSelectColumnIsInput, VehicleInfoSelectColumnIsUploadProvince, VehicleInfoSelectColumnLicensePlateColor, VehicleInfoSelectColumnLicensePlateNumber, VehicleInfoSelectColumnLicensePlateType, VehicleInfoSelectColumnMuckTruckID, VehicleInfoSelectColumnOperatingRoute, VehicleInfoSelectColumnOperatingState, VehicleInfoSelectColumnOperatingType, VehicleInfoSelectColumnOperatingVehicleID, VehicleInfoSelectColumnOwner, VehicleInfoSelectColumnQuasiDrivingModels, VehicleInfoSelectColumnRecordAt, VehicleInfoSelectColumnRecordBy, VehicleInfoSelectColumnRemarkIn, VehicleInfoSelectColumnRemarks, VehicleInfoSelectColumnRetirementDate, VehicleInfoSelectColumnRoadTransportLicenseNumber, VehicleInfoSelectColumnSeats, VehicleInfoSelectColumnTerminalID, VehicleInfoSelectColumnUpdateAt, VehicleInfoSelectColumnUpdateBy, VehicleInfoSelectColumnUpdateTimeIn, VehicleInfoSelectColumnUseNature, VehicleInfoSelectColumnVehicleBrand, VehicleInfoSelectColumnVehicleDisplacement, VehicleInfoSelectColumnVehicleID, VehicleInfoSelectColumnVehicleIdentificationNumber, VehicleInfoSelectColumnVehicleMaintenances, VehicleInfoSelectColumnVehicleManager, VehicleInfoSelectColumnVehicleManagerIDCard, VehicleInfoSelectColumnVehicleManagerPhone, VehicleInfoSelectColumnVehicleState, VehicleInfoSelectColumnVehicleType:
		return true
	}
	return false
}

func (e VehicleInfoSelectColumn) String() string {
	return string(e)
}

func (e *VehicleInfoSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleInfoSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid vehicle_info_select_column", str)
	}
	return nil
}

func (e VehicleInfoSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// update columns of table "vehicle_info"
type VehicleInfoUpdateColumn string

const (
	// column name
	VehicleInfoUpdateColumnBusinessScope VehicleInfoUpdateColumn = "business_scope"
	// column name
	VehicleInfoUpdateColumnCarRentalPrice VehicleInfoUpdateColumn = "car_rental_price"
	// column name
	VehicleInfoUpdateColumnCheckState VehicleInfoUpdateColumn = "check_state"
	// column name
	VehicleInfoUpdateColumnCreateAt VehicleInfoUpdateColumn = "create_at"
	// column name
	VehicleInfoUpdateColumnCreateBy VehicleInfoUpdateColumn = "create_by"
	// column name
	VehicleInfoUpdateColumnDeleteAt VehicleInfoUpdateColumn = "delete_at"
	// column name
	VehicleInfoUpdateColumnDeleteBy VehicleInfoUpdateColumn = "delete_by"
	// column name
	VehicleInfoUpdateColumnDepartmentID VehicleInfoUpdateColumn = "department_id"
	// column name
	VehicleInfoUpdateColumnDrivingLicenseePic VehicleInfoUpdateColumn = "driving_licensee_pic"
	// column name
	VehicleInfoUpdateColumnEnterpriseID VehicleInfoUpdateColumn = "enterprise_id"
	// column name
	VehicleInfoUpdateColumnHeavy VehicleInfoUpdateColumn = "heavy"
	// column name
	VehicleInfoUpdateColumnID VehicleInfoUpdateColumn = "id"
	// column name
	VehicleInfoUpdateColumnIndustryCategory VehicleInfoUpdateColumn = "industry_category"
	// column name
	VehicleInfoUpdateColumnInspectionDate VehicleInfoUpdateColumn = "inspection_date"
	// column name
	VehicleInfoUpdateColumnInsuranceCompany VehicleInfoUpdateColumn = "insurance_company"
	// column name
	VehicleInfoUpdateColumnInsuranceDate VehicleInfoUpdateColumn = "insurance_date"
	// column name
	VehicleInfoUpdateColumnIsActive VehicleInfoUpdateColumn = "is_active"
	// column name
	VehicleInfoUpdateColumnIsApplyInstallTerminal VehicleInfoUpdateColumn = "is_apply_install_terminal"
	// column name
	VehicleInfoUpdateColumnIsComplete VehicleInfoUpdateColumn = "is_complete"
	// column name
	VehicleInfoUpdateColumnIsDelete VehicleInfoUpdateColumn = "is_delete"
	// column name
	VehicleInfoUpdateColumnIsImport VehicleInfoUpdateColumn = "is_import"
	// column name
	VehicleInfoUpdateColumnIsInput VehicleInfoUpdateColumn = "is_input"
	// column name
	VehicleInfoUpdateColumnIsUploadProvince VehicleInfoUpdateColumn = "is_upload_province"
	// column name
	VehicleInfoUpdateColumnLicensePlateColor VehicleInfoUpdateColumn = "license_plate_color"
	// column name
	VehicleInfoUpdateColumnLicensePlateNumber VehicleInfoUpdateColumn = "license_plate_number"
	// column name
	VehicleInfoUpdateColumnLicensePlateType VehicleInfoUpdateColumn = "license_plate_type"
	// column name
	VehicleInfoUpdateColumnMuckTruckID VehicleInfoUpdateColumn = "muck_truck_id"
	// column name
	VehicleInfoUpdateColumnOperatingRoute VehicleInfoUpdateColumn = "operating_route"
	// column name
	VehicleInfoUpdateColumnOperatingState VehicleInfoUpdateColumn = "operating_state"
	// column name
	VehicleInfoUpdateColumnOperatingType VehicleInfoUpdateColumn = "operating_type"
	// column name
	VehicleInfoUpdateColumnOperatingVehicleID VehicleInfoUpdateColumn = "operating_vehicle_id"
	// column name
	VehicleInfoUpdateColumnOwner VehicleInfoUpdateColumn = "owner"
	// column name
	VehicleInfoUpdateColumnQuasiDrivingModels VehicleInfoUpdateColumn = "quasi_driving_models"
	// column name
	VehicleInfoUpdateColumnRecordAt VehicleInfoUpdateColumn = "record_at"
	// column name
	VehicleInfoUpdateColumnRecordBy VehicleInfoUpdateColumn = "record_by"
	// column name
	VehicleInfoUpdateColumnRemarkIn VehicleInfoUpdateColumn = "remark_in"
	// column name
	VehicleInfoUpdateColumnRemarks VehicleInfoUpdateColumn = "remarks"
	// column name
	VehicleInfoUpdateColumnRetirementDate VehicleInfoUpdateColumn = "retirement_date"
	// column name
	VehicleInfoUpdateColumnRoadTransportLicenseNumber VehicleInfoUpdateColumn = "road_transport_license_number"
	// column name
	VehicleInfoUpdateColumnSeats VehicleInfoUpdateColumn = "seats"
	// column name
	VehicleInfoUpdateColumnTerminalID VehicleInfoUpdateColumn = "terminal_id"
	// column name
	VehicleInfoUpdateColumnUpdateAt VehicleInfoUpdateColumn = "update_at"
	// column name
	VehicleInfoUpdateColumnUpdateBy VehicleInfoUpdateColumn = "update_by"
	// column name
	VehicleInfoUpdateColumnUpdateTimeIn VehicleInfoUpdateColumn = "update_time_in"
	// column name
	VehicleInfoUpdateColumnUseNature VehicleInfoUpdateColumn = "use_nature"
	// column name
	VehicleInfoUpdateColumnVehicleBrand VehicleInfoUpdateColumn = "vehicle_brand"
	// column name
	VehicleInfoUpdateColumnVehicleDisplacement VehicleInfoUpdateColumn = "vehicle_displacement"
	// column name
	VehicleInfoUpdateColumnVehicleID VehicleInfoUpdateColumn = "vehicle_id"
	// column name
	VehicleInfoUpdateColumnVehicleIdentificationNumber VehicleInfoUpdateColumn = "vehicle_identification_number"
	// column name
	VehicleInfoUpdateColumnVehicleMaintenances VehicleInfoUpdateColumn = "vehicle_maintenances"
	// column name
	VehicleInfoUpdateColumnVehicleManager VehicleInfoUpdateColumn = "vehicle_manager"
	// column name
	VehicleInfoUpdateColumnVehicleManagerIDCard VehicleInfoUpdateColumn = "vehicle_manager_id_card"
	// column name
	VehicleInfoUpdateColumnVehicleManagerPhone VehicleInfoUpdateColumn = "vehicle_manager_phone"
	// column name
	VehicleInfoUpdateColumnVehicleState VehicleInfoUpdateColumn = "vehicle_state"
	// column name
	VehicleInfoUpdateColumnVehicleType VehicleInfoUpdateColumn = "vehicle_type"
)

var AllVehicleInfoUpdateColumn = []VehicleInfoUpdateColumn{
	VehicleInfoUpdateColumnBusinessScope,
	VehicleInfoUpdateColumnCarRentalPrice,
	VehicleInfoUpdateColumnCheckState,
	VehicleInfoUpdateColumnCreateAt,
	VehicleInfoUpdateColumnCreateBy,
	VehicleInfoUpdateColumnDeleteAt,
	VehicleInfoUpdateColumnDeleteBy,
	VehicleInfoUpdateColumnDepartmentID,
	VehicleInfoUpdateColumnDrivingLicenseePic,
	VehicleInfoUpdateColumnEnterpriseID,
	VehicleInfoUpdateColumnHeavy,
	VehicleInfoUpdateColumnID,
	VehicleInfoUpdateColumnIndustryCategory,
	VehicleInfoUpdateColumnInspectionDate,
	VehicleInfoUpdateColumnInsuranceCompany,
	VehicleInfoUpdateColumnInsuranceDate,
	VehicleInfoUpdateColumnIsActive,
	VehicleInfoUpdateColumnIsApplyInstallTerminal,
	VehicleInfoUpdateColumnIsComplete,
	VehicleInfoUpdateColumnIsDelete,
	VehicleInfoUpdateColumnIsImport,
	VehicleInfoUpdateColumnIsInput,
	VehicleInfoUpdateColumnIsUploadProvince,
	VehicleInfoUpdateColumnLicensePlateColor,
	VehicleInfoUpdateColumnLicensePlateNumber,
	VehicleInfoUpdateColumnLicensePlateType,
	VehicleInfoUpdateColumnMuckTruckID,
	VehicleInfoUpdateColumnOperatingRoute,
	VehicleInfoUpdateColumnOperatingState,
	VehicleInfoUpdateColumnOperatingType,
	VehicleInfoUpdateColumnOperatingVehicleID,
	VehicleInfoUpdateColumnOwner,
	VehicleInfoUpdateColumnQuasiDrivingModels,
	VehicleInfoUpdateColumnRecordAt,
	VehicleInfoUpdateColumnRecordBy,
	VehicleInfoUpdateColumnRemarkIn,
	VehicleInfoUpdateColumnRemarks,
	VehicleInfoUpdateColumnRetirementDate,
	VehicleInfoUpdateColumnRoadTransportLicenseNumber,
	VehicleInfoUpdateColumnSeats,
	VehicleInfoUpdateColumnTerminalID,
	VehicleInfoUpdateColumnUpdateAt,
	VehicleInfoUpdateColumnUpdateBy,
	VehicleInfoUpdateColumnUpdateTimeIn,
	VehicleInfoUpdateColumnUseNature,
	VehicleInfoUpdateColumnVehicleBrand,
	VehicleInfoUpdateColumnVehicleDisplacement,
	VehicleInfoUpdateColumnVehicleID,
	VehicleInfoUpdateColumnVehicleIdentificationNumber,
	VehicleInfoUpdateColumnVehicleMaintenances,
	VehicleInfoUpdateColumnVehicleManager,
	VehicleInfoUpdateColumnVehicleManagerIDCard,
	VehicleInfoUpdateColumnVehicleManagerPhone,
	VehicleInfoUpdateColumnVehicleState,
	VehicleInfoUpdateColumnVehicleType,
}

func (e VehicleInfoUpdateColumn) IsValid() bool {
	switch e {
	case VehicleInfoUpdateColumnBusinessScope, VehicleInfoUpdateColumnCarRentalPrice, VehicleInfoUpdateColumnCheckState, VehicleInfoUpdateColumnCreateAt, VehicleInfoUpdateColumnCreateBy, VehicleInfoUpdateColumnDeleteAt, VehicleInfoUpdateColumnDeleteBy, VehicleInfoUpdateColumnDepartmentID, VehicleInfoUpdateColumnDrivingLicenseePic, VehicleInfoUpdateColumnEnterpriseID, VehicleInfoUpdateColumnHeavy, VehicleInfoUpdateColumnID, VehicleInfoUpdateColumnIndustryCategory, VehicleInfoUpdateColumnInspectionDate, VehicleInfoUpdateColumnInsuranceCompany, VehicleInfoUpdateColumnInsuranceDate, VehicleInfoUpdateColumnIsActive, VehicleInfoUpdateColumnIsApplyInstallTerminal, VehicleInfoUpdateColumnIsComplete, VehicleInfoUpdateColumnIsDelete, VehicleInfoUpdateColumnIsImport, VehicleInfoUpdateColumnIsInput, VehicleInfoUpdateColumnIsUploadProvince, VehicleInfoUpdateColumnLicensePlateColor, VehicleInfoUpdateColumnLicensePlateNumber, VehicleInfoUpdateColumnLicensePlateType, VehicleInfoUpdateColumnMuckTruckID, VehicleInfoUpdateColumnOperatingRoute, VehicleInfoUpdateColumnOperatingState, VehicleInfoUpdateColumnOperatingType, VehicleInfoUpdateColumnOperatingVehicleID, VehicleInfoUpdateColumnOwner, VehicleInfoUpdateColumnQuasiDrivingModels, VehicleInfoUpdateColumnRecordAt, VehicleInfoUpdateColumnRecordBy, VehicleInfoUpdateColumnRemarkIn, VehicleInfoUpdateColumnRemarks, VehicleInfoUpdateColumnRetirementDate, VehicleInfoUpdateColumnRoadTransportLicenseNumber, VehicleInfoUpdateColumnSeats, VehicleInfoUpdateColumnTerminalID, VehicleInfoUpdateColumnUpdateAt, VehicleInfoUpdateColumnUpdateBy, VehicleInfoUpdateColumnUpdateTimeIn, VehicleInfoUpdateColumnUseNature, VehicleInfoUpdateColumnVehicleBrand, VehicleInfoUpdateColumnVehicleDisplacement, VehicleInfoUpdateColumnVehicleID, VehicleInfoUpdateColumnVehicleIdentificationNumber, VehicleInfoUpdateColumnVehicleMaintenances, VehicleInfoUpdateColumnVehicleManager, VehicleInfoUpdateColumnVehicleManagerIDCard, VehicleInfoUpdateColumnVehicleManagerPhone, VehicleInfoUpdateColumnVehicleState, VehicleInfoUpdateColumnVehicleType:
		return true
	}
	return false
}

func (e VehicleInfoUpdateColumn) String() string {
	return string(e)
}

func (e *VehicleInfoUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleInfoUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid vehicle_info_update_column", str)
	}
	return nil
}

func (e VehicleInfoUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// unique or primary key constraints on table "vehicle_supervision_photo"
type VehicleSupervisionPhotoConstraint string

const (
	// unique or primary key constraint
	VehicleSupervisionPhotoConstraintVehicleSupervisionPhotoPkey VehicleSupervisionPhotoConstraint = "vehicle_supervision_photo_pkey"
)

var AllVehicleSupervisionPhotoConstraint = []VehicleSupervisionPhotoConstraint{
	VehicleSupervisionPhotoConstraintVehicleSupervisionPhotoPkey,
}

func (e VehicleSupervisionPhotoConstraint) IsValid() bool {
	switch e {
	case VehicleSupervisionPhotoConstraintVehicleSupervisionPhotoPkey:
		return true
	}
	return false
}

func (e VehicleSupervisionPhotoConstraint) String() string {
	return string(e)
}

func (e *VehicleSupervisionPhotoConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleSupervisionPhotoConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid vehicle_supervision_photo_constraint", str)
	}
	return nil
}

func (e VehicleSupervisionPhotoConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// select columns of table "vehicle_supervision_photo"
type VehicleSupervisionPhotoSelectColumn string

const (
	// column name
	VehicleSupervisionPhotoSelectColumnImei VehicleSupervisionPhotoSelectColumn = "IMEI"
	// column name
	VehicleSupervisionPhotoSelectColumnCameraID VehicleSupervisionPhotoSelectColumn = "camera_id"
	// column name
	VehicleSupervisionPhotoSelectColumnDriverID VehicleSupervisionPhotoSelectColumn = "driver_id"
	// column name
	VehicleSupervisionPhotoSelectColumnEnterpriseID VehicleSupervisionPhotoSelectColumn = "enterprise_id"
	// column name
	VehicleSupervisionPhotoSelectColumnID VehicleSupervisionPhotoSelectColumn = "id"
	// column name
	VehicleSupervisionPhotoSelectColumnMonitoringPicAddress VehicleSupervisionPhotoSelectColumn = "monitoring_pic_address"
	// column name
	VehicleSupervisionPhotoSelectColumnMonitoringPicName VehicleSupervisionPhotoSelectColumn = "monitoring_pic_name"
	// column name
	VehicleSupervisionPhotoSelectColumnMonitoringPicUploadTime VehicleSupervisionPhotoSelectColumn = "monitoring_pic_upload_time"
	// column name
	VehicleSupervisionPhotoSelectColumnPhotoCondition VehicleSupervisionPhotoSelectColumn = "photo_condition"
	// column name
	VehicleSupervisionPhotoSelectColumnSimNumber VehicleSupervisionPhotoSelectColumn = "sim_number"
	// column name
	VehicleSupervisionPhotoSelectColumnSupervisionPhotoID VehicleSupervisionPhotoSelectColumn = "supervision_photo_id"
	// column name
	VehicleSupervisionPhotoSelectColumnUpdateTime VehicleSupervisionPhotoSelectColumn = "update_time"
	// column name
	VehicleSupervisionPhotoSelectColumnVehicleID VehicleSupervisionPhotoSelectColumn = "vehicle_id"
)

var AllVehicleSupervisionPhotoSelectColumn = []VehicleSupervisionPhotoSelectColumn{
	VehicleSupervisionPhotoSelectColumnImei,
	VehicleSupervisionPhotoSelectColumnCameraID,
	VehicleSupervisionPhotoSelectColumnDriverID,
	VehicleSupervisionPhotoSelectColumnEnterpriseID,
	VehicleSupervisionPhotoSelectColumnID,
	VehicleSupervisionPhotoSelectColumnMonitoringPicAddress,
	VehicleSupervisionPhotoSelectColumnMonitoringPicName,
	VehicleSupervisionPhotoSelectColumnMonitoringPicUploadTime,
	VehicleSupervisionPhotoSelectColumnPhotoCondition,
	VehicleSupervisionPhotoSelectColumnSimNumber,
	VehicleSupervisionPhotoSelectColumnSupervisionPhotoID,
	VehicleSupervisionPhotoSelectColumnUpdateTime,
	VehicleSupervisionPhotoSelectColumnVehicleID,
}

func (e VehicleSupervisionPhotoSelectColumn) IsValid() bool {
	switch e {
	case VehicleSupervisionPhotoSelectColumnImei, VehicleSupervisionPhotoSelectColumnCameraID, VehicleSupervisionPhotoSelectColumnDriverID, VehicleSupervisionPhotoSelectColumnEnterpriseID, VehicleSupervisionPhotoSelectColumnID, VehicleSupervisionPhotoSelectColumnMonitoringPicAddress, VehicleSupervisionPhotoSelectColumnMonitoringPicName, VehicleSupervisionPhotoSelectColumnMonitoringPicUploadTime, VehicleSupervisionPhotoSelectColumnPhotoCondition, VehicleSupervisionPhotoSelectColumnSimNumber, VehicleSupervisionPhotoSelectColumnSupervisionPhotoID, VehicleSupervisionPhotoSelectColumnUpdateTime, VehicleSupervisionPhotoSelectColumnVehicleID:
		return true
	}
	return false
}

func (e VehicleSupervisionPhotoSelectColumn) String() string {
	return string(e)
}

func (e *VehicleSupervisionPhotoSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleSupervisionPhotoSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid vehicle_supervision_photo_select_column", str)
	}
	return nil
}

func (e VehicleSupervisionPhotoSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// update columns of table "vehicle_supervision_photo"
type VehicleSupervisionPhotoUpdateColumn string

const (
	// column name
	VehicleSupervisionPhotoUpdateColumnImei VehicleSupervisionPhotoUpdateColumn = "IMEI"
	// column name
	VehicleSupervisionPhotoUpdateColumnCameraID VehicleSupervisionPhotoUpdateColumn = "camera_id"
	// column name
	VehicleSupervisionPhotoUpdateColumnDriverID VehicleSupervisionPhotoUpdateColumn = "driver_id"
	// column name
	VehicleSupervisionPhotoUpdateColumnEnterpriseID VehicleSupervisionPhotoUpdateColumn = "enterprise_id"
	// column name
	VehicleSupervisionPhotoUpdateColumnID VehicleSupervisionPhotoUpdateColumn = "id"
	// column name
	VehicleSupervisionPhotoUpdateColumnMonitoringPicAddress VehicleSupervisionPhotoUpdateColumn = "monitoring_pic_address"
	// column name
	VehicleSupervisionPhotoUpdateColumnMonitoringPicName VehicleSupervisionPhotoUpdateColumn = "monitoring_pic_name"
	// column name
	VehicleSupervisionPhotoUpdateColumnMonitoringPicUploadTime VehicleSupervisionPhotoUpdateColumn = "monitoring_pic_upload_time"
	// column name
	VehicleSupervisionPhotoUpdateColumnPhotoCondition VehicleSupervisionPhotoUpdateColumn = "photo_condition"
	// column name
	VehicleSupervisionPhotoUpdateColumnSimNumber VehicleSupervisionPhotoUpdateColumn = "sim_number"
	// column name
	VehicleSupervisionPhotoUpdateColumnSupervisionPhotoID VehicleSupervisionPhotoUpdateColumn = "supervision_photo_id"
	// column name
	VehicleSupervisionPhotoUpdateColumnUpdateTime VehicleSupervisionPhotoUpdateColumn = "update_time"
	// column name
	VehicleSupervisionPhotoUpdateColumnVehicleID VehicleSupervisionPhotoUpdateColumn = "vehicle_id"
)

var AllVehicleSupervisionPhotoUpdateColumn = []VehicleSupervisionPhotoUpdateColumn{
	VehicleSupervisionPhotoUpdateColumnImei,
	VehicleSupervisionPhotoUpdateColumnCameraID,
	VehicleSupervisionPhotoUpdateColumnDriverID,
	VehicleSupervisionPhotoUpdateColumnEnterpriseID,
	VehicleSupervisionPhotoUpdateColumnID,
	VehicleSupervisionPhotoUpdateColumnMonitoringPicAddress,
	VehicleSupervisionPhotoUpdateColumnMonitoringPicName,
	VehicleSupervisionPhotoUpdateColumnMonitoringPicUploadTime,
	VehicleSupervisionPhotoUpdateColumnPhotoCondition,
	VehicleSupervisionPhotoUpdateColumnSimNumber,
	VehicleSupervisionPhotoUpdateColumnSupervisionPhotoID,
	VehicleSupervisionPhotoUpdateColumnUpdateTime,
	VehicleSupervisionPhotoUpdateColumnVehicleID,
}

func (e VehicleSupervisionPhotoUpdateColumn) IsValid() bool {
	switch e {
	case VehicleSupervisionPhotoUpdateColumnImei, VehicleSupervisionPhotoUpdateColumnCameraID, VehicleSupervisionPhotoUpdateColumnDriverID, VehicleSupervisionPhotoUpdateColumnEnterpriseID, VehicleSupervisionPhotoUpdateColumnID, VehicleSupervisionPhotoUpdateColumnMonitoringPicAddress, VehicleSupervisionPhotoUpdateColumnMonitoringPicName, VehicleSupervisionPhotoUpdateColumnMonitoringPicUploadTime, VehicleSupervisionPhotoUpdateColumnPhotoCondition, VehicleSupervisionPhotoUpdateColumnSimNumber, VehicleSupervisionPhotoUpdateColumnSupervisionPhotoID, VehicleSupervisionPhotoUpdateColumnUpdateTime, VehicleSupervisionPhotoUpdateColumnVehicleID:
		return true
	}
	return false
}

func (e VehicleSupervisionPhotoUpdateColumn) String() string {
	return string(e)
}

func (e *VehicleSupervisionPhotoUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleSupervisionPhotoUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid vehicle_supervision_photo_update_column", str)
	}
	return nil
}

func (e VehicleSupervisionPhotoUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
