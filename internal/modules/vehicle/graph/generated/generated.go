// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"VehicleSupervision/internal/modules/vehicle/graph/model"
	model1 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"io"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	JjVehicle struct {
		Ccdjrq     func(childComplexity int) int
		Cllx       func(childComplexity int) int
		Clsbdh     func(childComplexity int) int
		County     func(childComplexity int) int
		Djrq       func(childComplexity int) int
		Fprq       func(childComplexity int) int
		Gxrq       func(childComplexity int) int
		Hphm       func(childComplexity int) int
		Hpzl       func(childComplexity int) int
		ID         func(childComplexity int) int
		IsDeteled  func(childComplexity int) int
		Lxdh       func(childComplexity int) int
		Lxdz       func(childComplexity int) int
		Other      func(childComplexity int) int
		Qzbfqz     func(childComplexity int) int
		Sjhm       func(childComplexity int) int
		Syr        func(childComplexity int) int
		Syxz       func(childComplexity int) int
		Updatetime func(childComplexity int) int
		VehicleID  func(childComplexity int) int
		Vehmontype func(childComplexity int) int
		Xh         func(childComplexity int) int
		Yxqz       func(childComplexity int) int
		Zt         func(childComplexity int) int
		Zzl        func(childComplexity int) int
	}

	JjVehicleAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	JjVehicleAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.JjVehicleSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	JjVehicleAvgFields struct {
		ID        func(childComplexity int) int
		IsDeteled func(childComplexity int) int
		Zt        func(childComplexity int) int
		Zzl       func(childComplexity int) int
	}

	JjVehicleMaxFields struct {
		Ccdjrq     func(childComplexity int) int
		Cllx       func(childComplexity int) int
		Clsbdh     func(childComplexity int) int
		County     func(childComplexity int) int
		Djrq       func(childComplexity int) int
		Fprq       func(childComplexity int) int
		Gxrq       func(childComplexity int) int
		Hphm       func(childComplexity int) int
		Hpzl       func(childComplexity int) int
		ID         func(childComplexity int) int
		IsDeteled  func(childComplexity int) int
		Lxdh       func(childComplexity int) int
		Lxdz       func(childComplexity int) int
		Other      func(childComplexity int) int
		Qzbfqz     func(childComplexity int) int
		Sjhm       func(childComplexity int) int
		Syr        func(childComplexity int) int
		Syxz       func(childComplexity int) int
		Updatetime func(childComplexity int) int
		VehicleID  func(childComplexity int) int
		Vehmontype func(childComplexity int) int
		Xh         func(childComplexity int) int
		Yxqz       func(childComplexity int) int
		Zt         func(childComplexity int) int
		Zzl        func(childComplexity int) int
	}

	JjVehicleMinFields struct {
		Ccdjrq     func(childComplexity int) int
		Cllx       func(childComplexity int) int
		Clsbdh     func(childComplexity int) int
		County     func(childComplexity int) int
		Djrq       func(childComplexity int) int
		Fprq       func(childComplexity int) int
		Gxrq       func(childComplexity int) int
		Hphm       func(childComplexity int) int
		Hpzl       func(childComplexity int) int
		ID         func(childComplexity int) int
		IsDeteled  func(childComplexity int) int
		Lxdh       func(childComplexity int) int
		Lxdz       func(childComplexity int) int
		Other      func(childComplexity int) int
		Qzbfqz     func(childComplexity int) int
		Sjhm       func(childComplexity int) int
		Syr        func(childComplexity int) int
		Syxz       func(childComplexity int) int
		Updatetime func(childComplexity int) int
		VehicleID  func(childComplexity int) int
		Vehmontype func(childComplexity int) int
		Xh         func(childComplexity int) int
		Yxqz       func(childComplexity int) int
		Zt         func(childComplexity int) int
		Zzl        func(childComplexity int) int
	}

	JjVehicleMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	JjVehicleStddevFields struct {
		ID        func(childComplexity int) int
		IsDeteled func(childComplexity int) int
		Zt        func(childComplexity int) int
		Zzl       func(childComplexity int) int
	}

	JjVehicleStddevPopFields struct {
		ID        func(childComplexity int) int
		IsDeteled func(childComplexity int) int
		Zt        func(childComplexity int) int
		Zzl       func(childComplexity int) int
	}

	JjVehicleStddevSampFields struct {
		ID        func(childComplexity int) int
		IsDeteled func(childComplexity int) int
		Zt        func(childComplexity int) int
		Zzl       func(childComplexity int) int
	}

	JjVehicleSumFields struct {
		ID        func(childComplexity int) int
		IsDeteled func(childComplexity int) int
		Zt        func(childComplexity int) int
		Zzl       func(childComplexity int) int
	}

	JjVehicleVarPopFields struct {
		ID        func(childComplexity int) int
		IsDeteled func(childComplexity int) int
		Zt        func(childComplexity int) int
		Zzl       func(childComplexity int) int
	}

	JjVehicleVarSampFields struct {
		ID        func(childComplexity int) int
		IsDeteled func(childComplexity int) int
		Zt        func(childComplexity int) int
		Zzl       func(childComplexity int) int
	}

	JjVehicleVarianceFields struct {
		ID        func(childComplexity int) int
		IsDeteled func(childComplexity int) int
		Zt        func(childComplexity int) int
		Zzl       func(childComplexity int) int
	}

	Mutation struct {
		DeleteJjVehicle                       func(childComplexity int, where model.JjVehicleBoolExp) int
		DeleteJjVehicleByPk                   func(childComplexity int, id int64) int
		DeleteMuckTruckCategoryInfo           func(childComplexity int, where model.MuckTruckCategoryInfoBoolExp) int
		DeleteMuckTruckCategoryInfoByPk       func(childComplexity int, id int64) int
		DeleteMuckTruckInfo                   func(childComplexity int, where model.MuckTruckInfoBoolExp) int
		DeleteMuckTruckInfoByPk               func(childComplexity int, muckTruckID int64) int
		DeleteMuckTruckPreviewNumber          func(childComplexity int, where model.MuckTruckPreviewNumberBoolExp) int
		DeleteMuckTruckPreviewNumberByPk      func(childComplexity int, id int64) int
		DeleteMuckTruckWorkerIDCardOrders     func(childComplexity int, where model.MuckTruckWorkerIDCardOrdersBoolExp) int
		DeleteMuckTruckWorkerIDCardOrdersByPk func(childComplexity int, id int64) int
		DeleteOperatingVehicleInfo            func(childComplexity int, where model.OperatingVehicleInfoBoolExp) int
		DeleteOperatingVehicleInfoByPk        func(childComplexity int, operatingVehicleID int64) int
		DeleteOwnerInfo                       func(childComplexity int, where model.OwnerInfoBoolExp) int
		DeleteOwnerInfoByPk                   func(childComplexity int, id int64) int
		DeleteVehicleInfo                     func(childComplexity int, where model.VehicleInfoBoolExp) int
		DeleteVehicleInfoByPk                 func(childComplexity int, id int64, vehicleID string) int
		DeleteVehicleInfoChangeLog            func(childComplexity int, where model.VehicleInfoChangeLogBoolExp) int
		DeleteVehicleInfoChangeLogByPk        func(childComplexity int, id int64, vehicleInfoChangeID string) int
		DeleteVehicleSupervisionPhoto         func(childComplexity int, where model.VehicleSupervisionPhotoBoolExp) int
		DeleteVehicleSupervisionPhotoByPk     func(childComplexity int, id int64, supervisionPhotoID string) int
		InsertJjVehicle                       func(childComplexity int, objects []*model.JjVehicleInsertInput, onConflict *model.JjVehicleOnConflict) int
		InsertJjVehicleOne                    func(childComplexity int, object model.JjVehicleInsertInput, onConflict *model.JjVehicleOnConflict) int
		InsertMuckTruckCategoryInfo           func(childComplexity int, objects []*model.MuckTruckCategoryInfoInsertInput, onConflict *model.MuckTruckCategoryInfoOnConflict) int
		InsertMuckTruckCategoryInfoOne        func(childComplexity int, object model.MuckTruckCategoryInfoInsertInput, onConflict *model.MuckTruckCategoryInfoOnConflict) int
		InsertMuckTruckInfo                   func(childComplexity int, objects []*model.MuckTruckInfoInsertInput, onConflict *model.MuckTruckInfoOnConflict) int
		InsertMuckTruckInfoOne                func(childComplexity int, object model.MuckTruckInfoInsertInput, onConflict *model.MuckTruckInfoOnConflict) int
		InsertMuckTruckPreviewNumber          func(childComplexity int, objects []*model.MuckTruckPreviewNumberInsertInput, onConflict *model.MuckTruckPreviewNumberOnConflict) int
		InsertMuckTruckPreviewNumberOne       func(childComplexity int, object model.MuckTruckPreviewNumberInsertInput, onConflict *model.MuckTruckPreviewNumberOnConflict) int
		InsertMuckTruckWorkerIDCardOrders     func(childComplexity int, objects []*model.MuckTruckWorkerIDCardOrdersInsertInput, onConflict *model.MuckTruckWorkerIDCardOrdersOnConflict) int
		InsertMuckTruckWorkerIDCardOrdersOne  func(childComplexity int, object model.MuckTruckWorkerIDCardOrdersInsertInput, onConflict *model.MuckTruckWorkerIDCardOrdersOnConflict) int
		InsertOperatingVehicleInfo            func(childComplexity int, objects []*model.OperatingVehicleInfoInsertInput, onConflict *model.OperatingVehicleInfoOnConflict) int
		InsertOperatingVehicleInfoOne         func(childComplexity int, object model.OperatingVehicleInfoInsertInput, onConflict *model.OperatingVehicleInfoOnConflict) int
		InsertOwnerInfo                       func(childComplexity int, objects []*model.OwnerInfoInsertInput, onConflict *model.OwnerInfoOnConflict) int
		InsertOwnerInfoOne                    func(childComplexity int, object model.OwnerInfoInsertInput, onConflict *model.OwnerInfoOnConflict) int
		InsertVehicleInfo                     func(childComplexity int, objects []*model.VehicleInfoInsertInput, onConflict *model.VehicleInfoOnConflict) int
		InsertVehicleInfoChangeLog            func(childComplexity int, objects []*model.VehicleInfoChangeLogInsertInput, onConflict *model.VehicleInfoChangeLogOnConflict) int
		InsertVehicleInfoChangeLogOne         func(childComplexity int, object model.VehicleInfoChangeLogInsertInput, onConflict *model.VehicleInfoChangeLogOnConflict) int
		InsertVehicleInfoOne                  func(childComplexity int, object model.VehicleInfoInsertInput, onConflict *model.VehicleInfoOnConflict) int
		InsertVehicleSupervisionPhoto         func(childComplexity int, objects []*model.VehicleSupervisionPhotoInsertInput, onConflict *model.VehicleSupervisionPhotoOnConflict) int
		InsertVehicleSupervisionPhotoOne      func(childComplexity int, object model.VehicleSupervisionPhotoInsertInput, onConflict *model.VehicleSupervisionPhotoOnConflict) int
		UpdateJjVehicle                       func(childComplexity int, inc *model.JjVehicleIncInput, set *model.JjVehicleSetInput, where model.JjVehicleBoolExp) int
		UpdateJjVehicleByPk                   func(childComplexity int, inc *model.JjVehicleIncInput, set *model.JjVehicleSetInput, pkColumns model.JjVehiclePkColumnsInput) int
		UpdateMuckTruckCategoryInfo           func(childComplexity int, inc *model.MuckTruckCategoryInfoIncInput, set *model.MuckTruckCategoryInfoSetInput, where model.MuckTruckCategoryInfoBoolExp) int
		UpdateMuckTruckCategoryInfoByPk       func(childComplexity int, inc *model.MuckTruckCategoryInfoIncInput, set *model.MuckTruckCategoryInfoSetInput, pkColumns model.MuckTruckCategoryInfoPkColumnsInput) int
		UpdateMuckTruckInfo                   func(childComplexity int, inc *model.MuckTruckInfoIncInput, set *model.MuckTruckInfoSetInput, where model.MuckTruckInfoBoolExp) int
		UpdateMuckTruckInfoByPk               func(childComplexity int, inc *model.MuckTruckInfoIncInput, set *model.MuckTruckInfoSetInput, pkColumns model.MuckTruckInfoPkColumnsInput) int
		UpdateMuckTruckPreviewNumber          func(childComplexity int, inc *model.MuckTruckPreviewNumberIncInput, set *model.MuckTruckPreviewNumberSetInput, where model.MuckTruckPreviewNumberBoolExp) int
		UpdateMuckTruckPreviewNumberByPk      func(childComplexity int, inc *model.MuckTruckPreviewNumberIncInput, set *model.MuckTruckPreviewNumberSetInput, pkColumns model.MuckTruckPreviewNumberPkColumnsInput) int
		UpdateMuckTruckWorkerIDCardOrders     func(childComplexity int, inc *model.MuckTruckWorkerIDCardOrdersIncInput, set *model.MuckTruckWorkerIDCardOrdersSetInput, where model.MuckTruckWorkerIDCardOrdersBoolExp) int
		UpdateMuckTruckWorkerIDCardOrdersByPk func(childComplexity int, inc *model.MuckTruckWorkerIDCardOrdersIncInput, set *model.MuckTruckWorkerIDCardOrdersSetInput, pkColumns model.MuckTruckWorkerIDCardOrdersPkColumnsInput) int
		UpdateOperatingVehicleInfo            func(childComplexity int, inc *model.OperatingVehicleInfoIncInput, set *model.OperatingVehicleInfoSetInput, where model.OperatingVehicleInfoBoolExp) int
		UpdateOperatingVehicleInfoByPk        func(childComplexity int, inc *model.OperatingVehicleInfoIncInput, set *model.OperatingVehicleInfoSetInput, pkColumns model.OperatingVehicleInfoPkColumnsInput) int
		UpdateOwnerInfo                       func(childComplexity int, inc *model.OwnerInfoIncInput, set *model.OwnerInfoSetInput, where model.OwnerInfoBoolExp) int
		UpdateOwnerInfoByPk                   func(childComplexity int, inc *model.OwnerInfoIncInput, set *model.OwnerInfoSetInput, pkColumns model.OwnerInfoPkColumnsInput) int
		UpdateVehicleInfo                     func(childComplexity int, inc *model.VehicleInfoIncInput, set *model.VehicleInfoSetInput, where model.VehicleInfoBoolExp) int
		UpdateVehicleInfoByPk                 func(childComplexity int, inc *model.VehicleInfoIncInput, set *model.VehicleInfoSetInput, pkColumns model.VehicleInfoPkColumnsInput) int
		UpdateVehicleInfoChangeLog            func(childComplexity int, inc *model.VehicleInfoChangeLogIncInput, set *model.VehicleInfoChangeLogSetInput, where model.VehicleInfoChangeLogBoolExp) int
		UpdateVehicleInfoChangeLogByPk        func(childComplexity int, inc *model.VehicleInfoChangeLogIncInput, set *model.VehicleInfoChangeLogSetInput, pkColumns model.VehicleInfoChangeLogPkColumnsInput) int
		UpdateVehicleSupervisionPhoto         func(childComplexity int, inc *model.VehicleSupervisionPhotoIncInput, set *model.VehicleSupervisionPhotoSetInput, where model.VehicleSupervisionPhotoBoolExp) int
		UpdateVehicleSupervisionPhotoByPk     func(childComplexity int, inc *model.VehicleSupervisionPhotoIncInput, set *model.VehicleSupervisionPhotoSetInput, pkColumns model.VehicleSupervisionPhotoPkColumnsInput) int
	}

	Query struct {
		JjVehicle                            func(childComplexity int, distinctOn []model.JjVehicleSelectColumn, limit *int, offset *int, orderBy []*model.JjVehicleOrderBy, where *model.JjVehicleBoolExp) int
		JjVehicleAggregate                   func(childComplexity int, distinctOn []model.JjVehicleSelectColumn, limit *int, offset *int, orderBy []*model.JjVehicleOrderBy, where *model.JjVehicleBoolExp) int
		JjVehicleByPk                        func(childComplexity int, id int64) int
		MuckTruckCategoryInfo                func(childComplexity int, distinctOn []model.MuckTruckCategoryInfoSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckCategoryInfoOrderBy, where *model.MuckTruckCategoryInfoBoolExp) int
		MuckTruckCategoryInfoAggregate       func(childComplexity int, distinctOn []model.MuckTruckCategoryInfoSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckCategoryInfoOrderBy, where *model.MuckTruckCategoryInfoBoolExp) int
		MuckTruckCategoryInfoByPk            func(childComplexity int, id int64) int
		MuckTruckInfo                        func(childComplexity int, distinctOn []model.MuckTruckInfoSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckInfoOrderBy, where *model.MuckTruckInfoBoolExp) int
		MuckTruckInfoAggregate               func(childComplexity int, distinctOn []model.MuckTruckInfoSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckInfoOrderBy, where *model.MuckTruckInfoBoolExp) int
		MuckTruckInfoByPk                    func(childComplexity int, muckTruckID int64) int
		MuckTruckPreviewNumber               func(childComplexity int, distinctOn []model.MuckTruckPreviewNumberSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckPreviewNumberOrderBy, where *model.MuckTruckPreviewNumberBoolExp) int
		MuckTruckPreviewNumberAggregate      func(childComplexity int, distinctOn []model.MuckTruckPreviewNumberSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckPreviewNumberOrderBy, where *model.MuckTruckPreviewNumberBoolExp) int
		MuckTruckPreviewNumberByPk           func(childComplexity int, id int64) int
		MuckTruckWorkerIDCardOrders          func(childComplexity int, distinctOn []model.MuckTruckWorkerIDCardOrdersSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckWorkerIDCardOrdersOrderBy, where *model.MuckTruckWorkerIDCardOrdersBoolExp) int
		MuckTruckWorkerIDCardOrdersAggregate func(childComplexity int, distinctOn []model.MuckTruckWorkerIDCardOrdersSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckWorkerIDCardOrdersOrderBy, where *model.MuckTruckWorkerIDCardOrdersBoolExp) int
		MuckTruckWorkerIDCardOrdersByPk      func(childComplexity int, id int64) int
		OperatingVehicleInfo                 func(childComplexity int, distinctOn []model.OperatingVehicleInfoSelectColumn, limit *int, offset *int, orderBy []*model.OperatingVehicleInfoOrderBy, where *model.OperatingVehicleInfoBoolExp) int
		OperatingVehicleInfoAggregate        func(childComplexity int, distinctOn []model.OperatingVehicleInfoSelectColumn, limit *int, offset *int, orderBy []*model.OperatingVehicleInfoOrderBy, where *model.OperatingVehicleInfoBoolExp) int
		OperatingVehicleInfoByPk             func(childComplexity int, operatingVehicleID int64) int
		OwnerInfo                            func(childComplexity int, distinctOn []model.OwnerInfoSelectColumn, limit *int, offset *int, orderBy []*model.OwnerInfoOrderBy, where *model.OwnerInfoBoolExp) int
		OwnerInfoAggregate                   func(childComplexity int, distinctOn []model.OwnerInfoSelectColumn, limit *int, offset *int, orderBy []*model.OwnerInfoOrderBy, where *model.OwnerInfoBoolExp) int
		OwnerInfoByPk                        func(childComplexity int, id int64) int
		VehicleInfo                          func(childComplexity int, distinctOn []model.VehicleInfoSelectColumn, limit *int, offset *int, orderBy []*model.VehicleInfoOrderBy, where *model.VehicleInfoBoolExp) int
		VehicleInfoAggregate                 func(childComplexity int, distinctOn []model.VehicleInfoSelectColumn, limit *int, offset *int, orderBy []*model.VehicleInfoOrderBy, where *model.VehicleInfoBoolExp) int
		VehicleInfoByPk                      func(childComplexity int, id int64, vehicleID string) int
		VehicleInfoChangeLog                 func(childComplexity int, distinctOn []model.VehicleInfoChangeLogSelectColumn, limit *int, offset *int, orderBy []*model.VehicleInfoChangeLogOrderBy, where *model.VehicleInfoChangeLogBoolExp) int
		VehicleInfoChangeLogAggregate        func(childComplexity int, distinctOn []model.VehicleInfoChangeLogSelectColumn, limit *int, offset *int, orderBy []*model.VehicleInfoChangeLogOrderBy, where *model.VehicleInfoChangeLogBoolExp) int
		VehicleInfoChangeLogByPk             func(childComplexity int, id int64, vehicleInfoChangeID string) int
		VehicleSupervisionPhoto              func(childComplexity int, distinctOn []model.VehicleSupervisionPhotoSelectColumn, limit *int, offset *int, orderBy []*model.VehicleSupervisionPhotoOrderBy, where *model.VehicleSupervisionPhotoBoolExp) int
		VehicleSupervisionPhotoAggregate     func(childComplexity int, distinctOn []model.VehicleSupervisionPhotoSelectColumn, limit *int, offset *int, orderBy []*model.VehicleSupervisionPhotoOrderBy, where *model.VehicleSupervisionPhotoBoolExp) int
		VehicleSupervisionPhotoByPk          func(childComplexity int, id int64, supervisionPhotoID string) int
	}

	Subscription struct {
		JjVehicle                            func(childComplexity int, distinctOn []model.JjVehicleSelectColumn, limit *int, offset *int, orderBy []*model.JjVehicleOrderBy, where *model.JjVehicleBoolExp) int
		JjVehicleAggregate                   func(childComplexity int, distinctOn []model.JjVehicleSelectColumn, limit *int, offset *int, orderBy []*model.JjVehicleOrderBy, where *model.JjVehicleBoolExp) int
		JjVehicleByPk                        func(childComplexity int, id int64) int
		MuckTruckCategoryInfo                func(childComplexity int, distinctOn []model.MuckTruckCategoryInfoSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckCategoryInfoOrderBy, where *model.MuckTruckCategoryInfoBoolExp) int
		MuckTruckCategoryInfoAggregate       func(childComplexity int, distinctOn []model.MuckTruckCategoryInfoSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckCategoryInfoOrderBy, where *model.MuckTruckCategoryInfoBoolExp) int
		MuckTruckCategoryInfoByPk            func(childComplexity int, id int64) int
		MuckTruckInfo                        func(childComplexity int, distinctOn []model.MuckTruckInfoSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckInfoOrderBy, where *model.MuckTruckInfoBoolExp) int
		MuckTruckInfoAggregate               func(childComplexity int, distinctOn []model.MuckTruckInfoSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckInfoOrderBy, where *model.MuckTruckInfoBoolExp) int
		MuckTruckInfoByPk                    func(childComplexity int, muckTruckID int64) int
		MuckTruckPreviewNumber               func(childComplexity int, distinctOn []model.MuckTruckPreviewNumberSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckPreviewNumberOrderBy, where *model.MuckTruckPreviewNumberBoolExp) int
		MuckTruckPreviewNumberAggregate      func(childComplexity int, distinctOn []model.MuckTruckPreviewNumberSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckPreviewNumberOrderBy, where *model.MuckTruckPreviewNumberBoolExp) int
		MuckTruckPreviewNumberByPk           func(childComplexity int, id int64) int
		MuckTruckWorkerIDCardOrders          func(childComplexity int, distinctOn []model.MuckTruckWorkerIDCardOrdersSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckWorkerIDCardOrdersOrderBy, where *model.MuckTruckWorkerIDCardOrdersBoolExp) int
		MuckTruckWorkerIDCardOrdersAggregate func(childComplexity int, distinctOn []model.MuckTruckWorkerIDCardOrdersSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckWorkerIDCardOrdersOrderBy, where *model.MuckTruckWorkerIDCardOrdersBoolExp) int
		MuckTruckWorkerIDCardOrdersByPk      func(childComplexity int, id int64) int
		OperatingVehicleInfo                 func(childComplexity int, distinctOn []model.OperatingVehicleInfoSelectColumn, limit *int, offset *int, orderBy []*model.OperatingVehicleInfoOrderBy, where *model.OperatingVehicleInfoBoolExp) int
		OperatingVehicleInfoAggregate        func(childComplexity int, distinctOn []model.OperatingVehicleInfoSelectColumn, limit *int, offset *int, orderBy []*model.OperatingVehicleInfoOrderBy, where *model.OperatingVehicleInfoBoolExp) int
		OperatingVehicleInfoByPk             func(childComplexity int, operatingVehicleID int64) int
		OwnerInfo                            func(childComplexity int, distinctOn []model.OwnerInfoSelectColumn, limit *int, offset *int, orderBy []*model.OwnerInfoOrderBy, where *model.OwnerInfoBoolExp) int
		OwnerInfoAggregate                   func(childComplexity int, distinctOn []model.OwnerInfoSelectColumn, limit *int, offset *int, orderBy []*model.OwnerInfoOrderBy, where *model.OwnerInfoBoolExp) int
		OwnerInfoByPk                        func(childComplexity int, id int64) int
		VehicleInfo                          func(childComplexity int, distinctOn []model.VehicleInfoSelectColumn, limit *int, offset *int, orderBy []*model.VehicleInfoOrderBy, where *model.VehicleInfoBoolExp) int
		VehicleInfoAggregate                 func(childComplexity int, distinctOn []model.VehicleInfoSelectColumn, limit *int, offset *int, orderBy []*model.VehicleInfoOrderBy, where *model.VehicleInfoBoolExp) int
		VehicleInfoByPk                      func(childComplexity int, id int64, vehicleID string) int
		VehicleInfoChangeLog                 func(childComplexity int, distinctOn []model.VehicleInfoChangeLogSelectColumn, limit *int, offset *int, orderBy []*model.VehicleInfoChangeLogOrderBy, where *model.VehicleInfoChangeLogBoolExp) int
		VehicleInfoChangeLogAggregate        func(childComplexity int, distinctOn []model.VehicleInfoChangeLogSelectColumn, limit *int, offset *int, orderBy []*model.VehicleInfoChangeLogOrderBy, where *model.VehicleInfoChangeLogBoolExp) int
		VehicleInfoChangeLogByPk             func(childComplexity int, id int64, vehicleInfoChangeID string) int
		VehicleSupervisionPhoto              func(childComplexity int, distinctOn []model.VehicleSupervisionPhotoSelectColumn, limit *int, offset *int, orderBy []*model.VehicleSupervisionPhotoOrderBy, where *model.VehicleSupervisionPhotoBoolExp) int
		VehicleSupervisionPhotoAggregate     func(childComplexity int, distinctOn []model.VehicleSupervisionPhotoSelectColumn, limit *int, offset *int, orderBy []*model.VehicleSupervisionPhotoOrderBy, where *model.VehicleSupervisionPhotoBoolExp) int
		VehicleSupervisionPhotoByPk          func(childComplexity int, id int64, supervisionPhotoID string) int
	}

	MuckTruckCategoryInfo struct {
		ActualOwnerContactPhone           func(childComplexity int) int
		ActualOwnerIDNumber               func(childComplexity int) int
		ActualOwnerIDPhoto                func(childComplexity int) int
		ActualOwnerName                   func(childComplexity int) int
		AnnualInspectionExpirationTime    func(childComplexity int) int
		ApplyInspectionTime               func(childComplexity int) int
		AxesNumber                        func(childComplexity int) int
		BlacklistDeadline                 func(childComplexity int) int
		CompulsoryInsurancePolicyPicture  func(childComplexity int) int
		CreateAt                          func(childComplexity int) int
		CreateBy                          func(childComplexity int) int
		DeleteAt                          func(childComplexity int) int
		DeleteBy                          func(childComplexity int) int
		DrivingLicenseContactPhone        func(childComplexity int) int
		DrivingLicenseIDNumber            func(childComplexity int) int
		DrivingLiscenseOwnerIDPhoto       func(childComplexity int) int
		EngineNumber                      func(childComplexity int) int
		ID                                func(childComplexity int) int
		IllegalNoticeNumberEndorsement    func(childComplexity int) int
		IllegalNumberEndorsement          func(childComplexity int) int
		IncidentNumberEndorsement         func(childComplexity int) int
		InitialRegistrationDate           func(childComplexity int) int
		InsuranceExpiryTime               func(childComplexity int) int
		IsBlacklist                       func(childComplexity int) int
		IsDelete                          func(childComplexity int) int
		IsDueSecurityAlarmProcessing      func(childComplexity int) int
		IsFirstRegister                   func(childComplexity int) int
		IsMuckOfficeAudit                 func(childComplexity int) int
		IsSendSms                         func(childComplexity int) int
		IssueDateOfQuangongNumber         func(childComplexity int) int
		OwnerIDPhoto                      func(childComplexity int) int
		ProcessingNotes                   func(childComplexity int) int
		ProcessingTime                    func(childComplexity int) int
		Processor                         func(childComplexity int) int
		ReviewNotes                       func(childComplexity int) int
		ReviewStatus                      func(childComplexity int) int
		ReviewTime                        func(childComplexity int) int
		Reviewer                          func(childComplexity int) int
		SecondaryMaintenanceExpiryDate    func(childComplexity int) int
		SecondaryMaintenanceLocation      func(childComplexity int) int
		SigningAcceptanceApplicationTime  func(childComplexity int) int
		ThirdPartyInsuranceCoverage       func(childComplexity int) int
		ThirdPartyInsuranceExpiryTime     func(childComplexity int) int
		ThirdPartyInsurancePolicyPicture  func(childComplexity int) int
		TotalMass                         func(childComplexity int) int
		UpdateAt                          func(childComplexity int) int
		UpdateBy                          func(childComplexity int) int
		VehicleDescription                func(childComplexity int) int
		VehicleID                         func(childComplexity int) int
		VehicleNature                     func(childComplexity int) int
		VehicleOperatingCertificateNumber func(childComplexity int) int
		VehicleOperatingCertificatePhoto  func(childComplexity int) int
		VehiclePicture                    func(childComplexity int) int
	}

	MuckTruckCategoryInfoAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	MuckTruckCategoryInfoAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.MuckTruckCategoryInfoSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	MuckTruckCategoryInfoAvgFields struct {
		AxesNumber    func(childComplexity int) int
		ID            func(childComplexity int) int
		TotalMass     func(childComplexity int) int
		VehicleNature func(childComplexity int) int
	}

	MuckTruckCategoryInfoMaxFields struct {
		ActualOwnerContactPhone           func(childComplexity int) int
		ActualOwnerIDNumber               func(childComplexity int) int
		ActualOwnerIDPhoto                func(childComplexity int) int
		ActualOwnerName                   func(childComplexity int) int
		AnnualInspectionExpirationTime    func(childComplexity int) int
		ApplyInspectionTime               func(childComplexity int) int
		AxesNumber                        func(childComplexity int) int
		BlacklistDeadline                 func(childComplexity int) int
		CompulsoryInsurancePolicyPicture  func(childComplexity int) int
		CreateAt                          func(childComplexity int) int
		CreateBy                          func(childComplexity int) int
		DeleteAt                          func(childComplexity int) int
		DeleteBy                          func(childComplexity int) int
		DrivingLicenseContactPhone        func(childComplexity int) int
		DrivingLicenseIDNumber            func(childComplexity int) int
		DrivingLiscenseOwnerIDPhoto       func(childComplexity int) int
		EngineNumber                      func(childComplexity int) int
		ID                                func(childComplexity int) int
		IllegalNoticeNumberEndorsement    func(childComplexity int) int
		IllegalNumberEndorsement          func(childComplexity int) int
		IncidentNumberEndorsement         func(childComplexity int) int
		InitialRegistrationDate           func(childComplexity int) int
		InsuranceExpiryTime               func(childComplexity int) int
		IssueDateOfQuangongNumber         func(childComplexity int) int
		OwnerIDPhoto                      func(childComplexity int) int
		ProcessingNotes                   func(childComplexity int) int
		ProcessingTime                    func(childComplexity int) int
		Processor                         func(childComplexity int) int
		ReviewNotes                       func(childComplexity int) int
		ReviewStatus                      func(childComplexity int) int
		ReviewTime                        func(childComplexity int) int
		Reviewer                          func(childComplexity int) int
		SecondaryMaintenanceExpiryDate    func(childComplexity int) int
		SecondaryMaintenanceLocation      func(childComplexity int) int
		SigningAcceptanceApplicationTime  func(childComplexity int) int
		ThirdPartyInsuranceCoverage       func(childComplexity int) int
		ThirdPartyInsuranceExpiryTime     func(childComplexity int) int
		ThirdPartyInsurancePolicyPicture  func(childComplexity int) int
		TotalMass                         func(childComplexity int) int
		UpdateAt                          func(childComplexity int) int
		UpdateBy                          func(childComplexity int) int
		VehicleDescription                func(childComplexity int) int
		VehicleID                         func(childComplexity int) int
		VehicleNature                     func(childComplexity int) int
		VehicleOperatingCertificateNumber func(childComplexity int) int
		VehicleOperatingCertificatePhoto  func(childComplexity int) int
		VehiclePicture                    func(childComplexity int) int
	}

	MuckTruckCategoryInfoMinFields struct {
		ActualOwnerContactPhone           func(childComplexity int) int
		ActualOwnerIDNumber               func(childComplexity int) int
		ActualOwnerIDPhoto                func(childComplexity int) int
		ActualOwnerName                   func(childComplexity int) int
		AnnualInspectionExpirationTime    func(childComplexity int) int
		ApplyInspectionTime               func(childComplexity int) int
		AxesNumber                        func(childComplexity int) int
		BlacklistDeadline                 func(childComplexity int) int
		CompulsoryInsurancePolicyPicture  func(childComplexity int) int
		CreateAt                          func(childComplexity int) int
		CreateBy                          func(childComplexity int) int
		DeleteAt                          func(childComplexity int) int
		DeleteBy                          func(childComplexity int) int
		DrivingLicenseContactPhone        func(childComplexity int) int
		DrivingLicenseIDNumber            func(childComplexity int) int
		DrivingLiscenseOwnerIDPhoto       func(childComplexity int) int
		EngineNumber                      func(childComplexity int) int
		ID                                func(childComplexity int) int
		IllegalNoticeNumberEndorsement    func(childComplexity int) int
		IllegalNumberEndorsement          func(childComplexity int) int
		IncidentNumberEndorsement         func(childComplexity int) int
		InitialRegistrationDate           func(childComplexity int) int
		InsuranceExpiryTime               func(childComplexity int) int
		IssueDateOfQuangongNumber         func(childComplexity int) int
		OwnerIDPhoto                      func(childComplexity int) int
		ProcessingNotes                   func(childComplexity int) int
		ProcessingTime                    func(childComplexity int) int
		Processor                         func(childComplexity int) int
		ReviewNotes                       func(childComplexity int) int
		ReviewStatus                      func(childComplexity int) int
		ReviewTime                        func(childComplexity int) int
		Reviewer                          func(childComplexity int) int
		SecondaryMaintenanceExpiryDate    func(childComplexity int) int
		SecondaryMaintenanceLocation      func(childComplexity int) int
		SigningAcceptanceApplicationTime  func(childComplexity int) int
		ThirdPartyInsuranceCoverage       func(childComplexity int) int
		ThirdPartyInsuranceExpiryTime     func(childComplexity int) int
		ThirdPartyInsurancePolicyPicture  func(childComplexity int) int
		TotalMass                         func(childComplexity int) int
		UpdateAt                          func(childComplexity int) int
		UpdateBy                          func(childComplexity int) int
		VehicleDescription                func(childComplexity int) int
		VehicleID                         func(childComplexity int) int
		VehicleNature                     func(childComplexity int) int
		VehicleOperatingCertificateNumber func(childComplexity int) int
		VehicleOperatingCertificatePhoto  func(childComplexity int) int
		VehiclePicture                    func(childComplexity int) int
	}

	MuckTruckCategoryInfoMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	MuckTruckCategoryInfoStddevFields struct {
		AxesNumber    func(childComplexity int) int
		ID            func(childComplexity int) int
		TotalMass     func(childComplexity int) int
		VehicleNature func(childComplexity int) int
	}

	MuckTruckCategoryInfoStddevPopFields struct {
		AxesNumber    func(childComplexity int) int
		ID            func(childComplexity int) int
		TotalMass     func(childComplexity int) int
		VehicleNature func(childComplexity int) int
	}

	MuckTruckCategoryInfoStddevSampFields struct {
		AxesNumber    func(childComplexity int) int
		ID            func(childComplexity int) int
		TotalMass     func(childComplexity int) int
		VehicleNature func(childComplexity int) int
	}

	MuckTruckCategoryInfoSumFields struct {
		AxesNumber    func(childComplexity int) int
		ID            func(childComplexity int) int
		TotalMass     func(childComplexity int) int
		VehicleNature func(childComplexity int) int
	}

	MuckTruckCategoryInfoVarPopFields struct {
		AxesNumber    func(childComplexity int) int
		ID            func(childComplexity int) int
		TotalMass     func(childComplexity int) int
		VehicleNature func(childComplexity int) int
	}

	MuckTruckCategoryInfoVarSampFields struct {
		AxesNumber    func(childComplexity int) int
		ID            func(childComplexity int) int
		TotalMass     func(childComplexity int) int
		VehicleNature func(childComplexity int) int
	}

	MuckTruckCategoryInfoVarianceFields struct {
		AxesNumber    func(childComplexity int) int
		ID            func(childComplexity int) int
		TotalMass     func(childComplexity int) int
		VehicleNature func(childComplexity int) int
	}

	MuckTruckInfo struct {
		AreaID             func(childComplexity int) int
		CreateAt           func(childComplexity int) int
		CreateBy           func(childComplexity int) int
		DeleteAt           func(childComplexity int) int
		DeleteBy           func(childComplexity int) int
		ExpiryDate         func(childComplexity int) int
		FakeIP             func(childComplexity int) int
		IsReserveLibrary   func(childComplexity int) int
		LoadCategory       func(childComplexity int) int
		MobileCardLocation func(childComplexity int) int
		MuckTruckID        func(childComplexity int) int
		MuckTruckType      func(childComplexity int) int
		RegistrationDate   func(childComplexity int) int
		SelfNumber         func(childComplexity int) int
		ServerID           func(childComplexity int) int
		SimCardNumber      func(childComplexity int) int
		UpdateAt           func(childComplexity int) int
		UpdateBy           func(childComplexity int) int
		VehicleID          func(childComplexity int) int
	}

	MuckTruckInfoAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	MuckTruckInfoAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.MuckTruckInfoSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	MuckTruckInfoAvgFields struct {
		AreaID        func(childComplexity int) int
		MuckTruckID   func(childComplexity int) int
		MuckTruckType func(childComplexity int) int
		ServerID      func(childComplexity int) int
	}

	MuckTruckInfoMaxFields struct {
		AreaID             func(childComplexity int) int
		CreateAt           func(childComplexity int) int
		CreateBy           func(childComplexity int) int
		DeleteAt           func(childComplexity int) int
		DeleteBy           func(childComplexity int) int
		ExpiryDate         func(childComplexity int) int
		FakeIP             func(childComplexity int) int
		LoadCategory       func(childComplexity int) int
		MobileCardLocation func(childComplexity int) int
		MuckTruckID        func(childComplexity int) int
		MuckTruckType      func(childComplexity int) int
		RegistrationDate   func(childComplexity int) int
		SelfNumber         func(childComplexity int) int
		ServerID           func(childComplexity int) int
		SimCardNumber      func(childComplexity int) int
		UpdateAt           func(childComplexity int) int
		UpdateBy           func(childComplexity int) int
		VehicleID          func(childComplexity int) int
	}

	MuckTruckInfoMinFields struct {
		AreaID             func(childComplexity int) int
		CreateAt           func(childComplexity int) int
		CreateBy           func(childComplexity int) int
		DeleteAt           func(childComplexity int) int
		DeleteBy           func(childComplexity int) int
		ExpiryDate         func(childComplexity int) int
		FakeIP             func(childComplexity int) int
		LoadCategory       func(childComplexity int) int
		MobileCardLocation func(childComplexity int) int
		MuckTruckID        func(childComplexity int) int
		MuckTruckType      func(childComplexity int) int
		RegistrationDate   func(childComplexity int) int
		SelfNumber         func(childComplexity int) int
		ServerID           func(childComplexity int) int
		SimCardNumber      func(childComplexity int) int
		UpdateAt           func(childComplexity int) int
		UpdateBy           func(childComplexity int) int
		VehicleID          func(childComplexity int) int
	}

	MuckTruckInfoMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	MuckTruckInfoStddevFields struct {
		AreaID        func(childComplexity int) int
		MuckTruckID   func(childComplexity int) int
		MuckTruckType func(childComplexity int) int
		ServerID      func(childComplexity int) int
	}

	MuckTruckInfoStddevPopFields struct {
		AreaID        func(childComplexity int) int
		MuckTruckID   func(childComplexity int) int
		MuckTruckType func(childComplexity int) int
		ServerID      func(childComplexity int) int
	}

	MuckTruckInfoStddevSampFields struct {
		AreaID        func(childComplexity int) int
		MuckTruckID   func(childComplexity int) int
		MuckTruckType func(childComplexity int) int
		ServerID      func(childComplexity int) int
	}

	MuckTruckInfoSumFields struct {
		AreaID        func(childComplexity int) int
		MuckTruckID   func(childComplexity int) int
		MuckTruckType func(childComplexity int) int
		ServerID      func(childComplexity int) int
	}

	MuckTruckInfoVarPopFields struct {
		AreaID        func(childComplexity int) int
		MuckTruckID   func(childComplexity int) int
		MuckTruckType func(childComplexity int) int
		ServerID      func(childComplexity int) int
	}

	MuckTruckInfoVarSampFields struct {
		AreaID        func(childComplexity int) int
		MuckTruckID   func(childComplexity int) int
		MuckTruckType func(childComplexity int) int
		ServerID      func(childComplexity int) int
	}

	MuckTruckInfoVarianceFields struct {
		AreaID        func(childComplexity int) int
		MuckTruckID   func(childComplexity int) int
		MuckTruckType func(childComplexity int) int
		ServerID      func(childComplexity int) int
	}

	MuckTruckPreviewNumber struct {
		ConfirmStatus           func(childComplexity int) int
		ConfirmTime             func(childComplexity int) int
		Confirmor               func(childComplexity int) int
		ContactPerson           func(childComplexity int) int
		ContactPhone            func(childComplexity int) int
		CreateBy                func(childComplexity int) int
		DeleteAt                func(childComplexity int) int
		DeleteBy                func(childComplexity int) int
		FrontLicensePlate       func(childComplexity int) int
		ID                      func(childComplexity int) int
		InitialRegistrationDate func(childComplexity int) int
		IsDelete                func(childComplexity int) int
		IsRegisterSaleOrder     func(childComplexity int) int
		IsReviewAutomatically   func(childComplexity int) int
		MarkingTime             func(childComplexity int) int
		OriginalNumber          func(childComplexity int) int
		ProductionStatus        func(childComplexity int) int
		ProductionTime          func(childComplexity int) int
		ProductionTimes         func(childComplexity int) int
		RearLicensePlate        func(childComplexity int) int
		RegistrationTime        func(childComplexity int) int
		Remarks                 func(childComplexity int) int
		SideLicensePlate        func(childComplexity int) int
		SvnNumber               func(childComplexity int) int
		UnlawfulViolationNumber func(childComplexity int) int
		UpdateAt                func(childComplexity int) int
		UpdateBy                func(childComplexity int) int
		VehicleID               func(childComplexity int) int
		WorkNumberPlateColor    func(childComplexity int) int
	}

	MuckTruckPreviewNumberAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	MuckTruckPreviewNumberAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.MuckTruckPreviewNumberSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	MuckTruckPreviewNumberAvgFields struct {
		ConfirmStatus           func(childComplexity int) int
		ID                      func(childComplexity int) int
		ProductionStatus        func(childComplexity int) int
		ProductionTimes         func(childComplexity int) int
		UnlawfulViolationNumber func(childComplexity int) int
	}

	MuckTruckPreviewNumberMaxFields struct {
		ConfirmStatus           func(childComplexity int) int
		ConfirmTime             func(childComplexity int) int
		Confirmor               func(childComplexity int) int
		ContactPerson           func(childComplexity int) int
		ContactPhone            func(childComplexity int) int
		CreateBy                func(childComplexity int) int
		DeleteAt                func(childComplexity int) int
		DeleteBy                func(childComplexity int) int
		FrontLicensePlate       func(childComplexity int) int
		ID                      func(childComplexity int) int
		InitialRegistrationDate func(childComplexity int) int
		MarkingTime             func(childComplexity int) int
		OriginalNumber          func(childComplexity int) int
		ProductionStatus        func(childComplexity int) int
		ProductionTime          func(childComplexity int) int
		ProductionTimes         func(childComplexity int) int
		RearLicensePlate        func(childComplexity int) int
		RegistrationTime        func(childComplexity int) int
		Remarks                 func(childComplexity int) int
		SideLicensePlate        func(childComplexity int) int
		SvnNumber               func(childComplexity int) int
		UnlawfulViolationNumber func(childComplexity int) int
		UpdateAt                func(childComplexity int) int
		UpdateBy                func(childComplexity int) int
		VehicleID               func(childComplexity int) int
		WorkNumberPlateColor    func(childComplexity int) int
	}

	MuckTruckPreviewNumberMinFields struct {
		ConfirmStatus           func(childComplexity int) int
		ConfirmTime             func(childComplexity int) int
		Confirmor               func(childComplexity int) int
		ContactPerson           func(childComplexity int) int
		ContactPhone            func(childComplexity int) int
		CreateBy                func(childComplexity int) int
		DeleteAt                func(childComplexity int) int
		DeleteBy                func(childComplexity int) int
		FrontLicensePlate       func(childComplexity int) int
		ID                      func(childComplexity int) int
		InitialRegistrationDate func(childComplexity int) int
		MarkingTime             func(childComplexity int) int
		OriginalNumber          func(childComplexity int) int
		ProductionStatus        func(childComplexity int) int
		ProductionTime          func(childComplexity int) int
		ProductionTimes         func(childComplexity int) int
		RearLicensePlate        func(childComplexity int) int
		RegistrationTime        func(childComplexity int) int
		Remarks                 func(childComplexity int) int
		SideLicensePlate        func(childComplexity int) int
		SvnNumber               func(childComplexity int) int
		UnlawfulViolationNumber func(childComplexity int) int
		UpdateAt                func(childComplexity int) int
		UpdateBy                func(childComplexity int) int
		VehicleID               func(childComplexity int) int
		WorkNumberPlateColor    func(childComplexity int) int
	}

	MuckTruckPreviewNumberMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	MuckTruckPreviewNumberStddevFields struct {
		ConfirmStatus           func(childComplexity int) int
		ID                      func(childComplexity int) int
		ProductionStatus        func(childComplexity int) int
		ProductionTimes         func(childComplexity int) int
		UnlawfulViolationNumber func(childComplexity int) int
	}

	MuckTruckPreviewNumberStddevPopFields struct {
		ConfirmStatus           func(childComplexity int) int
		ID                      func(childComplexity int) int
		ProductionStatus        func(childComplexity int) int
		ProductionTimes         func(childComplexity int) int
		UnlawfulViolationNumber func(childComplexity int) int
	}

	MuckTruckPreviewNumberStddevSampFields struct {
		ConfirmStatus           func(childComplexity int) int
		ID                      func(childComplexity int) int
		ProductionStatus        func(childComplexity int) int
		ProductionTimes         func(childComplexity int) int
		UnlawfulViolationNumber func(childComplexity int) int
	}

	MuckTruckPreviewNumberSumFields struct {
		ConfirmStatus           func(childComplexity int) int
		ID                      func(childComplexity int) int
		ProductionStatus        func(childComplexity int) int
		ProductionTimes         func(childComplexity int) int
		UnlawfulViolationNumber func(childComplexity int) int
	}

	MuckTruckPreviewNumberVarPopFields struct {
		ConfirmStatus           func(childComplexity int) int
		ID                      func(childComplexity int) int
		ProductionStatus        func(childComplexity int) int
		ProductionTimes         func(childComplexity int) int
		UnlawfulViolationNumber func(childComplexity int) int
	}

	MuckTruckPreviewNumberVarSampFields struct {
		ConfirmStatus           func(childComplexity int) int
		ID                      func(childComplexity int) int
		ProductionStatus        func(childComplexity int) int
		ProductionTimes         func(childComplexity int) int
		UnlawfulViolationNumber func(childComplexity int) int
	}

	MuckTruckPreviewNumberVarianceFields struct {
		ConfirmStatus           func(childComplexity int) int
		ID                      func(childComplexity int) int
		ProductionStatus        func(childComplexity int) int
		ProductionTimes         func(childComplexity int) int
		UnlawfulViolationNumber func(childComplexity int) int
	}

	MuckTruckWorkerIDCardOrders struct {
		CreateAt        func(childComplexity int) int
		CreateBy        func(childComplexity int) int
		DeleteAt        func(childComplexity int) int
		DeleteBy        func(childComplexity int) int
		ID              func(childComplexity int) int
		PreviewNumberID func(childComplexity int) int
		UpdateAt        func(childComplexity int) int
		UpdateBy        func(childComplexity int) int
		VehicleID       func(childComplexity int) int
	}

	MuckTruckWorkerIDCardOrdersAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	MuckTruckWorkerIDCardOrdersAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.MuckTruckWorkerIDCardOrdersSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	MuckTruckWorkerIDCardOrdersAvgFields struct {
		ID              func(childComplexity int) int
		PreviewNumberID func(childComplexity int) int
	}

	MuckTruckWorkerIDCardOrdersMaxFields struct {
		CreateAt        func(childComplexity int) int
		CreateBy        func(childComplexity int) int
		DeleteAt        func(childComplexity int) int
		DeleteBy        func(childComplexity int) int
		ID              func(childComplexity int) int
		PreviewNumberID func(childComplexity int) int
		UpdateAt        func(childComplexity int) int
		UpdateBy        func(childComplexity int) int
		VehicleID       func(childComplexity int) int
	}

	MuckTruckWorkerIDCardOrdersMinFields struct {
		CreateAt        func(childComplexity int) int
		CreateBy        func(childComplexity int) int
		DeleteAt        func(childComplexity int) int
		DeleteBy        func(childComplexity int) int
		ID              func(childComplexity int) int
		PreviewNumberID func(childComplexity int) int
		UpdateAt        func(childComplexity int) int
		UpdateBy        func(childComplexity int) int
		VehicleID       func(childComplexity int) int
	}

	MuckTruckWorkerIDCardOrdersMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	MuckTruckWorkerIDCardOrdersStddevFields struct {
		ID              func(childComplexity int) int
		PreviewNumberID func(childComplexity int) int
	}

	MuckTruckWorkerIDCardOrdersStddevPopFields struct {
		ID              func(childComplexity int) int
		PreviewNumberID func(childComplexity int) int
	}

	MuckTruckWorkerIDCardOrdersStddevSampFields struct {
		ID              func(childComplexity int) int
		PreviewNumberID func(childComplexity int) int
	}

	MuckTruckWorkerIDCardOrdersSumFields struct {
		ID              func(childComplexity int) int
		PreviewNumberID func(childComplexity int) int
	}

	MuckTruckWorkerIDCardOrdersVarPopFields struct {
		ID              func(childComplexity int) int
		PreviewNumberID func(childComplexity int) int
	}

	MuckTruckWorkerIDCardOrdersVarSampFields struct {
		ID              func(childComplexity int) int
		PreviewNumberID func(childComplexity int) int
	}

	MuckTruckWorkerIDCardOrdersVarianceFields struct {
		ID              func(childComplexity int) int
		PreviewNumberID func(childComplexity int) int
	}

	OperatingVehicleInfo struct {
		AdministrativeRegion         func(childComplexity int) int
		Agent                        func(childComplexity int) int
		ContactNumber                func(childComplexity int) int
		ContractTime                 func(childComplexity int) int
		CreateAt                     func(childComplexity int) int
		CreateBy                     func(childComplexity int) int
		DeleteAt                     func(childComplexity int) int
		DeleteBy                     func(childComplexity int) int
		DrivingLicenseOwner          func(childComplexity int) int
		FirstOnlineTime              func(childComplexity int) int
		InstallationTime             func(childComplexity int) int
		IsActive                     func(childComplexity int) int
		IsApplayTerminalInstallation func(childComplexity int) int
		IsBd                         func(childComplexity int) int
		IsBlock                      func(childComplexity int) int
		IsEngineeringVehicle         func(childComplexity int) int
		IsFunctionOk                 func(childComplexity int) int
		IsInOperatingSystem          func(childComplexity int) int
		IsInUploadPlatform           func(childComplexity int) int
		IsNeedSupervise              func(childComplexity int) int
		IsSupervise                  func(childComplexity int) int
		LastBindingTerminalTime      func(childComplexity int) int
		LicensePlatePhoto            func(childComplexity int) int
		MuckTruckType                func(childComplexity int) int
		OperatingVehicleID           func(childComplexity int) int
		OtherPhoto                   func(childComplexity int) int
		Platform                     func(childComplexity int) int
		PositionDbID                 func(childComplexity int) int
		ScrapReason                  func(childComplexity int) int
		ScrapTime                    func(childComplexity int) int
		ScrapTimeCheck               func(childComplexity int) int
		SerialNumber                 func(childComplexity int) int
		ServiceExpirationTime        func(childComplexity int) int
		SpeedModeStatus              func(childComplexity int) int
		SpeedModeStatusTime          func(childComplexity int) int
		TemporaryLibrary             func(childComplexity int) int
		TemporaryTransportBureau     func(childComplexity int) int
		UpdateAt                     func(childComplexity int) int
		UpdateBy                     func(childComplexity int) int
		VehicleID                    func(childComplexity int) int
	}

	OperatingVehicleInfoAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	OperatingVehicleInfoAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.OperatingVehicleInfoSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	OperatingVehicleInfoAvgFields struct {
		MuckTruckType            func(childComplexity int) int
		OperatingVehicleID       func(childComplexity int) int
		Platform                 func(childComplexity int) int
		ScrapTimeCheck           func(childComplexity int) int
		TemporaryLibrary         func(childComplexity int) int
		TemporaryTransportBureau func(childComplexity int) int
	}

	OperatingVehicleInfoMaxFields struct {
		AdministrativeRegion     func(childComplexity int) int
		Agent                    func(childComplexity int) int
		ContactNumber            func(childComplexity int) int
		ContractTime             func(childComplexity int) int
		CreateAt                 func(childComplexity int) int
		CreateBy                 func(childComplexity int) int
		DeleteAt                 func(childComplexity int) int
		DeleteBy                 func(childComplexity int) int
		DrivingLicenseOwner      func(childComplexity int) int
		FirstOnlineTime          func(childComplexity int) int
		InstallationTime         func(childComplexity int) int
		LastBindingTerminalTime  func(childComplexity int) int
		LicensePlatePhoto        func(childComplexity int) int
		MuckTruckType            func(childComplexity int) int
		OperatingVehicleID       func(childComplexity int) int
		OtherPhoto               func(childComplexity int) int
		Platform                 func(childComplexity int) int
		PositionDbID             func(childComplexity int) int
		ScrapReason              func(childComplexity int) int
		ScrapTime                func(childComplexity int) int
		ScrapTimeCheck           func(childComplexity int) int
		SerialNumber             func(childComplexity int) int
		ServiceExpirationTime    func(childComplexity int) int
		SpeedModeStatus          func(childComplexity int) int
		SpeedModeStatusTime      func(childComplexity int) int
		TemporaryLibrary         func(childComplexity int) int
		TemporaryTransportBureau func(childComplexity int) int
		UpdateAt                 func(childComplexity int) int
		UpdateBy                 func(childComplexity int) int
		VehicleID                func(childComplexity int) int
	}

	OperatingVehicleInfoMinFields struct {
		AdministrativeRegion     func(childComplexity int) int
		Agent                    func(childComplexity int) int
		ContactNumber            func(childComplexity int) int
		ContractTime             func(childComplexity int) int
		CreateAt                 func(childComplexity int) int
		CreateBy                 func(childComplexity int) int
		DeleteAt                 func(childComplexity int) int
		DeleteBy                 func(childComplexity int) int
		DrivingLicenseOwner      func(childComplexity int) int
		FirstOnlineTime          func(childComplexity int) int
		InstallationTime         func(childComplexity int) int
		LastBindingTerminalTime  func(childComplexity int) int
		LicensePlatePhoto        func(childComplexity int) int
		MuckTruckType            func(childComplexity int) int
		OperatingVehicleID       func(childComplexity int) int
		OtherPhoto               func(childComplexity int) int
		Platform                 func(childComplexity int) int
		PositionDbID             func(childComplexity int) int
		ScrapReason              func(childComplexity int) int
		ScrapTime                func(childComplexity int) int
		ScrapTimeCheck           func(childComplexity int) int
		SerialNumber             func(childComplexity int) int
		ServiceExpirationTime    func(childComplexity int) int
		SpeedModeStatus          func(childComplexity int) int
		SpeedModeStatusTime      func(childComplexity int) int
		TemporaryLibrary         func(childComplexity int) int
		TemporaryTransportBureau func(childComplexity int) int
		UpdateAt                 func(childComplexity int) int
		UpdateBy                 func(childComplexity int) int
		VehicleID                func(childComplexity int) int
	}

	OperatingVehicleInfoMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	OperatingVehicleInfoStddevFields struct {
		MuckTruckType            func(childComplexity int) int
		OperatingVehicleID       func(childComplexity int) int
		Platform                 func(childComplexity int) int
		ScrapTimeCheck           func(childComplexity int) int
		TemporaryLibrary         func(childComplexity int) int
		TemporaryTransportBureau func(childComplexity int) int
	}

	OperatingVehicleInfoStddevPopFields struct {
		MuckTruckType            func(childComplexity int) int
		OperatingVehicleID       func(childComplexity int) int
		Platform                 func(childComplexity int) int
		ScrapTimeCheck           func(childComplexity int) int
		TemporaryLibrary         func(childComplexity int) int
		TemporaryTransportBureau func(childComplexity int) int
	}

	OperatingVehicleInfoStddevSampFields struct {
		MuckTruckType            func(childComplexity int) int
		OperatingVehicleID       func(childComplexity int) int
		Platform                 func(childComplexity int) int
		ScrapTimeCheck           func(childComplexity int) int
		TemporaryLibrary         func(childComplexity int) int
		TemporaryTransportBureau func(childComplexity int) int
	}

	OperatingVehicleInfoSumFields struct {
		MuckTruckType            func(childComplexity int) int
		OperatingVehicleID       func(childComplexity int) int
		Platform                 func(childComplexity int) int
		ScrapTimeCheck           func(childComplexity int) int
		TemporaryLibrary         func(childComplexity int) int
		TemporaryTransportBureau func(childComplexity int) int
	}

	OperatingVehicleInfoVarPopFields struct {
		MuckTruckType            func(childComplexity int) int
		OperatingVehicleID       func(childComplexity int) int
		Platform                 func(childComplexity int) int
		ScrapTimeCheck           func(childComplexity int) int
		TemporaryLibrary         func(childComplexity int) int
		TemporaryTransportBureau func(childComplexity int) int
	}

	OperatingVehicleInfoVarSampFields struct {
		MuckTruckType            func(childComplexity int) int
		OperatingVehicleID       func(childComplexity int) int
		Platform                 func(childComplexity int) int
		ScrapTimeCheck           func(childComplexity int) int
		TemporaryLibrary         func(childComplexity int) int
		TemporaryTransportBureau func(childComplexity int) int
	}

	OperatingVehicleInfoVarianceFields struct {
		MuckTruckType            func(childComplexity int) int
		OperatingVehicleID       func(childComplexity int) int
		Platform                 func(childComplexity int) int
		ScrapTimeCheck           func(childComplexity int) int
		TemporaryLibrary         func(childComplexity int) int
		TemporaryTransportBureau func(childComplexity int) int
	}

	OwnerInfo struct {
		Address      func(childComplexity int) int
		Agent        func(childComplexity int) int
		Cellphone    func(childComplexity int) int
		CreateAt     func(childComplexity int) int
		CreateBy     func(childComplexity int) int
		DeleteAt     func(childComplexity int) int
		DeleteBy     func(childComplexity int) int
		DepartmentID func(childComplexity int) int
		Email        func(childComplexity int) int
		ExpiryDate   func(childComplexity int) int
		ID           func(childComplexity int) int
		IDNumber     func(childComplexity int) int
		IsDelete     func(childComplexity int) int
		Name         func(childComplexity int) int
		Operator     func(childComplexity int) int
		OwnerID      func(childComplexity int) int
		Remarks      func(childComplexity int) int
		Sex          func(childComplexity int) int
		Telephone    func(childComplexity int) int
		UpdateAt     func(childComplexity int) int
		UpdateBy     func(childComplexity int) int
	}

	OwnerInfoAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	OwnerInfoAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.OwnerInfoSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	OwnerInfoAvgFields struct {
		ID  func(childComplexity int) int
		Sex func(childComplexity int) int
	}

	OwnerInfoMaxFields struct {
		Address      func(childComplexity int) int
		Agent        func(childComplexity int) int
		Cellphone    func(childComplexity int) int
		CreateAt     func(childComplexity int) int
		CreateBy     func(childComplexity int) int
		DeleteAt     func(childComplexity int) int
		DeleteBy     func(childComplexity int) int
		DepartmentID func(childComplexity int) int
		Email        func(childComplexity int) int
		ExpiryDate   func(childComplexity int) int
		ID           func(childComplexity int) int
		IDNumber     func(childComplexity int) int
		Name         func(childComplexity int) int
		Operator     func(childComplexity int) int
		OwnerID      func(childComplexity int) int
		Remarks      func(childComplexity int) int
		Sex          func(childComplexity int) int
		Telephone    func(childComplexity int) int
		UpdateAt     func(childComplexity int) int
		UpdateBy     func(childComplexity int) int
	}

	OwnerInfoMinFields struct {
		Address      func(childComplexity int) int
		Agent        func(childComplexity int) int
		Cellphone    func(childComplexity int) int
		CreateAt     func(childComplexity int) int
		CreateBy     func(childComplexity int) int
		DeleteAt     func(childComplexity int) int
		DeleteBy     func(childComplexity int) int
		DepartmentID func(childComplexity int) int
		Email        func(childComplexity int) int
		ExpiryDate   func(childComplexity int) int
		ID           func(childComplexity int) int
		IDNumber     func(childComplexity int) int
		Name         func(childComplexity int) int
		Operator     func(childComplexity int) int
		OwnerID      func(childComplexity int) int
		Remarks      func(childComplexity int) int
		Sex          func(childComplexity int) int
		Telephone    func(childComplexity int) int
		UpdateAt     func(childComplexity int) int
		UpdateBy     func(childComplexity int) int
	}

	OwnerInfoMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	OwnerInfoStddevFields struct {
		ID  func(childComplexity int) int
		Sex func(childComplexity int) int
	}

	OwnerInfoStddevPopFields struct {
		ID  func(childComplexity int) int
		Sex func(childComplexity int) int
	}

	OwnerInfoStddevSampFields struct {
		ID  func(childComplexity int) int
		Sex func(childComplexity int) int
	}

	OwnerInfoSumFields struct {
		ID  func(childComplexity int) int
		Sex func(childComplexity int) int
	}

	OwnerInfoVarPopFields struct {
		ID  func(childComplexity int) int
		Sex func(childComplexity int) int
	}

	OwnerInfoVarSampFields struct {
		ID  func(childComplexity int) int
		Sex func(childComplexity int) int
	}

	OwnerInfoVarianceFields struct {
		ID  func(childComplexity int) int
		Sex func(childComplexity int) int
	}

	VehicleInfo struct {
		BusinessScope               func(childComplexity int) int
		CarRentalPrice              func(childComplexity int) int
		CheckState                  func(childComplexity int) int
		CreateAt                    func(childComplexity int) int
		CreateBy                    func(childComplexity int) int
		DeleteAt                    func(childComplexity int) int
		DeleteBy                    func(childComplexity int) int
		DepartmentID                func(childComplexity int) int
		DrivingLicenseePic          func(childComplexity int) int
		EnterpriseID                func(childComplexity int) int
		Heavy                       func(childComplexity int) int
		ID                          func(childComplexity int) int
		IndustryCategory            func(childComplexity int) int
		InspectionDate              func(childComplexity int) int
		InsuranceCompany            func(childComplexity int) int
		InsuranceDate               func(childComplexity int) int
		IsActive                    func(childComplexity int) int
		IsApplyInstallTerminal      func(childComplexity int) int
		IsComplete                  func(childComplexity int) int
		IsDelete                    func(childComplexity int) int
		IsImport                    func(childComplexity int) int
		IsInput                     func(childComplexity int) int
		IsUploadProvince            func(childComplexity int) int
		LicensePlateColor           func(childComplexity int) int
		LicensePlateNumber          func(childComplexity int) int
		LicensePlateType            func(childComplexity int) int
		MuckTruckID                 func(childComplexity int) int
		OperatingRoute              func(childComplexity int) int
		OperatingState              func(childComplexity int) int
		OperatingType               func(childComplexity int) int
		OperatingVehicleID          func(childComplexity int) int
		Owner                       func(childComplexity int) int
		QuasiDrivingModels          func(childComplexity int) int
		RecordAt                    func(childComplexity int) int
		RecordBy                    func(childComplexity int) int
		RemarkIn                    func(childComplexity int) int
		Remarks                     func(childComplexity int) int
		RetirementDate              func(childComplexity int) int
		RoadTransportLicenseNumber  func(childComplexity int) int
		Seats                       func(childComplexity int) int
		TerminalID                  func(childComplexity int) int
		UpdateAt                    func(childComplexity int) int
		UpdateBy                    func(childComplexity int) int
		UpdateTimeIn                func(childComplexity int) int
		UseNature                   func(childComplexity int) int
		VehicleBrand                func(childComplexity int) int
		VehicleDisplacement         func(childComplexity int) int
		VehicleID                   func(childComplexity int) int
		VehicleIdentificationNumber func(childComplexity int) int
		VehicleMaintenances         func(childComplexity int) int
		VehicleManager              func(childComplexity int) int
		VehicleManagerIDCard        func(childComplexity int) int
		VehicleManagerPhone         func(childComplexity int) int
		VehicleState                func(childComplexity int) int
		VehicleType                 func(childComplexity int) int
	}

	VehicleInfoAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	VehicleInfoAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.VehicleInfoSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VehicleInfoAvgFields struct {
		BusinessScope      func(childComplexity int) int
		CarRentalPrice     func(childComplexity int) int
		CheckState         func(childComplexity int) int
		Heavy              func(childComplexity int) int
		ID                 func(childComplexity int) int
		IndustryCategory   func(childComplexity int) int
		InsuranceCompany   func(childComplexity int) int
		LicensePlateColor  func(childComplexity int) int
		LicensePlateType   func(childComplexity int) int
		MuckTruckID        func(childComplexity int) int
		OperatingState     func(childComplexity int) int
		OperatingType      func(childComplexity int) int
		OperatingVehicleID func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Seats              func(childComplexity int) int
		VehicleBrand       func(childComplexity int) int
		VehicleState       func(childComplexity int) int
		VehicleType        func(childComplexity int) int
	}

	VehicleInfoChangeLog struct {
		BusinessScope               func(childComplexity int) int
		CarRentalPrice              func(childComplexity int) int
		CheckState                  func(childComplexity int) int
		CreateAt                    func(childComplexity int) int
		CreateBy                    func(childComplexity int) int
		DeleteAt                    func(childComplexity int) int
		DeleteBy                    func(childComplexity int) int
		DepartmentID                func(childComplexity int) int
		DrivingLicenseePic          func(childComplexity int) int
		EnterpriseID                func(childComplexity int) int
		Heavy                       func(childComplexity int) int
		ID                          func(childComplexity int) int
		IndustryCategory            func(childComplexity int) int
		InspectionDate              func(childComplexity int) int
		InsuranceCompany            func(childComplexity int) int
		InsuranceDate               func(childComplexity int) int
		IsActive                    func(childComplexity int) int
		IsApplyInstallTerminal      func(childComplexity int) int
		IsComplete                  func(childComplexity int) int
		IsDelete                    func(childComplexity int) int
		IsImport                    func(childComplexity int) int
		IsInput                     func(childComplexity int) int
		IsUploadProvince            func(childComplexity int) int
		LicensePlateColor           func(childComplexity int) int
		LicensePlateNumber          func(childComplexity int) int
		LicensePlateType            func(childComplexity int) int
		MuckTruckID                 func(childComplexity int) int
		OperatingRoute              func(childComplexity int) int
		OperatingState              func(childComplexity int) int
		OperatingType               func(childComplexity int) int
		OperatingVehicleID          func(childComplexity int) int
		Owner                       func(childComplexity int) int
		QuasiDrivingModels          func(childComplexity int) int
		RecordAt                    func(childComplexity int) int
		RecordBy                    func(childComplexity int) int
		RemarkIn                    func(childComplexity int) int
		Remarks                     func(childComplexity int) int
		RetirementDate              func(childComplexity int) int
		RoadTransportLicenseNumber  func(childComplexity int) int
		Seats                       func(childComplexity int) int
		TerminalID                  func(childComplexity int) int
		UpdateAt                    func(childComplexity int) int
		UpdateBy                    func(childComplexity int) int
		UpdateTimeIn                func(childComplexity int) int
		UseNature                   func(childComplexity int) int
		VehicleBrand                func(childComplexity int) int
		VehicleDisplacement         func(childComplexity int) int
		VehicleIdentificationNumber func(childComplexity int) int
		VehicleInfoChangeID         func(childComplexity int) int
		VehicleMaintenances         func(childComplexity int) int
		VehicleManager              func(childComplexity int) int
		VehicleManagerIDCard        func(childComplexity int) int
		VehicleManagerPhone         func(childComplexity int) int
		VehicleState                func(childComplexity int) int
		VehicleType                 func(childComplexity int) int
	}

	VehicleInfoChangeLogAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	VehicleInfoChangeLogAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.VehicleInfoChangeLogSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VehicleInfoChangeLogAvgFields struct {
		BusinessScope      func(childComplexity int) int
		CarRentalPrice     func(childComplexity int) int
		CheckState         func(childComplexity int) int
		Heavy              func(childComplexity int) int
		ID                 func(childComplexity int) int
		IndustryCategory   func(childComplexity int) int
		InsuranceCompany   func(childComplexity int) int
		LicensePlateColor  func(childComplexity int) int
		LicensePlateType   func(childComplexity int) int
		MuckTruckID        func(childComplexity int) int
		OperatingState     func(childComplexity int) int
		OperatingType      func(childComplexity int) int
		OperatingVehicleID func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Seats              func(childComplexity int) int
		VehicleBrand       func(childComplexity int) int
		VehicleState       func(childComplexity int) int
		VehicleType        func(childComplexity int) int
	}

	VehicleInfoChangeLogMaxFields struct {
		BusinessScope               func(childComplexity int) int
		CarRentalPrice              func(childComplexity int) int
		CheckState                  func(childComplexity int) int
		CreateAt                    func(childComplexity int) int
		CreateBy                    func(childComplexity int) int
		DeleteAt                    func(childComplexity int) int
		DeleteBy                    func(childComplexity int) int
		DepartmentID                func(childComplexity int) int
		DrivingLicenseePic          func(childComplexity int) int
		EnterpriseID                func(childComplexity int) int
		Heavy                       func(childComplexity int) int
		ID                          func(childComplexity int) int
		IndustryCategory            func(childComplexity int) int
		InspectionDate              func(childComplexity int) int
		InsuranceCompany            func(childComplexity int) int
		InsuranceDate               func(childComplexity int) int
		LicensePlateColor           func(childComplexity int) int
		LicensePlateNumber          func(childComplexity int) int
		LicensePlateType            func(childComplexity int) int
		MuckTruckID                 func(childComplexity int) int
		OperatingRoute              func(childComplexity int) int
		OperatingState              func(childComplexity int) int
		OperatingType               func(childComplexity int) int
		OperatingVehicleID          func(childComplexity int) int
		Owner                       func(childComplexity int) int
		QuasiDrivingModels          func(childComplexity int) int
		RecordAt                    func(childComplexity int) int
		RecordBy                    func(childComplexity int) int
		RemarkIn                    func(childComplexity int) int
		Remarks                     func(childComplexity int) int
		RetirementDate              func(childComplexity int) int
		RoadTransportLicenseNumber  func(childComplexity int) int
		Seats                       func(childComplexity int) int
		TerminalID                  func(childComplexity int) int
		UpdateAt                    func(childComplexity int) int
		UpdateBy                    func(childComplexity int) int
		UpdateTimeIn                func(childComplexity int) int
		UseNature                   func(childComplexity int) int
		VehicleBrand                func(childComplexity int) int
		VehicleDisplacement         func(childComplexity int) int
		VehicleIdentificationNumber func(childComplexity int) int
		VehicleInfoChangeID         func(childComplexity int) int
		VehicleManager              func(childComplexity int) int
		VehicleManagerIDCard        func(childComplexity int) int
		VehicleManagerPhone         func(childComplexity int) int
		VehicleState                func(childComplexity int) int
		VehicleType                 func(childComplexity int) int
	}

	VehicleInfoChangeLogMinFields struct {
		BusinessScope               func(childComplexity int) int
		CarRentalPrice              func(childComplexity int) int
		CheckState                  func(childComplexity int) int
		CreateAt                    func(childComplexity int) int
		CreateBy                    func(childComplexity int) int
		DeleteAt                    func(childComplexity int) int
		DeleteBy                    func(childComplexity int) int
		DepartmentID                func(childComplexity int) int
		DrivingLicenseePic          func(childComplexity int) int
		EnterpriseID                func(childComplexity int) int
		Heavy                       func(childComplexity int) int
		ID                          func(childComplexity int) int
		IndustryCategory            func(childComplexity int) int
		InspectionDate              func(childComplexity int) int
		InsuranceCompany            func(childComplexity int) int
		InsuranceDate               func(childComplexity int) int
		LicensePlateColor           func(childComplexity int) int
		LicensePlateNumber          func(childComplexity int) int
		LicensePlateType            func(childComplexity int) int
		MuckTruckID                 func(childComplexity int) int
		OperatingRoute              func(childComplexity int) int
		OperatingState              func(childComplexity int) int
		OperatingType               func(childComplexity int) int
		OperatingVehicleID          func(childComplexity int) int
		Owner                       func(childComplexity int) int
		QuasiDrivingModels          func(childComplexity int) int
		RecordAt                    func(childComplexity int) int
		RecordBy                    func(childComplexity int) int
		RemarkIn                    func(childComplexity int) int
		Remarks                     func(childComplexity int) int
		RetirementDate              func(childComplexity int) int
		RoadTransportLicenseNumber  func(childComplexity int) int
		Seats                       func(childComplexity int) int
		TerminalID                  func(childComplexity int) int
		UpdateAt                    func(childComplexity int) int
		UpdateBy                    func(childComplexity int) int
		UpdateTimeIn                func(childComplexity int) int
		UseNature                   func(childComplexity int) int
		VehicleBrand                func(childComplexity int) int
		VehicleDisplacement         func(childComplexity int) int
		VehicleIdentificationNumber func(childComplexity int) int
		VehicleInfoChangeID         func(childComplexity int) int
		VehicleManager              func(childComplexity int) int
		VehicleManagerIDCard        func(childComplexity int) int
		VehicleManagerPhone         func(childComplexity int) int
		VehicleState                func(childComplexity int) int
		VehicleType                 func(childComplexity int) int
	}

	VehicleInfoChangeLogMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VehicleInfoChangeLogStddevFields struct {
		BusinessScope      func(childComplexity int) int
		CarRentalPrice     func(childComplexity int) int
		CheckState         func(childComplexity int) int
		Heavy              func(childComplexity int) int
		ID                 func(childComplexity int) int
		IndustryCategory   func(childComplexity int) int
		InsuranceCompany   func(childComplexity int) int
		LicensePlateColor  func(childComplexity int) int
		LicensePlateType   func(childComplexity int) int
		MuckTruckID        func(childComplexity int) int
		OperatingState     func(childComplexity int) int
		OperatingType      func(childComplexity int) int
		OperatingVehicleID func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Seats              func(childComplexity int) int
		VehicleBrand       func(childComplexity int) int
		VehicleState       func(childComplexity int) int
		VehicleType        func(childComplexity int) int
	}

	VehicleInfoChangeLogStddevPopFields struct {
		BusinessScope      func(childComplexity int) int
		CarRentalPrice     func(childComplexity int) int
		CheckState         func(childComplexity int) int
		Heavy              func(childComplexity int) int
		ID                 func(childComplexity int) int
		IndustryCategory   func(childComplexity int) int
		InsuranceCompany   func(childComplexity int) int
		LicensePlateColor  func(childComplexity int) int
		LicensePlateType   func(childComplexity int) int
		MuckTruckID        func(childComplexity int) int
		OperatingState     func(childComplexity int) int
		OperatingType      func(childComplexity int) int
		OperatingVehicleID func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Seats              func(childComplexity int) int
		VehicleBrand       func(childComplexity int) int
		VehicleState       func(childComplexity int) int
		VehicleType        func(childComplexity int) int
	}

	VehicleInfoChangeLogStddevSampFields struct {
		BusinessScope      func(childComplexity int) int
		CarRentalPrice     func(childComplexity int) int
		CheckState         func(childComplexity int) int
		Heavy              func(childComplexity int) int
		ID                 func(childComplexity int) int
		IndustryCategory   func(childComplexity int) int
		InsuranceCompany   func(childComplexity int) int
		LicensePlateColor  func(childComplexity int) int
		LicensePlateType   func(childComplexity int) int
		MuckTruckID        func(childComplexity int) int
		OperatingState     func(childComplexity int) int
		OperatingType      func(childComplexity int) int
		OperatingVehicleID func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Seats              func(childComplexity int) int
		VehicleBrand       func(childComplexity int) int
		VehicleState       func(childComplexity int) int
		VehicleType        func(childComplexity int) int
	}

	VehicleInfoChangeLogSumFields struct {
		BusinessScope      func(childComplexity int) int
		CarRentalPrice     func(childComplexity int) int
		CheckState         func(childComplexity int) int
		Heavy              func(childComplexity int) int
		ID                 func(childComplexity int) int
		IndustryCategory   func(childComplexity int) int
		InsuranceCompany   func(childComplexity int) int
		LicensePlateColor  func(childComplexity int) int
		LicensePlateType   func(childComplexity int) int
		MuckTruckID        func(childComplexity int) int
		OperatingState     func(childComplexity int) int
		OperatingType      func(childComplexity int) int
		OperatingVehicleID func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Seats              func(childComplexity int) int
		VehicleBrand       func(childComplexity int) int
		VehicleState       func(childComplexity int) int
		VehicleType        func(childComplexity int) int
	}

	VehicleInfoChangeLogVarPopFields struct {
		BusinessScope      func(childComplexity int) int
		CarRentalPrice     func(childComplexity int) int
		CheckState         func(childComplexity int) int
		Heavy              func(childComplexity int) int
		ID                 func(childComplexity int) int
		IndustryCategory   func(childComplexity int) int
		InsuranceCompany   func(childComplexity int) int
		LicensePlateColor  func(childComplexity int) int
		LicensePlateType   func(childComplexity int) int
		MuckTruckID        func(childComplexity int) int
		OperatingState     func(childComplexity int) int
		OperatingType      func(childComplexity int) int
		OperatingVehicleID func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Seats              func(childComplexity int) int
		VehicleBrand       func(childComplexity int) int
		VehicleState       func(childComplexity int) int
		VehicleType        func(childComplexity int) int
	}

	VehicleInfoChangeLogVarSampFields struct {
		BusinessScope      func(childComplexity int) int
		CarRentalPrice     func(childComplexity int) int
		CheckState         func(childComplexity int) int
		Heavy              func(childComplexity int) int
		ID                 func(childComplexity int) int
		IndustryCategory   func(childComplexity int) int
		InsuranceCompany   func(childComplexity int) int
		LicensePlateColor  func(childComplexity int) int
		LicensePlateType   func(childComplexity int) int
		MuckTruckID        func(childComplexity int) int
		OperatingState     func(childComplexity int) int
		OperatingType      func(childComplexity int) int
		OperatingVehicleID func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Seats              func(childComplexity int) int
		VehicleBrand       func(childComplexity int) int
		VehicleState       func(childComplexity int) int
		VehicleType        func(childComplexity int) int
	}

	VehicleInfoChangeLogVarianceFields struct {
		BusinessScope      func(childComplexity int) int
		CarRentalPrice     func(childComplexity int) int
		CheckState         func(childComplexity int) int
		Heavy              func(childComplexity int) int
		ID                 func(childComplexity int) int
		IndustryCategory   func(childComplexity int) int
		InsuranceCompany   func(childComplexity int) int
		LicensePlateColor  func(childComplexity int) int
		LicensePlateType   func(childComplexity int) int
		MuckTruckID        func(childComplexity int) int
		OperatingState     func(childComplexity int) int
		OperatingType      func(childComplexity int) int
		OperatingVehicleID func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Seats              func(childComplexity int) int
		VehicleBrand       func(childComplexity int) int
		VehicleState       func(childComplexity int) int
		VehicleType        func(childComplexity int) int
	}

	VehicleInfoMaxFields struct {
		BusinessScope               func(childComplexity int) int
		CarRentalPrice              func(childComplexity int) int
		CheckState                  func(childComplexity int) int
		CreateAt                    func(childComplexity int) int
		CreateBy                    func(childComplexity int) int
		DeleteAt                    func(childComplexity int) int
		DeleteBy                    func(childComplexity int) int
		DepartmentID                func(childComplexity int) int
		DrivingLicenseePic          func(childComplexity int) int
		EnterpriseID                func(childComplexity int) int
		Heavy                       func(childComplexity int) int
		ID                          func(childComplexity int) int
		IndustryCategory            func(childComplexity int) int
		InspectionDate              func(childComplexity int) int
		InsuranceCompany            func(childComplexity int) int
		InsuranceDate               func(childComplexity int) int
		LicensePlateColor           func(childComplexity int) int
		LicensePlateNumber          func(childComplexity int) int
		LicensePlateType            func(childComplexity int) int
		MuckTruckID                 func(childComplexity int) int
		OperatingRoute              func(childComplexity int) int
		OperatingState              func(childComplexity int) int
		OperatingType               func(childComplexity int) int
		OperatingVehicleID          func(childComplexity int) int
		Owner                       func(childComplexity int) int
		QuasiDrivingModels          func(childComplexity int) int
		RecordAt                    func(childComplexity int) int
		RecordBy                    func(childComplexity int) int
		RemarkIn                    func(childComplexity int) int
		Remarks                     func(childComplexity int) int
		RetirementDate              func(childComplexity int) int
		RoadTransportLicenseNumber  func(childComplexity int) int
		Seats                       func(childComplexity int) int
		TerminalID                  func(childComplexity int) int
		UpdateAt                    func(childComplexity int) int
		UpdateBy                    func(childComplexity int) int
		UpdateTimeIn                func(childComplexity int) int
		UseNature                   func(childComplexity int) int
		VehicleBrand                func(childComplexity int) int
		VehicleDisplacement         func(childComplexity int) int
		VehicleID                   func(childComplexity int) int
		VehicleIdentificationNumber func(childComplexity int) int
		VehicleManager              func(childComplexity int) int
		VehicleManagerIDCard        func(childComplexity int) int
		VehicleManagerPhone         func(childComplexity int) int
		VehicleState                func(childComplexity int) int
		VehicleType                 func(childComplexity int) int
	}

	VehicleInfoMinFields struct {
		BusinessScope               func(childComplexity int) int
		CarRentalPrice              func(childComplexity int) int
		CheckState                  func(childComplexity int) int
		CreateAt                    func(childComplexity int) int
		CreateBy                    func(childComplexity int) int
		DeleteAt                    func(childComplexity int) int
		DeleteBy                    func(childComplexity int) int
		DepartmentID                func(childComplexity int) int
		DrivingLicenseePic          func(childComplexity int) int
		EnterpriseID                func(childComplexity int) int
		Heavy                       func(childComplexity int) int
		ID                          func(childComplexity int) int
		IndustryCategory            func(childComplexity int) int
		InspectionDate              func(childComplexity int) int
		InsuranceCompany            func(childComplexity int) int
		InsuranceDate               func(childComplexity int) int
		LicensePlateColor           func(childComplexity int) int
		LicensePlateNumber          func(childComplexity int) int
		LicensePlateType            func(childComplexity int) int
		MuckTruckID                 func(childComplexity int) int
		OperatingRoute              func(childComplexity int) int
		OperatingState              func(childComplexity int) int
		OperatingType               func(childComplexity int) int
		OperatingVehicleID          func(childComplexity int) int
		Owner                       func(childComplexity int) int
		QuasiDrivingModels          func(childComplexity int) int
		RecordAt                    func(childComplexity int) int
		RecordBy                    func(childComplexity int) int
		RemarkIn                    func(childComplexity int) int
		Remarks                     func(childComplexity int) int
		RetirementDate              func(childComplexity int) int
		RoadTransportLicenseNumber  func(childComplexity int) int
		Seats                       func(childComplexity int) int
		TerminalID                  func(childComplexity int) int
		UpdateAt                    func(childComplexity int) int
		UpdateBy                    func(childComplexity int) int
		UpdateTimeIn                func(childComplexity int) int
		UseNature                   func(childComplexity int) int
		VehicleBrand                func(childComplexity int) int
		VehicleDisplacement         func(childComplexity int) int
		VehicleID                   func(childComplexity int) int
		VehicleIdentificationNumber func(childComplexity int) int
		VehicleManager              func(childComplexity int) int
		VehicleManagerIDCard        func(childComplexity int) int
		VehicleManagerPhone         func(childComplexity int) int
		VehicleState                func(childComplexity int) int
		VehicleType                 func(childComplexity int) int
	}

	VehicleInfoMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VehicleInfoStddevFields struct {
		BusinessScope      func(childComplexity int) int
		CarRentalPrice     func(childComplexity int) int
		CheckState         func(childComplexity int) int
		Heavy              func(childComplexity int) int
		ID                 func(childComplexity int) int
		IndustryCategory   func(childComplexity int) int
		InsuranceCompany   func(childComplexity int) int
		LicensePlateColor  func(childComplexity int) int
		LicensePlateType   func(childComplexity int) int
		MuckTruckID        func(childComplexity int) int
		OperatingState     func(childComplexity int) int
		OperatingType      func(childComplexity int) int
		OperatingVehicleID func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Seats              func(childComplexity int) int
		VehicleBrand       func(childComplexity int) int
		VehicleState       func(childComplexity int) int
		VehicleType        func(childComplexity int) int
	}

	VehicleInfoStddevPopFields struct {
		BusinessScope      func(childComplexity int) int
		CarRentalPrice     func(childComplexity int) int
		CheckState         func(childComplexity int) int
		Heavy              func(childComplexity int) int
		ID                 func(childComplexity int) int
		IndustryCategory   func(childComplexity int) int
		InsuranceCompany   func(childComplexity int) int
		LicensePlateColor  func(childComplexity int) int
		LicensePlateType   func(childComplexity int) int
		MuckTruckID        func(childComplexity int) int
		OperatingState     func(childComplexity int) int
		OperatingType      func(childComplexity int) int
		OperatingVehicleID func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Seats              func(childComplexity int) int
		VehicleBrand       func(childComplexity int) int
		VehicleState       func(childComplexity int) int
		VehicleType        func(childComplexity int) int
	}

	VehicleInfoStddevSampFields struct {
		BusinessScope      func(childComplexity int) int
		CarRentalPrice     func(childComplexity int) int
		CheckState         func(childComplexity int) int
		Heavy              func(childComplexity int) int
		ID                 func(childComplexity int) int
		IndustryCategory   func(childComplexity int) int
		InsuranceCompany   func(childComplexity int) int
		LicensePlateColor  func(childComplexity int) int
		LicensePlateType   func(childComplexity int) int
		MuckTruckID        func(childComplexity int) int
		OperatingState     func(childComplexity int) int
		OperatingType      func(childComplexity int) int
		OperatingVehicleID func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Seats              func(childComplexity int) int
		VehicleBrand       func(childComplexity int) int
		VehicleState       func(childComplexity int) int
		VehicleType        func(childComplexity int) int
	}

	VehicleInfoSumFields struct {
		BusinessScope      func(childComplexity int) int
		CarRentalPrice     func(childComplexity int) int
		CheckState         func(childComplexity int) int
		Heavy              func(childComplexity int) int
		ID                 func(childComplexity int) int
		IndustryCategory   func(childComplexity int) int
		InsuranceCompany   func(childComplexity int) int
		LicensePlateColor  func(childComplexity int) int
		LicensePlateType   func(childComplexity int) int
		MuckTruckID        func(childComplexity int) int
		OperatingState     func(childComplexity int) int
		OperatingType      func(childComplexity int) int
		OperatingVehicleID func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Seats              func(childComplexity int) int
		VehicleBrand       func(childComplexity int) int
		VehicleState       func(childComplexity int) int
		VehicleType        func(childComplexity int) int
	}

	VehicleInfoVarPopFields struct {
		BusinessScope      func(childComplexity int) int
		CarRentalPrice     func(childComplexity int) int
		CheckState         func(childComplexity int) int
		Heavy              func(childComplexity int) int
		ID                 func(childComplexity int) int
		IndustryCategory   func(childComplexity int) int
		InsuranceCompany   func(childComplexity int) int
		LicensePlateColor  func(childComplexity int) int
		LicensePlateType   func(childComplexity int) int
		MuckTruckID        func(childComplexity int) int
		OperatingState     func(childComplexity int) int
		OperatingType      func(childComplexity int) int
		OperatingVehicleID func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Seats              func(childComplexity int) int
		VehicleBrand       func(childComplexity int) int
		VehicleState       func(childComplexity int) int
		VehicleType        func(childComplexity int) int
	}

	VehicleInfoVarSampFields struct {
		BusinessScope      func(childComplexity int) int
		CarRentalPrice     func(childComplexity int) int
		CheckState         func(childComplexity int) int
		Heavy              func(childComplexity int) int
		ID                 func(childComplexity int) int
		IndustryCategory   func(childComplexity int) int
		InsuranceCompany   func(childComplexity int) int
		LicensePlateColor  func(childComplexity int) int
		LicensePlateType   func(childComplexity int) int
		MuckTruckID        func(childComplexity int) int
		OperatingState     func(childComplexity int) int
		OperatingType      func(childComplexity int) int
		OperatingVehicleID func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Seats              func(childComplexity int) int
		VehicleBrand       func(childComplexity int) int
		VehicleState       func(childComplexity int) int
		VehicleType        func(childComplexity int) int
	}

	VehicleInfoVarianceFields struct {
		BusinessScope      func(childComplexity int) int
		CarRentalPrice     func(childComplexity int) int
		CheckState         func(childComplexity int) int
		Heavy              func(childComplexity int) int
		ID                 func(childComplexity int) int
		IndustryCategory   func(childComplexity int) int
		InsuranceCompany   func(childComplexity int) int
		LicensePlateColor  func(childComplexity int) int
		LicensePlateType   func(childComplexity int) int
		MuckTruckID        func(childComplexity int) int
		OperatingState     func(childComplexity int) int
		OperatingType      func(childComplexity int) int
		OperatingVehicleID func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Seats              func(childComplexity int) int
		VehicleBrand       func(childComplexity int) int
		VehicleState       func(childComplexity int) int
		VehicleType        func(childComplexity int) int
	}

	VehicleSupervisionPhoto struct {
		CameraID                func(childComplexity int) int
		DriverID                func(childComplexity int) int
		EnterpriseID            func(childComplexity int) int
		ID                      func(childComplexity int) int
		Imei                    func(childComplexity int) int
		MonitoringPicAddress    func(childComplexity int) int
		MonitoringPicName       func(childComplexity int) int
		MonitoringPicUploadTime func(childComplexity int) int
		PhotoCondition          func(childComplexity int) int
		SimNumber               func(childComplexity int) int
		SupervisionPhotoID      func(childComplexity int) int
		UpdateTime              func(childComplexity int) int
		VehicleID               func(childComplexity int) int
	}

	VehicleSupervisionPhotoAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	VehicleSupervisionPhotoAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.VehicleSupervisionPhotoSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VehicleSupervisionPhotoAvgFields struct {
		CameraID func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	VehicleSupervisionPhotoMaxFields struct {
		CameraID                func(childComplexity int) int
		DriverID                func(childComplexity int) int
		EnterpriseID            func(childComplexity int) int
		ID                      func(childComplexity int) int
		Imei                    func(childComplexity int) int
		MonitoringPicAddress    func(childComplexity int) int
		MonitoringPicName       func(childComplexity int) int
		MonitoringPicUploadTime func(childComplexity int) int
		PhotoCondition          func(childComplexity int) int
		SimNumber               func(childComplexity int) int
		SupervisionPhotoID      func(childComplexity int) int
		UpdateTime              func(childComplexity int) int
		VehicleID               func(childComplexity int) int
	}

	VehicleSupervisionPhotoMinFields struct {
		CameraID                func(childComplexity int) int
		DriverID                func(childComplexity int) int
		EnterpriseID            func(childComplexity int) int
		ID                      func(childComplexity int) int
		Imei                    func(childComplexity int) int
		MonitoringPicAddress    func(childComplexity int) int
		MonitoringPicName       func(childComplexity int) int
		MonitoringPicUploadTime func(childComplexity int) int
		PhotoCondition          func(childComplexity int) int
		SimNumber               func(childComplexity int) int
		SupervisionPhotoID      func(childComplexity int) int
		UpdateTime              func(childComplexity int) int
		VehicleID               func(childComplexity int) int
	}

	VehicleSupervisionPhotoMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VehicleSupervisionPhotoStddevFields struct {
		CameraID func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	VehicleSupervisionPhotoStddevPopFields struct {
		CameraID func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	VehicleSupervisionPhotoStddevSampFields struct {
		CameraID func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	VehicleSupervisionPhotoSumFields struct {
		CameraID func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	VehicleSupervisionPhotoVarPopFields struct {
		CameraID func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	VehicleSupervisionPhotoVarSampFields struct {
		CameraID func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	VehicleSupervisionPhotoVarianceFields struct {
		CameraID func(childComplexity int) int
		ID       func(childComplexity int) int
	}
}

type MutationResolver interface {
	DeleteVehicleInfo(ctx context.Context, where model.VehicleInfoBoolExp) (*model.VehicleInfoMutationResponse, error)
	DeleteVehicleInfoByPk(ctx context.Context, id int64, vehicleID string) (*model.VehicleInfo, error)
	InsertVehicleInfo(ctx context.Context, objects []*model.VehicleInfoInsertInput, onConflict *model.VehicleInfoOnConflict) (*model.VehicleInfoMutationResponse, error)
	InsertVehicleInfoOne(ctx context.Context, object model.VehicleInfoInsertInput, onConflict *model.VehicleInfoOnConflict) (*model.VehicleInfo, error)
	UpdateVehicleInfo(ctx context.Context, inc *model.VehicleInfoIncInput, set *model.VehicleInfoSetInput, where model.VehicleInfoBoolExp) (*model.VehicleInfoMutationResponse, error)
	UpdateVehicleInfoByPk(ctx context.Context, inc *model.VehicleInfoIncInput, set *model.VehicleInfoSetInput, pkColumns model.VehicleInfoPkColumnsInput) (*model.VehicleInfo, error)
	DeleteJjVehicle(ctx context.Context, where model.JjVehicleBoolExp) (*model.JjVehicleMutationResponse, error)
	DeleteJjVehicleByPk(ctx context.Context, id int64) (*model.JjVehicle, error)
	InsertJjVehicle(ctx context.Context, objects []*model.JjVehicleInsertInput, onConflict *model.JjVehicleOnConflict) (*model.JjVehicleMutationResponse, error)
	InsertJjVehicleOne(ctx context.Context, object model.JjVehicleInsertInput, onConflict *model.JjVehicleOnConflict) (*model.JjVehicle, error)
	UpdateJjVehicle(ctx context.Context, inc *model.JjVehicleIncInput, set *model.JjVehicleSetInput, where model.JjVehicleBoolExp) (*model.JjVehicleMutationResponse, error)
	UpdateJjVehicleByPk(ctx context.Context, inc *model.JjVehicleIncInput, set *model.JjVehicleSetInput, pkColumns model.JjVehiclePkColumnsInput) (*model.JjVehicle, error)
	DeleteMuckTruckCategoryInfo(ctx context.Context, where model.MuckTruckCategoryInfoBoolExp) (*model.MuckTruckCategoryInfoMutationResponse, error)
	DeleteMuckTruckCategoryInfoByPk(ctx context.Context, id int64) (*model.MuckTruckCategoryInfo, error)
	InsertMuckTruckCategoryInfo(ctx context.Context, objects []*model.MuckTruckCategoryInfoInsertInput, onConflict *model.MuckTruckCategoryInfoOnConflict) (*model.MuckTruckCategoryInfoMutationResponse, error)
	InsertMuckTruckCategoryInfoOne(ctx context.Context, object model.MuckTruckCategoryInfoInsertInput, onConflict *model.MuckTruckCategoryInfoOnConflict) (*model.MuckTruckCategoryInfo, error)
	UpdateMuckTruckCategoryInfo(ctx context.Context, inc *model.MuckTruckCategoryInfoIncInput, set *model.MuckTruckCategoryInfoSetInput, where model.MuckTruckCategoryInfoBoolExp) (*model.MuckTruckCategoryInfoMutationResponse, error)
	UpdateMuckTruckCategoryInfoByPk(ctx context.Context, inc *model.MuckTruckCategoryInfoIncInput, set *model.MuckTruckCategoryInfoSetInput, pkColumns model.MuckTruckCategoryInfoPkColumnsInput) (*model.MuckTruckCategoryInfo, error)
	DeleteMuckTruckInfo(ctx context.Context, where model.MuckTruckInfoBoolExp) (*model.MuckTruckInfoMutationResponse, error)
	DeleteMuckTruckInfoByPk(ctx context.Context, muckTruckID int64) (*model.MuckTruckInfo, error)
	InsertMuckTruckInfo(ctx context.Context, objects []*model.MuckTruckInfoInsertInput, onConflict *model.MuckTruckInfoOnConflict) (*model.MuckTruckInfoMutationResponse, error)
	InsertMuckTruckInfoOne(ctx context.Context, object model.MuckTruckInfoInsertInput, onConflict *model.MuckTruckInfoOnConflict) (*model.MuckTruckInfo, error)
	UpdateMuckTruckInfo(ctx context.Context, inc *model.MuckTruckInfoIncInput, set *model.MuckTruckInfoSetInput, where model.MuckTruckInfoBoolExp) (*model.MuckTruckInfoMutationResponse, error)
	UpdateMuckTruckInfoByPk(ctx context.Context, inc *model.MuckTruckInfoIncInput, set *model.MuckTruckInfoSetInput, pkColumns model.MuckTruckInfoPkColumnsInput) (*model.MuckTruckInfo, error)
	DeleteMuckTruckPreviewNumber(ctx context.Context, where model.MuckTruckPreviewNumberBoolExp) (*model.MuckTruckPreviewNumberMutationResponse, error)
	DeleteMuckTruckPreviewNumberByPk(ctx context.Context, id int64) (*model.MuckTruckPreviewNumber, error)
	InsertMuckTruckPreviewNumber(ctx context.Context, objects []*model.MuckTruckPreviewNumberInsertInput, onConflict *model.MuckTruckPreviewNumberOnConflict) (*model.MuckTruckPreviewNumberMutationResponse, error)
	InsertMuckTruckPreviewNumberOne(ctx context.Context, object model.MuckTruckPreviewNumberInsertInput, onConflict *model.MuckTruckPreviewNumberOnConflict) (*model.MuckTruckPreviewNumber, error)
	UpdateMuckTruckPreviewNumber(ctx context.Context, inc *model.MuckTruckPreviewNumberIncInput, set *model.MuckTruckPreviewNumberSetInput, where model.MuckTruckPreviewNumberBoolExp) (*model.MuckTruckPreviewNumberMutationResponse, error)
	UpdateMuckTruckPreviewNumberByPk(ctx context.Context, inc *model.MuckTruckPreviewNumberIncInput, set *model.MuckTruckPreviewNumberSetInput, pkColumns model.MuckTruckPreviewNumberPkColumnsInput) (*model.MuckTruckPreviewNumber, error)
	DeleteMuckTruckWorkerIDCardOrders(ctx context.Context, where model.MuckTruckWorkerIDCardOrdersBoolExp) (*model.MuckTruckWorkerIDCardOrdersMutationResponse, error)
	DeleteMuckTruckWorkerIDCardOrdersByPk(ctx context.Context, id int64) (*model.MuckTruckWorkerIDCardOrders, error)
	InsertMuckTruckWorkerIDCardOrders(ctx context.Context, objects []*model.MuckTruckWorkerIDCardOrdersInsertInput, onConflict *model.MuckTruckWorkerIDCardOrdersOnConflict) (*model.MuckTruckWorkerIDCardOrdersMutationResponse, error)
	InsertMuckTruckWorkerIDCardOrdersOne(ctx context.Context, object model.MuckTruckWorkerIDCardOrdersInsertInput, onConflict *model.MuckTruckWorkerIDCardOrdersOnConflict) (*model.MuckTruckWorkerIDCardOrders, error)
	UpdateMuckTruckWorkerIDCardOrders(ctx context.Context, inc *model.MuckTruckWorkerIDCardOrdersIncInput, set *model.MuckTruckWorkerIDCardOrdersSetInput, where model.MuckTruckWorkerIDCardOrdersBoolExp) (*model.MuckTruckWorkerIDCardOrdersMutationResponse, error)
	UpdateMuckTruckWorkerIDCardOrdersByPk(ctx context.Context, inc *model.MuckTruckWorkerIDCardOrdersIncInput, set *model.MuckTruckWorkerIDCardOrdersSetInput, pkColumns model.MuckTruckWorkerIDCardOrdersPkColumnsInput) (*model.MuckTruckWorkerIDCardOrders, error)
	DeleteOperatingVehicleInfo(ctx context.Context, where model.OperatingVehicleInfoBoolExp) (*model.OperatingVehicleInfoMutationResponse, error)
	DeleteOperatingVehicleInfoByPk(ctx context.Context, operatingVehicleID int64) (*model.OperatingVehicleInfo, error)
	InsertOperatingVehicleInfo(ctx context.Context, objects []*model.OperatingVehicleInfoInsertInput, onConflict *model.OperatingVehicleInfoOnConflict) (*model.OperatingVehicleInfoMutationResponse, error)
	InsertOperatingVehicleInfoOne(ctx context.Context, object model.OperatingVehicleInfoInsertInput, onConflict *model.OperatingVehicleInfoOnConflict) (*model.OperatingVehicleInfo, error)
	UpdateOperatingVehicleInfo(ctx context.Context, inc *model.OperatingVehicleInfoIncInput, set *model.OperatingVehicleInfoSetInput, where model.OperatingVehicleInfoBoolExp) (*model.OperatingVehicleInfoMutationResponse, error)
	UpdateOperatingVehicleInfoByPk(ctx context.Context, inc *model.OperatingVehicleInfoIncInput, set *model.OperatingVehicleInfoSetInput, pkColumns model.OperatingVehicleInfoPkColumnsInput) (*model.OperatingVehicleInfo, error)
	DeleteOwnerInfo(ctx context.Context, where model.OwnerInfoBoolExp) (*model.OwnerInfoMutationResponse, error)
	DeleteOwnerInfoByPk(ctx context.Context, id int64) (*model.OwnerInfo, error)
	InsertOwnerInfo(ctx context.Context, objects []*model.OwnerInfoInsertInput, onConflict *model.OwnerInfoOnConflict) (*model.OwnerInfoMutationResponse, error)
	InsertOwnerInfoOne(ctx context.Context, object model.OwnerInfoInsertInput, onConflict *model.OwnerInfoOnConflict) (*model.OwnerInfo, error)
	UpdateOwnerInfo(ctx context.Context, inc *model.OwnerInfoIncInput, set *model.OwnerInfoSetInput, where model.OwnerInfoBoolExp) (*model.OwnerInfoMutationResponse, error)
	UpdateOwnerInfoByPk(ctx context.Context, inc *model.OwnerInfoIncInput, set *model.OwnerInfoSetInput, pkColumns model.OwnerInfoPkColumnsInput) (*model.OwnerInfo, error)
	DeleteVehicleInfoChangeLog(ctx context.Context, where model.VehicleInfoChangeLogBoolExp) (*model.VehicleInfoChangeLogMutationResponse, error)
	DeleteVehicleInfoChangeLogByPk(ctx context.Context, id int64, vehicleInfoChangeID string) (*model.VehicleInfoChangeLog, error)
	InsertVehicleInfoChangeLog(ctx context.Context, objects []*model.VehicleInfoChangeLogInsertInput, onConflict *model.VehicleInfoChangeLogOnConflict) (*model.VehicleInfoChangeLogMutationResponse, error)
	InsertVehicleInfoChangeLogOne(ctx context.Context, object model.VehicleInfoChangeLogInsertInput, onConflict *model.VehicleInfoChangeLogOnConflict) (*model.VehicleInfoChangeLog, error)
	UpdateVehicleInfoChangeLog(ctx context.Context, inc *model.VehicleInfoChangeLogIncInput, set *model.VehicleInfoChangeLogSetInput, where model.VehicleInfoChangeLogBoolExp) (*model.VehicleInfoChangeLogMutationResponse, error)
	UpdateVehicleInfoChangeLogByPk(ctx context.Context, inc *model.VehicleInfoChangeLogIncInput, set *model.VehicleInfoChangeLogSetInput, pkColumns model.VehicleInfoChangeLogPkColumnsInput) (*model.VehicleInfoChangeLog, error)
	DeleteVehicleSupervisionPhoto(ctx context.Context, where model.VehicleSupervisionPhotoBoolExp) (*model.VehicleSupervisionPhotoMutationResponse, error)
	DeleteVehicleSupervisionPhotoByPk(ctx context.Context, id int64, supervisionPhotoID string) (*model.VehicleSupervisionPhoto, error)
	InsertVehicleSupervisionPhoto(ctx context.Context, objects []*model.VehicleSupervisionPhotoInsertInput, onConflict *model.VehicleSupervisionPhotoOnConflict) (*model.VehicleSupervisionPhotoMutationResponse, error)
	InsertVehicleSupervisionPhotoOne(ctx context.Context, object model.VehicleSupervisionPhotoInsertInput, onConflict *model.VehicleSupervisionPhotoOnConflict) (*model.VehicleSupervisionPhoto, error)
	UpdateVehicleSupervisionPhoto(ctx context.Context, inc *model.VehicleSupervisionPhotoIncInput, set *model.VehicleSupervisionPhotoSetInput, where model.VehicleSupervisionPhotoBoolExp) (*model.VehicleSupervisionPhotoMutationResponse, error)
	UpdateVehicleSupervisionPhotoByPk(ctx context.Context, inc *model.VehicleSupervisionPhotoIncInput, set *model.VehicleSupervisionPhotoSetInput, pkColumns model.VehicleSupervisionPhotoPkColumnsInput) (*model.VehicleSupervisionPhoto, error)
}
type QueryResolver interface {
	VehicleInfo(ctx context.Context, distinctOn []model.VehicleInfoSelectColumn, limit *int, offset *int, orderBy []*model.VehicleInfoOrderBy, where *model.VehicleInfoBoolExp) ([]*model.VehicleInfo, error)
	VehicleInfoAggregate(ctx context.Context, distinctOn []model.VehicleInfoSelectColumn, limit *int, offset *int, orderBy []*model.VehicleInfoOrderBy, where *model.VehicleInfoBoolExp) (*model.VehicleInfoAggregate, error)
	VehicleInfoByPk(ctx context.Context, id int64, vehicleID string) (*model.VehicleInfo, error)
	JjVehicle(ctx context.Context, distinctOn []model.JjVehicleSelectColumn, limit *int, offset *int, orderBy []*model.JjVehicleOrderBy, where *model.JjVehicleBoolExp) ([]*model.JjVehicle, error)
	JjVehicleAggregate(ctx context.Context, distinctOn []model.JjVehicleSelectColumn, limit *int, offset *int, orderBy []*model.JjVehicleOrderBy, where *model.JjVehicleBoolExp) (*model.JjVehicleAggregate, error)
	JjVehicleByPk(ctx context.Context, id int64) (*model.JjVehicle, error)
	MuckTruckCategoryInfo(ctx context.Context, distinctOn []model.MuckTruckCategoryInfoSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckCategoryInfoOrderBy, where *model.MuckTruckCategoryInfoBoolExp) ([]*model.MuckTruckCategoryInfo, error)
	MuckTruckCategoryInfoAggregate(ctx context.Context, distinctOn []model.MuckTruckCategoryInfoSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckCategoryInfoOrderBy, where *model.MuckTruckCategoryInfoBoolExp) (*model.MuckTruckCategoryInfoAggregate, error)
	MuckTruckCategoryInfoByPk(ctx context.Context, id int64) (*model.MuckTruckCategoryInfo, error)
	MuckTruckInfo(ctx context.Context, distinctOn []model.MuckTruckInfoSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckInfoOrderBy, where *model.MuckTruckInfoBoolExp) ([]*model.MuckTruckInfo, error)
	MuckTruckInfoAggregate(ctx context.Context, distinctOn []model.MuckTruckInfoSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckInfoOrderBy, where *model.MuckTruckInfoBoolExp) (*model.MuckTruckInfoAggregate, error)
	MuckTruckInfoByPk(ctx context.Context, muckTruckID int64) (*model.MuckTruckInfo, error)
	MuckTruckPreviewNumber(ctx context.Context, distinctOn []model.MuckTruckPreviewNumberSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckPreviewNumberOrderBy, where *model.MuckTruckPreviewNumberBoolExp) ([]*model.MuckTruckPreviewNumber, error)
	MuckTruckPreviewNumberAggregate(ctx context.Context, distinctOn []model.MuckTruckPreviewNumberSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckPreviewNumberOrderBy, where *model.MuckTruckPreviewNumberBoolExp) (*model.MuckTruckPreviewNumberAggregate, error)
	MuckTruckPreviewNumberByPk(ctx context.Context, id int64) (*model.MuckTruckPreviewNumber, error)
	MuckTruckWorkerIDCardOrders(ctx context.Context, distinctOn []model.MuckTruckWorkerIDCardOrdersSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckWorkerIDCardOrdersOrderBy, where *model.MuckTruckWorkerIDCardOrdersBoolExp) ([]*model.MuckTruckWorkerIDCardOrders, error)
	MuckTruckWorkerIDCardOrdersAggregate(ctx context.Context, distinctOn []model.MuckTruckWorkerIDCardOrdersSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckWorkerIDCardOrdersOrderBy, where *model.MuckTruckWorkerIDCardOrdersBoolExp) (*model.MuckTruckWorkerIDCardOrdersAggregate, error)
	MuckTruckWorkerIDCardOrdersByPk(ctx context.Context, id int64) (*model.MuckTruckWorkerIDCardOrders, error)
	OperatingVehicleInfo(ctx context.Context, distinctOn []model.OperatingVehicleInfoSelectColumn, limit *int, offset *int, orderBy []*model.OperatingVehicleInfoOrderBy, where *model.OperatingVehicleInfoBoolExp) ([]*model.OperatingVehicleInfo, error)
	OperatingVehicleInfoAggregate(ctx context.Context, distinctOn []model.OperatingVehicleInfoSelectColumn, limit *int, offset *int, orderBy []*model.OperatingVehicleInfoOrderBy, where *model.OperatingVehicleInfoBoolExp) (*model.OperatingVehicleInfoAggregate, error)
	OperatingVehicleInfoByPk(ctx context.Context, operatingVehicleID int64) (*model.OperatingVehicleInfo, error)
	OwnerInfo(ctx context.Context, distinctOn []model.OwnerInfoSelectColumn, limit *int, offset *int, orderBy []*model.OwnerInfoOrderBy, where *model.OwnerInfoBoolExp) ([]*model.OwnerInfo, error)
	OwnerInfoAggregate(ctx context.Context, distinctOn []model.OwnerInfoSelectColumn, limit *int, offset *int, orderBy []*model.OwnerInfoOrderBy, where *model.OwnerInfoBoolExp) (*model.OwnerInfoAggregate, error)
	OwnerInfoByPk(ctx context.Context, id int64) (*model.OwnerInfo, error)
	VehicleInfoChangeLog(ctx context.Context, distinctOn []model.VehicleInfoChangeLogSelectColumn, limit *int, offset *int, orderBy []*model.VehicleInfoChangeLogOrderBy, where *model.VehicleInfoChangeLogBoolExp) ([]*model.VehicleInfoChangeLog, error)
	VehicleInfoChangeLogAggregate(ctx context.Context, distinctOn []model.VehicleInfoChangeLogSelectColumn, limit *int, offset *int, orderBy []*model.VehicleInfoChangeLogOrderBy, where *model.VehicleInfoChangeLogBoolExp) (*model.VehicleInfoChangeLogAggregate, error)
	VehicleInfoChangeLogByPk(ctx context.Context, id int64, vehicleInfoChangeID string) (*model.VehicleInfoChangeLog, error)
	VehicleSupervisionPhoto(ctx context.Context, distinctOn []model.VehicleSupervisionPhotoSelectColumn, limit *int, offset *int, orderBy []*model.VehicleSupervisionPhotoOrderBy, where *model.VehicleSupervisionPhotoBoolExp) ([]*model.VehicleSupervisionPhoto, error)
	VehicleSupervisionPhotoAggregate(ctx context.Context, distinctOn []model.VehicleSupervisionPhotoSelectColumn, limit *int, offset *int, orderBy []*model.VehicleSupervisionPhotoOrderBy, where *model.VehicleSupervisionPhotoBoolExp) (*model.VehicleSupervisionPhotoAggregate, error)
	VehicleSupervisionPhotoByPk(ctx context.Context, id int64, supervisionPhotoID string) (*model.VehicleSupervisionPhoto, error)
}
type SubscriptionResolver interface {
	VehicleInfo(ctx context.Context, distinctOn []model.VehicleInfoSelectColumn, limit *int, offset *int, orderBy []*model.VehicleInfoOrderBy, where *model.VehicleInfoBoolExp) (<-chan []*model.VehicleInfo, error)
	VehicleInfoAggregate(ctx context.Context, distinctOn []model.VehicleInfoSelectColumn, limit *int, offset *int, orderBy []*model.VehicleInfoOrderBy, where *model.VehicleInfoBoolExp) (<-chan *model.VehicleInfoAggregate, error)
	VehicleInfoByPk(ctx context.Context, id int64, vehicleID string) (<-chan *model.VehicleInfo, error)
	JjVehicle(ctx context.Context, distinctOn []model.JjVehicleSelectColumn, limit *int, offset *int, orderBy []*model.JjVehicleOrderBy, where *model.JjVehicleBoolExp) (<-chan []*model.JjVehicle, error)
	JjVehicleAggregate(ctx context.Context, distinctOn []model.JjVehicleSelectColumn, limit *int, offset *int, orderBy []*model.JjVehicleOrderBy, where *model.JjVehicleBoolExp) (<-chan *model.JjVehicleAggregate, error)
	JjVehicleByPk(ctx context.Context, id int64) (<-chan *model.JjVehicle, error)
	MuckTruckCategoryInfo(ctx context.Context, distinctOn []model.MuckTruckCategoryInfoSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckCategoryInfoOrderBy, where *model.MuckTruckCategoryInfoBoolExp) (<-chan []*model.MuckTruckCategoryInfo, error)
	MuckTruckCategoryInfoAggregate(ctx context.Context, distinctOn []model.MuckTruckCategoryInfoSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckCategoryInfoOrderBy, where *model.MuckTruckCategoryInfoBoolExp) (<-chan *model.MuckTruckCategoryInfoAggregate, error)
	MuckTruckCategoryInfoByPk(ctx context.Context, id int64) (<-chan *model.MuckTruckCategoryInfo, error)
	MuckTruckInfo(ctx context.Context, distinctOn []model.MuckTruckInfoSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckInfoOrderBy, where *model.MuckTruckInfoBoolExp) (<-chan []*model.MuckTruckInfo, error)
	MuckTruckInfoAggregate(ctx context.Context, distinctOn []model.MuckTruckInfoSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckInfoOrderBy, where *model.MuckTruckInfoBoolExp) (<-chan *model.MuckTruckInfoAggregate, error)
	MuckTruckInfoByPk(ctx context.Context, muckTruckID int64) (<-chan *model.MuckTruckInfo, error)
	MuckTruckPreviewNumber(ctx context.Context, distinctOn []model.MuckTruckPreviewNumberSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckPreviewNumberOrderBy, where *model.MuckTruckPreviewNumberBoolExp) (<-chan []*model.MuckTruckPreviewNumber, error)
	MuckTruckPreviewNumberAggregate(ctx context.Context, distinctOn []model.MuckTruckPreviewNumberSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckPreviewNumberOrderBy, where *model.MuckTruckPreviewNumberBoolExp) (<-chan *model.MuckTruckPreviewNumberAggregate, error)
	MuckTruckPreviewNumberByPk(ctx context.Context, id int64) (<-chan *model.MuckTruckPreviewNumber, error)
	MuckTruckWorkerIDCardOrders(ctx context.Context, distinctOn []model.MuckTruckWorkerIDCardOrdersSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckWorkerIDCardOrdersOrderBy, where *model.MuckTruckWorkerIDCardOrdersBoolExp) (<-chan []*model.MuckTruckWorkerIDCardOrders, error)
	MuckTruckWorkerIDCardOrdersAggregate(ctx context.Context, distinctOn []model.MuckTruckWorkerIDCardOrdersSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckWorkerIDCardOrdersOrderBy, where *model.MuckTruckWorkerIDCardOrdersBoolExp) (<-chan *model.MuckTruckWorkerIDCardOrdersAggregate, error)
	MuckTruckWorkerIDCardOrdersByPk(ctx context.Context, id int64) (<-chan *model.MuckTruckWorkerIDCardOrders, error)
	OperatingVehicleInfo(ctx context.Context, distinctOn []model.OperatingVehicleInfoSelectColumn, limit *int, offset *int, orderBy []*model.OperatingVehicleInfoOrderBy, where *model.OperatingVehicleInfoBoolExp) (<-chan []*model.OperatingVehicleInfo, error)
	OperatingVehicleInfoAggregate(ctx context.Context, distinctOn []model.OperatingVehicleInfoSelectColumn, limit *int, offset *int, orderBy []*model.OperatingVehicleInfoOrderBy, where *model.OperatingVehicleInfoBoolExp) (<-chan *model.OperatingVehicleInfoAggregate, error)
	OperatingVehicleInfoByPk(ctx context.Context, operatingVehicleID int64) (<-chan *model.OperatingVehicleInfo, error)
	OwnerInfo(ctx context.Context, distinctOn []model.OwnerInfoSelectColumn, limit *int, offset *int, orderBy []*model.OwnerInfoOrderBy, where *model.OwnerInfoBoolExp) (<-chan []*model.OwnerInfo, error)
	OwnerInfoAggregate(ctx context.Context, distinctOn []model.OwnerInfoSelectColumn, limit *int, offset *int, orderBy []*model.OwnerInfoOrderBy, where *model.OwnerInfoBoolExp) (<-chan *model.OwnerInfoAggregate, error)
	OwnerInfoByPk(ctx context.Context, id int64) (<-chan *model.OwnerInfo, error)
	VehicleInfoChangeLog(ctx context.Context, distinctOn []model.VehicleInfoChangeLogSelectColumn, limit *int, offset *int, orderBy []*model.VehicleInfoChangeLogOrderBy, where *model.VehicleInfoChangeLogBoolExp) (<-chan []*model.VehicleInfoChangeLog, error)
	VehicleInfoChangeLogAggregate(ctx context.Context, distinctOn []model.VehicleInfoChangeLogSelectColumn, limit *int, offset *int, orderBy []*model.VehicleInfoChangeLogOrderBy, where *model.VehicleInfoChangeLogBoolExp) (<-chan *model.VehicleInfoChangeLogAggregate, error)
	VehicleInfoChangeLogByPk(ctx context.Context, id int64, vehicleInfoChangeID string) (<-chan *model.VehicleInfoChangeLog, error)
	VehicleSupervisionPhoto(ctx context.Context, distinctOn []model.VehicleSupervisionPhotoSelectColumn, limit *int, offset *int, orderBy []*model.VehicleSupervisionPhotoOrderBy, where *model.VehicleSupervisionPhotoBoolExp) (<-chan []*model.VehicleSupervisionPhoto, error)
	VehicleSupervisionPhotoAggregate(ctx context.Context, distinctOn []model.VehicleSupervisionPhotoSelectColumn, limit *int, offset *int, orderBy []*model.VehicleSupervisionPhotoOrderBy, where *model.VehicleSupervisionPhotoBoolExp) (<-chan *model.VehicleSupervisionPhotoAggregate, error)
	VehicleSupervisionPhotoByPk(ctx context.Context, id int64, supervisionPhotoID string) (<-chan *model.VehicleSupervisionPhoto, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "JJ_VEHICLE.CCDJRQ":
		if e.complexity.JjVehicle.Ccdjrq == nil {
			break
		}

		return e.complexity.JjVehicle.Ccdjrq(childComplexity), true

	case "JJ_VEHICLE.CLLX":
		if e.complexity.JjVehicle.Cllx == nil {
			break
		}

		return e.complexity.JjVehicle.Cllx(childComplexity), true

	case "JJ_VEHICLE.CLSBDH":
		if e.complexity.JjVehicle.Clsbdh == nil {
			break
		}

		return e.complexity.JjVehicle.Clsbdh(childComplexity), true

	case "JJ_VEHICLE.COUNTY":
		if e.complexity.JjVehicle.County == nil {
			break
		}

		return e.complexity.JjVehicle.County(childComplexity), true

	case "JJ_VEHICLE.DJRQ":
		if e.complexity.JjVehicle.Djrq == nil {
			break
		}

		return e.complexity.JjVehicle.Djrq(childComplexity), true

	case "JJ_VEHICLE.FPRQ":
		if e.complexity.JjVehicle.Fprq == nil {
			break
		}

		return e.complexity.JjVehicle.Fprq(childComplexity), true

	case "JJ_VEHICLE.GXRQ":
		if e.complexity.JjVehicle.Gxrq == nil {
			break
		}

		return e.complexity.JjVehicle.Gxrq(childComplexity), true

	case "JJ_VEHICLE.HPHM":
		if e.complexity.JjVehicle.Hphm == nil {
			break
		}

		return e.complexity.JjVehicle.Hphm(childComplexity), true

	case "JJ_VEHICLE.HPZL":
		if e.complexity.JjVehicle.Hpzl == nil {
			break
		}

		return e.complexity.JjVehicle.Hpzl(childComplexity), true

	case "JJ_VEHICLE.id":
		if e.complexity.JjVehicle.ID == nil {
			break
		}

		return e.complexity.JjVehicle.ID(childComplexity), true

	case "JJ_VEHICLE.IS_DETELED":
		if e.complexity.JjVehicle.IsDeteled == nil {
			break
		}

		return e.complexity.JjVehicle.IsDeteled(childComplexity), true

	case "JJ_VEHICLE.LXDH":
		if e.complexity.JjVehicle.Lxdh == nil {
			break
		}

		return e.complexity.JjVehicle.Lxdh(childComplexity), true

	case "JJ_VEHICLE.LXDZ":
		if e.complexity.JjVehicle.Lxdz == nil {
			break
		}

		return e.complexity.JjVehicle.Lxdz(childComplexity), true

	case "JJ_VEHICLE.OTHER":
		if e.complexity.JjVehicle.Other == nil {
			break
		}

		return e.complexity.JjVehicle.Other(childComplexity), true

	case "JJ_VEHICLE.QZBFQZ":
		if e.complexity.JjVehicle.Qzbfqz == nil {
			break
		}

		return e.complexity.JjVehicle.Qzbfqz(childComplexity), true

	case "JJ_VEHICLE.SJHM":
		if e.complexity.JjVehicle.Sjhm == nil {
			break
		}

		return e.complexity.JjVehicle.Sjhm(childComplexity), true

	case "JJ_VEHICLE.SYR":
		if e.complexity.JjVehicle.Syr == nil {
			break
		}

		return e.complexity.JjVehicle.Syr(childComplexity), true

	case "JJ_VEHICLE.SYXZ":
		if e.complexity.JjVehicle.Syxz == nil {
			break
		}

		return e.complexity.JjVehicle.Syxz(childComplexity), true

	case "JJ_VEHICLE.UPDATETIME":
		if e.complexity.JjVehicle.Updatetime == nil {
			break
		}

		return e.complexity.JjVehicle.Updatetime(childComplexity), true

	case "JJ_VEHICLE.vehicle_id":
		if e.complexity.JjVehicle.VehicleID == nil {
			break
		}

		return e.complexity.JjVehicle.VehicleID(childComplexity), true

	case "JJ_VEHICLE.VEHMONTYPE":
		if e.complexity.JjVehicle.Vehmontype == nil {
			break
		}

		return e.complexity.JjVehicle.Vehmontype(childComplexity), true

	case "JJ_VEHICLE.XH":
		if e.complexity.JjVehicle.Xh == nil {
			break
		}

		return e.complexity.JjVehicle.Xh(childComplexity), true

	case "JJ_VEHICLE.YXQZ":
		if e.complexity.JjVehicle.Yxqz == nil {
			break
		}

		return e.complexity.JjVehicle.Yxqz(childComplexity), true

	case "JJ_VEHICLE.ZT":
		if e.complexity.JjVehicle.Zt == nil {
			break
		}

		return e.complexity.JjVehicle.Zt(childComplexity), true

	case "JJ_VEHICLE.ZZL":
		if e.complexity.JjVehicle.Zzl == nil {
			break
		}

		return e.complexity.JjVehicle.Zzl(childComplexity), true

	case "JJ_VEHICLE_aggregate.aggregate":
		if e.complexity.JjVehicleAggregate.Aggregate == nil {
			break
		}

		return e.complexity.JjVehicleAggregate.Aggregate(childComplexity), true

	case "JJ_VEHICLE_aggregate.nodes":
		if e.complexity.JjVehicleAggregate.Nodes == nil {
			break
		}

		return e.complexity.JjVehicleAggregate.Nodes(childComplexity), true

	case "JJ_VEHICLE_aggregate_fields.avg":
		if e.complexity.JjVehicleAggregateFields.Avg == nil {
			break
		}

		return e.complexity.JjVehicleAggregateFields.Avg(childComplexity), true

	case "JJ_VEHICLE_aggregate_fields.count":
		if e.complexity.JjVehicleAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_JJ_VEHICLE_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.JjVehicleAggregateFields.Count(childComplexity, args["columns"].([]model.JjVehicleSelectColumn), args["distinct"].(*bool)), true

	case "JJ_VEHICLE_aggregate_fields.max":
		if e.complexity.JjVehicleAggregateFields.Max == nil {
			break
		}

		return e.complexity.JjVehicleAggregateFields.Max(childComplexity), true

	case "JJ_VEHICLE_aggregate_fields.min":
		if e.complexity.JjVehicleAggregateFields.Min == nil {
			break
		}

		return e.complexity.JjVehicleAggregateFields.Min(childComplexity), true

	case "JJ_VEHICLE_aggregate_fields.stddev":
		if e.complexity.JjVehicleAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.JjVehicleAggregateFields.Stddev(childComplexity), true

	case "JJ_VEHICLE_aggregate_fields.stddev_pop":
		if e.complexity.JjVehicleAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.JjVehicleAggregateFields.StddevPop(childComplexity), true

	case "JJ_VEHICLE_aggregate_fields.stddev_samp":
		if e.complexity.JjVehicleAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.JjVehicleAggregateFields.StddevSamp(childComplexity), true

	case "JJ_VEHICLE_aggregate_fields.sum":
		if e.complexity.JjVehicleAggregateFields.Sum == nil {
			break
		}

		return e.complexity.JjVehicleAggregateFields.Sum(childComplexity), true

	case "JJ_VEHICLE_aggregate_fields.var_pop":
		if e.complexity.JjVehicleAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.JjVehicleAggregateFields.VarPop(childComplexity), true

	case "JJ_VEHICLE_aggregate_fields.var_samp":
		if e.complexity.JjVehicleAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.JjVehicleAggregateFields.VarSamp(childComplexity), true

	case "JJ_VEHICLE_aggregate_fields.variance":
		if e.complexity.JjVehicleAggregateFields.Variance == nil {
			break
		}

		return e.complexity.JjVehicleAggregateFields.Variance(childComplexity), true

	case "JJ_VEHICLE_avg_fields.id":
		if e.complexity.JjVehicleAvgFields.ID == nil {
			break
		}

		return e.complexity.JjVehicleAvgFields.ID(childComplexity), true

	case "JJ_VEHICLE_avg_fields.IS_DETELED":
		if e.complexity.JjVehicleAvgFields.IsDeteled == nil {
			break
		}

		return e.complexity.JjVehicleAvgFields.IsDeteled(childComplexity), true

	case "JJ_VEHICLE_avg_fields.ZT":
		if e.complexity.JjVehicleAvgFields.Zt == nil {
			break
		}

		return e.complexity.JjVehicleAvgFields.Zt(childComplexity), true

	case "JJ_VEHICLE_avg_fields.ZZL":
		if e.complexity.JjVehicleAvgFields.Zzl == nil {
			break
		}

		return e.complexity.JjVehicleAvgFields.Zzl(childComplexity), true

	case "JJ_VEHICLE_max_fields.CCDJRQ":
		if e.complexity.JjVehicleMaxFields.Ccdjrq == nil {
			break
		}

		return e.complexity.JjVehicleMaxFields.Ccdjrq(childComplexity), true

	case "JJ_VEHICLE_max_fields.CLLX":
		if e.complexity.JjVehicleMaxFields.Cllx == nil {
			break
		}

		return e.complexity.JjVehicleMaxFields.Cllx(childComplexity), true

	case "JJ_VEHICLE_max_fields.CLSBDH":
		if e.complexity.JjVehicleMaxFields.Clsbdh == nil {
			break
		}

		return e.complexity.JjVehicleMaxFields.Clsbdh(childComplexity), true

	case "JJ_VEHICLE_max_fields.COUNTY":
		if e.complexity.JjVehicleMaxFields.County == nil {
			break
		}

		return e.complexity.JjVehicleMaxFields.County(childComplexity), true

	case "JJ_VEHICLE_max_fields.DJRQ":
		if e.complexity.JjVehicleMaxFields.Djrq == nil {
			break
		}

		return e.complexity.JjVehicleMaxFields.Djrq(childComplexity), true

	case "JJ_VEHICLE_max_fields.FPRQ":
		if e.complexity.JjVehicleMaxFields.Fprq == nil {
			break
		}

		return e.complexity.JjVehicleMaxFields.Fprq(childComplexity), true

	case "JJ_VEHICLE_max_fields.GXRQ":
		if e.complexity.JjVehicleMaxFields.Gxrq == nil {
			break
		}

		return e.complexity.JjVehicleMaxFields.Gxrq(childComplexity), true

	case "JJ_VEHICLE_max_fields.HPHM":
		if e.complexity.JjVehicleMaxFields.Hphm == nil {
			break
		}

		return e.complexity.JjVehicleMaxFields.Hphm(childComplexity), true

	case "JJ_VEHICLE_max_fields.HPZL":
		if e.complexity.JjVehicleMaxFields.Hpzl == nil {
			break
		}

		return e.complexity.JjVehicleMaxFields.Hpzl(childComplexity), true

	case "JJ_VEHICLE_max_fields.id":
		if e.complexity.JjVehicleMaxFields.ID == nil {
			break
		}

		return e.complexity.JjVehicleMaxFields.ID(childComplexity), true

	case "JJ_VEHICLE_max_fields.IS_DETELED":
		if e.complexity.JjVehicleMaxFields.IsDeteled == nil {
			break
		}

		return e.complexity.JjVehicleMaxFields.IsDeteled(childComplexity), true

	case "JJ_VEHICLE_max_fields.LXDH":
		if e.complexity.JjVehicleMaxFields.Lxdh == nil {
			break
		}

		return e.complexity.JjVehicleMaxFields.Lxdh(childComplexity), true

	case "JJ_VEHICLE_max_fields.LXDZ":
		if e.complexity.JjVehicleMaxFields.Lxdz == nil {
			break
		}

		return e.complexity.JjVehicleMaxFields.Lxdz(childComplexity), true

	case "JJ_VEHICLE_max_fields.OTHER":
		if e.complexity.JjVehicleMaxFields.Other == nil {
			break
		}

		return e.complexity.JjVehicleMaxFields.Other(childComplexity), true

	case "JJ_VEHICLE_max_fields.QZBFQZ":
		if e.complexity.JjVehicleMaxFields.Qzbfqz == nil {
			break
		}

		return e.complexity.JjVehicleMaxFields.Qzbfqz(childComplexity), true

	case "JJ_VEHICLE_max_fields.SJHM":
		if e.complexity.JjVehicleMaxFields.Sjhm == nil {
			break
		}

		return e.complexity.JjVehicleMaxFields.Sjhm(childComplexity), true

	case "JJ_VEHICLE_max_fields.SYR":
		if e.complexity.JjVehicleMaxFields.Syr == nil {
			break
		}

		return e.complexity.JjVehicleMaxFields.Syr(childComplexity), true

	case "JJ_VEHICLE_max_fields.SYXZ":
		if e.complexity.JjVehicleMaxFields.Syxz == nil {
			break
		}

		return e.complexity.JjVehicleMaxFields.Syxz(childComplexity), true

	case "JJ_VEHICLE_max_fields.UPDATETIME":
		if e.complexity.JjVehicleMaxFields.Updatetime == nil {
			break
		}

		return e.complexity.JjVehicleMaxFields.Updatetime(childComplexity), true

	case "JJ_VEHICLE_max_fields.vehicle_id":
		if e.complexity.JjVehicleMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.JjVehicleMaxFields.VehicleID(childComplexity), true

	case "JJ_VEHICLE_max_fields.VEHMONTYPE":
		if e.complexity.JjVehicleMaxFields.Vehmontype == nil {
			break
		}

		return e.complexity.JjVehicleMaxFields.Vehmontype(childComplexity), true

	case "JJ_VEHICLE_max_fields.XH":
		if e.complexity.JjVehicleMaxFields.Xh == nil {
			break
		}

		return e.complexity.JjVehicleMaxFields.Xh(childComplexity), true

	case "JJ_VEHICLE_max_fields.YXQZ":
		if e.complexity.JjVehicleMaxFields.Yxqz == nil {
			break
		}

		return e.complexity.JjVehicleMaxFields.Yxqz(childComplexity), true

	case "JJ_VEHICLE_max_fields.ZT":
		if e.complexity.JjVehicleMaxFields.Zt == nil {
			break
		}

		return e.complexity.JjVehicleMaxFields.Zt(childComplexity), true

	case "JJ_VEHICLE_max_fields.ZZL":
		if e.complexity.JjVehicleMaxFields.Zzl == nil {
			break
		}

		return e.complexity.JjVehicleMaxFields.Zzl(childComplexity), true

	case "JJ_VEHICLE_min_fields.CCDJRQ":
		if e.complexity.JjVehicleMinFields.Ccdjrq == nil {
			break
		}

		return e.complexity.JjVehicleMinFields.Ccdjrq(childComplexity), true

	case "JJ_VEHICLE_min_fields.CLLX":
		if e.complexity.JjVehicleMinFields.Cllx == nil {
			break
		}

		return e.complexity.JjVehicleMinFields.Cllx(childComplexity), true

	case "JJ_VEHICLE_min_fields.CLSBDH":
		if e.complexity.JjVehicleMinFields.Clsbdh == nil {
			break
		}

		return e.complexity.JjVehicleMinFields.Clsbdh(childComplexity), true

	case "JJ_VEHICLE_min_fields.COUNTY":
		if e.complexity.JjVehicleMinFields.County == nil {
			break
		}

		return e.complexity.JjVehicleMinFields.County(childComplexity), true

	case "JJ_VEHICLE_min_fields.DJRQ":
		if e.complexity.JjVehicleMinFields.Djrq == nil {
			break
		}

		return e.complexity.JjVehicleMinFields.Djrq(childComplexity), true

	case "JJ_VEHICLE_min_fields.FPRQ":
		if e.complexity.JjVehicleMinFields.Fprq == nil {
			break
		}

		return e.complexity.JjVehicleMinFields.Fprq(childComplexity), true

	case "JJ_VEHICLE_min_fields.GXRQ":
		if e.complexity.JjVehicleMinFields.Gxrq == nil {
			break
		}

		return e.complexity.JjVehicleMinFields.Gxrq(childComplexity), true

	case "JJ_VEHICLE_min_fields.HPHM":
		if e.complexity.JjVehicleMinFields.Hphm == nil {
			break
		}

		return e.complexity.JjVehicleMinFields.Hphm(childComplexity), true

	case "JJ_VEHICLE_min_fields.HPZL":
		if e.complexity.JjVehicleMinFields.Hpzl == nil {
			break
		}

		return e.complexity.JjVehicleMinFields.Hpzl(childComplexity), true

	case "JJ_VEHICLE_min_fields.id":
		if e.complexity.JjVehicleMinFields.ID == nil {
			break
		}

		return e.complexity.JjVehicleMinFields.ID(childComplexity), true

	case "JJ_VEHICLE_min_fields.IS_DETELED":
		if e.complexity.JjVehicleMinFields.IsDeteled == nil {
			break
		}

		return e.complexity.JjVehicleMinFields.IsDeteled(childComplexity), true

	case "JJ_VEHICLE_min_fields.LXDH":
		if e.complexity.JjVehicleMinFields.Lxdh == nil {
			break
		}

		return e.complexity.JjVehicleMinFields.Lxdh(childComplexity), true

	case "JJ_VEHICLE_min_fields.LXDZ":
		if e.complexity.JjVehicleMinFields.Lxdz == nil {
			break
		}

		return e.complexity.JjVehicleMinFields.Lxdz(childComplexity), true

	case "JJ_VEHICLE_min_fields.OTHER":
		if e.complexity.JjVehicleMinFields.Other == nil {
			break
		}

		return e.complexity.JjVehicleMinFields.Other(childComplexity), true

	case "JJ_VEHICLE_min_fields.QZBFQZ":
		if e.complexity.JjVehicleMinFields.Qzbfqz == nil {
			break
		}

		return e.complexity.JjVehicleMinFields.Qzbfqz(childComplexity), true

	case "JJ_VEHICLE_min_fields.SJHM":
		if e.complexity.JjVehicleMinFields.Sjhm == nil {
			break
		}

		return e.complexity.JjVehicleMinFields.Sjhm(childComplexity), true

	case "JJ_VEHICLE_min_fields.SYR":
		if e.complexity.JjVehicleMinFields.Syr == nil {
			break
		}

		return e.complexity.JjVehicleMinFields.Syr(childComplexity), true

	case "JJ_VEHICLE_min_fields.SYXZ":
		if e.complexity.JjVehicleMinFields.Syxz == nil {
			break
		}

		return e.complexity.JjVehicleMinFields.Syxz(childComplexity), true

	case "JJ_VEHICLE_min_fields.UPDATETIME":
		if e.complexity.JjVehicleMinFields.Updatetime == nil {
			break
		}

		return e.complexity.JjVehicleMinFields.Updatetime(childComplexity), true

	case "JJ_VEHICLE_min_fields.vehicle_id":
		if e.complexity.JjVehicleMinFields.VehicleID == nil {
			break
		}

		return e.complexity.JjVehicleMinFields.VehicleID(childComplexity), true

	case "JJ_VEHICLE_min_fields.VEHMONTYPE":
		if e.complexity.JjVehicleMinFields.Vehmontype == nil {
			break
		}

		return e.complexity.JjVehicleMinFields.Vehmontype(childComplexity), true

	case "JJ_VEHICLE_min_fields.XH":
		if e.complexity.JjVehicleMinFields.Xh == nil {
			break
		}

		return e.complexity.JjVehicleMinFields.Xh(childComplexity), true

	case "JJ_VEHICLE_min_fields.YXQZ":
		if e.complexity.JjVehicleMinFields.Yxqz == nil {
			break
		}

		return e.complexity.JjVehicleMinFields.Yxqz(childComplexity), true

	case "JJ_VEHICLE_min_fields.ZT":
		if e.complexity.JjVehicleMinFields.Zt == nil {
			break
		}

		return e.complexity.JjVehicleMinFields.Zt(childComplexity), true

	case "JJ_VEHICLE_min_fields.ZZL":
		if e.complexity.JjVehicleMinFields.Zzl == nil {
			break
		}

		return e.complexity.JjVehicleMinFields.Zzl(childComplexity), true

	case "JJ_VEHICLE_mutation_response.affected_rows":
		if e.complexity.JjVehicleMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.JjVehicleMutationResponse.AffectedRows(childComplexity), true

	case "JJ_VEHICLE_mutation_response.returning":
		if e.complexity.JjVehicleMutationResponse.Returning == nil {
			break
		}

		return e.complexity.JjVehicleMutationResponse.Returning(childComplexity), true

	case "JJ_VEHICLE_stddev_fields.id":
		if e.complexity.JjVehicleStddevFields.ID == nil {
			break
		}

		return e.complexity.JjVehicleStddevFields.ID(childComplexity), true

	case "JJ_VEHICLE_stddev_fields.IS_DETELED":
		if e.complexity.JjVehicleStddevFields.IsDeteled == nil {
			break
		}

		return e.complexity.JjVehicleStddevFields.IsDeteled(childComplexity), true

	case "JJ_VEHICLE_stddev_fields.ZT":
		if e.complexity.JjVehicleStddevFields.Zt == nil {
			break
		}

		return e.complexity.JjVehicleStddevFields.Zt(childComplexity), true

	case "JJ_VEHICLE_stddev_fields.ZZL":
		if e.complexity.JjVehicleStddevFields.Zzl == nil {
			break
		}

		return e.complexity.JjVehicleStddevFields.Zzl(childComplexity), true

	case "JJ_VEHICLE_stddev_pop_fields.id":
		if e.complexity.JjVehicleStddevPopFields.ID == nil {
			break
		}

		return e.complexity.JjVehicleStddevPopFields.ID(childComplexity), true

	case "JJ_VEHICLE_stddev_pop_fields.IS_DETELED":
		if e.complexity.JjVehicleStddevPopFields.IsDeteled == nil {
			break
		}

		return e.complexity.JjVehicleStddevPopFields.IsDeteled(childComplexity), true

	case "JJ_VEHICLE_stddev_pop_fields.ZT":
		if e.complexity.JjVehicleStddevPopFields.Zt == nil {
			break
		}

		return e.complexity.JjVehicleStddevPopFields.Zt(childComplexity), true

	case "JJ_VEHICLE_stddev_pop_fields.ZZL":
		if e.complexity.JjVehicleStddevPopFields.Zzl == nil {
			break
		}

		return e.complexity.JjVehicleStddevPopFields.Zzl(childComplexity), true

	case "JJ_VEHICLE_stddev_samp_fields.id":
		if e.complexity.JjVehicleStddevSampFields.ID == nil {
			break
		}

		return e.complexity.JjVehicleStddevSampFields.ID(childComplexity), true

	case "JJ_VEHICLE_stddev_samp_fields.IS_DETELED":
		if e.complexity.JjVehicleStddevSampFields.IsDeteled == nil {
			break
		}

		return e.complexity.JjVehicleStddevSampFields.IsDeteled(childComplexity), true

	case "JJ_VEHICLE_stddev_samp_fields.ZT":
		if e.complexity.JjVehicleStddevSampFields.Zt == nil {
			break
		}

		return e.complexity.JjVehicleStddevSampFields.Zt(childComplexity), true

	case "JJ_VEHICLE_stddev_samp_fields.ZZL":
		if e.complexity.JjVehicleStddevSampFields.Zzl == nil {
			break
		}

		return e.complexity.JjVehicleStddevSampFields.Zzl(childComplexity), true

	case "JJ_VEHICLE_sum_fields.id":
		if e.complexity.JjVehicleSumFields.ID == nil {
			break
		}

		return e.complexity.JjVehicleSumFields.ID(childComplexity), true

	case "JJ_VEHICLE_sum_fields.IS_DETELED":
		if e.complexity.JjVehicleSumFields.IsDeteled == nil {
			break
		}

		return e.complexity.JjVehicleSumFields.IsDeteled(childComplexity), true

	case "JJ_VEHICLE_sum_fields.ZT":
		if e.complexity.JjVehicleSumFields.Zt == nil {
			break
		}

		return e.complexity.JjVehicleSumFields.Zt(childComplexity), true

	case "JJ_VEHICLE_sum_fields.ZZL":
		if e.complexity.JjVehicleSumFields.Zzl == nil {
			break
		}

		return e.complexity.JjVehicleSumFields.Zzl(childComplexity), true

	case "JJ_VEHICLE_var_pop_fields.id":
		if e.complexity.JjVehicleVarPopFields.ID == nil {
			break
		}

		return e.complexity.JjVehicleVarPopFields.ID(childComplexity), true

	case "JJ_VEHICLE_var_pop_fields.IS_DETELED":
		if e.complexity.JjVehicleVarPopFields.IsDeteled == nil {
			break
		}

		return e.complexity.JjVehicleVarPopFields.IsDeteled(childComplexity), true

	case "JJ_VEHICLE_var_pop_fields.ZT":
		if e.complexity.JjVehicleVarPopFields.Zt == nil {
			break
		}

		return e.complexity.JjVehicleVarPopFields.Zt(childComplexity), true

	case "JJ_VEHICLE_var_pop_fields.ZZL":
		if e.complexity.JjVehicleVarPopFields.Zzl == nil {
			break
		}

		return e.complexity.JjVehicleVarPopFields.Zzl(childComplexity), true

	case "JJ_VEHICLE_var_samp_fields.id":
		if e.complexity.JjVehicleVarSampFields.ID == nil {
			break
		}

		return e.complexity.JjVehicleVarSampFields.ID(childComplexity), true

	case "JJ_VEHICLE_var_samp_fields.IS_DETELED":
		if e.complexity.JjVehicleVarSampFields.IsDeteled == nil {
			break
		}

		return e.complexity.JjVehicleVarSampFields.IsDeteled(childComplexity), true

	case "JJ_VEHICLE_var_samp_fields.ZT":
		if e.complexity.JjVehicleVarSampFields.Zt == nil {
			break
		}

		return e.complexity.JjVehicleVarSampFields.Zt(childComplexity), true

	case "JJ_VEHICLE_var_samp_fields.ZZL":
		if e.complexity.JjVehicleVarSampFields.Zzl == nil {
			break
		}

		return e.complexity.JjVehicleVarSampFields.Zzl(childComplexity), true

	case "JJ_VEHICLE_variance_fields.id":
		if e.complexity.JjVehicleVarianceFields.ID == nil {
			break
		}

		return e.complexity.JjVehicleVarianceFields.ID(childComplexity), true

	case "JJ_VEHICLE_variance_fields.IS_DETELED":
		if e.complexity.JjVehicleVarianceFields.IsDeteled == nil {
			break
		}

		return e.complexity.JjVehicleVarianceFields.IsDeteled(childComplexity), true

	case "JJ_VEHICLE_variance_fields.ZT":
		if e.complexity.JjVehicleVarianceFields.Zt == nil {
			break
		}

		return e.complexity.JjVehicleVarianceFields.Zt(childComplexity), true

	case "JJ_VEHICLE_variance_fields.ZZL":
		if e.complexity.JjVehicleVarianceFields.Zzl == nil {
			break
		}

		return e.complexity.JjVehicleVarianceFields.Zzl(childComplexity), true

	case "Mutation.delete_JJ_VEHICLE":
		if e.complexity.Mutation.DeleteJjVehicle == nil {
			break
		}

		args, err := ec.field_Mutation_delete_JJ_VEHICLE_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteJjVehicle(childComplexity, args["where"].(model.JjVehicleBoolExp)), true

	case "Mutation.delete_JJ_VEHICLE_by_pk":
		if e.complexity.Mutation.DeleteJjVehicleByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_JJ_VEHICLE_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteJjVehicleByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_muck_truck_category_info":
		if e.complexity.Mutation.DeleteMuckTruckCategoryInfo == nil {
			break
		}

		args, err := ec.field_Mutation_delete_muck_truck_category_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMuckTruckCategoryInfo(childComplexity, args["where"].(model.MuckTruckCategoryInfoBoolExp)), true

	case "Mutation.delete_muck_truck_category_info_by_pk":
		if e.complexity.Mutation.DeleteMuckTruckCategoryInfoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_muck_truck_category_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMuckTruckCategoryInfoByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_muck_truck_info":
		if e.complexity.Mutation.DeleteMuckTruckInfo == nil {
			break
		}

		args, err := ec.field_Mutation_delete_muck_truck_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMuckTruckInfo(childComplexity, args["where"].(model.MuckTruckInfoBoolExp)), true

	case "Mutation.delete_muck_truck_info_by_pk":
		if e.complexity.Mutation.DeleteMuckTruckInfoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_muck_truck_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMuckTruckInfoByPk(childComplexity, args["muck_truck_id"].(int64)), true

	case "Mutation.delete_muck_truck_preview_number":
		if e.complexity.Mutation.DeleteMuckTruckPreviewNumber == nil {
			break
		}

		args, err := ec.field_Mutation_delete_muck_truck_preview_number_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMuckTruckPreviewNumber(childComplexity, args["where"].(model.MuckTruckPreviewNumberBoolExp)), true

	case "Mutation.delete_muck_truck_preview_number_by_pk":
		if e.complexity.Mutation.DeleteMuckTruckPreviewNumberByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_muck_truck_preview_number_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMuckTruckPreviewNumberByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_muck_truck_worker_id_card_orders":
		if e.complexity.Mutation.DeleteMuckTruckWorkerIDCardOrders == nil {
			break
		}

		args, err := ec.field_Mutation_delete_muck_truck_worker_id_card_orders_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMuckTruckWorkerIDCardOrders(childComplexity, args["where"].(model.MuckTruckWorkerIDCardOrdersBoolExp)), true

	case "Mutation.delete_muck_truck_worker_id_card_orders_by_pk":
		if e.complexity.Mutation.DeleteMuckTruckWorkerIDCardOrdersByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_muck_truck_worker_id_card_orders_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMuckTruckWorkerIDCardOrdersByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_operating_vehicle_info":
		if e.complexity.Mutation.DeleteOperatingVehicleInfo == nil {
			break
		}

		args, err := ec.field_Mutation_delete_operating_vehicle_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOperatingVehicleInfo(childComplexity, args["where"].(model.OperatingVehicleInfoBoolExp)), true

	case "Mutation.delete_operating_vehicle_info_by_pk":
		if e.complexity.Mutation.DeleteOperatingVehicleInfoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_operating_vehicle_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOperatingVehicleInfoByPk(childComplexity, args["operating_vehicle_id"].(int64)), true

	case "Mutation.delete_owner_info":
		if e.complexity.Mutation.DeleteOwnerInfo == nil {
			break
		}

		args, err := ec.field_Mutation_delete_owner_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOwnerInfo(childComplexity, args["where"].(model.OwnerInfoBoolExp)), true

	case "Mutation.delete_owner_info_by_pk":
		if e.complexity.Mutation.DeleteOwnerInfoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_owner_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOwnerInfoByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_vehicle_info":
		if e.complexity.Mutation.DeleteVehicleInfo == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleInfo(childComplexity, args["where"].(model.VehicleInfoBoolExp)), true

	case "Mutation.delete_vehicle_info_by_pk":
		if e.complexity.Mutation.DeleteVehicleInfoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleInfoByPk(childComplexity, args["id"].(int64), args["vehicle_id"].(string)), true

	case "Mutation.delete_vehicle_info_change_log":
		if e.complexity.Mutation.DeleteVehicleInfoChangeLog == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_info_change_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleInfoChangeLog(childComplexity, args["where"].(model.VehicleInfoChangeLogBoolExp)), true

	case "Mutation.delete_vehicle_info_change_log_by_pk":
		if e.complexity.Mutation.DeleteVehicleInfoChangeLogByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_info_change_log_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleInfoChangeLogByPk(childComplexity, args["id"].(int64), args["vehicle_info_change_id"].(string)), true

	case "Mutation.delete_vehicle_supervision_photo":
		if e.complexity.Mutation.DeleteVehicleSupervisionPhoto == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_supervision_photo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleSupervisionPhoto(childComplexity, args["where"].(model.VehicleSupervisionPhotoBoolExp)), true

	case "Mutation.delete_vehicle_supervision_photo_by_pk":
		if e.complexity.Mutation.DeleteVehicleSupervisionPhotoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_supervision_photo_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleSupervisionPhotoByPk(childComplexity, args["id"].(int64), args["supervision_photo_id"].(string)), true

	case "Mutation.insert_JJ_VEHICLE":
		if e.complexity.Mutation.InsertJjVehicle == nil {
			break
		}

		args, err := ec.field_Mutation_insert_JJ_VEHICLE_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertJjVehicle(childComplexity, args["objects"].([]*model.JjVehicleInsertInput), args["on_conflict"].(*model.JjVehicleOnConflict)), true

	case "Mutation.insert_JJ_VEHICLE_one":
		if e.complexity.Mutation.InsertJjVehicleOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_JJ_VEHICLE_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertJjVehicleOne(childComplexity, args["object"].(model.JjVehicleInsertInput), args["on_conflict"].(*model.JjVehicleOnConflict)), true

	case "Mutation.insert_muck_truck_category_info":
		if e.complexity.Mutation.InsertMuckTruckCategoryInfo == nil {
			break
		}

		args, err := ec.field_Mutation_insert_muck_truck_category_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertMuckTruckCategoryInfo(childComplexity, args["objects"].([]*model.MuckTruckCategoryInfoInsertInput), args["on_conflict"].(*model.MuckTruckCategoryInfoOnConflict)), true

	case "Mutation.insert_muck_truck_category_info_one":
		if e.complexity.Mutation.InsertMuckTruckCategoryInfoOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_muck_truck_category_info_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertMuckTruckCategoryInfoOne(childComplexity, args["object"].(model.MuckTruckCategoryInfoInsertInput), args["on_conflict"].(*model.MuckTruckCategoryInfoOnConflict)), true

	case "Mutation.insert_muck_truck_info":
		if e.complexity.Mutation.InsertMuckTruckInfo == nil {
			break
		}

		args, err := ec.field_Mutation_insert_muck_truck_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertMuckTruckInfo(childComplexity, args["objects"].([]*model.MuckTruckInfoInsertInput), args["on_conflict"].(*model.MuckTruckInfoOnConflict)), true

	case "Mutation.insert_muck_truck_info_one":
		if e.complexity.Mutation.InsertMuckTruckInfoOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_muck_truck_info_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertMuckTruckInfoOne(childComplexity, args["object"].(model.MuckTruckInfoInsertInput), args["on_conflict"].(*model.MuckTruckInfoOnConflict)), true

	case "Mutation.insert_muck_truck_preview_number":
		if e.complexity.Mutation.InsertMuckTruckPreviewNumber == nil {
			break
		}

		args, err := ec.field_Mutation_insert_muck_truck_preview_number_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertMuckTruckPreviewNumber(childComplexity, args["objects"].([]*model.MuckTruckPreviewNumberInsertInput), args["on_conflict"].(*model.MuckTruckPreviewNumberOnConflict)), true

	case "Mutation.insert_muck_truck_preview_number_one":
		if e.complexity.Mutation.InsertMuckTruckPreviewNumberOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_muck_truck_preview_number_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertMuckTruckPreviewNumberOne(childComplexity, args["object"].(model.MuckTruckPreviewNumberInsertInput), args["on_conflict"].(*model.MuckTruckPreviewNumberOnConflict)), true

	case "Mutation.insert_muck_truck_worker_id_card_orders":
		if e.complexity.Mutation.InsertMuckTruckWorkerIDCardOrders == nil {
			break
		}

		args, err := ec.field_Mutation_insert_muck_truck_worker_id_card_orders_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertMuckTruckWorkerIDCardOrders(childComplexity, args["objects"].([]*model.MuckTruckWorkerIDCardOrdersInsertInput), args["on_conflict"].(*model.MuckTruckWorkerIDCardOrdersOnConflict)), true

	case "Mutation.insert_muck_truck_worker_id_card_orders_one":
		if e.complexity.Mutation.InsertMuckTruckWorkerIDCardOrdersOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_muck_truck_worker_id_card_orders_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertMuckTruckWorkerIDCardOrdersOne(childComplexity, args["object"].(model.MuckTruckWorkerIDCardOrdersInsertInput), args["on_conflict"].(*model.MuckTruckWorkerIDCardOrdersOnConflict)), true

	case "Mutation.insert_operating_vehicle_info":
		if e.complexity.Mutation.InsertOperatingVehicleInfo == nil {
			break
		}

		args, err := ec.field_Mutation_insert_operating_vehicle_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertOperatingVehicleInfo(childComplexity, args["objects"].([]*model.OperatingVehicleInfoInsertInput), args["on_conflict"].(*model.OperatingVehicleInfoOnConflict)), true

	case "Mutation.insert_operating_vehicle_info_one":
		if e.complexity.Mutation.InsertOperatingVehicleInfoOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_operating_vehicle_info_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertOperatingVehicleInfoOne(childComplexity, args["object"].(model.OperatingVehicleInfoInsertInput), args["on_conflict"].(*model.OperatingVehicleInfoOnConflict)), true

	case "Mutation.insert_owner_info":
		if e.complexity.Mutation.InsertOwnerInfo == nil {
			break
		}

		args, err := ec.field_Mutation_insert_owner_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertOwnerInfo(childComplexity, args["objects"].([]*model.OwnerInfoInsertInput), args["on_conflict"].(*model.OwnerInfoOnConflict)), true

	case "Mutation.insert_owner_info_one":
		if e.complexity.Mutation.InsertOwnerInfoOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_owner_info_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertOwnerInfoOne(childComplexity, args["object"].(model.OwnerInfoInsertInput), args["on_conflict"].(*model.OwnerInfoOnConflict)), true

	case "Mutation.insert_vehicle_info":
		if e.complexity.Mutation.InsertVehicleInfo == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleInfo(childComplexity, args["objects"].([]*model.VehicleInfoInsertInput), args["on_conflict"].(*model.VehicleInfoOnConflict)), true

	case "Mutation.insert_vehicle_info_change_log":
		if e.complexity.Mutation.InsertVehicleInfoChangeLog == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_info_change_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleInfoChangeLog(childComplexity, args["objects"].([]*model.VehicleInfoChangeLogInsertInput), args["on_conflict"].(*model.VehicleInfoChangeLogOnConflict)), true

	case "Mutation.insert_vehicle_info_change_log_one":
		if e.complexity.Mutation.InsertVehicleInfoChangeLogOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_info_change_log_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleInfoChangeLogOne(childComplexity, args["object"].(model.VehicleInfoChangeLogInsertInput), args["on_conflict"].(*model.VehicleInfoChangeLogOnConflict)), true

	case "Mutation.insert_vehicle_info_one":
		if e.complexity.Mutation.InsertVehicleInfoOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_info_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleInfoOne(childComplexity, args["object"].(model.VehicleInfoInsertInput), args["on_conflict"].(*model.VehicleInfoOnConflict)), true

	case "Mutation.insert_vehicle_supervision_photo":
		if e.complexity.Mutation.InsertVehicleSupervisionPhoto == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_supervision_photo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleSupervisionPhoto(childComplexity, args["objects"].([]*model.VehicleSupervisionPhotoInsertInput), args["on_conflict"].(*model.VehicleSupervisionPhotoOnConflict)), true

	case "Mutation.insert_vehicle_supervision_photo_one":
		if e.complexity.Mutation.InsertVehicleSupervisionPhotoOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_supervision_photo_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleSupervisionPhotoOne(childComplexity, args["object"].(model.VehicleSupervisionPhotoInsertInput), args["on_conflict"].(*model.VehicleSupervisionPhotoOnConflict)), true

	case "Mutation.update_JJ_VEHICLE":
		if e.complexity.Mutation.UpdateJjVehicle == nil {
			break
		}

		args, err := ec.field_Mutation_update_JJ_VEHICLE_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateJjVehicle(childComplexity, args["_inc"].(*model.JjVehicleIncInput), args["_set"].(*model.JjVehicleSetInput), args["where"].(model.JjVehicleBoolExp)), true

	case "Mutation.update_JJ_VEHICLE_by_pk":
		if e.complexity.Mutation.UpdateJjVehicleByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_JJ_VEHICLE_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateJjVehicleByPk(childComplexity, args["_inc"].(*model.JjVehicleIncInput), args["_set"].(*model.JjVehicleSetInput), args["pk_columns"].(model.JjVehiclePkColumnsInput)), true

	case "Mutation.update_muck_truck_category_info":
		if e.complexity.Mutation.UpdateMuckTruckCategoryInfo == nil {
			break
		}

		args, err := ec.field_Mutation_update_muck_truck_category_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMuckTruckCategoryInfo(childComplexity, args["_inc"].(*model.MuckTruckCategoryInfoIncInput), args["_set"].(*model.MuckTruckCategoryInfoSetInput), args["where"].(model.MuckTruckCategoryInfoBoolExp)), true

	case "Mutation.update_muck_truck_category_info_by_pk":
		if e.complexity.Mutation.UpdateMuckTruckCategoryInfoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_muck_truck_category_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMuckTruckCategoryInfoByPk(childComplexity, args["_inc"].(*model.MuckTruckCategoryInfoIncInput), args["_set"].(*model.MuckTruckCategoryInfoSetInput), args["pk_columns"].(model.MuckTruckCategoryInfoPkColumnsInput)), true

	case "Mutation.update_muck_truck_info":
		if e.complexity.Mutation.UpdateMuckTruckInfo == nil {
			break
		}

		args, err := ec.field_Mutation_update_muck_truck_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMuckTruckInfo(childComplexity, args["_inc"].(*model.MuckTruckInfoIncInput), args["_set"].(*model.MuckTruckInfoSetInput), args["where"].(model.MuckTruckInfoBoolExp)), true

	case "Mutation.update_muck_truck_info_by_pk":
		if e.complexity.Mutation.UpdateMuckTruckInfoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_muck_truck_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMuckTruckInfoByPk(childComplexity, args["_inc"].(*model.MuckTruckInfoIncInput), args["_set"].(*model.MuckTruckInfoSetInput), args["pk_columns"].(model.MuckTruckInfoPkColumnsInput)), true

	case "Mutation.update_muck_truck_preview_number":
		if e.complexity.Mutation.UpdateMuckTruckPreviewNumber == nil {
			break
		}

		args, err := ec.field_Mutation_update_muck_truck_preview_number_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMuckTruckPreviewNumber(childComplexity, args["_inc"].(*model.MuckTruckPreviewNumberIncInput), args["_set"].(*model.MuckTruckPreviewNumberSetInput), args["where"].(model.MuckTruckPreviewNumberBoolExp)), true

	case "Mutation.update_muck_truck_preview_number_by_pk":
		if e.complexity.Mutation.UpdateMuckTruckPreviewNumberByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_muck_truck_preview_number_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMuckTruckPreviewNumberByPk(childComplexity, args["_inc"].(*model.MuckTruckPreviewNumberIncInput), args["_set"].(*model.MuckTruckPreviewNumberSetInput), args["pk_columns"].(model.MuckTruckPreviewNumberPkColumnsInput)), true

	case "Mutation.update_muck_truck_worker_id_card_orders":
		if e.complexity.Mutation.UpdateMuckTruckWorkerIDCardOrders == nil {
			break
		}

		args, err := ec.field_Mutation_update_muck_truck_worker_id_card_orders_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMuckTruckWorkerIDCardOrders(childComplexity, args["_inc"].(*model.MuckTruckWorkerIDCardOrdersIncInput), args["_set"].(*model.MuckTruckWorkerIDCardOrdersSetInput), args["where"].(model.MuckTruckWorkerIDCardOrdersBoolExp)), true

	case "Mutation.update_muck_truck_worker_id_card_orders_by_pk":
		if e.complexity.Mutation.UpdateMuckTruckWorkerIDCardOrdersByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_muck_truck_worker_id_card_orders_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMuckTruckWorkerIDCardOrdersByPk(childComplexity, args["_inc"].(*model.MuckTruckWorkerIDCardOrdersIncInput), args["_set"].(*model.MuckTruckWorkerIDCardOrdersSetInput), args["pk_columns"].(model.MuckTruckWorkerIDCardOrdersPkColumnsInput)), true

	case "Mutation.update_operating_vehicle_info":
		if e.complexity.Mutation.UpdateOperatingVehicleInfo == nil {
			break
		}

		args, err := ec.field_Mutation_update_operating_vehicle_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOperatingVehicleInfo(childComplexity, args["_inc"].(*model.OperatingVehicleInfoIncInput), args["_set"].(*model.OperatingVehicleInfoSetInput), args["where"].(model.OperatingVehicleInfoBoolExp)), true

	case "Mutation.update_operating_vehicle_info_by_pk":
		if e.complexity.Mutation.UpdateOperatingVehicleInfoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_operating_vehicle_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOperatingVehicleInfoByPk(childComplexity, args["_inc"].(*model.OperatingVehicleInfoIncInput), args["_set"].(*model.OperatingVehicleInfoSetInput), args["pk_columns"].(model.OperatingVehicleInfoPkColumnsInput)), true

	case "Mutation.update_owner_info":
		if e.complexity.Mutation.UpdateOwnerInfo == nil {
			break
		}

		args, err := ec.field_Mutation_update_owner_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOwnerInfo(childComplexity, args["_inc"].(*model.OwnerInfoIncInput), args["_set"].(*model.OwnerInfoSetInput), args["where"].(model.OwnerInfoBoolExp)), true

	case "Mutation.update_owner_info_by_pk":
		if e.complexity.Mutation.UpdateOwnerInfoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_owner_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOwnerInfoByPk(childComplexity, args["_inc"].(*model.OwnerInfoIncInput), args["_set"].(*model.OwnerInfoSetInput), args["pk_columns"].(model.OwnerInfoPkColumnsInput)), true

	case "Mutation.update_vehicle_info":
		if e.complexity.Mutation.UpdateVehicleInfo == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleInfo(childComplexity, args["_inc"].(*model.VehicleInfoIncInput), args["_set"].(*model.VehicleInfoSetInput), args["where"].(model.VehicleInfoBoolExp)), true

	case "Mutation.update_vehicle_info_by_pk":
		if e.complexity.Mutation.UpdateVehicleInfoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleInfoByPk(childComplexity, args["_inc"].(*model.VehicleInfoIncInput), args["_set"].(*model.VehicleInfoSetInput), args["pk_columns"].(model.VehicleInfoPkColumnsInput)), true

	case "Mutation.update_vehicle_info_change_log":
		if e.complexity.Mutation.UpdateVehicleInfoChangeLog == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_info_change_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleInfoChangeLog(childComplexity, args["_inc"].(*model.VehicleInfoChangeLogIncInput), args["_set"].(*model.VehicleInfoChangeLogSetInput), args["where"].(model.VehicleInfoChangeLogBoolExp)), true

	case "Mutation.update_vehicle_info_change_log_by_pk":
		if e.complexity.Mutation.UpdateVehicleInfoChangeLogByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_info_change_log_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleInfoChangeLogByPk(childComplexity, args["_inc"].(*model.VehicleInfoChangeLogIncInput), args["_set"].(*model.VehicleInfoChangeLogSetInput), args["pk_columns"].(model.VehicleInfoChangeLogPkColumnsInput)), true

	case "Mutation.update_vehicle_supervision_photo":
		if e.complexity.Mutation.UpdateVehicleSupervisionPhoto == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_supervision_photo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleSupervisionPhoto(childComplexity, args["_inc"].(*model.VehicleSupervisionPhotoIncInput), args["_set"].(*model.VehicleSupervisionPhotoSetInput), args["where"].(model.VehicleSupervisionPhotoBoolExp)), true

	case "Mutation.update_vehicle_supervision_photo_by_pk":
		if e.complexity.Mutation.UpdateVehicleSupervisionPhotoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_supervision_photo_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleSupervisionPhotoByPk(childComplexity, args["_inc"].(*model.VehicleSupervisionPhotoIncInput), args["_set"].(*model.VehicleSupervisionPhotoSetInput), args["pk_columns"].(model.VehicleSupervisionPhotoPkColumnsInput)), true

	case "Query.JJ_VEHICLE":
		if e.complexity.Query.JjVehicle == nil {
			break
		}

		args, err := ec.field_Query_JJ_VEHICLE_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JjVehicle(childComplexity, args["distinct_on"].([]model.JjVehicleSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.JjVehicleOrderBy), args["where"].(*model.JjVehicleBoolExp)), true

	case "Query.JJ_VEHICLE_aggregate":
		if e.complexity.Query.JjVehicleAggregate == nil {
			break
		}

		args, err := ec.field_Query_JJ_VEHICLE_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JjVehicleAggregate(childComplexity, args["distinct_on"].([]model.JjVehicleSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.JjVehicleOrderBy), args["where"].(*model.JjVehicleBoolExp)), true

	case "Query.JJ_VEHICLE_by_pk":
		if e.complexity.Query.JjVehicleByPk == nil {
			break
		}

		args, err := ec.field_Query_JJ_VEHICLE_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JjVehicleByPk(childComplexity, args["id"].(int64)), true

	case "Query.muck_truck_category_info":
		if e.complexity.Query.MuckTruckCategoryInfo == nil {
			break
		}

		args, err := ec.field_Query_muck_truck_category_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MuckTruckCategoryInfo(childComplexity, args["distinct_on"].([]model.MuckTruckCategoryInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckCategoryInfoOrderBy), args["where"].(*model.MuckTruckCategoryInfoBoolExp)), true

	case "Query.muck_truck_category_info_aggregate":
		if e.complexity.Query.MuckTruckCategoryInfoAggregate == nil {
			break
		}

		args, err := ec.field_Query_muck_truck_category_info_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MuckTruckCategoryInfoAggregate(childComplexity, args["distinct_on"].([]model.MuckTruckCategoryInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckCategoryInfoOrderBy), args["where"].(*model.MuckTruckCategoryInfoBoolExp)), true

	case "Query.muck_truck_category_info_by_pk":
		if e.complexity.Query.MuckTruckCategoryInfoByPk == nil {
			break
		}

		args, err := ec.field_Query_muck_truck_category_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MuckTruckCategoryInfoByPk(childComplexity, args["id"].(int64)), true

	case "Query.muck_truck_info":
		if e.complexity.Query.MuckTruckInfo == nil {
			break
		}

		args, err := ec.field_Query_muck_truck_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MuckTruckInfo(childComplexity, args["distinct_on"].([]model.MuckTruckInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckInfoOrderBy), args["where"].(*model.MuckTruckInfoBoolExp)), true

	case "Query.muck_truck_info_aggregate":
		if e.complexity.Query.MuckTruckInfoAggregate == nil {
			break
		}

		args, err := ec.field_Query_muck_truck_info_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MuckTruckInfoAggregate(childComplexity, args["distinct_on"].([]model.MuckTruckInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckInfoOrderBy), args["where"].(*model.MuckTruckInfoBoolExp)), true

	case "Query.muck_truck_info_by_pk":
		if e.complexity.Query.MuckTruckInfoByPk == nil {
			break
		}

		args, err := ec.field_Query_muck_truck_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MuckTruckInfoByPk(childComplexity, args["muck_truck_id"].(int64)), true

	case "Query.muck_truck_preview_number":
		if e.complexity.Query.MuckTruckPreviewNumber == nil {
			break
		}

		args, err := ec.field_Query_muck_truck_preview_number_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MuckTruckPreviewNumber(childComplexity, args["distinct_on"].([]model.MuckTruckPreviewNumberSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckPreviewNumberOrderBy), args["where"].(*model.MuckTruckPreviewNumberBoolExp)), true

	case "Query.muck_truck_preview_number_aggregate":
		if e.complexity.Query.MuckTruckPreviewNumberAggregate == nil {
			break
		}

		args, err := ec.field_Query_muck_truck_preview_number_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MuckTruckPreviewNumberAggregate(childComplexity, args["distinct_on"].([]model.MuckTruckPreviewNumberSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckPreviewNumberOrderBy), args["where"].(*model.MuckTruckPreviewNumberBoolExp)), true

	case "Query.muck_truck_preview_number_by_pk":
		if e.complexity.Query.MuckTruckPreviewNumberByPk == nil {
			break
		}

		args, err := ec.field_Query_muck_truck_preview_number_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MuckTruckPreviewNumberByPk(childComplexity, args["id"].(int64)), true

	case "Query.muck_truck_worker_id_card_orders":
		if e.complexity.Query.MuckTruckWorkerIDCardOrders == nil {
			break
		}

		args, err := ec.field_Query_muck_truck_worker_id_card_orders_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MuckTruckWorkerIDCardOrders(childComplexity, args["distinct_on"].([]model.MuckTruckWorkerIDCardOrdersSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckWorkerIDCardOrdersOrderBy), args["where"].(*model.MuckTruckWorkerIDCardOrdersBoolExp)), true

	case "Query.muck_truck_worker_id_card_orders_aggregate":
		if e.complexity.Query.MuckTruckWorkerIDCardOrdersAggregate == nil {
			break
		}

		args, err := ec.field_Query_muck_truck_worker_id_card_orders_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MuckTruckWorkerIDCardOrdersAggregate(childComplexity, args["distinct_on"].([]model.MuckTruckWorkerIDCardOrdersSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckWorkerIDCardOrdersOrderBy), args["where"].(*model.MuckTruckWorkerIDCardOrdersBoolExp)), true

	case "Query.muck_truck_worker_id_card_orders_by_pk":
		if e.complexity.Query.MuckTruckWorkerIDCardOrdersByPk == nil {
			break
		}

		args, err := ec.field_Query_muck_truck_worker_id_card_orders_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MuckTruckWorkerIDCardOrdersByPk(childComplexity, args["id"].(int64)), true

	case "Query.operating_vehicle_info":
		if e.complexity.Query.OperatingVehicleInfo == nil {
			break
		}

		args, err := ec.field_Query_operating_vehicle_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OperatingVehicleInfo(childComplexity, args["distinct_on"].([]model.OperatingVehicleInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.OperatingVehicleInfoOrderBy), args["where"].(*model.OperatingVehicleInfoBoolExp)), true

	case "Query.operating_vehicle_info_aggregate":
		if e.complexity.Query.OperatingVehicleInfoAggregate == nil {
			break
		}

		args, err := ec.field_Query_operating_vehicle_info_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OperatingVehicleInfoAggregate(childComplexity, args["distinct_on"].([]model.OperatingVehicleInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.OperatingVehicleInfoOrderBy), args["where"].(*model.OperatingVehicleInfoBoolExp)), true

	case "Query.operating_vehicle_info_by_pk":
		if e.complexity.Query.OperatingVehicleInfoByPk == nil {
			break
		}

		args, err := ec.field_Query_operating_vehicle_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OperatingVehicleInfoByPk(childComplexity, args["operating_vehicle_id"].(int64)), true

	case "Query.owner_info":
		if e.complexity.Query.OwnerInfo == nil {
			break
		}

		args, err := ec.field_Query_owner_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OwnerInfo(childComplexity, args["distinct_on"].([]model.OwnerInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.OwnerInfoOrderBy), args["where"].(*model.OwnerInfoBoolExp)), true

	case "Query.owner_info_aggregate":
		if e.complexity.Query.OwnerInfoAggregate == nil {
			break
		}

		args, err := ec.field_Query_owner_info_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OwnerInfoAggregate(childComplexity, args["distinct_on"].([]model.OwnerInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.OwnerInfoOrderBy), args["where"].(*model.OwnerInfoBoolExp)), true

	case "Query.owner_info_by_pk":
		if e.complexity.Query.OwnerInfoByPk == nil {
			break
		}

		args, err := ec.field_Query_owner_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OwnerInfoByPk(childComplexity, args["id"].(int64)), true

	case "Query.vehicle_info":
		if e.complexity.Query.VehicleInfo == nil {
			break
		}

		args, err := ec.field_Query_vehicle_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleInfo(childComplexity, args["distinct_on"].([]model.VehicleInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleInfoOrderBy), args["where"].(*model.VehicleInfoBoolExp)), true

	case "Query.vehicle_info_aggregate":
		if e.complexity.Query.VehicleInfoAggregate == nil {
			break
		}

		args, err := ec.field_Query_vehicle_info_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleInfoAggregate(childComplexity, args["distinct_on"].([]model.VehicleInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleInfoOrderBy), args["where"].(*model.VehicleInfoBoolExp)), true

	case "Query.vehicle_info_by_pk":
		if e.complexity.Query.VehicleInfoByPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleInfoByPk(childComplexity, args["id"].(int64), args["vehicle_id"].(string)), true

	case "Query.vehicle_info_change_log":
		if e.complexity.Query.VehicleInfoChangeLog == nil {
			break
		}

		args, err := ec.field_Query_vehicle_info_change_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleInfoChangeLog(childComplexity, args["distinct_on"].([]model.VehicleInfoChangeLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleInfoChangeLogOrderBy), args["where"].(*model.VehicleInfoChangeLogBoolExp)), true

	case "Query.vehicle_info_change_log_aggregate":
		if e.complexity.Query.VehicleInfoChangeLogAggregate == nil {
			break
		}

		args, err := ec.field_Query_vehicle_info_change_log_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleInfoChangeLogAggregate(childComplexity, args["distinct_on"].([]model.VehicleInfoChangeLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleInfoChangeLogOrderBy), args["where"].(*model.VehicleInfoChangeLogBoolExp)), true

	case "Query.vehicle_info_change_log_by_pk":
		if e.complexity.Query.VehicleInfoChangeLogByPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_info_change_log_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleInfoChangeLogByPk(childComplexity, args["id"].(int64), args["vehicle_info_change_id"].(string)), true

	case "Query.vehicle_supervision_photo":
		if e.complexity.Query.VehicleSupervisionPhoto == nil {
			break
		}

		args, err := ec.field_Query_vehicle_supervision_photo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleSupervisionPhoto(childComplexity, args["distinct_on"].([]model.VehicleSupervisionPhotoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleSupervisionPhotoOrderBy), args["where"].(*model.VehicleSupervisionPhotoBoolExp)), true

	case "Query.vehicle_supervision_photo_aggregate":
		if e.complexity.Query.VehicleSupervisionPhotoAggregate == nil {
			break
		}

		args, err := ec.field_Query_vehicle_supervision_photo_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleSupervisionPhotoAggregate(childComplexity, args["distinct_on"].([]model.VehicleSupervisionPhotoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleSupervisionPhotoOrderBy), args["where"].(*model.VehicleSupervisionPhotoBoolExp)), true

	case "Query.vehicle_supervision_photo_by_pk":
		if e.complexity.Query.VehicleSupervisionPhotoByPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_supervision_photo_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleSupervisionPhotoByPk(childComplexity, args["id"].(int64), args["supervision_photo_id"].(string)), true

	case "Subscription.JJ_VEHICLE":
		if e.complexity.Subscription.JjVehicle == nil {
			break
		}

		args, err := ec.field_Subscription_JJ_VEHICLE_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.JjVehicle(childComplexity, args["distinct_on"].([]model.JjVehicleSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.JjVehicleOrderBy), args["where"].(*model.JjVehicleBoolExp)), true

	case "Subscription.JJ_VEHICLE_aggregate":
		if e.complexity.Subscription.JjVehicleAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_JJ_VEHICLE_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.JjVehicleAggregate(childComplexity, args["distinct_on"].([]model.JjVehicleSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.JjVehicleOrderBy), args["where"].(*model.JjVehicleBoolExp)), true

	case "Subscription.JJ_VEHICLE_by_pk":
		if e.complexity.Subscription.JjVehicleByPk == nil {
			break
		}

		args, err := ec.field_Subscription_JJ_VEHICLE_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.JjVehicleByPk(childComplexity, args["id"].(int64)), true

	case "Subscription.muck_truck_category_info":
		if e.complexity.Subscription.MuckTruckCategoryInfo == nil {
			break
		}

		args, err := ec.field_Subscription_muck_truck_category_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.MuckTruckCategoryInfo(childComplexity, args["distinct_on"].([]model.MuckTruckCategoryInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckCategoryInfoOrderBy), args["where"].(*model.MuckTruckCategoryInfoBoolExp)), true

	case "Subscription.muck_truck_category_info_aggregate":
		if e.complexity.Subscription.MuckTruckCategoryInfoAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_muck_truck_category_info_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.MuckTruckCategoryInfoAggregate(childComplexity, args["distinct_on"].([]model.MuckTruckCategoryInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckCategoryInfoOrderBy), args["where"].(*model.MuckTruckCategoryInfoBoolExp)), true

	case "Subscription.muck_truck_category_info_by_pk":
		if e.complexity.Subscription.MuckTruckCategoryInfoByPk == nil {
			break
		}

		args, err := ec.field_Subscription_muck_truck_category_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.MuckTruckCategoryInfoByPk(childComplexity, args["id"].(int64)), true

	case "Subscription.muck_truck_info":
		if e.complexity.Subscription.MuckTruckInfo == nil {
			break
		}

		args, err := ec.field_Subscription_muck_truck_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.MuckTruckInfo(childComplexity, args["distinct_on"].([]model.MuckTruckInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckInfoOrderBy), args["where"].(*model.MuckTruckInfoBoolExp)), true

	case "Subscription.muck_truck_info_aggregate":
		if e.complexity.Subscription.MuckTruckInfoAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_muck_truck_info_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.MuckTruckInfoAggregate(childComplexity, args["distinct_on"].([]model.MuckTruckInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckInfoOrderBy), args["where"].(*model.MuckTruckInfoBoolExp)), true

	case "Subscription.muck_truck_info_by_pk":
		if e.complexity.Subscription.MuckTruckInfoByPk == nil {
			break
		}

		args, err := ec.field_Subscription_muck_truck_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.MuckTruckInfoByPk(childComplexity, args["muck_truck_id"].(int64)), true

	case "Subscription.muck_truck_preview_number":
		if e.complexity.Subscription.MuckTruckPreviewNumber == nil {
			break
		}

		args, err := ec.field_Subscription_muck_truck_preview_number_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.MuckTruckPreviewNumber(childComplexity, args["distinct_on"].([]model.MuckTruckPreviewNumberSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckPreviewNumberOrderBy), args["where"].(*model.MuckTruckPreviewNumberBoolExp)), true

	case "Subscription.muck_truck_preview_number_aggregate":
		if e.complexity.Subscription.MuckTruckPreviewNumberAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_muck_truck_preview_number_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.MuckTruckPreviewNumberAggregate(childComplexity, args["distinct_on"].([]model.MuckTruckPreviewNumberSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckPreviewNumberOrderBy), args["where"].(*model.MuckTruckPreviewNumberBoolExp)), true

	case "Subscription.muck_truck_preview_number_by_pk":
		if e.complexity.Subscription.MuckTruckPreviewNumberByPk == nil {
			break
		}

		args, err := ec.field_Subscription_muck_truck_preview_number_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.MuckTruckPreviewNumberByPk(childComplexity, args["id"].(int64)), true

	case "Subscription.muck_truck_worker_id_card_orders":
		if e.complexity.Subscription.MuckTruckWorkerIDCardOrders == nil {
			break
		}

		args, err := ec.field_Subscription_muck_truck_worker_id_card_orders_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.MuckTruckWorkerIDCardOrders(childComplexity, args["distinct_on"].([]model.MuckTruckWorkerIDCardOrdersSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckWorkerIDCardOrdersOrderBy), args["where"].(*model.MuckTruckWorkerIDCardOrdersBoolExp)), true

	case "Subscription.muck_truck_worker_id_card_orders_aggregate":
		if e.complexity.Subscription.MuckTruckWorkerIDCardOrdersAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_muck_truck_worker_id_card_orders_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.MuckTruckWorkerIDCardOrdersAggregate(childComplexity, args["distinct_on"].([]model.MuckTruckWorkerIDCardOrdersSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckWorkerIDCardOrdersOrderBy), args["where"].(*model.MuckTruckWorkerIDCardOrdersBoolExp)), true

	case "Subscription.muck_truck_worker_id_card_orders_by_pk":
		if e.complexity.Subscription.MuckTruckWorkerIDCardOrdersByPk == nil {
			break
		}

		args, err := ec.field_Subscription_muck_truck_worker_id_card_orders_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.MuckTruckWorkerIDCardOrdersByPk(childComplexity, args["id"].(int64)), true

	case "Subscription.operating_vehicle_info":
		if e.complexity.Subscription.OperatingVehicleInfo == nil {
			break
		}

		args, err := ec.field_Subscription_operating_vehicle_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.OperatingVehicleInfo(childComplexity, args["distinct_on"].([]model.OperatingVehicleInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.OperatingVehicleInfoOrderBy), args["where"].(*model.OperatingVehicleInfoBoolExp)), true

	case "Subscription.operating_vehicle_info_aggregate":
		if e.complexity.Subscription.OperatingVehicleInfoAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_operating_vehicle_info_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.OperatingVehicleInfoAggregate(childComplexity, args["distinct_on"].([]model.OperatingVehicleInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.OperatingVehicleInfoOrderBy), args["where"].(*model.OperatingVehicleInfoBoolExp)), true

	case "Subscription.operating_vehicle_info_by_pk":
		if e.complexity.Subscription.OperatingVehicleInfoByPk == nil {
			break
		}

		args, err := ec.field_Subscription_operating_vehicle_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.OperatingVehicleInfoByPk(childComplexity, args["operating_vehicle_id"].(int64)), true

	case "Subscription.owner_info":
		if e.complexity.Subscription.OwnerInfo == nil {
			break
		}

		args, err := ec.field_Subscription_owner_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.OwnerInfo(childComplexity, args["distinct_on"].([]model.OwnerInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.OwnerInfoOrderBy), args["where"].(*model.OwnerInfoBoolExp)), true

	case "Subscription.owner_info_aggregate":
		if e.complexity.Subscription.OwnerInfoAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_owner_info_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.OwnerInfoAggregate(childComplexity, args["distinct_on"].([]model.OwnerInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.OwnerInfoOrderBy), args["where"].(*model.OwnerInfoBoolExp)), true

	case "Subscription.owner_info_by_pk":
		if e.complexity.Subscription.OwnerInfoByPk == nil {
			break
		}

		args, err := ec.field_Subscription_owner_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.OwnerInfoByPk(childComplexity, args["id"].(int64)), true

	case "Subscription.vehicle_info":
		if e.complexity.Subscription.VehicleInfo == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleInfo(childComplexity, args["distinct_on"].([]model.VehicleInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleInfoOrderBy), args["where"].(*model.VehicleInfoBoolExp)), true

	case "Subscription.vehicle_info_aggregate":
		if e.complexity.Subscription.VehicleInfoAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_info_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleInfoAggregate(childComplexity, args["distinct_on"].([]model.VehicleInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleInfoOrderBy), args["where"].(*model.VehicleInfoBoolExp)), true

	case "Subscription.vehicle_info_by_pk":
		if e.complexity.Subscription.VehicleInfoByPk == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleInfoByPk(childComplexity, args["id"].(int64), args["vehicle_id"].(string)), true

	case "Subscription.vehicle_info_change_log":
		if e.complexity.Subscription.VehicleInfoChangeLog == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_info_change_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleInfoChangeLog(childComplexity, args["distinct_on"].([]model.VehicleInfoChangeLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleInfoChangeLogOrderBy), args["where"].(*model.VehicleInfoChangeLogBoolExp)), true

	case "Subscription.vehicle_info_change_log_aggregate":
		if e.complexity.Subscription.VehicleInfoChangeLogAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_info_change_log_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleInfoChangeLogAggregate(childComplexity, args["distinct_on"].([]model.VehicleInfoChangeLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleInfoChangeLogOrderBy), args["where"].(*model.VehicleInfoChangeLogBoolExp)), true

	case "Subscription.vehicle_info_change_log_by_pk":
		if e.complexity.Subscription.VehicleInfoChangeLogByPk == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_info_change_log_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleInfoChangeLogByPk(childComplexity, args["id"].(int64), args["vehicle_info_change_id"].(string)), true

	case "Subscription.vehicle_supervision_photo":
		if e.complexity.Subscription.VehicleSupervisionPhoto == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_supervision_photo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleSupervisionPhoto(childComplexity, args["distinct_on"].([]model.VehicleSupervisionPhotoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleSupervisionPhotoOrderBy), args["where"].(*model.VehicleSupervisionPhotoBoolExp)), true

	case "Subscription.vehicle_supervision_photo_aggregate":
		if e.complexity.Subscription.VehicleSupervisionPhotoAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_supervision_photo_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleSupervisionPhotoAggregate(childComplexity, args["distinct_on"].([]model.VehicleSupervisionPhotoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleSupervisionPhotoOrderBy), args["where"].(*model.VehicleSupervisionPhotoBoolExp)), true

	case "Subscription.vehicle_supervision_photo_by_pk":
		if e.complexity.Subscription.VehicleSupervisionPhotoByPk == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_supervision_photo_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleSupervisionPhotoByPk(childComplexity, args["id"].(int64), args["supervision_photo_id"].(string)), true

	case "muck_truck_category_info.actual_owner_contact_phone":
		if e.complexity.MuckTruckCategoryInfo.ActualOwnerContactPhone == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.ActualOwnerContactPhone(childComplexity), true

	case "muck_truck_category_info.actual_owner_id_number":
		if e.complexity.MuckTruckCategoryInfo.ActualOwnerIDNumber == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.ActualOwnerIDNumber(childComplexity), true

	case "muck_truck_category_info.actual_owner_id_photo":
		if e.complexity.MuckTruckCategoryInfo.ActualOwnerIDPhoto == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.ActualOwnerIDPhoto(childComplexity), true

	case "muck_truck_category_info.actual_owner_name":
		if e.complexity.MuckTruckCategoryInfo.ActualOwnerName == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.ActualOwnerName(childComplexity), true

	case "muck_truck_category_info.annual_inspection_expiration_time":
		if e.complexity.MuckTruckCategoryInfo.AnnualInspectionExpirationTime == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.AnnualInspectionExpirationTime(childComplexity), true

	case "muck_truck_category_info.apply_inspection_time":
		if e.complexity.MuckTruckCategoryInfo.ApplyInspectionTime == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.ApplyInspectionTime(childComplexity), true

	case "muck_truck_category_info.axes_number":
		if e.complexity.MuckTruckCategoryInfo.AxesNumber == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.AxesNumber(childComplexity), true

	case "muck_truck_category_info.blacklist_deadline":
		if e.complexity.MuckTruckCategoryInfo.BlacklistDeadline == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.BlacklistDeadline(childComplexity), true

	case "muck_truck_category_info.compulsory_insurance_policy_picture":
		if e.complexity.MuckTruckCategoryInfo.CompulsoryInsurancePolicyPicture == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.CompulsoryInsurancePolicyPicture(childComplexity), true

	case "muck_truck_category_info.create_at":
		if e.complexity.MuckTruckCategoryInfo.CreateAt == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.CreateAt(childComplexity), true

	case "muck_truck_category_info.create_by":
		if e.complexity.MuckTruckCategoryInfo.CreateBy == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.CreateBy(childComplexity), true

	case "muck_truck_category_info.delete_at":
		if e.complexity.MuckTruckCategoryInfo.DeleteAt == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.DeleteAt(childComplexity), true

	case "muck_truck_category_info.delete_by":
		if e.complexity.MuckTruckCategoryInfo.DeleteBy == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.DeleteBy(childComplexity), true

	case "muck_truck_category_info.driving_license_contact_phone":
		if e.complexity.MuckTruckCategoryInfo.DrivingLicenseContactPhone == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.DrivingLicenseContactPhone(childComplexity), true

	case "muck_truck_category_info.driving_license_id_number":
		if e.complexity.MuckTruckCategoryInfo.DrivingLicenseIDNumber == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.DrivingLicenseIDNumber(childComplexity), true

	case "muck_truck_category_info.driving_liscense_owner_id_photo":
		if e.complexity.MuckTruckCategoryInfo.DrivingLiscenseOwnerIDPhoto == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.DrivingLiscenseOwnerIDPhoto(childComplexity), true

	case "muck_truck_category_info.engine_number":
		if e.complexity.MuckTruckCategoryInfo.EngineNumber == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.EngineNumber(childComplexity), true

	case "muck_truck_category_info.id":
		if e.complexity.MuckTruckCategoryInfo.ID == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.ID(childComplexity), true

	case "muck_truck_category_info.illegal_notice_number_endorsement":
		if e.complexity.MuckTruckCategoryInfo.IllegalNoticeNumberEndorsement == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.IllegalNoticeNumberEndorsement(childComplexity), true

	case "muck_truck_category_info.illegal_number_endorsement":
		if e.complexity.MuckTruckCategoryInfo.IllegalNumberEndorsement == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.IllegalNumberEndorsement(childComplexity), true

	case "muck_truck_category_info.incident_number_endorsement":
		if e.complexity.MuckTruckCategoryInfo.IncidentNumberEndorsement == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.IncidentNumberEndorsement(childComplexity), true

	case "muck_truck_category_info.initial_registration_date":
		if e.complexity.MuckTruckCategoryInfo.InitialRegistrationDate == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.InitialRegistrationDate(childComplexity), true

	case "muck_truck_category_info.insurance_expiry_time":
		if e.complexity.MuckTruckCategoryInfo.InsuranceExpiryTime == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.InsuranceExpiryTime(childComplexity), true

	case "muck_truck_category_info.is_blacklist":
		if e.complexity.MuckTruckCategoryInfo.IsBlacklist == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.IsBlacklist(childComplexity), true

	case "muck_truck_category_info.is_delete":
		if e.complexity.MuckTruckCategoryInfo.IsDelete == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.IsDelete(childComplexity), true

	case "muck_truck_category_info.is_due_security_alarm_processing":
		if e.complexity.MuckTruckCategoryInfo.IsDueSecurityAlarmProcessing == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.IsDueSecurityAlarmProcessing(childComplexity), true

	case "muck_truck_category_info.is_first_register":
		if e.complexity.MuckTruckCategoryInfo.IsFirstRegister == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.IsFirstRegister(childComplexity), true

	case "muck_truck_category_info.is_muck_office_audit":
		if e.complexity.MuckTruckCategoryInfo.IsMuckOfficeAudit == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.IsMuckOfficeAudit(childComplexity), true

	case "muck_truck_category_info.is_send_sms":
		if e.complexity.MuckTruckCategoryInfo.IsSendSms == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.IsSendSms(childComplexity), true

	case "muck_truck_category_info.issue_date_of_quangong_number":
		if e.complexity.MuckTruckCategoryInfo.IssueDateOfQuangongNumber == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.IssueDateOfQuangongNumber(childComplexity), true

	case "muck_truck_category_info.owner_id_photo":
		if e.complexity.MuckTruckCategoryInfo.OwnerIDPhoto == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.OwnerIDPhoto(childComplexity), true

	case "muck_truck_category_info.processing_notes":
		if e.complexity.MuckTruckCategoryInfo.ProcessingNotes == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.ProcessingNotes(childComplexity), true

	case "muck_truck_category_info.processing_time":
		if e.complexity.MuckTruckCategoryInfo.ProcessingTime == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.ProcessingTime(childComplexity), true

	case "muck_truck_category_info.processor":
		if e.complexity.MuckTruckCategoryInfo.Processor == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.Processor(childComplexity), true

	case "muck_truck_category_info.review_notes":
		if e.complexity.MuckTruckCategoryInfo.ReviewNotes == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.ReviewNotes(childComplexity), true

	case "muck_truck_category_info.review_status":
		if e.complexity.MuckTruckCategoryInfo.ReviewStatus == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.ReviewStatus(childComplexity), true

	case "muck_truck_category_info.review_time":
		if e.complexity.MuckTruckCategoryInfo.ReviewTime == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.ReviewTime(childComplexity), true

	case "muck_truck_category_info.reviewer":
		if e.complexity.MuckTruckCategoryInfo.Reviewer == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.Reviewer(childComplexity), true

	case "muck_truck_category_info.secondary_maintenance_expiry_date":
		if e.complexity.MuckTruckCategoryInfo.SecondaryMaintenanceExpiryDate == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.SecondaryMaintenanceExpiryDate(childComplexity), true

	case "muck_truck_category_info.secondary_maintenance_location":
		if e.complexity.MuckTruckCategoryInfo.SecondaryMaintenanceLocation == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.SecondaryMaintenanceLocation(childComplexity), true

	case "muck_truck_category_info.signing_acceptance_application_time":
		if e.complexity.MuckTruckCategoryInfo.SigningAcceptanceApplicationTime == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.SigningAcceptanceApplicationTime(childComplexity), true

	case "muck_truck_category_info.third_party_insurance_coverage":
		if e.complexity.MuckTruckCategoryInfo.ThirdPartyInsuranceCoverage == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.ThirdPartyInsuranceCoverage(childComplexity), true

	case "muck_truck_category_info.third_party_insurance_expiry_time":
		if e.complexity.MuckTruckCategoryInfo.ThirdPartyInsuranceExpiryTime == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.ThirdPartyInsuranceExpiryTime(childComplexity), true

	case "muck_truck_category_info.third_party_insurance_policy_picture":
		if e.complexity.MuckTruckCategoryInfo.ThirdPartyInsurancePolicyPicture == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.ThirdPartyInsurancePolicyPicture(childComplexity), true

	case "muck_truck_category_info.total_mass":
		if e.complexity.MuckTruckCategoryInfo.TotalMass == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.TotalMass(childComplexity), true

	case "muck_truck_category_info.update_at":
		if e.complexity.MuckTruckCategoryInfo.UpdateAt == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.UpdateAt(childComplexity), true

	case "muck_truck_category_info.update_by":
		if e.complexity.MuckTruckCategoryInfo.UpdateBy == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.UpdateBy(childComplexity), true

	case "muck_truck_category_info.vehicle_description":
		if e.complexity.MuckTruckCategoryInfo.VehicleDescription == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.VehicleDescription(childComplexity), true

	case "muck_truck_category_info.vehicle_id":
		if e.complexity.MuckTruckCategoryInfo.VehicleID == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.VehicleID(childComplexity), true

	case "muck_truck_category_info.vehicle_nature":
		if e.complexity.MuckTruckCategoryInfo.VehicleNature == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.VehicleNature(childComplexity), true

	case "muck_truck_category_info.vehicle_operating_certificate_number":
		if e.complexity.MuckTruckCategoryInfo.VehicleOperatingCertificateNumber == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.VehicleOperatingCertificateNumber(childComplexity), true

	case "muck_truck_category_info.vehicle_operating_certificate_photo":
		if e.complexity.MuckTruckCategoryInfo.VehicleOperatingCertificatePhoto == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.VehicleOperatingCertificatePhoto(childComplexity), true

	case "muck_truck_category_info.vehicle_picture":
		if e.complexity.MuckTruckCategoryInfo.VehiclePicture == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfo.VehiclePicture(childComplexity), true

	case "muck_truck_category_info_aggregate.aggregate":
		if e.complexity.MuckTruckCategoryInfoAggregate.Aggregate == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoAggregate.Aggregate(childComplexity), true

	case "muck_truck_category_info_aggregate.nodes":
		if e.complexity.MuckTruckCategoryInfoAggregate.Nodes == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoAggregate.Nodes(childComplexity), true

	case "muck_truck_category_info_aggregate_fields.avg":
		if e.complexity.MuckTruckCategoryInfoAggregateFields.Avg == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoAggregateFields.Avg(childComplexity), true

	case "muck_truck_category_info_aggregate_fields.count":
		if e.complexity.MuckTruckCategoryInfoAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_muck_truck_category_info_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MuckTruckCategoryInfoAggregateFields.Count(childComplexity, args["columns"].([]model.MuckTruckCategoryInfoSelectColumn), args["distinct"].(*bool)), true

	case "muck_truck_category_info_aggregate_fields.max":
		if e.complexity.MuckTruckCategoryInfoAggregateFields.Max == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoAggregateFields.Max(childComplexity), true

	case "muck_truck_category_info_aggregate_fields.min":
		if e.complexity.MuckTruckCategoryInfoAggregateFields.Min == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoAggregateFields.Min(childComplexity), true

	case "muck_truck_category_info_aggregate_fields.stddev":
		if e.complexity.MuckTruckCategoryInfoAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoAggregateFields.Stddev(childComplexity), true

	case "muck_truck_category_info_aggregate_fields.stddev_pop":
		if e.complexity.MuckTruckCategoryInfoAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoAggregateFields.StddevPop(childComplexity), true

	case "muck_truck_category_info_aggregate_fields.stddev_samp":
		if e.complexity.MuckTruckCategoryInfoAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoAggregateFields.StddevSamp(childComplexity), true

	case "muck_truck_category_info_aggregate_fields.sum":
		if e.complexity.MuckTruckCategoryInfoAggregateFields.Sum == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoAggregateFields.Sum(childComplexity), true

	case "muck_truck_category_info_aggregate_fields.var_pop":
		if e.complexity.MuckTruckCategoryInfoAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoAggregateFields.VarPop(childComplexity), true

	case "muck_truck_category_info_aggregate_fields.var_samp":
		if e.complexity.MuckTruckCategoryInfoAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoAggregateFields.VarSamp(childComplexity), true

	case "muck_truck_category_info_aggregate_fields.variance":
		if e.complexity.MuckTruckCategoryInfoAggregateFields.Variance == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoAggregateFields.Variance(childComplexity), true

	case "muck_truck_category_info_avg_fields.axes_number":
		if e.complexity.MuckTruckCategoryInfoAvgFields.AxesNumber == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoAvgFields.AxesNumber(childComplexity), true

	case "muck_truck_category_info_avg_fields.id":
		if e.complexity.MuckTruckCategoryInfoAvgFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoAvgFields.ID(childComplexity), true

	case "muck_truck_category_info_avg_fields.total_mass":
		if e.complexity.MuckTruckCategoryInfoAvgFields.TotalMass == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoAvgFields.TotalMass(childComplexity), true

	case "muck_truck_category_info_avg_fields.vehicle_nature":
		if e.complexity.MuckTruckCategoryInfoAvgFields.VehicleNature == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoAvgFields.VehicleNature(childComplexity), true

	case "muck_truck_category_info_max_fields.actual_owner_contact_phone":
		if e.complexity.MuckTruckCategoryInfoMaxFields.ActualOwnerContactPhone == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.ActualOwnerContactPhone(childComplexity), true

	case "muck_truck_category_info_max_fields.actual_owner_id_number":
		if e.complexity.MuckTruckCategoryInfoMaxFields.ActualOwnerIDNumber == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.ActualOwnerIDNumber(childComplexity), true

	case "muck_truck_category_info_max_fields.actual_owner_id_photo":
		if e.complexity.MuckTruckCategoryInfoMaxFields.ActualOwnerIDPhoto == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.ActualOwnerIDPhoto(childComplexity), true

	case "muck_truck_category_info_max_fields.actual_owner_name":
		if e.complexity.MuckTruckCategoryInfoMaxFields.ActualOwnerName == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.ActualOwnerName(childComplexity), true

	case "muck_truck_category_info_max_fields.annual_inspection_expiration_time":
		if e.complexity.MuckTruckCategoryInfoMaxFields.AnnualInspectionExpirationTime == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.AnnualInspectionExpirationTime(childComplexity), true

	case "muck_truck_category_info_max_fields.apply_inspection_time":
		if e.complexity.MuckTruckCategoryInfoMaxFields.ApplyInspectionTime == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.ApplyInspectionTime(childComplexity), true

	case "muck_truck_category_info_max_fields.axes_number":
		if e.complexity.MuckTruckCategoryInfoMaxFields.AxesNumber == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.AxesNumber(childComplexity), true

	case "muck_truck_category_info_max_fields.blacklist_deadline":
		if e.complexity.MuckTruckCategoryInfoMaxFields.BlacklistDeadline == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.BlacklistDeadline(childComplexity), true

	case "muck_truck_category_info_max_fields.compulsory_insurance_policy_picture":
		if e.complexity.MuckTruckCategoryInfoMaxFields.CompulsoryInsurancePolicyPicture == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.CompulsoryInsurancePolicyPicture(childComplexity), true

	case "muck_truck_category_info_max_fields.create_at":
		if e.complexity.MuckTruckCategoryInfoMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.CreateAt(childComplexity), true

	case "muck_truck_category_info_max_fields.create_by":
		if e.complexity.MuckTruckCategoryInfoMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.CreateBy(childComplexity), true

	case "muck_truck_category_info_max_fields.delete_at":
		if e.complexity.MuckTruckCategoryInfoMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.DeleteAt(childComplexity), true

	case "muck_truck_category_info_max_fields.delete_by":
		if e.complexity.MuckTruckCategoryInfoMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.DeleteBy(childComplexity), true

	case "muck_truck_category_info_max_fields.driving_license_contact_phone":
		if e.complexity.MuckTruckCategoryInfoMaxFields.DrivingLicenseContactPhone == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.DrivingLicenseContactPhone(childComplexity), true

	case "muck_truck_category_info_max_fields.driving_license_id_number":
		if e.complexity.MuckTruckCategoryInfoMaxFields.DrivingLicenseIDNumber == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.DrivingLicenseIDNumber(childComplexity), true

	case "muck_truck_category_info_max_fields.driving_liscense_owner_id_photo":
		if e.complexity.MuckTruckCategoryInfoMaxFields.DrivingLiscenseOwnerIDPhoto == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.DrivingLiscenseOwnerIDPhoto(childComplexity), true

	case "muck_truck_category_info_max_fields.engine_number":
		if e.complexity.MuckTruckCategoryInfoMaxFields.EngineNumber == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.EngineNumber(childComplexity), true

	case "muck_truck_category_info_max_fields.id":
		if e.complexity.MuckTruckCategoryInfoMaxFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.ID(childComplexity), true

	case "muck_truck_category_info_max_fields.illegal_notice_number_endorsement":
		if e.complexity.MuckTruckCategoryInfoMaxFields.IllegalNoticeNumberEndorsement == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.IllegalNoticeNumberEndorsement(childComplexity), true

	case "muck_truck_category_info_max_fields.illegal_number_endorsement":
		if e.complexity.MuckTruckCategoryInfoMaxFields.IllegalNumberEndorsement == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.IllegalNumberEndorsement(childComplexity), true

	case "muck_truck_category_info_max_fields.incident_number_endorsement":
		if e.complexity.MuckTruckCategoryInfoMaxFields.IncidentNumberEndorsement == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.IncidentNumberEndorsement(childComplexity), true

	case "muck_truck_category_info_max_fields.initial_registration_date":
		if e.complexity.MuckTruckCategoryInfoMaxFields.InitialRegistrationDate == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.InitialRegistrationDate(childComplexity), true

	case "muck_truck_category_info_max_fields.insurance_expiry_time":
		if e.complexity.MuckTruckCategoryInfoMaxFields.InsuranceExpiryTime == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.InsuranceExpiryTime(childComplexity), true

	case "muck_truck_category_info_max_fields.issue_date_of_quangong_number":
		if e.complexity.MuckTruckCategoryInfoMaxFields.IssueDateOfQuangongNumber == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.IssueDateOfQuangongNumber(childComplexity), true

	case "muck_truck_category_info_max_fields.owner_id_photo":
		if e.complexity.MuckTruckCategoryInfoMaxFields.OwnerIDPhoto == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.OwnerIDPhoto(childComplexity), true

	case "muck_truck_category_info_max_fields.processing_notes":
		if e.complexity.MuckTruckCategoryInfoMaxFields.ProcessingNotes == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.ProcessingNotes(childComplexity), true

	case "muck_truck_category_info_max_fields.processing_time":
		if e.complexity.MuckTruckCategoryInfoMaxFields.ProcessingTime == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.ProcessingTime(childComplexity), true

	case "muck_truck_category_info_max_fields.processor":
		if e.complexity.MuckTruckCategoryInfoMaxFields.Processor == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.Processor(childComplexity), true

	case "muck_truck_category_info_max_fields.review_notes":
		if e.complexity.MuckTruckCategoryInfoMaxFields.ReviewNotes == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.ReviewNotes(childComplexity), true

	case "muck_truck_category_info_max_fields.review_status":
		if e.complexity.MuckTruckCategoryInfoMaxFields.ReviewStatus == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.ReviewStatus(childComplexity), true

	case "muck_truck_category_info_max_fields.review_time":
		if e.complexity.MuckTruckCategoryInfoMaxFields.ReviewTime == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.ReviewTime(childComplexity), true

	case "muck_truck_category_info_max_fields.reviewer":
		if e.complexity.MuckTruckCategoryInfoMaxFields.Reviewer == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.Reviewer(childComplexity), true

	case "muck_truck_category_info_max_fields.secondary_maintenance_expiry_date":
		if e.complexity.MuckTruckCategoryInfoMaxFields.SecondaryMaintenanceExpiryDate == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.SecondaryMaintenanceExpiryDate(childComplexity), true

	case "muck_truck_category_info_max_fields.secondary_maintenance_location":
		if e.complexity.MuckTruckCategoryInfoMaxFields.SecondaryMaintenanceLocation == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.SecondaryMaintenanceLocation(childComplexity), true

	case "muck_truck_category_info_max_fields.signing_acceptance_application_time":
		if e.complexity.MuckTruckCategoryInfoMaxFields.SigningAcceptanceApplicationTime == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.SigningAcceptanceApplicationTime(childComplexity), true

	case "muck_truck_category_info_max_fields.third_party_insurance_coverage":
		if e.complexity.MuckTruckCategoryInfoMaxFields.ThirdPartyInsuranceCoverage == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.ThirdPartyInsuranceCoverage(childComplexity), true

	case "muck_truck_category_info_max_fields.third_party_insurance_expiry_time":
		if e.complexity.MuckTruckCategoryInfoMaxFields.ThirdPartyInsuranceExpiryTime == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.ThirdPartyInsuranceExpiryTime(childComplexity), true

	case "muck_truck_category_info_max_fields.third_party_insurance_policy_picture":
		if e.complexity.MuckTruckCategoryInfoMaxFields.ThirdPartyInsurancePolicyPicture == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.ThirdPartyInsurancePolicyPicture(childComplexity), true

	case "muck_truck_category_info_max_fields.total_mass":
		if e.complexity.MuckTruckCategoryInfoMaxFields.TotalMass == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.TotalMass(childComplexity), true

	case "muck_truck_category_info_max_fields.update_at":
		if e.complexity.MuckTruckCategoryInfoMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.UpdateAt(childComplexity), true

	case "muck_truck_category_info_max_fields.update_by":
		if e.complexity.MuckTruckCategoryInfoMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.UpdateBy(childComplexity), true

	case "muck_truck_category_info_max_fields.vehicle_description":
		if e.complexity.MuckTruckCategoryInfoMaxFields.VehicleDescription == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.VehicleDescription(childComplexity), true

	case "muck_truck_category_info_max_fields.vehicle_id":
		if e.complexity.MuckTruckCategoryInfoMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.VehicleID(childComplexity), true

	case "muck_truck_category_info_max_fields.vehicle_nature":
		if e.complexity.MuckTruckCategoryInfoMaxFields.VehicleNature == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.VehicleNature(childComplexity), true

	case "muck_truck_category_info_max_fields.vehicle_operating_certificate_number":
		if e.complexity.MuckTruckCategoryInfoMaxFields.VehicleOperatingCertificateNumber == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.VehicleOperatingCertificateNumber(childComplexity), true

	case "muck_truck_category_info_max_fields.vehicle_operating_certificate_photo":
		if e.complexity.MuckTruckCategoryInfoMaxFields.VehicleOperatingCertificatePhoto == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.VehicleOperatingCertificatePhoto(childComplexity), true

	case "muck_truck_category_info_max_fields.vehicle_picture":
		if e.complexity.MuckTruckCategoryInfoMaxFields.VehiclePicture == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMaxFields.VehiclePicture(childComplexity), true

	case "muck_truck_category_info_min_fields.actual_owner_contact_phone":
		if e.complexity.MuckTruckCategoryInfoMinFields.ActualOwnerContactPhone == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.ActualOwnerContactPhone(childComplexity), true

	case "muck_truck_category_info_min_fields.actual_owner_id_number":
		if e.complexity.MuckTruckCategoryInfoMinFields.ActualOwnerIDNumber == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.ActualOwnerIDNumber(childComplexity), true

	case "muck_truck_category_info_min_fields.actual_owner_id_photo":
		if e.complexity.MuckTruckCategoryInfoMinFields.ActualOwnerIDPhoto == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.ActualOwnerIDPhoto(childComplexity), true

	case "muck_truck_category_info_min_fields.actual_owner_name":
		if e.complexity.MuckTruckCategoryInfoMinFields.ActualOwnerName == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.ActualOwnerName(childComplexity), true

	case "muck_truck_category_info_min_fields.annual_inspection_expiration_time":
		if e.complexity.MuckTruckCategoryInfoMinFields.AnnualInspectionExpirationTime == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.AnnualInspectionExpirationTime(childComplexity), true

	case "muck_truck_category_info_min_fields.apply_inspection_time":
		if e.complexity.MuckTruckCategoryInfoMinFields.ApplyInspectionTime == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.ApplyInspectionTime(childComplexity), true

	case "muck_truck_category_info_min_fields.axes_number":
		if e.complexity.MuckTruckCategoryInfoMinFields.AxesNumber == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.AxesNumber(childComplexity), true

	case "muck_truck_category_info_min_fields.blacklist_deadline":
		if e.complexity.MuckTruckCategoryInfoMinFields.BlacklistDeadline == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.BlacklistDeadline(childComplexity), true

	case "muck_truck_category_info_min_fields.compulsory_insurance_policy_picture":
		if e.complexity.MuckTruckCategoryInfoMinFields.CompulsoryInsurancePolicyPicture == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.CompulsoryInsurancePolicyPicture(childComplexity), true

	case "muck_truck_category_info_min_fields.create_at":
		if e.complexity.MuckTruckCategoryInfoMinFields.CreateAt == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.CreateAt(childComplexity), true

	case "muck_truck_category_info_min_fields.create_by":
		if e.complexity.MuckTruckCategoryInfoMinFields.CreateBy == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.CreateBy(childComplexity), true

	case "muck_truck_category_info_min_fields.delete_at":
		if e.complexity.MuckTruckCategoryInfoMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.DeleteAt(childComplexity), true

	case "muck_truck_category_info_min_fields.delete_by":
		if e.complexity.MuckTruckCategoryInfoMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.DeleteBy(childComplexity), true

	case "muck_truck_category_info_min_fields.driving_license_contact_phone":
		if e.complexity.MuckTruckCategoryInfoMinFields.DrivingLicenseContactPhone == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.DrivingLicenseContactPhone(childComplexity), true

	case "muck_truck_category_info_min_fields.driving_license_id_number":
		if e.complexity.MuckTruckCategoryInfoMinFields.DrivingLicenseIDNumber == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.DrivingLicenseIDNumber(childComplexity), true

	case "muck_truck_category_info_min_fields.driving_liscense_owner_id_photo":
		if e.complexity.MuckTruckCategoryInfoMinFields.DrivingLiscenseOwnerIDPhoto == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.DrivingLiscenseOwnerIDPhoto(childComplexity), true

	case "muck_truck_category_info_min_fields.engine_number":
		if e.complexity.MuckTruckCategoryInfoMinFields.EngineNumber == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.EngineNumber(childComplexity), true

	case "muck_truck_category_info_min_fields.id":
		if e.complexity.MuckTruckCategoryInfoMinFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.ID(childComplexity), true

	case "muck_truck_category_info_min_fields.illegal_notice_number_endorsement":
		if e.complexity.MuckTruckCategoryInfoMinFields.IllegalNoticeNumberEndorsement == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.IllegalNoticeNumberEndorsement(childComplexity), true

	case "muck_truck_category_info_min_fields.illegal_number_endorsement":
		if e.complexity.MuckTruckCategoryInfoMinFields.IllegalNumberEndorsement == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.IllegalNumberEndorsement(childComplexity), true

	case "muck_truck_category_info_min_fields.incident_number_endorsement":
		if e.complexity.MuckTruckCategoryInfoMinFields.IncidentNumberEndorsement == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.IncidentNumberEndorsement(childComplexity), true

	case "muck_truck_category_info_min_fields.initial_registration_date":
		if e.complexity.MuckTruckCategoryInfoMinFields.InitialRegistrationDate == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.InitialRegistrationDate(childComplexity), true

	case "muck_truck_category_info_min_fields.insurance_expiry_time":
		if e.complexity.MuckTruckCategoryInfoMinFields.InsuranceExpiryTime == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.InsuranceExpiryTime(childComplexity), true

	case "muck_truck_category_info_min_fields.issue_date_of_quangong_number":
		if e.complexity.MuckTruckCategoryInfoMinFields.IssueDateOfQuangongNumber == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.IssueDateOfQuangongNumber(childComplexity), true

	case "muck_truck_category_info_min_fields.owner_id_photo":
		if e.complexity.MuckTruckCategoryInfoMinFields.OwnerIDPhoto == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.OwnerIDPhoto(childComplexity), true

	case "muck_truck_category_info_min_fields.processing_notes":
		if e.complexity.MuckTruckCategoryInfoMinFields.ProcessingNotes == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.ProcessingNotes(childComplexity), true

	case "muck_truck_category_info_min_fields.processing_time":
		if e.complexity.MuckTruckCategoryInfoMinFields.ProcessingTime == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.ProcessingTime(childComplexity), true

	case "muck_truck_category_info_min_fields.processor":
		if e.complexity.MuckTruckCategoryInfoMinFields.Processor == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.Processor(childComplexity), true

	case "muck_truck_category_info_min_fields.review_notes":
		if e.complexity.MuckTruckCategoryInfoMinFields.ReviewNotes == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.ReviewNotes(childComplexity), true

	case "muck_truck_category_info_min_fields.review_status":
		if e.complexity.MuckTruckCategoryInfoMinFields.ReviewStatus == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.ReviewStatus(childComplexity), true

	case "muck_truck_category_info_min_fields.review_time":
		if e.complexity.MuckTruckCategoryInfoMinFields.ReviewTime == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.ReviewTime(childComplexity), true

	case "muck_truck_category_info_min_fields.reviewer":
		if e.complexity.MuckTruckCategoryInfoMinFields.Reviewer == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.Reviewer(childComplexity), true

	case "muck_truck_category_info_min_fields.secondary_maintenance_expiry_date":
		if e.complexity.MuckTruckCategoryInfoMinFields.SecondaryMaintenanceExpiryDate == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.SecondaryMaintenanceExpiryDate(childComplexity), true

	case "muck_truck_category_info_min_fields.secondary_maintenance_location":
		if e.complexity.MuckTruckCategoryInfoMinFields.SecondaryMaintenanceLocation == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.SecondaryMaintenanceLocation(childComplexity), true

	case "muck_truck_category_info_min_fields.signing_acceptance_application_time":
		if e.complexity.MuckTruckCategoryInfoMinFields.SigningAcceptanceApplicationTime == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.SigningAcceptanceApplicationTime(childComplexity), true

	case "muck_truck_category_info_min_fields.third_party_insurance_coverage":
		if e.complexity.MuckTruckCategoryInfoMinFields.ThirdPartyInsuranceCoverage == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.ThirdPartyInsuranceCoverage(childComplexity), true

	case "muck_truck_category_info_min_fields.third_party_insurance_expiry_time":
		if e.complexity.MuckTruckCategoryInfoMinFields.ThirdPartyInsuranceExpiryTime == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.ThirdPartyInsuranceExpiryTime(childComplexity), true

	case "muck_truck_category_info_min_fields.third_party_insurance_policy_picture":
		if e.complexity.MuckTruckCategoryInfoMinFields.ThirdPartyInsurancePolicyPicture == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.ThirdPartyInsurancePolicyPicture(childComplexity), true

	case "muck_truck_category_info_min_fields.total_mass":
		if e.complexity.MuckTruckCategoryInfoMinFields.TotalMass == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.TotalMass(childComplexity), true

	case "muck_truck_category_info_min_fields.update_at":
		if e.complexity.MuckTruckCategoryInfoMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.UpdateAt(childComplexity), true

	case "muck_truck_category_info_min_fields.update_by":
		if e.complexity.MuckTruckCategoryInfoMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.UpdateBy(childComplexity), true

	case "muck_truck_category_info_min_fields.vehicle_description":
		if e.complexity.MuckTruckCategoryInfoMinFields.VehicleDescription == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.VehicleDescription(childComplexity), true

	case "muck_truck_category_info_min_fields.vehicle_id":
		if e.complexity.MuckTruckCategoryInfoMinFields.VehicleID == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.VehicleID(childComplexity), true

	case "muck_truck_category_info_min_fields.vehicle_nature":
		if e.complexity.MuckTruckCategoryInfoMinFields.VehicleNature == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.VehicleNature(childComplexity), true

	case "muck_truck_category_info_min_fields.vehicle_operating_certificate_number":
		if e.complexity.MuckTruckCategoryInfoMinFields.VehicleOperatingCertificateNumber == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.VehicleOperatingCertificateNumber(childComplexity), true

	case "muck_truck_category_info_min_fields.vehicle_operating_certificate_photo":
		if e.complexity.MuckTruckCategoryInfoMinFields.VehicleOperatingCertificatePhoto == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.VehicleOperatingCertificatePhoto(childComplexity), true

	case "muck_truck_category_info_min_fields.vehicle_picture":
		if e.complexity.MuckTruckCategoryInfoMinFields.VehiclePicture == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMinFields.VehiclePicture(childComplexity), true

	case "muck_truck_category_info_mutation_response.affected_rows":
		if e.complexity.MuckTruckCategoryInfoMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMutationResponse.AffectedRows(childComplexity), true

	case "muck_truck_category_info_mutation_response.returning":
		if e.complexity.MuckTruckCategoryInfoMutationResponse.Returning == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoMutationResponse.Returning(childComplexity), true

	case "muck_truck_category_info_stddev_fields.axes_number":
		if e.complexity.MuckTruckCategoryInfoStddevFields.AxesNumber == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoStddevFields.AxesNumber(childComplexity), true

	case "muck_truck_category_info_stddev_fields.id":
		if e.complexity.MuckTruckCategoryInfoStddevFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoStddevFields.ID(childComplexity), true

	case "muck_truck_category_info_stddev_fields.total_mass":
		if e.complexity.MuckTruckCategoryInfoStddevFields.TotalMass == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoStddevFields.TotalMass(childComplexity), true

	case "muck_truck_category_info_stddev_fields.vehicle_nature":
		if e.complexity.MuckTruckCategoryInfoStddevFields.VehicleNature == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoStddevFields.VehicleNature(childComplexity), true

	case "muck_truck_category_info_stddev_pop_fields.axes_number":
		if e.complexity.MuckTruckCategoryInfoStddevPopFields.AxesNumber == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoStddevPopFields.AxesNumber(childComplexity), true

	case "muck_truck_category_info_stddev_pop_fields.id":
		if e.complexity.MuckTruckCategoryInfoStddevPopFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoStddevPopFields.ID(childComplexity), true

	case "muck_truck_category_info_stddev_pop_fields.total_mass":
		if e.complexity.MuckTruckCategoryInfoStddevPopFields.TotalMass == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoStddevPopFields.TotalMass(childComplexity), true

	case "muck_truck_category_info_stddev_pop_fields.vehicle_nature":
		if e.complexity.MuckTruckCategoryInfoStddevPopFields.VehicleNature == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoStddevPopFields.VehicleNature(childComplexity), true

	case "muck_truck_category_info_stddev_samp_fields.axes_number":
		if e.complexity.MuckTruckCategoryInfoStddevSampFields.AxesNumber == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoStddevSampFields.AxesNumber(childComplexity), true

	case "muck_truck_category_info_stddev_samp_fields.id":
		if e.complexity.MuckTruckCategoryInfoStddevSampFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoStddevSampFields.ID(childComplexity), true

	case "muck_truck_category_info_stddev_samp_fields.total_mass":
		if e.complexity.MuckTruckCategoryInfoStddevSampFields.TotalMass == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoStddevSampFields.TotalMass(childComplexity), true

	case "muck_truck_category_info_stddev_samp_fields.vehicle_nature":
		if e.complexity.MuckTruckCategoryInfoStddevSampFields.VehicleNature == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoStddevSampFields.VehicleNature(childComplexity), true

	case "muck_truck_category_info_sum_fields.axes_number":
		if e.complexity.MuckTruckCategoryInfoSumFields.AxesNumber == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoSumFields.AxesNumber(childComplexity), true

	case "muck_truck_category_info_sum_fields.id":
		if e.complexity.MuckTruckCategoryInfoSumFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoSumFields.ID(childComplexity), true

	case "muck_truck_category_info_sum_fields.total_mass":
		if e.complexity.MuckTruckCategoryInfoSumFields.TotalMass == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoSumFields.TotalMass(childComplexity), true

	case "muck_truck_category_info_sum_fields.vehicle_nature":
		if e.complexity.MuckTruckCategoryInfoSumFields.VehicleNature == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoSumFields.VehicleNature(childComplexity), true

	case "muck_truck_category_info_var_pop_fields.axes_number":
		if e.complexity.MuckTruckCategoryInfoVarPopFields.AxesNumber == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoVarPopFields.AxesNumber(childComplexity), true

	case "muck_truck_category_info_var_pop_fields.id":
		if e.complexity.MuckTruckCategoryInfoVarPopFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoVarPopFields.ID(childComplexity), true

	case "muck_truck_category_info_var_pop_fields.total_mass":
		if e.complexity.MuckTruckCategoryInfoVarPopFields.TotalMass == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoVarPopFields.TotalMass(childComplexity), true

	case "muck_truck_category_info_var_pop_fields.vehicle_nature":
		if e.complexity.MuckTruckCategoryInfoVarPopFields.VehicleNature == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoVarPopFields.VehicleNature(childComplexity), true

	case "muck_truck_category_info_var_samp_fields.axes_number":
		if e.complexity.MuckTruckCategoryInfoVarSampFields.AxesNumber == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoVarSampFields.AxesNumber(childComplexity), true

	case "muck_truck_category_info_var_samp_fields.id":
		if e.complexity.MuckTruckCategoryInfoVarSampFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoVarSampFields.ID(childComplexity), true

	case "muck_truck_category_info_var_samp_fields.total_mass":
		if e.complexity.MuckTruckCategoryInfoVarSampFields.TotalMass == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoVarSampFields.TotalMass(childComplexity), true

	case "muck_truck_category_info_var_samp_fields.vehicle_nature":
		if e.complexity.MuckTruckCategoryInfoVarSampFields.VehicleNature == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoVarSampFields.VehicleNature(childComplexity), true

	case "muck_truck_category_info_variance_fields.axes_number":
		if e.complexity.MuckTruckCategoryInfoVarianceFields.AxesNumber == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoVarianceFields.AxesNumber(childComplexity), true

	case "muck_truck_category_info_variance_fields.id":
		if e.complexity.MuckTruckCategoryInfoVarianceFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoVarianceFields.ID(childComplexity), true

	case "muck_truck_category_info_variance_fields.total_mass":
		if e.complexity.MuckTruckCategoryInfoVarianceFields.TotalMass == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoVarianceFields.TotalMass(childComplexity), true

	case "muck_truck_category_info_variance_fields.vehicle_nature":
		if e.complexity.MuckTruckCategoryInfoVarianceFields.VehicleNature == nil {
			break
		}

		return e.complexity.MuckTruckCategoryInfoVarianceFields.VehicleNature(childComplexity), true

	case "muck_truck_info.area_id":
		if e.complexity.MuckTruckInfo.AreaID == nil {
			break
		}

		return e.complexity.MuckTruckInfo.AreaID(childComplexity), true

	case "muck_truck_info.create_at":
		if e.complexity.MuckTruckInfo.CreateAt == nil {
			break
		}

		return e.complexity.MuckTruckInfo.CreateAt(childComplexity), true

	case "muck_truck_info.create_by":
		if e.complexity.MuckTruckInfo.CreateBy == nil {
			break
		}

		return e.complexity.MuckTruckInfo.CreateBy(childComplexity), true

	case "muck_truck_info.delete_at":
		if e.complexity.MuckTruckInfo.DeleteAt == nil {
			break
		}

		return e.complexity.MuckTruckInfo.DeleteAt(childComplexity), true

	case "muck_truck_info.delete_by":
		if e.complexity.MuckTruckInfo.DeleteBy == nil {
			break
		}

		return e.complexity.MuckTruckInfo.DeleteBy(childComplexity), true

	case "muck_truck_info.expiry_date":
		if e.complexity.MuckTruckInfo.ExpiryDate == nil {
			break
		}

		return e.complexity.MuckTruckInfo.ExpiryDate(childComplexity), true

	case "muck_truck_info.fake_ip":
		if e.complexity.MuckTruckInfo.FakeIP == nil {
			break
		}

		return e.complexity.MuckTruckInfo.FakeIP(childComplexity), true

	case "muck_truck_info.is_reserve_library":
		if e.complexity.MuckTruckInfo.IsReserveLibrary == nil {
			break
		}

		return e.complexity.MuckTruckInfo.IsReserveLibrary(childComplexity), true

	case "muck_truck_info.load_category":
		if e.complexity.MuckTruckInfo.LoadCategory == nil {
			break
		}

		return e.complexity.MuckTruckInfo.LoadCategory(childComplexity), true

	case "muck_truck_info.mobile_card_location":
		if e.complexity.MuckTruckInfo.MobileCardLocation == nil {
			break
		}

		return e.complexity.MuckTruckInfo.MobileCardLocation(childComplexity), true

	case "muck_truck_info.muck_truck_id":
		if e.complexity.MuckTruckInfo.MuckTruckID == nil {
			break
		}

		return e.complexity.MuckTruckInfo.MuckTruckID(childComplexity), true

	case "muck_truck_info.muck_truck_type":
		if e.complexity.MuckTruckInfo.MuckTruckType == nil {
			break
		}

		return e.complexity.MuckTruckInfo.MuckTruckType(childComplexity), true

	case "muck_truck_info.registration_date":
		if e.complexity.MuckTruckInfo.RegistrationDate == nil {
			break
		}

		return e.complexity.MuckTruckInfo.RegistrationDate(childComplexity), true

	case "muck_truck_info.self_number":
		if e.complexity.MuckTruckInfo.SelfNumber == nil {
			break
		}

		return e.complexity.MuckTruckInfo.SelfNumber(childComplexity), true

	case "muck_truck_info.server_id":
		if e.complexity.MuckTruckInfo.ServerID == nil {
			break
		}

		return e.complexity.MuckTruckInfo.ServerID(childComplexity), true

	case "muck_truck_info.sim_card_number":
		if e.complexity.MuckTruckInfo.SimCardNumber == nil {
			break
		}

		return e.complexity.MuckTruckInfo.SimCardNumber(childComplexity), true

	case "muck_truck_info.update_at":
		if e.complexity.MuckTruckInfo.UpdateAt == nil {
			break
		}

		return e.complexity.MuckTruckInfo.UpdateAt(childComplexity), true

	case "muck_truck_info.update_by":
		if e.complexity.MuckTruckInfo.UpdateBy == nil {
			break
		}

		return e.complexity.MuckTruckInfo.UpdateBy(childComplexity), true

	case "muck_truck_info.vehicle_id":
		if e.complexity.MuckTruckInfo.VehicleID == nil {
			break
		}

		return e.complexity.MuckTruckInfo.VehicleID(childComplexity), true

	case "muck_truck_info_aggregate.aggregate":
		if e.complexity.MuckTruckInfoAggregate.Aggregate == nil {
			break
		}

		return e.complexity.MuckTruckInfoAggregate.Aggregate(childComplexity), true

	case "muck_truck_info_aggregate.nodes":
		if e.complexity.MuckTruckInfoAggregate.Nodes == nil {
			break
		}

		return e.complexity.MuckTruckInfoAggregate.Nodes(childComplexity), true

	case "muck_truck_info_aggregate_fields.avg":
		if e.complexity.MuckTruckInfoAggregateFields.Avg == nil {
			break
		}

		return e.complexity.MuckTruckInfoAggregateFields.Avg(childComplexity), true

	case "muck_truck_info_aggregate_fields.count":
		if e.complexity.MuckTruckInfoAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_muck_truck_info_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MuckTruckInfoAggregateFields.Count(childComplexity, args["columns"].([]model.MuckTruckInfoSelectColumn), args["distinct"].(*bool)), true

	case "muck_truck_info_aggregate_fields.max":
		if e.complexity.MuckTruckInfoAggregateFields.Max == nil {
			break
		}

		return e.complexity.MuckTruckInfoAggregateFields.Max(childComplexity), true

	case "muck_truck_info_aggregate_fields.min":
		if e.complexity.MuckTruckInfoAggregateFields.Min == nil {
			break
		}

		return e.complexity.MuckTruckInfoAggregateFields.Min(childComplexity), true

	case "muck_truck_info_aggregate_fields.stddev":
		if e.complexity.MuckTruckInfoAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.MuckTruckInfoAggregateFields.Stddev(childComplexity), true

	case "muck_truck_info_aggregate_fields.stddev_pop":
		if e.complexity.MuckTruckInfoAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.MuckTruckInfoAggregateFields.StddevPop(childComplexity), true

	case "muck_truck_info_aggregate_fields.stddev_samp":
		if e.complexity.MuckTruckInfoAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.MuckTruckInfoAggregateFields.StddevSamp(childComplexity), true

	case "muck_truck_info_aggregate_fields.sum":
		if e.complexity.MuckTruckInfoAggregateFields.Sum == nil {
			break
		}

		return e.complexity.MuckTruckInfoAggregateFields.Sum(childComplexity), true

	case "muck_truck_info_aggregate_fields.var_pop":
		if e.complexity.MuckTruckInfoAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.MuckTruckInfoAggregateFields.VarPop(childComplexity), true

	case "muck_truck_info_aggregate_fields.var_samp":
		if e.complexity.MuckTruckInfoAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.MuckTruckInfoAggregateFields.VarSamp(childComplexity), true

	case "muck_truck_info_aggregate_fields.variance":
		if e.complexity.MuckTruckInfoAggregateFields.Variance == nil {
			break
		}

		return e.complexity.MuckTruckInfoAggregateFields.Variance(childComplexity), true

	case "muck_truck_info_avg_fields.area_id":
		if e.complexity.MuckTruckInfoAvgFields.AreaID == nil {
			break
		}

		return e.complexity.MuckTruckInfoAvgFields.AreaID(childComplexity), true

	case "muck_truck_info_avg_fields.muck_truck_id":
		if e.complexity.MuckTruckInfoAvgFields.MuckTruckID == nil {
			break
		}

		return e.complexity.MuckTruckInfoAvgFields.MuckTruckID(childComplexity), true

	case "muck_truck_info_avg_fields.muck_truck_type":
		if e.complexity.MuckTruckInfoAvgFields.MuckTruckType == nil {
			break
		}

		return e.complexity.MuckTruckInfoAvgFields.MuckTruckType(childComplexity), true

	case "muck_truck_info_avg_fields.server_id":
		if e.complexity.MuckTruckInfoAvgFields.ServerID == nil {
			break
		}

		return e.complexity.MuckTruckInfoAvgFields.ServerID(childComplexity), true

	case "muck_truck_info_max_fields.area_id":
		if e.complexity.MuckTruckInfoMaxFields.AreaID == nil {
			break
		}

		return e.complexity.MuckTruckInfoMaxFields.AreaID(childComplexity), true

	case "muck_truck_info_max_fields.create_at":
		if e.complexity.MuckTruckInfoMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.MuckTruckInfoMaxFields.CreateAt(childComplexity), true

	case "muck_truck_info_max_fields.create_by":
		if e.complexity.MuckTruckInfoMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.MuckTruckInfoMaxFields.CreateBy(childComplexity), true

	case "muck_truck_info_max_fields.delete_at":
		if e.complexity.MuckTruckInfoMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.MuckTruckInfoMaxFields.DeleteAt(childComplexity), true

	case "muck_truck_info_max_fields.delete_by":
		if e.complexity.MuckTruckInfoMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.MuckTruckInfoMaxFields.DeleteBy(childComplexity), true

	case "muck_truck_info_max_fields.expiry_date":
		if e.complexity.MuckTruckInfoMaxFields.ExpiryDate == nil {
			break
		}

		return e.complexity.MuckTruckInfoMaxFields.ExpiryDate(childComplexity), true

	case "muck_truck_info_max_fields.fake_ip":
		if e.complexity.MuckTruckInfoMaxFields.FakeIP == nil {
			break
		}

		return e.complexity.MuckTruckInfoMaxFields.FakeIP(childComplexity), true

	case "muck_truck_info_max_fields.load_category":
		if e.complexity.MuckTruckInfoMaxFields.LoadCategory == nil {
			break
		}

		return e.complexity.MuckTruckInfoMaxFields.LoadCategory(childComplexity), true

	case "muck_truck_info_max_fields.mobile_card_location":
		if e.complexity.MuckTruckInfoMaxFields.MobileCardLocation == nil {
			break
		}

		return e.complexity.MuckTruckInfoMaxFields.MobileCardLocation(childComplexity), true

	case "muck_truck_info_max_fields.muck_truck_id":
		if e.complexity.MuckTruckInfoMaxFields.MuckTruckID == nil {
			break
		}

		return e.complexity.MuckTruckInfoMaxFields.MuckTruckID(childComplexity), true

	case "muck_truck_info_max_fields.muck_truck_type":
		if e.complexity.MuckTruckInfoMaxFields.MuckTruckType == nil {
			break
		}

		return e.complexity.MuckTruckInfoMaxFields.MuckTruckType(childComplexity), true

	case "muck_truck_info_max_fields.registration_date":
		if e.complexity.MuckTruckInfoMaxFields.RegistrationDate == nil {
			break
		}

		return e.complexity.MuckTruckInfoMaxFields.RegistrationDate(childComplexity), true

	case "muck_truck_info_max_fields.self_number":
		if e.complexity.MuckTruckInfoMaxFields.SelfNumber == nil {
			break
		}

		return e.complexity.MuckTruckInfoMaxFields.SelfNumber(childComplexity), true

	case "muck_truck_info_max_fields.server_id":
		if e.complexity.MuckTruckInfoMaxFields.ServerID == nil {
			break
		}

		return e.complexity.MuckTruckInfoMaxFields.ServerID(childComplexity), true

	case "muck_truck_info_max_fields.sim_card_number":
		if e.complexity.MuckTruckInfoMaxFields.SimCardNumber == nil {
			break
		}

		return e.complexity.MuckTruckInfoMaxFields.SimCardNumber(childComplexity), true

	case "muck_truck_info_max_fields.update_at":
		if e.complexity.MuckTruckInfoMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.MuckTruckInfoMaxFields.UpdateAt(childComplexity), true

	case "muck_truck_info_max_fields.update_by":
		if e.complexity.MuckTruckInfoMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.MuckTruckInfoMaxFields.UpdateBy(childComplexity), true

	case "muck_truck_info_max_fields.vehicle_id":
		if e.complexity.MuckTruckInfoMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.MuckTruckInfoMaxFields.VehicleID(childComplexity), true

	case "muck_truck_info_min_fields.area_id":
		if e.complexity.MuckTruckInfoMinFields.AreaID == nil {
			break
		}

		return e.complexity.MuckTruckInfoMinFields.AreaID(childComplexity), true

	case "muck_truck_info_min_fields.create_at":
		if e.complexity.MuckTruckInfoMinFields.CreateAt == nil {
			break
		}

		return e.complexity.MuckTruckInfoMinFields.CreateAt(childComplexity), true

	case "muck_truck_info_min_fields.create_by":
		if e.complexity.MuckTruckInfoMinFields.CreateBy == nil {
			break
		}

		return e.complexity.MuckTruckInfoMinFields.CreateBy(childComplexity), true

	case "muck_truck_info_min_fields.delete_at":
		if e.complexity.MuckTruckInfoMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.MuckTruckInfoMinFields.DeleteAt(childComplexity), true

	case "muck_truck_info_min_fields.delete_by":
		if e.complexity.MuckTruckInfoMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.MuckTruckInfoMinFields.DeleteBy(childComplexity), true

	case "muck_truck_info_min_fields.expiry_date":
		if e.complexity.MuckTruckInfoMinFields.ExpiryDate == nil {
			break
		}

		return e.complexity.MuckTruckInfoMinFields.ExpiryDate(childComplexity), true

	case "muck_truck_info_min_fields.fake_ip":
		if e.complexity.MuckTruckInfoMinFields.FakeIP == nil {
			break
		}

		return e.complexity.MuckTruckInfoMinFields.FakeIP(childComplexity), true

	case "muck_truck_info_min_fields.load_category":
		if e.complexity.MuckTruckInfoMinFields.LoadCategory == nil {
			break
		}

		return e.complexity.MuckTruckInfoMinFields.LoadCategory(childComplexity), true

	case "muck_truck_info_min_fields.mobile_card_location":
		if e.complexity.MuckTruckInfoMinFields.MobileCardLocation == nil {
			break
		}

		return e.complexity.MuckTruckInfoMinFields.MobileCardLocation(childComplexity), true

	case "muck_truck_info_min_fields.muck_truck_id":
		if e.complexity.MuckTruckInfoMinFields.MuckTruckID == nil {
			break
		}

		return e.complexity.MuckTruckInfoMinFields.MuckTruckID(childComplexity), true

	case "muck_truck_info_min_fields.muck_truck_type":
		if e.complexity.MuckTruckInfoMinFields.MuckTruckType == nil {
			break
		}

		return e.complexity.MuckTruckInfoMinFields.MuckTruckType(childComplexity), true

	case "muck_truck_info_min_fields.registration_date":
		if e.complexity.MuckTruckInfoMinFields.RegistrationDate == nil {
			break
		}

		return e.complexity.MuckTruckInfoMinFields.RegistrationDate(childComplexity), true

	case "muck_truck_info_min_fields.self_number":
		if e.complexity.MuckTruckInfoMinFields.SelfNumber == nil {
			break
		}

		return e.complexity.MuckTruckInfoMinFields.SelfNumber(childComplexity), true

	case "muck_truck_info_min_fields.server_id":
		if e.complexity.MuckTruckInfoMinFields.ServerID == nil {
			break
		}

		return e.complexity.MuckTruckInfoMinFields.ServerID(childComplexity), true

	case "muck_truck_info_min_fields.sim_card_number":
		if e.complexity.MuckTruckInfoMinFields.SimCardNumber == nil {
			break
		}

		return e.complexity.MuckTruckInfoMinFields.SimCardNumber(childComplexity), true

	case "muck_truck_info_min_fields.update_at":
		if e.complexity.MuckTruckInfoMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.MuckTruckInfoMinFields.UpdateAt(childComplexity), true

	case "muck_truck_info_min_fields.update_by":
		if e.complexity.MuckTruckInfoMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.MuckTruckInfoMinFields.UpdateBy(childComplexity), true

	case "muck_truck_info_min_fields.vehicle_id":
		if e.complexity.MuckTruckInfoMinFields.VehicleID == nil {
			break
		}

		return e.complexity.MuckTruckInfoMinFields.VehicleID(childComplexity), true

	case "muck_truck_info_mutation_response.affected_rows":
		if e.complexity.MuckTruckInfoMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.MuckTruckInfoMutationResponse.AffectedRows(childComplexity), true

	case "muck_truck_info_mutation_response.returning":
		if e.complexity.MuckTruckInfoMutationResponse.Returning == nil {
			break
		}

		return e.complexity.MuckTruckInfoMutationResponse.Returning(childComplexity), true

	case "muck_truck_info_stddev_fields.area_id":
		if e.complexity.MuckTruckInfoStddevFields.AreaID == nil {
			break
		}

		return e.complexity.MuckTruckInfoStddevFields.AreaID(childComplexity), true

	case "muck_truck_info_stddev_fields.muck_truck_id":
		if e.complexity.MuckTruckInfoStddevFields.MuckTruckID == nil {
			break
		}

		return e.complexity.MuckTruckInfoStddevFields.MuckTruckID(childComplexity), true

	case "muck_truck_info_stddev_fields.muck_truck_type":
		if e.complexity.MuckTruckInfoStddevFields.MuckTruckType == nil {
			break
		}

		return e.complexity.MuckTruckInfoStddevFields.MuckTruckType(childComplexity), true

	case "muck_truck_info_stddev_fields.server_id":
		if e.complexity.MuckTruckInfoStddevFields.ServerID == nil {
			break
		}

		return e.complexity.MuckTruckInfoStddevFields.ServerID(childComplexity), true

	case "muck_truck_info_stddev_pop_fields.area_id":
		if e.complexity.MuckTruckInfoStddevPopFields.AreaID == nil {
			break
		}

		return e.complexity.MuckTruckInfoStddevPopFields.AreaID(childComplexity), true

	case "muck_truck_info_stddev_pop_fields.muck_truck_id":
		if e.complexity.MuckTruckInfoStddevPopFields.MuckTruckID == nil {
			break
		}

		return e.complexity.MuckTruckInfoStddevPopFields.MuckTruckID(childComplexity), true

	case "muck_truck_info_stddev_pop_fields.muck_truck_type":
		if e.complexity.MuckTruckInfoStddevPopFields.MuckTruckType == nil {
			break
		}

		return e.complexity.MuckTruckInfoStddevPopFields.MuckTruckType(childComplexity), true

	case "muck_truck_info_stddev_pop_fields.server_id":
		if e.complexity.MuckTruckInfoStddevPopFields.ServerID == nil {
			break
		}

		return e.complexity.MuckTruckInfoStddevPopFields.ServerID(childComplexity), true

	case "muck_truck_info_stddev_samp_fields.area_id":
		if e.complexity.MuckTruckInfoStddevSampFields.AreaID == nil {
			break
		}

		return e.complexity.MuckTruckInfoStddevSampFields.AreaID(childComplexity), true

	case "muck_truck_info_stddev_samp_fields.muck_truck_id":
		if e.complexity.MuckTruckInfoStddevSampFields.MuckTruckID == nil {
			break
		}

		return e.complexity.MuckTruckInfoStddevSampFields.MuckTruckID(childComplexity), true

	case "muck_truck_info_stddev_samp_fields.muck_truck_type":
		if e.complexity.MuckTruckInfoStddevSampFields.MuckTruckType == nil {
			break
		}

		return e.complexity.MuckTruckInfoStddevSampFields.MuckTruckType(childComplexity), true

	case "muck_truck_info_stddev_samp_fields.server_id":
		if e.complexity.MuckTruckInfoStddevSampFields.ServerID == nil {
			break
		}

		return e.complexity.MuckTruckInfoStddevSampFields.ServerID(childComplexity), true

	case "muck_truck_info_sum_fields.area_id":
		if e.complexity.MuckTruckInfoSumFields.AreaID == nil {
			break
		}

		return e.complexity.MuckTruckInfoSumFields.AreaID(childComplexity), true

	case "muck_truck_info_sum_fields.muck_truck_id":
		if e.complexity.MuckTruckInfoSumFields.MuckTruckID == nil {
			break
		}

		return e.complexity.MuckTruckInfoSumFields.MuckTruckID(childComplexity), true

	case "muck_truck_info_sum_fields.muck_truck_type":
		if e.complexity.MuckTruckInfoSumFields.MuckTruckType == nil {
			break
		}

		return e.complexity.MuckTruckInfoSumFields.MuckTruckType(childComplexity), true

	case "muck_truck_info_sum_fields.server_id":
		if e.complexity.MuckTruckInfoSumFields.ServerID == nil {
			break
		}

		return e.complexity.MuckTruckInfoSumFields.ServerID(childComplexity), true

	case "muck_truck_info_var_pop_fields.area_id":
		if e.complexity.MuckTruckInfoVarPopFields.AreaID == nil {
			break
		}

		return e.complexity.MuckTruckInfoVarPopFields.AreaID(childComplexity), true

	case "muck_truck_info_var_pop_fields.muck_truck_id":
		if e.complexity.MuckTruckInfoVarPopFields.MuckTruckID == nil {
			break
		}

		return e.complexity.MuckTruckInfoVarPopFields.MuckTruckID(childComplexity), true

	case "muck_truck_info_var_pop_fields.muck_truck_type":
		if e.complexity.MuckTruckInfoVarPopFields.MuckTruckType == nil {
			break
		}

		return e.complexity.MuckTruckInfoVarPopFields.MuckTruckType(childComplexity), true

	case "muck_truck_info_var_pop_fields.server_id":
		if e.complexity.MuckTruckInfoVarPopFields.ServerID == nil {
			break
		}

		return e.complexity.MuckTruckInfoVarPopFields.ServerID(childComplexity), true

	case "muck_truck_info_var_samp_fields.area_id":
		if e.complexity.MuckTruckInfoVarSampFields.AreaID == nil {
			break
		}

		return e.complexity.MuckTruckInfoVarSampFields.AreaID(childComplexity), true

	case "muck_truck_info_var_samp_fields.muck_truck_id":
		if e.complexity.MuckTruckInfoVarSampFields.MuckTruckID == nil {
			break
		}

		return e.complexity.MuckTruckInfoVarSampFields.MuckTruckID(childComplexity), true

	case "muck_truck_info_var_samp_fields.muck_truck_type":
		if e.complexity.MuckTruckInfoVarSampFields.MuckTruckType == nil {
			break
		}

		return e.complexity.MuckTruckInfoVarSampFields.MuckTruckType(childComplexity), true

	case "muck_truck_info_var_samp_fields.server_id":
		if e.complexity.MuckTruckInfoVarSampFields.ServerID == nil {
			break
		}

		return e.complexity.MuckTruckInfoVarSampFields.ServerID(childComplexity), true

	case "muck_truck_info_variance_fields.area_id":
		if e.complexity.MuckTruckInfoVarianceFields.AreaID == nil {
			break
		}

		return e.complexity.MuckTruckInfoVarianceFields.AreaID(childComplexity), true

	case "muck_truck_info_variance_fields.muck_truck_id":
		if e.complexity.MuckTruckInfoVarianceFields.MuckTruckID == nil {
			break
		}

		return e.complexity.MuckTruckInfoVarianceFields.MuckTruckID(childComplexity), true

	case "muck_truck_info_variance_fields.muck_truck_type":
		if e.complexity.MuckTruckInfoVarianceFields.MuckTruckType == nil {
			break
		}

		return e.complexity.MuckTruckInfoVarianceFields.MuckTruckType(childComplexity), true

	case "muck_truck_info_variance_fields.server_id":
		if e.complexity.MuckTruckInfoVarianceFields.ServerID == nil {
			break
		}

		return e.complexity.MuckTruckInfoVarianceFields.ServerID(childComplexity), true

	case "muck_truck_preview_number.confirm_status":
		if e.complexity.MuckTruckPreviewNumber.ConfirmStatus == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.ConfirmStatus(childComplexity), true

	case "muck_truck_preview_number.confirm_time":
		if e.complexity.MuckTruckPreviewNumber.ConfirmTime == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.ConfirmTime(childComplexity), true

	case "muck_truck_preview_number.confirmor":
		if e.complexity.MuckTruckPreviewNumber.Confirmor == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.Confirmor(childComplexity), true

	case "muck_truck_preview_number.contact_person":
		if e.complexity.MuckTruckPreviewNumber.ContactPerson == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.ContactPerson(childComplexity), true

	case "muck_truck_preview_number.contact_phone":
		if e.complexity.MuckTruckPreviewNumber.ContactPhone == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.ContactPhone(childComplexity), true

	case "muck_truck_preview_number.create_by":
		if e.complexity.MuckTruckPreviewNumber.CreateBy == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.CreateBy(childComplexity), true

	case "muck_truck_preview_number.delete_at":
		if e.complexity.MuckTruckPreviewNumber.DeleteAt == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.DeleteAt(childComplexity), true

	case "muck_truck_preview_number.delete_by":
		if e.complexity.MuckTruckPreviewNumber.DeleteBy == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.DeleteBy(childComplexity), true

	case "muck_truck_preview_number.front_license_plate":
		if e.complexity.MuckTruckPreviewNumber.FrontLicensePlate == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.FrontLicensePlate(childComplexity), true

	case "muck_truck_preview_number.id":
		if e.complexity.MuckTruckPreviewNumber.ID == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.ID(childComplexity), true

	case "muck_truck_preview_number.initial_registration_date":
		if e.complexity.MuckTruckPreviewNumber.InitialRegistrationDate == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.InitialRegistrationDate(childComplexity), true

	case "muck_truck_preview_number.is_delete":
		if e.complexity.MuckTruckPreviewNumber.IsDelete == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.IsDelete(childComplexity), true

	case "muck_truck_preview_number.is_register_sale_order":
		if e.complexity.MuckTruckPreviewNumber.IsRegisterSaleOrder == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.IsRegisterSaleOrder(childComplexity), true

	case "muck_truck_preview_number.is_review_automatically":
		if e.complexity.MuckTruckPreviewNumber.IsReviewAutomatically == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.IsReviewAutomatically(childComplexity), true

	case "muck_truck_preview_number.marking_time":
		if e.complexity.MuckTruckPreviewNumber.MarkingTime == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.MarkingTime(childComplexity), true

	case "muck_truck_preview_number.original_number":
		if e.complexity.MuckTruckPreviewNumber.OriginalNumber == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.OriginalNumber(childComplexity), true

	case "muck_truck_preview_number.production_status":
		if e.complexity.MuckTruckPreviewNumber.ProductionStatus == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.ProductionStatus(childComplexity), true

	case "muck_truck_preview_number.production_time":
		if e.complexity.MuckTruckPreviewNumber.ProductionTime == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.ProductionTime(childComplexity), true

	case "muck_truck_preview_number.production_times":
		if e.complexity.MuckTruckPreviewNumber.ProductionTimes == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.ProductionTimes(childComplexity), true

	case "muck_truck_preview_number.rear_license_plate":
		if e.complexity.MuckTruckPreviewNumber.RearLicensePlate == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.RearLicensePlate(childComplexity), true

	case "muck_truck_preview_number.registration_time":
		if e.complexity.MuckTruckPreviewNumber.RegistrationTime == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.RegistrationTime(childComplexity), true

	case "muck_truck_preview_number.remarks":
		if e.complexity.MuckTruckPreviewNumber.Remarks == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.Remarks(childComplexity), true

	case "muck_truck_preview_number.side_license_plate":
		if e.complexity.MuckTruckPreviewNumber.SideLicensePlate == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.SideLicensePlate(childComplexity), true

	case "muck_truck_preview_number.svn_number":
		if e.complexity.MuckTruckPreviewNumber.SvnNumber == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.SvnNumber(childComplexity), true

	case "muck_truck_preview_number.unlawful_violation_number":
		if e.complexity.MuckTruckPreviewNumber.UnlawfulViolationNumber == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.UnlawfulViolationNumber(childComplexity), true

	case "muck_truck_preview_number.update_at":
		if e.complexity.MuckTruckPreviewNumber.UpdateAt == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.UpdateAt(childComplexity), true

	case "muck_truck_preview_number.update_by":
		if e.complexity.MuckTruckPreviewNumber.UpdateBy == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.UpdateBy(childComplexity), true

	case "muck_truck_preview_number.vehicle_id":
		if e.complexity.MuckTruckPreviewNumber.VehicleID == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.VehicleID(childComplexity), true

	case "muck_truck_preview_number.work_number_plate_color":
		if e.complexity.MuckTruckPreviewNumber.WorkNumberPlateColor == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumber.WorkNumberPlateColor(childComplexity), true

	case "muck_truck_preview_number_aggregate.aggregate":
		if e.complexity.MuckTruckPreviewNumberAggregate.Aggregate == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberAggregate.Aggregate(childComplexity), true

	case "muck_truck_preview_number_aggregate.nodes":
		if e.complexity.MuckTruckPreviewNumberAggregate.Nodes == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberAggregate.Nodes(childComplexity), true

	case "muck_truck_preview_number_aggregate_fields.avg":
		if e.complexity.MuckTruckPreviewNumberAggregateFields.Avg == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberAggregateFields.Avg(childComplexity), true

	case "muck_truck_preview_number_aggregate_fields.count":
		if e.complexity.MuckTruckPreviewNumberAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_muck_truck_preview_number_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MuckTruckPreviewNumberAggregateFields.Count(childComplexity, args["columns"].([]model.MuckTruckPreviewNumberSelectColumn), args["distinct"].(*bool)), true

	case "muck_truck_preview_number_aggregate_fields.max":
		if e.complexity.MuckTruckPreviewNumberAggregateFields.Max == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberAggregateFields.Max(childComplexity), true

	case "muck_truck_preview_number_aggregate_fields.min":
		if e.complexity.MuckTruckPreviewNumberAggregateFields.Min == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberAggregateFields.Min(childComplexity), true

	case "muck_truck_preview_number_aggregate_fields.stddev":
		if e.complexity.MuckTruckPreviewNumberAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberAggregateFields.Stddev(childComplexity), true

	case "muck_truck_preview_number_aggregate_fields.stddev_pop":
		if e.complexity.MuckTruckPreviewNumberAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberAggregateFields.StddevPop(childComplexity), true

	case "muck_truck_preview_number_aggregate_fields.stddev_samp":
		if e.complexity.MuckTruckPreviewNumberAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberAggregateFields.StddevSamp(childComplexity), true

	case "muck_truck_preview_number_aggregate_fields.sum":
		if e.complexity.MuckTruckPreviewNumberAggregateFields.Sum == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberAggregateFields.Sum(childComplexity), true

	case "muck_truck_preview_number_aggregate_fields.var_pop":
		if e.complexity.MuckTruckPreviewNumberAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberAggregateFields.VarPop(childComplexity), true

	case "muck_truck_preview_number_aggregate_fields.var_samp":
		if e.complexity.MuckTruckPreviewNumberAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberAggregateFields.VarSamp(childComplexity), true

	case "muck_truck_preview_number_aggregate_fields.variance":
		if e.complexity.MuckTruckPreviewNumberAggregateFields.Variance == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberAggregateFields.Variance(childComplexity), true

	case "muck_truck_preview_number_avg_fields.confirm_status":
		if e.complexity.MuckTruckPreviewNumberAvgFields.ConfirmStatus == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberAvgFields.ConfirmStatus(childComplexity), true

	case "muck_truck_preview_number_avg_fields.id":
		if e.complexity.MuckTruckPreviewNumberAvgFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberAvgFields.ID(childComplexity), true

	case "muck_truck_preview_number_avg_fields.production_status":
		if e.complexity.MuckTruckPreviewNumberAvgFields.ProductionStatus == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberAvgFields.ProductionStatus(childComplexity), true

	case "muck_truck_preview_number_avg_fields.production_times":
		if e.complexity.MuckTruckPreviewNumberAvgFields.ProductionTimes == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberAvgFields.ProductionTimes(childComplexity), true

	case "muck_truck_preview_number_avg_fields.unlawful_violation_number":
		if e.complexity.MuckTruckPreviewNumberAvgFields.UnlawfulViolationNumber == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberAvgFields.UnlawfulViolationNumber(childComplexity), true

	case "muck_truck_preview_number_max_fields.confirm_status":
		if e.complexity.MuckTruckPreviewNumberMaxFields.ConfirmStatus == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMaxFields.ConfirmStatus(childComplexity), true

	case "muck_truck_preview_number_max_fields.confirm_time":
		if e.complexity.MuckTruckPreviewNumberMaxFields.ConfirmTime == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMaxFields.ConfirmTime(childComplexity), true

	case "muck_truck_preview_number_max_fields.confirmor":
		if e.complexity.MuckTruckPreviewNumberMaxFields.Confirmor == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMaxFields.Confirmor(childComplexity), true

	case "muck_truck_preview_number_max_fields.contact_person":
		if e.complexity.MuckTruckPreviewNumberMaxFields.ContactPerson == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMaxFields.ContactPerson(childComplexity), true

	case "muck_truck_preview_number_max_fields.contact_phone":
		if e.complexity.MuckTruckPreviewNumberMaxFields.ContactPhone == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMaxFields.ContactPhone(childComplexity), true

	case "muck_truck_preview_number_max_fields.create_by":
		if e.complexity.MuckTruckPreviewNumberMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMaxFields.CreateBy(childComplexity), true

	case "muck_truck_preview_number_max_fields.delete_at":
		if e.complexity.MuckTruckPreviewNumberMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMaxFields.DeleteAt(childComplexity), true

	case "muck_truck_preview_number_max_fields.delete_by":
		if e.complexity.MuckTruckPreviewNumberMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMaxFields.DeleteBy(childComplexity), true

	case "muck_truck_preview_number_max_fields.front_license_plate":
		if e.complexity.MuckTruckPreviewNumberMaxFields.FrontLicensePlate == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMaxFields.FrontLicensePlate(childComplexity), true

	case "muck_truck_preview_number_max_fields.id":
		if e.complexity.MuckTruckPreviewNumberMaxFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMaxFields.ID(childComplexity), true

	case "muck_truck_preview_number_max_fields.initial_registration_date":
		if e.complexity.MuckTruckPreviewNumberMaxFields.InitialRegistrationDate == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMaxFields.InitialRegistrationDate(childComplexity), true

	case "muck_truck_preview_number_max_fields.marking_time":
		if e.complexity.MuckTruckPreviewNumberMaxFields.MarkingTime == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMaxFields.MarkingTime(childComplexity), true

	case "muck_truck_preview_number_max_fields.original_number":
		if e.complexity.MuckTruckPreviewNumberMaxFields.OriginalNumber == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMaxFields.OriginalNumber(childComplexity), true

	case "muck_truck_preview_number_max_fields.production_status":
		if e.complexity.MuckTruckPreviewNumberMaxFields.ProductionStatus == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMaxFields.ProductionStatus(childComplexity), true

	case "muck_truck_preview_number_max_fields.production_time":
		if e.complexity.MuckTruckPreviewNumberMaxFields.ProductionTime == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMaxFields.ProductionTime(childComplexity), true

	case "muck_truck_preview_number_max_fields.production_times":
		if e.complexity.MuckTruckPreviewNumberMaxFields.ProductionTimes == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMaxFields.ProductionTimes(childComplexity), true

	case "muck_truck_preview_number_max_fields.rear_license_plate":
		if e.complexity.MuckTruckPreviewNumberMaxFields.RearLicensePlate == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMaxFields.RearLicensePlate(childComplexity), true

	case "muck_truck_preview_number_max_fields.registration_time":
		if e.complexity.MuckTruckPreviewNumberMaxFields.RegistrationTime == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMaxFields.RegistrationTime(childComplexity), true

	case "muck_truck_preview_number_max_fields.remarks":
		if e.complexity.MuckTruckPreviewNumberMaxFields.Remarks == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMaxFields.Remarks(childComplexity), true

	case "muck_truck_preview_number_max_fields.side_license_plate":
		if e.complexity.MuckTruckPreviewNumberMaxFields.SideLicensePlate == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMaxFields.SideLicensePlate(childComplexity), true

	case "muck_truck_preview_number_max_fields.svn_number":
		if e.complexity.MuckTruckPreviewNumberMaxFields.SvnNumber == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMaxFields.SvnNumber(childComplexity), true

	case "muck_truck_preview_number_max_fields.unlawful_violation_number":
		if e.complexity.MuckTruckPreviewNumberMaxFields.UnlawfulViolationNumber == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMaxFields.UnlawfulViolationNumber(childComplexity), true

	case "muck_truck_preview_number_max_fields.update_at":
		if e.complexity.MuckTruckPreviewNumberMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMaxFields.UpdateAt(childComplexity), true

	case "muck_truck_preview_number_max_fields.update_by":
		if e.complexity.MuckTruckPreviewNumberMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMaxFields.UpdateBy(childComplexity), true

	case "muck_truck_preview_number_max_fields.vehicle_id":
		if e.complexity.MuckTruckPreviewNumberMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMaxFields.VehicleID(childComplexity), true

	case "muck_truck_preview_number_max_fields.work_number_plate_color":
		if e.complexity.MuckTruckPreviewNumberMaxFields.WorkNumberPlateColor == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMaxFields.WorkNumberPlateColor(childComplexity), true

	case "muck_truck_preview_number_min_fields.confirm_status":
		if e.complexity.MuckTruckPreviewNumberMinFields.ConfirmStatus == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMinFields.ConfirmStatus(childComplexity), true

	case "muck_truck_preview_number_min_fields.confirm_time":
		if e.complexity.MuckTruckPreviewNumberMinFields.ConfirmTime == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMinFields.ConfirmTime(childComplexity), true

	case "muck_truck_preview_number_min_fields.confirmor":
		if e.complexity.MuckTruckPreviewNumberMinFields.Confirmor == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMinFields.Confirmor(childComplexity), true

	case "muck_truck_preview_number_min_fields.contact_person":
		if e.complexity.MuckTruckPreviewNumberMinFields.ContactPerson == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMinFields.ContactPerson(childComplexity), true

	case "muck_truck_preview_number_min_fields.contact_phone":
		if e.complexity.MuckTruckPreviewNumberMinFields.ContactPhone == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMinFields.ContactPhone(childComplexity), true

	case "muck_truck_preview_number_min_fields.create_by":
		if e.complexity.MuckTruckPreviewNumberMinFields.CreateBy == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMinFields.CreateBy(childComplexity), true

	case "muck_truck_preview_number_min_fields.delete_at":
		if e.complexity.MuckTruckPreviewNumberMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMinFields.DeleteAt(childComplexity), true

	case "muck_truck_preview_number_min_fields.delete_by":
		if e.complexity.MuckTruckPreviewNumberMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMinFields.DeleteBy(childComplexity), true

	case "muck_truck_preview_number_min_fields.front_license_plate":
		if e.complexity.MuckTruckPreviewNumberMinFields.FrontLicensePlate == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMinFields.FrontLicensePlate(childComplexity), true

	case "muck_truck_preview_number_min_fields.id":
		if e.complexity.MuckTruckPreviewNumberMinFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMinFields.ID(childComplexity), true

	case "muck_truck_preview_number_min_fields.initial_registration_date":
		if e.complexity.MuckTruckPreviewNumberMinFields.InitialRegistrationDate == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMinFields.InitialRegistrationDate(childComplexity), true

	case "muck_truck_preview_number_min_fields.marking_time":
		if e.complexity.MuckTruckPreviewNumberMinFields.MarkingTime == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMinFields.MarkingTime(childComplexity), true

	case "muck_truck_preview_number_min_fields.original_number":
		if e.complexity.MuckTruckPreviewNumberMinFields.OriginalNumber == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMinFields.OriginalNumber(childComplexity), true

	case "muck_truck_preview_number_min_fields.production_status":
		if e.complexity.MuckTruckPreviewNumberMinFields.ProductionStatus == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMinFields.ProductionStatus(childComplexity), true

	case "muck_truck_preview_number_min_fields.production_time":
		if e.complexity.MuckTruckPreviewNumberMinFields.ProductionTime == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMinFields.ProductionTime(childComplexity), true

	case "muck_truck_preview_number_min_fields.production_times":
		if e.complexity.MuckTruckPreviewNumberMinFields.ProductionTimes == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMinFields.ProductionTimes(childComplexity), true

	case "muck_truck_preview_number_min_fields.rear_license_plate":
		if e.complexity.MuckTruckPreviewNumberMinFields.RearLicensePlate == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMinFields.RearLicensePlate(childComplexity), true

	case "muck_truck_preview_number_min_fields.registration_time":
		if e.complexity.MuckTruckPreviewNumberMinFields.RegistrationTime == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMinFields.RegistrationTime(childComplexity), true

	case "muck_truck_preview_number_min_fields.remarks":
		if e.complexity.MuckTruckPreviewNumberMinFields.Remarks == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMinFields.Remarks(childComplexity), true

	case "muck_truck_preview_number_min_fields.side_license_plate":
		if e.complexity.MuckTruckPreviewNumberMinFields.SideLicensePlate == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMinFields.SideLicensePlate(childComplexity), true

	case "muck_truck_preview_number_min_fields.svn_number":
		if e.complexity.MuckTruckPreviewNumberMinFields.SvnNumber == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMinFields.SvnNumber(childComplexity), true

	case "muck_truck_preview_number_min_fields.unlawful_violation_number":
		if e.complexity.MuckTruckPreviewNumberMinFields.UnlawfulViolationNumber == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMinFields.UnlawfulViolationNumber(childComplexity), true

	case "muck_truck_preview_number_min_fields.update_at":
		if e.complexity.MuckTruckPreviewNumberMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMinFields.UpdateAt(childComplexity), true

	case "muck_truck_preview_number_min_fields.update_by":
		if e.complexity.MuckTruckPreviewNumberMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMinFields.UpdateBy(childComplexity), true

	case "muck_truck_preview_number_min_fields.vehicle_id":
		if e.complexity.MuckTruckPreviewNumberMinFields.VehicleID == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMinFields.VehicleID(childComplexity), true

	case "muck_truck_preview_number_min_fields.work_number_plate_color":
		if e.complexity.MuckTruckPreviewNumberMinFields.WorkNumberPlateColor == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMinFields.WorkNumberPlateColor(childComplexity), true

	case "muck_truck_preview_number_mutation_response.affected_rows":
		if e.complexity.MuckTruckPreviewNumberMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMutationResponse.AffectedRows(childComplexity), true

	case "muck_truck_preview_number_mutation_response.returning":
		if e.complexity.MuckTruckPreviewNumberMutationResponse.Returning == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberMutationResponse.Returning(childComplexity), true

	case "muck_truck_preview_number_stddev_fields.confirm_status":
		if e.complexity.MuckTruckPreviewNumberStddevFields.ConfirmStatus == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberStddevFields.ConfirmStatus(childComplexity), true

	case "muck_truck_preview_number_stddev_fields.id":
		if e.complexity.MuckTruckPreviewNumberStddevFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberStddevFields.ID(childComplexity), true

	case "muck_truck_preview_number_stddev_fields.production_status":
		if e.complexity.MuckTruckPreviewNumberStddevFields.ProductionStatus == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberStddevFields.ProductionStatus(childComplexity), true

	case "muck_truck_preview_number_stddev_fields.production_times":
		if e.complexity.MuckTruckPreviewNumberStddevFields.ProductionTimes == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberStddevFields.ProductionTimes(childComplexity), true

	case "muck_truck_preview_number_stddev_fields.unlawful_violation_number":
		if e.complexity.MuckTruckPreviewNumberStddevFields.UnlawfulViolationNumber == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberStddevFields.UnlawfulViolationNumber(childComplexity), true

	case "muck_truck_preview_number_stddev_pop_fields.confirm_status":
		if e.complexity.MuckTruckPreviewNumberStddevPopFields.ConfirmStatus == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberStddevPopFields.ConfirmStatus(childComplexity), true

	case "muck_truck_preview_number_stddev_pop_fields.id":
		if e.complexity.MuckTruckPreviewNumberStddevPopFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberStddevPopFields.ID(childComplexity), true

	case "muck_truck_preview_number_stddev_pop_fields.production_status":
		if e.complexity.MuckTruckPreviewNumberStddevPopFields.ProductionStatus == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberStddevPopFields.ProductionStatus(childComplexity), true

	case "muck_truck_preview_number_stddev_pop_fields.production_times":
		if e.complexity.MuckTruckPreviewNumberStddevPopFields.ProductionTimes == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberStddevPopFields.ProductionTimes(childComplexity), true

	case "muck_truck_preview_number_stddev_pop_fields.unlawful_violation_number":
		if e.complexity.MuckTruckPreviewNumberStddevPopFields.UnlawfulViolationNumber == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberStddevPopFields.UnlawfulViolationNumber(childComplexity), true

	case "muck_truck_preview_number_stddev_samp_fields.confirm_status":
		if e.complexity.MuckTruckPreviewNumberStddevSampFields.ConfirmStatus == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberStddevSampFields.ConfirmStatus(childComplexity), true

	case "muck_truck_preview_number_stddev_samp_fields.id":
		if e.complexity.MuckTruckPreviewNumberStddevSampFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberStddevSampFields.ID(childComplexity), true

	case "muck_truck_preview_number_stddev_samp_fields.production_status":
		if e.complexity.MuckTruckPreviewNumberStddevSampFields.ProductionStatus == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberStddevSampFields.ProductionStatus(childComplexity), true

	case "muck_truck_preview_number_stddev_samp_fields.production_times":
		if e.complexity.MuckTruckPreviewNumberStddevSampFields.ProductionTimes == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberStddevSampFields.ProductionTimes(childComplexity), true

	case "muck_truck_preview_number_stddev_samp_fields.unlawful_violation_number":
		if e.complexity.MuckTruckPreviewNumberStddevSampFields.UnlawfulViolationNumber == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberStddevSampFields.UnlawfulViolationNumber(childComplexity), true

	case "muck_truck_preview_number_sum_fields.confirm_status":
		if e.complexity.MuckTruckPreviewNumberSumFields.ConfirmStatus == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberSumFields.ConfirmStatus(childComplexity), true

	case "muck_truck_preview_number_sum_fields.id":
		if e.complexity.MuckTruckPreviewNumberSumFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberSumFields.ID(childComplexity), true

	case "muck_truck_preview_number_sum_fields.production_status":
		if e.complexity.MuckTruckPreviewNumberSumFields.ProductionStatus == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberSumFields.ProductionStatus(childComplexity), true

	case "muck_truck_preview_number_sum_fields.production_times":
		if e.complexity.MuckTruckPreviewNumberSumFields.ProductionTimes == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberSumFields.ProductionTimes(childComplexity), true

	case "muck_truck_preview_number_sum_fields.unlawful_violation_number":
		if e.complexity.MuckTruckPreviewNumberSumFields.UnlawfulViolationNumber == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberSumFields.UnlawfulViolationNumber(childComplexity), true

	case "muck_truck_preview_number_var_pop_fields.confirm_status":
		if e.complexity.MuckTruckPreviewNumberVarPopFields.ConfirmStatus == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberVarPopFields.ConfirmStatus(childComplexity), true

	case "muck_truck_preview_number_var_pop_fields.id":
		if e.complexity.MuckTruckPreviewNumberVarPopFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberVarPopFields.ID(childComplexity), true

	case "muck_truck_preview_number_var_pop_fields.production_status":
		if e.complexity.MuckTruckPreviewNumberVarPopFields.ProductionStatus == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberVarPopFields.ProductionStatus(childComplexity), true

	case "muck_truck_preview_number_var_pop_fields.production_times":
		if e.complexity.MuckTruckPreviewNumberVarPopFields.ProductionTimes == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberVarPopFields.ProductionTimes(childComplexity), true

	case "muck_truck_preview_number_var_pop_fields.unlawful_violation_number":
		if e.complexity.MuckTruckPreviewNumberVarPopFields.UnlawfulViolationNumber == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberVarPopFields.UnlawfulViolationNumber(childComplexity), true

	case "muck_truck_preview_number_var_samp_fields.confirm_status":
		if e.complexity.MuckTruckPreviewNumberVarSampFields.ConfirmStatus == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberVarSampFields.ConfirmStatus(childComplexity), true

	case "muck_truck_preview_number_var_samp_fields.id":
		if e.complexity.MuckTruckPreviewNumberVarSampFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberVarSampFields.ID(childComplexity), true

	case "muck_truck_preview_number_var_samp_fields.production_status":
		if e.complexity.MuckTruckPreviewNumberVarSampFields.ProductionStatus == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberVarSampFields.ProductionStatus(childComplexity), true

	case "muck_truck_preview_number_var_samp_fields.production_times":
		if e.complexity.MuckTruckPreviewNumberVarSampFields.ProductionTimes == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberVarSampFields.ProductionTimes(childComplexity), true

	case "muck_truck_preview_number_var_samp_fields.unlawful_violation_number":
		if e.complexity.MuckTruckPreviewNumberVarSampFields.UnlawfulViolationNumber == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberVarSampFields.UnlawfulViolationNumber(childComplexity), true

	case "muck_truck_preview_number_variance_fields.confirm_status":
		if e.complexity.MuckTruckPreviewNumberVarianceFields.ConfirmStatus == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberVarianceFields.ConfirmStatus(childComplexity), true

	case "muck_truck_preview_number_variance_fields.id":
		if e.complexity.MuckTruckPreviewNumberVarianceFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberVarianceFields.ID(childComplexity), true

	case "muck_truck_preview_number_variance_fields.production_status":
		if e.complexity.MuckTruckPreviewNumberVarianceFields.ProductionStatus == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberVarianceFields.ProductionStatus(childComplexity), true

	case "muck_truck_preview_number_variance_fields.production_times":
		if e.complexity.MuckTruckPreviewNumberVarianceFields.ProductionTimes == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberVarianceFields.ProductionTimes(childComplexity), true

	case "muck_truck_preview_number_variance_fields.unlawful_violation_number":
		if e.complexity.MuckTruckPreviewNumberVarianceFields.UnlawfulViolationNumber == nil {
			break
		}

		return e.complexity.MuckTruckPreviewNumberVarianceFields.UnlawfulViolationNumber(childComplexity), true

	case "muck_truck_worker_id_card_orders.create_at":
		if e.complexity.MuckTruckWorkerIDCardOrders.CreateAt == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrders.CreateAt(childComplexity), true

	case "muck_truck_worker_id_card_orders.create_by":
		if e.complexity.MuckTruckWorkerIDCardOrders.CreateBy == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrders.CreateBy(childComplexity), true

	case "muck_truck_worker_id_card_orders.delete_at":
		if e.complexity.MuckTruckWorkerIDCardOrders.DeleteAt == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrders.DeleteAt(childComplexity), true

	case "muck_truck_worker_id_card_orders.delete_by":
		if e.complexity.MuckTruckWorkerIDCardOrders.DeleteBy == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrders.DeleteBy(childComplexity), true

	case "muck_truck_worker_id_card_orders.id":
		if e.complexity.MuckTruckWorkerIDCardOrders.ID == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrders.ID(childComplexity), true

	case "muck_truck_worker_id_card_orders.preview_number_id":
		if e.complexity.MuckTruckWorkerIDCardOrders.PreviewNumberID == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrders.PreviewNumberID(childComplexity), true

	case "muck_truck_worker_id_card_orders.update_at":
		if e.complexity.MuckTruckWorkerIDCardOrders.UpdateAt == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrders.UpdateAt(childComplexity), true

	case "muck_truck_worker_id_card_orders.update_by":
		if e.complexity.MuckTruckWorkerIDCardOrders.UpdateBy == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrders.UpdateBy(childComplexity), true

	case "muck_truck_worker_id_card_orders.vehicle_id":
		if e.complexity.MuckTruckWorkerIDCardOrders.VehicleID == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrders.VehicleID(childComplexity), true

	case "muck_truck_worker_id_card_orders_aggregate.aggregate":
		if e.complexity.MuckTruckWorkerIDCardOrdersAggregate.Aggregate == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersAggregate.Aggregate(childComplexity), true

	case "muck_truck_worker_id_card_orders_aggregate.nodes":
		if e.complexity.MuckTruckWorkerIDCardOrdersAggregate.Nodes == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersAggregate.Nodes(childComplexity), true

	case "muck_truck_worker_id_card_orders_aggregate_fields.avg":
		if e.complexity.MuckTruckWorkerIDCardOrdersAggregateFields.Avg == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersAggregateFields.Avg(childComplexity), true

	case "muck_truck_worker_id_card_orders_aggregate_fields.count":
		if e.complexity.MuckTruckWorkerIDCardOrdersAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_muck_truck_worker_id_card_orders_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersAggregateFields.Count(childComplexity, args["columns"].([]model.MuckTruckWorkerIDCardOrdersSelectColumn), args["distinct"].(*bool)), true

	case "muck_truck_worker_id_card_orders_aggregate_fields.max":
		if e.complexity.MuckTruckWorkerIDCardOrdersAggregateFields.Max == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersAggregateFields.Max(childComplexity), true

	case "muck_truck_worker_id_card_orders_aggregate_fields.min":
		if e.complexity.MuckTruckWorkerIDCardOrdersAggregateFields.Min == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersAggregateFields.Min(childComplexity), true

	case "muck_truck_worker_id_card_orders_aggregate_fields.stddev":
		if e.complexity.MuckTruckWorkerIDCardOrdersAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersAggregateFields.Stddev(childComplexity), true

	case "muck_truck_worker_id_card_orders_aggregate_fields.stddev_pop":
		if e.complexity.MuckTruckWorkerIDCardOrdersAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersAggregateFields.StddevPop(childComplexity), true

	case "muck_truck_worker_id_card_orders_aggregate_fields.stddev_samp":
		if e.complexity.MuckTruckWorkerIDCardOrdersAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersAggregateFields.StddevSamp(childComplexity), true

	case "muck_truck_worker_id_card_orders_aggregate_fields.sum":
		if e.complexity.MuckTruckWorkerIDCardOrdersAggregateFields.Sum == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersAggregateFields.Sum(childComplexity), true

	case "muck_truck_worker_id_card_orders_aggregate_fields.var_pop":
		if e.complexity.MuckTruckWorkerIDCardOrdersAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersAggregateFields.VarPop(childComplexity), true

	case "muck_truck_worker_id_card_orders_aggregate_fields.var_samp":
		if e.complexity.MuckTruckWorkerIDCardOrdersAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersAggregateFields.VarSamp(childComplexity), true

	case "muck_truck_worker_id_card_orders_aggregate_fields.variance":
		if e.complexity.MuckTruckWorkerIDCardOrdersAggregateFields.Variance == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersAggregateFields.Variance(childComplexity), true

	case "muck_truck_worker_id_card_orders_avg_fields.id":
		if e.complexity.MuckTruckWorkerIDCardOrdersAvgFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersAvgFields.ID(childComplexity), true

	case "muck_truck_worker_id_card_orders_avg_fields.preview_number_id":
		if e.complexity.MuckTruckWorkerIDCardOrdersAvgFields.PreviewNumberID == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersAvgFields.PreviewNumberID(childComplexity), true

	case "muck_truck_worker_id_card_orders_max_fields.create_at":
		if e.complexity.MuckTruckWorkerIDCardOrdersMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersMaxFields.CreateAt(childComplexity), true

	case "muck_truck_worker_id_card_orders_max_fields.create_by":
		if e.complexity.MuckTruckWorkerIDCardOrdersMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersMaxFields.CreateBy(childComplexity), true

	case "muck_truck_worker_id_card_orders_max_fields.delete_at":
		if e.complexity.MuckTruckWorkerIDCardOrdersMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersMaxFields.DeleteAt(childComplexity), true

	case "muck_truck_worker_id_card_orders_max_fields.delete_by":
		if e.complexity.MuckTruckWorkerIDCardOrdersMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersMaxFields.DeleteBy(childComplexity), true

	case "muck_truck_worker_id_card_orders_max_fields.id":
		if e.complexity.MuckTruckWorkerIDCardOrdersMaxFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersMaxFields.ID(childComplexity), true

	case "muck_truck_worker_id_card_orders_max_fields.preview_number_id":
		if e.complexity.MuckTruckWorkerIDCardOrdersMaxFields.PreviewNumberID == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersMaxFields.PreviewNumberID(childComplexity), true

	case "muck_truck_worker_id_card_orders_max_fields.update_at":
		if e.complexity.MuckTruckWorkerIDCardOrdersMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersMaxFields.UpdateAt(childComplexity), true

	case "muck_truck_worker_id_card_orders_max_fields.update_by":
		if e.complexity.MuckTruckWorkerIDCardOrdersMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersMaxFields.UpdateBy(childComplexity), true

	case "muck_truck_worker_id_card_orders_max_fields.vehicle_id":
		if e.complexity.MuckTruckWorkerIDCardOrdersMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersMaxFields.VehicleID(childComplexity), true

	case "muck_truck_worker_id_card_orders_min_fields.create_at":
		if e.complexity.MuckTruckWorkerIDCardOrdersMinFields.CreateAt == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersMinFields.CreateAt(childComplexity), true

	case "muck_truck_worker_id_card_orders_min_fields.create_by":
		if e.complexity.MuckTruckWorkerIDCardOrdersMinFields.CreateBy == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersMinFields.CreateBy(childComplexity), true

	case "muck_truck_worker_id_card_orders_min_fields.delete_at":
		if e.complexity.MuckTruckWorkerIDCardOrdersMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersMinFields.DeleteAt(childComplexity), true

	case "muck_truck_worker_id_card_orders_min_fields.delete_by":
		if e.complexity.MuckTruckWorkerIDCardOrdersMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersMinFields.DeleteBy(childComplexity), true

	case "muck_truck_worker_id_card_orders_min_fields.id":
		if e.complexity.MuckTruckWorkerIDCardOrdersMinFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersMinFields.ID(childComplexity), true

	case "muck_truck_worker_id_card_orders_min_fields.preview_number_id":
		if e.complexity.MuckTruckWorkerIDCardOrdersMinFields.PreviewNumberID == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersMinFields.PreviewNumberID(childComplexity), true

	case "muck_truck_worker_id_card_orders_min_fields.update_at":
		if e.complexity.MuckTruckWorkerIDCardOrdersMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersMinFields.UpdateAt(childComplexity), true

	case "muck_truck_worker_id_card_orders_min_fields.update_by":
		if e.complexity.MuckTruckWorkerIDCardOrdersMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersMinFields.UpdateBy(childComplexity), true

	case "muck_truck_worker_id_card_orders_min_fields.vehicle_id":
		if e.complexity.MuckTruckWorkerIDCardOrdersMinFields.VehicleID == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersMinFields.VehicleID(childComplexity), true

	case "muck_truck_worker_id_card_orders_mutation_response.affected_rows":
		if e.complexity.MuckTruckWorkerIDCardOrdersMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersMutationResponse.AffectedRows(childComplexity), true

	case "muck_truck_worker_id_card_orders_mutation_response.returning":
		if e.complexity.MuckTruckWorkerIDCardOrdersMutationResponse.Returning == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersMutationResponse.Returning(childComplexity), true

	case "muck_truck_worker_id_card_orders_stddev_fields.id":
		if e.complexity.MuckTruckWorkerIDCardOrdersStddevFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersStddevFields.ID(childComplexity), true

	case "muck_truck_worker_id_card_orders_stddev_fields.preview_number_id":
		if e.complexity.MuckTruckWorkerIDCardOrdersStddevFields.PreviewNumberID == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersStddevFields.PreviewNumberID(childComplexity), true

	case "muck_truck_worker_id_card_orders_stddev_pop_fields.id":
		if e.complexity.MuckTruckWorkerIDCardOrdersStddevPopFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersStddevPopFields.ID(childComplexity), true

	case "muck_truck_worker_id_card_orders_stddev_pop_fields.preview_number_id":
		if e.complexity.MuckTruckWorkerIDCardOrdersStddevPopFields.PreviewNumberID == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersStddevPopFields.PreviewNumberID(childComplexity), true

	case "muck_truck_worker_id_card_orders_stddev_samp_fields.id":
		if e.complexity.MuckTruckWorkerIDCardOrdersStddevSampFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersStddevSampFields.ID(childComplexity), true

	case "muck_truck_worker_id_card_orders_stddev_samp_fields.preview_number_id":
		if e.complexity.MuckTruckWorkerIDCardOrdersStddevSampFields.PreviewNumberID == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersStddevSampFields.PreviewNumberID(childComplexity), true

	case "muck_truck_worker_id_card_orders_sum_fields.id":
		if e.complexity.MuckTruckWorkerIDCardOrdersSumFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersSumFields.ID(childComplexity), true

	case "muck_truck_worker_id_card_orders_sum_fields.preview_number_id":
		if e.complexity.MuckTruckWorkerIDCardOrdersSumFields.PreviewNumberID == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersSumFields.PreviewNumberID(childComplexity), true

	case "muck_truck_worker_id_card_orders_var_pop_fields.id":
		if e.complexity.MuckTruckWorkerIDCardOrdersVarPopFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersVarPopFields.ID(childComplexity), true

	case "muck_truck_worker_id_card_orders_var_pop_fields.preview_number_id":
		if e.complexity.MuckTruckWorkerIDCardOrdersVarPopFields.PreviewNumberID == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersVarPopFields.PreviewNumberID(childComplexity), true

	case "muck_truck_worker_id_card_orders_var_samp_fields.id":
		if e.complexity.MuckTruckWorkerIDCardOrdersVarSampFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersVarSampFields.ID(childComplexity), true

	case "muck_truck_worker_id_card_orders_var_samp_fields.preview_number_id":
		if e.complexity.MuckTruckWorkerIDCardOrdersVarSampFields.PreviewNumberID == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersVarSampFields.PreviewNumberID(childComplexity), true

	case "muck_truck_worker_id_card_orders_variance_fields.id":
		if e.complexity.MuckTruckWorkerIDCardOrdersVarianceFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersVarianceFields.ID(childComplexity), true

	case "muck_truck_worker_id_card_orders_variance_fields.preview_number_id":
		if e.complexity.MuckTruckWorkerIDCardOrdersVarianceFields.PreviewNumberID == nil {
			break
		}

		return e.complexity.MuckTruckWorkerIDCardOrdersVarianceFields.PreviewNumberID(childComplexity), true

	case "operating_vehicle_info.administrative_region":
		if e.complexity.OperatingVehicleInfo.AdministrativeRegion == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.AdministrativeRegion(childComplexity), true

	case "operating_vehicle_info.agent":
		if e.complexity.OperatingVehicleInfo.Agent == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.Agent(childComplexity), true

	case "operating_vehicle_info.contact_number":
		if e.complexity.OperatingVehicleInfo.ContactNumber == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.ContactNumber(childComplexity), true

	case "operating_vehicle_info.contract_time":
		if e.complexity.OperatingVehicleInfo.ContractTime == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.ContractTime(childComplexity), true

	case "operating_vehicle_info.create_at":
		if e.complexity.OperatingVehicleInfo.CreateAt == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.CreateAt(childComplexity), true

	case "operating_vehicle_info.create_by":
		if e.complexity.OperatingVehicleInfo.CreateBy == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.CreateBy(childComplexity), true

	case "operating_vehicle_info.delete_at":
		if e.complexity.OperatingVehicleInfo.DeleteAt == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.DeleteAt(childComplexity), true

	case "operating_vehicle_info.delete_by":
		if e.complexity.OperatingVehicleInfo.DeleteBy == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.DeleteBy(childComplexity), true

	case "operating_vehicle_info.driving_license_owner":
		if e.complexity.OperatingVehicleInfo.DrivingLicenseOwner == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.DrivingLicenseOwner(childComplexity), true

	case "operating_vehicle_info.first_online_time":
		if e.complexity.OperatingVehicleInfo.FirstOnlineTime == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.FirstOnlineTime(childComplexity), true

	case "operating_vehicle_info.installation_time":
		if e.complexity.OperatingVehicleInfo.InstallationTime == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.InstallationTime(childComplexity), true

	case "operating_vehicle_info.is_active":
		if e.complexity.OperatingVehicleInfo.IsActive == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.IsActive(childComplexity), true

	case "operating_vehicle_info.is_applay_terminal_installation":
		if e.complexity.OperatingVehicleInfo.IsApplayTerminalInstallation == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.IsApplayTerminalInstallation(childComplexity), true

	case "operating_vehicle_info.is_BD":
		if e.complexity.OperatingVehicleInfo.IsBd == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.IsBd(childComplexity), true

	case "operating_vehicle_info.is_block":
		if e.complexity.OperatingVehicleInfo.IsBlock == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.IsBlock(childComplexity), true

	case "operating_vehicle_info.is_engineering_vehicle":
		if e.complexity.OperatingVehicleInfo.IsEngineeringVehicle == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.IsEngineeringVehicle(childComplexity), true

	case "operating_vehicle_info.is_function_ok":
		if e.complexity.OperatingVehicleInfo.IsFunctionOk == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.IsFunctionOk(childComplexity), true

	case "operating_vehicle_info.is_in_operating_system":
		if e.complexity.OperatingVehicleInfo.IsInOperatingSystem == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.IsInOperatingSystem(childComplexity), true

	case "operating_vehicle_info.is_in_upload_platform":
		if e.complexity.OperatingVehicleInfo.IsInUploadPlatform == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.IsInUploadPlatform(childComplexity), true

	case "operating_vehicle_info.is_need_supervise":
		if e.complexity.OperatingVehicleInfo.IsNeedSupervise == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.IsNeedSupervise(childComplexity), true

	case "operating_vehicle_info.is_supervise":
		if e.complexity.OperatingVehicleInfo.IsSupervise == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.IsSupervise(childComplexity), true

	case "operating_vehicle_info.last_binding_terminal_time":
		if e.complexity.OperatingVehicleInfo.LastBindingTerminalTime == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.LastBindingTerminalTime(childComplexity), true

	case "operating_vehicle_info.license_plate_photo":
		if e.complexity.OperatingVehicleInfo.LicensePlatePhoto == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.LicensePlatePhoto(childComplexity), true

	case "operating_vehicle_info.muck_truck_type":
		if e.complexity.OperatingVehicleInfo.MuckTruckType == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.MuckTruckType(childComplexity), true

	case "operating_vehicle_info.operating_vehicle_id":
		if e.complexity.OperatingVehicleInfo.OperatingVehicleID == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.OperatingVehicleID(childComplexity), true

	case "operating_vehicle_info.other_photo":
		if e.complexity.OperatingVehicleInfo.OtherPhoto == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.OtherPhoto(childComplexity), true

	case "operating_vehicle_info.platform":
		if e.complexity.OperatingVehicleInfo.Platform == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.Platform(childComplexity), true

	case "operating_vehicle_info.position_db_id":
		if e.complexity.OperatingVehicleInfo.PositionDbID == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.PositionDbID(childComplexity), true

	case "operating_vehicle_info.scrap_reason":
		if e.complexity.OperatingVehicleInfo.ScrapReason == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.ScrapReason(childComplexity), true

	case "operating_vehicle_info.scrap_time":
		if e.complexity.OperatingVehicleInfo.ScrapTime == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.ScrapTime(childComplexity), true

	case "operating_vehicle_info.scrap_time_check":
		if e.complexity.OperatingVehicleInfo.ScrapTimeCheck == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.ScrapTimeCheck(childComplexity), true

	case "operating_vehicle_info.serial_number":
		if e.complexity.OperatingVehicleInfo.SerialNumber == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.SerialNumber(childComplexity), true

	case "operating_vehicle_info.service_expiration_time":
		if e.complexity.OperatingVehicleInfo.ServiceExpirationTime == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.ServiceExpirationTime(childComplexity), true

	case "operating_vehicle_info.speed_mode_status":
		if e.complexity.OperatingVehicleInfo.SpeedModeStatus == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.SpeedModeStatus(childComplexity), true

	case "operating_vehicle_info.speed_mode_status_time":
		if e.complexity.OperatingVehicleInfo.SpeedModeStatusTime == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.SpeedModeStatusTime(childComplexity), true

	case "operating_vehicle_info.temporary_library":
		if e.complexity.OperatingVehicleInfo.TemporaryLibrary == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.TemporaryLibrary(childComplexity), true

	case "operating_vehicle_info.temporary_transport_bureau":
		if e.complexity.OperatingVehicleInfo.TemporaryTransportBureau == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.TemporaryTransportBureau(childComplexity), true

	case "operating_vehicle_info.update_at":
		if e.complexity.OperatingVehicleInfo.UpdateAt == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.UpdateAt(childComplexity), true

	case "operating_vehicle_info.update_by":
		if e.complexity.OperatingVehicleInfo.UpdateBy == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.UpdateBy(childComplexity), true

	case "operating_vehicle_info.vehicle_id":
		if e.complexity.OperatingVehicleInfo.VehicleID == nil {
			break
		}

		return e.complexity.OperatingVehicleInfo.VehicleID(childComplexity), true

	case "operating_vehicle_info_aggregate.aggregate":
		if e.complexity.OperatingVehicleInfoAggregate.Aggregate == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoAggregate.Aggregate(childComplexity), true

	case "operating_vehicle_info_aggregate.nodes":
		if e.complexity.OperatingVehicleInfoAggregate.Nodes == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoAggregate.Nodes(childComplexity), true

	case "operating_vehicle_info_aggregate_fields.avg":
		if e.complexity.OperatingVehicleInfoAggregateFields.Avg == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoAggregateFields.Avg(childComplexity), true

	case "operating_vehicle_info_aggregate_fields.count":
		if e.complexity.OperatingVehicleInfoAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_operating_vehicle_info_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.OperatingVehicleInfoAggregateFields.Count(childComplexity, args["columns"].([]model.OperatingVehicleInfoSelectColumn), args["distinct"].(*bool)), true

	case "operating_vehicle_info_aggregate_fields.max":
		if e.complexity.OperatingVehicleInfoAggregateFields.Max == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoAggregateFields.Max(childComplexity), true

	case "operating_vehicle_info_aggregate_fields.min":
		if e.complexity.OperatingVehicleInfoAggregateFields.Min == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoAggregateFields.Min(childComplexity), true

	case "operating_vehicle_info_aggregate_fields.stddev":
		if e.complexity.OperatingVehicleInfoAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoAggregateFields.Stddev(childComplexity), true

	case "operating_vehicle_info_aggregate_fields.stddev_pop":
		if e.complexity.OperatingVehicleInfoAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoAggregateFields.StddevPop(childComplexity), true

	case "operating_vehicle_info_aggregate_fields.stddev_samp":
		if e.complexity.OperatingVehicleInfoAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoAggregateFields.StddevSamp(childComplexity), true

	case "operating_vehicle_info_aggregate_fields.sum":
		if e.complexity.OperatingVehicleInfoAggregateFields.Sum == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoAggregateFields.Sum(childComplexity), true

	case "operating_vehicle_info_aggregate_fields.var_pop":
		if e.complexity.OperatingVehicleInfoAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoAggregateFields.VarPop(childComplexity), true

	case "operating_vehicle_info_aggregate_fields.var_samp":
		if e.complexity.OperatingVehicleInfoAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoAggregateFields.VarSamp(childComplexity), true

	case "operating_vehicle_info_aggregate_fields.variance":
		if e.complexity.OperatingVehicleInfoAggregateFields.Variance == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoAggregateFields.Variance(childComplexity), true

	case "operating_vehicle_info_avg_fields.muck_truck_type":
		if e.complexity.OperatingVehicleInfoAvgFields.MuckTruckType == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoAvgFields.MuckTruckType(childComplexity), true

	case "operating_vehicle_info_avg_fields.operating_vehicle_id":
		if e.complexity.OperatingVehicleInfoAvgFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoAvgFields.OperatingVehicleID(childComplexity), true

	case "operating_vehicle_info_avg_fields.platform":
		if e.complexity.OperatingVehicleInfoAvgFields.Platform == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoAvgFields.Platform(childComplexity), true

	case "operating_vehicle_info_avg_fields.scrap_time_check":
		if e.complexity.OperatingVehicleInfoAvgFields.ScrapTimeCheck == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoAvgFields.ScrapTimeCheck(childComplexity), true

	case "operating_vehicle_info_avg_fields.temporary_library":
		if e.complexity.OperatingVehicleInfoAvgFields.TemporaryLibrary == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoAvgFields.TemporaryLibrary(childComplexity), true

	case "operating_vehicle_info_avg_fields.temporary_transport_bureau":
		if e.complexity.OperatingVehicleInfoAvgFields.TemporaryTransportBureau == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoAvgFields.TemporaryTransportBureau(childComplexity), true

	case "operating_vehicle_info_max_fields.administrative_region":
		if e.complexity.OperatingVehicleInfoMaxFields.AdministrativeRegion == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.AdministrativeRegion(childComplexity), true

	case "operating_vehicle_info_max_fields.agent":
		if e.complexity.OperatingVehicleInfoMaxFields.Agent == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.Agent(childComplexity), true

	case "operating_vehicle_info_max_fields.contact_number":
		if e.complexity.OperatingVehicleInfoMaxFields.ContactNumber == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.ContactNumber(childComplexity), true

	case "operating_vehicle_info_max_fields.contract_time":
		if e.complexity.OperatingVehicleInfoMaxFields.ContractTime == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.ContractTime(childComplexity), true

	case "operating_vehicle_info_max_fields.create_at":
		if e.complexity.OperatingVehicleInfoMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.CreateAt(childComplexity), true

	case "operating_vehicle_info_max_fields.create_by":
		if e.complexity.OperatingVehicleInfoMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.CreateBy(childComplexity), true

	case "operating_vehicle_info_max_fields.delete_at":
		if e.complexity.OperatingVehicleInfoMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.DeleteAt(childComplexity), true

	case "operating_vehicle_info_max_fields.delete_by":
		if e.complexity.OperatingVehicleInfoMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.DeleteBy(childComplexity), true

	case "operating_vehicle_info_max_fields.driving_license_owner":
		if e.complexity.OperatingVehicleInfoMaxFields.DrivingLicenseOwner == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.DrivingLicenseOwner(childComplexity), true

	case "operating_vehicle_info_max_fields.first_online_time":
		if e.complexity.OperatingVehicleInfoMaxFields.FirstOnlineTime == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.FirstOnlineTime(childComplexity), true

	case "operating_vehicle_info_max_fields.installation_time":
		if e.complexity.OperatingVehicleInfoMaxFields.InstallationTime == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.InstallationTime(childComplexity), true

	case "operating_vehicle_info_max_fields.last_binding_terminal_time":
		if e.complexity.OperatingVehicleInfoMaxFields.LastBindingTerminalTime == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.LastBindingTerminalTime(childComplexity), true

	case "operating_vehicle_info_max_fields.license_plate_photo":
		if e.complexity.OperatingVehicleInfoMaxFields.LicensePlatePhoto == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.LicensePlatePhoto(childComplexity), true

	case "operating_vehicle_info_max_fields.muck_truck_type":
		if e.complexity.OperatingVehicleInfoMaxFields.MuckTruckType == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.MuckTruckType(childComplexity), true

	case "operating_vehicle_info_max_fields.operating_vehicle_id":
		if e.complexity.OperatingVehicleInfoMaxFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.OperatingVehicleID(childComplexity), true

	case "operating_vehicle_info_max_fields.other_photo":
		if e.complexity.OperatingVehicleInfoMaxFields.OtherPhoto == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.OtherPhoto(childComplexity), true

	case "operating_vehicle_info_max_fields.platform":
		if e.complexity.OperatingVehicleInfoMaxFields.Platform == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.Platform(childComplexity), true

	case "operating_vehicle_info_max_fields.position_db_id":
		if e.complexity.OperatingVehicleInfoMaxFields.PositionDbID == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.PositionDbID(childComplexity), true

	case "operating_vehicle_info_max_fields.scrap_reason":
		if e.complexity.OperatingVehicleInfoMaxFields.ScrapReason == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.ScrapReason(childComplexity), true

	case "operating_vehicle_info_max_fields.scrap_time":
		if e.complexity.OperatingVehicleInfoMaxFields.ScrapTime == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.ScrapTime(childComplexity), true

	case "operating_vehicle_info_max_fields.scrap_time_check":
		if e.complexity.OperatingVehicleInfoMaxFields.ScrapTimeCheck == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.ScrapTimeCheck(childComplexity), true

	case "operating_vehicle_info_max_fields.serial_number":
		if e.complexity.OperatingVehicleInfoMaxFields.SerialNumber == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.SerialNumber(childComplexity), true

	case "operating_vehicle_info_max_fields.service_expiration_time":
		if e.complexity.OperatingVehicleInfoMaxFields.ServiceExpirationTime == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.ServiceExpirationTime(childComplexity), true

	case "operating_vehicle_info_max_fields.speed_mode_status":
		if e.complexity.OperatingVehicleInfoMaxFields.SpeedModeStatus == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.SpeedModeStatus(childComplexity), true

	case "operating_vehicle_info_max_fields.speed_mode_status_time":
		if e.complexity.OperatingVehicleInfoMaxFields.SpeedModeStatusTime == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.SpeedModeStatusTime(childComplexity), true

	case "operating_vehicle_info_max_fields.temporary_library":
		if e.complexity.OperatingVehicleInfoMaxFields.TemporaryLibrary == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.TemporaryLibrary(childComplexity), true

	case "operating_vehicle_info_max_fields.temporary_transport_bureau":
		if e.complexity.OperatingVehicleInfoMaxFields.TemporaryTransportBureau == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.TemporaryTransportBureau(childComplexity), true

	case "operating_vehicle_info_max_fields.update_at":
		if e.complexity.OperatingVehicleInfoMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.UpdateAt(childComplexity), true

	case "operating_vehicle_info_max_fields.update_by":
		if e.complexity.OperatingVehicleInfoMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.UpdateBy(childComplexity), true

	case "operating_vehicle_info_max_fields.vehicle_id":
		if e.complexity.OperatingVehicleInfoMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMaxFields.VehicleID(childComplexity), true

	case "operating_vehicle_info_min_fields.administrative_region":
		if e.complexity.OperatingVehicleInfoMinFields.AdministrativeRegion == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.AdministrativeRegion(childComplexity), true

	case "operating_vehicle_info_min_fields.agent":
		if e.complexity.OperatingVehicleInfoMinFields.Agent == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.Agent(childComplexity), true

	case "operating_vehicle_info_min_fields.contact_number":
		if e.complexity.OperatingVehicleInfoMinFields.ContactNumber == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.ContactNumber(childComplexity), true

	case "operating_vehicle_info_min_fields.contract_time":
		if e.complexity.OperatingVehicleInfoMinFields.ContractTime == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.ContractTime(childComplexity), true

	case "operating_vehicle_info_min_fields.create_at":
		if e.complexity.OperatingVehicleInfoMinFields.CreateAt == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.CreateAt(childComplexity), true

	case "operating_vehicle_info_min_fields.create_by":
		if e.complexity.OperatingVehicleInfoMinFields.CreateBy == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.CreateBy(childComplexity), true

	case "operating_vehicle_info_min_fields.delete_at":
		if e.complexity.OperatingVehicleInfoMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.DeleteAt(childComplexity), true

	case "operating_vehicle_info_min_fields.delete_by":
		if e.complexity.OperatingVehicleInfoMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.DeleteBy(childComplexity), true

	case "operating_vehicle_info_min_fields.driving_license_owner":
		if e.complexity.OperatingVehicleInfoMinFields.DrivingLicenseOwner == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.DrivingLicenseOwner(childComplexity), true

	case "operating_vehicle_info_min_fields.first_online_time":
		if e.complexity.OperatingVehicleInfoMinFields.FirstOnlineTime == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.FirstOnlineTime(childComplexity), true

	case "operating_vehicle_info_min_fields.installation_time":
		if e.complexity.OperatingVehicleInfoMinFields.InstallationTime == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.InstallationTime(childComplexity), true

	case "operating_vehicle_info_min_fields.last_binding_terminal_time":
		if e.complexity.OperatingVehicleInfoMinFields.LastBindingTerminalTime == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.LastBindingTerminalTime(childComplexity), true

	case "operating_vehicle_info_min_fields.license_plate_photo":
		if e.complexity.OperatingVehicleInfoMinFields.LicensePlatePhoto == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.LicensePlatePhoto(childComplexity), true

	case "operating_vehicle_info_min_fields.muck_truck_type":
		if e.complexity.OperatingVehicleInfoMinFields.MuckTruckType == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.MuckTruckType(childComplexity), true

	case "operating_vehicle_info_min_fields.operating_vehicle_id":
		if e.complexity.OperatingVehicleInfoMinFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.OperatingVehicleID(childComplexity), true

	case "operating_vehicle_info_min_fields.other_photo":
		if e.complexity.OperatingVehicleInfoMinFields.OtherPhoto == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.OtherPhoto(childComplexity), true

	case "operating_vehicle_info_min_fields.platform":
		if e.complexity.OperatingVehicleInfoMinFields.Platform == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.Platform(childComplexity), true

	case "operating_vehicle_info_min_fields.position_db_id":
		if e.complexity.OperatingVehicleInfoMinFields.PositionDbID == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.PositionDbID(childComplexity), true

	case "operating_vehicle_info_min_fields.scrap_reason":
		if e.complexity.OperatingVehicleInfoMinFields.ScrapReason == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.ScrapReason(childComplexity), true

	case "operating_vehicle_info_min_fields.scrap_time":
		if e.complexity.OperatingVehicleInfoMinFields.ScrapTime == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.ScrapTime(childComplexity), true

	case "operating_vehicle_info_min_fields.scrap_time_check":
		if e.complexity.OperatingVehicleInfoMinFields.ScrapTimeCheck == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.ScrapTimeCheck(childComplexity), true

	case "operating_vehicle_info_min_fields.serial_number":
		if e.complexity.OperatingVehicleInfoMinFields.SerialNumber == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.SerialNumber(childComplexity), true

	case "operating_vehicle_info_min_fields.service_expiration_time":
		if e.complexity.OperatingVehicleInfoMinFields.ServiceExpirationTime == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.ServiceExpirationTime(childComplexity), true

	case "operating_vehicle_info_min_fields.speed_mode_status":
		if e.complexity.OperatingVehicleInfoMinFields.SpeedModeStatus == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.SpeedModeStatus(childComplexity), true

	case "operating_vehicle_info_min_fields.speed_mode_status_time":
		if e.complexity.OperatingVehicleInfoMinFields.SpeedModeStatusTime == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.SpeedModeStatusTime(childComplexity), true

	case "operating_vehicle_info_min_fields.temporary_library":
		if e.complexity.OperatingVehicleInfoMinFields.TemporaryLibrary == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.TemporaryLibrary(childComplexity), true

	case "operating_vehicle_info_min_fields.temporary_transport_bureau":
		if e.complexity.OperatingVehicleInfoMinFields.TemporaryTransportBureau == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.TemporaryTransportBureau(childComplexity), true

	case "operating_vehicle_info_min_fields.update_at":
		if e.complexity.OperatingVehicleInfoMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.UpdateAt(childComplexity), true

	case "operating_vehicle_info_min_fields.update_by":
		if e.complexity.OperatingVehicleInfoMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.UpdateBy(childComplexity), true

	case "operating_vehicle_info_min_fields.vehicle_id":
		if e.complexity.OperatingVehicleInfoMinFields.VehicleID == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMinFields.VehicleID(childComplexity), true

	case "operating_vehicle_info_mutation_response.affected_rows":
		if e.complexity.OperatingVehicleInfoMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMutationResponse.AffectedRows(childComplexity), true

	case "operating_vehicle_info_mutation_response.returning":
		if e.complexity.OperatingVehicleInfoMutationResponse.Returning == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoMutationResponse.Returning(childComplexity), true

	case "operating_vehicle_info_stddev_fields.muck_truck_type":
		if e.complexity.OperatingVehicleInfoStddevFields.MuckTruckType == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoStddevFields.MuckTruckType(childComplexity), true

	case "operating_vehicle_info_stddev_fields.operating_vehicle_id":
		if e.complexity.OperatingVehicleInfoStddevFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoStddevFields.OperatingVehicleID(childComplexity), true

	case "operating_vehicle_info_stddev_fields.platform":
		if e.complexity.OperatingVehicleInfoStddevFields.Platform == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoStddevFields.Platform(childComplexity), true

	case "operating_vehicle_info_stddev_fields.scrap_time_check":
		if e.complexity.OperatingVehicleInfoStddevFields.ScrapTimeCheck == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoStddevFields.ScrapTimeCheck(childComplexity), true

	case "operating_vehicle_info_stddev_fields.temporary_library":
		if e.complexity.OperatingVehicleInfoStddevFields.TemporaryLibrary == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoStddevFields.TemporaryLibrary(childComplexity), true

	case "operating_vehicle_info_stddev_fields.temporary_transport_bureau":
		if e.complexity.OperatingVehicleInfoStddevFields.TemporaryTransportBureau == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoStddevFields.TemporaryTransportBureau(childComplexity), true

	case "operating_vehicle_info_stddev_pop_fields.muck_truck_type":
		if e.complexity.OperatingVehicleInfoStddevPopFields.MuckTruckType == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoStddevPopFields.MuckTruckType(childComplexity), true

	case "operating_vehicle_info_stddev_pop_fields.operating_vehicle_id":
		if e.complexity.OperatingVehicleInfoStddevPopFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoStddevPopFields.OperatingVehicleID(childComplexity), true

	case "operating_vehicle_info_stddev_pop_fields.platform":
		if e.complexity.OperatingVehicleInfoStddevPopFields.Platform == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoStddevPopFields.Platform(childComplexity), true

	case "operating_vehicle_info_stddev_pop_fields.scrap_time_check":
		if e.complexity.OperatingVehicleInfoStddevPopFields.ScrapTimeCheck == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoStddevPopFields.ScrapTimeCheck(childComplexity), true

	case "operating_vehicle_info_stddev_pop_fields.temporary_library":
		if e.complexity.OperatingVehicleInfoStddevPopFields.TemporaryLibrary == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoStddevPopFields.TemporaryLibrary(childComplexity), true

	case "operating_vehicle_info_stddev_pop_fields.temporary_transport_bureau":
		if e.complexity.OperatingVehicleInfoStddevPopFields.TemporaryTransportBureau == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoStddevPopFields.TemporaryTransportBureau(childComplexity), true

	case "operating_vehicle_info_stddev_samp_fields.muck_truck_type":
		if e.complexity.OperatingVehicleInfoStddevSampFields.MuckTruckType == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoStddevSampFields.MuckTruckType(childComplexity), true

	case "operating_vehicle_info_stddev_samp_fields.operating_vehicle_id":
		if e.complexity.OperatingVehicleInfoStddevSampFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoStddevSampFields.OperatingVehicleID(childComplexity), true

	case "operating_vehicle_info_stddev_samp_fields.platform":
		if e.complexity.OperatingVehicleInfoStddevSampFields.Platform == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoStddevSampFields.Platform(childComplexity), true

	case "operating_vehicle_info_stddev_samp_fields.scrap_time_check":
		if e.complexity.OperatingVehicleInfoStddevSampFields.ScrapTimeCheck == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoStddevSampFields.ScrapTimeCheck(childComplexity), true

	case "operating_vehicle_info_stddev_samp_fields.temporary_library":
		if e.complexity.OperatingVehicleInfoStddevSampFields.TemporaryLibrary == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoStddevSampFields.TemporaryLibrary(childComplexity), true

	case "operating_vehicle_info_stddev_samp_fields.temporary_transport_bureau":
		if e.complexity.OperatingVehicleInfoStddevSampFields.TemporaryTransportBureau == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoStddevSampFields.TemporaryTransportBureau(childComplexity), true

	case "operating_vehicle_info_sum_fields.muck_truck_type":
		if e.complexity.OperatingVehicleInfoSumFields.MuckTruckType == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoSumFields.MuckTruckType(childComplexity), true

	case "operating_vehicle_info_sum_fields.operating_vehicle_id":
		if e.complexity.OperatingVehicleInfoSumFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoSumFields.OperatingVehicleID(childComplexity), true

	case "operating_vehicle_info_sum_fields.platform":
		if e.complexity.OperatingVehicleInfoSumFields.Platform == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoSumFields.Platform(childComplexity), true

	case "operating_vehicle_info_sum_fields.scrap_time_check":
		if e.complexity.OperatingVehicleInfoSumFields.ScrapTimeCheck == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoSumFields.ScrapTimeCheck(childComplexity), true

	case "operating_vehicle_info_sum_fields.temporary_library":
		if e.complexity.OperatingVehicleInfoSumFields.TemporaryLibrary == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoSumFields.TemporaryLibrary(childComplexity), true

	case "operating_vehicle_info_sum_fields.temporary_transport_bureau":
		if e.complexity.OperatingVehicleInfoSumFields.TemporaryTransportBureau == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoSumFields.TemporaryTransportBureau(childComplexity), true

	case "operating_vehicle_info_var_pop_fields.muck_truck_type":
		if e.complexity.OperatingVehicleInfoVarPopFields.MuckTruckType == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoVarPopFields.MuckTruckType(childComplexity), true

	case "operating_vehicle_info_var_pop_fields.operating_vehicle_id":
		if e.complexity.OperatingVehicleInfoVarPopFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoVarPopFields.OperatingVehicleID(childComplexity), true

	case "operating_vehicle_info_var_pop_fields.platform":
		if e.complexity.OperatingVehicleInfoVarPopFields.Platform == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoVarPopFields.Platform(childComplexity), true

	case "operating_vehicle_info_var_pop_fields.scrap_time_check":
		if e.complexity.OperatingVehicleInfoVarPopFields.ScrapTimeCheck == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoVarPopFields.ScrapTimeCheck(childComplexity), true

	case "operating_vehicle_info_var_pop_fields.temporary_library":
		if e.complexity.OperatingVehicleInfoVarPopFields.TemporaryLibrary == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoVarPopFields.TemporaryLibrary(childComplexity), true

	case "operating_vehicle_info_var_pop_fields.temporary_transport_bureau":
		if e.complexity.OperatingVehicleInfoVarPopFields.TemporaryTransportBureau == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoVarPopFields.TemporaryTransportBureau(childComplexity), true

	case "operating_vehicle_info_var_samp_fields.muck_truck_type":
		if e.complexity.OperatingVehicleInfoVarSampFields.MuckTruckType == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoVarSampFields.MuckTruckType(childComplexity), true

	case "operating_vehicle_info_var_samp_fields.operating_vehicle_id":
		if e.complexity.OperatingVehicleInfoVarSampFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoVarSampFields.OperatingVehicleID(childComplexity), true

	case "operating_vehicle_info_var_samp_fields.platform":
		if e.complexity.OperatingVehicleInfoVarSampFields.Platform == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoVarSampFields.Platform(childComplexity), true

	case "operating_vehicle_info_var_samp_fields.scrap_time_check":
		if e.complexity.OperatingVehicleInfoVarSampFields.ScrapTimeCheck == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoVarSampFields.ScrapTimeCheck(childComplexity), true

	case "operating_vehicle_info_var_samp_fields.temporary_library":
		if e.complexity.OperatingVehicleInfoVarSampFields.TemporaryLibrary == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoVarSampFields.TemporaryLibrary(childComplexity), true

	case "operating_vehicle_info_var_samp_fields.temporary_transport_bureau":
		if e.complexity.OperatingVehicleInfoVarSampFields.TemporaryTransportBureau == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoVarSampFields.TemporaryTransportBureau(childComplexity), true

	case "operating_vehicle_info_variance_fields.muck_truck_type":
		if e.complexity.OperatingVehicleInfoVarianceFields.MuckTruckType == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoVarianceFields.MuckTruckType(childComplexity), true

	case "operating_vehicle_info_variance_fields.operating_vehicle_id":
		if e.complexity.OperatingVehicleInfoVarianceFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoVarianceFields.OperatingVehicleID(childComplexity), true

	case "operating_vehicle_info_variance_fields.platform":
		if e.complexity.OperatingVehicleInfoVarianceFields.Platform == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoVarianceFields.Platform(childComplexity), true

	case "operating_vehicle_info_variance_fields.scrap_time_check":
		if e.complexity.OperatingVehicleInfoVarianceFields.ScrapTimeCheck == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoVarianceFields.ScrapTimeCheck(childComplexity), true

	case "operating_vehicle_info_variance_fields.temporary_library":
		if e.complexity.OperatingVehicleInfoVarianceFields.TemporaryLibrary == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoVarianceFields.TemporaryLibrary(childComplexity), true

	case "operating_vehicle_info_variance_fields.temporary_transport_bureau":
		if e.complexity.OperatingVehicleInfoVarianceFields.TemporaryTransportBureau == nil {
			break
		}

		return e.complexity.OperatingVehicleInfoVarianceFields.TemporaryTransportBureau(childComplexity), true

	case "owner_info.address":
		if e.complexity.OwnerInfo.Address == nil {
			break
		}

		return e.complexity.OwnerInfo.Address(childComplexity), true

	case "owner_info.agent":
		if e.complexity.OwnerInfo.Agent == nil {
			break
		}

		return e.complexity.OwnerInfo.Agent(childComplexity), true

	case "owner_info.cellphone":
		if e.complexity.OwnerInfo.Cellphone == nil {
			break
		}

		return e.complexity.OwnerInfo.Cellphone(childComplexity), true

	case "owner_info.create_at":
		if e.complexity.OwnerInfo.CreateAt == nil {
			break
		}

		return e.complexity.OwnerInfo.CreateAt(childComplexity), true

	case "owner_info.create_by":
		if e.complexity.OwnerInfo.CreateBy == nil {
			break
		}

		return e.complexity.OwnerInfo.CreateBy(childComplexity), true

	case "owner_info.delete_at":
		if e.complexity.OwnerInfo.DeleteAt == nil {
			break
		}

		return e.complexity.OwnerInfo.DeleteAt(childComplexity), true

	case "owner_info.delete_by":
		if e.complexity.OwnerInfo.DeleteBy == nil {
			break
		}

		return e.complexity.OwnerInfo.DeleteBy(childComplexity), true

	case "owner_info.department_id":
		if e.complexity.OwnerInfo.DepartmentID == nil {
			break
		}

		return e.complexity.OwnerInfo.DepartmentID(childComplexity), true

	case "owner_info.email":
		if e.complexity.OwnerInfo.Email == nil {
			break
		}

		return e.complexity.OwnerInfo.Email(childComplexity), true

	case "owner_info.expiry_date":
		if e.complexity.OwnerInfo.ExpiryDate == nil {
			break
		}

		return e.complexity.OwnerInfo.ExpiryDate(childComplexity), true

	case "owner_info.id":
		if e.complexity.OwnerInfo.ID == nil {
			break
		}

		return e.complexity.OwnerInfo.ID(childComplexity), true

	case "owner_info.id_number":
		if e.complexity.OwnerInfo.IDNumber == nil {
			break
		}

		return e.complexity.OwnerInfo.IDNumber(childComplexity), true

	case "owner_info.is_delete":
		if e.complexity.OwnerInfo.IsDelete == nil {
			break
		}

		return e.complexity.OwnerInfo.IsDelete(childComplexity), true

	case "owner_info.name":
		if e.complexity.OwnerInfo.Name == nil {
			break
		}

		return e.complexity.OwnerInfo.Name(childComplexity), true

	case "owner_info.operator":
		if e.complexity.OwnerInfo.Operator == nil {
			break
		}

		return e.complexity.OwnerInfo.Operator(childComplexity), true

	case "owner_info.owner_id":
		if e.complexity.OwnerInfo.OwnerID == nil {
			break
		}

		return e.complexity.OwnerInfo.OwnerID(childComplexity), true

	case "owner_info.remarks":
		if e.complexity.OwnerInfo.Remarks == nil {
			break
		}

		return e.complexity.OwnerInfo.Remarks(childComplexity), true

	case "owner_info.sex":
		if e.complexity.OwnerInfo.Sex == nil {
			break
		}

		return e.complexity.OwnerInfo.Sex(childComplexity), true

	case "owner_info.telephone":
		if e.complexity.OwnerInfo.Telephone == nil {
			break
		}

		return e.complexity.OwnerInfo.Telephone(childComplexity), true

	case "owner_info.update_at":
		if e.complexity.OwnerInfo.UpdateAt == nil {
			break
		}

		return e.complexity.OwnerInfo.UpdateAt(childComplexity), true

	case "owner_info.update_by":
		if e.complexity.OwnerInfo.UpdateBy == nil {
			break
		}

		return e.complexity.OwnerInfo.UpdateBy(childComplexity), true

	case "owner_info_aggregate.aggregate":
		if e.complexity.OwnerInfoAggregate.Aggregate == nil {
			break
		}

		return e.complexity.OwnerInfoAggregate.Aggregate(childComplexity), true

	case "owner_info_aggregate.nodes":
		if e.complexity.OwnerInfoAggregate.Nodes == nil {
			break
		}

		return e.complexity.OwnerInfoAggregate.Nodes(childComplexity), true

	case "owner_info_aggregate_fields.avg":
		if e.complexity.OwnerInfoAggregateFields.Avg == nil {
			break
		}

		return e.complexity.OwnerInfoAggregateFields.Avg(childComplexity), true

	case "owner_info_aggregate_fields.count":
		if e.complexity.OwnerInfoAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_owner_info_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.OwnerInfoAggregateFields.Count(childComplexity, args["columns"].([]model.OwnerInfoSelectColumn), args["distinct"].(*bool)), true

	case "owner_info_aggregate_fields.max":
		if e.complexity.OwnerInfoAggregateFields.Max == nil {
			break
		}

		return e.complexity.OwnerInfoAggregateFields.Max(childComplexity), true

	case "owner_info_aggregate_fields.min":
		if e.complexity.OwnerInfoAggregateFields.Min == nil {
			break
		}

		return e.complexity.OwnerInfoAggregateFields.Min(childComplexity), true

	case "owner_info_aggregate_fields.stddev":
		if e.complexity.OwnerInfoAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.OwnerInfoAggregateFields.Stddev(childComplexity), true

	case "owner_info_aggregate_fields.stddev_pop":
		if e.complexity.OwnerInfoAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.OwnerInfoAggregateFields.StddevPop(childComplexity), true

	case "owner_info_aggregate_fields.stddev_samp":
		if e.complexity.OwnerInfoAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.OwnerInfoAggregateFields.StddevSamp(childComplexity), true

	case "owner_info_aggregate_fields.sum":
		if e.complexity.OwnerInfoAggregateFields.Sum == nil {
			break
		}

		return e.complexity.OwnerInfoAggregateFields.Sum(childComplexity), true

	case "owner_info_aggregate_fields.var_pop":
		if e.complexity.OwnerInfoAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.OwnerInfoAggregateFields.VarPop(childComplexity), true

	case "owner_info_aggregate_fields.var_samp":
		if e.complexity.OwnerInfoAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.OwnerInfoAggregateFields.VarSamp(childComplexity), true

	case "owner_info_aggregate_fields.variance":
		if e.complexity.OwnerInfoAggregateFields.Variance == nil {
			break
		}

		return e.complexity.OwnerInfoAggregateFields.Variance(childComplexity), true

	case "owner_info_avg_fields.id":
		if e.complexity.OwnerInfoAvgFields.ID == nil {
			break
		}

		return e.complexity.OwnerInfoAvgFields.ID(childComplexity), true

	case "owner_info_avg_fields.sex":
		if e.complexity.OwnerInfoAvgFields.Sex == nil {
			break
		}

		return e.complexity.OwnerInfoAvgFields.Sex(childComplexity), true

	case "owner_info_max_fields.address":
		if e.complexity.OwnerInfoMaxFields.Address == nil {
			break
		}

		return e.complexity.OwnerInfoMaxFields.Address(childComplexity), true

	case "owner_info_max_fields.agent":
		if e.complexity.OwnerInfoMaxFields.Agent == nil {
			break
		}

		return e.complexity.OwnerInfoMaxFields.Agent(childComplexity), true

	case "owner_info_max_fields.cellphone":
		if e.complexity.OwnerInfoMaxFields.Cellphone == nil {
			break
		}

		return e.complexity.OwnerInfoMaxFields.Cellphone(childComplexity), true

	case "owner_info_max_fields.create_at":
		if e.complexity.OwnerInfoMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.OwnerInfoMaxFields.CreateAt(childComplexity), true

	case "owner_info_max_fields.create_by":
		if e.complexity.OwnerInfoMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.OwnerInfoMaxFields.CreateBy(childComplexity), true

	case "owner_info_max_fields.delete_at":
		if e.complexity.OwnerInfoMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.OwnerInfoMaxFields.DeleteAt(childComplexity), true

	case "owner_info_max_fields.delete_by":
		if e.complexity.OwnerInfoMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.OwnerInfoMaxFields.DeleteBy(childComplexity), true

	case "owner_info_max_fields.department_id":
		if e.complexity.OwnerInfoMaxFields.DepartmentID == nil {
			break
		}

		return e.complexity.OwnerInfoMaxFields.DepartmentID(childComplexity), true

	case "owner_info_max_fields.email":
		if e.complexity.OwnerInfoMaxFields.Email == nil {
			break
		}

		return e.complexity.OwnerInfoMaxFields.Email(childComplexity), true

	case "owner_info_max_fields.expiry_date":
		if e.complexity.OwnerInfoMaxFields.ExpiryDate == nil {
			break
		}

		return e.complexity.OwnerInfoMaxFields.ExpiryDate(childComplexity), true

	case "owner_info_max_fields.id":
		if e.complexity.OwnerInfoMaxFields.ID == nil {
			break
		}

		return e.complexity.OwnerInfoMaxFields.ID(childComplexity), true

	case "owner_info_max_fields.id_number":
		if e.complexity.OwnerInfoMaxFields.IDNumber == nil {
			break
		}

		return e.complexity.OwnerInfoMaxFields.IDNumber(childComplexity), true

	case "owner_info_max_fields.name":
		if e.complexity.OwnerInfoMaxFields.Name == nil {
			break
		}

		return e.complexity.OwnerInfoMaxFields.Name(childComplexity), true

	case "owner_info_max_fields.operator":
		if e.complexity.OwnerInfoMaxFields.Operator == nil {
			break
		}

		return e.complexity.OwnerInfoMaxFields.Operator(childComplexity), true

	case "owner_info_max_fields.owner_id":
		if e.complexity.OwnerInfoMaxFields.OwnerID == nil {
			break
		}

		return e.complexity.OwnerInfoMaxFields.OwnerID(childComplexity), true

	case "owner_info_max_fields.remarks":
		if e.complexity.OwnerInfoMaxFields.Remarks == nil {
			break
		}

		return e.complexity.OwnerInfoMaxFields.Remarks(childComplexity), true

	case "owner_info_max_fields.sex":
		if e.complexity.OwnerInfoMaxFields.Sex == nil {
			break
		}

		return e.complexity.OwnerInfoMaxFields.Sex(childComplexity), true

	case "owner_info_max_fields.telephone":
		if e.complexity.OwnerInfoMaxFields.Telephone == nil {
			break
		}

		return e.complexity.OwnerInfoMaxFields.Telephone(childComplexity), true

	case "owner_info_max_fields.update_at":
		if e.complexity.OwnerInfoMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.OwnerInfoMaxFields.UpdateAt(childComplexity), true

	case "owner_info_max_fields.update_by":
		if e.complexity.OwnerInfoMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.OwnerInfoMaxFields.UpdateBy(childComplexity), true

	case "owner_info_min_fields.address":
		if e.complexity.OwnerInfoMinFields.Address == nil {
			break
		}

		return e.complexity.OwnerInfoMinFields.Address(childComplexity), true

	case "owner_info_min_fields.agent":
		if e.complexity.OwnerInfoMinFields.Agent == nil {
			break
		}

		return e.complexity.OwnerInfoMinFields.Agent(childComplexity), true

	case "owner_info_min_fields.cellphone":
		if e.complexity.OwnerInfoMinFields.Cellphone == nil {
			break
		}

		return e.complexity.OwnerInfoMinFields.Cellphone(childComplexity), true

	case "owner_info_min_fields.create_at":
		if e.complexity.OwnerInfoMinFields.CreateAt == nil {
			break
		}

		return e.complexity.OwnerInfoMinFields.CreateAt(childComplexity), true

	case "owner_info_min_fields.create_by":
		if e.complexity.OwnerInfoMinFields.CreateBy == nil {
			break
		}

		return e.complexity.OwnerInfoMinFields.CreateBy(childComplexity), true

	case "owner_info_min_fields.delete_at":
		if e.complexity.OwnerInfoMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.OwnerInfoMinFields.DeleteAt(childComplexity), true

	case "owner_info_min_fields.delete_by":
		if e.complexity.OwnerInfoMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.OwnerInfoMinFields.DeleteBy(childComplexity), true

	case "owner_info_min_fields.department_id":
		if e.complexity.OwnerInfoMinFields.DepartmentID == nil {
			break
		}

		return e.complexity.OwnerInfoMinFields.DepartmentID(childComplexity), true

	case "owner_info_min_fields.email":
		if e.complexity.OwnerInfoMinFields.Email == nil {
			break
		}

		return e.complexity.OwnerInfoMinFields.Email(childComplexity), true

	case "owner_info_min_fields.expiry_date":
		if e.complexity.OwnerInfoMinFields.ExpiryDate == nil {
			break
		}

		return e.complexity.OwnerInfoMinFields.ExpiryDate(childComplexity), true

	case "owner_info_min_fields.id":
		if e.complexity.OwnerInfoMinFields.ID == nil {
			break
		}

		return e.complexity.OwnerInfoMinFields.ID(childComplexity), true

	case "owner_info_min_fields.id_number":
		if e.complexity.OwnerInfoMinFields.IDNumber == nil {
			break
		}

		return e.complexity.OwnerInfoMinFields.IDNumber(childComplexity), true

	case "owner_info_min_fields.name":
		if e.complexity.OwnerInfoMinFields.Name == nil {
			break
		}

		return e.complexity.OwnerInfoMinFields.Name(childComplexity), true

	case "owner_info_min_fields.operator":
		if e.complexity.OwnerInfoMinFields.Operator == nil {
			break
		}

		return e.complexity.OwnerInfoMinFields.Operator(childComplexity), true

	case "owner_info_min_fields.owner_id":
		if e.complexity.OwnerInfoMinFields.OwnerID == nil {
			break
		}

		return e.complexity.OwnerInfoMinFields.OwnerID(childComplexity), true

	case "owner_info_min_fields.remarks":
		if e.complexity.OwnerInfoMinFields.Remarks == nil {
			break
		}

		return e.complexity.OwnerInfoMinFields.Remarks(childComplexity), true

	case "owner_info_min_fields.sex":
		if e.complexity.OwnerInfoMinFields.Sex == nil {
			break
		}

		return e.complexity.OwnerInfoMinFields.Sex(childComplexity), true

	case "owner_info_min_fields.telephone":
		if e.complexity.OwnerInfoMinFields.Telephone == nil {
			break
		}

		return e.complexity.OwnerInfoMinFields.Telephone(childComplexity), true

	case "owner_info_min_fields.update_at":
		if e.complexity.OwnerInfoMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.OwnerInfoMinFields.UpdateAt(childComplexity), true

	case "owner_info_min_fields.update_by":
		if e.complexity.OwnerInfoMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.OwnerInfoMinFields.UpdateBy(childComplexity), true

	case "owner_info_mutation_response.affected_rows":
		if e.complexity.OwnerInfoMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.OwnerInfoMutationResponse.AffectedRows(childComplexity), true

	case "owner_info_mutation_response.returning":
		if e.complexity.OwnerInfoMutationResponse.Returning == nil {
			break
		}

		return e.complexity.OwnerInfoMutationResponse.Returning(childComplexity), true

	case "owner_info_stddev_fields.id":
		if e.complexity.OwnerInfoStddevFields.ID == nil {
			break
		}

		return e.complexity.OwnerInfoStddevFields.ID(childComplexity), true

	case "owner_info_stddev_fields.sex":
		if e.complexity.OwnerInfoStddevFields.Sex == nil {
			break
		}

		return e.complexity.OwnerInfoStddevFields.Sex(childComplexity), true

	case "owner_info_stddev_pop_fields.id":
		if e.complexity.OwnerInfoStddevPopFields.ID == nil {
			break
		}

		return e.complexity.OwnerInfoStddevPopFields.ID(childComplexity), true

	case "owner_info_stddev_pop_fields.sex":
		if e.complexity.OwnerInfoStddevPopFields.Sex == nil {
			break
		}

		return e.complexity.OwnerInfoStddevPopFields.Sex(childComplexity), true

	case "owner_info_stddev_samp_fields.id":
		if e.complexity.OwnerInfoStddevSampFields.ID == nil {
			break
		}

		return e.complexity.OwnerInfoStddevSampFields.ID(childComplexity), true

	case "owner_info_stddev_samp_fields.sex":
		if e.complexity.OwnerInfoStddevSampFields.Sex == nil {
			break
		}

		return e.complexity.OwnerInfoStddevSampFields.Sex(childComplexity), true

	case "owner_info_sum_fields.id":
		if e.complexity.OwnerInfoSumFields.ID == nil {
			break
		}

		return e.complexity.OwnerInfoSumFields.ID(childComplexity), true

	case "owner_info_sum_fields.sex":
		if e.complexity.OwnerInfoSumFields.Sex == nil {
			break
		}

		return e.complexity.OwnerInfoSumFields.Sex(childComplexity), true

	case "owner_info_var_pop_fields.id":
		if e.complexity.OwnerInfoVarPopFields.ID == nil {
			break
		}

		return e.complexity.OwnerInfoVarPopFields.ID(childComplexity), true

	case "owner_info_var_pop_fields.sex":
		if e.complexity.OwnerInfoVarPopFields.Sex == nil {
			break
		}

		return e.complexity.OwnerInfoVarPopFields.Sex(childComplexity), true

	case "owner_info_var_samp_fields.id":
		if e.complexity.OwnerInfoVarSampFields.ID == nil {
			break
		}

		return e.complexity.OwnerInfoVarSampFields.ID(childComplexity), true

	case "owner_info_var_samp_fields.sex":
		if e.complexity.OwnerInfoVarSampFields.Sex == nil {
			break
		}

		return e.complexity.OwnerInfoVarSampFields.Sex(childComplexity), true

	case "owner_info_variance_fields.id":
		if e.complexity.OwnerInfoVarianceFields.ID == nil {
			break
		}

		return e.complexity.OwnerInfoVarianceFields.ID(childComplexity), true

	case "owner_info_variance_fields.sex":
		if e.complexity.OwnerInfoVarianceFields.Sex == nil {
			break
		}

		return e.complexity.OwnerInfoVarianceFields.Sex(childComplexity), true

	case "vehicle_info.business_scope":
		if e.complexity.VehicleInfo.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfo.BusinessScope(childComplexity), true

	case "vehicle_info.car_rental_price":
		if e.complexity.VehicleInfo.CarRentalPrice == nil {
			break
		}

		return e.complexity.VehicleInfo.CarRentalPrice(childComplexity), true

	case "vehicle_info.check_state":
		if e.complexity.VehicleInfo.CheckState == nil {
			break
		}

		return e.complexity.VehicleInfo.CheckState(childComplexity), true

	case "vehicle_info.create_at":
		if e.complexity.VehicleInfo.CreateAt == nil {
			break
		}

		return e.complexity.VehicleInfo.CreateAt(childComplexity), true

	case "vehicle_info.create_by":
		if e.complexity.VehicleInfo.CreateBy == nil {
			break
		}

		return e.complexity.VehicleInfo.CreateBy(childComplexity), true

	case "vehicle_info.delete_at":
		if e.complexity.VehicleInfo.DeleteAt == nil {
			break
		}

		return e.complexity.VehicleInfo.DeleteAt(childComplexity), true

	case "vehicle_info.delete_by":
		if e.complexity.VehicleInfo.DeleteBy == nil {
			break
		}

		return e.complexity.VehicleInfo.DeleteBy(childComplexity), true

	case "vehicle_info.department_id":
		if e.complexity.VehicleInfo.DepartmentID == nil {
			break
		}

		return e.complexity.VehicleInfo.DepartmentID(childComplexity), true

	case "vehicle_info.driving_licensee_pic":
		if e.complexity.VehicleInfo.DrivingLicenseePic == nil {
			break
		}

		return e.complexity.VehicleInfo.DrivingLicenseePic(childComplexity), true

	case "vehicle_info.enterprise_id":
		if e.complexity.VehicleInfo.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleInfo.EnterpriseID(childComplexity), true

	case "vehicle_info.heavy":
		if e.complexity.VehicleInfo.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfo.Heavy(childComplexity), true

	case "vehicle_info.id":
		if e.complexity.VehicleInfo.ID == nil {
			break
		}

		return e.complexity.VehicleInfo.ID(childComplexity), true

	case "vehicle_info.industry_category":
		if e.complexity.VehicleInfo.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfo.IndustryCategory(childComplexity), true

	case "vehicle_info.inspection_date":
		if e.complexity.VehicleInfo.InspectionDate == nil {
			break
		}

		return e.complexity.VehicleInfo.InspectionDate(childComplexity), true

	case "vehicle_info.insurance_company":
		if e.complexity.VehicleInfo.InsuranceCompany == nil {
			break
		}

		return e.complexity.VehicleInfo.InsuranceCompany(childComplexity), true

	case "vehicle_info.insurance_date":
		if e.complexity.VehicleInfo.InsuranceDate == nil {
			break
		}

		return e.complexity.VehicleInfo.InsuranceDate(childComplexity), true

	case "vehicle_info.is_active":
		if e.complexity.VehicleInfo.IsActive == nil {
			break
		}

		return e.complexity.VehicleInfo.IsActive(childComplexity), true

	case "vehicle_info.is_apply_install_terminal":
		if e.complexity.VehicleInfo.IsApplyInstallTerminal == nil {
			break
		}

		return e.complexity.VehicleInfo.IsApplyInstallTerminal(childComplexity), true

	case "vehicle_info.is_complete":
		if e.complexity.VehicleInfo.IsComplete == nil {
			break
		}

		return e.complexity.VehicleInfo.IsComplete(childComplexity), true

	case "vehicle_info.is_delete":
		if e.complexity.VehicleInfo.IsDelete == nil {
			break
		}

		return e.complexity.VehicleInfo.IsDelete(childComplexity), true

	case "vehicle_info.is_import":
		if e.complexity.VehicleInfo.IsImport == nil {
			break
		}

		return e.complexity.VehicleInfo.IsImport(childComplexity), true

	case "vehicle_info.is_input":
		if e.complexity.VehicleInfo.IsInput == nil {
			break
		}

		return e.complexity.VehicleInfo.IsInput(childComplexity), true

	case "vehicle_info.is_upload_province":
		if e.complexity.VehicleInfo.IsUploadProvince == nil {
			break
		}

		return e.complexity.VehicleInfo.IsUploadProvince(childComplexity), true

	case "vehicle_info.license_plate_color":
		if e.complexity.VehicleInfo.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfo.LicensePlateColor(childComplexity), true

	case "vehicle_info.license_plate_number":
		if e.complexity.VehicleInfo.LicensePlateNumber == nil {
			break
		}

		return e.complexity.VehicleInfo.LicensePlateNumber(childComplexity), true

	case "vehicle_info.license_plate_type":
		if e.complexity.VehicleInfo.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfo.LicensePlateType(childComplexity), true

	case "vehicle_info.muck_truck_id":
		if e.complexity.VehicleInfo.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfo.MuckTruckID(childComplexity), true

	case "vehicle_info.operating_route":
		if e.complexity.VehicleInfo.OperatingRoute == nil {
			break
		}

		return e.complexity.VehicleInfo.OperatingRoute(childComplexity), true

	case "vehicle_info.operating_state":
		if e.complexity.VehicleInfo.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfo.OperatingState(childComplexity), true

	case "vehicle_info.operating_type":
		if e.complexity.VehicleInfo.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfo.OperatingType(childComplexity), true

	case "vehicle_info.operating_vehicle_id":
		if e.complexity.VehicleInfo.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfo.OperatingVehicleID(childComplexity), true

	case "vehicle_info.owner":
		if e.complexity.VehicleInfo.Owner == nil {
			break
		}

		return e.complexity.VehicleInfo.Owner(childComplexity), true

	case "vehicle_info.quasi_driving_models":
		if e.complexity.VehicleInfo.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.VehicleInfo.QuasiDrivingModels(childComplexity), true

	case "vehicle_info.record_at":
		if e.complexity.VehicleInfo.RecordAt == nil {
			break
		}

		return e.complexity.VehicleInfo.RecordAt(childComplexity), true

	case "vehicle_info.record_by":
		if e.complexity.VehicleInfo.RecordBy == nil {
			break
		}

		return e.complexity.VehicleInfo.RecordBy(childComplexity), true

	case "vehicle_info.remark_in":
		if e.complexity.VehicleInfo.RemarkIn == nil {
			break
		}

		return e.complexity.VehicleInfo.RemarkIn(childComplexity), true

	case "vehicle_info.remarks":
		if e.complexity.VehicleInfo.Remarks == nil {
			break
		}

		return e.complexity.VehicleInfo.Remarks(childComplexity), true

	case "vehicle_info.retirement_date":
		if e.complexity.VehicleInfo.RetirementDate == nil {
			break
		}

		return e.complexity.VehicleInfo.RetirementDate(childComplexity), true

	case "vehicle_info.road_transport_license_number":
		if e.complexity.VehicleInfo.RoadTransportLicenseNumber == nil {
			break
		}

		return e.complexity.VehicleInfo.RoadTransportLicenseNumber(childComplexity), true

	case "vehicle_info.seats":
		if e.complexity.VehicleInfo.Seats == nil {
			break
		}

		return e.complexity.VehicleInfo.Seats(childComplexity), true

	case "vehicle_info.terminal_id":
		if e.complexity.VehicleInfo.TerminalID == nil {
			break
		}

		return e.complexity.VehicleInfo.TerminalID(childComplexity), true

	case "vehicle_info.update_at":
		if e.complexity.VehicleInfo.UpdateAt == nil {
			break
		}

		return e.complexity.VehicleInfo.UpdateAt(childComplexity), true

	case "vehicle_info.update_by":
		if e.complexity.VehicleInfo.UpdateBy == nil {
			break
		}

		return e.complexity.VehicleInfo.UpdateBy(childComplexity), true

	case "vehicle_info.update_time_in":
		if e.complexity.VehicleInfo.UpdateTimeIn == nil {
			break
		}

		return e.complexity.VehicleInfo.UpdateTimeIn(childComplexity), true

	case "vehicle_info.use_nature":
		if e.complexity.VehicleInfo.UseNature == nil {
			break
		}

		return e.complexity.VehicleInfo.UseNature(childComplexity), true

	case "vehicle_info.vehicle_brand":
		if e.complexity.VehicleInfo.VehicleBrand == nil {
			break
		}

		return e.complexity.VehicleInfo.VehicleBrand(childComplexity), true

	case "vehicle_info.vehicle_displacement":
		if e.complexity.VehicleInfo.VehicleDisplacement == nil {
			break
		}

		return e.complexity.VehicleInfo.VehicleDisplacement(childComplexity), true

	case "vehicle_info.vehicle_id":
		if e.complexity.VehicleInfo.VehicleID == nil {
			break
		}

		return e.complexity.VehicleInfo.VehicleID(childComplexity), true

	case "vehicle_info.vehicle_identification_number":
		if e.complexity.VehicleInfo.VehicleIdentificationNumber == nil {
			break
		}

		return e.complexity.VehicleInfo.VehicleIdentificationNumber(childComplexity), true

	case "vehicle_info.vehicle_maintenances":
		if e.complexity.VehicleInfo.VehicleMaintenances == nil {
			break
		}

		return e.complexity.VehicleInfo.VehicleMaintenances(childComplexity), true

	case "vehicle_info.vehicle_manager":
		if e.complexity.VehicleInfo.VehicleManager == nil {
			break
		}

		return e.complexity.VehicleInfo.VehicleManager(childComplexity), true

	case "vehicle_info.vehicle_manager_id_card":
		if e.complexity.VehicleInfo.VehicleManagerIDCard == nil {
			break
		}

		return e.complexity.VehicleInfo.VehicleManagerIDCard(childComplexity), true

	case "vehicle_info.vehicle_manager_phone":
		if e.complexity.VehicleInfo.VehicleManagerPhone == nil {
			break
		}

		return e.complexity.VehicleInfo.VehicleManagerPhone(childComplexity), true

	case "vehicle_info.vehicle_state":
		if e.complexity.VehicleInfo.VehicleState == nil {
			break
		}

		return e.complexity.VehicleInfo.VehicleState(childComplexity), true

	case "vehicle_info.vehicle_type":
		if e.complexity.VehicleInfo.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfo.VehicleType(childComplexity), true

	case "vehicle_info_aggregate.aggregate":
		if e.complexity.VehicleInfoAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VehicleInfoAggregate.Aggregate(childComplexity), true

	case "vehicle_info_aggregate.nodes":
		if e.complexity.VehicleInfoAggregate.Nodes == nil {
			break
		}

		return e.complexity.VehicleInfoAggregate.Nodes(childComplexity), true

	case "vehicle_info_aggregate_fields.avg":
		if e.complexity.VehicleInfoAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VehicleInfoAggregateFields.Avg(childComplexity), true

	case "vehicle_info_aggregate_fields.count":
		if e.complexity.VehicleInfoAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_vehicle_info_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.VehicleInfoAggregateFields.Count(childComplexity, args["columns"].([]model.VehicleInfoSelectColumn), args["distinct"].(*bool)), true

	case "vehicle_info_aggregate_fields.max":
		if e.complexity.VehicleInfoAggregateFields.Max == nil {
			break
		}

		return e.complexity.VehicleInfoAggregateFields.Max(childComplexity), true

	case "vehicle_info_aggregate_fields.min":
		if e.complexity.VehicleInfoAggregateFields.Min == nil {
			break
		}

		return e.complexity.VehicleInfoAggregateFields.Min(childComplexity), true

	case "vehicle_info_aggregate_fields.stddev":
		if e.complexity.VehicleInfoAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VehicleInfoAggregateFields.Stddev(childComplexity), true

	case "vehicle_info_aggregate_fields.stddev_pop":
		if e.complexity.VehicleInfoAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VehicleInfoAggregateFields.StddevPop(childComplexity), true

	case "vehicle_info_aggregate_fields.stddev_samp":
		if e.complexity.VehicleInfoAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VehicleInfoAggregateFields.StddevSamp(childComplexity), true

	case "vehicle_info_aggregate_fields.sum":
		if e.complexity.VehicleInfoAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VehicleInfoAggregateFields.Sum(childComplexity), true

	case "vehicle_info_aggregate_fields.var_pop":
		if e.complexity.VehicleInfoAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VehicleInfoAggregateFields.VarPop(childComplexity), true

	case "vehicle_info_aggregate_fields.var_samp":
		if e.complexity.VehicleInfoAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VehicleInfoAggregateFields.VarSamp(childComplexity), true

	case "vehicle_info_aggregate_fields.variance":
		if e.complexity.VehicleInfoAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VehicleInfoAggregateFields.Variance(childComplexity), true

	case "vehicle_info_avg_fields.business_scope":
		if e.complexity.VehicleInfoAvgFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.BusinessScope(childComplexity), true

	case "vehicle_info_avg_fields.car_rental_price":
		if e.complexity.VehicleInfoAvgFields.CarRentalPrice == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.CarRentalPrice(childComplexity), true

	case "vehicle_info_avg_fields.check_state":
		if e.complexity.VehicleInfoAvgFields.CheckState == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.CheckState(childComplexity), true

	case "vehicle_info_avg_fields.heavy":
		if e.complexity.VehicleInfoAvgFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.Heavy(childComplexity), true

	case "vehicle_info_avg_fields.id":
		if e.complexity.VehicleInfoAvgFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.ID(childComplexity), true

	case "vehicle_info_avg_fields.industry_category":
		if e.complexity.VehicleInfoAvgFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.IndustryCategory(childComplexity), true

	case "vehicle_info_avg_fields.insurance_company":
		if e.complexity.VehicleInfoAvgFields.InsuranceCompany == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.InsuranceCompany(childComplexity), true

	case "vehicle_info_avg_fields.license_plate_color":
		if e.complexity.VehicleInfoAvgFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_avg_fields.license_plate_type":
		if e.complexity.VehicleInfoAvgFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.LicensePlateType(childComplexity), true

	case "vehicle_info_avg_fields.muck_truck_id":
		if e.complexity.VehicleInfoAvgFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.MuckTruckID(childComplexity), true

	case "vehicle_info_avg_fields.operating_state":
		if e.complexity.VehicleInfoAvgFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.OperatingState(childComplexity), true

	case "vehicle_info_avg_fields.operating_type":
		if e.complexity.VehicleInfoAvgFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.OperatingType(childComplexity), true

	case "vehicle_info_avg_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoAvgFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_avg_fields.quasi_driving_models":
		if e.complexity.VehicleInfoAvgFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.QuasiDrivingModels(childComplexity), true

	case "vehicle_info_avg_fields.seats":
		if e.complexity.VehicleInfoAvgFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.Seats(childComplexity), true

	case "vehicle_info_avg_fields.vehicle_brand":
		if e.complexity.VehicleInfoAvgFields.VehicleBrand == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.VehicleBrand(childComplexity), true

	case "vehicle_info_avg_fields.vehicle_state":
		if e.complexity.VehicleInfoAvgFields.VehicleState == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.VehicleState(childComplexity), true

	case "vehicle_info_avg_fields.vehicle_type":
		if e.complexity.VehicleInfoAvgFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.VehicleType(childComplexity), true

	case "vehicle_info_change_log.business_scope":
		if e.complexity.VehicleInfoChangeLog.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.BusinessScope(childComplexity), true

	case "vehicle_info_change_log.car_rental_price":
		if e.complexity.VehicleInfoChangeLog.CarRentalPrice == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.CarRentalPrice(childComplexity), true

	case "vehicle_info_change_log.check_state":
		if e.complexity.VehicleInfoChangeLog.CheckState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.CheckState(childComplexity), true

	case "vehicle_info_change_log.create_at":
		if e.complexity.VehicleInfoChangeLog.CreateAt == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.CreateAt(childComplexity), true

	case "vehicle_info_change_log.create_by":
		if e.complexity.VehicleInfoChangeLog.CreateBy == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.CreateBy(childComplexity), true

	case "vehicle_info_change_log.delete_at":
		if e.complexity.VehicleInfoChangeLog.DeleteAt == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.DeleteAt(childComplexity), true

	case "vehicle_info_change_log.delete_by":
		if e.complexity.VehicleInfoChangeLog.DeleteBy == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.DeleteBy(childComplexity), true

	case "vehicle_info_change_log.department_id":
		if e.complexity.VehicleInfoChangeLog.DepartmentID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.DepartmentID(childComplexity), true

	case "vehicle_info_change_log.driving_licensee_pic":
		if e.complexity.VehicleInfoChangeLog.DrivingLicenseePic == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.DrivingLicenseePic(childComplexity), true

	case "vehicle_info_change_log.enterprise_id":
		if e.complexity.VehicleInfoChangeLog.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.EnterpriseID(childComplexity), true

	case "vehicle_info_change_log.heavy":
		if e.complexity.VehicleInfoChangeLog.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.Heavy(childComplexity), true

	case "vehicle_info_change_log.id":
		if e.complexity.VehicleInfoChangeLog.ID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.ID(childComplexity), true

	case "vehicle_info_change_log.industry_category":
		if e.complexity.VehicleInfoChangeLog.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.IndustryCategory(childComplexity), true

	case "vehicle_info_change_log.inspection_date":
		if e.complexity.VehicleInfoChangeLog.InspectionDate == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.InspectionDate(childComplexity), true

	case "vehicle_info_change_log.insurance_company":
		if e.complexity.VehicleInfoChangeLog.InsuranceCompany == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.InsuranceCompany(childComplexity), true

	case "vehicle_info_change_log.insurance_date":
		if e.complexity.VehicleInfoChangeLog.InsuranceDate == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.InsuranceDate(childComplexity), true

	case "vehicle_info_change_log.is_active":
		if e.complexity.VehicleInfoChangeLog.IsActive == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.IsActive(childComplexity), true

	case "vehicle_info_change_log.is_apply_install_terminal":
		if e.complexity.VehicleInfoChangeLog.IsApplyInstallTerminal == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.IsApplyInstallTerminal(childComplexity), true

	case "vehicle_info_change_log.is_complete":
		if e.complexity.VehicleInfoChangeLog.IsComplete == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.IsComplete(childComplexity), true

	case "vehicle_info_change_log.is_delete":
		if e.complexity.VehicleInfoChangeLog.IsDelete == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.IsDelete(childComplexity), true

	case "vehicle_info_change_log.is_import":
		if e.complexity.VehicleInfoChangeLog.IsImport == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.IsImport(childComplexity), true

	case "vehicle_info_change_log.is_input":
		if e.complexity.VehicleInfoChangeLog.IsInput == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.IsInput(childComplexity), true

	case "vehicle_info_change_log.is_upload_province":
		if e.complexity.VehicleInfoChangeLog.IsUploadProvince == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.IsUploadProvince(childComplexity), true

	case "vehicle_info_change_log.license_plate_color":
		if e.complexity.VehicleInfoChangeLog.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.LicensePlateColor(childComplexity), true

	case "vehicle_info_change_log.license_plate_number":
		if e.complexity.VehicleInfoChangeLog.LicensePlateNumber == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.LicensePlateNumber(childComplexity), true

	case "vehicle_info_change_log.license_plate_type":
		if e.complexity.VehicleInfoChangeLog.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.LicensePlateType(childComplexity), true

	case "vehicle_info_change_log.muck_truck_id":
		if e.complexity.VehicleInfoChangeLog.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.MuckTruckID(childComplexity), true

	case "vehicle_info_change_log.operating_route":
		if e.complexity.VehicleInfoChangeLog.OperatingRoute == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.OperatingRoute(childComplexity), true

	case "vehicle_info_change_log.operating_state":
		if e.complexity.VehicleInfoChangeLog.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.OperatingState(childComplexity), true

	case "vehicle_info_change_log.operating_type":
		if e.complexity.VehicleInfoChangeLog.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.OperatingType(childComplexity), true

	case "vehicle_info_change_log.operating_vehicle_id":
		if e.complexity.VehicleInfoChangeLog.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.OperatingVehicleID(childComplexity), true

	case "vehicle_info_change_log.owner":
		if e.complexity.VehicleInfoChangeLog.Owner == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.Owner(childComplexity), true

	case "vehicle_info_change_log.quasi_driving_models":
		if e.complexity.VehicleInfoChangeLog.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.QuasiDrivingModels(childComplexity), true

	case "vehicle_info_change_log.record_at":
		if e.complexity.VehicleInfoChangeLog.RecordAt == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.RecordAt(childComplexity), true

	case "vehicle_info_change_log.record_by":
		if e.complexity.VehicleInfoChangeLog.RecordBy == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.RecordBy(childComplexity), true

	case "vehicle_info_change_log.remark_in":
		if e.complexity.VehicleInfoChangeLog.RemarkIn == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.RemarkIn(childComplexity), true

	case "vehicle_info_change_log.remarks":
		if e.complexity.VehicleInfoChangeLog.Remarks == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.Remarks(childComplexity), true

	case "vehicle_info_change_log.retirement_date":
		if e.complexity.VehicleInfoChangeLog.RetirementDate == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.RetirementDate(childComplexity), true

	case "vehicle_info_change_log.road_transport_license_number":
		if e.complexity.VehicleInfoChangeLog.RoadTransportLicenseNumber == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.RoadTransportLicenseNumber(childComplexity), true

	case "vehicle_info_change_log.seats":
		if e.complexity.VehicleInfoChangeLog.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.Seats(childComplexity), true

	case "vehicle_info_change_log.terminal_id":
		if e.complexity.VehicleInfoChangeLog.TerminalID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.TerminalID(childComplexity), true

	case "vehicle_info_change_log.update_at":
		if e.complexity.VehicleInfoChangeLog.UpdateAt == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.UpdateAt(childComplexity), true

	case "vehicle_info_change_log.update_by":
		if e.complexity.VehicleInfoChangeLog.UpdateBy == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.UpdateBy(childComplexity), true

	case "vehicle_info_change_log.update_time_in":
		if e.complexity.VehicleInfoChangeLog.UpdateTimeIn == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.UpdateTimeIn(childComplexity), true

	case "vehicle_info_change_log.use_nature":
		if e.complexity.VehicleInfoChangeLog.UseNature == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.UseNature(childComplexity), true

	case "vehicle_info_change_log.vehicle_brand":
		if e.complexity.VehicleInfoChangeLog.VehicleBrand == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.VehicleBrand(childComplexity), true

	case "vehicle_info_change_log.vehicle_displacement":
		if e.complexity.VehicleInfoChangeLog.VehicleDisplacement == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.VehicleDisplacement(childComplexity), true

	case "vehicle_info_change_log.vehicle_identification_number":
		if e.complexity.VehicleInfoChangeLog.VehicleIdentificationNumber == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.VehicleIdentificationNumber(childComplexity), true

	case "vehicle_info_change_log.vehicle_info_change_id":
		if e.complexity.VehicleInfoChangeLog.VehicleInfoChangeID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.VehicleInfoChangeID(childComplexity), true

	case "vehicle_info_change_log.vehicle_maintenances":
		if e.complexity.VehicleInfoChangeLog.VehicleMaintenances == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.VehicleMaintenances(childComplexity), true

	case "vehicle_info_change_log.vehicle_manager":
		if e.complexity.VehicleInfoChangeLog.VehicleManager == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.VehicleManager(childComplexity), true

	case "vehicle_info_change_log.vehicle_manager_id_card":
		if e.complexity.VehicleInfoChangeLog.VehicleManagerIDCard == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.VehicleManagerIDCard(childComplexity), true

	case "vehicle_info_change_log.vehicle_manager_phone":
		if e.complexity.VehicleInfoChangeLog.VehicleManagerPhone == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.VehicleManagerPhone(childComplexity), true

	case "vehicle_info_change_log.vehicle_state":
		if e.complexity.VehicleInfoChangeLog.VehicleState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.VehicleState(childComplexity), true

	case "vehicle_info_change_log.vehicle_type":
		if e.complexity.VehicleInfoChangeLog.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLog.VehicleType(childComplexity), true

	case "vehicle_info_change_log_aggregate.aggregate":
		if e.complexity.VehicleInfoChangeLogAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAggregate.Aggregate(childComplexity), true

	case "vehicle_info_change_log_aggregate.nodes":
		if e.complexity.VehicleInfoChangeLogAggregate.Nodes == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAggregate.Nodes(childComplexity), true

	case "vehicle_info_change_log_aggregate_fields.avg":
		if e.complexity.VehicleInfoChangeLogAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAggregateFields.Avg(childComplexity), true

	case "vehicle_info_change_log_aggregate_fields.count":
		if e.complexity.VehicleInfoChangeLogAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_vehicle_info_change_log_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.VehicleInfoChangeLogAggregateFields.Count(childComplexity, args["columns"].([]model.VehicleInfoChangeLogSelectColumn), args["distinct"].(*bool)), true

	case "vehicle_info_change_log_aggregate_fields.max":
		if e.complexity.VehicleInfoChangeLogAggregateFields.Max == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAggregateFields.Max(childComplexity), true

	case "vehicle_info_change_log_aggregate_fields.min":
		if e.complexity.VehicleInfoChangeLogAggregateFields.Min == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAggregateFields.Min(childComplexity), true

	case "vehicle_info_change_log_aggregate_fields.stddev":
		if e.complexity.VehicleInfoChangeLogAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAggregateFields.Stddev(childComplexity), true

	case "vehicle_info_change_log_aggregate_fields.stddev_pop":
		if e.complexity.VehicleInfoChangeLogAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAggregateFields.StddevPop(childComplexity), true

	case "vehicle_info_change_log_aggregate_fields.stddev_samp":
		if e.complexity.VehicleInfoChangeLogAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAggregateFields.StddevSamp(childComplexity), true

	case "vehicle_info_change_log_aggregate_fields.sum":
		if e.complexity.VehicleInfoChangeLogAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAggregateFields.Sum(childComplexity), true

	case "vehicle_info_change_log_aggregate_fields.var_pop":
		if e.complexity.VehicleInfoChangeLogAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAggregateFields.VarPop(childComplexity), true

	case "vehicle_info_change_log_aggregate_fields.var_samp":
		if e.complexity.VehicleInfoChangeLogAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAggregateFields.VarSamp(childComplexity), true

	case "vehicle_info_change_log_aggregate_fields.variance":
		if e.complexity.VehicleInfoChangeLogAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAggregateFields.Variance(childComplexity), true

	case "vehicle_info_change_log_avg_fields.business_scope":
		if e.complexity.VehicleInfoChangeLogAvgFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAvgFields.BusinessScope(childComplexity), true

	case "vehicle_info_change_log_avg_fields.car_rental_price":
		if e.complexity.VehicleInfoChangeLogAvgFields.CarRentalPrice == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAvgFields.CarRentalPrice(childComplexity), true

	case "vehicle_info_change_log_avg_fields.check_state":
		if e.complexity.VehicleInfoChangeLogAvgFields.CheckState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAvgFields.CheckState(childComplexity), true

	case "vehicle_info_change_log_avg_fields.heavy":
		if e.complexity.VehicleInfoChangeLogAvgFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAvgFields.Heavy(childComplexity), true

	case "vehicle_info_change_log_avg_fields.id":
		if e.complexity.VehicleInfoChangeLogAvgFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAvgFields.ID(childComplexity), true

	case "vehicle_info_change_log_avg_fields.industry_category":
		if e.complexity.VehicleInfoChangeLogAvgFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAvgFields.IndustryCategory(childComplexity), true

	case "vehicle_info_change_log_avg_fields.insurance_company":
		if e.complexity.VehicleInfoChangeLogAvgFields.InsuranceCompany == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAvgFields.InsuranceCompany(childComplexity), true

	case "vehicle_info_change_log_avg_fields.license_plate_color":
		if e.complexity.VehicleInfoChangeLogAvgFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAvgFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_change_log_avg_fields.license_plate_type":
		if e.complexity.VehicleInfoChangeLogAvgFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAvgFields.LicensePlateType(childComplexity), true

	case "vehicle_info_change_log_avg_fields.muck_truck_id":
		if e.complexity.VehicleInfoChangeLogAvgFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAvgFields.MuckTruckID(childComplexity), true

	case "vehicle_info_change_log_avg_fields.operating_state":
		if e.complexity.VehicleInfoChangeLogAvgFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAvgFields.OperatingState(childComplexity), true

	case "vehicle_info_change_log_avg_fields.operating_type":
		if e.complexity.VehicleInfoChangeLogAvgFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAvgFields.OperatingType(childComplexity), true

	case "vehicle_info_change_log_avg_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoChangeLogAvgFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAvgFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_change_log_avg_fields.quasi_driving_models":
		if e.complexity.VehicleInfoChangeLogAvgFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAvgFields.QuasiDrivingModels(childComplexity), true

	case "vehicle_info_change_log_avg_fields.seats":
		if e.complexity.VehicleInfoChangeLogAvgFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAvgFields.Seats(childComplexity), true

	case "vehicle_info_change_log_avg_fields.vehicle_brand":
		if e.complexity.VehicleInfoChangeLogAvgFields.VehicleBrand == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAvgFields.VehicleBrand(childComplexity), true

	case "vehicle_info_change_log_avg_fields.vehicle_state":
		if e.complexity.VehicleInfoChangeLogAvgFields.VehicleState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAvgFields.VehicleState(childComplexity), true

	case "vehicle_info_change_log_avg_fields.vehicle_type":
		if e.complexity.VehicleInfoChangeLogAvgFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogAvgFields.VehicleType(childComplexity), true

	case "vehicle_info_change_log_max_fields.business_scope":
		if e.complexity.VehicleInfoChangeLogMaxFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.BusinessScope(childComplexity), true

	case "vehicle_info_change_log_max_fields.car_rental_price":
		if e.complexity.VehicleInfoChangeLogMaxFields.CarRentalPrice == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.CarRentalPrice(childComplexity), true

	case "vehicle_info_change_log_max_fields.check_state":
		if e.complexity.VehicleInfoChangeLogMaxFields.CheckState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.CheckState(childComplexity), true

	case "vehicle_info_change_log_max_fields.create_at":
		if e.complexity.VehicleInfoChangeLogMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.CreateAt(childComplexity), true

	case "vehicle_info_change_log_max_fields.create_by":
		if e.complexity.VehicleInfoChangeLogMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.CreateBy(childComplexity), true

	case "vehicle_info_change_log_max_fields.delete_at":
		if e.complexity.VehicleInfoChangeLogMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.DeleteAt(childComplexity), true

	case "vehicle_info_change_log_max_fields.delete_by":
		if e.complexity.VehicleInfoChangeLogMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.DeleteBy(childComplexity), true

	case "vehicle_info_change_log_max_fields.department_id":
		if e.complexity.VehicleInfoChangeLogMaxFields.DepartmentID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.DepartmentID(childComplexity), true

	case "vehicle_info_change_log_max_fields.driving_licensee_pic":
		if e.complexity.VehicleInfoChangeLogMaxFields.DrivingLicenseePic == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.DrivingLicenseePic(childComplexity), true

	case "vehicle_info_change_log_max_fields.enterprise_id":
		if e.complexity.VehicleInfoChangeLogMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.EnterpriseID(childComplexity), true

	case "vehicle_info_change_log_max_fields.heavy":
		if e.complexity.VehicleInfoChangeLogMaxFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.Heavy(childComplexity), true

	case "vehicle_info_change_log_max_fields.id":
		if e.complexity.VehicleInfoChangeLogMaxFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.ID(childComplexity), true

	case "vehicle_info_change_log_max_fields.industry_category":
		if e.complexity.VehicleInfoChangeLogMaxFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.IndustryCategory(childComplexity), true

	case "vehicle_info_change_log_max_fields.inspection_date":
		if e.complexity.VehicleInfoChangeLogMaxFields.InspectionDate == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.InspectionDate(childComplexity), true

	case "vehicle_info_change_log_max_fields.insurance_company":
		if e.complexity.VehicleInfoChangeLogMaxFields.InsuranceCompany == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.InsuranceCompany(childComplexity), true

	case "vehicle_info_change_log_max_fields.insurance_date":
		if e.complexity.VehicleInfoChangeLogMaxFields.InsuranceDate == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.InsuranceDate(childComplexity), true

	case "vehicle_info_change_log_max_fields.license_plate_color":
		if e.complexity.VehicleInfoChangeLogMaxFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_change_log_max_fields.license_plate_number":
		if e.complexity.VehicleInfoChangeLogMaxFields.LicensePlateNumber == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.LicensePlateNumber(childComplexity), true

	case "vehicle_info_change_log_max_fields.license_plate_type":
		if e.complexity.VehicleInfoChangeLogMaxFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.LicensePlateType(childComplexity), true

	case "vehicle_info_change_log_max_fields.muck_truck_id":
		if e.complexity.VehicleInfoChangeLogMaxFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.MuckTruckID(childComplexity), true

	case "vehicle_info_change_log_max_fields.operating_route":
		if e.complexity.VehicleInfoChangeLogMaxFields.OperatingRoute == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.OperatingRoute(childComplexity), true

	case "vehicle_info_change_log_max_fields.operating_state":
		if e.complexity.VehicleInfoChangeLogMaxFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.OperatingState(childComplexity), true

	case "vehicle_info_change_log_max_fields.operating_type":
		if e.complexity.VehicleInfoChangeLogMaxFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.OperatingType(childComplexity), true

	case "vehicle_info_change_log_max_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoChangeLogMaxFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_change_log_max_fields.owner":
		if e.complexity.VehicleInfoChangeLogMaxFields.Owner == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.Owner(childComplexity), true

	case "vehicle_info_change_log_max_fields.quasi_driving_models":
		if e.complexity.VehicleInfoChangeLogMaxFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.QuasiDrivingModels(childComplexity), true

	case "vehicle_info_change_log_max_fields.record_at":
		if e.complexity.VehicleInfoChangeLogMaxFields.RecordAt == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.RecordAt(childComplexity), true

	case "vehicle_info_change_log_max_fields.record_by":
		if e.complexity.VehicleInfoChangeLogMaxFields.RecordBy == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.RecordBy(childComplexity), true

	case "vehicle_info_change_log_max_fields.remark_in":
		if e.complexity.VehicleInfoChangeLogMaxFields.RemarkIn == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.RemarkIn(childComplexity), true

	case "vehicle_info_change_log_max_fields.remarks":
		if e.complexity.VehicleInfoChangeLogMaxFields.Remarks == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.Remarks(childComplexity), true

	case "vehicle_info_change_log_max_fields.retirement_date":
		if e.complexity.VehicleInfoChangeLogMaxFields.RetirementDate == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.RetirementDate(childComplexity), true

	case "vehicle_info_change_log_max_fields.road_transport_license_number":
		if e.complexity.VehicleInfoChangeLogMaxFields.RoadTransportLicenseNumber == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.RoadTransportLicenseNumber(childComplexity), true

	case "vehicle_info_change_log_max_fields.seats":
		if e.complexity.VehicleInfoChangeLogMaxFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.Seats(childComplexity), true

	case "vehicle_info_change_log_max_fields.terminal_id":
		if e.complexity.VehicleInfoChangeLogMaxFields.TerminalID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.TerminalID(childComplexity), true

	case "vehicle_info_change_log_max_fields.update_at":
		if e.complexity.VehicleInfoChangeLogMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.UpdateAt(childComplexity), true

	case "vehicle_info_change_log_max_fields.update_by":
		if e.complexity.VehicleInfoChangeLogMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.UpdateBy(childComplexity), true

	case "vehicle_info_change_log_max_fields.update_time_in":
		if e.complexity.VehicleInfoChangeLogMaxFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.UpdateTimeIn(childComplexity), true

	case "vehicle_info_change_log_max_fields.use_nature":
		if e.complexity.VehicleInfoChangeLogMaxFields.UseNature == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.UseNature(childComplexity), true

	case "vehicle_info_change_log_max_fields.vehicle_brand":
		if e.complexity.VehicleInfoChangeLogMaxFields.VehicleBrand == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.VehicleBrand(childComplexity), true

	case "vehicle_info_change_log_max_fields.vehicle_displacement":
		if e.complexity.VehicleInfoChangeLogMaxFields.VehicleDisplacement == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.VehicleDisplacement(childComplexity), true

	case "vehicle_info_change_log_max_fields.vehicle_identification_number":
		if e.complexity.VehicleInfoChangeLogMaxFields.VehicleIdentificationNumber == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.VehicleIdentificationNumber(childComplexity), true

	case "vehicle_info_change_log_max_fields.vehicle_info_change_id":
		if e.complexity.VehicleInfoChangeLogMaxFields.VehicleInfoChangeID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.VehicleInfoChangeID(childComplexity), true

	case "vehicle_info_change_log_max_fields.vehicle_manager":
		if e.complexity.VehicleInfoChangeLogMaxFields.VehicleManager == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.VehicleManager(childComplexity), true

	case "vehicle_info_change_log_max_fields.vehicle_manager_id_card":
		if e.complexity.VehicleInfoChangeLogMaxFields.VehicleManagerIDCard == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.VehicleManagerIDCard(childComplexity), true

	case "vehicle_info_change_log_max_fields.vehicle_manager_phone":
		if e.complexity.VehicleInfoChangeLogMaxFields.VehicleManagerPhone == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.VehicleManagerPhone(childComplexity), true

	case "vehicle_info_change_log_max_fields.vehicle_state":
		if e.complexity.VehicleInfoChangeLogMaxFields.VehicleState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.VehicleState(childComplexity), true

	case "vehicle_info_change_log_max_fields.vehicle_type":
		if e.complexity.VehicleInfoChangeLogMaxFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMaxFields.VehicleType(childComplexity), true

	case "vehicle_info_change_log_min_fields.business_scope":
		if e.complexity.VehicleInfoChangeLogMinFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.BusinessScope(childComplexity), true

	case "vehicle_info_change_log_min_fields.car_rental_price":
		if e.complexity.VehicleInfoChangeLogMinFields.CarRentalPrice == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.CarRentalPrice(childComplexity), true

	case "vehicle_info_change_log_min_fields.check_state":
		if e.complexity.VehicleInfoChangeLogMinFields.CheckState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.CheckState(childComplexity), true

	case "vehicle_info_change_log_min_fields.create_at":
		if e.complexity.VehicleInfoChangeLogMinFields.CreateAt == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.CreateAt(childComplexity), true

	case "vehicle_info_change_log_min_fields.create_by":
		if e.complexity.VehicleInfoChangeLogMinFields.CreateBy == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.CreateBy(childComplexity), true

	case "vehicle_info_change_log_min_fields.delete_at":
		if e.complexity.VehicleInfoChangeLogMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.DeleteAt(childComplexity), true

	case "vehicle_info_change_log_min_fields.delete_by":
		if e.complexity.VehicleInfoChangeLogMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.DeleteBy(childComplexity), true

	case "vehicle_info_change_log_min_fields.department_id":
		if e.complexity.VehicleInfoChangeLogMinFields.DepartmentID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.DepartmentID(childComplexity), true

	case "vehicle_info_change_log_min_fields.driving_licensee_pic":
		if e.complexity.VehicleInfoChangeLogMinFields.DrivingLicenseePic == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.DrivingLicenseePic(childComplexity), true

	case "vehicle_info_change_log_min_fields.enterprise_id":
		if e.complexity.VehicleInfoChangeLogMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.EnterpriseID(childComplexity), true

	case "vehicle_info_change_log_min_fields.heavy":
		if e.complexity.VehicleInfoChangeLogMinFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.Heavy(childComplexity), true

	case "vehicle_info_change_log_min_fields.id":
		if e.complexity.VehicleInfoChangeLogMinFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.ID(childComplexity), true

	case "vehicle_info_change_log_min_fields.industry_category":
		if e.complexity.VehicleInfoChangeLogMinFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.IndustryCategory(childComplexity), true

	case "vehicle_info_change_log_min_fields.inspection_date":
		if e.complexity.VehicleInfoChangeLogMinFields.InspectionDate == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.InspectionDate(childComplexity), true

	case "vehicle_info_change_log_min_fields.insurance_company":
		if e.complexity.VehicleInfoChangeLogMinFields.InsuranceCompany == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.InsuranceCompany(childComplexity), true

	case "vehicle_info_change_log_min_fields.insurance_date":
		if e.complexity.VehicleInfoChangeLogMinFields.InsuranceDate == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.InsuranceDate(childComplexity), true

	case "vehicle_info_change_log_min_fields.license_plate_color":
		if e.complexity.VehicleInfoChangeLogMinFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_change_log_min_fields.license_plate_number":
		if e.complexity.VehicleInfoChangeLogMinFields.LicensePlateNumber == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.LicensePlateNumber(childComplexity), true

	case "vehicle_info_change_log_min_fields.license_plate_type":
		if e.complexity.VehicleInfoChangeLogMinFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.LicensePlateType(childComplexity), true

	case "vehicle_info_change_log_min_fields.muck_truck_id":
		if e.complexity.VehicleInfoChangeLogMinFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.MuckTruckID(childComplexity), true

	case "vehicle_info_change_log_min_fields.operating_route":
		if e.complexity.VehicleInfoChangeLogMinFields.OperatingRoute == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.OperatingRoute(childComplexity), true

	case "vehicle_info_change_log_min_fields.operating_state":
		if e.complexity.VehicleInfoChangeLogMinFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.OperatingState(childComplexity), true

	case "vehicle_info_change_log_min_fields.operating_type":
		if e.complexity.VehicleInfoChangeLogMinFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.OperatingType(childComplexity), true

	case "vehicle_info_change_log_min_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoChangeLogMinFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_change_log_min_fields.owner":
		if e.complexity.VehicleInfoChangeLogMinFields.Owner == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.Owner(childComplexity), true

	case "vehicle_info_change_log_min_fields.quasi_driving_models":
		if e.complexity.VehicleInfoChangeLogMinFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.QuasiDrivingModels(childComplexity), true

	case "vehicle_info_change_log_min_fields.record_at":
		if e.complexity.VehicleInfoChangeLogMinFields.RecordAt == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.RecordAt(childComplexity), true

	case "vehicle_info_change_log_min_fields.record_by":
		if e.complexity.VehicleInfoChangeLogMinFields.RecordBy == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.RecordBy(childComplexity), true

	case "vehicle_info_change_log_min_fields.remark_in":
		if e.complexity.VehicleInfoChangeLogMinFields.RemarkIn == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.RemarkIn(childComplexity), true

	case "vehicle_info_change_log_min_fields.remarks":
		if e.complexity.VehicleInfoChangeLogMinFields.Remarks == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.Remarks(childComplexity), true

	case "vehicle_info_change_log_min_fields.retirement_date":
		if e.complexity.VehicleInfoChangeLogMinFields.RetirementDate == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.RetirementDate(childComplexity), true

	case "vehicle_info_change_log_min_fields.road_transport_license_number":
		if e.complexity.VehicleInfoChangeLogMinFields.RoadTransportLicenseNumber == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.RoadTransportLicenseNumber(childComplexity), true

	case "vehicle_info_change_log_min_fields.seats":
		if e.complexity.VehicleInfoChangeLogMinFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.Seats(childComplexity), true

	case "vehicle_info_change_log_min_fields.terminal_id":
		if e.complexity.VehicleInfoChangeLogMinFields.TerminalID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.TerminalID(childComplexity), true

	case "vehicle_info_change_log_min_fields.update_at":
		if e.complexity.VehicleInfoChangeLogMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.UpdateAt(childComplexity), true

	case "vehicle_info_change_log_min_fields.update_by":
		if e.complexity.VehicleInfoChangeLogMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.UpdateBy(childComplexity), true

	case "vehicle_info_change_log_min_fields.update_time_in":
		if e.complexity.VehicleInfoChangeLogMinFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.UpdateTimeIn(childComplexity), true

	case "vehicle_info_change_log_min_fields.use_nature":
		if e.complexity.VehicleInfoChangeLogMinFields.UseNature == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.UseNature(childComplexity), true

	case "vehicle_info_change_log_min_fields.vehicle_brand":
		if e.complexity.VehicleInfoChangeLogMinFields.VehicleBrand == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.VehicleBrand(childComplexity), true

	case "vehicle_info_change_log_min_fields.vehicle_displacement":
		if e.complexity.VehicleInfoChangeLogMinFields.VehicleDisplacement == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.VehicleDisplacement(childComplexity), true

	case "vehicle_info_change_log_min_fields.vehicle_identification_number":
		if e.complexity.VehicleInfoChangeLogMinFields.VehicleIdentificationNumber == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.VehicleIdentificationNumber(childComplexity), true

	case "vehicle_info_change_log_min_fields.vehicle_info_change_id":
		if e.complexity.VehicleInfoChangeLogMinFields.VehicleInfoChangeID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.VehicleInfoChangeID(childComplexity), true

	case "vehicle_info_change_log_min_fields.vehicle_manager":
		if e.complexity.VehicleInfoChangeLogMinFields.VehicleManager == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.VehicleManager(childComplexity), true

	case "vehicle_info_change_log_min_fields.vehicle_manager_id_card":
		if e.complexity.VehicleInfoChangeLogMinFields.VehicleManagerIDCard == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.VehicleManagerIDCard(childComplexity), true

	case "vehicle_info_change_log_min_fields.vehicle_manager_phone":
		if e.complexity.VehicleInfoChangeLogMinFields.VehicleManagerPhone == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.VehicleManagerPhone(childComplexity), true

	case "vehicle_info_change_log_min_fields.vehicle_state":
		if e.complexity.VehicleInfoChangeLogMinFields.VehicleState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.VehicleState(childComplexity), true

	case "vehicle_info_change_log_min_fields.vehicle_type":
		if e.complexity.VehicleInfoChangeLogMinFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMinFields.VehicleType(childComplexity), true

	case "vehicle_info_change_log_mutation_response.affected_rows":
		if e.complexity.VehicleInfoChangeLogMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMutationResponse.AffectedRows(childComplexity), true

	case "vehicle_info_change_log_mutation_response.returning":
		if e.complexity.VehicleInfoChangeLogMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogMutationResponse.Returning(childComplexity), true

	case "vehicle_info_change_log_stddev_fields.business_scope":
		if e.complexity.VehicleInfoChangeLogStddevFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevFields.BusinessScope(childComplexity), true

	case "vehicle_info_change_log_stddev_fields.car_rental_price":
		if e.complexity.VehicleInfoChangeLogStddevFields.CarRentalPrice == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevFields.CarRentalPrice(childComplexity), true

	case "vehicle_info_change_log_stddev_fields.check_state":
		if e.complexity.VehicleInfoChangeLogStddevFields.CheckState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevFields.CheckState(childComplexity), true

	case "vehicle_info_change_log_stddev_fields.heavy":
		if e.complexity.VehicleInfoChangeLogStddevFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevFields.Heavy(childComplexity), true

	case "vehicle_info_change_log_stddev_fields.id":
		if e.complexity.VehicleInfoChangeLogStddevFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevFields.ID(childComplexity), true

	case "vehicle_info_change_log_stddev_fields.industry_category":
		if e.complexity.VehicleInfoChangeLogStddevFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevFields.IndustryCategory(childComplexity), true

	case "vehicle_info_change_log_stddev_fields.insurance_company":
		if e.complexity.VehicleInfoChangeLogStddevFields.InsuranceCompany == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevFields.InsuranceCompany(childComplexity), true

	case "vehicle_info_change_log_stddev_fields.license_plate_color":
		if e.complexity.VehicleInfoChangeLogStddevFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_change_log_stddev_fields.license_plate_type":
		if e.complexity.VehicleInfoChangeLogStddevFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevFields.LicensePlateType(childComplexity), true

	case "vehicle_info_change_log_stddev_fields.muck_truck_id":
		if e.complexity.VehicleInfoChangeLogStddevFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevFields.MuckTruckID(childComplexity), true

	case "vehicle_info_change_log_stddev_fields.operating_state":
		if e.complexity.VehicleInfoChangeLogStddevFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevFields.OperatingState(childComplexity), true

	case "vehicle_info_change_log_stddev_fields.operating_type":
		if e.complexity.VehicleInfoChangeLogStddevFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevFields.OperatingType(childComplexity), true

	case "vehicle_info_change_log_stddev_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoChangeLogStddevFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_change_log_stddev_fields.quasi_driving_models":
		if e.complexity.VehicleInfoChangeLogStddevFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevFields.QuasiDrivingModels(childComplexity), true

	case "vehicle_info_change_log_stddev_fields.seats":
		if e.complexity.VehicleInfoChangeLogStddevFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevFields.Seats(childComplexity), true

	case "vehicle_info_change_log_stddev_fields.vehicle_brand":
		if e.complexity.VehicleInfoChangeLogStddevFields.VehicleBrand == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevFields.VehicleBrand(childComplexity), true

	case "vehicle_info_change_log_stddev_fields.vehicle_state":
		if e.complexity.VehicleInfoChangeLogStddevFields.VehicleState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevFields.VehicleState(childComplexity), true

	case "vehicle_info_change_log_stddev_fields.vehicle_type":
		if e.complexity.VehicleInfoChangeLogStddevFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevFields.VehicleType(childComplexity), true

	case "vehicle_info_change_log_stddev_pop_fields.business_scope":
		if e.complexity.VehicleInfoChangeLogStddevPopFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevPopFields.BusinessScope(childComplexity), true

	case "vehicle_info_change_log_stddev_pop_fields.car_rental_price":
		if e.complexity.VehicleInfoChangeLogStddevPopFields.CarRentalPrice == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevPopFields.CarRentalPrice(childComplexity), true

	case "vehicle_info_change_log_stddev_pop_fields.check_state":
		if e.complexity.VehicleInfoChangeLogStddevPopFields.CheckState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevPopFields.CheckState(childComplexity), true

	case "vehicle_info_change_log_stddev_pop_fields.heavy":
		if e.complexity.VehicleInfoChangeLogStddevPopFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevPopFields.Heavy(childComplexity), true

	case "vehicle_info_change_log_stddev_pop_fields.id":
		if e.complexity.VehicleInfoChangeLogStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevPopFields.ID(childComplexity), true

	case "vehicle_info_change_log_stddev_pop_fields.industry_category":
		if e.complexity.VehicleInfoChangeLogStddevPopFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevPopFields.IndustryCategory(childComplexity), true

	case "vehicle_info_change_log_stddev_pop_fields.insurance_company":
		if e.complexity.VehicleInfoChangeLogStddevPopFields.InsuranceCompany == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevPopFields.InsuranceCompany(childComplexity), true

	case "vehicle_info_change_log_stddev_pop_fields.license_plate_color":
		if e.complexity.VehicleInfoChangeLogStddevPopFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevPopFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_change_log_stddev_pop_fields.license_plate_type":
		if e.complexity.VehicleInfoChangeLogStddevPopFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevPopFields.LicensePlateType(childComplexity), true

	case "vehicle_info_change_log_stddev_pop_fields.muck_truck_id":
		if e.complexity.VehicleInfoChangeLogStddevPopFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevPopFields.MuckTruckID(childComplexity), true

	case "vehicle_info_change_log_stddev_pop_fields.operating_state":
		if e.complexity.VehicleInfoChangeLogStddevPopFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevPopFields.OperatingState(childComplexity), true

	case "vehicle_info_change_log_stddev_pop_fields.operating_type":
		if e.complexity.VehicleInfoChangeLogStddevPopFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevPopFields.OperatingType(childComplexity), true

	case "vehicle_info_change_log_stddev_pop_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoChangeLogStddevPopFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevPopFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_change_log_stddev_pop_fields.quasi_driving_models":
		if e.complexity.VehicleInfoChangeLogStddevPopFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevPopFields.QuasiDrivingModels(childComplexity), true

	case "vehicle_info_change_log_stddev_pop_fields.seats":
		if e.complexity.VehicleInfoChangeLogStddevPopFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevPopFields.Seats(childComplexity), true

	case "vehicle_info_change_log_stddev_pop_fields.vehicle_brand":
		if e.complexity.VehicleInfoChangeLogStddevPopFields.VehicleBrand == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevPopFields.VehicleBrand(childComplexity), true

	case "vehicle_info_change_log_stddev_pop_fields.vehicle_state":
		if e.complexity.VehicleInfoChangeLogStddevPopFields.VehicleState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevPopFields.VehicleState(childComplexity), true

	case "vehicle_info_change_log_stddev_pop_fields.vehicle_type":
		if e.complexity.VehicleInfoChangeLogStddevPopFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevPopFields.VehicleType(childComplexity), true

	case "vehicle_info_change_log_stddev_samp_fields.business_scope":
		if e.complexity.VehicleInfoChangeLogStddevSampFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevSampFields.BusinessScope(childComplexity), true

	case "vehicle_info_change_log_stddev_samp_fields.car_rental_price":
		if e.complexity.VehicleInfoChangeLogStddevSampFields.CarRentalPrice == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevSampFields.CarRentalPrice(childComplexity), true

	case "vehicle_info_change_log_stddev_samp_fields.check_state":
		if e.complexity.VehicleInfoChangeLogStddevSampFields.CheckState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevSampFields.CheckState(childComplexity), true

	case "vehicle_info_change_log_stddev_samp_fields.heavy":
		if e.complexity.VehicleInfoChangeLogStddevSampFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevSampFields.Heavy(childComplexity), true

	case "vehicle_info_change_log_stddev_samp_fields.id":
		if e.complexity.VehicleInfoChangeLogStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevSampFields.ID(childComplexity), true

	case "vehicle_info_change_log_stddev_samp_fields.industry_category":
		if e.complexity.VehicleInfoChangeLogStddevSampFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevSampFields.IndustryCategory(childComplexity), true

	case "vehicle_info_change_log_stddev_samp_fields.insurance_company":
		if e.complexity.VehicleInfoChangeLogStddevSampFields.InsuranceCompany == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevSampFields.InsuranceCompany(childComplexity), true

	case "vehicle_info_change_log_stddev_samp_fields.license_plate_color":
		if e.complexity.VehicleInfoChangeLogStddevSampFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevSampFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_change_log_stddev_samp_fields.license_plate_type":
		if e.complexity.VehicleInfoChangeLogStddevSampFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevSampFields.LicensePlateType(childComplexity), true

	case "vehicle_info_change_log_stddev_samp_fields.muck_truck_id":
		if e.complexity.VehicleInfoChangeLogStddevSampFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevSampFields.MuckTruckID(childComplexity), true

	case "vehicle_info_change_log_stddev_samp_fields.operating_state":
		if e.complexity.VehicleInfoChangeLogStddevSampFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevSampFields.OperatingState(childComplexity), true

	case "vehicle_info_change_log_stddev_samp_fields.operating_type":
		if e.complexity.VehicleInfoChangeLogStddevSampFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevSampFields.OperatingType(childComplexity), true

	case "vehicle_info_change_log_stddev_samp_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoChangeLogStddevSampFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevSampFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_change_log_stddev_samp_fields.quasi_driving_models":
		if e.complexity.VehicleInfoChangeLogStddevSampFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevSampFields.QuasiDrivingModels(childComplexity), true

	case "vehicle_info_change_log_stddev_samp_fields.seats":
		if e.complexity.VehicleInfoChangeLogStddevSampFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevSampFields.Seats(childComplexity), true

	case "vehicle_info_change_log_stddev_samp_fields.vehicle_brand":
		if e.complexity.VehicleInfoChangeLogStddevSampFields.VehicleBrand == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevSampFields.VehicleBrand(childComplexity), true

	case "vehicle_info_change_log_stddev_samp_fields.vehicle_state":
		if e.complexity.VehicleInfoChangeLogStddevSampFields.VehicleState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevSampFields.VehicleState(childComplexity), true

	case "vehicle_info_change_log_stddev_samp_fields.vehicle_type":
		if e.complexity.VehicleInfoChangeLogStddevSampFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogStddevSampFields.VehicleType(childComplexity), true

	case "vehicle_info_change_log_sum_fields.business_scope":
		if e.complexity.VehicleInfoChangeLogSumFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogSumFields.BusinessScope(childComplexity), true

	case "vehicle_info_change_log_sum_fields.car_rental_price":
		if e.complexity.VehicleInfoChangeLogSumFields.CarRentalPrice == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogSumFields.CarRentalPrice(childComplexity), true

	case "vehicle_info_change_log_sum_fields.check_state":
		if e.complexity.VehicleInfoChangeLogSumFields.CheckState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogSumFields.CheckState(childComplexity), true

	case "vehicle_info_change_log_sum_fields.heavy":
		if e.complexity.VehicleInfoChangeLogSumFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogSumFields.Heavy(childComplexity), true

	case "vehicle_info_change_log_sum_fields.id":
		if e.complexity.VehicleInfoChangeLogSumFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogSumFields.ID(childComplexity), true

	case "vehicle_info_change_log_sum_fields.industry_category":
		if e.complexity.VehicleInfoChangeLogSumFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogSumFields.IndustryCategory(childComplexity), true

	case "vehicle_info_change_log_sum_fields.insurance_company":
		if e.complexity.VehicleInfoChangeLogSumFields.InsuranceCompany == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogSumFields.InsuranceCompany(childComplexity), true

	case "vehicle_info_change_log_sum_fields.license_plate_color":
		if e.complexity.VehicleInfoChangeLogSumFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogSumFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_change_log_sum_fields.license_plate_type":
		if e.complexity.VehicleInfoChangeLogSumFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogSumFields.LicensePlateType(childComplexity), true

	case "vehicle_info_change_log_sum_fields.muck_truck_id":
		if e.complexity.VehicleInfoChangeLogSumFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogSumFields.MuckTruckID(childComplexity), true

	case "vehicle_info_change_log_sum_fields.operating_state":
		if e.complexity.VehicleInfoChangeLogSumFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogSumFields.OperatingState(childComplexity), true

	case "vehicle_info_change_log_sum_fields.operating_type":
		if e.complexity.VehicleInfoChangeLogSumFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogSumFields.OperatingType(childComplexity), true

	case "vehicle_info_change_log_sum_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoChangeLogSumFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogSumFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_change_log_sum_fields.quasi_driving_models":
		if e.complexity.VehicleInfoChangeLogSumFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogSumFields.QuasiDrivingModels(childComplexity), true

	case "vehicle_info_change_log_sum_fields.seats":
		if e.complexity.VehicleInfoChangeLogSumFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogSumFields.Seats(childComplexity), true

	case "vehicle_info_change_log_sum_fields.vehicle_brand":
		if e.complexity.VehicleInfoChangeLogSumFields.VehicleBrand == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogSumFields.VehicleBrand(childComplexity), true

	case "vehicle_info_change_log_sum_fields.vehicle_state":
		if e.complexity.VehicleInfoChangeLogSumFields.VehicleState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogSumFields.VehicleState(childComplexity), true

	case "vehicle_info_change_log_sum_fields.vehicle_type":
		if e.complexity.VehicleInfoChangeLogSumFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogSumFields.VehicleType(childComplexity), true

	case "vehicle_info_change_log_var_pop_fields.business_scope":
		if e.complexity.VehicleInfoChangeLogVarPopFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarPopFields.BusinessScope(childComplexity), true

	case "vehicle_info_change_log_var_pop_fields.car_rental_price":
		if e.complexity.VehicleInfoChangeLogVarPopFields.CarRentalPrice == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarPopFields.CarRentalPrice(childComplexity), true

	case "vehicle_info_change_log_var_pop_fields.check_state":
		if e.complexity.VehicleInfoChangeLogVarPopFields.CheckState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarPopFields.CheckState(childComplexity), true

	case "vehicle_info_change_log_var_pop_fields.heavy":
		if e.complexity.VehicleInfoChangeLogVarPopFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarPopFields.Heavy(childComplexity), true

	case "vehicle_info_change_log_var_pop_fields.id":
		if e.complexity.VehicleInfoChangeLogVarPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarPopFields.ID(childComplexity), true

	case "vehicle_info_change_log_var_pop_fields.industry_category":
		if e.complexity.VehicleInfoChangeLogVarPopFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarPopFields.IndustryCategory(childComplexity), true

	case "vehicle_info_change_log_var_pop_fields.insurance_company":
		if e.complexity.VehicleInfoChangeLogVarPopFields.InsuranceCompany == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarPopFields.InsuranceCompany(childComplexity), true

	case "vehicle_info_change_log_var_pop_fields.license_plate_color":
		if e.complexity.VehicleInfoChangeLogVarPopFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarPopFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_change_log_var_pop_fields.license_plate_type":
		if e.complexity.VehicleInfoChangeLogVarPopFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarPopFields.LicensePlateType(childComplexity), true

	case "vehicle_info_change_log_var_pop_fields.muck_truck_id":
		if e.complexity.VehicleInfoChangeLogVarPopFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarPopFields.MuckTruckID(childComplexity), true

	case "vehicle_info_change_log_var_pop_fields.operating_state":
		if e.complexity.VehicleInfoChangeLogVarPopFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarPopFields.OperatingState(childComplexity), true

	case "vehicle_info_change_log_var_pop_fields.operating_type":
		if e.complexity.VehicleInfoChangeLogVarPopFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarPopFields.OperatingType(childComplexity), true

	case "vehicle_info_change_log_var_pop_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoChangeLogVarPopFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarPopFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_change_log_var_pop_fields.quasi_driving_models":
		if e.complexity.VehicleInfoChangeLogVarPopFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarPopFields.QuasiDrivingModels(childComplexity), true

	case "vehicle_info_change_log_var_pop_fields.seats":
		if e.complexity.VehicleInfoChangeLogVarPopFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarPopFields.Seats(childComplexity), true

	case "vehicle_info_change_log_var_pop_fields.vehicle_brand":
		if e.complexity.VehicleInfoChangeLogVarPopFields.VehicleBrand == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarPopFields.VehicleBrand(childComplexity), true

	case "vehicle_info_change_log_var_pop_fields.vehicle_state":
		if e.complexity.VehicleInfoChangeLogVarPopFields.VehicleState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarPopFields.VehicleState(childComplexity), true

	case "vehicle_info_change_log_var_pop_fields.vehicle_type":
		if e.complexity.VehicleInfoChangeLogVarPopFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarPopFields.VehicleType(childComplexity), true

	case "vehicle_info_change_log_var_samp_fields.business_scope":
		if e.complexity.VehicleInfoChangeLogVarSampFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarSampFields.BusinessScope(childComplexity), true

	case "vehicle_info_change_log_var_samp_fields.car_rental_price":
		if e.complexity.VehicleInfoChangeLogVarSampFields.CarRentalPrice == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarSampFields.CarRentalPrice(childComplexity), true

	case "vehicle_info_change_log_var_samp_fields.check_state":
		if e.complexity.VehicleInfoChangeLogVarSampFields.CheckState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarSampFields.CheckState(childComplexity), true

	case "vehicle_info_change_log_var_samp_fields.heavy":
		if e.complexity.VehicleInfoChangeLogVarSampFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarSampFields.Heavy(childComplexity), true

	case "vehicle_info_change_log_var_samp_fields.id":
		if e.complexity.VehicleInfoChangeLogVarSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarSampFields.ID(childComplexity), true

	case "vehicle_info_change_log_var_samp_fields.industry_category":
		if e.complexity.VehicleInfoChangeLogVarSampFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarSampFields.IndustryCategory(childComplexity), true

	case "vehicle_info_change_log_var_samp_fields.insurance_company":
		if e.complexity.VehicleInfoChangeLogVarSampFields.InsuranceCompany == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarSampFields.InsuranceCompany(childComplexity), true

	case "vehicle_info_change_log_var_samp_fields.license_plate_color":
		if e.complexity.VehicleInfoChangeLogVarSampFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarSampFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_change_log_var_samp_fields.license_plate_type":
		if e.complexity.VehicleInfoChangeLogVarSampFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarSampFields.LicensePlateType(childComplexity), true

	case "vehicle_info_change_log_var_samp_fields.muck_truck_id":
		if e.complexity.VehicleInfoChangeLogVarSampFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarSampFields.MuckTruckID(childComplexity), true

	case "vehicle_info_change_log_var_samp_fields.operating_state":
		if e.complexity.VehicleInfoChangeLogVarSampFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarSampFields.OperatingState(childComplexity), true

	case "vehicle_info_change_log_var_samp_fields.operating_type":
		if e.complexity.VehicleInfoChangeLogVarSampFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarSampFields.OperatingType(childComplexity), true

	case "vehicle_info_change_log_var_samp_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoChangeLogVarSampFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarSampFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_change_log_var_samp_fields.quasi_driving_models":
		if e.complexity.VehicleInfoChangeLogVarSampFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarSampFields.QuasiDrivingModels(childComplexity), true

	case "vehicle_info_change_log_var_samp_fields.seats":
		if e.complexity.VehicleInfoChangeLogVarSampFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarSampFields.Seats(childComplexity), true

	case "vehicle_info_change_log_var_samp_fields.vehicle_brand":
		if e.complexity.VehicleInfoChangeLogVarSampFields.VehicleBrand == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarSampFields.VehicleBrand(childComplexity), true

	case "vehicle_info_change_log_var_samp_fields.vehicle_state":
		if e.complexity.VehicleInfoChangeLogVarSampFields.VehicleState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarSampFields.VehicleState(childComplexity), true

	case "vehicle_info_change_log_var_samp_fields.vehicle_type":
		if e.complexity.VehicleInfoChangeLogVarSampFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarSampFields.VehicleType(childComplexity), true

	case "vehicle_info_change_log_variance_fields.business_scope":
		if e.complexity.VehicleInfoChangeLogVarianceFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarianceFields.BusinessScope(childComplexity), true

	case "vehicle_info_change_log_variance_fields.car_rental_price":
		if e.complexity.VehicleInfoChangeLogVarianceFields.CarRentalPrice == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarianceFields.CarRentalPrice(childComplexity), true

	case "vehicle_info_change_log_variance_fields.check_state":
		if e.complexity.VehicleInfoChangeLogVarianceFields.CheckState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarianceFields.CheckState(childComplexity), true

	case "vehicle_info_change_log_variance_fields.heavy":
		if e.complexity.VehicleInfoChangeLogVarianceFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarianceFields.Heavy(childComplexity), true

	case "vehicle_info_change_log_variance_fields.id":
		if e.complexity.VehicleInfoChangeLogVarianceFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarianceFields.ID(childComplexity), true

	case "vehicle_info_change_log_variance_fields.industry_category":
		if e.complexity.VehicleInfoChangeLogVarianceFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarianceFields.IndustryCategory(childComplexity), true

	case "vehicle_info_change_log_variance_fields.insurance_company":
		if e.complexity.VehicleInfoChangeLogVarianceFields.InsuranceCompany == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarianceFields.InsuranceCompany(childComplexity), true

	case "vehicle_info_change_log_variance_fields.license_plate_color":
		if e.complexity.VehicleInfoChangeLogVarianceFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarianceFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_change_log_variance_fields.license_plate_type":
		if e.complexity.VehicleInfoChangeLogVarianceFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarianceFields.LicensePlateType(childComplexity), true

	case "vehicle_info_change_log_variance_fields.muck_truck_id":
		if e.complexity.VehicleInfoChangeLogVarianceFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarianceFields.MuckTruckID(childComplexity), true

	case "vehicle_info_change_log_variance_fields.operating_state":
		if e.complexity.VehicleInfoChangeLogVarianceFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarianceFields.OperatingState(childComplexity), true

	case "vehicle_info_change_log_variance_fields.operating_type":
		if e.complexity.VehicleInfoChangeLogVarianceFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarianceFields.OperatingType(childComplexity), true

	case "vehicle_info_change_log_variance_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoChangeLogVarianceFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarianceFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_change_log_variance_fields.quasi_driving_models":
		if e.complexity.VehicleInfoChangeLogVarianceFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarianceFields.QuasiDrivingModels(childComplexity), true

	case "vehicle_info_change_log_variance_fields.seats":
		if e.complexity.VehicleInfoChangeLogVarianceFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarianceFields.Seats(childComplexity), true

	case "vehicle_info_change_log_variance_fields.vehicle_brand":
		if e.complexity.VehicleInfoChangeLogVarianceFields.VehicleBrand == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarianceFields.VehicleBrand(childComplexity), true

	case "vehicle_info_change_log_variance_fields.vehicle_state":
		if e.complexity.VehicleInfoChangeLogVarianceFields.VehicleState == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarianceFields.VehicleState(childComplexity), true

	case "vehicle_info_change_log_variance_fields.vehicle_type":
		if e.complexity.VehicleInfoChangeLogVarianceFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoChangeLogVarianceFields.VehicleType(childComplexity), true

	case "vehicle_info_max_fields.business_scope":
		if e.complexity.VehicleInfoMaxFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.BusinessScope(childComplexity), true

	case "vehicle_info_max_fields.car_rental_price":
		if e.complexity.VehicleInfoMaxFields.CarRentalPrice == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.CarRentalPrice(childComplexity), true

	case "vehicle_info_max_fields.check_state":
		if e.complexity.VehicleInfoMaxFields.CheckState == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.CheckState(childComplexity), true

	case "vehicle_info_max_fields.create_at":
		if e.complexity.VehicleInfoMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.CreateAt(childComplexity), true

	case "vehicle_info_max_fields.create_by":
		if e.complexity.VehicleInfoMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.CreateBy(childComplexity), true

	case "vehicle_info_max_fields.delete_at":
		if e.complexity.VehicleInfoMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.DeleteAt(childComplexity), true

	case "vehicle_info_max_fields.delete_by":
		if e.complexity.VehicleInfoMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.DeleteBy(childComplexity), true

	case "vehicle_info_max_fields.department_id":
		if e.complexity.VehicleInfoMaxFields.DepartmentID == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.DepartmentID(childComplexity), true

	case "vehicle_info_max_fields.driving_licensee_pic":
		if e.complexity.VehicleInfoMaxFields.DrivingLicenseePic == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.DrivingLicenseePic(childComplexity), true

	case "vehicle_info_max_fields.enterprise_id":
		if e.complexity.VehicleInfoMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.EnterpriseID(childComplexity), true

	case "vehicle_info_max_fields.heavy":
		if e.complexity.VehicleInfoMaxFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.Heavy(childComplexity), true

	case "vehicle_info_max_fields.id":
		if e.complexity.VehicleInfoMaxFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.ID(childComplexity), true

	case "vehicle_info_max_fields.industry_category":
		if e.complexity.VehicleInfoMaxFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.IndustryCategory(childComplexity), true

	case "vehicle_info_max_fields.inspection_date":
		if e.complexity.VehicleInfoMaxFields.InspectionDate == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.InspectionDate(childComplexity), true

	case "vehicle_info_max_fields.insurance_company":
		if e.complexity.VehicleInfoMaxFields.InsuranceCompany == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.InsuranceCompany(childComplexity), true

	case "vehicle_info_max_fields.insurance_date":
		if e.complexity.VehicleInfoMaxFields.InsuranceDate == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.InsuranceDate(childComplexity), true

	case "vehicle_info_max_fields.license_plate_color":
		if e.complexity.VehicleInfoMaxFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_max_fields.license_plate_number":
		if e.complexity.VehicleInfoMaxFields.LicensePlateNumber == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.LicensePlateNumber(childComplexity), true

	case "vehicle_info_max_fields.license_plate_type":
		if e.complexity.VehicleInfoMaxFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.LicensePlateType(childComplexity), true

	case "vehicle_info_max_fields.muck_truck_id":
		if e.complexity.VehicleInfoMaxFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.MuckTruckID(childComplexity), true

	case "vehicle_info_max_fields.operating_route":
		if e.complexity.VehicleInfoMaxFields.OperatingRoute == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.OperatingRoute(childComplexity), true

	case "vehicle_info_max_fields.operating_state":
		if e.complexity.VehicleInfoMaxFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.OperatingState(childComplexity), true

	case "vehicle_info_max_fields.operating_type":
		if e.complexity.VehicleInfoMaxFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.OperatingType(childComplexity), true

	case "vehicle_info_max_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoMaxFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_max_fields.owner":
		if e.complexity.VehicleInfoMaxFields.Owner == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.Owner(childComplexity), true

	case "vehicle_info_max_fields.quasi_driving_models":
		if e.complexity.VehicleInfoMaxFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.QuasiDrivingModels(childComplexity), true

	case "vehicle_info_max_fields.record_at":
		if e.complexity.VehicleInfoMaxFields.RecordAt == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.RecordAt(childComplexity), true

	case "vehicle_info_max_fields.record_by":
		if e.complexity.VehicleInfoMaxFields.RecordBy == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.RecordBy(childComplexity), true

	case "vehicle_info_max_fields.remark_in":
		if e.complexity.VehicleInfoMaxFields.RemarkIn == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.RemarkIn(childComplexity), true

	case "vehicle_info_max_fields.remarks":
		if e.complexity.VehicleInfoMaxFields.Remarks == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.Remarks(childComplexity), true

	case "vehicle_info_max_fields.retirement_date":
		if e.complexity.VehicleInfoMaxFields.RetirementDate == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.RetirementDate(childComplexity), true

	case "vehicle_info_max_fields.road_transport_license_number":
		if e.complexity.VehicleInfoMaxFields.RoadTransportLicenseNumber == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.RoadTransportLicenseNumber(childComplexity), true

	case "vehicle_info_max_fields.seats":
		if e.complexity.VehicleInfoMaxFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.Seats(childComplexity), true

	case "vehicle_info_max_fields.terminal_id":
		if e.complexity.VehicleInfoMaxFields.TerminalID == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.TerminalID(childComplexity), true

	case "vehicle_info_max_fields.update_at":
		if e.complexity.VehicleInfoMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.UpdateAt(childComplexity), true

	case "vehicle_info_max_fields.update_by":
		if e.complexity.VehicleInfoMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.UpdateBy(childComplexity), true

	case "vehicle_info_max_fields.update_time_in":
		if e.complexity.VehicleInfoMaxFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.UpdateTimeIn(childComplexity), true

	case "vehicle_info_max_fields.use_nature":
		if e.complexity.VehicleInfoMaxFields.UseNature == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.UseNature(childComplexity), true

	case "vehicle_info_max_fields.vehicle_brand":
		if e.complexity.VehicleInfoMaxFields.VehicleBrand == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.VehicleBrand(childComplexity), true

	case "vehicle_info_max_fields.vehicle_displacement":
		if e.complexity.VehicleInfoMaxFields.VehicleDisplacement == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.VehicleDisplacement(childComplexity), true

	case "vehicle_info_max_fields.vehicle_id":
		if e.complexity.VehicleInfoMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.VehicleID(childComplexity), true

	case "vehicle_info_max_fields.vehicle_identification_number":
		if e.complexity.VehicleInfoMaxFields.VehicleIdentificationNumber == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.VehicleIdentificationNumber(childComplexity), true

	case "vehicle_info_max_fields.vehicle_manager":
		if e.complexity.VehicleInfoMaxFields.VehicleManager == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.VehicleManager(childComplexity), true

	case "vehicle_info_max_fields.vehicle_manager_id_card":
		if e.complexity.VehicleInfoMaxFields.VehicleManagerIDCard == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.VehicleManagerIDCard(childComplexity), true

	case "vehicle_info_max_fields.vehicle_manager_phone":
		if e.complexity.VehicleInfoMaxFields.VehicleManagerPhone == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.VehicleManagerPhone(childComplexity), true

	case "vehicle_info_max_fields.vehicle_state":
		if e.complexity.VehicleInfoMaxFields.VehicleState == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.VehicleState(childComplexity), true

	case "vehicle_info_max_fields.vehicle_type":
		if e.complexity.VehicleInfoMaxFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.VehicleType(childComplexity), true

	case "vehicle_info_min_fields.business_scope":
		if e.complexity.VehicleInfoMinFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.BusinessScope(childComplexity), true

	case "vehicle_info_min_fields.car_rental_price":
		if e.complexity.VehicleInfoMinFields.CarRentalPrice == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.CarRentalPrice(childComplexity), true

	case "vehicle_info_min_fields.check_state":
		if e.complexity.VehicleInfoMinFields.CheckState == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.CheckState(childComplexity), true

	case "vehicle_info_min_fields.create_at":
		if e.complexity.VehicleInfoMinFields.CreateAt == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.CreateAt(childComplexity), true

	case "vehicle_info_min_fields.create_by":
		if e.complexity.VehicleInfoMinFields.CreateBy == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.CreateBy(childComplexity), true

	case "vehicle_info_min_fields.delete_at":
		if e.complexity.VehicleInfoMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.DeleteAt(childComplexity), true

	case "vehicle_info_min_fields.delete_by":
		if e.complexity.VehicleInfoMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.DeleteBy(childComplexity), true

	case "vehicle_info_min_fields.department_id":
		if e.complexity.VehicleInfoMinFields.DepartmentID == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.DepartmentID(childComplexity), true

	case "vehicle_info_min_fields.driving_licensee_pic":
		if e.complexity.VehicleInfoMinFields.DrivingLicenseePic == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.DrivingLicenseePic(childComplexity), true

	case "vehicle_info_min_fields.enterprise_id":
		if e.complexity.VehicleInfoMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.EnterpriseID(childComplexity), true

	case "vehicle_info_min_fields.heavy":
		if e.complexity.VehicleInfoMinFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.Heavy(childComplexity), true

	case "vehicle_info_min_fields.id":
		if e.complexity.VehicleInfoMinFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.ID(childComplexity), true

	case "vehicle_info_min_fields.industry_category":
		if e.complexity.VehicleInfoMinFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.IndustryCategory(childComplexity), true

	case "vehicle_info_min_fields.inspection_date":
		if e.complexity.VehicleInfoMinFields.InspectionDate == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.InspectionDate(childComplexity), true

	case "vehicle_info_min_fields.insurance_company":
		if e.complexity.VehicleInfoMinFields.InsuranceCompany == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.InsuranceCompany(childComplexity), true

	case "vehicle_info_min_fields.insurance_date":
		if e.complexity.VehicleInfoMinFields.InsuranceDate == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.InsuranceDate(childComplexity), true

	case "vehicle_info_min_fields.license_plate_color":
		if e.complexity.VehicleInfoMinFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_min_fields.license_plate_number":
		if e.complexity.VehicleInfoMinFields.LicensePlateNumber == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.LicensePlateNumber(childComplexity), true

	case "vehicle_info_min_fields.license_plate_type":
		if e.complexity.VehicleInfoMinFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.LicensePlateType(childComplexity), true

	case "vehicle_info_min_fields.muck_truck_id":
		if e.complexity.VehicleInfoMinFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.MuckTruckID(childComplexity), true

	case "vehicle_info_min_fields.operating_route":
		if e.complexity.VehicleInfoMinFields.OperatingRoute == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.OperatingRoute(childComplexity), true

	case "vehicle_info_min_fields.operating_state":
		if e.complexity.VehicleInfoMinFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.OperatingState(childComplexity), true

	case "vehicle_info_min_fields.operating_type":
		if e.complexity.VehicleInfoMinFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.OperatingType(childComplexity), true

	case "vehicle_info_min_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoMinFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_min_fields.owner":
		if e.complexity.VehicleInfoMinFields.Owner == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.Owner(childComplexity), true

	case "vehicle_info_min_fields.quasi_driving_models":
		if e.complexity.VehicleInfoMinFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.QuasiDrivingModels(childComplexity), true

	case "vehicle_info_min_fields.record_at":
		if e.complexity.VehicleInfoMinFields.RecordAt == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.RecordAt(childComplexity), true

	case "vehicle_info_min_fields.record_by":
		if e.complexity.VehicleInfoMinFields.RecordBy == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.RecordBy(childComplexity), true

	case "vehicle_info_min_fields.remark_in":
		if e.complexity.VehicleInfoMinFields.RemarkIn == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.RemarkIn(childComplexity), true

	case "vehicle_info_min_fields.remarks":
		if e.complexity.VehicleInfoMinFields.Remarks == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.Remarks(childComplexity), true

	case "vehicle_info_min_fields.retirement_date":
		if e.complexity.VehicleInfoMinFields.RetirementDate == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.RetirementDate(childComplexity), true

	case "vehicle_info_min_fields.road_transport_license_number":
		if e.complexity.VehicleInfoMinFields.RoadTransportLicenseNumber == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.RoadTransportLicenseNumber(childComplexity), true

	case "vehicle_info_min_fields.seats":
		if e.complexity.VehicleInfoMinFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.Seats(childComplexity), true

	case "vehicle_info_min_fields.terminal_id":
		if e.complexity.VehicleInfoMinFields.TerminalID == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.TerminalID(childComplexity), true

	case "vehicle_info_min_fields.update_at":
		if e.complexity.VehicleInfoMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.UpdateAt(childComplexity), true

	case "vehicle_info_min_fields.update_by":
		if e.complexity.VehicleInfoMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.UpdateBy(childComplexity), true

	case "vehicle_info_min_fields.update_time_in":
		if e.complexity.VehicleInfoMinFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.UpdateTimeIn(childComplexity), true

	case "vehicle_info_min_fields.use_nature":
		if e.complexity.VehicleInfoMinFields.UseNature == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.UseNature(childComplexity), true

	case "vehicle_info_min_fields.vehicle_brand":
		if e.complexity.VehicleInfoMinFields.VehicleBrand == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.VehicleBrand(childComplexity), true

	case "vehicle_info_min_fields.vehicle_displacement":
		if e.complexity.VehicleInfoMinFields.VehicleDisplacement == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.VehicleDisplacement(childComplexity), true

	case "vehicle_info_min_fields.vehicle_id":
		if e.complexity.VehicleInfoMinFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.VehicleID(childComplexity), true

	case "vehicle_info_min_fields.vehicle_identification_number":
		if e.complexity.VehicleInfoMinFields.VehicleIdentificationNumber == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.VehicleIdentificationNumber(childComplexity), true

	case "vehicle_info_min_fields.vehicle_manager":
		if e.complexity.VehicleInfoMinFields.VehicleManager == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.VehicleManager(childComplexity), true

	case "vehicle_info_min_fields.vehicle_manager_id_card":
		if e.complexity.VehicleInfoMinFields.VehicleManagerIDCard == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.VehicleManagerIDCard(childComplexity), true

	case "vehicle_info_min_fields.vehicle_manager_phone":
		if e.complexity.VehicleInfoMinFields.VehicleManagerPhone == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.VehicleManagerPhone(childComplexity), true

	case "vehicle_info_min_fields.vehicle_state":
		if e.complexity.VehicleInfoMinFields.VehicleState == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.VehicleState(childComplexity), true

	case "vehicle_info_min_fields.vehicle_type":
		if e.complexity.VehicleInfoMinFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.VehicleType(childComplexity), true

	case "vehicle_info_mutation_response.affected_rows":
		if e.complexity.VehicleInfoMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VehicleInfoMutationResponse.AffectedRows(childComplexity), true

	case "vehicle_info_mutation_response.returning":
		if e.complexity.VehicleInfoMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VehicleInfoMutationResponse.Returning(childComplexity), true

	case "vehicle_info_stddev_fields.business_scope":
		if e.complexity.VehicleInfoStddevFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.BusinessScope(childComplexity), true

	case "vehicle_info_stddev_fields.car_rental_price":
		if e.complexity.VehicleInfoStddevFields.CarRentalPrice == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.CarRentalPrice(childComplexity), true

	case "vehicle_info_stddev_fields.check_state":
		if e.complexity.VehicleInfoStddevFields.CheckState == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.CheckState(childComplexity), true

	case "vehicle_info_stddev_fields.heavy":
		if e.complexity.VehicleInfoStddevFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.Heavy(childComplexity), true

	case "vehicle_info_stddev_fields.id":
		if e.complexity.VehicleInfoStddevFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.ID(childComplexity), true

	case "vehicle_info_stddev_fields.industry_category":
		if e.complexity.VehicleInfoStddevFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.IndustryCategory(childComplexity), true

	case "vehicle_info_stddev_fields.insurance_company":
		if e.complexity.VehicleInfoStddevFields.InsuranceCompany == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.InsuranceCompany(childComplexity), true

	case "vehicle_info_stddev_fields.license_plate_color":
		if e.complexity.VehicleInfoStddevFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_stddev_fields.license_plate_type":
		if e.complexity.VehicleInfoStddevFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.LicensePlateType(childComplexity), true

	case "vehicle_info_stddev_fields.muck_truck_id":
		if e.complexity.VehicleInfoStddevFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.MuckTruckID(childComplexity), true

	case "vehicle_info_stddev_fields.operating_state":
		if e.complexity.VehicleInfoStddevFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.OperatingState(childComplexity), true

	case "vehicle_info_stddev_fields.operating_type":
		if e.complexity.VehicleInfoStddevFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.OperatingType(childComplexity), true

	case "vehicle_info_stddev_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoStddevFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_stddev_fields.quasi_driving_models":
		if e.complexity.VehicleInfoStddevFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.QuasiDrivingModels(childComplexity), true

	case "vehicle_info_stddev_fields.seats":
		if e.complexity.VehicleInfoStddevFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.Seats(childComplexity), true

	case "vehicle_info_stddev_fields.vehicle_brand":
		if e.complexity.VehicleInfoStddevFields.VehicleBrand == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.VehicleBrand(childComplexity), true

	case "vehicle_info_stddev_fields.vehicle_state":
		if e.complexity.VehicleInfoStddevFields.VehicleState == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.VehicleState(childComplexity), true

	case "vehicle_info_stddev_fields.vehicle_type":
		if e.complexity.VehicleInfoStddevFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.VehicleType(childComplexity), true

	case "vehicle_info_stddev_pop_fields.business_scope":
		if e.complexity.VehicleInfoStddevPopFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.BusinessScope(childComplexity), true

	case "vehicle_info_stddev_pop_fields.car_rental_price":
		if e.complexity.VehicleInfoStddevPopFields.CarRentalPrice == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.CarRentalPrice(childComplexity), true

	case "vehicle_info_stddev_pop_fields.check_state":
		if e.complexity.VehicleInfoStddevPopFields.CheckState == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.CheckState(childComplexity), true

	case "vehicle_info_stddev_pop_fields.heavy":
		if e.complexity.VehicleInfoStddevPopFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.Heavy(childComplexity), true

	case "vehicle_info_stddev_pop_fields.id":
		if e.complexity.VehicleInfoStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.ID(childComplexity), true

	case "vehicle_info_stddev_pop_fields.industry_category":
		if e.complexity.VehicleInfoStddevPopFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.IndustryCategory(childComplexity), true

	case "vehicle_info_stddev_pop_fields.insurance_company":
		if e.complexity.VehicleInfoStddevPopFields.InsuranceCompany == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.InsuranceCompany(childComplexity), true

	case "vehicle_info_stddev_pop_fields.license_plate_color":
		if e.complexity.VehicleInfoStddevPopFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_stddev_pop_fields.license_plate_type":
		if e.complexity.VehicleInfoStddevPopFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.LicensePlateType(childComplexity), true

	case "vehicle_info_stddev_pop_fields.muck_truck_id":
		if e.complexity.VehicleInfoStddevPopFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.MuckTruckID(childComplexity), true

	case "vehicle_info_stddev_pop_fields.operating_state":
		if e.complexity.VehicleInfoStddevPopFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.OperatingState(childComplexity), true

	case "vehicle_info_stddev_pop_fields.operating_type":
		if e.complexity.VehicleInfoStddevPopFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.OperatingType(childComplexity), true

	case "vehicle_info_stddev_pop_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoStddevPopFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_stddev_pop_fields.quasi_driving_models":
		if e.complexity.VehicleInfoStddevPopFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.QuasiDrivingModels(childComplexity), true

	case "vehicle_info_stddev_pop_fields.seats":
		if e.complexity.VehicleInfoStddevPopFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.Seats(childComplexity), true

	case "vehicle_info_stddev_pop_fields.vehicle_brand":
		if e.complexity.VehicleInfoStddevPopFields.VehicleBrand == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.VehicleBrand(childComplexity), true

	case "vehicle_info_stddev_pop_fields.vehicle_state":
		if e.complexity.VehicleInfoStddevPopFields.VehicleState == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.VehicleState(childComplexity), true

	case "vehicle_info_stddev_pop_fields.vehicle_type":
		if e.complexity.VehicleInfoStddevPopFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.VehicleType(childComplexity), true

	case "vehicle_info_stddev_samp_fields.business_scope":
		if e.complexity.VehicleInfoStddevSampFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.BusinessScope(childComplexity), true

	case "vehicle_info_stddev_samp_fields.car_rental_price":
		if e.complexity.VehicleInfoStddevSampFields.CarRentalPrice == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.CarRentalPrice(childComplexity), true

	case "vehicle_info_stddev_samp_fields.check_state":
		if e.complexity.VehicleInfoStddevSampFields.CheckState == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.CheckState(childComplexity), true

	case "vehicle_info_stddev_samp_fields.heavy":
		if e.complexity.VehicleInfoStddevSampFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.Heavy(childComplexity), true

	case "vehicle_info_stddev_samp_fields.id":
		if e.complexity.VehicleInfoStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.ID(childComplexity), true

	case "vehicle_info_stddev_samp_fields.industry_category":
		if e.complexity.VehicleInfoStddevSampFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.IndustryCategory(childComplexity), true

	case "vehicle_info_stddev_samp_fields.insurance_company":
		if e.complexity.VehicleInfoStddevSampFields.InsuranceCompany == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.InsuranceCompany(childComplexity), true

	case "vehicle_info_stddev_samp_fields.license_plate_color":
		if e.complexity.VehicleInfoStddevSampFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_stddev_samp_fields.license_plate_type":
		if e.complexity.VehicleInfoStddevSampFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.LicensePlateType(childComplexity), true

	case "vehicle_info_stddev_samp_fields.muck_truck_id":
		if e.complexity.VehicleInfoStddevSampFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.MuckTruckID(childComplexity), true

	case "vehicle_info_stddev_samp_fields.operating_state":
		if e.complexity.VehicleInfoStddevSampFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.OperatingState(childComplexity), true

	case "vehicle_info_stddev_samp_fields.operating_type":
		if e.complexity.VehicleInfoStddevSampFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.OperatingType(childComplexity), true

	case "vehicle_info_stddev_samp_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoStddevSampFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_stddev_samp_fields.quasi_driving_models":
		if e.complexity.VehicleInfoStddevSampFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.QuasiDrivingModels(childComplexity), true

	case "vehicle_info_stddev_samp_fields.seats":
		if e.complexity.VehicleInfoStddevSampFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.Seats(childComplexity), true

	case "vehicle_info_stddev_samp_fields.vehicle_brand":
		if e.complexity.VehicleInfoStddevSampFields.VehicleBrand == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.VehicleBrand(childComplexity), true

	case "vehicle_info_stddev_samp_fields.vehicle_state":
		if e.complexity.VehicleInfoStddevSampFields.VehicleState == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.VehicleState(childComplexity), true

	case "vehicle_info_stddev_samp_fields.vehicle_type":
		if e.complexity.VehicleInfoStddevSampFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.VehicleType(childComplexity), true

	case "vehicle_info_sum_fields.business_scope":
		if e.complexity.VehicleInfoSumFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.BusinessScope(childComplexity), true

	case "vehicle_info_sum_fields.car_rental_price":
		if e.complexity.VehicleInfoSumFields.CarRentalPrice == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.CarRentalPrice(childComplexity), true

	case "vehicle_info_sum_fields.check_state":
		if e.complexity.VehicleInfoSumFields.CheckState == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.CheckState(childComplexity), true

	case "vehicle_info_sum_fields.heavy":
		if e.complexity.VehicleInfoSumFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.Heavy(childComplexity), true

	case "vehicle_info_sum_fields.id":
		if e.complexity.VehicleInfoSumFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.ID(childComplexity), true

	case "vehicle_info_sum_fields.industry_category":
		if e.complexity.VehicleInfoSumFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.IndustryCategory(childComplexity), true

	case "vehicle_info_sum_fields.insurance_company":
		if e.complexity.VehicleInfoSumFields.InsuranceCompany == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.InsuranceCompany(childComplexity), true

	case "vehicle_info_sum_fields.license_plate_color":
		if e.complexity.VehicleInfoSumFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_sum_fields.license_plate_type":
		if e.complexity.VehicleInfoSumFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.LicensePlateType(childComplexity), true

	case "vehicle_info_sum_fields.muck_truck_id":
		if e.complexity.VehicleInfoSumFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.MuckTruckID(childComplexity), true

	case "vehicle_info_sum_fields.operating_state":
		if e.complexity.VehicleInfoSumFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.OperatingState(childComplexity), true

	case "vehicle_info_sum_fields.operating_type":
		if e.complexity.VehicleInfoSumFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.OperatingType(childComplexity), true

	case "vehicle_info_sum_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoSumFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_sum_fields.quasi_driving_models":
		if e.complexity.VehicleInfoSumFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.QuasiDrivingModels(childComplexity), true

	case "vehicle_info_sum_fields.seats":
		if e.complexity.VehicleInfoSumFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.Seats(childComplexity), true

	case "vehicle_info_sum_fields.vehicle_brand":
		if e.complexity.VehicleInfoSumFields.VehicleBrand == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.VehicleBrand(childComplexity), true

	case "vehicle_info_sum_fields.vehicle_state":
		if e.complexity.VehicleInfoSumFields.VehicleState == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.VehicleState(childComplexity), true

	case "vehicle_info_sum_fields.vehicle_type":
		if e.complexity.VehicleInfoSumFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.VehicleType(childComplexity), true

	case "vehicle_info_var_pop_fields.business_scope":
		if e.complexity.VehicleInfoVarPopFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.BusinessScope(childComplexity), true

	case "vehicle_info_var_pop_fields.car_rental_price":
		if e.complexity.VehicleInfoVarPopFields.CarRentalPrice == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.CarRentalPrice(childComplexity), true

	case "vehicle_info_var_pop_fields.check_state":
		if e.complexity.VehicleInfoVarPopFields.CheckState == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.CheckState(childComplexity), true

	case "vehicle_info_var_pop_fields.heavy":
		if e.complexity.VehicleInfoVarPopFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.Heavy(childComplexity), true

	case "vehicle_info_var_pop_fields.id":
		if e.complexity.VehicleInfoVarPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.ID(childComplexity), true

	case "vehicle_info_var_pop_fields.industry_category":
		if e.complexity.VehicleInfoVarPopFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.IndustryCategory(childComplexity), true

	case "vehicle_info_var_pop_fields.insurance_company":
		if e.complexity.VehicleInfoVarPopFields.InsuranceCompany == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.InsuranceCompany(childComplexity), true

	case "vehicle_info_var_pop_fields.license_plate_color":
		if e.complexity.VehicleInfoVarPopFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_var_pop_fields.license_plate_type":
		if e.complexity.VehicleInfoVarPopFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.LicensePlateType(childComplexity), true

	case "vehicle_info_var_pop_fields.muck_truck_id":
		if e.complexity.VehicleInfoVarPopFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.MuckTruckID(childComplexity), true

	case "vehicle_info_var_pop_fields.operating_state":
		if e.complexity.VehicleInfoVarPopFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.OperatingState(childComplexity), true

	case "vehicle_info_var_pop_fields.operating_type":
		if e.complexity.VehicleInfoVarPopFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.OperatingType(childComplexity), true

	case "vehicle_info_var_pop_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoVarPopFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_var_pop_fields.quasi_driving_models":
		if e.complexity.VehicleInfoVarPopFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.QuasiDrivingModels(childComplexity), true

	case "vehicle_info_var_pop_fields.seats":
		if e.complexity.VehicleInfoVarPopFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.Seats(childComplexity), true

	case "vehicle_info_var_pop_fields.vehicle_brand":
		if e.complexity.VehicleInfoVarPopFields.VehicleBrand == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.VehicleBrand(childComplexity), true

	case "vehicle_info_var_pop_fields.vehicle_state":
		if e.complexity.VehicleInfoVarPopFields.VehicleState == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.VehicleState(childComplexity), true

	case "vehicle_info_var_pop_fields.vehicle_type":
		if e.complexity.VehicleInfoVarPopFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.VehicleType(childComplexity), true

	case "vehicle_info_var_samp_fields.business_scope":
		if e.complexity.VehicleInfoVarSampFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.BusinessScope(childComplexity), true

	case "vehicle_info_var_samp_fields.car_rental_price":
		if e.complexity.VehicleInfoVarSampFields.CarRentalPrice == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.CarRentalPrice(childComplexity), true

	case "vehicle_info_var_samp_fields.check_state":
		if e.complexity.VehicleInfoVarSampFields.CheckState == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.CheckState(childComplexity), true

	case "vehicle_info_var_samp_fields.heavy":
		if e.complexity.VehicleInfoVarSampFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.Heavy(childComplexity), true

	case "vehicle_info_var_samp_fields.id":
		if e.complexity.VehicleInfoVarSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.ID(childComplexity), true

	case "vehicle_info_var_samp_fields.industry_category":
		if e.complexity.VehicleInfoVarSampFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.IndustryCategory(childComplexity), true

	case "vehicle_info_var_samp_fields.insurance_company":
		if e.complexity.VehicleInfoVarSampFields.InsuranceCompany == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.InsuranceCompany(childComplexity), true

	case "vehicle_info_var_samp_fields.license_plate_color":
		if e.complexity.VehicleInfoVarSampFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_var_samp_fields.license_plate_type":
		if e.complexity.VehicleInfoVarSampFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.LicensePlateType(childComplexity), true

	case "vehicle_info_var_samp_fields.muck_truck_id":
		if e.complexity.VehicleInfoVarSampFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.MuckTruckID(childComplexity), true

	case "vehicle_info_var_samp_fields.operating_state":
		if e.complexity.VehicleInfoVarSampFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.OperatingState(childComplexity), true

	case "vehicle_info_var_samp_fields.operating_type":
		if e.complexity.VehicleInfoVarSampFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.OperatingType(childComplexity), true

	case "vehicle_info_var_samp_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoVarSampFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_var_samp_fields.quasi_driving_models":
		if e.complexity.VehicleInfoVarSampFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.QuasiDrivingModels(childComplexity), true

	case "vehicle_info_var_samp_fields.seats":
		if e.complexity.VehicleInfoVarSampFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.Seats(childComplexity), true

	case "vehicle_info_var_samp_fields.vehicle_brand":
		if e.complexity.VehicleInfoVarSampFields.VehicleBrand == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.VehicleBrand(childComplexity), true

	case "vehicle_info_var_samp_fields.vehicle_state":
		if e.complexity.VehicleInfoVarSampFields.VehicleState == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.VehicleState(childComplexity), true

	case "vehicle_info_var_samp_fields.vehicle_type":
		if e.complexity.VehicleInfoVarSampFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.VehicleType(childComplexity), true

	case "vehicle_info_variance_fields.business_scope":
		if e.complexity.VehicleInfoVarianceFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.BusinessScope(childComplexity), true

	case "vehicle_info_variance_fields.car_rental_price":
		if e.complexity.VehicleInfoVarianceFields.CarRentalPrice == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.CarRentalPrice(childComplexity), true

	case "vehicle_info_variance_fields.check_state":
		if e.complexity.VehicleInfoVarianceFields.CheckState == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.CheckState(childComplexity), true

	case "vehicle_info_variance_fields.heavy":
		if e.complexity.VehicleInfoVarianceFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.Heavy(childComplexity), true

	case "vehicle_info_variance_fields.id":
		if e.complexity.VehicleInfoVarianceFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.ID(childComplexity), true

	case "vehicle_info_variance_fields.industry_category":
		if e.complexity.VehicleInfoVarianceFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.IndustryCategory(childComplexity), true

	case "vehicle_info_variance_fields.insurance_company":
		if e.complexity.VehicleInfoVarianceFields.InsuranceCompany == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.InsuranceCompany(childComplexity), true

	case "vehicle_info_variance_fields.license_plate_color":
		if e.complexity.VehicleInfoVarianceFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_variance_fields.license_plate_type":
		if e.complexity.VehicleInfoVarianceFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.LicensePlateType(childComplexity), true

	case "vehicle_info_variance_fields.muck_truck_id":
		if e.complexity.VehicleInfoVarianceFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.MuckTruckID(childComplexity), true

	case "vehicle_info_variance_fields.operating_state":
		if e.complexity.VehicleInfoVarianceFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.OperatingState(childComplexity), true

	case "vehicle_info_variance_fields.operating_type":
		if e.complexity.VehicleInfoVarianceFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.OperatingType(childComplexity), true

	case "vehicle_info_variance_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoVarianceFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_variance_fields.quasi_driving_models":
		if e.complexity.VehicleInfoVarianceFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.QuasiDrivingModels(childComplexity), true

	case "vehicle_info_variance_fields.seats":
		if e.complexity.VehicleInfoVarianceFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.Seats(childComplexity), true

	case "vehicle_info_variance_fields.vehicle_brand":
		if e.complexity.VehicleInfoVarianceFields.VehicleBrand == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.VehicleBrand(childComplexity), true

	case "vehicle_info_variance_fields.vehicle_state":
		if e.complexity.VehicleInfoVarianceFields.VehicleState == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.VehicleState(childComplexity), true

	case "vehicle_info_variance_fields.vehicle_type":
		if e.complexity.VehicleInfoVarianceFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.VehicleType(childComplexity), true

	case "vehicle_supervision_photo.camera_id":
		if e.complexity.VehicleSupervisionPhoto.CameraID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhoto.CameraID(childComplexity), true

	case "vehicle_supervision_photo.driver_id":
		if e.complexity.VehicleSupervisionPhoto.DriverID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhoto.DriverID(childComplexity), true

	case "vehicle_supervision_photo.enterprise_id":
		if e.complexity.VehicleSupervisionPhoto.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhoto.EnterpriseID(childComplexity), true

	case "vehicle_supervision_photo.id":
		if e.complexity.VehicleSupervisionPhoto.ID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhoto.ID(childComplexity), true

	case "vehicle_supervision_photo.IMEI":
		if e.complexity.VehicleSupervisionPhoto.Imei == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhoto.Imei(childComplexity), true

	case "vehicle_supervision_photo.monitoring_pic_address":
		if e.complexity.VehicleSupervisionPhoto.MonitoringPicAddress == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhoto.MonitoringPicAddress(childComplexity), true

	case "vehicle_supervision_photo.monitoring_pic_name":
		if e.complexity.VehicleSupervisionPhoto.MonitoringPicName == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhoto.MonitoringPicName(childComplexity), true

	case "vehicle_supervision_photo.monitoring_pic_upload_time":
		if e.complexity.VehicleSupervisionPhoto.MonitoringPicUploadTime == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhoto.MonitoringPicUploadTime(childComplexity), true

	case "vehicle_supervision_photo.photo_condition":
		if e.complexity.VehicleSupervisionPhoto.PhotoCondition == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhoto.PhotoCondition(childComplexity), true

	case "vehicle_supervision_photo.sim_number":
		if e.complexity.VehicleSupervisionPhoto.SimNumber == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhoto.SimNumber(childComplexity), true

	case "vehicle_supervision_photo.supervision_photo_id":
		if e.complexity.VehicleSupervisionPhoto.SupervisionPhotoID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhoto.SupervisionPhotoID(childComplexity), true

	case "vehicle_supervision_photo.update_time":
		if e.complexity.VehicleSupervisionPhoto.UpdateTime == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhoto.UpdateTime(childComplexity), true

	case "vehicle_supervision_photo.vehicle_id":
		if e.complexity.VehicleSupervisionPhoto.VehicleID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhoto.VehicleID(childComplexity), true

	case "vehicle_supervision_photo_aggregate.aggregate":
		if e.complexity.VehicleSupervisionPhotoAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoAggregate.Aggregate(childComplexity), true

	case "vehicle_supervision_photo_aggregate.nodes":
		if e.complexity.VehicleSupervisionPhotoAggregate.Nodes == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoAggregate.Nodes(childComplexity), true

	case "vehicle_supervision_photo_aggregate_fields.avg":
		if e.complexity.VehicleSupervisionPhotoAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoAggregateFields.Avg(childComplexity), true

	case "vehicle_supervision_photo_aggregate_fields.count":
		if e.complexity.VehicleSupervisionPhotoAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_vehicle_supervision_photo_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.VehicleSupervisionPhotoAggregateFields.Count(childComplexity, args["columns"].([]model.VehicleSupervisionPhotoSelectColumn), args["distinct"].(*bool)), true

	case "vehicle_supervision_photo_aggregate_fields.max":
		if e.complexity.VehicleSupervisionPhotoAggregateFields.Max == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoAggregateFields.Max(childComplexity), true

	case "vehicle_supervision_photo_aggregate_fields.min":
		if e.complexity.VehicleSupervisionPhotoAggregateFields.Min == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoAggregateFields.Min(childComplexity), true

	case "vehicle_supervision_photo_aggregate_fields.stddev":
		if e.complexity.VehicleSupervisionPhotoAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoAggregateFields.Stddev(childComplexity), true

	case "vehicle_supervision_photo_aggregate_fields.stddev_pop":
		if e.complexity.VehicleSupervisionPhotoAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoAggregateFields.StddevPop(childComplexity), true

	case "vehicle_supervision_photo_aggregate_fields.stddev_samp":
		if e.complexity.VehicleSupervisionPhotoAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoAggregateFields.StddevSamp(childComplexity), true

	case "vehicle_supervision_photo_aggregate_fields.sum":
		if e.complexity.VehicleSupervisionPhotoAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoAggregateFields.Sum(childComplexity), true

	case "vehicle_supervision_photo_aggregate_fields.var_pop":
		if e.complexity.VehicleSupervisionPhotoAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoAggregateFields.VarPop(childComplexity), true

	case "vehicle_supervision_photo_aggregate_fields.var_samp":
		if e.complexity.VehicleSupervisionPhotoAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoAggregateFields.VarSamp(childComplexity), true

	case "vehicle_supervision_photo_aggregate_fields.variance":
		if e.complexity.VehicleSupervisionPhotoAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoAggregateFields.Variance(childComplexity), true

	case "vehicle_supervision_photo_avg_fields.camera_id":
		if e.complexity.VehicleSupervisionPhotoAvgFields.CameraID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoAvgFields.CameraID(childComplexity), true

	case "vehicle_supervision_photo_avg_fields.id":
		if e.complexity.VehicleSupervisionPhotoAvgFields.ID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoAvgFields.ID(childComplexity), true

	case "vehicle_supervision_photo_max_fields.camera_id":
		if e.complexity.VehicleSupervisionPhotoMaxFields.CameraID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoMaxFields.CameraID(childComplexity), true

	case "vehicle_supervision_photo_max_fields.driver_id":
		if e.complexity.VehicleSupervisionPhotoMaxFields.DriverID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoMaxFields.DriverID(childComplexity), true

	case "vehicle_supervision_photo_max_fields.enterprise_id":
		if e.complexity.VehicleSupervisionPhotoMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoMaxFields.EnterpriseID(childComplexity), true

	case "vehicle_supervision_photo_max_fields.id":
		if e.complexity.VehicleSupervisionPhotoMaxFields.ID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoMaxFields.ID(childComplexity), true

	case "vehicle_supervision_photo_max_fields.IMEI":
		if e.complexity.VehicleSupervisionPhotoMaxFields.Imei == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoMaxFields.Imei(childComplexity), true

	case "vehicle_supervision_photo_max_fields.monitoring_pic_address":
		if e.complexity.VehicleSupervisionPhotoMaxFields.MonitoringPicAddress == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoMaxFields.MonitoringPicAddress(childComplexity), true

	case "vehicle_supervision_photo_max_fields.monitoring_pic_name":
		if e.complexity.VehicleSupervisionPhotoMaxFields.MonitoringPicName == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoMaxFields.MonitoringPicName(childComplexity), true

	case "vehicle_supervision_photo_max_fields.monitoring_pic_upload_time":
		if e.complexity.VehicleSupervisionPhotoMaxFields.MonitoringPicUploadTime == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoMaxFields.MonitoringPicUploadTime(childComplexity), true

	case "vehicle_supervision_photo_max_fields.photo_condition":
		if e.complexity.VehicleSupervisionPhotoMaxFields.PhotoCondition == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoMaxFields.PhotoCondition(childComplexity), true

	case "vehicle_supervision_photo_max_fields.sim_number":
		if e.complexity.VehicleSupervisionPhotoMaxFields.SimNumber == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoMaxFields.SimNumber(childComplexity), true

	case "vehicle_supervision_photo_max_fields.supervision_photo_id":
		if e.complexity.VehicleSupervisionPhotoMaxFields.SupervisionPhotoID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoMaxFields.SupervisionPhotoID(childComplexity), true

	case "vehicle_supervision_photo_max_fields.update_time":
		if e.complexity.VehicleSupervisionPhotoMaxFields.UpdateTime == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoMaxFields.UpdateTime(childComplexity), true

	case "vehicle_supervision_photo_max_fields.vehicle_id":
		if e.complexity.VehicleSupervisionPhotoMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoMaxFields.VehicleID(childComplexity), true

	case "vehicle_supervision_photo_min_fields.camera_id":
		if e.complexity.VehicleSupervisionPhotoMinFields.CameraID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoMinFields.CameraID(childComplexity), true

	case "vehicle_supervision_photo_min_fields.driver_id":
		if e.complexity.VehicleSupervisionPhotoMinFields.DriverID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoMinFields.DriverID(childComplexity), true

	case "vehicle_supervision_photo_min_fields.enterprise_id":
		if e.complexity.VehicleSupervisionPhotoMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoMinFields.EnterpriseID(childComplexity), true

	case "vehicle_supervision_photo_min_fields.id":
		if e.complexity.VehicleSupervisionPhotoMinFields.ID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoMinFields.ID(childComplexity), true

	case "vehicle_supervision_photo_min_fields.IMEI":
		if e.complexity.VehicleSupervisionPhotoMinFields.Imei == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoMinFields.Imei(childComplexity), true

	case "vehicle_supervision_photo_min_fields.monitoring_pic_address":
		if e.complexity.VehicleSupervisionPhotoMinFields.MonitoringPicAddress == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoMinFields.MonitoringPicAddress(childComplexity), true

	case "vehicle_supervision_photo_min_fields.monitoring_pic_name":
		if e.complexity.VehicleSupervisionPhotoMinFields.MonitoringPicName == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoMinFields.MonitoringPicName(childComplexity), true

	case "vehicle_supervision_photo_min_fields.monitoring_pic_upload_time":
		if e.complexity.VehicleSupervisionPhotoMinFields.MonitoringPicUploadTime == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoMinFields.MonitoringPicUploadTime(childComplexity), true

	case "vehicle_supervision_photo_min_fields.photo_condition":
		if e.complexity.VehicleSupervisionPhotoMinFields.PhotoCondition == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoMinFields.PhotoCondition(childComplexity), true

	case "vehicle_supervision_photo_min_fields.sim_number":
		if e.complexity.VehicleSupervisionPhotoMinFields.SimNumber == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoMinFields.SimNumber(childComplexity), true

	case "vehicle_supervision_photo_min_fields.supervision_photo_id":
		if e.complexity.VehicleSupervisionPhotoMinFields.SupervisionPhotoID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoMinFields.SupervisionPhotoID(childComplexity), true

	case "vehicle_supervision_photo_min_fields.update_time":
		if e.complexity.VehicleSupervisionPhotoMinFields.UpdateTime == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoMinFields.UpdateTime(childComplexity), true

	case "vehicle_supervision_photo_min_fields.vehicle_id":
		if e.complexity.VehicleSupervisionPhotoMinFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoMinFields.VehicleID(childComplexity), true

	case "vehicle_supervision_photo_mutation_response.affected_rows":
		if e.complexity.VehicleSupervisionPhotoMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoMutationResponse.AffectedRows(childComplexity), true

	case "vehicle_supervision_photo_mutation_response.returning":
		if e.complexity.VehicleSupervisionPhotoMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoMutationResponse.Returning(childComplexity), true

	case "vehicle_supervision_photo_stddev_fields.camera_id":
		if e.complexity.VehicleSupervisionPhotoStddevFields.CameraID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoStddevFields.CameraID(childComplexity), true

	case "vehicle_supervision_photo_stddev_fields.id":
		if e.complexity.VehicleSupervisionPhotoStddevFields.ID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoStddevFields.ID(childComplexity), true

	case "vehicle_supervision_photo_stddev_pop_fields.camera_id":
		if e.complexity.VehicleSupervisionPhotoStddevPopFields.CameraID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoStddevPopFields.CameraID(childComplexity), true

	case "vehicle_supervision_photo_stddev_pop_fields.id":
		if e.complexity.VehicleSupervisionPhotoStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoStddevPopFields.ID(childComplexity), true

	case "vehicle_supervision_photo_stddev_samp_fields.camera_id":
		if e.complexity.VehicleSupervisionPhotoStddevSampFields.CameraID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoStddevSampFields.CameraID(childComplexity), true

	case "vehicle_supervision_photo_stddev_samp_fields.id":
		if e.complexity.VehicleSupervisionPhotoStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoStddevSampFields.ID(childComplexity), true

	case "vehicle_supervision_photo_sum_fields.camera_id":
		if e.complexity.VehicleSupervisionPhotoSumFields.CameraID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoSumFields.CameraID(childComplexity), true

	case "vehicle_supervision_photo_sum_fields.id":
		if e.complexity.VehicleSupervisionPhotoSumFields.ID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoSumFields.ID(childComplexity), true

	case "vehicle_supervision_photo_var_pop_fields.camera_id":
		if e.complexity.VehicleSupervisionPhotoVarPopFields.CameraID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoVarPopFields.CameraID(childComplexity), true

	case "vehicle_supervision_photo_var_pop_fields.id":
		if e.complexity.VehicleSupervisionPhotoVarPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoVarPopFields.ID(childComplexity), true

	case "vehicle_supervision_photo_var_samp_fields.camera_id":
		if e.complexity.VehicleSupervisionPhotoVarSampFields.CameraID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoVarSampFields.CameraID(childComplexity), true

	case "vehicle_supervision_photo_var_samp_fields.id":
		if e.complexity.VehicleSupervisionPhotoVarSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoVarSampFields.ID(childComplexity), true

	case "vehicle_supervision_photo_variance_fields.camera_id":
		if e.complexity.VehicleSupervisionPhotoVarianceFields.CameraID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoVarianceFields.CameraID(childComplexity), true

	case "vehicle_supervision_photo_variance_fields.id":
		if e.complexity.VehicleSupervisionPhotoVarianceFields.ID == nil {
			break
		}

		return e.complexity.VehicleSupervisionPhotoVarianceFields.ID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, rc.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next()

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/JJ_VEHICLE.graphqls", Input: `
"""
公安内网六合一平台同步车辆表(不修改字段)


columns and relationships of "JJ_VEHICLE"

"""
type JJ_VEHICLE {
    """初次登记日期"""
    CCDJRQ: timestamptz

    """车辆类型"""
    CLLX: String

    """车辆识别代号"""
    CLSBDH: String

    """所在县"""
    COUNTY: String

    """登记日期"""
    DJRQ: timestamptz

    """发牌日期"""
    FPRQ: timestamptz

    """无"""
    GXRQ: timestamptz

    """车牌号码"""
    HPHM: String

    """号牌种类"""
    HPZL: String

    """是否删除"""
    IS_DETELED: numeric

    """联系电话"""
    LXDH: String

    """联系地址"""
    LXDZ: String

    """固话"""
    OTHER: String

    """强制报废期止"""
    QZBFQZ: timestamptz

    """无"""
    SJHM: String

    """所有人"""
    SYR: String

    """使用性质"""
    SYXZ: String

    """更新时间"""
    UPDATETIME: timestamptz

    """经营范围"""
    VEHMONTYPE: String

    """型号"""
    XH: String

    """有效期至"""
    YXQZ: timestamptz

    """机动车状态"""
    ZT: Int

    """总质量"""
    ZZL: numeric

    """主键"""
    id: bigint!

    """vehicle_info 车辆信息表 的vehicle_id"""
    vehicle_id: String!
}

"""
aggregated selection of "JJ_VEHICLE"
"""
type JJ_VEHICLE_aggregate {
    aggregate: JJ_VEHICLE_aggregate_fields
    nodes: [JJ_VEHICLE!]!
}

"""
aggregate fields of "JJ_VEHICLE"
"""
type JJ_VEHICLE_aggregate_fields {
    avg: JJ_VEHICLE_avg_fields
    count(columns: [JJ_VEHICLE_select_column!], distinct: Boolean): Int
    max: JJ_VEHICLE_max_fields
    min: JJ_VEHICLE_min_fields
    stddev: JJ_VEHICLE_stddev_fields
    stddev_pop: JJ_VEHICLE_stddev_pop_fields
    stddev_samp: JJ_VEHICLE_stddev_samp_fields
    sum: JJ_VEHICLE_sum_fields
    var_pop: JJ_VEHICLE_var_pop_fields
    var_samp: JJ_VEHICLE_var_samp_fields
    variance: JJ_VEHICLE_variance_fields
}

"""
order by aggregate values of table "JJ_VEHICLE"
"""
input JJ_VEHICLE_aggregate_order_by {
    avg: JJ_VEHICLE_avg_order_by
    count: order_by
    max: JJ_VEHICLE_max_order_by
    min: JJ_VEHICLE_min_order_by
    stddev: JJ_VEHICLE_stddev_order_by
    stddev_pop: JJ_VEHICLE_stddev_pop_order_by
    stddev_samp: JJ_VEHICLE_stddev_samp_order_by
    sum: JJ_VEHICLE_sum_order_by
    var_pop: JJ_VEHICLE_var_pop_order_by
    var_samp: JJ_VEHICLE_var_samp_order_by
    variance: JJ_VEHICLE_variance_order_by
}

"""
input type for inserting array relation for remote table "JJ_VEHICLE"
"""
input JJ_VEHICLE_arr_rel_insert_input {
    data: [JJ_VEHICLE_insert_input!]!
    on_conflict: JJ_VEHICLE_on_conflict
}

"""aggregate avg on columns"""
type JJ_VEHICLE_avg_fields {
    IS_DETELED: Float
    ZT: Float
    ZZL: Float
    id: Float
}

"""
order by avg() on columns of table "JJ_VEHICLE"
"""
input JJ_VEHICLE_avg_order_by {
    IS_DETELED: order_by
    ZT: order_by
    ZZL: order_by
    id: order_by
}

"""
Boolean expression to filter rows from the table "JJ_VEHICLE". All fields are combined with a logical 'AND'.
"""
input JJ_VEHICLE_bool_exp {
    CCDJRQ: timestamptz_comparison_exp
    CLLX: String_comparison_exp
    CLSBDH: String_comparison_exp
    COUNTY: String_comparison_exp
    DJRQ: timestamptz_comparison_exp
    FPRQ: timestamptz_comparison_exp
    GXRQ: timestamptz_comparison_exp
    HPHM: String_comparison_exp
    HPZL: String_comparison_exp
    IS_DETELED: numeric_comparison_exp
    LXDH: String_comparison_exp
    LXDZ: String_comparison_exp
    OTHER: String_comparison_exp
    QZBFQZ: timestamptz_comparison_exp
    SJHM: String_comparison_exp
    SYR: String_comparison_exp
    SYXZ: String_comparison_exp
    UPDATETIME: timestamptz_comparison_exp
    VEHMONTYPE: String_comparison_exp
    XH: String_comparison_exp
    YXQZ: timestamptz_comparison_exp
    ZT: Int_comparison_exp
    ZZL: numeric_comparison_exp
    _and: [JJ_VEHICLE_bool_exp]
    _not: JJ_VEHICLE_bool_exp
    _or: [JJ_VEHICLE_bool_exp]
    id: bigint_comparison_exp
    vehicle_id: String_comparison_exp
}

"""
unique or primary key constraints on table "JJ_VEHICLE"
"""
enum JJ_VEHICLE_constraint {
    """unique or primary key constraint"""
    JJ_VEHICLE_pkey
}

"""
input type for incrementing integer column in table "JJ_VEHICLE"
"""
input JJ_VEHICLE_inc_input {
    IS_DETELED: numeric
    ZT: Int
    ZZL: numeric
    id: bigint
}

"""
input type for inserting data into table "JJ_VEHICLE"
"""
input JJ_VEHICLE_insert_input {
    CCDJRQ: timestamptz
    CLLX: String
    CLSBDH: String
    COUNTY: String
    DJRQ: timestamptz
    FPRQ: timestamptz
    GXRQ: timestamptz
    HPHM: String
    HPZL: String
    IS_DETELED: numeric
    LXDH: String
    LXDZ: String
    OTHER: String
    QZBFQZ: timestamptz
    SJHM: String
    SYR: String
    SYXZ: String
    UPDATETIME: timestamptz
    VEHMONTYPE: String
    XH: String
    YXQZ: timestamptz
    ZT: Int
    ZZL: numeric
    id: bigint
    vehicle_id: String
}

"""aggregate max on columns"""
type JJ_VEHICLE_max_fields {
    CCDJRQ: timestamptz
    CLLX: String
    CLSBDH: String
    COUNTY: String
    DJRQ: timestamptz
    FPRQ: timestamptz
    GXRQ: timestamptz
    HPHM: String
    HPZL: String
    IS_DETELED: numeric
    LXDH: String
    LXDZ: String
    OTHER: String
    QZBFQZ: timestamptz
    SJHM: String
    SYR: String
    SYXZ: String
    UPDATETIME: timestamptz
    VEHMONTYPE: String
    XH: String
    YXQZ: timestamptz
    ZT: Int
    ZZL: numeric
    id: bigint
    vehicle_id: String
}

"""
order by max() on columns of table "JJ_VEHICLE"
"""
input JJ_VEHICLE_max_order_by {
    CCDJRQ: order_by
    CLLX: order_by
    CLSBDH: order_by
    COUNTY: order_by
    DJRQ: order_by
    FPRQ: order_by
    GXRQ: order_by
    HPHM: order_by
    HPZL: order_by
    IS_DETELED: order_by
    LXDH: order_by
    LXDZ: order_by
    OTHER: order_by
    QZBFQZ: order_by
    SJHM: order_by
    SYR: order_by
    SYXZ: order_by
    UPDATETIME: order_by
    VEHMONTYPE: order_by
    XH: order_by
    YXQZ: order_by
    ZT: order_by
    ZZL: order_by
    id: order_by
    vehicle_id: order_by
}

"""aggregate min on columns"""
type JJ_VEHICLE_min_fields {
    CCDJRQ: timestamptz
    CLLX: String
    CLSBDH: String
    COUNTY: String
    DJRQ: timestamptz
    FPRQ: timestamptz
    GXRQ: timestamptz
    HPHM: String
    HPZL: String
    IS_DETELED: numeric
    LXDH: String
    LXDZ: String
    OTHER: String
    QZBFQZ: timestamptz
    SJHM: String
    SYR: String
    SYXZ: String
    UPDATETIME: timestamptz
    VEHMONTYPE: String
    XH: String
    YXQZ: timestamptz
    ZT: Int
    ZZL: numeric
    id: bigint
    vehicle_id: String
}

"""
order by min() on columns of table "JJ_VEHICLE"
"""
input JJ_VEHICLE_min_order_by {
    CCDJRQ: order_by
    CLLX: order_by
    CLSBDH: order_by
    COUNTY: order_by
    DJRQ: order_by
    FPRQ: order_by
    GXRQ: order_by
    HPHM: order_by
    HPZL: order_by
    IS_DETELED: order_by
    LXDH: order_by
    LXDZ: order_by
    OTHER: order_by
    QZBFQZ: order_by
    SJHM: order_by
    SYR: order_by
    SYXZ: order_by
    UPDATETIME: order_by
    VEHMONTYPE: order_by
    XH: order_by
    YXQZ: order_by
    ZT: order_by
    ZZL: order_by
    id: order_by
    vehicle_id: order_by
}

"""
response of any mutation on the table "JJ_VEHICLE"
"""
type JJ_VEHICLE_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [JJ_VEHICLE!]!
}

"""
input type for inserting object relation for remote table "JJ_VEHICLE"
"""
input JJ_VEHICLE_obj_rel_insert_input {
    data: JJ_VEHICLE_insert_input!
    on_conflict: JJ_VEHICLE_on_conflict
}

"""
on conflict condition type for table "JJ_VEHICLE"
"""
input JJ_VEHICLE_on_conflict {
    constraint: JJ_VEHICLE_constraint!
    update_columns: [JJ_VEHICLE_update_column!]!
    where: JJ_VEHICLE_bool_exp
}

"""
ordering options when selecting data from "JJ_VEHICLE"
"""
input JJ_VEHICLE_order_by {
    CCDJRQ: order_by
    CLLX: order_by
    CLSBDH: order_by
    COUNTY: order_by
    DJRQ: order_by
    FPRQ: order_by
    GXRQ: order_by
    HPHM: order_by
    HPZL: order_by
    IS_DETELED: order_by
    LXDH: order_by
    LXDZ: order_by
    OTHER: order_by
    QZBFQZ: order_by
    SJHM: order_by
    SYR: order_by
    SYXZ: order_by
    UPDATETIME: order_by
    VEHMONTYPE: order_by
    XH: order_by
    YXQZ: order_by
    ZT: order_by
    ZZL: order_by
    id: order_by
    vehicle_id: order_by
}

"""
primary key columns input for table: "JJ_VEHICLE"
"""
input JJ_VEHICLE_pk_columns_input {
    """主键"""
    id: bigint!
}

"""
select columns of table "JJ_VEHICLE"
"""
enum JJ_VEHICLE_select_column {
    """column name"""
    CCDJRQ

    """column name"""
    CLLX

    """column name"""
    CLSBDH

    """column name"""
    COUNTY

    """column name"""
    DJRQ

    """column name"""
    FPRQ

    """column name"""
    GXRQ

    """column name"""
    HPHM

    """column name"""
    HPZL

    """column name"""
    IS_DETELED

    """column name"""
    LXDH

    """column name"""
    LXDZ

    """column name"""
    OTHER

    """column name"""
    QZBFQZ

    """column name"""
    SJHM

    """column name"""
    SYR

    """column name"""
    SYXZ

    """column name"""
    UPDATETIME

    """column name"""
    VEHMONTYPE

    """column name"""
    XH

    """column name"""
    YXQZ

    """column name"""
    ZT

    """column name"""
    ZZL

    """column name"""
    id

    """column name"""
    vehicle_id
}

"""
input type for updating data in table "JJ_VEHICLE"
"""
input JJ_VEHICLE_set_input {
    CCDJRQ: timestamptz
    CLLX: String
    CLSBDH: String
    COUNTY: String
    DJRQ: timestamptz
    FPRQ: timestamptz
    GXRQ: timestamptz
    HPHM: String
    HPZL: String
    IS_DETELED: numeric
    LXDH: String
    LXDZ: String
    OTHER: String
    QZBFQZ: timestamptz
    SJHM: String
    SYR: String
    SYXZ: String
    UPDATETIME: timestamptz
    VEHMONTYPE: String
    XH: String
    YXQZ: timestamptz
    ZT: Int
    ZZL: numeric
    id: bigint
    vehicle_id: String
}

"""aggregate stddev on columns"""
type JJ_VEHICLE_stddev_fields {
    IS_DETELED: Float
    ZT: Float
    ZZL: Float
    id: Float
}

"""
order by stddev() on columns of table "JJ_VEHICLE"
"""
input JJ_VEHICLE_stddev_order_by {
    IS_DETELED: order_by
    ZT: order_by
    ZZL: order_by
    id: order_by
}

"""aggregate stddev_pop on columns"""
type JJ_VEHICLE_stddev_pop_fields {
    IS_DETELED: Float
    ZT: Float
    ZZL: Float
    id: Float
}

"""
order by stddev_pop() on columns of table "JJ_VEHICLE"
"""
input JJ_VEHICLE_stddev_pop_order_by {
    IS_DETELED: order_by
    ZT: order_by
    ZZL: order_by
    id: order_by
}

"""aggregate stddev_samp on columns"""
type JJ_VEHICLE_stddev_samp_fields {
    IS_DETELED: Float
    ZT: Float
    ZZL: Float
    id: Float
}

"""
order by stddev_samp() on columns of table "JJ_VEHICLE"
"""
input JJ_VEHICLE_stddev_samp_order_by {
    IS_DETELED: order_by
    ZT: order_by
    ZZL: order_by
    id: order_by
}

"""aggregate sum on columns"""
type JJ_VEHICLE_sum_fields {
    IS_DETELED: numeric
    ZT: Int
    ZZL: numeric
    id: bigint
}

"""
order by sum() on columns of table "JJ_VEHICLE"
"""
input JJ_VEHICLE_sum_order_by {
    IS_DETELED: order_by
    ZT: order_by
    ZZL: order_by
    id: order_by
}

"""
update columns of table "JJ_VEHICLE"
"""
enum JJ_VEHICLE_update_column {
    """column name"""
    CCDJRQ

    """column name"""
    CLLX

    """column name"""
    CLSBDH

    """column name"""
    COUNTY

    """column name"""
    DJRQ

    """column name"""
    FPRQ

    """column name"""
    GXRQ

    """column name"""
    HPHM

    """column name"""
    HPZL

    """column name"""
    IS_DETELED

    """column name"""
    LXDH

    """column name"""
    LXDZ

    """column name"""
    OTHER

    """column name"""
    QZBFQZ

    """column name"""
    SJHM

    """column name"""
    SYR

    """column name"""
    SYXZ

    """column name"""
    UPDATETIME

    """column name"""
    VEHMONTYPE

    """column name"""
    XH

    """column name"""
    YXQZ

    """column name"""
    ZT

    """column name"""
    ZZL

    """column name"""
    id

    """column name"""
    vehicle_id
}

"""aggregate var_pop on columns"""
type JJ_VEHICLE_var_pop_fields {
    IS_DETELED: Float
    ZT: Float
    ZZL: Float
    id: Float
}

"""
order by var_pop() on columns of table "JJ_VEHICLE"
"""
input JJ_VEHICLE_var_pop_order_by {
    IS_DETELED: order_by
    ZT: order_by
    ZZL: order_by
    id: order_by
}

"""aggregate var_samp on columns"""
type JJ_VEHICLE_var_samp_fields {
    IS_DETELED: Float
    ZT: Float
    ZZL: Float
    id: Float
}

"""
order by var_samp() on columns of table "JJ_VEHICLE"
"""
input JJ_VEHICLE_var_samp_order_by {
    IS_DETELED: order_by
    ZT: order_by
    ZZL: order_by
    id: order_by
}

"""aggregate variance on columns"""
type JJ_VEHICLE_variance_fields {
    IS_DETELED: Float
    ZT: Float
    ZZL: Float
    id: Float
}

"""
order by variance() on columns of table "JJ_VEHICLE"
"""
input JJ_VEHICLE_variance_order_by {
    IS_DETELED: order_by
    ZT: order_by
    ZZL: order_by
    id: order_by
}

extend type Mutation {
    """
    delete data from the table: "JJ_VEHICLE"
  """
    delete_JJ_VEHICLE(
        """filter the rows which have to be deleted"""
        where: JJ_VEHICLE_bool_exp!
    ): JJ_VEHICLE_mutation_response

    """
    delete single row from the table: "JJ_VEHICLE"
  """
    delete_JJ_VEHICLE_by_pk(
        """主键"""
        id: bigint!
    ): JJ_VEHICLE

    """
    insert data into the table: "JJ_VEHICLE"
  """
    insert_JJ_VEHICLE(
        """the rows to be inserted"""
        objects: [JJ_VEHICLE_insert_input!]!

        """on conflict condition"""
        on_conflict: JJ_VEHICLE_on_conflict
    ): JJ_VEHICLE_mutation_response

    """
    insert a single row into the table: "JJ_VEHICLE"
  """
    insert_JJ_VEHICLE_one(
        """the row to be inserted"""
        object: JJ_VEHICLE_insert_input!

        """on conflict condition"""
        on_conflict: JJ_VEHICLE_on_conflict
    ): JJ_VEHICLE

    """
    update data of the table: "JJ_VEHICLE"
  """
    update_JJ_VEHICLE(
        """increments the integer columns with given value of the filtered values"""
        _inc: JJ_VEHICLE_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: JJ_VEHICLE_set_input

        """filter the rows which have to be updated"""
        where: JJ_VEHICLE_bool_exp!
    ): JJ_VEHICLE_mutation_response

    """
    update single row of the table: "JJ_VEHICLE"
  """
    update_JJ_VEHICLE_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: JJ_VEHICLE_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: JJ_VEHICLE_set_input
        pk_columns: JJ_VEHICLE_pk_columns_input!
    ): JJ_VEHICLE
}


extend type Query {
    """
    fetch data from the table: "JJ_VEHICLE"
  """
    JJ_VEHICLE(
        """distinct select on columns"""
        distinct_on: [JJ_VEHICLE_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [JJ_VEHICLE_order_by!]

        """filter the rows returned"""
        where: JJ_VEHICLE_bool_exp
    ): [JJ_VEHICLE!]!

    """
    fetch aggregated fields from the table: "JJ_VEHICLE"
  """
    JJ_VEHICLE_aggregate(
        """distinct select on columns"""
        distinct_on: [JJ_VEHICLE_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [JJ_VEHICLE_order_by!]

        """filter the rows returned"""
        where: JJ_VEHICLE_bool_exp
    ): JJ_VEHICLE_aggregate!

    """fetch data from the table: "JJ_VEHICLE" using primary key columns"""
    JJ_VEHICLE_by_pk(
        """主键"""
        id: bigint!
    ): JJ_VEHICLE
}


extend type Subscription {
    """
    fetch data from the table: "JJ_VEHICLE"
  """
    JJ_VEHICLE(
        """distinct select on columns"""
        distinct_on: [JJ_VEHICLE_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [JJ_VEHICLE_order_by!]

        """filter the rows returned"""
        where: JJ_VEHICLE_bool_exp
    ): [JJ_VEHICLE!]!

    """
    fetch aggregated fields from the table: "JJ_VEHICLE"
  """
    JJ_VEHICLE_aggregate(
        """distinct select on columns"""
        distinct_on: [JJ_VEHICLE_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [JJ_VEHICLE_order_by!]

        """filter the rows returned"""
        where: JJ_VEHICLE_bool_exp
    ): JJ_VEHICLE_aggregate!

    """fetch data from the table: "JJ_VEHICLE" using primary key columns"""
    JJ_VEHICLE_by_pk(
        """主键"""
        id: bigint!
    ): JJ_VEHICLE
}

`, BuiltIn: false},
	{Name: "graph/graphqls/muck_truck_category_info.graphqls", Input: `

"""
渣土车目录库车辆信息表


columns and relationships of "muck_truck_category_info"

"""
type muck_truck_category_info {
    """实际车主联系电话"""
    actual_owner_contact_phone: String

    """
    实际车主身份证号

    """
    actual_owner_id_number: String

    """实际车主身份证照片"""
    actual_owner_id_photo: String

    """实际车主姓名"""
    actual_owner_name: String

    """年检到期时间"""
    annual_inspection_expiration_time: timestamptz

    """申请验车时间"""
    apply_inspection_time: timestamptz

    """轴数"""
    axes_number: Int

    """黑名单截止日期"""
    blacklist_deadline: timestamptz

    """交强险保单图片"""
    compulsory_insurance_policy_picture: String

    """创建时间"""
    create_at: timestamptz!

    """创建人"""
    create_by: String!

    """删除时间"""
    delete_at: timestamptz

    """删除人"""
    delete_by: String

    """行驶证登记的车主联系电话"""
    driving_license_contact_phone: String

    """行驶证登记的车主身份证号"""
    driving_license_id_number: String

    """行驶证登记的车主身份证照片"""
    driving_liscense_owner_id_photo: String

    """发动机号"""
    engine_number: String

    """主键"""
    id: bigint!

    """违法通知书编号签注"""
    illegal_notice_number_endorsement: String

    """违法编号签注"""
    illegal_number_endorsement: String

    """事故编号签注"""
    incident_number_endorsement: String

    """初次登记日期"""
    initial_registration_date: timestamptz

    """保险到期时间"""
    insurance_expiry_time: timestamptz

    """是否黑名单"""
    is_blacklist: Boolean

    """是否删除"""
    is_delete: Boolean

    """是否安检到期报警处理"""
    is_due_security_alarm_processing: Boolean

    """是否首次注册"""
    is_first_register: Boolean

    """是否渣土办审核"""
    is_muck_office_audit: Boolean

    """是否发送短信"""
    is_send_sms: Boolean

    """泉工号发放日期"""
    issue_date_of_quangong_number: timestamptz

    """车主身份证照片"""
    owner_id_photo: String

    """处理备注"""
    processing_notes: String

    """处理时间"""
    processing_time: timestamptz

    """处理人"""
    processor: String

    """审核备注"""
    review_notes: String

    """
    审核状态

    """
    review_status: String

    """审核时间"""
    review_time: timestamptz

    """审核人"""
    reviewer: String

    """二级维护检测到期时间"""
    secondary_maintenance_expiry_date: timestamptz

    """二级维护地点"""
    secondary_maintenance_location: String

    """签收验车申请时间"""
    signing_acceptance_application_time: timestamptz

    """第三者保额"""
    third_party_insurance_coverage: String

    """第三者保险到期时间"""
    third_party_insurance_expiry_time: timestamptz

    """第三者保单图片"""
    third_party_insurance_policy_picture: String

    """总质量"""
    total_mass: numeric

    """修改时间"""
    update_at: timestamptz

    """修改人"""
    update_by: String

    """车辆描述"""
    vehicle_description: String

    """vehicle_info 车辆信息表 的vehicle_id"""
    vehicle_id: String!

    """车辆性质  1.本企业车辆  2.企业挂靠车辆  3.车队挂靠车辆"""
    vehicle_nature: Int

    """车辆营运证号"""
    vehicle_operating_certificate_number: String

    """车辆营运证照片"""
    vehicle_operating_certificate_photo: String

    """车辆图片"""
    vehicle_picture: String
}

"""
aggregated selection of "muck_truck_category_info"
"""
type muck_truck_category_info_aggregate {
    aggregate: muck_truck_category_info_aggregate_fields
    nodes: [muck_truck_category_info!]!
}

"""
aggregate fields of "muck_truck_category_info"
"""
type muck_truck_category_info_aggregate_fields {
    avg: muck_truck_category_info_avg_fields
    count(columns: [muck_truck_category_info_select_column!], distinct: Boolean): Int
    max: muck_truck_category_info_max_fields
    min: muck_truck_category_info_min_fields
    stddev: muck_truck_category_info_stddev_fields
    stddev_pop: muck_truck_category_info_stddev_pop_fields
    stddev_samp: muck_truck_category_info_stddev_samp_fields
    sum: muck_truck_category_info_sum_fields
    var_pop: muck_truck_category_info_var_pop_fields
    var_samp: muck_truck_category_info_var_samp_fields
    variance: muck_truck_category_info_variance_fields
}

"""
order by aggregate values of table "muck_truck_category_info"
"""
input muck_truck_category_info_aggregate_order_by {
    avg: muck_truck_category_info_avg_order_by
    count: order_by
    max: muck_truck_category_info_max_order_by
    min: muck_truck_category_info_min_order_by
    stddev: muck_truck_category_info_stddev_order_by
    stddev_pop: muck_truck_category_info_stddev_pop_order_by
    stddev_samp: muck_truck_category_info_stddev_samp_order_by
    sum: muck_truck_category_info_sum_order_by
    var_pop: muck_truck_category_info_var_pop_order_by
    var_samp: muck_truck_category_info_var_samp_order_by
    variance: muck_truck_category_info_variance_order_by
}

"""
input type for inserting array relation for remote table "muck_truck_category_info"
"""
input muck_truck_category_info_arr_rel_insert_input {
    data: [muck_truck_category_info_insert_input!]!
    on_conflict: muck_truck_category_info_on_conflict
}

"""aggregate avg on columns"""
type muck_truck_category_info_avg_fields {
    axes_number: Float
    id: Float
    total_mass: Float
    vehicle_nature: Float
}

"""
order by avg() on columns of table "muck_truck_category_info"
"""
input muck_truck_category_info_avg_order_by {
    axes_number: order_by
    id: order_by
    total_mass: order_by
    vehicle_nature: order_by
}

"""
Boolean expression to filter rows from the table "muck_truck_category_info". All fields are combined with a logical 'AND'.
"""
input muck_truck_category_info_bool_exp {
    _and: [muck_truck_category_info_bool_exp]
    _not: muck_truck_category_info_bool_exp
    _or: [muck_truck_category_info_bool_exp]
    actual_owner_contact_phone: String_comparison_exp
    actual_owner_id_number: String_comparison_exp
    actual_owner_id_photo: String_comparison_exp
    actual_owner_name: String_comparison_exp
    annual_inspection_expiration_time: timestamptz_comparison_exp
    apply_inspection_time: timestamptz_comparison_exp
    axes_number: Int_comparison_exp
    blacklist_deadline: timestamptz_comparison_exp
    compulsory_insurance_policy_picture: String_comparison_exp
    create_at: timestamptz_comparison_exp
    create_by: String_comparison_exp
    delete_at: timestamptz_comparison_exp
    delete_by: String_comparison_exp
    driving_license_contact_phone: String_comparison_exp
    driving_license_id_number: String_comparison_exp
    driving_liscense_owner_id_photo: String_comparison_exp
    engine_number: String_comparison_exp
    id: bigint_comparison_exp
    illegal_notice_number_endorsement: String_comparison_exp
    illegal_number_endorsement: String_comparison_exp
    incident_number_endorsement: String_comparison_exp
    initial_registration_date: timestamptz_comparison_exp
    insurance_expiry_time: timestamptz_comparison_exp
    is_blacklist: Boolean_comparison_exp
    is_delete: Boolean_comparison_exp
    is_due_security_alarm_processing: Boolean_comparison_exp
    is_first_register: Boolean_comparison_exp
    is_muck_office_audit: Boolean_comparison_exp
    is_send_sms: Boolean_comparison_exp
    issue_date_of_quangong_number: timestamptz_comparison_exp
    owner_id_photo: String_comparison_exp
    processing_notes: String_comparison_exp
    processing_time: timestamptz_comparison_exp
    processor: String_comparison_exp
    review_notes: String_comparison_exp
    review_status: String_comparison_exp
    review_time: timestamptz_comparison_exp
    reviewer: String_comparison_exp
    secondary_maintenance_expiry_date: timestamptz_comparison_exp
    secondary_maintenance_location: String_comparison_exp
    signing_acceptance_application_time: timestamptz_comparison_exp
    third_party_insurance_coverage: String_comparison_exp
    third_party_insurance_expiry_time: timestamptz_comparison_exp
    third_party_insurance_policy_picture: String_comparison_exp
    total_mass: numeric_comparison_exp
    update_at: timestamptz_comparison_exp
    update_by: String_comparison_exp
    vehicle_description: String_comparison_exp
    vehicle_id: String_comparison_exp
    vehicle_nature: Int_comparison_exp
    vehicle_operating_certificate_number: String_comparison_exp
    vehicle_operating_certificate_photo: String_comparison_exp
    vehicle_picture: String_comparison_exp
}

"""
unique or primary key constraints on table "muck_truck_category_info"
"""
enum muck_truck_category_info_constraint {
    """unique or primary key constraint"""
    muck_truck_category_info_pkey
}

"""
input type for incrementing integer column in table "muck_truck_category_info"
"""
input muck_truck_category_info_inc_input {
    axes_number: Int
    id: bigint
    total_mass: numeric
    vehicle_nature: Int
}

"""
input type for inserting data into table "muck_truck_category_info"
"""
input muck_truck_category_info_insert_input {
    actual_owner_contact_phone: String
    actual_owner_id_number: String
    actual_owner_id_photo: String
    actual_owner_name: String
    annual_inspection_expiration_time: timestamptz
    apply_inspection_time: timestamptz
    axes_number: Int
    blacklist_deadline: timestamptz
    compulsory_insurance_policy_picture: String
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    driving_license_contact_phone: String
    driving_license_id_number: String
    driving_liscense_owner_id_photo: String
    engine_number: String
    id: bigint
    illegal_notice_number_endorsement: String
    illegal_number_endorsement: String
    incident_number_endorsement: String
    initial_registration_date: timestamptz
    insurance_expiry_time: timestamptz
    is_blacklist: Boolean
    is_delete: Boolean
    is_due_security_alarm_processing: Boolean
    is_first_register: Boolean
    is_muck_office_audit: Boolean
    is_send_sms: Boolean
    issue_date_of_quangong_number: timestamptz
    owner_id_photo: String
    processing_notes: String
    processing_time: timestamptz
    processor: String
    review_notes: String
    review_status: String
    review_time: timestamptz
    reviewer: String
    secondary_maintenance_expiry_date: timestamptz
    secondary_maintenance_location: String
    signing_acceptance_application_time: timestamptz
    third_party_insurance_coverage: String
    third_party_insurance_expiry_time: timestamptz
    third_party_insurance_policy_picture: String
    total_mass: numeric
    update_at: timestamptz
    update_by: String
    vehicle_description: String
    vehicle_id: String
    vehicle_nature: Int
    vehicle_operating_certificate_number: String
    vehicle_operating_certificate_photo: String
    vehicle_picture: String
}

"""aggregate max on columns"""
type muck_truck_category_info_max_fields {
    actual_owner_contact_phone: String
    actual_owner_id_number: String
    actual_owner_id_photo: String
    actual_owner_name: String
    annual_inspection_expiration_time: timestamptz
    apply_inspection_time: timestamptz
    axes_number: Int
    blacklist_deadline: timestamptz
    compulsory_insurance_policy_picture: String
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    driving_license_contact_phone: String
    driving_license_id_number: String
    driving_liscense_owner_id_photo: String
    engine_number: String
    id: bigint
    illegal_notice_number_endorsement: String
    illegal_number_endorsement: String
    incident_number_endorsement: String
    initial_registration_date: timestamptz
    insurance_expiry_time: timestamptz
    issue_date_of_quangong_number: timestamptz
    owner_id_photo: String
    processing_notes: String
    processing_time: timestamptz
    processor: String
    review_notes: String
    review_status: String
    review_time: timestamptz
    reviewer: String
    secondary_maintenance_expiry_date: timestamptz
    secondary_maintenance_location: String
    signing_acceptance_application_time: timestamptz
    third_party_insurance_coverage: String
    third_party_insurance_expiry_time: timestamptz
    third_party_insurance_policy_picture: String
    total_mass: numeric
    update_at: timestamptz
    update_by: String
    vehicle_description: String
    vehicle_id: String
    vehicle_nature: Int
    vehicle_operating_certificate_number: String
    vehicle_operating_certificate_photo: String
    vehicle_picture: String
}

"""
order by max() on columns of table "muck_truck_category_info"
"""
input muck_truck_category_info_max_order_by {
    actual_owner_contact_phone: order_by
    actual_owner_id_number: order_by
    actual_owner_id_photo: order_by
    actual_owner_name: order_by
    annual_inspection_expiration_time: order_by
    apply_inspection_time: order_by
    axes_number: order_by
    blacklist_deadline: order_by
    compulsory_insurance_policy_picture: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    driving_license_contact_phone: order_by
    driving_license_id_number: order_by
    driving_liscense_owner_id_photo: order_by
    engine_number: order_by
    id: order_by
    illegal_notice_number_endorsement: order_by
    illegal_number_endorsement: order_by
    incident_number_endorsement: order_by
    initial_registration_date: order_by
    insurance_expiry_time: order_by
    issue_date_of_quangong_number: order_by
    owner_id_photo: order_by
    processing_notes: order_by
    processing_time: order_by
    processor: order_by
    review_notes: order_by
    review_status: order_by
    review_time: order_by
    reviewer: order_by
    secondary_maintenance_expiry_date: order_by
    secondary_maintenance_location: order_by
    signing_acceptance_application_time: order_by
    third_party_insurance_coverage: order_by
    third_party_insurance_expiry_time: order_by
    third_party_insurance_policy_picture: order_by
    total_mass: order_by
    update_at: order_by
    update_by: order_by
    vehicle_description: order_by
    vehicle_id: order_by
    vehicle_nature: order_by
    vehicle_operating_certificate_number: order_by
    vehicle_operating_certificate_photo: order_by
    vehicle_picture: order_by
}

"""aggregate min on columns"""
type muck_truck_category_info_min_fields {
    actual_owner_contact_phone: String
    actual_owner_id_number: String
    actual_owner_id_photo: String
    actual_owner_name: String
    annual_inspection_expiration_time: timestamptz
    apply_inspection_time: timestamptz
    axes_number: Int
    blacklist_deadline: timestamptz
    compulsory_insurance_policy_picture: String
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    driving_license_contact_phone: String
    driving_license_id_number: String
    driving_liscense_owner_id_photo: String
    engine_number: String
    id: bigint
    illegal_notice_number_endorsement: String
    illegal_number_endorsement: String
    incident_number_endorsement: String
    initial_registration_date: timestamptz
    insurance_expiry_time: timestamptz
    issue_date_of_quangong_number: timestamptz
    owner_id_photo: String
    processing_notes: String
    processing_time: timestamptz
    processor: String
    review_notes: String
    review_status: String
    review_time: timestamptz
    reviewer: String
    secondary_maintenance_expiry_date: timestamptz
    secondary_maintenance_location: String
    signing_acceptance_application_time: timestamptz
    third_party_insurance_coverage: String
    third_party_insurance_expiry_time: timestamptz
    third_party_insurance_policy_picture: String
    total_mass: numeric
    update_at: timestamptz
    update_by: String
    vehicle_description: String
    vehicle_id: String
    vehicle_nature: Int
    vehicle_operating_certificate_number: String
    vehicle_operating_certificate_photo: String
    vehicle_picture: String
}

"""
order by min() on columns of table "muck_truck_category_info"
"""
input muck_truck_category_info_min_order_by {
    actual_owner_contact_phone: order_by
    actual_owner_id_number: order_by
    actual_owner_id_photo: order_by
    actual_owner_name: order_by
    annual_inspection_expiration_time: order_by
    apply_inspection_time: order_by
    axes_number: order_by
    blacklist_deadline: order_by
    compulsory_insurance_policy_picture: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    driving_license_contact_phone: order_by
    driving_license_id_number: order_by
    driving_liscense_owner_id_photo: order_by
    engine_number: order_by
    id: order_by
    illegal_notice_number_endorsement: order_by
    illegal_number_endorsement: order_by
    incident_number_endorsement: order_by
    initial_registration_date: order_by
    insurance_expiry_time: order_by
    issue_date_of_quangong_number: order_by
    owner_id_photo: order_by
    processing_notes: order_by
    processing_time: order_by
    processor: order_by
    review_notes: order_by
    review_status: order_by
    review_time: order_by
    reviewer: order_by
    secondary_maintenance_expiry_date: order_by
    secondary_maintenance_location: order_by
    signing_acceptance_application_time: order_by
    third_party_insurance_coverage: order_by
    third_party_insurance_expiry_time: order_by
    third_party_insurance_policy_picture: order_by
    total_mass: order_by
    update_at: order_by
    update_by: order_by
    vehicle_description: order_by
    vehicle_id: order_by
    vehicle_nature: order_by
    vehicle_operating_certificate_number: order_by
    vehicle_operating_certificate_photo: order_by
    vehicle_picture: order_by
}

"""
response of any mutation on the table "muck_truck_category_info"
"""
type muck_truck_category_info_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [muck_truck_category_info!]!
}

"""
input type for inserting object relation for remote table "muck_truck_category_info"
"""
input muck_truck_category_info_obj_rel_insert_input {
    data: muck_truck_category_info_insert_input!
    on_conflict: muck_truck_category_info_on_conflict
}

"""
on conflict condition type for table "muck_truck_category_info"
"""
input muck_truck_category_info_on_conflict {
    constraint: muck_truck_category_info_constraint!
    update_columns: [muck_truck_category_info_update_column!]!
    where: muck_truck_category_info_bool_exp
}

"""
ordering options when selecting data from "muck_truck_category_info"
"""
input muck_truck_category_info_order_by {
    actual_owner_contact_phone: order_by
    actual_owner_id_number: order_by
    actual_owner_id_photo: order_by
    actual_owner_name: order_by
    annual_inspection_expiration_time: order_by
    apply_inspection_time: order_by
    axes_number: order_by
    blacklist_deadline: order_by
    compulsory_insurance_policy_picture: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    driving_license_contact_phone: order_by
    driving_license_id_number: order_by
    driving_liscense_owner_id_photo: order_by
    engine_number: order_by
    id: order_by
    illegal_notice_number_endorsement: order_by
    illegal_number_endorsement: order_by
    incident_number_endorsement: order_by
    initial_registration_date: order_by
    insurance_expiry_time: order_by
    is_blacklist: order_by
    is_delete: order_by
    is_due_security_alarm_processing: order_by
    is_first_register: order_by
    is_muck_office_audit: order_by
    is_send_sms: order_by
    issue_date_of_quangong_number: order_by
    owner_id_photo: order_by
    processing_notes: order_by
    processing_time: order_by
    processor: order_by
    review_notes: order_by
    review_status: order_by
    review_time: order_by
    reviewer: order_by
    secondary_maintenance_expiry_date: order_by
    secondary_maintenance_location: order_by
    signing_acceptance_application_time: order_by
    third_party_insurance_coverage: order_by
    third_party_insurance_expiry_time: order_by
    third_party_insurance_policy_picture: order_by
    total_mass: order_by
    update_at: order_by
    update_by: order_by
    vehicle_description: order_by
    vehicle_id: order_by
    vehicle_nature: order_by
    vehicle_operating_certificate_number: order_by
    vehicle_operating_certificate_photo: order_by
    vehicle_picture: order_by
}

"""
primary key columns input for table: "muck_truck_category_info"
"""
input muck_truck_category_info_pk_columns_input {
    """主键"""
    id: bigint!
}

"""
select columns of table "muck_truck_category_info"
"""
enum muck_truck_category_info_select_column {
    """column name"""
    actual_owner_contact_phone

    """column name"""
    actual_owner_id_number

    """column name"""
    actual_owner_id_photo

    """column name"""
    actual_owner_name

    """column name"""
    annual_inspection_expiration_time

    """column name"""
    apply_inspection_time

    """column name"""
    axes_number

    """column name"""
    blacklist_deadline

    """column name"""
    compulsory_insurance_policy_picture

    """column name"""
    create_at

    """column name"""
    create_by

    """column name"""
    delete_at

    """column name"""
    delete_by

    """column name"""
    driving_license_contact_phone

    """column name"""
    driving_license_id_number

    """column name"""
    driving_liscense_owner_id_photo

    """column name"""
    engine_number

    """column name"""
    id

    """column name"""
    illegal_notice_number_endorsement

    """column name"""
    illegal_number_endorsement

    """column name"""
    incident_number_endorsement

    """column name"""
    initial_registration_date

    """column name"""
    insurance_expiry_time

    """column name"""
    is_blacklist

    """column name"""
    is_delete

    """column name"""
    is_due_security_alarm_processing

    """column name"""
    is_first_register

    """column name"""
    is_muck_office_audit

    """column name"""
    is_send_sms

    """column name"""
    issue_date_of_quangong_number

    """column name"""
    owner_id_photo

    """column name"""
    processing_notes

    """column name"""
    processing_time

    """column name"""
    processor

    """column name"""
    review_notes

    """column name"""
    review_status

    """column name"""
    review_time

    """column name"""
    reviewer

    """column name"""
    secondary_maintenance_expiry_date

    """column name"""
    secondary_maintenance_location

    """column name"""
    signing_acceptance_application_time

    """column name"""
    third_party_insurance_coverage

    """column name"""
    third_party_insurance_expiry_time

    """column name"""
    third_party_insurance_policy_picture

    """column name"""
    total_mass

    """column name"""
    update_at

    """column name"""
    update_by

    """column name"""
    vehicle_description

    """column name"""
    vehicle_id

    """column name"""
    vehicle_nature

    """column name"""
    vehicle_operating_certificate_number

    """column name"""
    vehicle_operating_certificate_photo

    """column name"""
    vehicle_picture
}

"""
input type for updating data in table "muck_truck_category_info"
"""
input muck_truck_category_info_set_input {
    actual_owner_contact_phone: String
    actual_owner_id_number: String
    actual_owner_id_photo: String
    actual_owner_name: String
    annual_inspection_expiration_time: timestamptz
    apply_inspection_time: timestamptz
    axes_number: Int
    blacklist_deadline: timestamptz
    compulsory_insurance_policy_picture: String
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    driving_license_contact_phone: String
    driving_license_id_number: String
    driving_liscense_owner_id_photo: String
    engine_number: String
    id: bigint
    illegal_notice_number_endorsement: String
    illegal_number_endorsement: String
    incident_number_endorsement: String
    initial_registration_date: timestamptz
    insurance_expiry_time: timestamptz
    is_blacklist: Boolean
    is_delete: Boolean
    is_due_security_alarm_processing: Boolean
    is_first_register: Boolean
    is_muck_office_audit: Boolean
    is_send_sms: Boolean
    issue_date_of_quangong_number: timestamptz
    owner_id_photo: String
    processing_notes: String
    processing_time: timestamptz
    processor: String
    review_notes: String
    review_status: String
    review_time: timestamptz
    reviewer: String
    secondary_maintenance_expiry_date: timestamptz
    secondary_maintenance_location: String
    signing_acceptance_application_time: timestamptz
    third_party_insurance_coverage: String
    third_party_insurance_expiry_time: timestamptz
    third_party_insurance_policy_picture: String
    total_mass: numeric
    update_at: timestamptz
    update_by: String
    vehicle_description: String
    vehicle_id: String
    vehicle_nature: Int
    vehicle_operating_certificate_number: String
    vehicle_operating_certificate_photo: String
    vehicle_picture: String
}

"""aggregate stddev on columns"""
type muck_truck_category_info_stddev_fields {
    axes_number: Float
    id: Float
    total_mass: Float
    vehicle_nature: Float
}

"""
order by stddev() on columns of table "muck_truck_category_info"
"""
input muck_truck_category_info_stddev_order_by {
    axes_number: order_by
    id: order_by
    total_mass: order_by
    vehicle_nature: order_by
}

"""aggregate stddev_pop on columns"""
type muck_truck_category_info_stddev_pop_fields {
    axes_number: Float
    id: Float
    total_mass: Float
    vehicle_nature: Float
}

"""
order by stddev_pop() on columns of table "muck_truck_category_info"
"""
input muck_truck_category_info_stddev_pop_order_by {
    axes_number: order_by
    id: order_by
    total_mass: order_by
    vehicle_nature: order_by
}

"""aggregate stddev_samp on columns"""
type muck_truck_category_info_stddev_samp_fields {
    axes_number: Float
    id: Float
    total_mass: Float
    vehicle_nature: Float
}

"""
order by stddev_samp() on columns of table "muck_truck_category_info"
"""
input muck_truck_category_info_stddev_samp_order_by {
    axes_number: order_by
    id: order_by
    total_mass: order_by
    vehicle_nature: order_by
}

"""aggregate sum on columns"""
type muck_truck_category_info_sum_fields {
    axes_number: Int
    id: bigint
    total_mass: numeric
    vehicle_nature: Int
}

"""
order by sum() on columns of table "muck_truck_category_info"
"""
input muck_truck_category_info_sum_order_by {
    axes_number: order_by
    id: order_by
    total_mass: order_by
    vehicle_nature: order_by
}

"""
update columns of table "muck_truck_category_info"
"""
enum muck_truck_category_info_update_column {
    """column name"""
    actual_owner_contact_phone

    """column name"""
    actual_owner_id_number

    """column name"""
    actual_owner_id_photo

    """column name"""
    actual_owner_name

    """column name"""
    annual_inspection_expiration_time

    """column name"""
    apply_inspection_time

    """column name"""
    axes_number

    """column name"""
    blacklist_deadline

    """column name"""
    compulsory_insurance_policy_picture

    """column name"""
    create_at

    """column name"""
    create_by

    """column name"""
    delete_at

    """column name"""
    delete_by

    """column name"""
    driving_license_contact_phone

    """column name"""
    driving_license_id_number

    """column name"""
    driving_liscense_owner_id_photo

    """column name"""
    engine_number

    """column name"""
    id

    """column name"""
    illegal_notice_number_endorsement

    """column name"""
    illegal_number_endorsement

    """column name"""
    incident_number_endorsement

    """column name"""
    initial_registration_date

    """column name"""
    insurance_expiry_time

    """column name"""
    is_blacklist

    """column name"""
    is_delete

    """column name"""
    is_due_security_alarm_processing

    """column name"""
    is_first_register

    """column name"""
    is_muck_office_audit

    """column name"""
    is_send_sms

    """column name"""
    issue_date_of_quangong_number

    """column name"""
    owner_id_photo

    """column name"""
    processing_notes

    """column name"""
    processing_time

    """column name"""
    processor

    """column name"""
    review_notes

    """column name"""
    review_status

    """column name"""
    review_time

    """column name"""
    reviewer

    """column name"""
    secondary_maintenance_expiry_date

    """column name"""
    secondary_maintenance_location

    """column name"""
    signing_acceptance_application_time

    """column name"""
    third_party_insurance_coverage

    """column name"""
    third_party_insurance_expiry_time

    """column name"""
    third_party_insurance_policy_picture

    """column name"""
    total_mass

    """column name"""
    update_at

    """column name"""
    update_by

    """column name"""
    vehicle_description

    """column name"""
    vehicle_id

    """column name"""
    vehicle_nature

    """column name"""
    vehicle_operating_certificate_number

    """column name"""
    vehicle_operating_certificate_photo

    """column name"""
    vehicle_picture
}

"""aggregate var_pop on columns"""
type muck_truck_category_info_var_pop_fields {
    axes_number: Float
    id: Float
    total_mass: Float
    vehicle_nature: Float
}

"""
order by var_pop() on columns of table "muck_truck_category_info"
"""
input muck_truck_category_info_var_pop_order_by {
    axes_number: order_by
    id: order_by
    total_mass: order_by
    vehicle_nature: order_by
}

"""aggregate var_samp on columns"""
type muck_truck_category_info_var_samp_fields {
    axes_number: Float
    id: Float
    total_mass: Float
    vehicle_nature: Float
}

"""
order by var_samp() on columns of table "muck_truck_category_info"
"""
input muck_truck_category_info_var_samp_order_by {
    axes_number: order_by
    id: order_by
    total_mass: order_by
    vehicle_nature: order_by
}

"""aggregate variance on columns"""
type muck_truck_category_info_variance_fields {
    axes_number: Float
    id: Float
    total_mass: Float
    vehicle_nature: Float
}

"""
order by variance() on columns of table "muck_truck_category_info"
"""
input muck_truck_category_info_variance_order_by {
    axes_number: order_by
    id: order_by
    total_mass: order_by
    vehicle_nature: order_by
}

extend type Mutation {
    """
    delete data from the table: "muck_truck_category_info"
  """
    delete_muck_truck_category_info(
        """filter the rows which have to be deleted"""
        where: muck_truck_category_info_bool_exp!
    ): muck_truck_category_info_mutation_response

    """
    delete single row from the table: "muck_truck_category_info"
  """
    delete_muck_truck_category_info_by_pk(
        """主键"""
        id: bigint!
    ): muck_truck_category_info

    """
    insert data into the table: "muck_truck_category_info"
  """
    insert_muck_truck_category_info(
        """the rows to be inserted"""
        objects: [muck_truck_category_info_insert_input!]!

        """on conflict condition"""
        on_conflict: muck_truck_category_info_on_conflict
    ): muck_truck_category_info_mutation_response

    """
    insert a single row into the table: "muck_truck_category_info"
  """
    insert_muck_truck_category_info_one(
        """the row to be inserted"""
        object: muck_truck_category_info_insert_input!

        """on conflict condition"""
        on_conflict: muck_truck_category_info_on_conflict
    ): muck_truck_category_info

    """
    update data of the table: "muck_truck_category_info"
  """
    update_muck_truck_category_info(
        """increments the integer columns with given value of the filtered values"""
        _inc: muck_truck_category_info_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: muck_truck_category_info_set_input

        """filter the rows which have to be updated"""
        where: muck_truck_category_info_bool_exp!
    ): muck_truck_category_info_mutation_response

    """
    update single row of the table: "muck_truck_category_info"
  """
    update_muck_truck_category_info_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: muck_truck_category_info_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: muck_truck_category_info_set_input
        pk_columns: muck_truck_category_info_pk_columns_input!
    ): muck_truck_category_info
}





extend type Query {
    """
    fetch data from the table: "muck_truck_category_info"
  """
    muck_truck_category_info(
        """distinct select on columns"""
        distinct_on: [muck_truck_category_info_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [muck_truck_category_info_order_by!]

        """filter the rows returned"""
        where: muck_truck_category_info_bool_exp
    ): [muck_truck_category_info!]!

    """
    fetch aggregated fields from the table: "muck_truck_category_info"
  """
    muck_truck_category_info_aggregate(
        """distinct select on columns"""
        distinct_on: [muck_truck_category_info_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [muck_truck_category_info_order_by!]

        """filter the rows returned"""
        where: muck_truck_category_info_bool_exp
    ): muck_truck_category_info_aggregate!

    """
    fetch data from the table: "muck_truck_category_info" using primary key columns
    """
    muck_truck_category_info_by_pk(
        """主键"""
        id: bigint!
    ): muck_truck_category_info
}


extend type Subscription {
    """
    fetch data from the table: "muck_truck_category_info"
  """
    muck_truck_category_info(
        """distinct select on columns"""
        distinct_on: [muck_truck_category_info_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [muck_truck_category_info_order_by!]

        """filter the rows returned"""
        where: muck_truck_category_info_bool_exp
    ): [muck_truck_category_info!]!

    """
    fetch aggregated fields from the table: "muck_truck_category_info"
  """
    muck_truck_category_info_aggregate(
        """distinct select on columns"""
        distinct_on: [muck_truck_category_info_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [muck_truck_category_info_order_by!]

        """filter the rows returned"""
        where: muck_truck_category_info_bool_exp
    ): muck_truck_category_info_aggregate!

    """
    fetch data from the table: "muck_truck_category_info" using primary key columns
    """
    muck_truck_category_info_by_pk(
        """主键"""
        id: bigint!
    ): muck_truck_category_info
}

`, BuiltIn: false},
	{Name: "graph/graphqls/muck_truck_info.graphqls", Input: `
"""
渣土车信息表


columns and relationships of "muck_truck_info"

"""
type muck_truck_info {
    """地区ID"""
    area_id: bigint

    """创建时间"""
    create_at: timestamptz!

    """创建人"""
    create_by: String!

    """删除时间"""
    delete_at: timestamptz

    """删除人"""
    delete_by: String

    """费用到期时间"""
    expiry_date: timestamptz

    """伪IP"""
    fake_ip: String

    """是否预备库"""
    is_reserve_library: Boolean

    """装载类别"""
    load_category: String

    """移动办卡地"""
    mobile_card_location: String

    """主键"""
    muck_truck_id: bigint!

    """车辆类型（1.渣土车 2.混凝土车 3.砂石车）"""
    muck_truck_type: Int

    """注册日期"""
    registration_date: timestamptz

    """自编号"""
    self_number: String

    """服务器ID??"""
    server_id: bigint

    """SIM卡号"""
    sim_card_number: String

    """修改时间"""
    update_at: timestamptz

    """修改人"""
    update_by: String

    """vehicle_info 车辆信息表 的vehicle_id"""
    vehicle_id: String!
}

"""
aggregated selection of "muck_truck_info"
"""
type muck_truck_info_aggregate {
    aggregate: muck_truck_info_aggregate_fields
    nodes: [muck_truck_info!]!
}

"""
aggregate fields of "muck_truck_info"
"""
type muck_truck_info_aggregate_fields {
    avg: muck_truck_info_avg_fields
    count(columns: [muck_truck_info_select_column!], distinct: Boolean): Int
    max: muck_truck_info_max_fields
    min: muck_truck_info_min_fields
    stddev: muck_truck_info_stddev_fields
    stddev_pop: muck_truck_info_stddev_pop_fields
    stddev_samp: muck_truck_info_stddev_samp_fields
    sum: muck_truck_info_sum_fields
    var_pop: muck_truck_info_var_pop_fields
    var_samp: muck_truck_info_var_samp_fields
    variance: muck_truck_info_variance_fields
}

"""
order by aggregate values of table "muck_truck_info"
"""
input muck_truck_info_aggregate_order_by {
    avg: muck_truck_info_avg_order_by
    count: order_by
    max: muck_truck_info_max_order_by
    min: muck_truck_info_min_order_by
    stddev: muck_truck_info_stddev_order_by
    stddev_pop: muck_truck_info_stddev_pop_order_by
    stddev_samp: muck_truck_info_stddev_samp_order_by
    sum: muck_truck_info_sum_order_by
    var_pop: muck_truck_info_var_pop_order_by
    var_samp: muck_truck_info_var_samp_order_by
    variance: muck_truck_info_variance_order_by
}

"""
input type for inserting array relation for remote table "muck_truck_info"
"""
input muck_truck_info_arr_rel_insert_input {
    data: [muck_truck_info_insert_input!]!
    on_conflict: muck_truck_info_on_conflict
}

"""aggregate avg on columns"""
type muck_truck_info_avg_fields {
    area_id: Float
    muck_truck_id: Float
    muck_truck_type: Float
    server_id: Float
}

"""
order by avg() on columns of table "muck_truck_info"
"""
input muck_truck_info_avg_order_by {
    area_id: order_by
    muck_truck_id: order_by
    muck_truck_type: order_by
    server_id: order_by
}

"""
Boolean expression to filter rows from the table "muck_truck_info". All fields are combined with a logical 'AND'.
"""
input muck_truck_info_bool_exp {
    _and: [muck_truck_info_bool_exp]
    _not: muck_truck_info_bool_exp
    _or: [muck_truck_info_bool_exp]
    area_id: bigint_comparison_exp
    create_at: timestamptz_comparison_exp
    create_by: String_comparison_exp
    delete_at: timestamptz_comparison_exp
    delete_by: String_comparison_exp
    expiry_date: timestamptz_comparison_exp
    fake_ip: String_comparison_exp
    is_reserve_library: Boolean_comparison_exp
    load_category: String_comparison_exp
    mobile_card_location: String_comparison_exp
    muck_truck_id: bigint_comparison_exp
    muck_truck_type: Int_comparison_exp
    registration_date: timestamptz_comparison_exp
    self_number: String_comparison_exp
    server_id: bigint_comparison_exp
    sim_card_number: String_comparison_exp
    update_at: timestamptz_comparison_exp
    update_by: String_comparison_exp
    vehicle_id: String_comparison_exp
}

"""
unique or primary key constraints on table "muck_truck_info"
"""
enum muck_truck_info_constraint {
    """unique or primary key constraint"""
    muck_truck_info_pkey
}

"""
input type for incrementing integer column in table "muck_truck_info"
"""
input muck_truck_info_inc_input {
    area_id: bigint
    muck_truck_id: bigint
    muck_truck_type: Int
    server_id: bigint
}

"""
input type for inserting data into table "muck_truck_info"
"""
input muck_truck_info_insert_input {
    area_id: bigint
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    expiry_date: timestamptz
    fake_ip: String
    is_reserve_library: Boolean
    load_category: String
    mobile_card_location: String
    muck_truck_id: bigint
    muck_truck_type: Int
    registration_date: timestamptz
    self_number: String
    server_id: bigint
    sim_card_number: String
    update_at: timestamptz
    update_by: String
    vehicle_id: String
}

"""aggregate max on columns"""
type muck_truck_info_max_fields {
    area_id: bigint
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    expiry_date: timestamptz
    fake_ip: String
    load_category: String
    mobile_card_location: String
    muck_truck_id: bigint
    muck_truck_type: Int
    registration_date: timestamptz
    self_number: String
    server_id: bigint
    sim_card_number: String
    update_at: timestamptz
    update_by: String
    vehicle_id: String
}

"""
order by max() on columns of table "muck_truck_info"
"""
input muck_truck_info_max_order_by {
    area_id: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    expiry_date: order_by
    fake_ip: order_by
    load_category: order_by
    mobile_card_location: order_by
    muck_truck_id: order_by
    muck_truck_type: order_by
    registration_date: order_by
    self_number: order_by
    server_id: order_by
    sim_card_number: order_by
    update_at: order_by
    update_by: order_by
    vehicle_id: order_by
}

"""aggregate min on columns"""
type muck_truck_info_min_fields {
    area_id: bigint
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    expiry_date: timestamptz
    fake_ip: String
    load_category: String
    mobile_card_location: String
    muck_truck_id: bigint
    muck_truck_type: Int
    registration_date: timestamptz
    self_number: String
    server_id: bigint
    sim_card_number: String
    update_at: timestamptz
    update_by: String
    vehicle_id: String
}

"""
order by min() on columns of table "muck_truck_info"
"""
input muck_truck_info_min_order_by {
    area_id: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    expiry_date: order_by
    fake_ip: order_by
    load_category: order_by
    mobile_card_location: order_by
    muck_truck_id: order_by
    muck_truck_type: order_by
    registration_date: order_by
    self_number: order_by
    server_id: order_by
    sim_card_number: order_by
    update_at: order_by
    update_by: order_by
    vehicle_id: order_by
}

"""
response of any mutation on the table "muck_truck_info"
"""
type muck_truck_info_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [muck_truck_info!]!
}

"""
input type for inserting object relation for remote table "muck_truck_info"
"""
input muck_truck_info_obj_rel_insert_input {
    data: muck_truck_info_insert_input!
    on_conflict: muck_truck_info_on_conflict
}

"""
on conflict condition type for table "muck_truck_info"
"""
input muck_truck_info_on_conflict {
    constraint: muck_truck_info_constraint!
    update_columns: [muck_truck_info_update_column!]!
    where: muck_truck_info_bool_exp
}

"""
ordering options when selecting data from "muck_truck_info"
"""
input muck_truck_info_order_by {
    area_id: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    expiry_date: order_by
    fake_ip: order_by
    is_reserve_library: order_by
    load_category: order_by
    mobile_card_location: order_by
    muck_truck_id: order_by
    muck_truck_type: order_by
    registration_date: order_by
    self_number: order_by
    server_id: order_by
    sim_card_number: order_by
    update_at: order_by
    update_by: order_by
    vehicle_id: order_by
}

"""
primary key columns input for table: "muck_truck_info"
"""
input muck_truck_info_pk_columns_input {
    """主键"""
    muck_truck_id: bigint!
}

"""
select columns of table "muck_truck_info"
"""
enum muck_truck_info_select_column {
    """column name"""
    area_id

    """column name"""
    create_at

    """column name"""
    create_by

    """column name"""
    delete_at

    """column name"""
    delete_by

    """column name"""
    expiry_date

    """column name"""
    fake_ip

    """column name"""
    is_reserve_library

    """column name"""
    load_category

    """column name"""
    mobile_card_location

    """column name"""
    muck_truck_id

    """column name"""
    muck_truck_type

    """column name"""
    registration_date

    """column name"""
    self_number

    """column name"""
    server_id

    """column name"""
    sim_card_number

    """column name"""
    update_at

    """column name"""
    update_by

    """column name"""
    vehicle_id
}

"""
input type for updating data in table "muck_truck_info"
"""
input muck_truck_info_set_input {
    area_id: bigint
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    expiry_date: timestamptz
    fake_ip: String
    is_reserve_library: Boolean
    load_category: String
    mobile_card_location: String
    muck_truck_id: bigint
    muck_truck_type: Int
    registration_date: timestamptz
    self_number: String
    server_id: bigint
    sim_card_number: String
    update_at: timestamptz
    update_by: String
    vehicle_id: String
}

"""aggregate stddev on columns"""
type muck_truck_info_stddev_fields {
    area_id: Float
    muck_truck_id: Float
    muck_truck_type: Float
    server_id: Float
}

"""
order by stddev() on columns of table "muck_truck_info"
"""
input muck_truck_info_stddev_order_by {
    area_id: order_by
    muck_truck_id: order_by
    muck_truck_type: order_by
    server_id: order_by
}

"""aggregate stddev_pop on columns"""
type muck_truck_info_stddev_pop_fields {
    area_id: Float
    muck_truck_id: Float
    muck_truck_type: Float
    server_id: Float
}

"""
order by stddev_pop() on columns of table "muck_truck_info"
"""
input muck_truck_info_stddev_pop_order_by {
    area_id: order_by
    muck_truck_id: order_by
    muck_truck_type: order_by
    server_id: order_by
}

"""aggregate stddev_samp on columns"""
type muck_truck_info_stddev_samp_fields {
    area_id: Float
    muck_truck_id: Float
    muck_truck_type: Float
    server_id: Float
}

"""
order by stddev_samp() on columns of table "muck_truck_info"
"""
input muck_truck_info_stddev_samp_order_by {
    area_id: order_by
    muck_truck_id: order_by
    muck_truck_type: order_by
    server_id: order_by
}

"""aggregate sum on columns"""
type muck_truck_info_sum_fields {
    area_id: bigint
    muck_truck_id: bigint
    muck_truck_type: Int
    server_id: bigint
}

"""
order by sum() on columns of table "muck_truck_info"
"""
input muck_truck_info_sum_order_by {
    area_id: order_by
    muck_truck_id: order_by
    muck_truck_type: order_by
    server_id: order_by
}

"""
update columns of table "muck_truck_info"
"""
enum muck_truck_info_update_column {
    """column name"""
    area_id

    """column name"""
    create_at

    """column name"""
    create_by

    """column name"""
    delete_at

    """column name"""
    delete_by

    """column name"""
    expiry_date

    """column name"""
    fake_ip

    """column name"""
    is_reserve_library

    """column name"""
    load_category

    """column name"""
    mobile_card_location

    """column name"""
    muck_truck_id

    """column name"""
    muck_truck_type

    """column name"""
    registration_date

    """column name"""
    self_number

    """column name"""
    server_id

    """column name"""
    sim_card_number

    """column name"""
    update_at

    """column name"""
    update_by

    """column name"""
    vehicle_id
}

"""aggregate var_pop on columns"""
type muck_truck_info_var_pop_fields {
    area_id: Float
    muck_truck_id: Float
    muck_truck_type: Float
    server_id: Float
}

"""
order by var_pop() on columns of table "muck_truck_info"
"""
input muck_truck_info_var_pop_order_by {
    area_id: order_by
    muck_truck_id: order_by
    muck_truck_type: order_by
    server_id: order_by
}

"""aggregate var_samp on columns"""
type muck_truck_info_var_samp_fields {
    area_id: Float
    muck_truck_id: Float
    muck_truck_type: Float
    server_id: Float
}

"""
order by var_samp() on columns of table "muck_truck_info"
"""
input muck_truck_info_var_samp_order_by {
    area_id: order_by
    muck_truck_id: order_by
    muck_truck_type: order_by
    server_id: order_by
}

"""aggregate variance on columns"""
type muck_truck_info_variance_fields {
    area_id: Float
    muck_truck_id: Float
    muck_truck_type: Float
    server_id: Float
}

"""
order by variance() on columns of table "muck_truck_info"
"""
input muck_truck_info_variance_order_by {
    area_id: order_by
    muck_truck_id: order_by
    muck_truck_type: order_by
    server_id: order_by
}

extend type Mutation {
    """
    delete data from the table: "muck_truck_info"
  """
    delete_muck_truck_info(
        """filter the rows which have to be deleted"""
        where: muck_truck_info_bool_exp!
    ): muck_truck_info_mutation_response

    """
    delete single row from the table: "muck_truck_info"
  """
    delete_muck_truck_info_by_pk(
        """主键"""
        muck_truck_id: bigint!
    ): muck_truck_info

    """
    insert data into the table: "muck_truck_info"
  """
    insert_muck_truck_info(
        """the rows to be inserted"""
        objects: [muck_truck_info_insert_input!]!

        """on conflict condition"""
        on_conflict: muck_truck_info_on_conflict
    ): muck_truck_info_mutation_response

    """
    insert a single row into the table: "muck_truck_info"
  """
    insert_muck_truck_info_one(
        """the row to be inserted"""
        object: muck_truck_info_insert_input!

        """on conflict condition"""
        on_conflict: muck_truck_info_on_conflict
    ): muck_truck_info

    """
    update data of the table: "muck_truck_info"
  """
    update_muck_truck_info(
        """increments the integer columns with given value of the filtered values"""
        _inc: muck_truck_info_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: muck_truck_info_set_input

        """filter the rows which have to be updated"""
        where: muck_truck_info_bool_exp!
    ): muck_truck_info_mutation_response

    """
    update single row of the table: "muck_truck_info"
  """
    update_muck_truck_info_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: muck_truck_info_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: muck_truck_info_set_input
        pk_columns: muck_truck_info_pk_columns_input!
    ): muck_truck_info
}


extend type Query {
    """
    fetch data from the table: "muck_truck_info"
  """
    muck_truck_info(
        """distinct select on columns"""
        distinct_on: [muck_truck_info_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [muck_truck_info_order_by!]

        """filter the rows returned"""
        where: muck_truck_info_bool_exp
    ): [muck_truck_info!]!

    """
    fetch aggregated fields from the table: "muck_truck_info"
  """
    muck_truck_info_aggregate(
        """distinct select on columns"""
        distinct_on: [muck_truck_info_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [muck_truck_info_order_by!]

        """filter the rows returned"""
        where: muck_truck_info_bool_exp
    ): muck_truck_info_aggregate!

    """fetch data from the table: "muck_truck_info" using primary key columns"""
    muck_truck_info_by_pk(
        """主键"""
        muck_truck_id: bigint!
    ): muck_truck_info
}



extend type Subscription {
    """
    fetch data from the table: "muck_truck_info"
  """
    muck_truck_info(
        """distinct select on columns"""
        distinct_on: [muck_truck_info_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [muck_truck_info_order_by!]

        """filter the rows returned"""
        where: muck_truck_info_bool_exp
    ): [muck_truck_info!]!

    """
    fetch aggregated fields from the table: "muck_truck_info"
  """
    muck_truck_info_aggregate(
        """distinct select on columns"""
        distinct_on: [muck_truck_info_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [muck_truck_info_order_by!]

        """filter the rows returned"""
        where: muck_truck_info_bool_exp
    ): muck_truck_info_aggregate!

    """fetch data from the table: "muck_truck_info" using primary key columns"""
    muck_truck_info_by_pk(
        """主键"""
        muck_truck_id: bigint!
    ): muck_truck_info
}

`, BuiltIn: false},
	{Name: "graph/graphqls/muck_truck_preview_number.graphqls", Input: `
"""
渣土车车辆预编号表


columns and relationships of "muck_truck_preview_number"

"""
type muck_truck_preview_number {
    """确认状态"""
    confirm_status: Int

    """确认时间"""
    confirm_time: timestamptz

    """确认人"""
    confirmor: String

    """联系人"""
    contact_person: String

    """联系电话"""
    contact_phone: String

    """创建人"""
    create_by: String!

    """删除时间"""
    delete_at: timestamptz

    """删除人"""
    delete_by: String

    """前车牌"""
    front_license_plate: String

    """主键"""
    id: bigint!

    """初次登记日期"""
    initial_registration_date: timestamptz

    """是否删除"""
    is_delete: Boolean

    """是否登记销售订单"""
    is_register_sale_order: Boolean

    """是否自动审核"""
    is_review_automatically: Boolean

    """制作中时间"""
    marking_time: timestamptz

    """原编号"""
    original_number: String

    """制作状态"""
    production_status: Int

    """制作时间"""
    production_time: timestamptz

    """制作次数"""
    production_times: Int

    """后车牌"""
    rear_license_plate: String

    """登记时间"""
    registration_time: timestamptz

    """备注"""
    remarks: String

    """侧车牌"""
    side_license_plate: String

    """预编号"""
    svn_number: String

    """违法未处理数"""
    unlawful_violation_number: Int

    """修改时间"""
    update_at: timestamptz!

    """修改人"""
    update_by: String

    """vehicle_info 车辆信息表 的vehicle_id"""
    vehicle_id: String!

    """工号牌颜色（green.绿色 yellow.黄色）"""
    work_number_plate_color: String
}

"""
aggregated selection of "muck_truck_preview_number"
"""
type muck_truck_preview_number_aggregate {
    aggregate: muck_truck_preview_number_aggregate_fields
    nodes: [muck_truck_preview_number!]!
}

"""
aggregate fields of "muck_truck_preview_number"
"""
type muck_truck_preview_number_aggregate_fields {
    avg: muck_truck_preview_number_avg_fields
    count(columns: [muck_truck_preview_number_select_column!], distinct: Boolean): Int
    max: muck_truck_preview_number_max_fields
    min: muck_truck_preview_number_min_fields
    stddev: muck_truck_preview_number_stddev_fields
    stddev_pop: muck_truck_preview_number_stddev_pop_fields
    stddev_samp: muck_truck_preview_number_stddev_samp_fields
    sum: muck_truck_preview_number_sum_fields
    var_pop: muck_truck_preview_number_var_pop_fields
    var_samp: muck_truck_preview_number_var_samp_fields
    variance: muck_truck_preview_number_variance_fields
}

"""
order by aggregate values of table "muck_truck_preview_number"
"""
input muck_truck_preview_number_aggregate_order_by {
    avg: muck_truck_preview_number_avg_order_by
    count: order_by
    max: muck_truck_preview_number_max_order_by
    min: muck_truck_preview_number_min_order_by
    stddev: muck_truck_preview_number_stddev_order_by
    stddev_pop: muck_truck_preview_number_stddev_pop_order_by
    stddev_samp: muck_truck_preview_number_stddev_samp_order_by
    sum: muck_truck_preview_number_sum_order_by
    var_pop: muck_truck_preview_number_var_pop_order_by
    var_samp: muck_truck_preview_number_var_samp_order_by
    variance: muck_truck_preview_number_variance_order_by
}

"""
input type for inserting array relation for remote table "muck_truck_preview_number"
"""
input muck_truck_preview_number_arr_rel_insert_input {
    data: [muck_truck_preview_number_insert_input!]!
    on_conflict: muck_truck_preview_number_on_conflict
}

"""aggregate avg on columns"""
type muck_truck_preview_number_avg_fields {
    confirm_status: Float
    id: Float
    production_status: Float
    production_times: Float
    unlawful_violation_number: Float
}

"""
order by avg() on columns of table "muck_truck_preview_number"
"""
input muck_truck_preview_number_avg_order_by {
    confirm_status: order_by
    id: order_by
    production_status: order_by
    production_times: order_by
    unlawful_violation_number: order_by
}

"""
Boolean expression to filter rows from the table "muck_truck_preview_number". All fields are combined with a logical 'AND'.
"""
input muck_truck_preview_number_bool_exp {
    _and: [muck_truck_preview_number_bool_exp]
    _not: muck_truck_preview_number_bool_exp
    _or: [muck_truck_preview_number_bool_exp]
    confirm_status: Int_comparison_exp
    confirm_time: timestamptz_comparison_exp
    confirmor: String_comparison_exp
    contact_person: String_comparison_exp
    contact_phone: String_comparison_exp
    create_by: String_comparison_exp
    delete_at: timestamptz_comparison_exp
    delete_by: String_comparison_exp
    front_license_plate: String_comparison_exp
    id: bigint_comparison_exp
    initial_registration_date: timestamptz_comparison_exp
    is_delete: Boolean_comparison_exp
    is_register_sale_order: Boolean_comparison_exp
    is_review_automatically: Boolean_comparison_exp
    marking_time: timestamptz_comparison_exp
    original_number: String_comparison_exp
    production_status: Int_comparison_exp
    production_time: timestamptz_comparison_exp
    production_times: Int_comparison_exp
    rear_license_plate: String_comparison_exp
    registration_time: timestamptz_comparison_exp
    remarks: String_comparison_exp
    side_license_plate: String_comparison_exp
    svn_number: String_comparison_exp
    unlawful_violation_number: Int_comparison_exp
    update_at: timestamptz_comparison_exp
    update_by: String_comparison_exp
    vehicle_id: String_comparison_exp
    work_number_plate_color: String_comparison_exp
}

"""
unique or primary key constraints on table "muck_truck_preview_number"
"""
enum muck_truck_preview_number_constraint {
    """unique or primary key constraint"""
    muck_truck_preview_number_pkey
}

"""
input type for incrementing integer column in table "muck_truck_preview_number"
"""
input muck_truck_preview_number_inc_input {
    confirm_status: Int
    id: bigint
    production_status: Int
    production_times: Int
    unlawful_violation_number: Int
}

"""
input type for inserting data into table "muck_truck_preview_number"
"""
input muck_truck_preview_number_insert_input {
    confirm_status: Int
    confirm_time: timestamptz
    confirmor: String
    contact_person: String
    contact_phone: String
    create_by: String
    delete_at: timestamptz
    delete_by: String
    front_license_plate: String
    id: bigint
    initial_registration_date: timestamptz
    is_delete: Boolean
    is_register_sale_order: Boolean
    is_review_automatically: Boolean
    marking_time: timestamptz
    original_number: String
    production_status: Int
    production_time: timestamptz
    production_times: Int
    rear_license_plate: String
    registration_time: timestamptz
    remarks: String
    side_license_plate: String
    svn_number: String
    unlawful_violation_number: Int
    update_at: timestamptz
    update_by: String
    vehicle_id: String
    work_number_plate_color: String
}

"""aggregate max on columns"""
type muck_truck_preview_number_max_fields {
    confirm_status: Int
    confirm_time: timestamptz
    confirmor: String
    contact_person: String
    contact_phone: String
    create_by: String
    delete_at: timestamptz
    delete_by: String
    front_license_plate: String
    id: bigint
    initial_registration_date: timestamptz
    marking_time: timestamptz
    original_number: String
    production_status: Int
    production_time: timestamptz
    production_times: Int
    rear_license_plate: String
    registration_time: timestamptz
    remarks: String
    side_license_plate: String
    svn_number: String
    unlawful_violation_number: Int
    update_at: timestamptz
    update_by: String
    vehicle_id: String
    work_number_plate_color: String
}

"""
order by max() on columns of table "muck_truck_preview_number"
"""
input muck_truck_preview_number_max_order_by {
    confirm_status: order_by
    confirm_time: order_by
    confirmor: order_by
    contact_person: order_by
    contact_phone: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    front_license_plate: order_by
    id: order_by
    initial_registration_date: order_by
    marking_time: order_by
    original_number: order_by
    production_status: order_by
    production_time: order_by
    production_times: order_by
    rear_license_plate: order_by
    registration_time: order_by
    remarks: order_by
    side_license_plate: order_by
    svn_number: order_by
    unlawful_violation_number: order_by
    update_at: order_by
    update_by: order_by
    vehicle_id: order_by
    work_number_plate_color: order_by
}

"""aggregate min on columns"""
type muck_truck_preview_number_min_fields {
    confirm_status: Int
    confirm_time: timestamptz
    confirmor: String
    contact_person: String
    contact_phone: String
    create_by: String
    delete_at: timestamptz
    delete_by: String
    front_license_plate: String
    id: bigint
    initial_registration_date: timestamptz
    marking_time: timestamptz
    original_number: String
    production_status: Int
    production_time: timestamptz
    production_times: Int
    rear_license_plate: String
    registration_time: timestamptz
    remarks: String
    side_license_plate: String
    svn_number: String
    unlawful_violation_number: Int
    update_at: timestamptz
    update_by: String
    vehicle_id: String
    work_number_plate_color: String
}

"""
order by min() on columns of table "muck_truck_preview_number"
"""
input muck_truck_preview_number_min_order_by {
    confirm_status: order_by
    confirm_time: order_by
    confirmor: order_by
    contact_person: order_by
    contact_phone: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    front_license_plate: order_by
    id: order_by
    initial_registration_date: order_by
    marking_time: order_by
    original_number: order_by
    production_status: order_by
    production_time: order_by
    production_times: order_by
    rear_license_plate: order_by
    registration_time: order_by
    remarks: order_by
    side_license_plate: order_by
    svn_number: order_by
    unlawful_violation_number: order_by
    update_at: order_by
    update_by: order_by
    vehicle_id: order_by
    work_number_plate_color: order_by
}

"""
response of any mutation on the table "muck_truck_preview_number"
"""
type muck_truck_preview_number_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [muck_truck_preview_number!]!
}

"""
input type for inserting object relation for remote table "muck_truck_preview_number"
"""
input muck_truck_preview_number_obj_rel_insert_input {
    data: muck_truck_preview_number_insert_input!
    on_conflict: muck_truck_preview_number_on_conflict
}

"""
on conflict condition type for table "muck_truck_preview_number"
"""
input muck_truck_preview_number_on_conflict {
    constraint: muck_truck_preview_number_constraint!
    update_columns: [muck_truck_preview_number_update_column!]!
    where: muck_truck_preview_number_bool_exp
}

"""
ordering options when selecting data from "muck_truck_preview_number"
"""
input muck_truck_preview_number_order_by {
    confirm_status: order_by
    confirm_time: order_by
    confirmor: order_by
    contact_person: order_by
    contact_phone: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    front_license_plate: order_by
    id: order_by
    initial_registration_date: order_by
    is_delete: order_by
    is_register_sale_order: order_by
    is_review_automatically: order_by
    marking_time: order_by
    original_number: order_by
    production_status: order_by
    production_time: order_by
    production_times: order_by
    rear_license_plate: order_by
    registration_time: order_by
    remarks: order_by
    side_license_plate: order_by
    svn_number: order_by
    unlawful_violation_number: order_by
    update_at: order_by
    update_by: order_by
    vehicle_id: order_by
    work_number_plate_color: order_by
}

"""
primary key columns input for table: "muck_truck_preview_number"
"""
input muck_truck_preview_number_pk_columns_input {
    """主键"""
    id: bigint!
}

"""
select columns of table "muck_truck_preview_number"
"""
enum muck_truck_preview_number_select_column {
    """column name"""
    confirm_status

    """column name"""
    confirm_time

    """column name"""
    confirmor

    """column name"""
    contact_person

    """column name"""
    contact_phone

    """column name"""
    create_by

    """column name"""
    delete_at

    """column name"""
    delete_by

    """column name"""
    front_license_plate

    """column name"""
    id

    """column name"""
    initial_registration_date

    """column name"""
    is_delete

    """column name"""
    is_register_sale_order

    """column name"""
    is_review_automatically

    """column name"""
    marking_time

    """column name"""
    original_number

    """column name"""
    production_status

    """column name"""
    production_time

    """column name"""
    production_times

    """column name"""
    rear_license_plate

    """column name"""
    registration_time

    """column name"""
    remarks

    """column name"""
    side_license_plate

    """column name"""
    svn_number

    """column name"""
    unlawful_violation_number

    """column name"""
    update_at

    """column name"""
    update_by

    """column name"""
    vehicle_id

    """column name"""
    work_number_plate_color
}

"""
input type for updating data in table "muck_truck_preview_number"
"""
input muck_truck_preview_number_set_input {
    confirm_status: Int
    confirm_time: timestamptz
    confirmor: String
    contact_person: String
    contact_phone: String
    create_by: String
    delete_at: timestamptz
    delete_by: String
    front_license_plate: String
    id: bigint
    initial_registration_date: timestamptz
    is_delete: Boolean
    is_register_sale_order: Boolean
    is_review_automatically: Boolean
    marking_time: timestamptz
    original_number: String
    production_status: Int
    production_time: timestamptz
    production_times: Int
    rear_license_plate: String
    registration_time: timestamptz
    remarks: String
    side_license_plate: String
    svn_number: String
    unlawful_violation_number: Int
    update_at: timestamptz
    update_by: String
    vehicle_id: String
    work_number_plate_color: String
}

"""aggregate stddev on columns"""
type muck_truck_preview_number_stddev_fields {
    confirm_status: Float
    id: Float
    production_status: Float
    production_times: Float
    unlawful_violation_number: Float
}

"""
order by stddev() on columns of table "muck_truck_preview_number"
"""
input muck_truck_preview_number_stddev_order_by {
    confirm_status: order_by
    id: order_by
    production_status: order_by
    production_times: order_by
    unlawful_violation_number: order_by
}

"""aggregate stddev_pop on columns"""
type muck_truck_preview_number_stddev_pop_fields {
    confirm_status: Float
    id: Float
    production_status: Float
    production_times: Float
    unlawful_violation_number: Float
}

"""
order by stddev_pop() on columns of table "muck_truck_preview_number"
"""
input muck_truck_preview_number_stddev_pop_order_by {
    confirm_status: order_by
    id: order_by
    production_status: order_by
    production_times: order_by
    unlawful_violation_number: order_by
}

"""aggregate stddev_samp on columns"""
type muck_truck_preview_number_stddev_samp_fields {
    confirm_status: Float
    id: Float
    production_status: Float
    production_times: Float
    unlawful_violation_number: Float
}

"""
order by stddev_samp() on columns of table "muck_truck_preview_number"
"""
input muck_truck_preview_number_stddev_samp_order_by {
    confirm_status: order_by
    id: order_by
    production_status: order_by
    production_times: order_by
    unlawful_violation_number: order_by
}

"""aggregate sum on columns"""
type muck_truck_preview_number_sum_fields {
    confirm_status: Int
    id: bigint
    production_status: Int
    production_times: Int
    unlawful_violation_number: Int
}

"""
order by sum() on columns of table "muck_truck_preview_number"
"""
input muck_truck_preview_number_sum_order_by {
    confirm_status: order_by
    id: order_by
    production_status: order_by
    production_times: order_by
    unlawful_violation_number: order_by
}

"""
update columns of table "muck_truck_preview_number"
"""
enum muck_truck_preview_number_update_column {
    """column name"""
    confirm_status

    """column name"""
    confirm_time

    """column name"""
    confirmor

    """column name"""
    contact_person

    """column name"""
    contact_phone

    """column name"""
    create_by

    """column name"""
    delete_at

    """column name"""
    delete_by

    """column name"""
    front_license_plate

    """column name"""
    id

    """column name"""
    initial_registration_date

    """column name"""
    is_delete

    """column name"""
    is_register_sale_order

    """column name"""
    is_review_automatically

    """column name"""
    marking_time

    """column name"""
    original_number

    """column name"""
    production_status

    """column name"""
    production_time

    """column name"""
    production_times

    """column name"""
    rear_license_plate

    """column name"""
    registration_time

    """column name"""
    remarks

    """column name"""
    side_license_plate

    """column name"""
    svn_number

    """column name"""
    unlawful_violation_number

    """column name"""
    update_at

    """column name"""
    update_by

    """column name"""
    vehicle_id

    """column name"""
    work_number_plate_color
}

"""aggregate var_pop on columns"""
type muck_truck_preview_number_var_pop_fields {
    confirm_status: Float
    id: Float
    production_status: Float
    production_times: Float
    unlawful_violation_number: Float
}

"""
order by var_pop() on columns of table "muck_truck_preview_number"
"""
input muck_truck_preview_number_var_pop_order_by {
    confirm_status: order_by
    id: order_by
    production_status: order_by
    production_times: order_by
    unlawful_violation_number: order_by
}

"""aggregate var_samp on columns"""
type muck_truck_preview_number_var_samp_fields {
    confirm_status: Float
    id: Float
    production_status: Float
    production_times: Float
    unlawful_violation_number: Float
}

"""
order by var_samp() on columns of table "muck_truck_preview_number"
"""
input muck_truck_preview_number_var_samp_order_by {
    confirm_status: order_by
    id: order_by
    production_status: order_by
    production_times: order_by
    unlawful_violation_number: order_by
}

"""aggregate variance on columns"""
type muck_truck_preview_number_variance_fields {
    confirm_status: Float
    id: Float
    production_status: Float
    production_times: Float
    unlawful_violation_number: Float
}

"""
order by variance() on columns of table "muck_truck_preview_number"
"""
input muck_truck_preview_number_variance_order_by {
    confirm_status: order_by
    id: order_by
    production_status: order_by
    production_times: order_by
    unlawful_violation_number: order_by
}

extend type Mutation {
    """
    delete data from the table: "muck_truck_preview_number"
  """
    delete_muck_truck_preview_number(
        """filter the rows which have to be deleted"""
        where: muck_truck_preview_number_bool_exp!
    ): muck_truck_preview_number_mutation_response

    """
    delete single row from the table: "muck_truck_preview_number"
  """
    delete_muck_truck_preview_number_by_pk(
        """主键"""
        id: bigint!
    ): muck_truck_preview_number

    """
    insert data into the table: "muck_truck_preview_number"
  """
    insert_muck_truck_preview_number(
        """the rows to be inserted"""
        objects: [muck_truck_preview_number_insert_input!]!

        """on conflict condition"""
        on_conflict: muck_truck_preview_number_on_conflict
    ): muck_truck_preview_number_mutation_response

    """
    insert a single row into the table: "muck_truck_preview_number"
  """
    insert_muck_truck_preview_number_one(
        """the row to be inserted"""
        object: muck_truck_preview_number_insert_input!

        """on conflict condition"""
        on_conflict: muck_truck_preview_number_on_conflict
    ): muck_truck_preview_number

    """
    update data of the table: "muck_truck_preview_number"
  """
    update_muck_truck_preview_number(
        """increments the integer columns with given value of the filtered values"""
        _inc: muck_truck_preview_number_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: muck_truck_preview_number_set_input

        """filter the rows which have to be updated"""
        where: muck_truck_preview_number_bool_exp!
    ): muck_truck_preview_number_mutation_response

    """
    update single row of the table: "muck_truck_preview_number"
  """
    update_muck_truck_preview_number_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: muck_truck_preview_number_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: muck_truck_preview_number_set_input
        pk_columns: muck_truck_preview_number_pk_columns_input!
    ): muck_truck_preview_number
}


extend type Query {
    """
    fetch data from the table: "muck_truck_preview_number"
  """
    muck_truck_preview_number(
        """distinct select on columns"""
        distinct_on: [muck_truck_preview_number_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [muck_truck_preview_number_order_by!]

        """filter the rows returned"""
        where: muck_truck_preview_number_bool_exp
    ): [muck_truck_preview_number!]!

    """
    fetch aggregated fields from the table: "muck_truck_preview_number"
  """
    muck_truck_preview_number_aggregate(
        """distinct select on columns"""
        distinct_on: [muck_truck_preview_number_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [muck_truck_preview_number_order_by!]

        """filter the rows returned"""
        where: muck_truck_preview_number_bool_exp
    ): muck_truck_preview_number_aggregate!

    """
    fetch data from the table: "muck_truck_preview_number" using primary key columns
    """
    muck_truck_preview_number_by_pk(
        """主键"""
        id: bigint!
    ): muck_truck_preview_number
}


extend type Subscription {
    """
    fetch data from the table: "muck_truck_preview_number"
  """
    muck_truck_preview_number(
        """distinct select on columns"""
        distinct_on: [muck_truck_preview_number_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [muck_truck_preview_number_order_by!]

        """filter the rows returned"""
        where: muck_truck_preview_number_bool_exp
    ): [muck_truck_preview_number!]!

    """
    fetch aggregated fields from the table: "muck_truck_preview_number"
  """
    muck_truck_preview_number_aggregate(
        """distinct select on columns"""
        distinct_on: [muck_truck_preview_number_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [muck_truck_preview_number_order_by!]

        """filter the rows returned"""
        where: muck_truck_preview_number_bool_exp
    ): muck_truck_preview_number_aggregate!

    """
    fetch data from the table: "muck_truck_preview_number" using primary key columns
    """
    muck_truck_preview_number_by_pk(
        """主键"""
        id: bigint!
    ): muck_truck_preview_number
}

`, BuiltIn: false},
	{Name: "graph/graphqls/muck_truck_worker_id_card_orders.graphqls", Input: `

"""
渣土车工号牌制作订单表


columns and relationships of "muck_truck_worker_id_card_orders"

"""
type muck_truck_worker_id_card_orders {
    """创建时间"""
    create_at: timestamptz!

    """创建人"""
    create_by: String!

    """删除时间"""
    delete_at: timestamptz

    """删除人"""
    delete_by: String

    """主键"""
    id: bigint!

    """muck_truck_preview_number  渣土车车辆预编号表的id"""
    preview_number_id: bigint!

    """修改时间"""
    update_at: timestamptz

    """修改人"""
    update_by: String

    """vehicle_info 车辆信息表 的vehicle_id"""
    vehicle_id: String!
}

"""
aggregated selection of "muck_truck_worker_id_card_orders"
"""
type muck_truck_worker_id_card_orders_aggregate {
    aggregate: muck_truck_worker_id_card_orders_aggregate_fields
    nodes: [muck_truck_worker_id_card_orders!]!
}

"""
aggregate fields of "muck_truck_worker_id_card_orders"
"""
type muck_truck_worker_id_card_orders_aggregate_fields {
    avg: muck_truck_worker_id_card_orders_avg_fields
    count(columns: [muck_truck_worker_id_card_orders_select_column!], distinct: Boolean): Int
    max: muck_truck_worker_id_card_orders_max_fields
    min: muck_truck_worker_id_card_orders_min_fields
    stddev: muck_truck_worker_id_card_orders_stddev_fields
    stddev_pop: muck_truck_worker_id_card_orders_stddev_pop_fields
    stddev_samp: muck_truck_worker_id_card_orders_stddev_samp_fields
    sum: muck_truck_worker_id_card_orders_sum_fields
    var_pop: muck_truck_worker_id_card_orders_var_pop_fields
    var_samp: muck_truck_worker_id_card_orders_var_samp_fields
    variance: muck_truck_worker_id_card_orders_variance_fields
}

"""
order by aggregate values of table "muck_truck_worker_id_card_orders"
"""
input muck_truck_worker_id_card_orders_aggregate_order_by {
    avg: muck_truck_worker_id_card_orders_avg_order_by
    count: order_by
    max: muck_truck_worker_id_card_orders_max_order_by
    min: muck_truck_worker_id_card_orders_min_order_by
    stddev: muck_truck_worker_id_card_orders_stddev_order_by
    stddev_pop: muck_truck_worker_id_card_orders_stddev_pop_order_by
    stddev_samp: muck_truck_worker_id_card_orders_stddev_samp_order_by
    sum: muck_truck_worker_id_card_orders_sum_order_by
    var_pop: muck_truck_worker_id_card_orders_var_pop_order_by
    var_samp: muck_truck_worker_id_card_orders_var_samp_order_by
    variance: muck_truck_worker_id_card_orders_variance_order_by
}

"""
input type for inserting array relation for remote table "muck_truck_worker_id_card_orders"
"""
input muck_truck_worker_id_card_orders_arr_rel_insert_input {
    data: [muck_truck_worker_id_card_orders_insert_input!]!
    on_conflict: muck_truck_worker_id_card_orders_on_conflict
}

"""aggregate avg on columns"""
type muck_truck_worker_id_card_orders_avg_fields {
    id: Float
    preview_number_id: Float
}

"""
order by avg() on columns of table "muck_truck_worker_id_card_orders"
"""
input muck_truck_worker_id_card_orders_avg_order_by {
    id: order_by
    preview_number_id: order_by
}

"""
Boolean expression to filter rows from the table
"muck_truck_worker_id_card_orders". All fields are combined with a logical 'AND'.
"""
input muck_truck_worker_id_card_orders_bool_exp {
    _and: [muck_truck_worker_id_card_orders_bool_exp]
    _not: muck_truck_worker_id_card_orders_bool_exp
    _or: [muck_truck_worker_id_card_orders_bool_exp]
    create_at: timestamptz_comparison_exp
    create_by: String_comparison_exp
    delete_at: timestamptz_comparison_exp
    delete_by: String_comparison_exp
    id: bigint_comparison_exp
    preview_number_id: bigint_comparison_exp
    update_at: timestamptz_comparison_exp
    update_by: String_comparison_exp
    vehicle_id: String_comparison_exp
}

"""
unique or primary key constraints on table "muck_truck_worker_id_card_orders"
"""
enum muck_truck_worker_id_card_orders_constraint {
    """unique or primary key constraint"""
    muck_truck_worker_id_card_orders_pkey
}

"""
input type for incrementing integer column in table "muck_truck_worker_id_card_orders"
"""
input muck_truck_worker_id_card_orders_inc_input {
    id: bigint
    preview_number_id: bigint
}

"""
input type for inserting data into table "muck_truck_worker_id_card_orders"
"""
input muck_truck_worker_id_card_orders_insert_input {
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    id: bigint
    preview_number_id: bigint
    update_at: timestamptz
    update_by: String
    vehicle_id: String
}

"""aggregate max on columns"""
type muck_truck_worker_id_card_orders_max_fields {
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    id: bigint
    preview_number_id: bigint
    update_at: timestamptz
    update_by: String
    vehicle_id: String
}

"""
order by max() on columns of table "muck_truck_worker_id_card_orders"
"""
input muck_truck_worker_id_card_orders_max_order_by {
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    id: order_by
    preview_number_id: order_by
    update_at: order_by
    update_by: order_by
    vehicle_id: order_by
}

"""aggregate min on columns"""
type muck_truck_worker_id_card_orders_min_fields {
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    id: bigint
    preview_number_id: bigint
    update_at: timestamptz
    update_by: String
    vehicle_id: String
}

"""
order by min() on columns of table "muck_truck_worker_id_card_orders"
"""
input muck_truck_worker_id_card_orders_min_order_by {
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    id: order_by
    preview_number_id: order_by
    update_at: order_by
    update_by: order_by
    vehicle_id: order_by
}

"""
response of any mutation on the table "muck_truck_worker_id_card_orders"
"""
type muck_truck_worker_id_card_orders_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [muck_truck_worker_id_card_orders!]!
}

"""
input type for inserting object relation for remote table "muck_truck_worker_id_card_orders"
"""
input muck_truck_worker_id_card_orders_obj_rel_insert_input {
    data: muck_truck_worker_id_card_orders_insert_input!
    on_conflict: muck_truck_worker_id_card_orders_on_conflict
}

"""
on conflict condition type for table "muck_truck_worker_id_card_orders"
"""
input muck_truck_worker_id_card_orders_on_conflict {
    constraint: muck_truck_worker_id_card_orders_constraint!
    update_columns: [muck_truck_worker_id_card_orders_update_column!]!
    where: muck_truck_worker_id_card_orders_bool_exp
}

"""
ordering options when selecting data from "muck_truck_worker_id_card_orders"
"""
input muck_truck_worker_id_card_orders_order_by {
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    id: order_by
    preview_number_id: order_by
    update_at: order_by
    update_by: order_by
    vehicle_id: order_by
}

"""
primary key columns input for table: "muck_truck_worker_id_card_orders"
"""
input muck_truck_worker_id_card_orders_pk_columns_input {
    """主键"""
    id: bigint!
}

"""
select columns of table "muck_truck_worker_id_card_orders"
"""
enum muck_truck_worker_id_card_orders_select_column {
    """column name"""
    create_at

    """column name"""
    create_by

    """column name"""
    delete_at

    """column name"""
    delete_by

    """column name"""
    id

    """column name"""
    preview_number_id

    """column name"""
    update_at

    """column name"""
    update_by

    """column name"""
    vehicle_id
}

"""
input type for updating data in table "muck_truck_worker_id_card_orders"
"""
input muck_truck_worker_id_card_orders_set_input {
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    id: bigint
    preview_number_id: bigint
    update_at: timestamptz
    update_by: String
    vehicle_id: String
}

"""aggregate stddev on columns"""
type muck_truck_worker_id_card_orders_stddev_fields {
    id: Float
    preview_number_id: Float
}

"""
order by stddev() on columns of table "muck_truck_worker_id_card_orders"
"""
input muck_truck_worker_id_card_orders_stddev_order_by {
    id: order_by
    preview_number_id: order_by
}

"""aggregate stddev_pop on columns"""
type muck_truck_worker_id_card_orders_stddev_pop_fields {
    id: Float
    preview_number_id: Float
}

"""
order by stddev_pop() on columns of table "muck_truck_worker_id_card_orders"
"""
input muck_truck_worker_id_card_orders_stddev_pop_order_by {
    id: order_by
    preview_number_id: order_by
}

"""aggregate stddev_samp on columns"""
type muck_truck_worker_id_card_orders_stddev_samp_fields {
    id: Float
    preview_number_id: Float
}

"""
order by stddev_samp() on columns of table "muck_truck_worker_id_card_orders"
"""
input muck_truck_worker_id_card_orders_stddev_samp_order_by {
    id: order_by
    preview_number_id: order_by
}

"""aggregate sum on columns"""
type muck_truck_worker_id_card_orders_sum_fields {
    id: bigint
    preview_number_id: bigint
}

"""
order by sum() on columns of table "muck_truck_worker_id_card_orders"
"""
input muck_truck_worker_id_card_orders_sum_order_by {
    id: order_by
    preview_number_id: order_by
}

"""
update columns of table "muck_truck_worker_id_card_orders"
"""
enum muck_truck_worker_id_card_orders_update_column {
    """column name"""
    create_at

    """column name"""
    create_by

    """column name"""
    delete_at

    """column name"""
    delete_by

    """column name"""
    id

    """column name"""
    preview_number_id

    """column name"""
    update_at

    """column name"""
    update_by

    """column name"""
    vehicle_id
}

"""aggregate var_pop on columns"""
type muck_truck_worker_id_card_orders_var_pop_fields {
    id: Float
    preview_number_id: Float
}

"""
order by var_pop() on columns of table "muck_truck_worker_id_card_orders"
"""
input muck_truck_worker_id_card_orders_var_pop_order_by {
    id: order_by
    preview_number_id: order_by
}

"""aggregate var_samp on columns"""
type muck_truck_worker_id_card_orders_var_samp_fields {
    id: Float
    preview_number_id: Float
}

"""
order by var_samp() on columns of table "muck_truck_worker_id_card_orders"
"""
input muck_truck_worker_id_card_orders_var_samp_order_by {
    id: order_by
    preview_number_id: order_by
}

"""aggregate variance on columns"""
type muck_truck_worker_id_card_orders_variance_fields {
    id: Float
    preview_number_id: Float
}

"""
order by variance() on columns of table "muck_truck_worker_id_card_orders"
"""
input muck_truck_worker_id_card_orders_variance_order_by {
    id: order_by
    preview_number_id: order_by
}

extend type Mutation {
    """
    delete data from the table: "muck_truck_worker_id_card_orders"
  """
    delete_muck_truck_worker_id_card_orders(
        """filter the rows which have to be deleted"""
        where: muck_truck_worker_id_card_orders_bool_exp!
    ): muck_truck_worker_id_card_orders_mutation_response

    """
    delete single row from the table: "muck_truck_worker_id_card_orders"
  """
    delete_muck_truck_worker_id_card_orders_by_pk(
        """主键"""
        id: bigint!
    ): muck_truck_worker_id_card_orders

    """
    insert data into the table: "muck_truck_worker_id_card_orders"
  """
    insert_muck_truck_worker_id_card_orders(
        """the rows to be inserted"""
        objects: [muck_truck_worker_id_card_orders_insert_input!]!

        """on conflict condition"""
        on_conflict: muck_truck_worker_id_card_orders_on_conflict
    ): muck_truck_worker_id_card_orders_mutation_response

    """
    insert a single row into the table: "muck_truck_worker_id_card_orders"
  """
    insert_muck_truck_worker_id_card_orders_one(
        """the row to be inserted"""
        object: muck_truck_worker_id_card_orders_insert_input!

        """on conflict condition"""
        on_conflict: muck_truck_worker_id_card_orders_on_conflict
    ): muck_truck_worker_id_card_orders

    """
    update data of the table: "muck_truck_worker_id_card_orders"
  """
    update_muck_truck_worker_id_card_orders(
        """increments the integer columns with given value of the filtered values"""
        _inc: muck_truck_worker_id_card_orders_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: muck_truck_worker_id_card_orders_set_input

        """filter the rows which have to be updated"""
        where: muck_truck_worker_id_card_orders_bool_exp!
    ): muck_truck_worker_id_card_orders_mutation_response

    """
    update single row of the table: "muck_truck_worker_id_card_orders"
  """
    update_muck_truck_worker_id_card_orders_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: muck_truck_worker_id_card_orders_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: muck_truck_worker_id_card_orders_set_input
        pk_columns: muck_truck_worker_id_card_orders_pk_columns_input!
    ): muck_truck_worker_id_card_orders
}


extend type Query {
    """
    fetch data from the table: "muck_truck_worker_id_card_orders"
  """
    muck_truck_worker_id_card_orders(
        """distinct select on columns"""
        distinct_on: [muck_truck_worker_id_card_orders_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [muck_truck_worker_id_card_orders_order_by!]

        """filter the rows returned"""
        where: muck_truck_worker_id_card_orders_bool_exp
    ): [muck_truck_worker_id_card_orders!]!

    """
    fetch aggregated fields from the table: "muck_truck_worker_id_card_orders"
  """
    muck_truck_worker_id_card_orders_aggregate(
        """distinct select on columns"""
        distinct_on: [muck_truck_worker_id_card_orders_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [muck_truck_worker_id_card_orders_order_by!]

        """filter the rows returned"""
        where: muck_truck_worker_id_card_orders_bool_exp
    ): muck_truck_worker_id_card_orders_aggregate!

    """
    fetch data from the table: "muck_truck_worker_id_card_orders" using primary key columns
    """
    muck_truck_worker_id_card_orders_by_pk(
        """主键"""
        id: bigint!
    ): muck_truck_worker_id_card_orders
}



extend type Subscription {
    """
    fetch data from the table: "muck_truck_worker_id_card_orders"
  """
    muck_truck_worker_id_card_orders(
        """distinct select on columns"""
        distinct_on: [muck_truck_worker_id_card_orders_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [muck_truck_worker_id_card_orders_order_by!]

        """filter the rows returned"""
        where: muck_truck_worker_id_card_orders_bool_exp
    ): [muck_truck_worker_id_card_orders!]!

    """
    fetch aggregated fields from the table: "muck_truck_worker_id_card_orders"
  """
    muck_truck_worker_id_card_orders_aggregate(
        """distinct select on columns"""
        distinct_on: [muck_truck_worker_id_card_orders_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [muck_truck_worker_id_card_orders_order_by!]

        """filter the rows returned"""
        where: muck_truck_worker_id_card_orders_bool_exp
    ): muck_truck_worker_id_card_orders_aggregate!

    """
    fetch data from the table: "muck_truck_worker_id_card_orders" using primary key columns
    """
    muck_truck_worker_id_card_orders_by_pk(
        """主键"""
        id: bigint!
    ): muck_truck_worker_id_card_orders
}

`, BuiltIn: false},
	{Name: "graph/graphqls/operating_vehicle_info.graphqls", Input: `
"""
营运车信息表


columns and relationships of "operating_vehicle_info"

"""
type operating_vehicle_info {
    """行政区域"""
    administrative_region: String

    """代理商"""
    agent: String

    """合同编号"""
    contact_number: String

    """合同时间"""
    contract_time: timestamptz

    """创建时间"""
    create_at: timestamptz!

    """创建人"""
    create_by: String!

    """删除时间"""
    delete_at: timestamptz

    """删除人"""
    delete_by: String

    """行驶证所有人"""
    driving_license_owner: String

    """第一次上线时间"""
    first_online_time: timestamptz

    """安装时间"""
    installation_time: timestamptz

    """是否北斗部标平台"""
    is_BD: Boolean

    """是否激活"""
    is_active: Boolean

    """是否办理终端安装证明"""
    is_applay_terminal_installation: Boolean

    """是否屏蔽"""
    is_block: Boolean

    """是否工程运输车"""
    is_engineering_vehicle: Boolean

    """是否功能测试通过"""
    is_function_ok: Boolean

    """是否在运证系统"""
    is_in_operating_system: Boolean

    """是否上传货运平台"""
    is_in_upload_platform: Boolean

    """是否需要监管"""
    is_need_supervise: Boolean

    """是否监管"""
    is_supervise: Boolean

    """最后一次绑定终端时间"""
    last_binding_terminal_time: timestamptz

    """车牌照片,云储存系统返回的路径"""
    license_plate_photo: String

    """渣土车类型,工程运输车车辆类型字典"""
    muck_truck_type: Int

    """主键"""
    operating_vehicle_id: bigint!

    """其他照片,云储存系统返回的路径"""
    other_photo: String

    """平台标识字典"""
    platform: Int

    """位置数据库ID"""
    position_db_id: String

    """报废原因"""
    scrap_reason: String

    """报废时间"""
    scrap_time: timestamptz

    """报废时间审核"""
    scrap_time_check: Int

    """编号"""
    serial_number: String

    """服务到期时间"""
    service_expiration_time: timestamptz

    """速度模式状态"""
    speed_mode_status: String

    """速度模式状态获得时间"""
    speed_mode_status_time: timestamptz

    """临时库,用法不明？"""
    temporary_library: Int

    """临时传交通局,用法不明"""
    temporary_transport_bureau: Int

    """修改时间"""
    update_at: timestamptz

    """修改人"""
    update_by: String

    """vehicle_info 车辆信息表 的vehicle_id"""
    vehicle_id: String!
}

"""
aggregated selection of "operating_vehicle_info"
"""
type operating_vehicle_info_aggregate {
    aggregate: operating_vehicle_info_aggregate_fields
    nodes: [operating_vehicle_info!]!
}

"""
aggregate fields of "operating_vehicle_info"
"""
type operating_vehicle_info_aggregate_fields {
    avg: operating_vehicle_info_avg_fields
    count(columns: [operating_vehicle_info_select_column!], distinct: Boolean): Int
    max: operating_vehicle_info_max_fields
    min: operating_vehicle_info_min_fields
    stddev: operating_vehicle_info_stddev_fields
    stddev_pop: operating_vehicle_info_stddev_pop_fields
    stddev_samp: operating_vehicle_info_stddev_samp_fields
    sum: operating_vehicle_info_sum_fields
    var_pop: operating_vehicle_info_var_pop_fields
    var_samp: operating_vehicle_info_var_samp_fields
    variance: operating_vehicle_info_variance_fields
}

"""
order by aggregate values of table "operating_vehicle_info"
"""
input operating_vehicle_info_aggregate_order_by {
    avg: operating_vehicle_info_avg_order_by
    count: order_by
    max: operating_vehicle_info_max_order_by
    min: operating_vehicle_info_min_order_by
    stddev: operating_vehicle_info_stddev_order_by
    stddev_pop: operating_vehicle_info_stddev_pop_order_by
    stddev_samp: operating_vehicle_info_stddev_samp_order_by
    sum: operating_vehicle_info_sum_order_by
    var_pop: operating_vehicle_info_var_pop_order_by
    var_samp: operating_vehicle_info_var_samp_order_by
    variance: operating_vehicle_info_variance_order_by
}

"""
input type for inserting array relation for remote table "operating_vehicle_info"
"""
input operating_vehicle_info_arr_rel_insert_input {
    data: [operating_vehicle_info_insert_input!]!
    on_conflict: operating_vehicle_info_on_conflict
}

"""aggregate avg on columns"""
type operating_vehicle_info_avg_fields {
    muck_truck_type: Float
    operating_vehicle_id: Float
    platform: Float
    scrap_time_check: Float
    temporary_library: Float
    temporary_transport_bureau: Float
}

"""
order by avg() on columns of table "operating_vehicle_info"
"""
input operating_vehicle_info_avg_order_by {
    muck_truck_type: order_by
    operating_vehicle_id: order_by
    platform: order_by
    scrap_time_check: order_by
    temporary_library: order_by
    temporary_transport_bureau: order_by
}

"""
Boolean expression to filter rows from the table "operating_vehicle_info". All fields are combined with a logical 'AND'.
"""
input operating_vehicle_info_bool_exp {
    _and: [operating_vehicle_info_bool_exp]
    _not: operating_vehicle_info_bool_exp
    _or: [operating_vehicle_info_bool_exp]
    administrative_region: String_comparison_exp
    agent: String_comparison_exp
    contact_number: String_comparison_exp
    contract_time: timestamptz_comparison_exp
    create_at: timestamptz_comparison_exp
    create_by: String_comparison_exp
    delete_at: timestamptz_comparison_exp
    delete_by: String_comparison_exp
    driving_license_owner: String_comparison_exp
    first_online_time: timestamptz_comparison_exp
    installation_time: timestamptz_comparison_exp
    is_BD: Boolean_comparison_exp
    is_active: Boolean_comparison_exp
    is_applay_terminal_installation: Boolean_comparison_exp
    is_block: Boolean_comparison_exp
    is_engineering_vehicle: Boolean_comparison_exp
    is_function_ok: Boolean_comparison_exp
    is_in_operating_system: Boolean_comparison_exp
    is_in_upload_platform: Boolean_comparison_exp
    is_need_supervise: Boolean_comparison_exp
    is_supervise: Boolean_comparison_exp
    last_binding_terminal_time: timestamptz_comparison_exp
    license_plate_photo: String_comparison_exp
    muck_truck_type: Int_comparison_exp
    operating_vehicle_id: bigint_comparison_exp
    other_photo: String_comparison_exp
    platform: Int_comparison_exp
    position_db_id: String_comparison_exp
    scrap_reason: String_comparison_exp
    scrap_time: timestamptz_comparison_exp
    scrap_time_check: Int_comparison_exp
    serial_number: String_comparison_exp
    service_expiration_time: timestamptz_comparison_exp
    speed_mode_status: String_comparison_exp
    speed_mode_status_time: timestamptz_comparison_exp
    temporary_library: Int_comparison_exp
    temporary_transport_bureau: Int_comparison_exp
    update_at: timestamptz_comparison_exp
    update_by: String_comparison_exp
    vehicle_id: String_comparison_exp
}

"""
unique or primary key constraints on table "operating_vehicle_info"
"""
enum operating_vehicle_info_constraint {
    """unique or primary key constraint"""
    operating_vehicle_info_pkey
}

"""
input type for incrementing integer column in table "operating_vehicle_info"
"""
input operating_vehicle_info_inc_input {
    muck_truck_type: Int
    operating_vehicle_id: bigint
    platform: Int
    scrap_time_check: Int
    temporary_library: Int
    temporary_transport_bureau: Int
}

"""
input type for inserting data into table "operating_vehicle_info"
"""
input operating_vehicle_info_insert_input {
    administrative_region: String
    agent: String
    contact_number: String
    contract_time: timestamptz
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    driving_license_owner: String
    first_online_time: timestamptz
    installation_time: timestamptz
    is_BD: Boolean
    is_active: Boolean
    is_applay_terminal_installation: Boolean
    is_block: Boolean
    is_engineering_vehicle: Boolean
    is_function_ok: Boolean
    is_in_operating_system: Boolean
    is_in_upload_platform: Boolean
    is_need_supervise: Boolean
    is_supervise: Boolean
    last_binding_terminal_time: timestamptz
    license_plate_photo: String
    muck_truck_type: Int
    operating_vehicle_id: bigint
    other_photo: String
    platform: Int
    position_db_id: String
    scrap_reason: String
    scrap_time: timestamptz
    scrap_time_check: Int
    serial_number: String
    service_expiration_time: timestamptz
    speed_mode_status: String
    speed_mode_status_time: timestamptz
    temporary_library: Int
    temporary_transport_bureau: Int
    update_at: timestamptz
    update_by: String
    vehicle_id: String
}

"""aggregate max on columns"""
type operating_vehicle_info_max_fields {
    administrative_region: String
    agent: String
    contact_number: String
    contract_time: timestamptz
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    driving_license_owner: String
    first_online_time: timestamptz
    installation_time: timestamptz
    last_binding_terminal_time: timestamptz
    license_plate_photo: String
    muck_truck_type: Int
    operating_vehicle_id: bigint
    other_photo: String
    platform: Int
    position_db_id: String
    scrap_reason: String
    scrap_time: timestamptz
    scrap_time_check: Int
    serial_number: String
    service_expiration_time: timestamptz
    speed_mode_status: String
    speed_mode_status_time: timestamptz
    temporary_library: Int
    temporary_transport_bureau: Int
    update_at: timestamptz
    update_by: String
    vehicle_id: String
}

"""
order by max() on columns of table "operating_vehicle_info"
"""
input operating_vehicle_info_max_order_by {
    administrative_region: order_by
    agent: order_by
    contact_number: order_by
    contract_time: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    driving_license_owner: order_by
    first_online_time: order_by
    installation_time: order_by
    last_binding_terminal_time: order_by
    license_plate_photo: order_by
    muck_truck_type: order_by
    operating_vehicle_id: order_by
    other_photo: order_by
    platform: order_by
    position_db_id: order_by
    scrap_reason: order_by
    scrap_time: order_by
    scrap_time_check: order_by
    serial_number: order_by
    service_expiration_time: order_by
    speed_mode_status: order_by
    speed_mode_status_time: order_by
    temporary_library: order_by
    temporary_transport_bureau: order_by
    update_at: order_by
    update_by: order_by
    vehicle_id: order_by
}

"""aggregate min on columns"""
type operating_vehicle_info_min_fields {
    administrative_region: String
    agent: String
    contact_number: String
    contract_time: timestamptz
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    driving_license_owner: String
    first_online_time: timestamptz
    installation_time: timestamptz
    last_binding_terminal_time: timestamptz
    license_plate_photo: String
    muck_truck_type: Int
    operating_vehicle_id: bigint
    other_photo: String
    platform: Int
    position_db_id: String
    scrap_reason: String
    scrap_time: timestamptz
    scrap_time_check: Int
    serial_number: String
    service_expiration_time: timestamptz
    speed_mode_status: String
    speed_mode_status_time: timestamptz
    temporary_library: Int
    temporary_transport_bureau: Int
    update_at: timestamptz
    update_by: String
    vehicle_id: String
}

"""
order by min() on columns of table "operating_vehicle_info"
"""
input operating_vehicle_info_min_order_by {
    administrative_region: order_by
    agent: order_by
    contact_number: order_by
    contract_time: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    driving_license_owner: order_by
    first_online_time: order_by
    installation_time: order_by
    last_binding_terminal_time: order_by
    license_plate_photo: order_by
    muck_truck_type: order_by
    operating_vehicle_id: order_by
    other_photo: order_by
    platform: order_by
    position_db_id: order_by
    scrap_reason: order_by
    scrap_time: order_by
    scrap_time_check: order_by
    serial_number: order_by
    service_expiration_time: order_by
    speed_mode_status: order_by
    speed_mode_status_time: order_by
    temporary_library: order_by
    temporary_transport_bureau: order_by
    update_at: order_by
    update_by: order_by
    vehicle_id: order_by
}

"""
response of any mutation on the table "operating_vehicle_info"
"""
type operating_vehicle_info_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [operating_vehicle_info!]!
}

"""
input type for inserting object relation for remote table "operating_vehicle_info"
"""
input operating_vehicle_info_obj_rel_insert_input {
    data: operating_vehicle_info_insert_input!
    on_conflict: operating_vehicle_info_on_conflict
}

"""
on conflict condition type for table "operating_vehicle_info"
"""
input operating_vehicle_info_on_conflict {
    constraint: operating_vehicle_info_constraint!
    update_columns: [operating_vehicle_info_update_column!]!
    where: operating_vehicle_info_bool_exp
}

"""
ordering options when selecting data from "operating_vehicle_info"
"""
input operating_vehicle_info_order_by {
    administrative_region: order_by
    agent: order_by
    contact_number: order_by
    contract_time: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    driving_license_owner: order_by
    first_online_time: order_by
    installation_time: order_by
    is_BD: order_by
    is_active: order_by
    is_applay_terminal_installation: order_by
    is_block: order_by
    is_engineering_vehicle: order_by
    is_function_ok: order_by
    is_in_operating_system: order_by
    is_in_upload_platform: order_by
    is_need_supervise: order_by
    is_supervise: order_by
    last_binding_terminal_time: order_by
    license_plate_photo: order_by
    muck_truck_type: order_by
    operating_vehicle_id: order_by
    other_photo: order_by
    platform: order_by
    position_db_id: order_by
    scrap_reason: order_by
    scrap_time: order_by
    scrap_time_check: order_by
    serial_number: order_by
    service_expiration_time: order_by
    speed_mode_status: order_by
    speed_mode_status_time: order_by
    temporary_library: order_by
    temporary_transport_bureau: order_by
    update_at: order_by
    update_by: order_by
    vehicle_id: order_by
}

"""
primary key columns input for table: "operating_vehicle_info"
"""
input operating_vehicle_info_pk_columns_input {
    """主键"""
    operating_vehicle_id: bigint!
}

"""
select columns of table "operating_vehicle_info"
"""
enum operating_vehicle_info_select_column {
    """column name"""
    administrative_region

    """column name"""
    agent

    """column name"""
    contact_number

    """column name"""
    contract_time

    """column name"""
    create_at

    """column name"""
    create_by

    """column name"""
    delete_at

    """column name"""
    delete_by

    """column name"""
    driving_license_owner

    """column name"""
    first_online_time

    """column name"""
    installation_time

    """column name"""
    is_BD

    """column name"""
    is_active

    """column name"""
    is_applay_terminal_installation

    """column name"""
    is_block

    """column name"""
    is_engineering_vehicle

    """column name"""
    is_function_ok

    """column name"""
    is_in_operating_system

    """column name"""
    is_in_upload_platform

    """column name"""
    is_need_supervise

    """column name"""
    is_supervise

    """column name"""
    last_binding_terminal_time

    """column name"""
    license_plate_photo

    """column name"""
    muck_truck_type

    """column name"""
    operating_vehicle_id

    """column name"""
    other_photo

    """column name"""
    platform

    """column name"""
    position_db_id

    """column name"""
    scrap_reason

    """column name"""
    scrap_time

    """column name"""
    scrap_time_check

    """column name"""
    serial_number

    """column name"""
    service_expiration_time

    """column name"""
    speed_mode_status

    """column name"""
    speed_mode_status_time

    """column name"""
    temporary_library

    """column name"""
    temporary_transport_bureau

    """column name"""
    update_at

    """column name"""
    update_by

    """column name"""
    vehicle_id
}

"""
input type for updating data in table "operating_vehicle_info"
"""
input operating_vehicle_info_set_input {
    administrative_region: String
    agent: String
    contact_number: String
    contract_time: timestamptz
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    driving_license_owner: String
    first_online_time: timestamptz
    installation_time: timestamptz
    is_BD: Boolean
    is_active: Boolean
    is_applay_terminal_installation: Boolean
    is_block: Boolean
    is_engineering_vehicle: Boolean
    is_function_ok: Boolean
    is_in_operating_system: Boolean
    is_in_upload_platform: Boolean
    is_need_supervise: Boolean
    is_supervise: Boolean
    last_binding_terminal_time: timestamptz
    license_plate_photo: String
    muck_truck_type: Int
    operating_vehicle_id: bigint
    other_photo: String
    platform: Int
    position_db_id: String
    scrap_reason: String
    scrap_time: timestamptz
    scrap_time_check: Int
    serial_number: String
    service_expiration_time: timestamptz
    speed_mode_status: String
    speed_mode_status_time: timestamptz
    temporary_library: Int
    temporary_transport_bureau: Int
    update_at: timestamptz
    update_by: String
    vehicle_id: String
}

"""aggregate stddev on columns"""
type operating_vehicle_info_stddev_fields {
    muck_truck_type: Float
    operating_vehicle_id: Float
    platform: Float
    scrap_time_check: Float
    temporary_library: Float
    temporary_transport_bureau: Float
}

"""
order by stddev() on columns of table "operating_vehicle_info"
"""
input operating_vehicle_info_stddev_order_by {
    muck_truck_type: order_by
    operating_vehicle_id: order_by
    platform: order_by
    scrap_time_check: order_by
    temporary_library: order_by
    temporary_transport_bureau: order_by
}

"""aggregate stddev_pop on columns"""
type operating_vehicle_info_stddev_pop_fields {
    muck_truck_type: Float
    operating_vehicle_id: Float
    platform: Float
    scrap_time_check: Float
    temporary_library: Float
    temporary_transport_bureau: Float
}

"""
order by stddev_pop() on columns of table "operating_vehicle_info"
"""
input operating_vehicle_info_stddev_pop_order_by {
    muck_truck_type: order_by
    operating_vehicle_id: order_by
    platform: order_by
    scrap_time_check: order_by
    temporary_library: order_by
    temporary_transport_bureau: order_by
}

"""aggregate stddev_samp on columns"""
type operating_vehicle_info_stddev_samp_fields {
    muck_truck_type: Float
    operating_vehicle_id: Float
    platform: Float
    scrap_time_check: Float
    temporary_library: Float
    temporary_transport_bureau: Float
}

"""
order by stddev_samp() on columns of table "operating_vehicle_info"
"""
input operating_vehicle_info_stddev_samp_order_by {
    muck_truck_type: order_by
    operating_vehicle_id: order_by
    platform: order_by
    scrap_time_check: order_by
    temporary_library: order_by
    temporary_transport_bureau: order_by
}

"""aggregate sum on columns"""
type operating_vehicle_info_sum_fields {
    muck_truck_type: Int
    operating_vehicle_id: bigint
    platform: Int
    scrap_time_check: Int
    temporary_library: Int
    temporary_transport_bureau: Int
}

"""
order by sum() on columns of table "operating_vehicle_info"
"""
input operating_vehicle_info_sum_order_by {
    muck_truck_type: order_by
    operating_vehicle_id: order_by
    platform: order_by
    scrap_time_check: order_by
    temporary_library: order_by
    temporary_transport_bureau: order_by
}

"""
update columns of table "operating_vehicle_info"
"""
enum operating_vehicle_info_update_column {
    """column name"""
    administrative_region

    """column name"""
    agent

    """column name"""
    contact_number

    """column name"""
    contract_time

    """column name"""
    create_at

    """column name"""
    create_by

    """column name"""
    delete_at

    """column name"""
    delete_by

    """column name"""
    driving_license_owner

    """column name"""
    first_online_time

    """column name"""
    installation_time

    """column name"""
    is_BD

    """column name"""
    is_active

    """column name"""
    is_applay_terminal_installation

    """column name"""
    is_block

    """column name"""
    is_engineering_vehicle

    """column name"""
    is_function_ok

    """column name"""
    is_in_operating_system

    """column name"""
    is_in_upload_platform

    """column name"""
    is_need_supervise

    """column name"""
    is_supervise

    """column name"""
    last_binding_terminal_time

    """column name"""
    license_plate_photo

    """column name"""
    muck_truck_type

    """column name"""
    operating_vehicle_id

    """column name"""
    other_photo

    """column name"""
    platform

    """column name"""
    position_db_id

    """column name"""
    scrap_reason

    """column name"""
    scrap_time

    """column name"""
    scrap_time_check

    """column name"""
    serial_number

    """column name"""
    service_expiration_time

    """column name"""
    speed_mode_status

    """column name"""
    speed_mode_status_time

    """column name"""
    temporary_library

    """column name"""
    temporary_transport_bureau

    """column name"""
    update_at

    """column name"""
    update_by

    """column name"""
    vehicle_id
}

"""aggregate var_pop on columns"""
type operating_vehicle_info_var_pop_fields {
    muck_truck_type: Float
    operating_vehicle_id: Float
    platform: Float
    scrap_time_check: Float
    temporary_library: Float
    temporary_transport_bureau: Float
}

"""
order by var_pop() on columns of table "operating_vehicle_info"
"""
input operating_vehicle_info_var_pop_order_by {
    muck_truck_type: order_by
    operating_vehicle_id: order_by
    platform: order_by
    scrap_time_check: order_by
    temporary_library: order_by
    temporary_transport_bureau: order_by
}

"""aggregate var_samp on columns"""
type operating_vehicle_info_var_samp_fields {
    muck_truck_type: Float
    operating_vehicle_id: Float
    platform: Float
    scrap_time_check: Float
    temporary_library: Float
    temporary_transport_bureau: Float
}

"""
order by var_samp() on columns of table "operating_vehicle_info"
"""
input operating_vehicle_info_var_samp_order_by {
    muck_truck_type: order_by
    operating_vehicle_id: order_by
    platform: order_by
    scrap_time_check: order_by
    temporary_library: order_by
    temporary_transport_bureau: order_by
}

"""aggregate variance on columns"""
type operating_vehicle_info_variance_fields {
    muck_truck_type: Float
    operating_vehicle_id: Float
    platform: Float
    scrap_time_check: Float
    temporary_library: Float
    temporary_transport_bureau: Float
}

"""
order by variance() on columns of table "operating_vehicle_info"
"""
input operating_vehicle_info_variance_order_by {
    muck_truck_type: order_by
    operating_vehicle_id: order_by
    platform: order_by
    scrap_time_check: order_by
    temporary_library: order_by
    temporary_transport_bureau: order_by
}




extend type Query {
    """
    fetch data from the table: "operating_vehicle_info"
  """
    operating_vehicle_info(
        """distinct select on columns"""
        distinct_on: [operating_vehicle_info_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [operating_vehicle_info_order_by!]

        """filter the rows returned"""
        where: operating_vehicle_info_bool_exp
    ): [operating_vehicle_info!]!

    """
    fetch aggregated fields from the table: "operating_vehicle_info"
  """
    operating_vehicle_info_aggregate(
        """distinct select on columns"""
        distinct_on: [operating_vehicle_info_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [operating_vehicle_info_order_by!]

        """filter the rows returned"""
        where: operating_vehicle_info_bool_exp
    ): operating_vehicle_info_aggregate!

    """
    fetch data from the table: "operating_vehicle_info" using primary key columns
    """
    operating_vehicle_info_by_pk(
        """主键"""
        operating_vehicle_id: bigint!
    ): operating_vehicle_info
}


extend type Mutation {
    """
    delete data from the table: "operating_vehicle_info"
  """
    delete_operating_vehicle_info(
        """filter the rows which have to be deleted"""
        where: operating_vehicle_info_bool_exp!
    ): operating_vehicle_info_mutation_response

    """
    delete single row from the table: "operating_vehicle_info"
  """
    delete_operating_vehicle_info_by_pk(
        """主键"""
        operating_vehicle_id: bigint!
    ): operating_vehicle_info

    """
    insert data into the table: "operating_vehicle_info"
  """
    insert_operating_vehicle_info(
        """the rows to be inserted"""
        objects: [operating_vehicle_info_insert_input!]!

        """on conflict condition"""
        on_conflict: operating_vehicle_info_on_conflict
    ): operating_vehicle_info_mutation_response

    """
    insert a single row into the table: "operating_vehicle_info"
  """
    insert_operating_vehicle_info_one(
        """the row to be inserted"""
        object: operating_vehicle_info_insert_input!

        """on conflict condition"""
        on_conflict: operating_vehicle_info_on_conflict
    ): operating_vehicle_info

    """
    update data of the table: "operating_vehicle_info"
  """
    update_operating_vehicle_info(
        """increments the integer columns with given value of the filtered values"""
        _inc: operating_vehicle_info_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: operating_vehicle_info_set_input

        """filter the rows which have to be updated"""
        where: operating_vehicle_info_bool_exp!
    ): operating_vehicle_info_mutation_response

    """
    update single row of the table: "operating_vehicle_info"
  """
    update_operating_vehicle_info_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: operating_vehicle_info_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: operating_vehicle_info_set_input
        pk_columns: operating_vehicle_info_pk_columns_input!
    ): operating_vehicle_info
}


extend type Subscription {
    """
    fetch data from the table: "operating_vehicle_info"
  """
    operating_vehicle_info(
        """distinct select on columns"""
        distinct_on: [operating_vehicle_info_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [operating_vehicle_info_order_by!]

        """filter the rows returned"""
        where: operating_vehicle_info_bool_exp
    ): [operating_vehicle_info!]!

    """
    fetch aggregated fields from the table: "operating_vehicle_info"
  """
    operating_vehicle_info_aggregate(
        """distinct select on columns"""
        distinct_on: [operating_vehicle_info_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [operating_vehicle_info_order_by!]

        """filter the rows returned"""
        where: operating_vehicle_info_bool_exp
    ): operating_vehicle_info_aggregate!

    """
    fetch data from the table: "operating_vehicle_info" using primary key columns
    """
    operating_vehicle_info_by_pk(
        """主键"""
        operating_vehicle_id: bigint!
    ): operating_vehicle_info
}

`, BuiltIn: false},
	{Name: "graph/graphqls/owner_info.graphqls", Input: `

"""
车主信息表


columns and relationships of "owner_info"

"""
type owner_info {
    """联系地址"""
    address: String

    """代理商"""
    agent: String

    """固定电话"""
    cellphone: String

    """创建时间"""
    create_at: timestamptz!

    """创建人"""
    create_by: String!

    """删除时间"""
    delete_at: timestamptz

    """删除人"""
    delete_by: String

    """
    department 部门信息表

    """
    department_id: String

    """邮箱地址"""
    email: String

    """证件过期日期"""
    expiry_date: timestamptz

    """主键"""
    id: bigint!

    """身份证号"""
    id_number: String

    """是否删除"""
    is_delete: Boolean

    """车主姓名"""
    name: String

    """运营商"""
    operator: String

    """
    车主信息外部编码，由golang程序生成的xid，暴露到外部使用
    联合主键
    """
    owner_id: String!

    """备注"""
    remarks: String

    """
    车主性别(性别字典)

    """
    sex: Int

    """手机号码"""
    telephone: String

    """修改时间"""
    update_at: timestamptz

    """修改人"""
    update_by: String
}

"""
aggregated selection of "owner_info"
"""
type owner_info_aggregate {
    aggregate: owner_info_aggregate_fields
    nodes: [owner_info!]!
}

"""
aggregate fields of "owner_info"
"""
type owner_info_aggregate_fields {
    avg: owner_info_avg_fields
    count(columns: [owner_info_select_column!], distinct: Boolean): Int
    max: owner_info_max_fields
    min: owner_info_min_fields
    stddev: owner_info_stddev_fields
    stddev_pop: owner_info_stddev_pop_fields
    stddev_samp: owner_info_stddev_samp_fields
    sum: owner_info_sum_fields
    var_pop: owner_info_var_pop_fields
    var_samp: owner_info_var_samp_fields
    variance: owner_info_variance_fields
}

"""
order by aggregate values of table "owner_info"
"""
input owner_info_aggregate_order_by {
    avg: owner_info_avg_order_by
    count: order_by
    max: owner_info_max_order_by
    min: owner_info_min_order_by
    stddev: owner_info_stddev_order_by
    stddev_pop: owner_info_stddev_pop_order_by
    stddev_samp: owner_info_stddev_samp_order_by
    sum: owner_info_sum_order_by
    var_pop: owner_info_var_pop_order_by
    var_samp: owner_info_var_samp_order_by
    variance: owner_info_variance_order_by
}

"""
input type for inserting array relation for remote table "owner_info"
"""
input owner_info_arr_rel_insert_input {
    data: [owner_info_insert_input!]!
    on_conflict: owner_info_on_conflict
}

"""aggregate avg on columns"""
type owner_info_avg_fields {
    id: Float
    sex: Float
}

"""
order by avg() on columns of table "owner_info"
"""
input owner_info_avg_order_by {
    id: order_by
    sex: order_by
}

"""
Boolean expression to filter rows from the table "owner_info". All fields are combined with a logical 'AND'.
"""
input owner_info_bool_exp {
    _and: [owner_info_bool_exp]
    _not: owner_info_bool_exp
    _or: [owner_info_bool_exp]
    address: String_comparison_exp
    agent: String_comparison_exp
    cellphone: String_comparison_exp
    create_at: timestamptz_comparison_exp
    create_by: String_comparison_exp
    delete_at: timestamptz_comparison_exp
    delete_by: String_comparison_exp
    department_id: String_comparison_exp
    email: String_comparison_exp
    expiry_date: timestamptz_comparison_exp
    id: bigint_comparison_exp
    id_number: String_comparison_exp
    is_delete: Boolean_comparison_exp
    name: String_comparison_exp
    operator: String_comparison_exp
    owner_id: String_comparison_exp
    remarks: String_comparison_exp
    sex: Int_comparison_exp
    telephone: String_comparison_exp
    update_at: timestamptz_comparison_exp
    update_by: String_comparison_exp
}

"""
unique or primary key constraints on table "owner_info"
"""
enum owner_info_constraint {
    """unique or primary key constraint"""
    owner_info_pkey
}

"""
input type for incrementing integer column in table "owner_info"
"""
input owner_info_inc_input {
    id: bigint
    sex: Int
}

"""
input type for inserting data into table "owner_info"
"""
input owner_info_insert_input {
    address: String
    agent: String
    cellphone: String
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    department_id: String
    email: String
    expiry_date: timestamptz
    id: bigint
    id_number: String
    is_delete: Boolean
    name: String
    operator: String
    owner_id: String
    remarks: String
    sex: Int
    telephone: String
    update_at: timestamptz
    update_by: String
}

"""aggregate max on columns"""
type owner_info_max_fields {
    address: String
    agent: String
    cellphone: String
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    department_id: String
    email: String
    expiry_date: timestamptz
    id: bigint
    id_number: String
    name: String
    operator: String
    owner_id: String
    remarks: String
    sex: Int
    telephone: String
    update_at: timestamptz
    update_by: String
}

"""
order by max() on columns of table "owner_info"
"""
input owner_info_max_order_by {
    address: order_by
    agent: order_by
    cellphone: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    department_id: order_by
    email: order_by
    expiry_date: order_by
    id: order_by
    id_number: order_by
    name: order_by
    operator: order_by
    owner_id: order_by
    remarks: order_by
    sex: order_by
    telephone: order_by
    update_at: order_by
    update_by: order_by
}

"""aggregate min on columns"""
type owner_info_min_fields {
    address: String
    agent: String
    cellphone: String
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    department_id: String
    email: String
    expiry_date: timestamptz
    id: bigint
    id_number: String
    name: String
    operator: String
    owner_id: String
    remarks: String
    sex: Int
    telephone: String
    update_at: timestamptz
    update_by: String
}

"""
order by min() on columns of table "owner_info"
"""
input owner_info_min_order_by {
    address: order_by
    agent: order_by
    cellphone: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    department_id: order_by
    email: order_by
    expiry_date: order_by
    id: order_by
    id_number: order_by
    name: order_by
    operator: order_by
    owner_id: order_by
    remarks: order_by
    sex: order_by
    telephone: order_by
    update_at: order_by
    update_by: order_by
}

"""
response of any mutation on the table "owner_info"
"""
type owner_info_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [owner_info!]!
}

"""
input type for inserting object relation for remote table "owner_info"
"""
input owner_info_obj_rel_insert_input {
    data: owner_info_insert_input!
    on_conflict: owner_info_on_conflict
}

"""
on conflict condition type for table "owner_info"
"""
input owner_info_on_conflict {
    constraint: owner_info_constraint!
    update_columns: [owner_info_update_column!]!
    where: owner_info_bool_exp
}

"""
ordering options when selecting data from "owner_info"
"""
input owner_info_order_by {
    address: order_by
    agent: order_by
    cellphone: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    department_id: order_by
    email: order_by
    expiry_date: order_by
    id: order_by
    id_number: order_by
    is_delete: order_by
    name: order_by
    operator: order_by
    owner_id: order_by
    remarks: order_by
    sex: order_by
    telephone: order_by
    update_at: order_by
    update_by: order_by
}

"""
primary key columns input for table: "owner_info"
"""
input owner_info_pk_columns_input {
    """主键"""
    id: bigint!
}

"""
select columns of table "owner_info"
"""
enum owner_info_select_column {
    """column name"""
    address

    """column name"""
    agent

    """column name"""
    cellphone

    """column name"""
    create_at

    """column name"""
    create_by

    """column name"""
    delete_at

    """column name"""
    delete_by

    """column name"""
    department_id

    """column name"""
    email

    """column name"""
    expiry_date

    """column name"""
    id

    """column name"""
    id_number

    """column name"""
    is_delete

    """column name"""
    name

    """column name"""
    operator

    """column name"""
    owner_id

    """column name"""
    remarks

    """column name"""
    sex

    """column name"""
    telephone

    """column name"""
    update_at

    """column name"""
    update_by
}

"""
input type for updating data in table "owner_info"
"""
input owner_info_set_input {
    address: String
    agent: String
    cellphone: String
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    department_id: String
    email: String
    expiry_date: timestamptz
    id: bigint
    id_number: String
    is_delete: Boolean
    name: String
    operator: String
    owner_id: String
    remarks: String
    sex: Int
    telephone: String
    update_at: timestamptz
    update_by: String
}

"""aggregate stddev on columns"""
type owner_info_stddev_fields {
    id: Float
    sex: Float
}

"""
order by stddev() on columns of table "owner_info"
"""
input owner_info_stddev_order_by {
    id: order_by
    sex: order_by
}

"""aggregate stddev_pop on columns"""
type owner_info_stddev_pop_fields {
    id: Float
    sex: Float
}

"""
order by stddev_pop() on columns of table "owner_info"
"""
input owner_info_stddev_pop_order_by {
    id: order_by
    sex: order_by
}

"""aggregate stddev_samp on columns"""
type owner_info_stddev_samp_fields {
    id: Float
    sex: Float
}

"""
order by stddev_samp() on columns of table "owner_info"
"""
input owner_info_stddev_samp_order_by {
    id: order_by
    sex: order_by
}

"""aggregate sum on columns"""
type owner_info_sum_fields {
    id: bigint
    sex: Int
}

"""
order by sum() on columns of table "owner_info"
"""
input owner_info_sum_order_by {
    id: order_by
    sex: order_by
}

"""
update columns of table "owner_info"
"""
enum owner_info_update_column {
    """column name"""
    address

    """column name"""
    agent

    """column name"""
    cellphone

    """column name"""
    create_at

    """column name"""
    create_by

    """column name"""
    delete_at

    """column name"""
    delete_by

    """column name"""
    department_id

    """column name"""
    email

    """column name"""
    expiry_date

    """column name"""
    id

    """column name"""
    id_number

    """column name"""
    is_delete

    """column name"""
    name

    """column name"""
    operator

    """column name"""
    owner_id

    """column name"""
    remarks

    """column name"""
    sex

    """column name"""
    telephone

    """column name"""
    update_at

    """column name"""
    update_by
}

"""aggregate var_pop on columns"""
type owner_info_var_pop_fields {
    id: Float
    sex: Float
}

"""
order by var_pop() on columns of table "owner_info"
"""
input owner_info_var_pop_order_by {
    id: order_by
    sex: order_by
}

"""aggregate var_samp on columns"""
type owner_info_var_samp_fields {
    id: Float
    sex: Float
}

"""
order by var_samp() on columns of table "owner_info"
"""
input owner_info_var_samp_order_by {
    id: order_by
    sex: order_by
}

"""aggregate variance on columns"""
type owner_info_variance_fields {
    id: Float
    sex: Float
}

"""
order by variance() on columns of table "owner_info"
"""
input owner_info_variance_order_by {
    id: order_by
    sex: order_by
}

extend type Query {
    """
    fetch data from the table: "owner_info"
  """
    owner_info(
        """distinct select on columns"""
        distinct_on: [owner_info_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [owner_info_order_by!]

        """filter the rows returned"""
        where: owner_info_bool_exp
    ): [owner_info!]!

    """
    fetch aggregated fields from the table: "owner_info"
  """
    owner_info_aggregate(
        """distinct select on columns"""
        distinct_on: [owner_info_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [owner_info_order_by!]

        """filter the rows returned"""
        where: owner_info_bool_exp
    ): owner_info_aggregate!

    """fetch data from the table: "owner_info" using primary key columns"""
    owner_info_by_pk(
        """主键"""
        id: bigint!
    ): owner_info
}

extend type Mutation {
    """
    delete data from the table: "owner_info"
  """
    delete_owner_info(
        """filter the rows which have to be deleted"""
        where: owner_info_bool_exp!
    ): owner_info_mutation_response

    """
    delete single row from the table: "owner_info"
  """
    delete_owner_info_by_pk(
        """主键"""
        id: bigint!
    ): owner_info

    """
    insert data into the table: "owner_info"
  """
    insert_owner_info(
        """the rows to be inserted"""
        objects: [owner_info_insert_input!]!

        """on conflict condition"""
        on_conflict: owner_info_on_conflict
    ): owner_info_mutation_response

    """
    insert a single row into the table: "owner_info"
  """
    insert_owner_info_one(
        """the row to be inserted"""
        object: owner_info_insert_input!

        """on conflict condition"""
        on_conflict: owner_info_on_conflict
    ): owner_info

    """
    update data of the table: "owner_info"
  """
    update_owner_info(
        """increments the integer columns with given value of the filtered values"""
        _inc: owner_info_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: owner_info_set_input

        """filter the rows which have to be updated"""
        where: owner_info_bool_exp!
    ): owner_info_mutation_response

    """
    update single row of the table: "owner_info"
  """
    update_owner_info_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: owner_info_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: owner_info_set_input
        pk_columns: owner_info_pk_columns_input!
    ): owner_info
}


extend type Subscription {
    """
    fetch data from the table: "owner_info"
  """
    owner_info(
        """distinct select on columns"""
        distinct_on: [owner_info_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [owner_info_order_by!]

        """filter the rows returned"""
        where: owner_info_bool_exp
    ): [owner_info!]!

    """
    fetch aggregated fields from the table: "owner_info"
  """
    owner_info_aggregate(
        """distinct select on columns"""
        distinct_on: [owner_info_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [owner_info_order_by!]

        """filter the rows returned"""
        where: owner_info_bool_exp
    ): owner_info_aggregate!

    """fetch data from the table: "owner_info" using primary key columns"""
    owner_info_by_pk(
        """主键"""
        id: bigint!
    ): owner_info
}
`, BuiltIn: false},
	{Name: "graph/graphqls/schema.graphqls", Input: `
scalar _jsonb
scalar bigint
scalar numeric
scalar timestamp
scalar timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _is_null: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}


"""
expression to compare columns of type _jsonb. All fields are combined with logical 'AND'.
"""
input _jsonb_comparison_exp {
    _eq: _jsonb
    _gt: _jsonb
    _gte: _jsonb
    _in: [_jsonb!]
    _is_null: Boolean
    _lt: _jsonb
    _lte: _jsonb
    _neq: _jsonb
    _nin: [_jsonb!]
}

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
    _eq: bigint
    _gt: bigint
    _gte: bigint
    _in: [bigint!]
    _is_null: Boolean
    _lt: bigint
    _lte: bigint
    _neq: bigint
    _nin: [bigint!]
}


"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
    _eq: Boolean
    _gt: Boolean
    _gte: Boolean
    _in: [Boolean!]
    _is_null: Boolean
    _lt: Boolean
    _lte: Boolean
    _neq: Boolean
    _nin: [Boolean!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}


"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
    _eq: numeric
    _gt: numeric
    _gte: numeric
    _in: [numeric!]
    _is_null: Boolean
    _lt: numeric
    _lte: numeric
    _neq: numeric
    _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
    """in the ascending order, nulls last"""
    asc

    """in the ascending order, nulls first"""
    asc_nulls_first

    """in the ascending order, nulls last"""
    asc_nulls_last

    """in the descending order, nulls first"""
    desc

    """in the descending order, nulls first"""
    desc_nulls_first

    """in the descending order, nulls last"""
    desc_nulls_last
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    _ilike: String
    _in: [String!]
    _is_null: Boolean
    _like: String
    _lt: String
    _lte: String
    _neq: String
    _nilike: String
    _nin: [String!]
    _nlike: String
    _nsimilar: String
    _similar: String
}


"""
expression to compare columns of type timestamp. All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
    _eq: timestamp
    _gt: timestamp
    _gte: timestamp
    _in: [timestamp!]
    _is_null: Boolean
    _lt: timestamp
    _lte: timestamp
    _neq: timestamp
    _nin: [timestamp!]
}`, BuiltIn: false},
	{Name: "graph/graphqls/vehicle_info.graphqls", Input: `
"""mutation root"""
type Mutation {
    """
    delete data from the table: "vehicle_info"
  """
    delete_vehicle_info(
        """filter the rows which have to be deleted"""
        where: vehicle_info_bool_exp!
    ): vehicle_info_mutation_response

    """
    delete single row from the table: "vehicle_info"
  """
    delete_vehicle_info_by_pk(
        """主键"""
        id: bigint!

        """车辆外部编码，由golang程序生成的xid，暴露到外部使用"""
        vehicle_id: String!
    ): vehicle_info

    """
    insert data into the table: "vehicle_info"
  """
    insert_vehicle_info(
        """the rows to be inserted"""
        objects: [vehicle_info_insert_input!]!

        """on conflict condition"""
        on_conflict: vehicle_info_on_conflict
    ): vehicle_info_mutation_response

    """
    insert a single row into the table: "vehicle_info"
  """
    insert_vehicle_info_one(
        """the row to be inserted"""
        object: vehicle_info_insert_input!

        """on conflict condition"""
        on_conflict: vehicle_info_on_conflict
    ): vehicle_info

    """
    update data of the table: "vehicle_info"
  """
    update_vehicle_info(
        """increments the integer columns with given value of the filtered values"""
        _inc: vehicle_info_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: vehicle_info_set_input

        """filter the rows which have to be updated"""
        where: vehicle_info_bool_exp!
    ): vehicle_info_mutation_response

    """
    update single row of the table: "vehicle_info"
  """
    update_vehicle_info_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: vehicle_info_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: vehicle_info_set_input
        pk_columns: vehicle_info_pk_columns_input!
    ): vehicle_info
}


"""query root"""
type Query {
    """
    fetch data from the table: "vehicle_info"
  """
    vehicle_info(
        """distinct select on columns"""
        distinct_on: [vehicle_info_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_info_order_by!]

        """filter the rows returned"""
        where: vehicle_info_bool_exp
    ): [vehicle_info!]!

    """
    fetch aggregated fields from the table: "vehicle_info"
  """
    vehicle_info_aggregate(
        """distinct select on columns"""
        distinct_on: [vehicle_info_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_info_order_by!]

        """filter the rows returned"""
        where: vehicle_info_bool_exp
    ): vehicle_info_aggregate!

    """fetch data from the table: "vehicle_info" using primary key columns"""
    vehicle_info_by_pk(
        """主键"""
        id: bigint!

        """车辆外部编码，由golang程序生成的xid，暴露到外部使用"""
        vehicle_id: String!
    ): vehicle_info
}



"""subscription root"""
type Subscription {
    """
    fetch data from the table: "vehicle_info"
  """
    vehicle_info(
        """distinct select on columns"""
        distinct_on: [vehicle_info_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_info_order_by!]

        """filter the rows returned"""
        where: vehicle_info_bool_exp
    ): [vehicle_info!]!

    """
    fetch aggregated fields from the table: "vehicle_info"
  """
    vehicle_info_aggregate(
        """distinct select on columns"""
        distinct_on: [vehicle_info_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_info_order_by!]

        """filter the rows returned"""
        where: vehicle_info_bool_exp
    ): vehicle_info_aggregate!

    """fetch data from the table: "vehicle_info" using primary key columns"""
    vehicle_info_by_pk(
        """主键"""
        id: bigint!

        """车辆外部编码，由golang程序生成的xid，暴露到外部使用"""
        vehicle_id: String!
    ): vehicle_info
}



"""
车辆信息主表


columns and relationships of "vehicle_info"

"""
type vehicle_info {
    """经营范围字典"""
    business_scope: Int

    """租车标准价格"""
    car_rental_price: numeric

    """校验状态"""
    check_state: Int

    """创建时间"""
    create_at: timestamp!

    """创建人,"""
    create_by: String!

    """删除时间"""
    delete_at: timestamp

    """删除人"""
    delete_by: timestamp

    """所在部门id,department 部门信息表"""
    department_id: String

    """行驶证照片,云储存系统返回的路径"""
    driving_licensee_pic: String

    """所在企业id,enterprise_info表的enterprise_id"""
    enterprise_id: String

    """吨位"""
    heavy: numeric

    """主键"""
    id: bigint!

    """行业类别字典"""
    industry_category: Int

    """检验日期（六合一）"""
    inspection_date: timestamp

    """投保公司"""
    insurance_company: Int

    """投保日期"""
    insurance_date: timestamp

    """是否激活"""
    is_active: Boolean

    """是否申请安装智能终端"""
    is_apply_install_terminal: Boolean

    """是否完成;用于标志车辆资料是否处于确定状态。未确定状态的车辆信息在系统上除车辆管理外的功能中都查不到"""
    is_complete: Boolean

    """是否删除"""
    is_delete: Boolean

    """是否导入"""
    is_import: Boolean

    """是否录入完成"""
    is_input: Boolean

    """是否上传省厅"""
    is_upload_province: Boolean

    """车牌颜色字典"""
    license_plate_color: Int

    """车牌号"""
    license_plate_number: String

    """号牌种类字典"""
    license_plate_type: Int

    """muck_truck _info 渣土车信息表的id"""
    muck_truck_id: bigint!

    """营运线路"""
    operating_route: String

    """营运状态字典"""
    operating_state: Int

    """营运类型字典"""
    operating_type: Int

    """operating_vehi cle_ info 营运车信息表的id"""
    operating_vehicle_id: bigint!

    """机动车所有人（六合一）"""
    owner: String

    """准驾车型"""
    quasi_driving_models: Int

    """登记时间"""
    record_at: timestamp

    """登记人,system_user表的user_id"""
    record_by: String

    """车辆信息同步内网反馈信息;车辆信息同步到公安内网后内网的反馈内容，如车牌号填写错误会反馈车辆号牌错误"""
    remark_in: String

    """备注"""
    remarks: String

    """报废日期（六合一）"""
    retirement_date: timestamp

    """
    道路运输证号


    """
    road_transport_license_number: String

    """座位"""
    seats: Int

    """终端ID"""
    terminal_id: String

    """修改时间"""
    update_at: timestamp

    """修改人"""
    update_by: String

    """内网更新时间"""
    update_time_in: timestamp

    """使用性质（六合一）"""
    use_nature: String

    """车辆品牌"""
    vehicle_brand: Int

    """汽车排量"""
    vehicle_displacement: String

    """车辆外部编码，由golang程序生成的xid，暴露到外部使用"""
    vehicle_id: String!

    """车架号(后6位),车辆识别代号vin,如D02133"""
    vehicle_identification_number: String

    """
    维保数据数组，字段包括: 1.maintenance_ date 维保时间<br />2.maintenance_ kilometers 维保公里数
    """
    vehicle_maintenances: _jsonb

    """机动车管理人"""
    vehicle_manager: String

    """机动车管理人身份证"""
    vehicle_manager_id_card: String

    """机动车管理人联系电话"""
    vehicle_manager_phone: String

    """机动车状态"""
    vehicle_state: Int

    """车辆类型字典"""
    vehicle_type: Int
}

"""
aggregated selection of "vehicle_info"
"""
type vehicle_info_aggregate {
    aggregate: vehicle_info_aggregate_fields
    nodes: [vehicle_info!]!
}

"""
aggregate fields of "vehicle_info"
"""
type vehicle_info_aggregate_fields {
    avg: vehicle_info_avg_fields
    count(columns: [vehicle_info_select_column!], distinct: Boolean): Int
    max: vehicle_info_max_fields
    min: vehicle_info_min_fields
    stddev: vehicle_info_stddev_fields
    stddev_pop: vehicle_info_stddev_pop_fields
    stddev_samp: vehicle_info_stddev_samp_fields
    sum: vehicle_info_sum_fields
    var_pop: vehicle_info_var_pop_fields
    var_samp: vehicle_info_var_samp_fields
    variance: vehicle_info_variance_fields
}

"""
order by aggregate values of table "vehicle_info"
"""
input vehicle_info_aggregate_order_by {
    avg: vehicle_info_avg_order_by
    count: order_by
    max: vehicle_info_max_order_by
    min: vehicle_info_min_order_by
    stddev: vehicle_info_stddev_order_by
    stddev_pop: vehicle_info_stddev_pop_order_by
    stddev_samp: vehicle_info_stddev_samp_order_by
    sum: vehicle_info_sum_order_by
    var_pop: vehicle_info_var_pop_order_by
    var_samp: vehicle_info_var_samp_order_by
    variance: vehicle_info_variance_order_by
}

"""
input type for inserting array relation for remote table "vehicle_info"
"""
input vehicle_info_arr_rel_insert_input {
    data: [vehicle_info_insert_input!]!
    on_conflict: vehicle_info_on_conflict
}

"""aggregate avg on columns"""
type vehicle_info_avg_fields {
    business_scope: Float
    car_rental_price: Float
    check_state: Float
    heavy: Float
    id: Float
    industry_category: Float
    insurance_company: Float
    license_plate_color: Float
    license_plate_type: Float
    muck_truck_id: Float
    operating_state: Float
    operating_type: Float
    operating_vehicle_id: Float
    quasi_driving_models: Float
    seats: Float
    vehicle_brand: Float
    vehicle_state: Float
    vehicle_type: Float
}

"""
order by avg() on columns of table "vehicle_info"
"""
input vehicle_info_avg_order_by {
    business_scope: order_by
    car_rental_price: order_by
    check_state: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    insurance_company: order_by
    license_plate_color: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    quasi_driving_models: order_by
    seats: order_by
    vehicle_brand: order_by
    vehicle_state: order_by
    vehicle_type: order_by
}

"""
Boolean expression to filter rows from the table "vehicle_info". All fields are combined with a logical 'AND'.
"""
input vehicle_info_bool_exp {
    _and: [vehicle_info_bool_exp]
    _not: vehicle_info_bool_exp
    _or: [vehicle_info_bool_exp]
    business_scope: Int_comparison_exp
    car_rental_price: numeric_comparison_exp
    check_state: Int_comparison_exp
    create_at: timestamp_comparison_exp
    create_by: String_comparison_exp
    delete_at: timestamp_comparison_exp
    delete_by: timestamp_comparison_exp
    department_id: String_comparison_exp
    driving_licensee_pic: String_comparison_exp
    enterprise_id: String_comparison_exp
    heavy: numeric_comparison_exp
    id: bigint_comparison_exp
    industry_category: Int_comparison_exp
    inspection_date: timestamp_comparison_exp
    insurance_company: Int_comparison_exp
    insurance_date: timestamp_comparison_exp
    is_active: Boolean_comparison_exp
    is_apply_install_terminal: Boolean_comparison_exp
    is_complete: Boolean_comparison_exp
    is_delete: Boolean_comparison_exp
    is_import: Boolean_comparison_exp
    is_input: Boolean_comparison_exp
    is_upload_province: Boolean_comparison_exp
    license_plate_color: Int_comparison_exp
    license_plate_number: String_comparison_exp
    license_plate_type: Int_comparison_exp
    muck_truck_id: bigint_comparison_exp
    operating_route: String_comparison_exp
    operating_state: Int_comparison_exp
    operating_type: Int_comparison_exp
    operating_vehicle_id: bigint_comparison_exp
    owner: String_comparison_exp
    quasi_driving_models: Int_comparison_exp
    record_at: timestamp_comparison_exp
    record_by: String_comparison_exp
    remark_in: String_comparison_exp
    remarks: String_comparison_exp
    retirement_date: timestamp_comparison_exp
    road_transport_license_number: String_comparison_exp
    seats: Int_comparison_exp
    terminal_id: String_comparison_exp
    update_at: timestamp_comparison_exp
    update_by: String_comparison_exp
    update_time_in: timestamp_comparison_exp
    use_nature: String_comparison_exp
    vehicle_brand: Int_comparison_exp
    vehicle_displacement: String_comparison_exp
    vehicle_id: String_comparison_exp
    vehicle_identification_number: String_comparison_exp
    vehicle_maintenances: _jsonb_comparison_exp
    vehicle_manager: String_comparison_exp
    vehicle_manager_id_card: String_comparison_exp
    vehicle_manager_phone: String_comparison_exp
    vehicle_state: Int_comparison_exp
    vehicle_type: Int_comparison_exp
}

"""
unique or primary key constraints on table "vehicle_info"
"""
enum vehicle_info_constraint {
    """unique or primary key constraint"""
    vehicle_info_pkey
}

"""
input type for incrementing integer column in table "vehicle_info"
"""
input vehicle_info_inc_input {
    business_scope: Int
    car_rental_price: numeric
    check_state: Int
    heavy: numeric
    id: bigint
    industry_category: Int
    insurance_company: Int
    license_plate_color: Int
    license_plate_type: Int
    muck_truck_id: bigint
    operating_state: Int
    operating_type: Int
    operating_vehicle_id: bigint
    quasi_driving_models: Int
    seats: Int
    vehicle_brand: Int
    vehicle_state: Int
    vehicle_type: Int
}

"""
input type for inserting data into table "vehicle_info"
"""
input vehicle_info_insert_input {
    business_scope: Int
    car_rental_price: numeric
    check_state: Int
    create_at: timestamp
    create_by: String
    delete_at: timestamp
    delete_by: timestamp
    department_id: String
    driving_licensee_pic: String
    enterprise_id: String
    heavy: numeric
    id: bigint
    industry_category: Int
    inspection_date: timestamp
    insurance_company: Int
    insurance_date: timestamp
    is_active: Boolean
    is_apply_install_terminal: Boolean
    is_complete: Boolean
    is_delete: Boolean
    is_import: Boolean
    is_input: Boolean
    is_upload_province: Boolean
    license_plate_color: Int
    license_plate_number: String
    license_plate_type: Int
    muck_truck_id: bigint
    operating_route: String
    operating_state: Int
    operating_type: Int
    operating_vehicle_id: bigint
    owner: String
    quasi_driving_models: Int
    record_at: timestamp
    record_by: String
    remark_in: String
    remarks: String
    retirement_date: timestamp
    road_transport_license_number: String
    seats: Int
    terminal_id: String
    update_at: timestamp
    update_by: String
    update_time_in: timestamp
    use_nature: String
    vehicle_brand: Int
    vehicle_displacement: String
    vehicle_id: String
    vehicle_identification_number: String
    vehicle_maintenances: _jsonb
    vehicle_manager: String
    vehicle_manager_id_card: String
    vehicle_manager_phone: String
    vehicle_state: Int
    vehicle_type: Int
}

"""aggregate max on columns"""
type vehicle_info_max_fields {
    business_scope: Int
    car_rental_price: numeric
    check_state: Int
    create_at: timestamp
    create_by: String
    delete_at: timestamp
    delete_by: timestamp
    department_id: String
    driving_licensee_pic: String
    enterprise_id: String
    heavy: numeric
    id: bigint
    industry_category: Int
    inspection_date: timestamp
    insurance_company: Int
    insurance_date: timestamp
    license_plate_color: Int
    license_plate_number: String
    license_plate_type: Int
    muck_truck_id: bigint
    operating_route: String
    operating_state: Int
    operating_type: Int
    operating_vehicle_id: bigint
    owner: String
    quasi_driving_models: Int
    record_at: timestamp
    record_by: String
    remark_in: String
    remarks: String
    retirement_date: timestamp
    road_transport_license_number: String
    seats: Int
    terminal_id: String
    update_at: timestamp
    update_by: String
    update_time_in: timestamp
    use_nature: String
    vehicle_brand: Int
    vehicle_displacement: String
    vehicle_id: String
    vehicle_identification_number: String
    vehicle_manager: String
    vehicle_manager_id_card: String
    vehicle_manager_phone: String
    vehicle_state: Int
    vehicle_type: Int
}

"""
order by max() on columns of table "vehicle_info"
"""
input vehicle_info_max_order_by {
    business_scope: order_by
    car_rental_price: order_by
    check_state: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    department_id: order_by
    driving_licensee_pic: order_by
    enterprise_id: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    inspection_date: order_by
    insurance_company: order_by
    insurance_date: order_by
    license_plate_color: order_by
    license_plate_number: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_route: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    owner: order_by
    quasi_driving_models: order_by
    record_at: order_by
    record_by: order_by
    remark_in: order_by
    remarks: order_by
    retirement_date: order_by
    road_transport_license_number: order_by
    seats: order_by
    terminal_id: order_by
    update_at: order_by
    update_by: order_by
    update_time_in: order_by
    use_nature: order_by
    vehicle_brand: order_by
    vehicle_displacement: order_by
    vehicle_id: order_by
    vehicle_identification_number: order_by
    vehicle_manager: order_by
    vehicle_manager_id_card: order_by
    vehicle_manager_phone: order_by
    vehicle_state: order_by
    vehicle_type: order_by
}

"""aggregate min on columns"""
type vehicle_info_min_fields {
    business_scope: Int
    car_rental_price: numeric
    check_state: Int
    create_at: timestamp
    create_by: String
    delete_at: timestamp
    delete_by: timestamp
    department_id: String
    driving_licensee_pic: String
    enterprise_id: String
    heavy: numeric
    id: bigint
    industry_category: Int
    inspection_date: timestamp
    insurance_company: Int
    insurance_date: timestamp
    license_plate_color: Int
    license_plate_number: String
    license_plate_type: Int
    muck_truck_id: bigint
    operating_route: String
    operating_state: Int
    operating_type: Int
    operating_vehicle_id: bigint
    owner: String
    quasi_driving_models: Int
    record_at: timestamp
    record_by: String
    remark_in: String
    remarks: String
    retirement_date: timestamp
    road_transport_license_number: String
    seats: Int
    terminal_id: String
    update_at: timestamp
    update_by: String
    update_time_in: timestamp
    use_nature: String
    vehicle_brand: Int
    vehicle_displacement: String
    vehicle_id: String
    vehicle_identification_number: String
    vehicle_manager: String
    vehicle_manager_id_card: String
    vehicle_manager_phone: String
    vehicle_state: Int
    vehicle_type: Int
}

"""
order by min() on columns of table "vehicle_info"
"""
input vehicle_info_min_order_by {
    business_scope: order_by
    car_rental_price: order_by
    check_state: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    department_id: order_by
    driving_licensee_pic: order_by
    enterprise_id: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    inspection_date: order_by
    insurance_company: order_by
    insurance_date: order_by
    license_plate_color: order_by
    license_plate_number: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_route: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    owner: order_by
    quasi_driving_models: order_by
    record_at: order_by
    record_by: order_by
    remark_in: order_by
    remarks: order_by
    retirement_date: order_by
    road_transport_license_number: order_by
    seats: order_by
    terminal_id: order_by
    update_at: order_by
    update_by: order_by
    update_time_in: order_by
    use_nature: order_by
    vehicle_brand: order_by
    vehicle_displacement: order_by
    vehicle_id: order_by
    vehicle_identification_number: order_by
    vehicle_manager: order_by
    vehicle_manager_id_card: order_by
    vehicle_manager_phone: order_by
    vehicle_state: order_by
    vehicle_type: order_by
}

"""
response of any mutation on the table "vehicle_info"
"""
type vehicle_info_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [vehicle_info!]!
}

"""
input type for inserting object relation for remote table "vehicle_info"
"""
input vehicle_info_obj_rel_insert_input {
    data: vehicle_info_insert_input!
    on_conflict: vehicle_info_on_conflict
}

"""
on conflict condition type for table "vehicle_info"
"""
input vehicle_info_on_conflict {
    constraint: vehicle_info_constraint!
    update_columns: [vehicle_info_update_column!]!
    where: vehicle_info_bool_exp
}

"""
ordering options when selecting data from "vehicle_info"
"""
input vehicle_info_order_by {
    business_scope: order_by
    car_rental_price: order_by
    check_state: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    department_id: order_by
    driving_licensee_pic: order_by
    enterprise_id: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    inspection_date: order_by
    insurance_company: order_by
    insurance_date: order_by
    is_active: order_by
    is_apply_install_terminal: order_by
    is_complete: order_by
    is_delete: order_by
    is_import: order_by
    is_input: order_by
    is_upload_province: order_by
    license_plate_color: order_by
    license_plate_number: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_route: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    owner: order_by
    quasi_driving_models: order_by
    record_at: order_by
    record_by: order_by
    remark_in: order_by
    remarks: order_by
    retirement_date: order_by
    road_transport_license_number: order_by
    seats: order_by
    terminal_id: order_by
    update_at: order_by
    update_by: order_by
    update_time_in: order_by
    use_nature: order_by
    vehicle_brand: order_by
    vehicle_displacement: order_by
    vehicle_id: order_by
    vehicle_identification_number: order_by
    vehicle_maintenances: order_by
    vehicle_manager: order_by
    vehicle_manager_id_card: order_by
    vehicle_manager_phone: order_by
    vehicle_state: order_by
    vehicle_type: order_by
}

"""
primary key columns input for table: "vehicle_info"
"""
input vehicle_info_pk_columns_input {
    """主键"""
    id: bigint!

    """车辆外部编码，由golang程序生成的xid，暴露到外部使用"""
    vehicle_id: String!
}

"""
select columns of table "vehicle_info"
"""
enum vehicle_info_select_column {
    """column name"""
    business_scope

    """column name"""
    car_rental_price

    """column name"""
    check_state

    """column name"""
    create_at

    """column name"""
    create_by

    """column name"""
    delete_at

    """column name"""
    delete_by

    """column name"""
    department_id

    """column name"""
    driving_licensee_pic

    """column name"""
    enterprise_id

    """column name"""
    heavy

    """column name"""
    id

    """column name"""
    industry_category

    """column name"""
    inspection_date

    """column name"""
    insurance_company

    """column name"""
    insurance_date

    """column name"""
    is_active

    """column name"""
    is_apply_install_terminal

    """column name"""
    is_complete

    """column name"""
    is_delete

    """column name"""
    is_import

    """column name"""
    is_input

    """column name"""
    is_upload_province

    """column name"""
    license_plate_color

    """column name"""
    license_plate_number

    """column name"""
    license_plate_type

    """column name"""
    muck_truck_id

    """column name"""
    operating_route

    """column name"""
    operating_state

    """column name"""
    operating_type

    """column name"""
    operating_vehicle_id

    """column name"""
    owner

    """column name"""
    quasi_driving_models

    """column name"""
    record_at

    """column name"""
    record_by

    """column name"""
    remark_in

    """column name"""
    remarks

    """column name"""
    retirement_date

    """column name"""
    road_transport_license_number

    """column name"""
    seats

    """column name"""
    terminal_id

    """column name"""
    update_at

    """column name"""
    update_by

    """column name"""
    update_time_in

    """column name"""
    use_nature

    """column name"""
    vehicle_brand

    """column name"""
    vehicle_displacement

    """column name"""
    vehicle_id

    """column name"""
    vehicle_identification_number

    """column name"""
    vehicle_maintenances

    """column name"""
    vehicle_manager

    """column name"""
    vehicle_manager_id_card

    """column name"""
    vehicle_manager_phone

    """column name"""
    vehicle_state

    """column name"""
    vehicle_type
}

"""
input type for updating data in table "vehicle_info"
"""
input vehicle_info_set_input {
    business_scope: Int
    car_rental_price: numeric
    check_state: Int
    create_at: timestamp
    create_by: String
    delete_at: timestamp
    delete_by: timestamp
    department_id: String
    driving_licensee_pic: String
    enterprise_id: String
    heavy: numeric
    id: bigint
    industry_category: Int
    inspection_date: timestamp
    insurance_company: Int
    insurance_date: timestamp
    is_active: Boolean
    is_apply_install_terminal: Boolean
    is_complete: Boolean
    is_delete: Boolean
    is_import: Boolean
    is_input: Boolean
    is_upload_province: Boolean
    license_plate_color: Int
    license_plate_number: String
    license_plate_type: Int
    muck_truck_id: bigint
    operating_route: String
    operating_state: Int
    operating_type: Int
    operating_vehicle_id: bigint
    owner: String
    quasi_driving_models: Int
    record_at: timestamp
    record_by: String
    remark_in: String
    remarks: String
    retirement_date: timestamp
    road_transport_license_number: String
    seats: Int
    terminal_id: String
    update_at: timestamp
    update_by: String
    update_time_in: timestamp
    use_nature: String
    vehicle_brand: Int
    vehicle_displacement: String
    vehicle_id: String
    vehicle_identification_number: String
    vehicle_maintenances: _jsonb
    vehicle_manager: String
    vehicle_manager_id_card: String
    vehicle_manager_phone: String
    vehicle_state: Int
    vehicle_type: Int
}

"""aggregate stddev on columns"""
type vehicle_info_stddev_fields {
    business_scope: Float
    car_rental_price: Float
    check_state: Float
    heavy: Float
    id: Float
    industry_category: Float
    insurance_company: Float
    license_plate_color: Float
    license_plate_type: Float
    muck_truck_id: Float
    operating_state: Float
    operating_type: Float
    operating_vehicle_id: Float
    quasi_driving_models: Float
    seats: Float
    vehicle_brand: Float
    vehicle_state: Float
    vehicle_type: Float
}

"""
order by stddev() on columns of table "vehicle_info"
"""
input vehicle_info_stddev_order_by {
    business_scope: order_by
    car_rental_price: order_by
    check_state: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    insurance_company: order_by
    license_plate_color: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    quasi_driving_models: order_by
    seats: order_by
    vehicle_brand: order_by
    vehicle_state: order_by
    vehicle_type: order_by
}

"""aggregate stddev_pop on columns"""
type vehicle_info_stddev_pop_fields {
    business_scope: Float
    car_rental_price: Float
    check_state: Float
    heavy: Float
    id: Float
    industry_category: Float
    insurance_company: Float
    license_plate_color: Float
    license_plate_type: Float
    muck_truck_id: Float
    operating_state: Float
    operating_type: Float
    operating_vehicle_id: Float
    quasi_driving_models: Float
    seats: Float
    vehicle_brand: Float
    vehicle_state: Float
    vehicle_type: Float
}

"""
order by stddev_pop() on columns of table "vehicle_info"
"""
input vehicle_info_stddev_pop_order_by {
    business_scope: order_by
    car_rental_price: order_by
    check_state: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    insurance_company: order_by
    license_plate_color: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    quasi_driving_models: order_by
    seats: order_by
    vehicle_brand: order_by
    vehicle_state: order_by
    vehicle_type: order_by
}

"""aggregate stddev_samp on columns"""
type vehicle_info_stddev_samp_fields {
    business_scope: Float
    car_rental_price: Float
    check_state: Float
    heavy: Float
    id: Float
    industry_category: Float
    insurance_company: Float
    license_plate_color: Float
    license_plate_type: Float
    muck_truck_id: Float
    operating_state: Float
    operating_type: Float
    operating_vehicle_id: Float
    quasi_driving_models: Float
    seats: Float
    vehicle_brand: Float
    vehicle_state: Float
    vehicle_type: Float
}

"""
order by stddev_samp() on columns of table "vehicle_info"
"""
input vehicle_info_stddev_samp_order_by {
    business_scope: order_by
    car_rental_price: order_by
    check_state: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    insurance_company: order_by
    license_plate_color: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    quasi_driving_models: order_by
    seats: order_by
    vehicle_brand: order_by
    vehicle_state: order_by
    vehicle_type: order_by
}

"""aggregate sum on columns"""
type vehicle_info_sum_fields {
    business_scope: Int
    car_rental_price: numeric
    check_state: Int
    heavy: numeric
    id: bigint
    industry_category: Int
    insurance_company: Int
    license_plate_color: Int
    license_plate_type: Int
    muck_truck_id: bigint
    operating_state: Int
    operating_type: Int
    operating_vehicle_id: bigint
    quasi_driving_models: Int
    seats: Int
    vehicle_brand: Int
    vehicle_state: Int
    vehicle_type: Int
}

"""
order by sum() on columns of table "vehicle_info"
"""
input vehicle_info_sum_order_by {
    business_scope: order_by
    car_rental_price: order_by
    check_state: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    insurance_company: order_by
    license_plate_color: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    quasi_driving_models: order_by
    seats: order_by
    vehicle_brand: order_by
    vehicle_state: order_by
    vehicle_type: order_by
}

"""
update columns of table "vehicle_info"
"""
enum vehicle_info_update_column {
    """column name"""
    business_scope

    """column name"""
    car_rental_price

    """column name"""
    check_state

    """column name"""
    create_at

    """column name"""
    create_by

    """column name"""
    delete_at

    """column name"""
    delete_by

    """column name"""
    department_id

    """column name"""
    driving_licensee_pic

    """column name"""
    enterprise_id

    """column name"""
    heavy

    """column name"""
    id

    """column name"""
    industry_category

    """column name"""
    inspection_date

    """column name"""
    insurance_company

    """column name"""
    insurance_date

    """column name"""
    is_active

    """column name"""
    is_apply_install_terminal

    """column name"""
    is_complete

    """column name"""
    is_delete

    """column name"""
    is_import

    """column name"""
    is_input

    """column name"""
    is_upload_province

    """column name"""
    license_plate_color

    """column name"""
    license_plate_number

    """column name"""
    license_plate_type

    """column name"""
    muck_truck_id

    """column name"""
    operating_route

    """column name"""
    operating_state

    """column name"""
    operating_type

    """column name"""
    operating_vehicle_id

    """column name"""
    owner

    """column name"""
    quasi_driving_models

    """column name"""
    record_at

    """column name"""
    record_by

    """column name"""
    remark_in

    """column name"""
    remarks

    """column name"""
    retirement_date

    """column name"""
    road_transport_license_number

    """column name"""
    seats

    """column name"""
    terminal_id

    """column name"""
    update_at

    """column name"""
    update_by

    """column name"""
    update_time_in

    """column name"""
    use_nature

    """column name"""
    vehicle_brand

    """column name"""
    vehicle_displacement

    """column name"""
    vehicle_id

    """column name"""
    vehicle_identification_number

    """column name"""
    vehicle_maintenances

    """column name"""
    vehicle_manager

    """column name"""
    vehicle_manager_id_card

    """column name"""
    vehicle_manager_phone

    """column name"""
    vehicle_state

    """column name"""
    vehicle_type
}

"""aggregate var_pop on columns"""
type vehicle_info_var_pop_fields {
    business_scope: Float
    car_rental_price: Float
    check_state: Float
    heavy: Float
    id: Float
    industry_category: Float
    insurance_company: Float
    license_plate_color: Float
    license_plate_type: Float
    muck_truck_id: Float
    operating_state: Float
    operating_type: Float
    operating_vehicle_id: Float
    quasi_driving_models: Float
    seats: Float
    vehicle_brand: Float
    vehicle_state: Float
    vehicle_type: Float
}

"""
order by var_pop() on columns of table "vehicle_info"
"""
input vehicle_info_var_pop_order_by {
    business_scope: order_by
    car_rental_price: order_by
    check_state: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    insurance_company: order_by
    license_plate_color: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    quasi_driving_models: order_by
    seats: order_by
    vehicle_brand: order_by
    vehicle_state: order_by
    vehicle_type: order_by
}

"""aggregate var_samp on columns"""
type vehicle_info_var_samp_fields {
    business_scope: Float
    car_rental_price: Float
    check_state: Float
    heavy: Float
    id: Float
    industry_category: Float
    insurance_company: Float
    license_plate_color: Float
    license_plate_type: Float
    muck_truck_id: Float
    operating_state: Float
    operating_type: Float
    operating_vehicle_id: Float
    quasi_driving_models: Float
    seats: Float
    vehicle_brand: Float
    vehicle_state: Float
    vehicle_type: Float
}

"""
order by var_samp() on columns of table "vehicle_info"
"""
input vehicle_info_var_samp_order_by {
    business_scope: order_by
    car_rental_price: order_by
    check_state: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    insurance_company: order_by
    license_plate_color: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    quasi_driving_models: order_by
    seats: order_by
    vehicle_brand: order_by
    vehicle_state: order_by
    vehicle_type: order_by
}

"""aggregate variance on columns"""
type vehicle_info_variance_fields {
    business_scope: Float
    car_rental_price: Float
    check_state: Float
    heavy: Float
    id: Float
    industry_category: Float
    insurance_company: Float
    license_plate_color: Float
    license_plate_type: Float
    muck_truck_id: Float
    operating_state: Float
    operating_type: Float
    operating_vehicle_id: Float
    quasi_driving_models: Float
    seats: Float
    vehicle_brand: Float
    vehicle_state: Float
    vehicle_type: Float
}

"""
order by variance() on columns of table "vehicle_info"
"""
input vehicle_info_variance_order_by {
    business_scope: order_by
    car_rental_price: order_by
    check_state: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    insurance_company: order_by
    license_plate_color: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    quasi_driving_models: order_by
    seats: order_by
    vehicle_brand: order_by
    vehicle_state: order_by
    vehicle_type: order_by
}

`, BuiltIn: false},
	{Name: "graph/graphqls/vehicle_info_change_log.graphqls", Input: `

extend type Mutation {
    """
    delete data from the table: "vehicle_info_change_log"
  """
    delete_vehicle_info_change_log(
        """filter the rows which have to be deleted"""
        where: vehicle_info_change_log_bool_exp!
    ): vehicle_info_change_log_mutation_response

    """
    delete single row from the table: "vehicle_info_change_log"
  """
    delete_vehicle_info_change_log_by_pk(
        """主键"""
        id: bigint!

        """车辆信息变更日志外部编码，由golang程序生成的xid，暴露到外部使用"""
        vehicle_info_change_id: String!
    ): vehicle_info_change_log

    """
    insert data into the table: "vehicle_info_change_log"
  """
    insert_vehicle_info_change_log(
        """the rows to be inserted"""
        objects: [vehicle_info_change_log_insert_input!]!

        """on conflict condition"""
        on_conflict: vehicle_info_change_log_on_conflict
    ): vehicle_info_change_log_mutation_response

    """
    insert a single row into the table: "vehicle_info_change_log"
  """
    insert_vehicle_info_change_log_one(
        """the row to be inserted"""
        object: vehicle_info_change_log_insert_input!

        """on conflict condition"""
        on_conflict: vehicle_info_change_log_on_conflict
    ): vehicle_info_change_log

    """
    update data of the table: "vehicle_info_change_log"
  """
    update_vehicle_info_change_log(
        """increments the integer columns with given value of the filtered values"""
        _inc: vehicle_info_change_log_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: vehicle_info_change_log_set_input

        """filter the rows which have to be updated"""
        where: vehicle_info_change_log_bool_exp!
    ): vehicle_info_change_log_mutation_response

    """
    update single row of the table: "vehicle_info_change_log"
  """
    update_vehicle_info_change_log_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: vehicle_info_change_log_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: vehicle_info_change_log_set_input
        pk_columns: vehicle_info_change_log_pk_columns_input!
    ): vehicle_info_change_log
}


extend type Query {
    """
    fetch data from the table: "vehicle_info_change_log"
  """
    vehicle_info_change_log(
        """distinct select on columns"""
        distinct_on: [vehicle_info_change_log_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_info_change_log_order_by!]

        """filter the rows returned"""
        where: vehicle_info_change_log_bool_exp
    ): [vehicle_info_change_log!]!

    """
    fetch aggregated fields from the table: "vehicle_info_change_log"
  """
    vehicle_info_change_log_aggregate(
        """distinct select on columns"""
        distinct_on: [vehicle_info_change_log_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_info_change_log_order_by!]

        """filter the rows returned"""
        where: vehicle_info_change_log_bool_exp
    ): vehicle_info_change_log_aggregate!

    """
    fetch data from the table: "vehicle_info_change_log" using primary key columns
    """
    vehicle_info_change_log_by_pk(
        """主键"""
        id: bigint!

        """车辆信息变更日志外部编码，由golang程序生成的xid，暴露到外部使用"""
        vehicle_info_change_id: String!
    ): vehicle_info_change_log
}



extend type Subscription {
    """
    fetch data from the table: "vehicle_info_change_log"
  """
    vehicle_info_change_log(
        """distinct select on columns"""
        distinct_on: [vehicle_info_change_log_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_info_change_log_order_by!]

        """filter the rows returned"""
        where: vehicle_info_change_log_bool_exp
    ): [vehicle_info_change_log!]!

    """
    fetch aggregated fields from the table: "vehicle_info_change_log"
  """
    vehicle_info_change_log_aggregate(
        """distinct select on columns"""
        distinct_on: [vehicle_info_change_log_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_info_change_log_order_by!]

        """filter the rows returned"""
        where: vehicle_info_change_log_bool_exp
    ): vehicle_info_change_log_aggregate!

    """
    fetch data from the table: "vehicle_info_change_log" using primary key columns
    """
    vehicle_info_change_log_by_pk(
        """主键"""
        id: bigint!

        """车辆信息变更日志外部编码，由golang程序生成的xid，暴露到外部使用"""
        vehicle_info_change_id: String!
    ): vehicle_info_change_log
}



"""
车辆信息变更日志表


columns and relationships of "vehicle_info_change_log"

"""
type vehicle_info_change_log {
    """经营范围字典"""
    business_scope: Int

    """租车标准价格"""
    car_rental_price: numeric

    """校验状态"""
    check_state: Int

    """创建时间"""
    create_at: timestamp!

    """创建人,"""
    create_by: String!

    """删除时间"""
    delete_at: timestamp

    """删除人"""
    delete_by: timestamp

    """所在部门id,department 部门信息表"""
    department_id: String

    """行驶证照片,云储存系统返回的路径"""
    driving_licensee_pic: String

    """所在企业id,enterprise_info表的enterprise_id"""
    enterprise_id: String

    """吨位"""
    heavy: numeric

    """主键"""
    id: bigint!

    """行业类别字典"""
    industry_category: Int

    """检验日期（六合一）"""
    inspection_date: timestamp

    """投保公司"""
    insurance_company: Int

    """投保日期"""
    insurance_date: timestamp

    """是否激活"""
    is_active: Boolean

    """是否申请安装智能终端"""
    is_apply_install_terminal: Boolean

    """是否完成;用于标志车辆资料是否处于确定状态。未确定状态的车辆信息在系统上除车辆管理外的功能中都查不到"""
    is_complete: Boolean

    """是否删除"""
    is_delete: Boolean

    """是否导入"""
    is_import: Boolean

    """是否录入完成"""
    is_input: Boolean

    """是否上传省厅"""
    is_upload_province: Boolean

    """车牌颜色字典"""
    license_plate_color: Int

    """车牌号"""
    license_plate_number: String

    """号牌种类字典"""
    license_plate_type: Int

    """muck_truck _info 渣土车信息表的id"""
    muck_truck_id: bigint!

    """营运线路"""
    operating_route: String

    """营运状态字典"""
    operating_state: Int

    """营运类型字典"""
    operating_type: Int

    """operating_vehi cle_ info 营运车信息表的id"""
    operating_vehicle_id: bigint!

    """机动车所有人（六合一）"""
    owner: String

    """准驾车型"""
    quasi_driving_models: Int

    """登记时间"""
    record_at: timestamp

    """登记人,system_user表的user_id"""
    record_by: String

    """车辆信息同步内网反馈信息;车辆信息同步到公安内网后内网的反馈内容，如车牌号填写错误会反馈车辆号牌错误"""
    remark_in: String

    """备注"""
    remarks: String

    """报废日期（六合一）"""
    retirement_date: timestamp

    """
    道路运输证号


    """
    road_transport_license_number: String

    """座位"""
    seats: Int

    """终端ID"""
    terminal_id: String

    """修改时间"""
    update_at: timestamp

    """修改人"""
    update_by: String

    """内网更新时间"""
    update_time_in: timestamp

    """使用性质（六合一）"""
    use_nature: String

    """车辆品牌"""
    vehicle_brand: Int

    """汽车排量"""
    vehicle_displacement: String

    """车架号(后6位),车辆识别代号vin,如D02133"""
    vehicle_identification_number: String

    """车辆信息变更日志外部编码，由golang程序生成的xid，暴露到外部使用"""
    vehicle_info_change_id: String!

    """
    维保数据数组，字段包括: 1.maintenance_ date 维保时间<br />2.maintenance_ kilometers 维保公里数
    """
    vehicle_maintenances: _jsonb

    """机动车管理人"""
    vehicle_manager: String

    """机动车管理人身份证"""
    vehicle_manager_id_card: String

    """机动车管理人联系电话"""
    vehicle_manager_phone: String

    """机动车状态"""
    vehicle_state: Int

    """车辆类型字典"""
    vehicle_type: Int
}

"""
aggregated selection of "vehicle_info_change_log"
"""
type vehicle_info_change_log_aggregate {
    aggregate: vehicle_info_change_log_aggregate_fields
    nodes: [vehicle_info_change_log!]!
}

"""
aggregate fields of "vehicle_info_change_log"
"""
type vehicle_info_change_log_aggregate_fields {
    avg: vehicle_info_change_log_avg_fields
    count(columns: [vehicle_info_change_log_select_column!], distinct: Boolean): Int
    max: vehicle_info_change_log_max_fields
    min: vehicle_info_change_log_min_fields
    stddev: vehicle_info_change_log_stddev_fields
    stddev_pop: vehicle_info_change_log_stddev_pop_fields
    stddev_samp: vehicle_info_change_log_stddev_samp_fields
    sum: vehicle_info_change_log_sum_fields
    var_pop: vehicle_info_change_log_var_pop_fields
    var_samp: vehicle_info_change_log_var_samp_fields
    variance: vehicle_info_change_log_variance_fields
}

"""
order by aggregate values of table "vehicle_info_change_log"
"""
input vehicle_info_change_log_aggregate_order_by {
    avg: vehicle_info_change_log_avg_order_by
    count: order_by
    max: vehicle_info_change_log_max_order_by
    min: vehicle_info_change_log_min_order_by
    stddev: vehicle_info_change_log_stddev_order_by
    stddev_pop: vehicle_info_change_log_stddev_pop_order_by
    stddev_samp: vehicle_info_change_log_stddev_samp_order_by
    sum: vehicle_info_change_log_sum_order_by
    var_pop: vehicle_info_change_log_var_pop_order_by
    var_samp: vehicle_info_change_log_var_samp_order_by
    variance: vehicle_info_change_log_variance_order_by
}

"""
input type for inserting array relation for remote table "vehicle_info_change_log"
"""
input vehicle_info_change_log_arr_rel_insert_input {
    data: [vehicle_info_change_log_insert_input!]!
    on_conflict: vehicle_info_change_log_on_conflict
}

"""aggregate avg on columns"""
type vehicle_info_change_log_avg_fields {
    business_scope: Float
    car_rental_price: Float
    check_state: Float
    heavy: Float
    id: Float
    industry_category: Float
    insurance_company: Float
    license_plate_color: Float
    license_plate_type: Float
    muck_truck_id: Float
    operating_state: Float
    operating_type: Float
    operating_vehicle_id: Float
    quasi_driving_models: Float
    seats: Float
    vehicle_brand: Float
    vehicle_state: Float
    vehicle_type: Float
}

"""
order by avg() on columns of table "vehicle_info_change_log"
"""
input vehicle_info_change_log_avg_order_by {
    business_scope: order_by
    car_rental_price: order_by
    check_state: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    insurance_company: order_by
    license_plate_color: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    quasi_driving_models: order_by
    seats: order_by
    vehicle_brand: order_by
    vehicle_state: order_by
    vehicle_type: order_by
}

"""
Boolean expression to filter rows from the table "vehicle_info_change_log". All fields are combined with a logical 'AND'.
"""
input vehicle_info_change_log_bool_exp {
    _and: [vehicle_info_change_log_bool_exp]
    _not: vehicle_info_change_log_bool_exp
    _or: [vehicle_info_change_log_bool_exp]
    business_scope: Int_comparison_exp
    car_rental_price: numeric_comparison_exp
    check_state: Int_comparison_exp
    create_at: timestamp_comparison_exp
    create_by: String_comparison_exp
    delete_at: timestamp_comparison_exp
    delete_by: timestamp_comparison_exp
    department_id: String_comparison_exp
    driving_licensee_pic: String_comparison_exp
    enterprise_id: String_comparison_exp
    heavy: numeric_comparison_exp
    id: bigint_comparison_exp
    industry_category: Int_comparison_exp
    inspection_date: timestamp_comparison_exp
    insurance_company: Int_comparison_exp
    insurance_date: timestamp_comparison_exp
    is_active: Boolean_comparison_exp
    is_apply_install_terminal: Boolean_comparison_exp
    is_complete: Boolean_comparison_exp
    is_delete: Boolean_comparison_exp
    is_import: Boolean_comparison_exp
    is_input: Boolean_comparison_exp
    is_upload_province: Boolean_comparison_exp
    license_plate_color: Int_comparison_exp
    license_plate_number: String_comparison_exp
    license_plate_type: Int_comparison_exp
    muck_truck_id: bigint_comparison_exp
    operating_route: String_comparison_exp
    operating_state: Int_comparison_exp
    operating_type: Int_comparison_exp
    operating_vehicle_id: bigint_comparison_exp
    owner: String_comparison_exp
    quasi_driving_models: Int_comparison_exp
    record_at: timestamp_comparison_exp
    record_by: String_comparison_exp
    remark_in: String_comparison_exp
    remarks: String_comparison_exp
    retirement_date: timestamp_comparison_exp
    road_transport_license_number: String_comparison_exp
    seats: Int_comparison_exp
    terminal_id: String_comparison_exp
    update_at: timestamp_comparison_exp
    update_by: String_comparison_exp
    update_time_in: timestamp_comparison_exp
    use_nature: String_comparison_exp
    vehicle_brand: Int_comparison_exp
    vehicle_displacement: String_comparison_exp
    vehicle_identification_number: String_comparison_exp
    vehicle_info_change_id: String_comparison_exp
    vehicle_maintenances: _jsonb_comparison_exp
    vehicle_manager: String_comparison_exp
    vehicle_manager_id_card: String_comparison_exp
    vehicle_manager_phone: String_comparison_exp
    vehicle_state: Int_comparison_exp
    vehicle_type: Int_comparison_exp
}

"""
unique or primary key constraints on table "vehicle_info_change_log"
"""
enum vehicle_info_change_log_constraint {
    """unique or primary key constraint"""
    vehicle_info_change_log_pkey
}

"""
input type for incrementing integer column in table "vehicle_info_change_log"
"""
input vehicle_info_change_log_inc_input {
    business_scope: Int
    car_rental_price: numeric
    check_state: Int
    heavy: numeric
    id: bigint
    industry_category: Int
    insurance_company: Int
    license_plate_color: Int
    license_plate_type: Int
    muck_truck_id: bigint
    operating_state: Int
    operating_type: Int
    operating_vehicle_id: bigint
    quasi_driving_models: Int
    seats: Int
    vehicle_brand: Int
    vehicle_state: Int
    vehicle_type: Int
}

"""
input type for inserting data into table "vehicle_info_change_log"
"""
input vehicle_info_change_log_insert_input {
    business_scope: Int
    car_rental_price: numeric
    check_state: Int
    create_at: timestamp
    create_by: String
    delete_at: timestamp
    delete_by: timestamp
    department_id: String
    driving_licensee_pic: String
    enterprise_id: String
    heavy: numeric
    id: bigint
    industry_category: Int
    inspection_date: timestamp
    insurance_company: Int
    insurance_date: timestamp
    is_active: Boolean
    is_apply_install_terminal: Boolean
    is_complete: Boolean
    is_delete: Boolean
    is_import: Boolean
    is_input: Boolean
    is_upload_province: Boolean
    license_plate_color: Int
    license_plate_number: String
    license_plate_type: Int
    muck_truck_id: bigint
    operating_route: String
    operating_state: Int
    operating_type: Int
    operating_vehicle_id: bigint
    owner: String
    quasi_driving_models: Int
    record_at: timestamp
    record_by: String
    remark_in: String
    remarks: String
    retirement_date: timestamp
    road_transport_license_number: String
    seats: Int
    terminal_id: String
    update_at: timestamp
    update_by: String
    update_time_in: timestamp
    use_nature: String
    vehicle_brand: Int
    vehicle_displacement: String
    vehicle_identification_number: String
    vehicle_info_change_id: String
    vehicle_maintenances: _jsonb
    vehicle_manager: String
    vehicle_manager_id_card: String
    vehicle_manager_phone: String
    vehicle_state: Int
    vehicle_type: Int
}

"""aggregate max on columns"""
type vehicle_info_change_log_max_fields {
    business_scope: Int
    car_rental_price: numeric
    check_state: Int
    create_at: timestamp
    create_by: String
    delete_at: timestamp
    delete_by: timestamp
    department_id: String
    driving_licensee_pic: String
    enterprise_id: String
    heavy: numeric
    id: bigint
    industry_category: Int
    inspection_date: timestamp
    insurance_company: Int
    insurance_date: timestamp
    license_plate_color: Int
    license_plate_number: String
    license_plate_type: Int
    muck_truck_id: bigint
    operating_route: String
    operating_state: Int
    operating_type: Int
    operating_vehicle_id: bigint
    owner: String
    quasi_driving_models: Int
    record_at: timestamp
    record_by: String
    remark_in: String
    remarks: String
    retirement_date: timestamp
    road_transport_license_number: String
    seats: Int
    terminal_id: String
    update_at: timestamp
    update_by: String
    update_time_in: timestamp
    use_nature: String
    vehicle_brand: Int
    vehicle_displacement: String
    vehicle_identification_number: String
    vehicle_info_change_id: String
    vehicle_manager: String
    vehicle_manager_id_card: String
    vehicle_manager_phone: String
    vehicle_state: Int
    vehicle_type: Int
}

"""
order by max() on columns of table "vehicle_info_change_log"
"""
input vehicle_info_change_log_max_order_by {
    business_scope: order_by
    car_rental_price: order_by
    check_state: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    department_id: order_by
    driving_licensee_pic: order_by
    enterprise_id: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    inspection_date: order_by
    insurance_company: order_by
    insurance_date: order_by
    license_plate_color: order_by
    license_plate_number: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_route: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    owner: order_by
    quasi_driving_models: order_by
    record_at: order_by
    record_by: order_by
    remark_in: order_by
    remarks: order_by
    retirement_date: order_by
    road_transport_license_number: order_by
    seats: order_by
    terminal_id: order_by
    update_at: order_by
    update_by: order_by
    update_time_in: order_by
    use_nature: order_by
    vehicle_brand: order_by
    vehicle_displacement: order_by
    vehicle_identification_number: order_by
    vehicle_info_change_id: order_by
    vehicle_manager: order_by
    vehicle_manager_id_card: order_by
    vehicle_manager_phone: order_by
    vehicle_state: order_by
    vehicle_type: order_by
}

"""aggregate min on columns"""
type vehicle_info_change_log_min_fields {
    business_scope: Int
    car_rental_price: numeric
    check_state: Int
    create_at: timestamp
    create_by: String
    delete_at: timestamp
    delete_by: timestamp
    department_id: String
    driving_licensee_pic: String
    enterprise_id: String
    heavy: numeric
    id: bigint
    industry_category: Int
    inspection_date: timestamp
    insurance_company: Int
    insurance_date: timestamp
    license_plate_color: Int
    license_plate_number: String
    license_plate_type: Int
    muck_truck_id: bigint
    operating_route: String
    operating_state: Int
    operating_type: Int
    operating_vehicle_id: bigint
    owner: String
    quasi_driving_models: Int
    record_at: timestamp
    record_by: String
    remark_in: String
    remarks: String
    retirement_date: timestamp
    road_transport_license_number: String
    seats: Int
    terminal_id: String
    update_at: timestamp
    update_by: String
    update_time_in: timestamp
    use_nature: String
    vehicle_brand: Int
    vehicle_displacement: String
    vehicle_identification_number: String
    vehicle_info_change_id: String
    vehicle_manager: String
    vehicle_manager_id_card: String
    vehicle_manager_phone: String
    vehicle_state: Int
    vehicle_type: Int
}

"""
order by min() on columns of table "vehicle_info_change_log"
"""
input vehicle_info_change_log_min_order_by {
    business_scope: order_by
    car_rental_price: order_by
    check_state: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    department_id: order_by
    driving_licensee_pic: order_by
    enterprise_id: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    inspection_date: order_by
    insurance_company: order_by
    insurance_date: order_by
    license_plate_color: order_by
    license_plate_number: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_route: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    owner: order_by
    quasi_driving_models: order_by
    record_at: order_by
    record_by: order_by
    remark_in: order_by
    remarks: order_by
    retirement_date: order_by
    road_transport_license_number: order_by
    seats: order_by
    terminal_id: order_by
    update_at: order_by
    update_by: order_by
    update_time_in: order_by
    use_nature: order_by
    vehicle_brand: order_by
    vehicle_displacement: order_by
    vehicle_identification_number: order_by
    vehicle_info_change_id: order_by
    vehicle_manager: order_by
    vehicle_manager_id_card: order_by
    vehicle_manager_phone: order_by
    vehicle_state: order_by
    vehicle_type: order_by
}

"""
response of any mutation on the table "vehicle_info_change_log"
"""
type vehicle_info_change_log_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [vehicle_info_change_log!]!
}

"""
input type for inserting object relation for remote table "vehicle_info_change_log"
"""
input vehicle_info_change_log_obj_rel_insert_input {
    data: vehicle_info_change_log_insert_input!
    on_conflict: vehicle_info_change_log_on_conflict
}

"""
on conflict condition type for table "vehicle_info_change_log"
"""
input vehicle_info_change_log_on_conflict {
    constraint: vehicle_info_change_log_constraint!
    update_columns: [vehicle_info_change_log_update_column!]!
    where: vehicle_info_change_log_bool_exp
}

"""
ordering options when selecting data from "vehicle_info_change_log"
"""
input vehicle_info_change_log_order_by {
    business_scope: order_by
    car_rental_price: order_by
    check_state: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    department_id: order_by
    driving_licensee_pic: order_by
    enterprise_id: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    inspection_date: order_by
    insurance_company: order_by
    insurance_date: order_by
    is_active: order_by
    is_apply_install_terminal: order_by
    is_complete: order_by
    is_delete: order_by
    is_import: order_by
    is_input: order_by
    is_upload_province: order_by
    license_plate_color: order_by
    license_plate_number: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_route: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    owner: order_by
    quasi_driving_models: order_by
    record_at: order_by
    record_by: order_by
    remark_in: order_by
    remarks: order_by
    retirement_date: order_by
    road_transport_license_number: order_by
    seats: order_by
    terminal_id: order_by
    update_at: order_by
    update_by: order_by
    update_time_in: order_by
    use_nature: order_by
    vehicle_brand: order_by
    vehicle_displacement: order_by
    vehicle_identification_number: order_by
    vehicle_info_change_id: order_by
    vehicle_maintenances: order_by
    vehicle_manager: order_by
    vehicle_manager_id_card: order_by
    vehicle_manager_phone: order_by
    vehicle_state: order_by
    vehicle_type: order_by
}

"""
primary key columns input for table: "vehicle_info_change_log"
"""
input vehicle_info_change_log_pk_columns_input {
    """主键"""
    id: bigint!

    """车辆信息变更日志外部编码，由golang程序生成的xid，暴露到外部使用"""
    vehicle_info_change_id: String!
}

"""
select columns of table "vehicle_info_change_log"
"""
enum vehicle_info_change_log_select_column {
    """column name"""
    business_scope

    """column name"""
    car_rental_price

    """column name"""
    check_state

    """column name"""
    create_at

    """column name"""
    create_by

    """column name"""
    delete_at

    """column name"""
    delete_by

    """column name"""
    department_id

    """column name"""
    driving_licensee_pic

    """column name"""
    enterprise_id

    """column name"""
    heavy

    """column name"""
    id

    """column name"""
    industry_category

    """column name"""
    inspection_date

    """column name"""
    insurance_company

    """column name"""
    insurance_date

    """column name"""
    is_active

    """column name"""
    is_apply_install_terminal

    """column name"""
    is_complete

    """column name"""
    is_delete

    """column name"""
    is_import

    """column name"""
    is_input

    """column name"""
    is_upload_province

    """column name"""
    license_plate_color

    """column name"""
    license_plate_number

    """column name"""
    license_plate_type

    """column name"""
    muck_truck_id

    """column name"""
    operating_route

    """column name"""
    operating_state

    """column name"""
    operating_type

    """column name"""
    operating_vehicle_id

    """column name"""
    owner

    """column name"""
    quasi_driving_models

    """column name"""
    record_at

    """column name"""
    record_by

    """column name"""
    remark_in

    """column name"""
    remarks

    """column name"""
    retirement_date

    """column name"""
    road_transport_license_number

    """column name"""
    seats

    """column name"""
    terminal_id

    """column name"""
    update_at

    """column name"""
    update_by

    """column name"""
    update_time_in

    """column name"""
    use_nature

    """column name"""
    vehicle_brand

    """column name"""
    vehicle_displacement

    """column name"""
    vehicle_identification_number

    """column name"""
    vehicle_info_change_id

    """column name"""
    vehicle_maintenances

    """column name"""
    vehicle_manager

    """column name"""
    vehicle_manager_id_card

    """column name"""
    vehicle_manager_phone

    """column name"""
    vehicle_state

    """column name"""
    vehicle_type
}

"""
input type for updating data in table "vehicle_info_change_log"
"""
input vehicle_info_change_log_set_input {
    business_scope: Int
    car_rental_price: numeric
    check_state: Int
    create_at: timestamp
    create_by: String
    delete_at: timestamp
    delete_by: timestamp
    department_id: String
    driving_licensee_pic: String
    enterprise_id: String
    heavy: numeric
    id: bigint
    industry_category: Int
    inspection_date: timestamp
    insurance_company: Int
    insurance_date: timestamp
    is_active: Boolean
    is_apply_install_terminal: Boolean
    is_complete: Boolean
    is_delete: Boolean
    is_import: Boolean
    is_input: Boolean
    is_upload_province: Boolean
    license_plate_color: Int
    license_plate_number: String
    license_plate_type: Int
    muck_truck_id: bigint
    operating_route: String
    operating_state: Int
    operating_type: Int
    operating_vehicle_id: bigint
    owner: String
    quasi_driving_models: Int
    record_at: timestamp
    record_by: String
    remark_in: String
    remarks: String
    retirement_date: timestamp
    road_transport_license_number: String
    seats: Int
    terminal_id: String
    update_at: timestamp
    update_by: String
    update_time_in: timestamp
    use_nature: String
    vehicle_brand: Int
    vehicle_displacement: String
    vehicle_identification_number: String
    vehicle_info_change_id: String
    vehicle_maintenances: _jsonb
    vehicle_manager: String
    vehicle_manager_id_card: String
    vehicle_manager_phone: String
    vehicle_state: Int
    vehicle_type: Int
}

"""aggregate stddev on columns"""
type vehicle_info_change_log_stddev_fields {
    business_scope: Float
    car_rental_price: Float
    check_state: Float
    heavy: Float
    id: Float
    industry_category: Float
    insurance_company: Float
    license_plate_color: Float
    license_plate_type: Float
    muck_truck_id: Float
    operating_state: Float
    operating_type: Float
    operating_vehicle_id: Float
    quasi_driving_models: Float
    seats: Float
    vehicle_brand: Float
    vehicle_state: Float
    vehicle_type: Float
}

"""
order by stddev() on columns of table "vehicle_info_change_log"
"""
input vehicle_info_change_log_stddev_order_by {
    business_scope: order_by
    car_rental_price: order_by
    check_state: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    insurance_company: order_by
    license_plate_color: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    quasi_driving_models: order_by
    seats: order_by
    vehicle_brand: order_by
    vehicle_state: order_by
    vehicle_type: order_by
}

"""aggregate stddev_pop on columns"""
type vehicle_info_change_log_stddev_pop_fields {
    business_scope: Float
    car_rental_price: Float
    check_state: Float
    heavy: Float
    id: Float
    industry_category: Float
    insurance_company: Float
    license_plate_color: Float
    license_plate_type: Float
    muck_truck_id: Float
    operating_state: Float
    operating_type: Float
    operating_vehicle_id: Float
    quasi_driving_models: Float
    seats: Float
    vehicle_brand: Float
    vehicle_state: Float
    vehicle_type: Float
}

"""
order by stddev_pop() on columns of table "vehicle_info_change_log"
"""
input vehicle_info_change_log_stddev_pop_order_by {
    business_scope: order_by
    car_rental_price: order_by
    check_state: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    insurance_company: order_by
    license_plate_color: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    quasi_driving_models: order_by
    seats: order_by
    vehicle_brand: order_by
    vehicle_state: order_by
    vehicle_type: order_by
}

"""aggregate stddev_samp on columns"""
type vehicle_info_change_log_stddev_samp_fields {
    business_scope: Float
    car_rental_price: Float
    check_state: Float
    heavy: Float
    id: Float
    industry_category: Float
    insurance_company: Float
    license_plate_color: Float
    license_plate_type: Float
    muck_truck_id: Float
    operating_state: Float
    operating_type: Float
    operating_vehicle_id: Float
    quasi_driving_models: Float
    seats: Float
    vehicle_brand: Float
    vehicle_state: Float
    vehicle_type: Float
}

"""
order by stddev_samp() on columns of table "vehicle_info_change_log"
"""
input vehicle_info_change_log_stddev_samp_order_by {
    business_scope: order_by
    car_rental_price: order_by
    check_state: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    insurance_company: order_by
    license_plate_color: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    quasi_driving_models: order_by
    seats: order_by
    vehicle_brand: order_by
    vehicle_state: order_by
    vehicle_type: order_by
}

"""aggregate sum on columns"""
type vehicle_info_change_log_sum_fields {
    business_scope: Int
    car_rental_price: numeric
    check_state: Int
    heavy: numeric
    id: bigint
    industry_category: Int
    insurance_company: Int
    license_plate_color: Int
    license_plate_type: Int
    muck_truck_id: bigint
    operating_state: Int
    operating_type: Int
    operating_vehicle_id: bigint
    quasi_driving_models: Int
    seats: Int
    vehicle_brand: Int
    vehicle_state: Int
    vehicle_type: Int
}

"""
order by sum() on columns of table "vehicle_info_change_log"
"""
input vehicle_info_change_log_sum_order_by {
    business_scope: order_by
    car_rental_price: order_by
    check_state: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    insurance_company: order_by
    license_plate_color: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    quasi_driving_models: order_by
    seats: order_by
    vehicle_brand: order_by
    vehicle_state: order_by
    vehicle_type: order_by
}

"""
update columns of table "vehicle_info_change_log"
"""
enum vehicle_info_change_log_update_column {
    """column name"""
    business_scope

    """column name"""
    car_rental_price

    """column name"""
    check_state

    """column name"""
    create_at

    """column name"""
    create_by

    """column name"""
    delete_at

    """column name"""
    delete_by

    """column name"""
    department_id

    """column name"""
    driving_licensee_pic

    """column name"""
    enterprise_id

    """column name"""
    heavy

    """column name"""
    id

    """column name"""
    industry_category

    """column name"""
    inspection_date

    """column name"""
    insurance_company

    """column name"""
    insurance_date

    """column name"""
    is_active

    """column name"""
    is_apply_install_terminal

    """column name"""
    is_complete

    """column name"""
    is_delete

    """column name"""
    is_import

    """column name"""
    is_input

    """column name"""
    is_upload_province

    """column name"""
    license_plate_color

    """column name"""
    license_plate_number

    """column name"""
    license_plate_type

    """column name"""
    muck_truck_id

    """column name"""
    operating_route

    """column name"""
    operating_state

    """column name"""
    operating_type

    """column name"""
    operating_vehicle_id

    """column name"""
    owner

    """column name"""
    quasi_driving_models

    """column name"""
    record_at

    """column name"""
    record_by

    """column name"""
    remark_in

    """column name"""
    remarks

    """column name"""
    retirement_date

    """column name"""
    road_transport_license_number

    """column name"""
    seats

    """column name"""
    terminal_id

    """column name"""
    update_at

    """column name"""
    update_by

    """column name"""
    update_time_in

    """column name"""
    use_nature

    """column name"""
    vehicle_brand

    """column name"""
    vehicle_displacement

    """column name"""
    vehicle_identification_number

    """column name"""
    vehicle_info_change_id

    """column name"""
    vehicle_maintenances

    """column name"""
    vehicle_manager

    """column name"""
    vehicle_manager_id_card

    """column name"""
    vehicle_manager_phone

    """column name"""
    vehicle_state

    """column name"""
    vehicle_type
}

"""aggregate var_pop on columns"""
type vehicle_info_change_log_var_pop_fields {
    business_scope: Float
    car_rental_price: Float
    check_state: Float
    heavy: Float
    id: Float
    industry_category: Float
    insurance_company: Float
    license_plate_color: Float
    license_plate_type: Float
    muck_truck_id: Float
    operating_state: Float
    operating_type: Float
    operating_vehicle_id: Float
    quasi_driving_models: Float
    seats: Float
    vehicle_brand: Float
    vehicle_state: Float
    vehicle_type: Float
}

"""
order by var_pop() on columns of table "vehicle_info_change_log"
"""
input vehicle_info_change_log_var_pop_order_by {
    business_scope: order_by
    car_rental_price: order_by
    check_state: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    insurance_company: order_by
    license_plate_color: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    quasi_driving_models: order_by
    seats: order_by
    vehicle_brand: order_by
    vehicle_state: order_by
    vehicle_type: order_by
}

"""aggregate var_samp on columns"""
type vehicle_info_change_log_var_samp_fields {
    business_scope: Float
    car_rental_price: Float
    check_state: Float
    heavy: Float
    id: Float
    industry_category: Float
    insurance_company: Float
    license_plate_color: Float
    license_plate_type: Float
    muck_truck_id: Float
    operating_state: Float
    operating_type: Float
    operating_vehicle_id: Float
    quasi_driving_models: Float
    seats: Float
    vehicle_brand: Float
    vehicle_state: Float
    vehicle_type: Float
}

"""
order by var_samp() on columns of table "vehicle_info_change_log"
"""
input vehicle_info_change_log_var_samp_order_by {
    business_scope: order_by
    car_rental_price: order_by
    check_state: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    insurance_company: order_by
    license_plate_color: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    quasi_driving_models: order_by
    seats: order_by
    vehicle_brand: order_by
    vehicle_state: order_by
    vehicle_type: order_by
}

"""aggregate variance on columns"""
type vehicle_info_change_log_variance_fields {
    business_scope: Float
    car_rental_price: Float
    check_state: Float
    heavy: Float
    id: Float
    industry_category: Float
    insurance_company: Float
    license_plate_color: Float
    license_plate_type: Float
    muck_truck_id: Float
    operating_state: Float
    operating_type: Float
    operating_vehicle_id: Float
    quasi_driving_models: Float
    seats: Float
    vehicle_brand: Float
    vehicle_state: Float
    vehicle_type: Float
}

"""
order by variance() on columns of table "vehicle_info_change_log"
"""
input vehicle_info_change_log_variance_order_by {
    business_scope: order_by
    car_rental_price: order_by
    check_state: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    insurance_company: order_by
    license_plate_color: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    quasi_driving_models: order_by
    seats: order_by
    vehicle_brand: order_by
    vehicle_state: order_by
    vehicle_type: order_by
}

`, BuiltIn: false},
	{Name: "graph/graphqls/vehicle_supervision_photo.graphqls", Input: `
extend type Mutation {
    """
    delete data from the table: "vehicle_supervision_photo"
  """
    delete_vehicle_supervision_photo(
        """filter the rows which have to be deleted"""
        where: vehicle_supervision_photo_bool_exp!
    ): vehicle_supervision_photo_mutation_response

    """
    delete single row from the table: "vehicle_supervision_photo"
  """
    delete_vehicle_supervision_photo_by_pk(
        """主键"""
        id: bigint!

        """车辆监控图片外部编码，由golang程序生成的xid，暴露到外部使用"""
        supervision_photo_id: String!
    ): vehicle_supervision_photo

    """
    insert data into the table: "vehicle_supervision_photo"
  """
    insert_vehicle_supervision_photo(
        """the rows to be inserted"""
        objects: [vehicle_supervision_photo_insert_input!]!

        """on conflict condition"""
        on_conflict: vehicle_supervision_photo_on_conflict
    ): vehicle_supervision_photo_mutation_response

    """
    insert a single row into the table: "vehicle_supervision_photo"
  """
    insert_vehicle_supervision_photo_one(
        """the row to be inserted"""
        object: vehicle_supervision_photo_insert_input!

        """on conflict condition"""
        on_conflict: vehicle_supervision_photo_on_conflict
    ): vehicle_supervision_photo

    """
    update data of the table: "vehicle_supervision_photo"
  """
    update_vehicle_supervision_photo(
        """increments the integer columns with given value of the filtered values"""
        _inc: vehicle_supervision_photo_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: vehicle_supervision_photo_set_input

        """filter the rows which have to be updated"""
        where: vehicle_supervision_photo_bool_exp!
    ): vehicle_supervision_photo_mutation_response

    """
    update single row of the table: "vehicle_supervision_photo"
  """
    update_vehicle_supervision_photo_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: vehicle_supervision_photo_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: vehicle_supervision_photo_set_input
        pk_columns: vehicle_supervision_photo_pk_columns_input!
    ): vehicle_supervision_photo
}



extend type Query {
    """
    fetch data from the table: "vehicle_supervision_photo"
  """
    vehicle_supervision_photo(
        """distinct select on columns"""
        distinct_on: [vehicle_supervision_photo_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_supervision_photo_order_by!]

        """filter the rows returned"""
        where: vehicle_supervision_photo_bool_exp
    ): [vehicle_supervision_photo!]!

    """
    fetch aggregated fields from the table: "vehicle_supervision_photo"
  """
    vehicle_supervision_photo_aggregate(
        """distinct select on columns"""
        distinct_on: [vehicle_supervision_photo_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_supervision_photo_order_by!]

        """filter the rows returned"""
        where: vehicle_supervision_photo_bool_exp
    ): vehicle_supervision_photo_aggregate!

    """
    fetch data from the table: "vehicle_supervision_photo" using primary key columns
    """
    vehicle_supervision_photo_by_pk(
        """主键"""
        id: bigint!

        """车辆监控图片外部编码，由golang程序生成的xid，暴露到外部使用"""
        supervision_photo_id: String!
    ): vehicle_supervision_photo
}



extend type Subscription {
    """
    fetch data from the table: "vehicle_supervision_photo"
  """
    vehicle_supervision_photo(
        """distinct select on columns"""
        distinct_on: [vehicle_supervision_photo_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_supervision_photo_order_by!]

        """filter the rows returned"""
        where: vehicle_supervision_photo_bool_exp
    ): [vehicle_supervision_photo!]!

    """
    fetch aggregated fields from the table: "vehicle_supervision_photo"
  """
    vehicle_supervision_photo_aggregate(
        """distinct select on columns"""
        distinct_on: [vehicle_supervision_photo_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_supervision_photo_order_by!]

        """filter the rows returned"""
        where: vehicle_supervision_photo_bool_exp
    ): vehicle_supervision_photo_aggregate!

    """
    fetch data from the table: "vehicle_supervision_photo" using primary key columns
    """
    vehicle_supervision_photo_by_pk(
        """主键"""
        id: bigint!

        """车辆监控图片外部编码，由golang程序生成的xid，暴露到外部使用"""
        supervision_photo_id: String!
    ): vehicle_supervision_photo
}



"""
车辆监控图片表


columns and relationships of "vehicle_supervision_photo"

"""
type vehicle_supervision_photo {
    """终端IMEI"""
    IMEI: String

    """摄像头ID字典"""
    camera_id: Int

    """驾驶员id"""
    driver_id: String

    """所在企业id"""
    enterprise_id: String

    """主键"""
    id: bigint!

    """监控图片地址"""
    monitoring_pic_address: String

    """监控图片名称"""
    monitoring_pic_name: String

    """监控图片上传时间"""
    monitoring_pic_upload_time: timestamptz

    """拍照条件字典"""
    photo_condition: String

    """SIM卡号"""
    sim_number: String

    """车辆监控图片外部编码，由golang程序生成的xid，暴露到外部使用"""
    supervision_photo_id: String!

    """终端上报时间"""
    update_time: timestamptz

    """vehicle_info表vehicle_id"""
    vehicle_id: String!
}

"""
aggregated selection of "vehicle_supervision_photo"
"""
type vehicle_supervision_photo_aggregate {
    aggregate: vehicle_supervision_photo_aggregate_fields
    nodes: [vehicle_supervision_photo!]!
}

"""
aggregate fields of "vehicle_supervision_photo"
"""
type vehicle_supervision_photo_aggregate_fields {
    avg: vehicle_supervision_photo_avg_fields
    count(columns: [vehicle_supervision_photo_select_column!], distinct: Boolean): Int
    max: vehicle_supervision_photo_max_fields
    min: vehicle_supervision_photo_min_fields
    stddev: vehicle_supervision_photo_stddev_fields
    stddev_pop: vehicle_supervision_photo_stddev_pop_fields
    stddev_samp: vehicle_supervision_photo_stddev_samp_fields
    sum: vehicle_supervision_photo_sum_fields
    var_pop: vehicle_supervision_photo_var_pop_fields
    var_samp: vehicle_supervision_photo_var_samp_fields
    variance: vehicle_supervision_photo_variance_fields
}

"""
order by aggregate values of table "vehicle_supervision_photo"
"""
input vehicle_supervision_photo_aggregate_order_by {
    avg: vehicle_supervision_photo_avg_order_by
    count: order_by
    max: vehicle_supervision_photo_max_order_by
    min: vehicle_supervision_photo_min_order_by
    stddev: vehicle_supervision_photo_stddev_order_by
    stddev_pop: vehicle_supervision_photo_stddev_pop_order_by
    stddev_samp: vehicle_supervision_photo_stddev_samp_order_by
    sum: vehicle_supervision_photo_sum_order_by
    var_pop: vehicle_supervision_photo_var_pop_order_by
    var_samp: vehicle_supervision_photo_var_samp_order_by
    variance: vehicle_supervision_photo_variance_order_by
}

"""
input type for inserting array relation for remote table "vehicle_supervision_photo"
"""
input vehicle_supervision_photo_arr_rel_insert_input {
    data: [vehicle_supervision_photo_insert_input!]!
    on_conflict: vehicle_supervision_photo_on_conflict
}

"""aggregate avg on columns"""
type vehicle_supervision_photo_avg_fields {
    camera_id: Float
    id: Float
}

"""
order by avg() on columns of table "vehicle_supervision_photo"
"""
input vehicle_supervision_photo_avg_order_by {
    camera_id: order_by
    id: order_by
}

"""
Boolean expression to filter rows from the table "vehicle_supervision_photo". All fields are combined with a logical 'AND'.
"""
input vehicle_supervision_photo_bool_exp {
    IMEI: String_comparison_exp
    _and: [vehicle_supervision_photo_bool_exp]
    _not: vehicle_supervision_photo_bool_exp
    _or: [vehicle_supervision_photo_bool_exp]
    camera_id: Int_comparison_exp
    driver_id: String_comparison_exp
    enterprise_id: String_comparison_exp
    id: bigint_comparison_exp
    monitoring_pic_address: String_comparison_exp
    monitoring_pic_name: String_comparison_exp
    monitoring_pic_upload_time: timestamptz_comparison_exp
    photo_condition: String_comparison_exp
    sim_number: String_comparison_exp
    supervision_photo_id: String_comparison_exp
    update_time: timestamptz_comparison_exp
    vehicle_id: String_comparison_exp
}

"""
unique or primary key constraints on table "vehicle_supervision_photo"
"""
enum vehicle_supervision_photo_constraint {
    """unique or primary key constraint"""
    vehicle_supervision_photo_pkey
}

"""
input type for incrementing integer column in table "vehicle_supervision_photo"
"""
input vehicle_supervision_photo_inc_input {
    camera_id: Int
    id: bigint
}

"""
input type for inserting data into table "vehicle_supervision_photo"
"""
input vehicle_supervision_photo_insert_input {
    IMEI: String
    camera_id: Int
    driver_id: String
    enterprise_id: String
    id: bigint
    monitoring_pic_address: String
    monitoring_pic_name: String
    monitoring_pic_upload_time: timestamptz
    photo_condition: String
    sim_number: String
    supervision_photo_id: String
    update_time: timestamptz
    vehicle_id: String
}

"""aggregate max on columns"""
type vehicle_supervision_photo_max_fields {
    IMEI: String
    camera_id: Int
    driver_id: String
    enterprise_id: String
    id: bigint
    monitoring_pic_address: String
    monitoring_pic_name: String
    monitoring_pic_upload_time: timestamptz
    photo_condition: String
    sim_number: String
    supervision_photo_id: String
    update_time: timestamptz
    vehicle_id: String
}

"""
order by max() on columns of table "vehicle_supervision_photo"
"""
input vehicle_supervision_photo_max_order_by {
    IMEI: order_by
    camera_id: order_by
    driver_id: order_by
    enterprise_id: order_by
    id: order_by
    monitoring_pic_address: order_by
    monitoring_pic_name: order_by
    monitoring_pic_upload_time: order_by
    photo_condition: order_by
    sim_number: order_by
    supervision_photo_id: order_by
    update_time: order_by
    vehicle_id: order_by
}

"""aggregate min on columns"""
type vehicle_supervision_photo_min_fields {
    IMEI: String
    camera_id: Int
    driver_id: String
    enterprise_id: String
    id: bigint
    monitoring_pic_address: String
    monitoring_pic_name: String
    monitoring_pic_upload_time: timestamptz
    photo_condition: String
    sim_number: String
    supervision_photo_id: String
    update_time: timestamptz
    vehicle_id: String
}

"""
order by min() on columns of table "vehicle_supervision_photo"
"""
input vehicle_supervision_photo_min_order_by {
    IMEI: order_by
    camera_id: order_by
    driver_id: order_by
    enterprise_id: order_by
    id: order_by
    monitoring_pic_address: order_by
    monitoring_pic_name: order_by
    monitoring_pic_upload_time: order_by
    photo_condition: order_by
    sim_number: order_by
    supervision_photo_id: order_by
    update_time: order_by
    vehicle_id: order_by
}

"""
response of any mutation on the table "vehicle_supervision_photo"
"""
type vehicle_supervision_photo_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [vehicle_supervision_photo!]!
}

"""
input type for inserting object relation for remote table "vehicle_supervision_photo"
"""
input vehicle_supervision_photo_obj_rel_insert_input {
    data: vehicle_supervision_photo_insert_input!
    on_conflict: vehicle_supervision_photo_on_conflict
}

"""
on conflict condition type for table "vehicle_supervision_photo"
"""
input vehicle_supervision_photo_on_conflict {
    constraint: vehicle_supervision_photo_constraint!
    update_columns: [vehicle_supervision_photo_update_column!]!
    where: vehicle_supervision_photo_bool_exp
}

"""
ordering options when selecting data from "vehicle_supervision_photo"
"""
input vehicle_supervision_photo_order_by {
    IMEI: order_by
    camera_id: order_by
    driver_id: order_by
    enterprise_id: order_by
    id: order_by
    monitoring_pic_address: order_by
    monitoring_pic_name: order_by
    monitoring_pic_upload_time: order_by
    photo_condition: order_by
    sim_number: order_by
    supervision_photo_id: order_by
    update_time: order_by
    vehicle_id: order_by
}

"""
primary key columns input for table: "vehicle_supervision_photo"
"""
input vehicle_supervision_photo_pk_columns_input {
    """主键"""
    id: bigint!

    """车辆监控图片外部编码，由golang程序生成的xid，暴露到外部使用"""
    supervision_photo_id: String!
}

"""
select columns of table "vehicle_supervision_photo"
"""
enum vehicle_supervision_photo_select_column {
    """column name"""
    IMEI

    """column name"""
    camera_id

    """column name"""
    driver_id

    """column name"""
    enterprise_id

    """column name"""
    id

    """column name"""
    monitoring_pic_address

    """column name"""
    monitoring_pic_name

    """column name"""
    monitoring_pic_upload_time

    """column name"""
    photo_condition

    """column name"""
    sim_number

    """column name"""
    supervision_photo_id

    """column name"""
    update_time

    """column name"""
    vehicle_id
}

"""
input type for updating data in table "vehicle_supervision_photo"
"""
input vehicle_supervision_photo_set_input {
    IMEI: String
    camera_id: Int
    driver_id: String
    enterprise_id: String
    id: bigint
    monitoring_pic_address: String
    monitoring_pic_name: String
    monitoring_pic_upload_time: timestamptz
    photo_condition: String
    sim_number: String
    supervision_photo_id: String
    update_time: timestamptz
    vehicle_id: String
}

"""aggregate stddev on columns"""
type vehicle_supervision_photo_stddev_fields {
    camera_id: Float
    id: Float
}

"""
order by stddev() on columns of table "vehicle_supervision_photo"
"""
input vehicle_supervision_photo_stddev_order_by {
    camera_id: order_by
    id: order_by
}

"""aggregate stddev_pop on columns"""
type vehicle_supervision_photo_stddev_pop_fields {
    camera_id: Float
    id: Float
}

"""
order by stddev_pop() on columns of table "vehicle_supervision_photo"
"""
input vehicle_supervision_photo_stddev_pop_order_by {
    camera_id: order_by
    id: order_by
}

"""aggregate stddev_samp on columns"""
type vehicle_supervision_photo_stddev_samp_fields {
    camera_id: Float
    id: Float
}

"""
order by stddev_samp() on columns of table "vehicle_supervision_photo"
"""
input vehicle_supervision_photo_stddev_samp_order_by {
    camera_id: order_by
    id: order_by
}

"""aggregate sum on columns"""
type vehicle_supervision_photo_sum_fields {
    camera_id: Int
    id: bigint
}

"""
order by sum() on columns of table "vehicle_supervision_photo"
"""
input vehicle_supervision_photo_sum_order_by {
    camera_id: order_by
    id: order_by
}

"""
update columns of table "vehicle_supervision_photo"
"""
enum vehicle_supervision_photo_update_column {
    """column name"""
    IMEI

    """column name"""
    camera_id

    """column name"""
    driver_id

    """column name"""
    enterprise_id

    """column name"""
    id

    """column name"""
    monitoring_pic_address

    """column name"""
    monitoring_pic_name

    """column name"""
    monitoring_pic_upload_time

    """column name"""
    photo_condition

    """column name"""
    sim_number

    """column name"""
    supervision_photo_id

    """column name"""
    update_time

    """column name"""
    vehicle_id
}

"""aggregate var_pop on columns"""
type vehicle_supervision_photo_var_pop_fields {
    camera_id: Float
    id: Float
}

"""
order by var_pop() on columns of table "vehicle_supervision_photo"
"""
input vehicle_supervision_photo_var_pop_order_by {
    camera_id: order_by
    id: order_by
}

"""aggregate var_samp on columns"""
type vehicle_supervision_photo_var_samp_fields {
    camera_id: Float
    id: Float
}

"""
order by var_samp() on columns of table "vehicle_supervision_photo"
"""
input vehicle_supervision_photo_var_samp_order_by {
    camera_id: order_by
    id: order_by
}

"""aggregate variance on columns"""
type vehicle_supervision_photo_variance_fields {
    camera_id: Float
    id: Float
}

"""
order by variance() on columns of table "vehicle_supervision_photo"
"""
input vehicle_supervision_photo_variance_order_by {
    camera_id: order_by
    id: order_by
}

`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_JJ_VEHICLE_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.JjVehicleSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOJJ_VEHICLE_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_JJ_VEHICLE_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.JjVehicleBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNJJ_VEHICLE_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_JJ_VEHICLE_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_muck_truck_category_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MuckTruckCategoryInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNmuck_truck_category_info_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_muck_truck_category_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_muck_truck_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MuckTruckInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNmuck_truck_info_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_muck_truck_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["muck_truck_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["muck_truck_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_muck_truck_preview_number_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MuckTruckPreviewNumberBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNmuck_truck_preview_number_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_muck_truck_preview_number_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_muck_truck_worker_id_card_orders_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MuckTruckWorkerIDCardOrdersBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNmuck_truck_worker_id_card_orders_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_muck_truck_worker_id_card_orders_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_operating_vehicle_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.OperatingVehicleInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNoperating_vehicle_info_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_operating_vehicle_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["operating_vehicle_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["operating_vehicle_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_owner_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.OwnerInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNowner_info_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_owner_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNvehicle_info_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["vehicle_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["vehicle_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_info_change_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleInfoChangeLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNvehicle_info_change_log_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_info_change_log_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["vehicle_info_change_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_info_change_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["vehicle_info_change_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_supervision_photo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleSupervisionPhotoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNvehicle_supervision_photo_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_supervision_photo_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["supervision_photo_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["supervision_photo_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_JJ_VEHICLE_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.JjVehicleInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNJJ_VEHICLE_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.JjVehicleOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOJJ_VEHICLE_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_JJ_VEHICLE_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.JjVehicleInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNJJ_VEHICLE_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.JjVehicleOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOJJ_VEHICLE_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_muck_truck_category_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.MuckTruckCategoryInfoInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNmuck_truck_category_info_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.MuckTruckCategoryInfoOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOmuck_truck_category_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_muck_truck_category_info_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MuckTruckCategoryInfoInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNmuck_truck_category_info_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.MuckTruckCategoryInfoOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOmuck_truck_category_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_muck_truck_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.MuckTruckInfoInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNmuck_truck_info_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.MuckTruckInfoOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOmuck_truck_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_muck_truck_info_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MuckTruckInfoInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNmuck_truck_info_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.MuckTruckInfoOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOmuck_truck_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_muck_truck_preview_number_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.MuckTruckPreviewNumberInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNmuck_truck_preview_number_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.MuckTruckPreviewNumberOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOmuck_truck_preview_number_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_muck_truck_preview_number_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MuckTruckPreviewNumberInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNmuck_truck_preview_number_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.MuckTruckPreviewNumberOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOmuck_truck_preview_number_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_muck_truck_worker_id_card_orders_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.MuckTruckWorkerIDCardOrdersInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNmuck_truck_worker_id_card_orders_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.MuckTruckWorkerIDCardOrdersOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOmuck_truck_worker_id_card_orders_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_muck_truck_worker_id_card_orders_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MuckTruckWorkerIDCardOrdersInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNmuck_truck_worker_id_card_orders_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.MuckTruckWorkerIDCardOrdersOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOmuck_truck_worker_id_card_orders_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_operating_vehicle_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.OperatingVehicleInfoInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNoperating_vehicle_info_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.OperatingVehicleInfoOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOoperating_vehicle_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_operating_vehicle_info_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.OperatingVehicleInfoInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNoperating_vehicle_info_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.OperatingVehicleInfoOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOoperating_vehicle_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_owner_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.OwnerInfoInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNowner_info_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.OwnerInfoOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOowner_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_owner_info_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.OwnerInfoInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNowner_info_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.OwnerInfoOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOowner_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VehicleInfoInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNvehicle_info_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.VehicleInfoOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOvehicle_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_info_change_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VehicleInfoChangeLogInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNvehicle_info_change_log_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.VehicleInfoChangeLogOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOvehicle_info_change_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_info_change_log_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleInfoChangeLogInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNvehicle_info_change_log_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.VehicleInfoChangeLogOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOvehicle_info_change_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_info_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleInfoInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNvehicle_info_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.VehicleInfoOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOvehicle_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_supervision_photo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VehicleSupervisionPhotoInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNvehicle_supervision_photo_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.VehicleSupervisionPhotoOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOvehicle_supervision_photo_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_supervision_photo_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleSupervisionPhotoInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNvehicle_supervision_photo_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.VehicleSupervisionPhotoOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOvehicle_supervision_photo_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_update_JJ_VEHICLE_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.JjVehicleIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOJJ_VEHICLE_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.JjVehicleSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOJJ_VEHICLE_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.JjVehicleBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNJJ_VEHICLE_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_JJ_VEHICLE_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.JjVehicleIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOJJ_VEHICLE_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.JjVehicleSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOJJ_VEHICLE_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.JjVehiclePkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNJJ_VEHICLE_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehiclePkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_muck_truck_category_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MuckTruckCategoryInfoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOmuck_truck_category_info_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.MuckTruckCategoryInfoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOmuck_truck_category_info_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.MuckTruckCategoryInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNmuck_truck_category_info_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_muck_truck_category_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MuckTruckCategoryInfoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOmuck_truck_category_info_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.MuckTruckCategoryInfoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOmuck_truck_category_info_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.MuckTruckCategoryInfoPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNmuck_truck_category_info_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_muck_truck_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MuckTruckInfoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOmuck_truck_info_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.MuckTruckInfoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOmuck_truck_info_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.MuckTruckInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNmuck_truck_info_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_muck_truck_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MuckTruckInfoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOmuck_truck_info_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.MuckTruckInfoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOmuck_truck_info_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.MuckTruckInfoPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNmuck_truck_info_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_muck_truck_preview_number_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MuckTruckPreviewNumberIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOmuck_truck_preview_number_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.MuckTruckPreviewNumberSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOmuck_truck_preview_number_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.MuckTruckPreviewNumberBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNmuck_truck_preview_number_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_muck_truck_preview_number_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MuckTruckPreviewNumberIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOmuck_truck_preview_number_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.MuckTruckPreviewNumberSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOmuck_truck_preview_number_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.MuckTruckPreviewNumberPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNmuck_truck_preview_number_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_muck_truck_worker_id_card_orders_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MuckTruckWorkerIDCardOrdersIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOmuck_truck_worker_id_card_orders_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.MuckTruckWorkerIDCardOrdersSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOmuck_truck_worker_id_card_orders_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.MuckTruckWorkerIDCardOrdersBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNmuck_truck_worker_id_card_orders_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_muck_truck_worker_id_card_orders_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MuckTruckWorkerIDCardOrdersIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOmuck_truck_worker_id_card_orders_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.MuckTruckWorkerIDCardOrdersSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOmuck_truck_worker_id_card_orders_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.MuckTruckWorkerIDCardOrdersPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNmuck_truck_worker_id_card_orders_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_operating_vehicle_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.OperatingVehicleInfoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOoperating_vehicle_info_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.OperatingVehicleInfoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOoperating_vehicle_info_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.OperatingVehicleInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNoperating_vehicle_info_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_operating_vehicle_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.OperatingVehicleInfoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOoperating_vehicle_info_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.OperatingVehicleInfoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOoperating_vehicle_info_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.OperatingVehicleInfoPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNoperating_vehicle_info_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_owner_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.OwnerInfoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOowner_info_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.OwnerInfoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOowner_info_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.OwnerInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNowner_info_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_owner_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.OwnerInfoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOowner_info_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.OwnerInfoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOowner_info_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.OwnerInfoPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNowner_info_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleInfoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOvehicle_info_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleInfoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOvehicle_info_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNvehicle_info_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleInfoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOvehicle_info_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleInfoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOvehicle_info_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleInfoPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNvehicle_info_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_info_change_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleInfoChangeLogIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOvehicle_info_change_log_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleInfoChangeLogSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOvehicle_info_change_log_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleInfoChangeLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNvehicle_info_change_log_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_info_change_log_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleInfoChangeLogIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOvehicle_info_change_log_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleInfoChangeLogSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOvehicle_info_change_log_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleInfoChangeLogPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNvehicle_info_change_log_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_supervision_photo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleSupervisionPhotoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOvehicle_supervision_photo_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleSupervisionPhotoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOvehicle_supervision_photo_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleSupervisionPhotoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNvehicle_supervision_photo_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_supervision_photo_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleSupervisionPhotoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOvehicle_supervision_photo_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleSupervisionPhotoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOvehicle_supervision_photo_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleSupervisionPhotoPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNvehicle_supervision_photo_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_JJ_VEHICLE_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.JjVehicleSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOJJ_VEHICLE_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.JjVehicleOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOJJ_VEHICLE_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.JjVehicleBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOJJ_VEHICLE_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_JJ_VEHICLE_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.JjVehicleSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOJJ_VEHICLE_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.JjVehicleOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOJJ_VEHICLE_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.JjVehicleBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOJJ_VEHICLE_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_JJ_VEHICLE_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_muck_truck_category_info_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.MuckTruckCategoryInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOmuck_truck_category_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.MuckTruckCategoryInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOmuck_truck_category_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.MuckTruckCategoryInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOmuck_truck_category_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_muck_truck_category_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.MuckTruckCategoryInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOmuck_truck_category_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.MuckTruckCategoryInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOmuck_truck_category_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.MuckTruckCategoryInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOmuck_truck_category_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_muck_truck_category_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_muck_truck_info_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.MuckTruckInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOmuck_truck_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.MuckTruckInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOmuck_truck_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.MuckTruckInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOmuck_truck_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_muck_truck_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.MuckTruckInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOmuck_truck_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.MuckTruckInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOmuck_truck_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.MuckTruckInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOmuck_truck_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_muck_truck_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["muck_truck_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["muck_truck_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_muck_truck_preview_number_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.MuckTruckPreviewNumberSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOmuck_truck_preview_number_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.MuckTruckPreviewNumberOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOmuck_truck_preview_number_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.MuckTruckPreviewNumberBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOmuck_truck_preview_number_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_muck_truck_preview_number_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.MuckTruckPreviewNumberSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOmuck_truck_preview_number_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.MuckTruckPreviewNumberOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOmuck_truck_preview_number_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.MuckTruckPreviewNumberBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOmuck_truck_preview_number_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_muck_truck_preview_number_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_muck_truck_worker_id_card_orders_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.MuckTruckWorkerIDCardOrdersSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOmuck_truck_worker_id_card_orders_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.MuckTruckWorkerIDCardOrdersOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOmuck_truck_worker_id_card_orders_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.MuckTruckWorkerIDCardOrdersBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOmuck_truck_worker_id_card_orders_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_muck_truck_worker_id_card_orders_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.MuckTruckWorkerIDCardOrdersSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOmuck_truck_worker_id_card_orders_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.MuckTruckWorkerIDCardOrdersOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOmuck_truck_worker_id_card_orders_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.MuckTruckWorkerIDCardOrdersBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOmuck_truck_worker_id_card_orders_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_muck_truck_worker_id_card_orders_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_operating_vehicle_info_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.OperatingVehicleInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOoperating_vehicle_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.OperatingVehicleInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOoperating_vehicle_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.OperatingVehicleInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOoperating_vehicle_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_operating_vehicle_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.OperatingVehicleInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOoperating_vehicle_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.OperatingVehicleInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOoperating_vehicle_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.OperatingVehicleInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOoperating_vehicle_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_operating_vehicle_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["operating_vehicle_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["operating_vehicle_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_owner_info_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.OwnerInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOowner_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.OwnerInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOowner_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.OwnerInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOowner_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_owner_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.OwnerInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOowner_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.OwnerInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOowner_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.OwnerInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOowner_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_owner_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_info_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["vehicle_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["vehicle_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_info_change_log_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleInfoChangeLogSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_info_change_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleInfoChangeLogOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_info_change_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleInfoChangeLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_info_change_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_info_change_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleInfoChangeLogSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_info_change_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleInfoChangeLogOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_info_change_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleInfoChangeLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_info_change_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_info_change_log_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["vehicle_info_change_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_info_change_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["vehicle_info_change_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_supervision_photo_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleSupervisionPhotoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_supervision_photo_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleSupervisionPhotoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_supervision_photo_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleSupervisionPhotoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_supervision_photo_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_supervision_photo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleSupervisionPhotoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_supervision_photo_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleSupervisionPhotoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_supervision_photo_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleSupervisionPhotoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_supervision_photo_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_supervision_photo_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["supervision_photo_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["supervision_photo_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_JJ_VEHICLE_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.JjVehicleSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOJJ_VEHICLE_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.JjVehicleOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOJJ_VEHICLE_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.JjVehicleBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOJJ_VEHICLE_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_JJ_VEHICLE_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.JjVehicleSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOJJ_VEHICLE_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.JjVehicleOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOJJ_VEHICLE_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.JjVehicleBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOJJ_VEHICLE_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_JJ_VEHICLE_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_muck_truck_category_info_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.MuckTruckCategoryInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOmuck_truck_category_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.MuckTruckCategoryInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOmuck_truck_category_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.MuckTruckCategoryInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOmuck_truck_category_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_muck_truck_category_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.MuckTruckCategoryInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOmuck_truck_category_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.MuckTruckCategoryInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOmuck_truck_category_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.MuckTruckCategoryInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOmuck_truck_category_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_muck_truck_category_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_muck_truck_info_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.MuckTruckInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOmuck_truck_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.MuckTruckInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOmuck_truck_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.MuckTruckInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOmuck_truck_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_muck_truck_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.MuckTruckInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOmuck_truck_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.MuckTruckInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOmuck_truck_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.MuckTruckInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOmuck_truck_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_muck_truck_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["muck_truck_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["muck_truck_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_muck_truck_preview_number_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.MuckTruckPreviewNumberSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOmuck_truck_preview_number_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.MuckTruckPreviewNumberOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOmuck_truck_preview_number_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.MuckTruckPreviewNumberBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOmuck_truck_preview_number_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_muck_truck_preview_number_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.MuckTruckPreviewNumberSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOmuck_truck_preview_number_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.MuckTruckPreviewNumberOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOmuck_truck_preview_number_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.MuckTruckPreviewNumberBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOmuck_truck_preview_number_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_muck_truck_preview_number_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_muck_truck_worker_id_card_orders_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.MuckTruckWorkerIDCardOrdersSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOmuck_truck_worker_id_card_orders_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.MuckTruckWorkerIDCardOrdersOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOmuck_truck_worker_id_card_orders_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.MuckTruckWorkerIDCardOrdersBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOmuck_truck_worker_id_card_orders_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_muck_truck_worker_id_card_orders_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.MuckTruckWorkerIDCardOrdersSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOmuck_truck_worker_id_card_orders_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.MuckTruckWorkerIDCardOrdersOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOmuck_truck_worker_id_card_orders_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.MuckTruckWorkerIDCardOrdersBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOmuck_truck_worker_id_card_orders_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_muck_truck_worker_id_card_orders_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_operating_vehicle_info_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.OperatingVehicleInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOoperating_vehicle_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.OperatingVehicleInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOoperating_vehicle_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.OperatingVehicleInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOoperating_vehicle_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_operating_vehicle_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.OperatingVehicleInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOoperating_vehicle_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.OperatingVehicleInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOoperating_vehicle_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.OperatingVehicleInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOoperating_vehicle_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_operating_vehicle_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["operating_vehicle_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["operating_vehicle_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_owner_info_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.OwnerInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOowner_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.OwnerInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOowner_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.OwnerInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOowner_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_owner_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.OwnerInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOowner_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.OwnerInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOowner_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.OwnerInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOowner_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_owner_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_info_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["vehicle_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["vehicle_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_info_change_log_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleInfoChangeLogSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_info_change_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleInfoChangeLogOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_info_change_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleInfoChangeLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_info_change_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_info_change_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleInfoChangeLogSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_info_change_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleInfoChangeLogOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_info_change_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleInfoChangeLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_info_change_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_info_change_log_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["vehicle_info_change_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_info_change_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["vehicle_info_change_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_supervision_photo_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleSupervisionPhotoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_supervision_photo_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleSupervisionPhotoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_supervision_photo_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleSupervisionPhotoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_supervision_photo_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_supervision_photo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleSupervisionPhotoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_supervision_photo_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleSupervisionPhotoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_supervision_photo_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleSupervisionPhotoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_supervision_photo_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_supervision_photo_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["supervision_photo_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["supervision_photo_id"] = arg1
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field_muck_truck_category_info_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.MuckTruckCategoryInfoSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOmuck_truck_category_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_muck_truck_info_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.MuckTruckInfoSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOmuck_truck_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_muck_truck_preview_number_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.MuckTruckPreviewNumberSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOmuck_truck_preview_number_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_muck_truck_worker_id_card_orders_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.MuckTruckWorkerIDCardOrdersSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOmuck_truck_worker_id_card_orders_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_operating_vehicle_info_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.OperatingVehicleInfoSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOoperating_vehicle_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_owner_info_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.OwnerInfoSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOowner_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_vehicle_info_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleInfoSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOvehicle_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_vehicle_info_change_log_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleInfoChangeLogSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOvehicle_info_change_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_vehicle_supervision_photo_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleSupervisionPhotoSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOvehicle_supervision_photo_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _JJ_VEHICLE_CCDJRQ(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ccdjrq, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_CLLX(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cllx, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_CLSBDH(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Clsbdh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_COUNTY(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.County, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_DJRQ(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Djrq, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_FPRQ(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fprq, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_GXRQ(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gxrq, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_HPHM(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hphm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_HPZL(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hpzl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_IS_DETELED(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeteled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_LXDH(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lxdh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_LXDZ(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lxdz, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_OTHER(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Other, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_QZBFQZ(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Qzbfqz, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_SJHM(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sjhm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_SYR(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Syr, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_SYXZ(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Syxz, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_UPDATETIME(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updatetime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_VEHMONTYPE(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vehmontype, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_XH(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Xh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_YXQZ(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Yxqz, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_ZT(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_ZZL(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zzl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_id(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JjVehicleAggregateFields)
	fc.Result = res
	return ec.marshalOJJ_VEHICLE_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.JjVehicle)
	fc.Result = res
	return ec.marshalNJJ_VEHICLE2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JjVehicleAvgFields)
	fc.Result = res
	return ec.marshalOJJ_VEHICLE_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_JJ_VEHICLE_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JjVehicleMaxFields)
	fc.Result = res
	return ec.marshalOJJ_VEHICLE_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JjVehicleMinFields)
	fc.Result = res
	return ec.marshalOJJ_VEHICLE_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JjVehicleStddevFields)
	fc.Result = res
	return ec.marshalOJJ_VEHICLE_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JjVehicleStddevPopFields)
	fc.Result = res
	return ec.marshalOJJ_VEHICLE_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JjVehicleStddevSampFields)
	fc.Result = res
	return ec.marshalOJJ_VEHICLE_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JjVehicleSumFields)
	fc.Result = res
	return ec.marshalOJJ_VEHICLE_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JjVehicleVarPopFields)
	fc.Result = res
	return ec.marshalOJJ_VEHICLE_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JjVehicleVarSampFields)
	fc.Result = res
	return ec.marshalOJJ_VEHICLE_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JjVehicleVarianceFields)
	fc.Result = res
	return ec.marshalOJJ_VEHICLE_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_avg_fields_IS_DETELED(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeteled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_avg_fields_ZT(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_avg_fields_ZZL(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zzl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_max_fields_CCDJRQ(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ccdjrq, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_max_fields_CLLX(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cllx, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_max_fields_CLSBDH(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Clsbdh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_max_fields_COUNTY(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.County, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_max_fields_DJRQ(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Djrq, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_max_fields_FPRQ(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fprq, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_max_fields_GXRQ(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gxrq, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_max_fields_HPHM(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hphm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_max_fields_HPZL(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hpzl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_max_fields_IS_DETELED(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeteled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_max_fields_LXDH(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lxdh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_max_fields_LXDZ(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lxdz, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_max_fields_OTHER(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Other, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_max_fields_QZBFQZ(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Qzbfqz, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_max_fields_SJHM(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sjhm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_max_fields_SYR(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Syr, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_max_fields_SYXZ(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Syxz, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_max_fields_UPDATETIME(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updatetime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_max_fields_VEHMONTYPE(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vehmontype, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_max_fields_XH(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Xh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_max_fields_YXQZ(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Yxqz, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_max_fields_ZT(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_max_fields_ZZL(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zzl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_max_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_min_fields_CCDJRQ(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ccdjrq, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_min_fields_CLLX(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cllx, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_min_fields_CLSBDH(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Clsbdh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_min_fields_COUNTY(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.County, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_min_fields_DJRQ(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Djrq, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_min_fields_FPRQ(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fprq, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_min_fields_GXRQ(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gxrq, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_min_fields_HPHM(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hphm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_min_fields_HPZL(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hpzl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_min_fields_IS_DETELED(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeteled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_min_fields_LXDH(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lxdh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_min_fields_LXDZ(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lxdz, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_min_fields_OTHER(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Other, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_min_fields_QZBFQZ(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Qzbfqz, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_min_fields_SJHM(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sjhm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_min_fields_SYR(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Syr, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_min_fields_SYXZ(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Syxz, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_min_fields_UPDATETIME(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updatetime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_min_fields_VEHMONTYPE(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vehmontype, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_min_fields_XH(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Xh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_min_fields_YXQZ(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Yxqz, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_min_fields_ZT(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_min_fields_ZZL(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zzl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_min_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.JjVehicle)
	fc.Result = res
	return ec.marshalNJJ_VEHICLE2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_stddev_fields_IS_DETELED(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeteled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_stddev_fields_ZT(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_stddev_fields_ZZL(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zzl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_stddev_pop_fields_IS_DETELED(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeteled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_stddev_pop_fields_ZT(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_stddev_pop_fields_ZZL(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zzl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_stddev_samp_fields_IS_DETELED(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeteled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_stddev_samp_fields_ZT(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_stddev_samp_fields_ZZL(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zzl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_sum_fields_IS_DETELED(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeteled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_sum_fields_ZT(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_sum_fields_ZZL(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zzl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_var_pop_fields_IS_DETELED(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeteled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_var_pop_fields_ZT(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_var_pop_fields_ZZL(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zzl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_var_samp_fields_IS_DETELED(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeteled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_var_samp_fields_ZT(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_var_samp_fields_ZZL(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zzl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_variance_fields_IS_DETELED(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeteled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_variance_fields_ZT(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_variance_fields_ZZL(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zzl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _JJ_VEHICLE_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.JjVehicleVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JJ_VEHICLE_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleInfo(rctx, args["where"].(model.VehicleInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_info_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleInfoByPk(rctx, args["id"].(int64), args["vehicle_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfo)
	fc.Result = res
	return ec.marshalOvehicle_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleInfo(rctx, args["objects"].([]*model.VehicleInfoInsertInput), args["on_conflict"].(*model.VehicleInfoOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_info_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_info_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_info_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleInfoOne(rctx, args["object"].(model.VehicleInfoInsertInput), args["on_conflict"].(*model.VehicleInfoOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfo)
	fc.Result = res
	return ec.marshalOvehicle_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleInfo(rctx, args["_inc"].(*model.VehicleInfoIncInput), args["_set"].(*model.VehicleInfoSetInput), args["where"].(model.VehicleInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_info_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleInfoByPk(rctx, args["_inc"].(*model.VehicleInfoIncInput), args["_set"].(*model.VehicleInfoSetInput), args["pk_columns"].(model.VehicleInfoPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfo)
	fc.Result = res
	return ec.marshalOvehicle_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_JJ_VEHICLE(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_JJ_VEHICLE_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteJjVehicle(rctx, args["where"].(model.JjVehicleBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JjVehicleMutationResponse)
	fc.Result = res
	return ec.marshalOJJ_VEHICLE_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_JJ_VEHICLE_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_JJ_VEHICLE_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteJjVehicleByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JjVehicle)
	fc.Result = res
	return ec.marshalOJJ_VEHICLE2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicle(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_JJ_VEHICLE(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_JJ_VEHICLE_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertJjVehicle(rctx, args["objects"].([]*model.JjVehicleInsertInput), args["on_conflict"].(*model.JjVehicleOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JjVehicleMutationResponse)
	fc.Result = res
	return ec.marshalOJJ_VEHICLE_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_JJ_VEHICLE_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_JJ_VEHICLE_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertJjVehicleOne(rctx, args["object"].(model.JjVehicleInsertInput), args["on_conflict"].(*model.JjVehicleOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JjVehicle)
	fc.Result = res
	return ec.marshalOJJ_VEHICLE2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicle(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_JJ_VEHICLE(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_JJ_VEHICLE_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateJjVehicle(rctx, args["_inc"].(*model.JjVehicleIncInput), args["_set"].(*model.JjVehicleSetInput), args["where"].(model.JjVehicleBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JjVehicleMutationResponse)
	fc.Result = res
	return ec.marshalOJJ_VEHICLE_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_JJ_VEHICLE_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_JJ_VEHICLE_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateJjVehicleByPk(rctx, args["_inc"].(*model.JjVehicleIncInput), args["_set"].(*model.JjVehicleSetInput), args["pk_columns"].(model.JjVehiclePkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JjVehicle)
	fc.Result = res
	return ec.marshalOJJ_VEHICLE2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicle(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_muck_truck_category_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_muck_truck_category_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMuckTruckCategoryInfo(rctx, args["where"].(model.MuckTruckCategoryInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckCategoryInfoMutationResponse)
	fc.Result = res
	return ec.marshalOmuck_truck_category_info_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_muck_truck_category_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_muck_truck_category_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMuckTruckCategoryInfoByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckCategoryInfo)
	fc.Result = res
	return ec.marshalOmuck_truck_category_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_muck_truck_category_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_muck_truck_category_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertMuckTruckCategoryInfo(rctx, args["objects"].([]*model.MuckTruckCategoryInfoInsertInput), args["on_conflict"].(*model.MuckTruckCategoryInfoOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckCategoryInfoMutationResponse)
	fc.Result = res
	return ec.marshalOmuck_truck_category_info_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_muck_truck_category_info_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_muck_truck_category_info_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertMuckTruckCategoryInfoOne(rctx, args["object"].(model.MuckTruckCategoryInfoInsertInput), args["on_conflict"].(*model.MuckTruckCategoryInfoOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckCategoryInfo)
	fc.Result = res
	return ec.marshalOmuck_truck_category_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_muck_truck_category_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_muck_truck_category_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMuckTruckCategoryInfo(rctx, args["_inc"].(*model.MuckTruckCategoryInfoIncInput), args["_set"].(*model.MuckTruckCategoryInfoSetInput), args["where"].(model.MuckTruckCategoryInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckCategoryInfoMutationResponse)
	fc.Result = res
	return ec.marshalOmuck_truck_category_info_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_muck_truck_category_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_muck_truck_category_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMuckTruckCategoryInfoByPk(rctx, args["_inc"].(*model.MuckTruckCategoryInfoIncInput), args["_set"].(*model.MuckTruckCategoryInfoSetInput), args["pk_columns"].(model.MuckTruckCategoryInfoPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckCategoryInfo)
	fc.Result = res
	return ec.marshalOmuck_truck_category_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_muck_truck_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_muck_truck_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMuckTruckInfo(rctx, args["where"].(model.MuckTruckInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckInfoMutationResponse)
	fc.Result = res
	return ec.marshalOmuck_truck_info_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_muck_truck_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_muck_truck_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMuckTruckInfoByPk(rctx, args["muck_truck_id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckInfo)
	fc.Result = res
	return ec.marshalOmuck_truck_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_muck_truck_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_muck_truck_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertMuckTruckInfo(rctx, args["objects"].([]*model.MuckTruckInfoInsertInput), args["on_conflict"].(*model.MuckTruckInfoOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckInfoMutationResponse)
	fc.Result = res
	return ec.marshalOmuck_truck_info_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_muck_truck_info_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_muck_truck_info_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertMuckTruckInfoOne(rctx, args["object"].(model.MuckTruckInfoInsertInput), args["on_conflict"].(*model.MuckTruckInfoOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckInfo)
	fc.Result = res
	return ec.marshalOmuck_truck_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_muck_truck_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_muck_truck_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMuckTruckInfo(rctx, args["_inc"].(*model.MuckTruckInfoIncInput), args["_set"].(*model.MuckTruckInfoSetInput), args["where"].(model.MuckTruckInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckInfoMutationResponse)
	fc.Result = res
	return ec.marshalOmuck_truck_info_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_muck_truck_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_muck_truck_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMuckTruckInfoByPk(rctx, args["_inc"].(*model.MuckTruckInfoIncInput), args["_set"].(*model.MuckTruckInfoSetInput), args["pk_columns"].(model.MuckTruckInfoPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckInfo)
	fc.Result = res
	return ec.marshalOmuck_truck_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_muck_truck_preview_number(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_muck_truck_preview_number_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMuckTruckPreviewNumber(rctx, args["where"].(model.MuckTruckPreviewNumberBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPreviewNumberMutationResponse)
	fc.Result = res
	return ec.marshalOmuck_truck_preview_number_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_muck_truck_preview_number_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_muck_truck_preview_number_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMuckTruckPreviewNumberByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPreviewNumber)
	fc.Result = res
	return ec.marshalOmuck_truck_preview_number2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumber(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_muck_truck_preview_number(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_muck_truck_preview_number_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertMuckTruckPreviewNumber(rctx, args["objects"].([]*model.MuckTruckPreviewNumberInsertInput), args["on_conflict"].(*model.MuckTruckPreviewNumberOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPreviewNumberMutationResponse)
	fc.Result = res
	return ec.marshalOmuck_truck_preview_number_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_muck_truck_preview_number_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_muck_truck_preview_number_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertMuckTruckPreviewNumberOne(rctx, args["object"].(model.MuckTruckPreviewNumberInsertInput), args["on_conflict"].(*model.MuckTruckPreviewNumberOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPreviewNumber)
	fc.Result = res
	return ec.marshalOmuck_truck_preview_number2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumber(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_muck_truck_preview_number(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_muck_truck_preview_number_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMuckTruckPreviewNumber(rctx, args["_inc"].(*model.MuckTruckPreviewNumberIncInput), args["_set"].(*model.MuckTruckPreviewNumberSetInput), args["where"].(model.MuckTruckPreviewNumberBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPreviewNumberMutationResponse)
	fc.Result = res
	return ec.marshalOmuck_truck_preview_number_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_muck_truck_preview_number_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_muck_truck_preview_number_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMuckTruckPreviewNumberByPk(rctx, args["_inc"].(*model.MuckTruckPreviewNumberIncInput), args["_set"].(*model.MuckTruckPreviewNumberSetInput), args["pk_columns"].(model.MuckTruckPreviewNumberPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPreviewNumber)
	fc.Result = res
	return ec.marshalOmuck_truck_preview_number2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumber(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_muck_truck_worker_id_card_orders(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_muck_truck_worker_id_card_orders_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMuckTruckWorkerIDCardOrders(rctx, args["where"].(model.MuckTruckWorkerIDCardOrdersBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckWorkerIDCardOrdersMutationResponse)
	fc.Result = res
	return ec.marshalOmuck_truck_worker_id_card_orders_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_muck_truck_worker_id_card_orders_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_muck_truck_worker_id_card_orders_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMuckTruckWorkerIDCardOrdersByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckWorkerIDCardOrders)
	fc.Result = res
	return ec.marshalOmuck_truck_worker_id_card_orders2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrders(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_muck_truck_worker_id_card_orders(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_muck_truck_worker_id_card_orders_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertMuckTruckWorkerIDCardOrders(rctx, args["objects"].([]*model.MuckTruckWorkerIDCardOrdersInsertInput), args["on_conflict"].(*model.MuckTruckWorkerIDCardOrdersOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckWorkerIDCardOrdersMutationResponse)
	fc.Result = res
	return ec.marshalOmuck_truck_worker_id_card_orders_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_muck_truck_worker_id_card_orders_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_muck_truck_worker_id_card_orders_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertMuckTruckWorkerIDCardOrdersOne(rctx, args["object"].(model.MuckTruckWorkerIDCardOrdersInsertInput), args["on_conflict"].(*model.MuckTruckWorkerIDCardOrdersOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckWorkerIDCardOrders)
	fc.Result = res
	return ec.marshalOmuck_truck_worker_id_card_orders2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrders(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_muck_truck_worker_id_card_orders(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_muck_truck_worker_id_card_orders_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMuckTruckWorkerIDCardOrders(rctx, args["_inc"].(*model.MuckTruckWorkerIDCardOrdersIncInput), args["_set"].(*model.MuckTruckWorkerIDCardOrdersSetInput), args["where"].(model.MuckTruckWorkerIDCardOrdersBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckWorkerIDCardOrdersMutationResponse)
	fc.Result = res
	return ec.marshalOmuck_truck_worker_id_card_orders_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_muck_truck_worker_id_card_orders_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_muck_truck_worker_id_card_orders_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMuckTruckWorkerIDCardOrdersByPk(rctx, args["_inc"].(*model.MuckTruckWorkerIDCardOrdersIncInput), args["_set"].(*model.MuckTruckWorkerIDCardOrdersSetInput), args["pk_columns"].(model.MuckTruckWorkerIDCardOrdersPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckWorkerIDCardOrders)
	fc.Result = res
	return ec.marshalOmuck_truck_worker_id_card_orders2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrders(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_operating_vehicle_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_operating_vehicle_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteOperatingVehicleInfo(rctx, args["where"].(model.OperatingVehicleInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OperatingVehicleInfoMutationResponse)
	fc.Result = res
	return ec.marshalOoperating_vehicle_info_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_operating_vehicle_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_operating_vehicle_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteOperatingVehicleInfoByPk(rctx, args["operating_vehicle_id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OperatingVehicleInfo)
	fc.Result = res
	return ec.marshalOoperating_vehicle_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_operating_vehicle_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_operating_vehicle_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertOperatingVehicleInfo(rctx, args["objects"].([]*model.OperatingVehicleInfoInsertInput), args["on_conflict"].(*model.OperatingVehicleInfoOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OperatingVehicleInfoMutationResponse)
	fc.Result = res
	return ec.marshalOoperating_vehicle_info_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_operating_vehicle_info_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_operating_vehicle_info_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertOperatingVehicleInfoOne(rctx, args["object"].(model.OperatingVehicleInfoInsertInput), args["on_conflict"].(*model.OperatingVehicleInfoOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OperatingVehicleInfo)
	fc.Result = res
	return ec.marshalOoperating_vehicle_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_operating_vehicle_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_operating_vehicle_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOperatingVehicleInfo(rctx, args["_inc"].(*model.OperatingVehicleInfoIncInput), args["_set"].(*model.OperatingVehicleInfoSetInput), args["where"].(model.OperatingVehicleInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OperatingVehicleInfoMutationResponse)
	fc.Result = res
	return ec.marshalOoperating_vehicle_info_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_operating_vehicle_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_operating_vehicle_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOperatingVehicleInfoByPk(rctx, args["_inc"].(*model.OperatingVehicleInfoIncInput), args["_set"].(*model.OperatingVehicleInfoSetInput), args["pk_columns"].(model.OperatingVehicleInfoPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OperatingVehicleInfo)
	fc.Result = res
	return ec.marshalOoperating_vehicle_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_owner_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_owner_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteOwnerInfo(rctx, args["where"].(model.OwnerInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OwnerInfoMutationResponse)
	fc.Result = res
	return ec.marshalOowner_info_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_owner_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_owner_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteOwnerInfoByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OwnerInfo)
	fc.Result = res
	return ec.marshalOowner_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_owner_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_owner_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertOwnerInfo(rctx, args["objects"].([]*model.OwnerInfoInsertInput), args["on_conflict"].(*model.OwnerInfoOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OwnerInfoMutationResponse)
	fc.Result = res
	return ec.marshalOowner_info_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_owner_info_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_owner_info_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertOwnerInfoOne(rctx, args["object"].(model.OwnerInfoInsertInput), args["on_conflict"].(*model.OwnerInfoOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OwnerInfo)
	fc.Result = res
	return ec.marshalOowner_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_owner_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_owner_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOwnerInfo(rctx, args["_inc"].(*model.OwnerInfoIncInput), args["_set"].(*model.OwnerInfoSetInput), args["where"].(model.OwnerInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OwnerInfoMutationResponse)
	fc.Result = res
	return ec.marshalOowner_info_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_owner_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_owner_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOwnerInfoByPk(rctx, args["_inc"].(*model.OwnerInfoIncInput), args["_set"].(*model.OwnerInfoSetInput), args["pk_columns"].(model.OwnerInfoPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OwnerInfo)
	fc.Result = res
	return ec.marshalOowner_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_info_change_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_info_change_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleInfoChangeLog(rctx, args["where"].(model.VehicleInfoChangeLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoChangeLogMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_info_change_log_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_info_change_log_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_info_change_log_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleInfoChangeLogByPk(rctx, args["id"].(int64), args["vehicle_info_change_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoChangeLog)
	fc.Result = res
	return ec.marshalOvehicle_info_change_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_info_change_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_info_change_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleInfoChangeLog(rctx, args["objects"].([]*model.VehicleInfoChangeLogInsertInput), args["on_conflict"].(*model.VehicleInfoChangeLogOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoChangeLogMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_info_change_log_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_info_change_log_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_info_change_log_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleInfoChangeLogOne(rctx, args["object"].(model.VehicleInfoChangeLogInsertInput), args["on_conflict"].(*model.VehicleInfoChangeLogOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoChangeLog)
	fc.Result = res
	return ec.marshalOvehicle_info_change_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_info_change_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_info_change_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleInfoChangeLog(rctx, args["_inc"].(*model.VehicleInfoChangeLogIncInput), args["_set"].(*model.VehicleInfoChangeLogSetInput), args["where"].(model.VehicleInfoChangeLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoChangeLogMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_info_change_log_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_info_change_log_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_info_change_log_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleInfoChangeLogByPk(rctx, args["_inc"].(*model.VehicleInfoChangeLogIncInput), args["_set"].(*model.VehicleInfoChangeLogSetInput), args["pk_columns"].(model.VehicleInfoChangeLogPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoChangeLog)
	fc.Result = res
	return ec.marshalOvehicle_info_change_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_supervision_photo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_supervision_photo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleSupervisionPhoto(rctx, args["where"].(model.VehicleSupervisionPhotoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSupervisionPhotoMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_supervision_photo_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_supervision_photo_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_supervision_photo_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleSupervisionPhotoByPk(rctx, args["id"].(int64), args["supervision_photo_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSupervisionPhoto)
	fc.Result = res
	return ec.marshalOvehicle_supervision_photo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhoto(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_supervision_photo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_supervision_photo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleSupervisionPhoto(rctx, args["objects"].([]*model.VehicleSupervisionPhotoInsertInput), args["on_conflict"].(*model.VehicleSupervisionPhotoOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSupervisionPhotoMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_supervision_photo_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_supervision_photo_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_supervision_photo_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleSupervisionPhotoOne(rctx, args["object"].(model.VehicleSupervisionPhotoInsertInput), args["on_conflict"].(*model.VehicleSupervisionPhotoOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSupervisionPhoto)
	fc.Result = res
	return ec.marshalOvehicle_supervision_photo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhoto(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_supervision_photo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_supervision_photo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleSupervisionPhoto(rctx, args["_inc"].(*model.VehicleSupervisionPhotoIncInput), args["_set"].(*model.VehicleSupervisionPhotoSetInput), args["where"].(model.VehicleSupervisionPhotoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSupervisionPhotoMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_supervision_photo_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_supervision_photo_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_supervision_photo_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleSupervisionPhotoByPk(rctx, args["_inc"].(*model.VehicleSupervisionPhotoIncInput), args["_set"].(*model.VehicleSupervisionPhotoSetInput), args["pk_columns"].(model.VehicleSupervisionPhotoPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSupervisionPhoto)
	fc.Result = res
	return ec.marshalOvehicle_supervision_photo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhoto(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleInfo(rctx, args["distinct_on"].([]model.VehicleInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleInfoOrderBy), args["where"].(*model.VehicleInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleInfo)
	fc.Result = res
	return ec.marshalNvehicle_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_info_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_info_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleInfoAggregate(rctx, args["distinct_on"].([]model.VehicleInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleInfoOrderBy), args["where"].(*model.VehicleInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoAggregate)
	fc.Result = res
	return ec.marshalNvehicle_info_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleInfoByPk(rctx, args["id"].(int64), args["vehicle_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfo)
	fc.Result = res
	return ec.marshalOvehicle_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_JJ_VEHICLE(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_JJ_VEHICLE_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().JjVehicle(rctx, args["distinct_on"].([]model.JjVehicleSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.JjVehicleOrderBy), args["where"].(*model.JjVehicleBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.JjVehicle)
	fc.Result = res
	return ec.marshalNJJ_VEHICLE2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_JJ_VEHICLE_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_JJ_VEHICLE_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().JjVehicleAggregate(rctx, args["distinct_on"].([]model.JjVehicleSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.JjVehicleOrderBy), args["where"].(*model.JjVehicleBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.JjVehicleAggregate)
	fc.Result = res
	return ec.marshalNJJ_VEHICLE_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_JJ_VEHICLE_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_JJ_VEHICLE_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().JjVehicleByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JjVehicle)
	fc.Result = res
	return ec.marshalOJJ_VEHICLE2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicle(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_muck_truck_category_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_muck_truck_category_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MuckTruckCategoryInfo(rctx, args["distinct_on"].([]model.MuckTruckCategoryInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckCategoryInfoOrderBy), args["where"].(*model.MuckTruckCategoryInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MuckTruckCategoryInfo)
	fc.Result = res
	return ec.marshalNmuck_truck_category_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_muck_truck_category_info_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_muck_truck_category_info_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MuckTruckCategoryInfoAggregate(rctx, args["distinct_on"].([]model.MuckTruckCategoryInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckCategoryInfoOrderBy), args["where"].(*model.MuckTruckCategoryInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckCategoryInfoAggregate)
	fc.Result = res
	return ec.marshalNmuck_truck_category_info_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_muck_truck_category_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_muck_truck_category_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MuckTruckCategoryInfoByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckCategoryInfo)
	fc.Result = res
	return ec.marshalOmuck_truck_category_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_muck_truck_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_muck_truck_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MuckTruckInfo(rctx, args["distinct_on"].([]model.MuckTruckInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckInfoOrderBy), args["where"].(*model.MuckTruckInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MuckTruckInfo)
	fc.Result = res
	return ec.marshalNmuck_truck_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_muck_truck_info_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_muck_truck_info_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MuckTruckInfoAggregate(rctx, args["distinct_on"].([]model.MuckTruckInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckInfoOrderBy), args["where"].(*model.MuckTruckInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckInfoAggregate)
	fc.Result = res
	return ec.marshalNmuck_truck_info_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_muck_truck_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_muck_truck_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MuckTruckInfoByPk(rctx, args["muck_truck_id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckInfo)
	fc.Result = res
	return ec.marshalOmuck_truck_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_muck_truck_preview_number(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_muck_truck_preview_number_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MuckTruckPreviewNumber(rctx, args["distinct_on"].([]model.MuckTruckPreviewNumberSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckPreviewNumberOrderBy), args["where"].(*model.MuckTruckPreviewNumberBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MuckTruckPreviewNumber)
	fc.Result = res
	return ec.marshalNmuck_truck_preview_number2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_muck_truck_preview_number_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_muck_truck_preview_number_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MuckTruckPreviewNumberAggregate(rctx, args["distinct_on"].([]model.MuckTruckPreviewNumberSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckPreviewNumberOrderBy), args["where"].(*model.MuckTruckPreviewNumberBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPreviewNumberAggregate)
	fc.Result = res
	return ec.marshalNmuck_truck_preview_number_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_muck_truck_preview_number_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_muck_truck_preview_number_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MuckTruckPreviewNumberByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPreviewNumber)
	fc.Result = res
	return ec.marshalOmuck_truck_preview_number2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumber(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_muck_truck_worker_id_card_orders(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_muck_truck_worker_id_card_orders_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MuckTruckWorkerIDCardOrders(rctx, args["distinct_on"].([]model.MuckTruckWorkerIDCardOrdersSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckWorkerIDCardOrdersOrderBy), args["where"].(*model.MuckTruckWorkerIDCardOrdersBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MuckTruckWorkerIDCardOrders)
	fc.Result = res
	return ec.marshalNmuck_truck_worker_id_card_orders2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_muck_truck_worker_id_card_orders_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_muck_truck_worker_id_card_orders_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MuckTruckWorkerIDCardOrdersAggregate(rctx, args["distinct_on"].([]model.MuckTruckWorkerIDCardOrdersSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckWorkerIDCardOrdersOrderBy), args["where"].(*model.MuckTruckWorkerIDCardOrdersBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckWorkerIDCardOrdersAggregate)
	fc.Result = res
	return ec.marshalNmuck_truck_worker_id_card_orders_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_muck_truck_worker_id_card_orders_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_muck_truck_worker_id_card_orders_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MuckTruckWorkerIDCardOrdersByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckWorkerIDCardOrders)
	fc.Result = res
	return ec.marshalOmuck_truck_worker_id_card_orders2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrders(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_operating_vehicle_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_operating_vehicle_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OperatingVehicleInfo(rctx, args["distinct_on"].([]model.OperatingVehicleInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.OperatingVehicleInfoOrderBy), args["where"].(*model.OperatingVehicleInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.OperatingVehicleInfo)
	fc.Result = res
	return ec.marshalNoperating_vehicle_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_operating_vehicle_info_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_operating_vehicle_info_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OperatingVehicleInfoAggregate(rctx, args["distinct_on"].([]model.OperatingVehicleInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.OperatingVehicleInfoOrderBy), args["where"].(*model.OperatingVehicleInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.OperatingVehicleInfoAggregate)
	fc.Result = res
	return ec.marshalNoperating_vehicle_info_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_operating_vehicle_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_operating_vehicle_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OperatingVehicleInfoByPk(rctx, args["operating_vehicle_id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OperatingVehicleInfo)
	fc.Result = res
	return ec.marshalOoperating_vehicle_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_owner_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_owner_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OwnerInfo(rctx, args["distinct_on"].([]model.OwnerInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.OwnerInfoOrderBy), args["where"].(*model.OwnerInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.OwnerInfo)
	fc.Result = res
	return ec.marshalNowner_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_owner_info_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_owner_info_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OwnerInfoAggregate(rctx, args["distinct_on"].([]model.OwnerInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.OwnerInfoOrderBy), args["where"].(*model.OwnerInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.OwnerInfoAggregate)
	fc.Result = res
	return ec.marshalNowner_info_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_owner_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_owner_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OwnerInfoByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OwnerInfo)
	fc.Result = res
	return ec.marshalOowner_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_info_change_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_info_change_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleInfoChangeLog(rctx, args["distinct_on"].([]model.VehicleInfoChangeLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleInfoChangeLogOrderBy), args["where"].(*model.VehicleInfoChangeLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleInfoChangeLog)
	fc.Result = res
	return ec.marshalNvehicle_info_change_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_info_change_log_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_info_change_log_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleInfoChangeLogAggregate(rctx, args["distinct_on"].([]model.VehicleInfoChangeLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleInfoChangeLogOrderBy), args["where"].(*model.VehicleInfoChangeLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoChangeLogAggregate)
	fc.Result = res
	return ec.marshalNvehicle_info_change_log_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_info_change_log_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_info_change_log_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleInfoChangeLogByPk(rctx, args["id"].(int64), args["vehicle_info_change_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoChangeLog)
	fc.Result = res
	return ec.marshalOvehicle_info_change_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_supervision_photo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_supervision_photo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleSupervisionPhoto(rctx, args["distinct_on"].([]model.VehicleSupervisionPhotoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleSupervisionPhotoOrderBy), args["where"].(*model.VehicleSupervisionPhotoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleSupervisionPhoto)
	fc.Result = res
	return ec.marshalNvehicle_supervision_photo2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_supervision_photo_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_supervision_photo_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleSupervisionPhotoAggregate(rctx, args["distinct_on"].([]model.VehicleSupervisionPhotoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleSupervisionPhotoOrderBy), args["where"].(*model.VehicleSupervisionPhotoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSupervisionPhotoAggregate)
	fc.Result = res
	return ec.marshalNvehicle_supervision_photo_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_supervision_photo_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_supervision_photo_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleSupervisionPhotoByPk(rctx, args["id"].(int64), args["supervision_photo_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSupervisionPhoto)
	fc.Result = res
	return ec.marshalOvehicle_supervision_photo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhoto(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Subscription_vehicle_info(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleInfo(rctx, args["distinct_on"].([]model.VehicleInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleInfoOrderBy), args["where"].(*model.VehicleInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.VehicleInfo)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNvehicle_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_vehicle_info_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_info_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleInfoAggregate(rctx, args["distinct_on"].([]model.VehicleInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleInfoOrderBy), args["where"].(*model.VehicleInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.VehicleInfoAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNvehicle_info_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_vehicle_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleInfoByPk(rctx, args["id"].(int64), args["vehicle_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.VehicleInfo)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOvehicle_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfo(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_JJ_VEHICLE(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_JJ_VEHICLE_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().JjVehicle(rctx, args["distinct_on"].([]model.JjVehicleSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.JjVehicleOrderBy), args["where"].(*model.JjVehicleBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.JjVehicle)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNJJ_VEHICLE2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_JJ_VEHICLE_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_JJ_VEHICLE_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().JjVehicleAggregate(rctx, args["distinct_on"].([]model.JjVehicleSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.JjVehicleOrderBy), args["where"].(*model.JjVehicleBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.JjVehicleAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNJJ_VEHICLE_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_JJ_VEHICLE_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_JJ_VEHICLE_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().JjVehicleByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.JjVehicle)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOJJ_VEHICLE2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicle(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_muck_truck_category_info(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_muck_truck_category_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().MuckTruckCategoryInfo(rctx, args["distinct_on"].([]model.MuckTruckCategoryInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckCategoryInfoOrderBy), args["where"].(*model.MuckTruckCategoryInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.MuckTruckCategoryInfo)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNmuck_truck_category_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_muck_truck_category_info_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_muck_truck_category_info_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().MuckTruckCategoryInfoAggregate(rctx, args["distinct_on"].([]model.MuckTruckCategoryInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckCategoryInfoOrderBy), args["where"].(*model.MuckTruckCategoryInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.MuckTruckCategoryInfoAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNmuck_truck_category_info_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_muck_truck_category_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_muck_truck_category_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().MuckTruckCategoryInfoByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.MuckTruckCategoryInfo)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOmuck_truck_category_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfo(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_muck_truck_info(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_muck_truck_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().MuckTruckInfo(rctx, args["distinct_on"].([]model.MuckTruckInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckInfoOrderBy), args["where"].(*model.MuckTruckInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.MuckTruckInfo)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNmuck_truck_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_muck_truck_info_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_muck_truck_info_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().MuckTruckInfoAggregate(rctx, args["distinct_on"].([]model.MuckTruckInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckInfoOrderBy), args["where"].(*model.MuckTruckInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.MuckTruckInfoAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNmuck_truck_info_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_muck_truck_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_muck_truck_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().MuckTruckInfoByPk(rctx, args["muck_truck_id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.MuckTruckInfo)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOmuck_truck_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfo(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_muck_truck_preview_number(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_muck_truck_preview_number_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().MuckTruckPreviewNumber(rctx, args["distinct_on"].([]model.MuckTruckPreviewNumberSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckPreviewNumberOrderBy), args["where"].(*model.MuckTruckPreviewNumberBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.MuckTruckPreviewNumber)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNmuck_truck_preview_number2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_muck_truck_preview_number_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_muck_truck_preview_number_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().MuckTruckPreviewNumberAggregate(rctx, args["distinct_on"].([]model.MuckTruckPreviewNumberSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckPreviewNumberOrderBy), args["where"].(*model.MuckTruckPreviewNumberBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.MuckTruckPreviewNumberAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNmuck_truck_preview_number_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_muck_truck_preview_number_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_muck_truck_preview_number_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().MuckTruckPreviewNumberByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.MuckTruckPreviewNumber)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOmuck_truck_preview_number2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumber(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_muck_truck_worker_id_card_orders(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_muck_truck_worker_id_card_orders_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().MuckTruckWorkerIDCardOrders(rctx, args["distinct_on"].([]model.MuckTruckWorkerIDCardOrdersSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckWorkerIDCardOrdersOrderBy), args["where"].(*model.MuckTruckWorkerIDCardOrdersBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.MuckTruckWorkerIDCardOrders)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNmuck_truck_worker_id_card_orders2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_muck_truck_worker_id_card_orders_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_muck_truck_worker_id_card_orders_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().MuckTruckWorkerIDCardOrdersAggregate(rctx, args["distinct_on"].([]model.MuckTruckWorkerIDCardOrdersSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckWorkerIDCardOrdersOrderBy), args["where"].(*model.MuckTruckWorkerIDCardOrdersBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.MuckTruckWorkerIDCardOrdersAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNmuck_truck_worker_id_card_orders_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_muck_truck_worker_id_card_orders_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_muck_truck_worker_id_card_orders_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().MuckTruckWorkerIDCardOrdersByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.MuckTruckWorkerIDCardOrders)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOmuck_truck_worker_id_card_orders2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrders(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_operating_vehicle_info(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_operating_vehicle_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().OperatingVehicleInfo(rctx, args["distinct_on"].([]model.OperatingVehicleInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.OperatingVehicleInfoOrderBy), args["where"].(*model.OperatingVehicleInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.OperatingVehicleInfo)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNoperating_vehicle_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_operating_vehicle_info_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_operating_vehicle_info_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().OperatingVehicleInfoAggregate(rctx, args["distinct_on"].([]model.OperatingVehicleInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.OperatingVehicleInfoOrderBy), args["where"].(*model.OperatingVehicleInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.OperatingVehicleInfoAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNoperating_vehicle_info_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_operating_vehicle_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_operating_vehicle_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().OperatingVehicleInfoByPk(rctx, args["operating_vehicle_id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.OperatingVehicleInfo)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOoperating_vehicle_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfo(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_owner_info(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_owner_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().OwnerInfo(rctx, args["distinct_on"].([]model.OwnerInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.OwnerInfoOrderBy), args["where"].(*model.OwnerInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.OwnerInfo)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNowner_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_owner_info_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_owner_info_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().OwnerInfoAggregate(rctx, args["distinct_on"].([]model.OwnerInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.OwnerInfoOrderBy), args["where"].(*model.OwnerInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.OwnerInfoAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNowner_info_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_owner_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_owner_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().OwnerInfoByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.OwnerInfo)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOowner_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfo(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_vehicle_info_change_log(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_info_change_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleInfoChangeLog(rctx, args["distinct_on"].([]model.VehicleInfoChangeLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleInfoChangeLogOrderBy), args["where"].(*model.VehicleInfoChangeLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.VehicleInfoChangeLog)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNvehicle_info_change_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_vehicle_info_change_log_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_info_change_log_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleInfoChangeLogAggregate(rctx, args["distinct_on"].([]model.VehicleInfoChangeLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleInfoChangeLogOrderBy), args["where"].(*model.VehicleInfoChangeLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.VehicleInfoChangeLogAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNvehicle_info_change_log_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_vehicle_info_change_log_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_info_change_log_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleInfoChangeLogByPk(rctx, args["id"].(int64), args["vehicle_info_change_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.VehicleInfoChangeLog)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOvehicle_info_change_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLog(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_vehicle_supervision_photo(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_supervision_photo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleSupervisionPhoto(rctx, args["distinct_on"].([]model.VehicleSupervisionPhotoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleSupervisionPhotoOrderBy), args["where"].(*model.VehicleSupervisionPhotoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.VehicleSupervisionPhoto)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNvehicle_supervision_photo2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_vehicle_supervision_photo_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_supervision_photo_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleSupervisionPhotoAggregate(rctx, args["distinct_on"].([]model.VehicleSupervisionPhotoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleSupervisionPhotoOrderBy), args["where"].(*model.VehicleSupervisionPhotoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.VehicleSupervisionPhotoAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNvehicle_supervision_photo_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_vehicle_supervision_photo_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_supervision_photo_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleSupervisionPhotoByPk(rctx, args["id"].(int64), args["supervision_photo_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.VehicleSupervisionPhoto)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOvehicle_supervision_photo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhoto(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_actual_owner_contact_phone(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualOwnerContactPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_actual_owner_id_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualOwnerIDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_actual_owner_id_photo(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualOwnerIDPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_actual_owner_name(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualOwnerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_annual_inspection_expiration_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnnualInspectionExpirationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_apply_inspection_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplyInspectionTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_axes_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AxesNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_blacklist_deadline(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistDeadline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_compulsory_insurance_policy_picture(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompulsoryInsurancePolicyPicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_create_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_create_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_driving_license_contact_phone(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLicenseContactPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_driving_license_id_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLicenseIDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_driving_liscense_owner_id_photo(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLiscenseOwnerIDPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_engine_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EngineNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_illegal_notice_number_endorsement(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalNoticeNumberEndorsement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_illegal_number_endorsement(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalNumberEndorsement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_incident_number_endorsement(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IncidentNumberEndorsement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_initial_registration_date(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InitialRegistrationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_insurance_expiry_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceExpiryTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_is_blacklist(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBlacklist, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_is_due_security_alarm_processing(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDueSecurityAlarmProcessing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_is_first_register(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFirstRegister, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_is_muck_office_audit(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsMuckOfficeAudit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_is_send_sms(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSendSms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_issue_date_of_quangong_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueDateOfQuangongNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_owner_id_photo(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerIDPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_processing_notes(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingNotes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_processing_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_processor(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Processor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_review_notes(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewNotes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_review_status(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_review_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_reviewer(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reviewer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_secondary_maintenance_expiry_date(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecondaryMaintenanceExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_secondary_maintenance_location(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecondaryMaintenanceLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_signing_acceptance_application_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SigningAcceptanceApplicationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_third_party_insurance_coverage(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThirdPartyInsuranceCoverage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_third_party_insurance_expiry_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThirdPartyInsuranceExpiryTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_third_party_insurance_policy_picture(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThirdPartyInsurancePolicyPicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_total_mass(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalMass, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_update_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_update_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_vehicle_description(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_vehicle_nature(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_vehicle_operating_certificate_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleOperatingCertificateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_vehicle_operating_certificate_photo(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleOperatingCertificatePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_vehicle_picture(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehiclePicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckCategoryInfoAggregateFields)
	fc.Result = res
	return ec.marshalOmuck_truck_category_info_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MuckTruckCategoryInfo)
	fc.Result = res
	return ec.marshalNmuck_truck_category_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckCategoryInfoAvgFields)
	fc.Result = res
	return ec.marshalOmuck_truck_category_info_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_muck_truck_category_info_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckCategoryInfoMaxFields)
	fc.Result = res
	return ec.marshalOmuck_truck_category_info_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckCategoryInfoMinFields)
	fc.Result = res
	return ec.marshalOmuck_truck_category_info_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckCategoryInfoStddevFields)
	fc.Result = res
	return ec.marshalOmuck_truck_category_info_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckCategoryInfoStddevPopFields)
	fc.Result = res
	return ec.marshalOmuck_truck_category_info_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckCategoryInfoStddevSampFields)
	fc.Result = res
	return ec.marshalOmuck_truck_category_info_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckCategoryInfoSumFields)
	fc.Result = res
	return ec.marshalOmuck_truck_category_info_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckCategoryInfoVarPopFields)
	fc.Result = res
	return ec.marshalOmuck_truck_category_info_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckCategoryInfoVarSampFields)
	fc.Result = res
	return ec.marshalOmuck_truck_category_info_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckCategoryInfoVarianceFields)
	fc.Result = res
	return ec.marshalOmuck_truck_category_info_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_avg_fields_axes_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AxesNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_avg_fields_total_mass(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalMass, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_avg_fields_vehicle_nature(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_actual_owner_contact_phone(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualOwnerContactPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_actual_owner_id_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualOwnerIDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_actual_owner_id_photo(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualOwnerIDPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_actual_owner_name(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualOwnerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_annual_inspection_expiration_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnnualInspectionExpirationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_apply_inspection_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplyInspectionTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_axes_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AxesNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_blacklist_deadline(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistDeadline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_compulsory_insurance_policy_picture(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompulsoryInsurancePolicyPicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_driving_license_contact_phone(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLicenseContactPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_driving_license_id_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLicenseIDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_driving_liscense_owner_id_photo(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLiscenseOwnerIDPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_engine_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EngineNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_illegal_notice_number_endorsement(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalNoticeNumberEndorsement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_illegal_number_endorsement(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalNumberEndorsement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_incident_number_endorsement(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IncidentNumberEndorsement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_initial_registration_date(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InitialRegistrationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_insurance_expiry_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceExpiryTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_issue_date_of_quangong_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueDateOfQuangongNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_owner_id_photo(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerIDPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_processing_notes(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingNotes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_processing_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_processor(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Processor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_review_notes(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewNotes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_review_status(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_review_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_reviewer(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reviewer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_secondary_maintenance_expiry_date(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecondaryMaintenanceExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_secondary_maintenance_location(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecondaryMaintenanceLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_signing_acceptance_application_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SigningAcceptanceApplicationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_third_party_insurance_coverage(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThirdPartyInsuranceCoverage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_third_party_insurance_expiry_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThirdPartyInsuranceExpiryTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_third_party_insurance_policy_picture(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThirdPartyInsurancePolicyPicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_total_mass(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalMass, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_vehicle_description(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_vehicle_nature(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_vehicle_operating_certificate_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleOperatingCertificateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_vehicle_operating_certificate_photo(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleOperatingCertificatePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_max_fields_vehicle_picture(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehiclePicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_actual_owner_contact_phone(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualOwnerContactPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_actual_owner_id_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualOwnerIDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_actual_owner_id_photo(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualOwnerIDPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_actual_owner_name(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualOwnerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_annual_inspection_expiration_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnnualInspectionExpirationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_apply_inspection_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplyInspectionTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_axes_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AxesNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_blacklist_deadline(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistDeadline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_compulsory_insurance_policy_picture(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompulsoryInsurancePolicyPicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_driving_license_contact_phone(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLicenseContactPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_driving_license_id_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLicenseIDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_driving_liscense_owner_id_photo(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLiscenseOwnerIDPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_engine_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EngineNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_illegal_notice_number_endorsement(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalNoticeNumberEndorsement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_illegal_number_endorsement(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IllegalNumberEndorsement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_incident_number_endorsement(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IncidentNumberEndorsement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_initial_registration_date(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InitialRegistrationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_insurance_expiry_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceExpiryTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_issue_date_of_quangong_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueDateOfQuangongNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_owner_id_photo(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerIDPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_processing_notes(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingNotes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_processing_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_processor(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Processor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_review_notes(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewNotes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_review_status(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_review_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_reviewer(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reviewer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_secondary_maintenance_expiry_date(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecondaryMaintenanceExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_secondary_maintenance_location(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecondaryMaintenanceLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_signing_acceptance_application_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SigningAcceptanceApplicationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_third_party_insurance_coverage(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThirdPartyInsuranceCoverage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_third_party_insurance_expiry_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThirdPartyInsuranceExpiryTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_third_party_insurance_policy_picture(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThirdPartyInsurancePolicyPicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_total_mass(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalMass, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_vehicle_description(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_vehicle_nature(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_vehicle_operating_certificate_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleOperatingCertificateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_vehicle_operating_certificate_photo(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleOperatingCertificatePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_min_fields_vehicle_picture(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehiclePicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MuckTruckCategoryInfo)
	fc.Result = res
	return ec.marshalNmuck_truck_category_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_stddev_fields_axes_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AxesNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_stddev_fields_total_mass(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalMass, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_stddev_fields_vehicle_nature(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_stddev_pop_fields_axes_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AxesNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_stddev_pop_fields_total_mass(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalMass, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_stddev_pop_fields_vehicle_nature(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_stddev_samp_fields_axes_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AxesNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_stddev_samp_fields_total_mass(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalMass, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_stddev_samp_fields_vehicle_nature(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_sum_fields_axes_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AxesNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_sum_fields_total_mass(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalMass, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_sum_fields_vehicle_nature(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_var_pop_fields_axes_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AxesNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_var_pop_fields_total_mass(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalMass, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_var_pop_fields_vehicle_nature(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_var_samp_fields_axes_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AxesNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_var_samp_fields_total_mass(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalMass, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_var_samp_fields_vehicle_nature(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_variance_fields_axes_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AxesNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_variance_fields_total_mass(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalMass, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_category_info_variance_fields_vehicle_nature(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckCategoryInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_category_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_area_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_create_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_create_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_expiry_date(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_fake_ip(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FakeIP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_is_reserve_library(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReserveLibrary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_load_category(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LoadCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_mobile_card_location(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MobileCardLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_muck_truck_type(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_registration_date(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_self_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelfNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_server_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_sim_card_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimCardNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_update_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_update_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckInfoAggregateFields)
	fc.Result = res
	return ec.marshalOmuck_truck_info_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MuckTruckInfo)
	fc.Result = res
	return ec.marshalNmuck_truck_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckInfoAvgFields)
	fc.Result = res
	return ec.marshalOmuck_truck_info_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_muck_truck_info_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckInfoMaxFields)
	fc.Result = res
	return ec.marshalOmuck_truck_info_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckInfoMinFields)
	fc.Result = res
	return ec.marshalOmuck_truck_info_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckInfoStddevFields)
	fc.Result = res
	return ec.marshalOmuck_truck_info_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckInfoStddevPopFields)
	fc.Result = res
	return ec.marshalOmuck_truck_info_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckInfoStddevSampFields)
	fc.Result = res
	return ec.marshalOmuck_truck_info_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckInfoSumFields)
	fc.Result = res
	return ec.marshalOmuck_truck_info_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckInfoVarPopFields)
	fc.Result = res
	return ec.marshalOmuck_truck_info_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckInfoVarSampFields)
	fc.Result = res
	return ec.marshalOmuck_truck_info_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckInfoVarianceFields)
	fc.Result = res
	return ec.marshalOmuck_truck_info_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_avg_fields_area_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_avg_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_avg_fields_muck_truck_type(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_avg_fields_server_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_max_fields_area_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_max_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_max_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_max_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_max_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_max_fields_expiry_date(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_max_fields_fake_ip(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FakeIP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_max_fields_load_category(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LoadCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_max_fields_mobile_card_location(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MobileCardLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_max_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_max_fields_muck_truck_type(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_max_fields_registration_date(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_max_fields_self_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelfNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_max_fields_server_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_max_fields_sim_card_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimCardNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_max_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_max_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_max_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_min_fields_area_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_min_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_min_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_min_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_min_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_min_fields_expiry_date(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_min_fields_fake_ip(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FakeIP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_min_fields_load_category(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LoadCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_min_fields_mobile_card_location(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MobileCardLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_min_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_min_fields_muck_truck_type(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_min_fields_registration_date(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_min_fields_self_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelfNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_min_fields_server_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_min_fields_sim_card_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimCardNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_min_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_min_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_min_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MuckTruckInfo)
	fc.Result = res
	return ec.marshalNmuck_truck_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_stddev_fields_area_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_stddev_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_stddev_fields_muck_truck_type(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_stddev_fields_server_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_stddev_pop_fields_area_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_stddev_pop_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_stddev_pop_fields_muck_truck_type(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_stddev_pop_fields_server_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_stddev_samp_fields_area_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_stddev_samp_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_stddev_samp_fields_muck_truck_type(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_stddev_samp_fields_server_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_sum_fields_area_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_sum_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_sum_fields_muck_truck_type(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_sum_fields_server_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_var_pop_fields_area_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_var_pop_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_var_pop_fields_muck_truck_type(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_var_pop_fields_server_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_var_samp_fields_area_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_var_samp_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_var_samp_fields_muck_truck_type(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_var_samp_fields_server_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_variance_fields_area_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_variance_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_variance_fields_muck_truck_type(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_info_variance_fields_server_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_confirm_status(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfirmStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_confirm_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfirmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_confirmor(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Confirmor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_contact_person(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactPerson, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_contact_phone(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_create_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_front_license_plate(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FrontLicensePlate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_initial_registration_date(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InitialRegistrationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_is_register_sale_order(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRegisterSaleOrder, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_is_review_automatically(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReviewAutomatically, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_marking_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MarkingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_original_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_production_status(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_production_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_production_times(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_rear_license_plate(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RearLicensePlate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_remarks(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_side_license_plate(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SideLicensePlate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_svn_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SvnNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_unlawful_violation_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnlawfulViolationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_update_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_update_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_work_number_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkNumberPlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPreviewNumberAggregateFields)
	fc.Result = res
	return ec.marshalOmuck_truck_preview_number_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MuckTruckPreviewNumber)
	fc.Result = res
	return ec.marshalNmuck_truck_preview_number2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPreviewNumberAvgFields)
	fc.Result = res
	return ec.marshalOmuck_truck_preview_number_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_muck_truck_preview_number_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPreviewNumberMaxFields)
	fc.Result = res
	return ec.marshalOmuck_truck_preview_number_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPreviewNumberMinFields)
	fc.Result = res
	return ec.marshalOmuck_truck_preview_number_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPreviewNumberStddevFields)
	fc.Result = res
	return ec.marshalOmuck_truck_preview_number_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPreviewNumberStddevPopFields)
	fc.Result = res
	return ec.marshalOmuck_truck_preview_number_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPreviewNumberStddevSampFields)
	fc.Result = res
	return ec.marshalOmuck_truck_preview_number_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPreviewNumberSumFields)
	fc.Result = res
	return ec.marshalOmuck_truck_preview_number_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPreviewNumberVarPopFields)
	fc.Result = res
	return ec.marshalOmuck_truck_preview_number_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPreviewNumberVarSampFields)
	fc.Result = res
	return ec.marshalOmuck_truck_preview_number_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPreviewNumberVarianceFields)
	fc.Result = res
	return ec.marshalOmuck_truck_preview_number_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_avg_fields_confirm_status(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfirmStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_avg_fields_production_status(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_avg_fields_production_times(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_avg_fields_unlawful_violation_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnlawfulViolationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_max_fields_confirm_status(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfirmStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_max_fields_confirm_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfirmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_max_fields_confirmor(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Confirmor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_max_fields_contact_person(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactPerson, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_max_fields_contact_phone(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_max_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_max_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_max_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_max_fields_front_license_plate(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FrontLicensePlate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_max_fields_initial_registration_date(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InitialRegistrationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_max_fields_marking_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MarkingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_max_fields_original_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_max_fields_production_status(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_max_fields_production_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_max_fields_production_times(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_max_fields_rear_license_plate(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RearLicensePlate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_max_fields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_max_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_max_fields_side_license_plate(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SideLicensePlate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_max_fields_svn_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SvnNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_max_fields_unlawful_violation_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnlawfulViolationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_max_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_max_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_max_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_max_fields_work_number_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkNumberPlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_min_fields_confirm_status(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfirmStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_min_fields_confirm_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfirmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_min_fields_confirmor(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Confirmor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_min_fields_contact_person(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactPerson, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_min_fields_contact_phone(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_min_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_min_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_min_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_min_fields_front_license_plate(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FrontLicensePlate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_min_fields_initial_registration_date(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InitialRegistrationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_min_fields_marking_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MarkingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_min_fields_original_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_min_fields_production_status(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_min_fields_production_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_min_fields_production_times(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_min_fields_rear_license_plate(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RearLicensePlate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_min_fields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_min_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_min_fields_side_license_plate(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SideLicensePlate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_min_fields_svn_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SvnNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_min_fields_unlawful_violation_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnlawfulViolationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_min_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_min_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_min_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_min_fields_work_number_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkNumberPlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MuckTruckPreviewNumber)
	fc.Result = res
	return ec.marshalNmuck_truck_preview_number2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_stddev_fields_confirm_status(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfirmStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_stddev_fields_production_status(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_stddev_fields_production_times(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_stddev_fields_unlawful_violation_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnlawfulViolationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_stddev_pop_fields_confirm_status(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfirmStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_stddev_pop_fields_production_status(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_stddev_pop_fields_production_times(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_stddev_pop_fields_unlawful_violation_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnlawfulViolationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_stddev_samp_fields_confirm_status(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfirmStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_stddev_samp_fields_production_status(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_stddev_samp_fields_production_times(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_stddev_samp_fields_unlawful_violation_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnlawfulViolationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_sum_fields_confirm_status(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfirmStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_sum_fields_production_status(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_sum_fields_production_times(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_sum_fields_unlawful_violation_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnlawfulViolationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_var_pop_fields_confirm_status(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfirmStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_var_pop_fields_production_status(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_var_pop_fields_production_times(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_var_pop_fields_unlawful_violation_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnlawfulViolationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_var_samp_fields_confirm_status(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfirmStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_var_samp_fields_production_status(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_var_samp_fields_production_times(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_var_samp_fields_unlawful_violation_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnlawfulViolationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_variance_fields_confirm_status(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfirmStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_variance_fields_production_status(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_variance_fields_production_times(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_preview_number_variance_fields_unlawful_violation_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPreviewNumberVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_preview_number_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnlawfulViolationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_create_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrders) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_create_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrders) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrders) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrders) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrders) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_preview_number_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrders) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewNumberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_update_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrders) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_update_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrders) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrders) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckWorkerIDCardOrdersAggregateFields)
	fc.Result = res
	return ec.marshalOmuck_truck_worker_id_card_orders_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MuckTruckWorkerIDCardOrders)
	fc.Result = res
	return ec.marshalNmuck_truck_worker_id_card_orders2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckWorkerIDCardOrdersAvgFields)
	fc.Result = res
	return ec.marshalOmuck_truck_worker_id_card_orders_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_muck_truck_worker_id_card_orders_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckWorkerIDCardOrdersMaxFields)
	fc.Result = res
	return ec.marshalOmuck_truck_worker_id_card_orders_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckWorkerIDCardOrdersMinFields)
	fc.Result = res
	return ec.marshalOmuck_truck_worker_id_card_orders_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckWorkerIDCardOrdersStddevFields)
	fc.Result = res
	return ec.marshalOmuck_truck_worker_id_card_orders_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckWorkerIDCardOrdersStddevPopFields)
	fc.Result = res
	return ec.marshalOmuck_truck_worker_id_card_orders_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckWorkerIDCardOrdersStddevSampFields)
	fc.Result = res
	return ec.marshalOmuck_truck_worker_id_card_orders_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckWorkerIDCardOrdersSumFields)
	fc.Result = res
	return ec.marshalOmuck_truck_worker_id_card_orders_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckWorkerIDCardOrdersVarPopFields)
	fc.Result = res
	return ec.marshalOmuck_truck_worker_id_card_orders_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckWorkerIDCardOrdersVarSampFields)
	fc.Result = res
	return ec.marshalOmuck_truck_worker_id_card_orders_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckWorkerIDCardOrdersVarianceFields)
	fc.Result = res
	return ec.marshalOmuck_truck_worker_id_card_orders_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_avg_fields_preview_number_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewNumberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_max_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_max_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_max_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_max_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_max_fields_preview_number_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewNumberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_max_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_max_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_max_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_min_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_min_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_min_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_min_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_min_fields_preview_number_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewNumberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_min_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_min_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_min_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MuckTruckWorkerIDCardOrders)
	fc.Result = res
	return ec.marshalNmuck_truck_worker_id_card_orders2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_stddev_fields_preview_number_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewNumberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_stddev_pop_fields_preview_number_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewNumberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_stddev_samp_fields_preview_number_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewNumberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_sum_fields_preview_number_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewNumberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_var_pop_fields_preview_number_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewNumberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_var_samp_fields_preview_number_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewNumberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _muck_truck_worker_id_card_orders_variance_fields_preview_number_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckWorkerIDCardOrdersVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "muck_truck_worker_id_card_orders_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewNumberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_administrative_region(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdministrativeRegion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_agent(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Agent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_contact_number(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_contract_time(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_create_at(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_create_by(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_driving_license_owner(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLicenseOwner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_first_online_time(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstOnlineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_installation_time(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstallationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_is_BD(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_is_active(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_is_applay_terminal_installation(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsApplayTerminalInstallation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_is_block(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBlock, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_is_engineering_vehicle(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEngineeringVehicle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_is_function_ok(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFunctionOk, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_is_in_operating_system(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInOperatingSystem, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_is_in_upload_platform(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInUploadPlatform, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_is_need_supervise(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsNeedSupervise, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_is_supervise(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSupervise, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_last_binding_terminal_time(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastBindingTerminalTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_license_plate_photo(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlatePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_muck_truck_type(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_other_photo(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_platform(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Platform, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_position_db_id(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PositionDbID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_scrap_reason(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScrapReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_scrap_time(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScrapTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_scrap_time_check(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScrapTimeCheck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_serial_number(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SerialNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_service_expiration_time(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceExpirationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_speed_mode_status(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedModeStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_speed_mode_status_time(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedModeStatusTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_temporary_library(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TemporaryLibrary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_temporary_transport_bureau(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TemporaryTransportBureau, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_update_at(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_update_by(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OperatingVehicleInfoAggregateFields)
	fc.Result = res
	return ec.marshalOoperating_vehicle_info_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.OperatingVehicleInfo)
	fc.Result = res
	return ec.marshalNoperating_vehicle_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OperatingVehicleInfoAvgFields)
	fc.Result = res
	return ec.marshalOoperating_vehicle_info_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_operating_vehicle_info_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OperatingVehicleInfoMaxFields)
	fc.Result = res
	return ec.marshalOoperating_vehicle_info_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OperatingVehicleInfoMinFields)
	fc.Result = res
	return ec.marshalOoperating_vehicle_info_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OperatingVehicleInfoStddevFields)
	fc.Result = res
	return ec.marshalOoperating_vehicle_info_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OperatingVehicleInfoStddevPopFields)
	fc.Result = res
	return ec.marshalOoperating_vehicle_info_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OperatingVehicleInfoStddevSampFields)
	fc.Result = res
	return ec.marshalOoperating_vehicle_info_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OperatingVehicleInfoSumFields)
	fc.Result = res
	return ec.marshalOoperating_vehicle_info_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OperatingVehicleInfoVarPopFields)
	fc.Result = res
	return ec.marshalOoperating_vehicle_info_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OperatingVehicleInfoVarSampFields)
	fc.Result = res
	return ec.marshalOoperating_vehicle_info_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OperatingVehicleInfoVarianceFields)
	fc.Result = res
	return ec.marshalOoperating_vehicle_info_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_avg_fields_muck_truck_type(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_avg_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_avg_fields_platform(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Platform, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_avg_fields_scrap_time_check(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScrapTimeCheck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_avg_fields_temporary_library(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TemporaryLibrary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_avg_fields_temporary_transport_bureau(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TemporaryTransportBureau, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_administrative_region(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdministrativeRegion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_agent(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Agent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_contact_number(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_contract_time(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_driving_license_owner(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLicenseOwner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_first_online_time(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstOnlineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_installation_time(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstallationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_last_binding_terminal_time(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastBindingTerminalTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_license_plate_photo(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlatePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_muck_truck_type(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_other_photo(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_platform(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Platform, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_position_db_id(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PositionDbID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_scrap_reason(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScrapReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_scrap_time(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScrapTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_scrap_time_check(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScrapTimeCheck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_serial_number(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SerialNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_service_expiration_time(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceExpirationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_speed_mode_status(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedModeStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_speed_mode_status_time(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedModeStatusTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_temporary_library(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TemporaryLibrary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_temporary_transport_bureau(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TemporaryTransportBureau, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_max_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_administrative_region(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdministrativeRegion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_agent(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Agent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_contact_number(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_contract_time(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_driving_license_owner(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLicenseOwner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_first_online_time(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstOnlineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_installation_time(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstallationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_last_binding_terminal_time(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastBindingTerminalTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_license_plate_photo(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlatePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_muck_truck_type(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_other_photo(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_platform(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Platform, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_position_db_id(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PositionDbID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_scrap_reason(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScrapReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_scrap_time(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScrapTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_scrap_time_check(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScrapTimeCheck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_serial_number(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SerialNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_service_expiration_time(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceExpirationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_speed_mode_status(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedModeStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_speed_mode_status_time(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedModeStatusTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_temporary_library(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TemporaryLibrary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_temporary_transport_bureau(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TemporaryTransportBureau, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_min_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.OperatingVehicleInfo)
	fc.Result = res
	return ec.marshalNoperating_vehicle_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_stddev_fields_muck_truck_type(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_stddev_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_stddev_fields_platform(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Platform, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_stddev_fields_scrap_time_check(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScrapTimeCheck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_stddev_fields_temporary_library(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TemporaryLibrary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_stddev_fields_temporary_transport_bureau(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TemporaryTransportBureau, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_stddev_pop_fields_muck_truck_type(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_stddev_pop_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_stddev_pop_fields_platform(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Platform, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_stddev_pop_fields_scrap_time_check(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScrapTimeCheck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_stddev_pop_fields_temporary_library(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TemporaryLibrary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_stddev_pop_fields_temporary_transport_bureau(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TemporaryTransportBureau, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_stddev_samp_fields_muck_truck_type(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_stddev_samp_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_stddev_samp_fields_platform(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Platform, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_stddev_samp_fields_scrap_time_check(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScrapTimeCheck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_stddev_samp_fields_temporary_library(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TemporaryLibrary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_stddev_samp_fields_temporary_transport_bureau(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TemporaryTransportBureau, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_sum_fields_muck_truck_type(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_sum_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_sum_fields_platform(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Platform, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_sum_fields_scrap_time_check(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScrapTimeCheck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_sum_fields_temporary_library(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TemporaryLibrary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_sum_fields_temporary_transport_bureau(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TemporaryTransportBureau, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_var_pop_fields_muck_truck_type(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_var_pop_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_var_pop_fields_platform(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Platform, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_var_pop_fields_scrap_time_check(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScrapTimeCheck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_var_pop_fields_temporary_library(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TemporaryLibrary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_var_pop_fields_temporary_transport_bureau(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TemporaryTransportBureau, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_var_samp_fields_muck_truck_type(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_var_samp_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_var_samp_fields_platform(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Platform, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_var_samp_fields_scrap_time_check(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScrapTimeCheck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_var_samp_fields_temporary_library(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TemporaryLibrary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_var_samp_fields_temporary_transport_bureau(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TemporaryTransportBureau, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_variance_fields_muck_truck_type(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_variance_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_variance_fields_platform(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Platform, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_variance_fields_scrap_time_check(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScrapTimeCheck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_variance_fields_temporary_library(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TemporaryLibrary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _operating_vehicle_info_variance_fields_temporary_transport_bureau(ctx context.Context, field graphql.CollectedField, obj *model.OperatingVehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "operating_vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TemporaryTransportBureau, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_address(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_agent(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Agent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_cellphone(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cellphone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_create_at(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_create_by(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_department_id(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_email(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_expiry_date(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_id(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_id_number(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_name(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_operator(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_owner_id(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_remarks(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_sex(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_telephone(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_update_at(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_update_by(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OwnerInfoAggregateFields)
	fc.Result = res
	return ec.marshalOowner_info_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.OwnerInfo)
	fc.Result = res
	return ec.marshalNowner_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OwnerInfoAvgFields)
	fc.Result = res
	return ec.marshalOowner_info_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_owner_info_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OwnerInfoMaxFields)
	fc.Result = res
	return ec.marshalOowner_info_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OwnerInfoMinFields)
	fc.Result = res
	return ec.marshalOowner_info_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OwnerInfoStddevFields)
	fc.Result = res
	return ec.marshalOowner_info_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OwnerInfoStddevPopFields)
	fc.Result = res
	return ec.marshalOowner_info_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OwnerInfoStddevSampFields)
	fc.Result = res
	return ec.marshalOowner_info_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OwnerInfoSumFields)
	fc.Result = res
	return ec.marshalOowner_info_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OwnerInfoVarPopFields)
	fc.Result = res
	return ec.marshalOowner_info_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OwnerInfoVarSampFields)
	fc.Result = res
	return ec.marshalOowner_info_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OwnerInfoVarianceFields)
	fc.Result = res
	return ec.marshalOowner_info_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_avg_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_max_fields_address(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_max_fields_agent(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Agent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_max_fields_cellphone(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cellphone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_max_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_max_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_max_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_max_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_max_fields_department_id(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_max_fields_email(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_max_fields_expiry_date(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_max_fields_id_number(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_max_fields_name(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_max_fields_operator(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_max_fields_owner_id(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_max_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_max_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_max_fields_telephone(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_max_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_max_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_min_fields_address(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_min_fields_agent(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Agent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_min_fields_cellphone(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cellphone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_min_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_min_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_min_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_min_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_min_fields_department_id(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_min_fields_email(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_min_fields_expiry_date(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_min_fields_id_number(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_min_fields_name(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_min_fields_operator(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_min_fields_owner_id(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_min_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_min_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_min_fields_telephone(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_min_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_min_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.OwnerInfo)
	fc.Result = res
	return ec.marshalNowner_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_stddev_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_stddev_pop_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_stddev_samp_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_sum_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_var_pop_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_var_samp_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _owner_info_variance_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.OwnerInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "owner_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_car_rental_price(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarRentalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_check_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_create_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNtimestamp2string(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_create_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_department_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_driving_licensee_pic(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLicenseePic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_inspection_date(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InspectionDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_insurance_company(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_insurance_date(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_is_active(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_is_apply_install_terminal(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsApplyInstallTerminal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_is_complete(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsComplete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_is_import(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsImport, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_is_input(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInput, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_is_upload_province(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsUploadProvince, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_operating_route(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingRoute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_owner(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_record_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_record_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_remark_in(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemarkIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_remarks(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_retirement_date(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RetirementDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_road_transport_license_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadTransportLicenseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_terminal_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerminalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_update_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_update_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_use_nature(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_vehicle_brand(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleBrand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_vehicle_displacement(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDisplacement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_vehicle_identification_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleIdentificationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_vehicle_maintenances(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleMaintenances, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalO_jsonb2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_vehicle_manager(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleManager, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_vehicle_manager_id_card(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleManagerIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_vehicle_manager_phone(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleManagerPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_vehicle_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoAggregateFields)
	fc.Result = res
	return ec.marshalOvehicle_info_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleInfo)
	fc.Result = res
	return ec.marshalNvehicle_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoAvgFields)
	fc.Result = res
	return ec.marshalOvehicle_info_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_vehicle_info_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoMaxFields)
	fc.Result = res
	return ec.marshalOvehicle_info_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoMinFields)
	fc.Result = res
	return ec.marshalOvehicle_info_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoStddevFields)
	fc.Result = res
	return ec.marshalOvehicle_info_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoStddevPopFields)
	fc.Result = res
	return ec.marshalOvehicle_info_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoStddevSampFields)
	fc.Result = res
	return ec.marshalOvehicle_info_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoSumFields)
	fc.Result = res
	return ec.marshalOvehicle_info_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoVarPopFields)
	fc.Result = res
	return ec.marshalOvehicle_info_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoVarSampFields)
	fc.Result = res
	return ec.marshalOvehicle_info_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoVarianceFields)
	fc.Result = res
	return ec.marshalOvehicle_info_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_car_rental_price(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarRentalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_insurance_company(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_vehicle_brand(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleBrand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_vehicle_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_car_rental_price(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarRentalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_check_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_create_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNtimestamp2string(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_create_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_department_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_driving_licensee_pic(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLicenseePic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_inspection_date(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InspectionDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_insurance_company(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_insurance_date(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_is_active(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_is_apply_install_terminal(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsApplyInstallTerminal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_is_complete(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsComplete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_is_import(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsImport, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_is_input(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInput, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_is_upload_province(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsUploadProvince, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_operating_route(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingRoute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_owner(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_record_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_record_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_remark_in(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemarkIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_remarks(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_retirement_date(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RetirementDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_road_transport_license_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadTransportLicenseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_terminal_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerminalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_update_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_update_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_use_nature(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_vehicle_brand(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleBrand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_vehicle_displacement(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDisplacement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_vehicle_identification_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleIdentificationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_vehicle_info_change_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleInfoChangeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_vehicle_maintenances(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleMaintenances, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalO_jsonb2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_vehicle_manager(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleManager, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_vehicle_manager_id_card(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleManagerIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_vehicle_manager_phone(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleManagerPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_vehicle_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoChangeLogAggregateFields)
	fc.Result = res
	return ec.marshalOvehicle_info_change_log_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleInfoChangeLog)
	fc.Result = res
	return ec.marshalNvehicle_info_change_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoChangeLogAvgFields)
	fc.Result = res
	return ec.marshalOvehicle_info_change_log_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_vehicle_info_change_log_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoChangeLogMaxFields)
	fc.Result = res
	return ec.marshalOvehicle_info_change_log_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoChangeLogMinFields)
	fc.Result = res
	return ec.marshalOvehicle_info_change_log_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoChangeLogStddevFields)
	fc.Result = res
	return ec.marshalOvehicle_info_change_log_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoChangeLogStddevPopFields)
	fc.Result = res
	return ec.marshalOvehicle_info_change_log_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoChangeLogStddevSampFields)
	fc.Result = res
	return ec.marshalOvehicle_info_change_log_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoChangeLogSumFields)
	fc.Result = res
	return ec.marshalOvehicle_info_change_log_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoChangeLogVarPopFields)
	fc.Result = res
	return ec.marshalOvehicle_info_change_log_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoChangeLogVarSampFields)
	fc.Result = res
	return ec.marshalOvehicle_info_change_log_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoChangeLogVarianceFields)
	fc.Result = res
	return ec.marshalOvehicle_info_change_log_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_avg_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_avg_fields_car_rental_price(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarRentalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_avg_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_avg_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_avg_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_avg_fields_insurance_company(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_avg_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_avg_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_avg_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_avg_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_avg_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_avg_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_avg_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_avg_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_avg_fields_vehicle_brand(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleBrand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_avg_fields_vehicle_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_avg_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_car_rental_price(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarRentalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_department_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_driving_licensee_pic(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLicenseePic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_inspection_date(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InspectionDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_insurance_company(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_insurance_date(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_operating_route(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingRoute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_owner(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_record_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_record_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_remark_in(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemarkIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_retirement_date(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RetirementDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_road_transport_license_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadTransportLicenseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_terminal_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerminalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_use_nature(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_vehicle_brand(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleBrand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_vehicle_displacement(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDisplacement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_vehicle_identification_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleIdentificationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_vehicle_info_change_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleInfoChangeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_vehicle_manager(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleManager, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_vehicle_manager_id_card(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleManagerIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_vehicle_manager_phone(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleManagerPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_vehicle_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_max_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_car_rental_price(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarRentalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_department_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_driving_licensee_pic(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLicenseePic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_inspection_date(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InspectionDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_insurance_company(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_insurance_date(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_operating_route(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingRoute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_owner(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_record_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_record_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_remark_in(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemarkIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_retirement_date(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RetirementDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_road_transport_license_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadTransportLicenseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_terminal_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerminalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_use_nature(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_vehicle_brand(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleBrand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_vehicle_displacement(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDisplacement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_vehicle_identification_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleIdentificationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_vehicle_info_change_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleInfoChangeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_vehicle_manager(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleManager, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_vehicle_manager_id_card(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleManagerIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_vehicle_manager_phone(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleManagerPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_vehicle_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_min_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleInfoChangeLog)
	fc.Result = res
	return ec.marshalNvehicle_info_change_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_fields_car_rental_price(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarRentalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_fields_insurance_company(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_fields_vehicle_brand(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleBrand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_fields_vehicle_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_pop_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_pop_fields_car_rental_price(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarRentalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_pop_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_pop_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_pop_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_pop_fields_insurance_company(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_pop_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_pop_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_pop_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_pop_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_pop_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_pop_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_pop_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_pop_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_pop_fields_vehicle_brand(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleBrand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_pop_fields_vehicle_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_pop_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_samp_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_samp_fields_car_rental_price(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarRentalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_samp_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_samp_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_samp_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_samp_fields_insurance_company(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_samp_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_samp_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_samp_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_samp_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_samp_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_samp_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_samp_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_samp_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_samp_fields_vehicle_brand(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleBrand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_samp_fields_vehicle_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_stddev_samp_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_sum_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_sum_fields_car_rental_price(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarRentalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_sum_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_sum_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_sum_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_sum_fields_insurance_company(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_sum_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_sum_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_sum_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_sum_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_sum_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_sum_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_sum_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_sum_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_sum_fields_vehicle_brand(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleBrand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_sum_fields_vehicle_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_sum_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_pop_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_pop_fields_car_rental_price(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarRentalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_pop_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_pop_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_pop_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_pop_fields_insurance_company(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_pop_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_pop_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_pop_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_pop_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_pop_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_pop_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_pop_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_pop_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_pop_fields_vehicle_brand(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleBrand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_pop_fields_vehicle_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_pop_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_samp_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_samp_fields_car_rental_price(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarRentalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_samp_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_samp_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_samp_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_samp_fields_insurance_company(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_samp_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_samp_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_samp_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_samp_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_samp_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_samp_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_samp_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_samp_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_samp_fields_vehicle_brand(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleBrand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_samp_fields_vehicle_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_var_samp_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_variance_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_variance_fields_car_rental_price(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarRentalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_variance_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_variance_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_variance_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_variance_fields_insurance_company(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_variance_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_variance_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_variance_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_variance_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_variance_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_variance_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_variance_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_variance_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_variance_fields_vehicle_brand(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleBrand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_variance_fields_vehicle_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_change_log_variance_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoChangeLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_change_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_car_rental_price(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarRentalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_department_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_driving_licensee_pic(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLicenseePic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_inspection_date(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InspectionDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_insurance_company(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_insurance_date(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_operating_route(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingRoute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_owner(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_record_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_record_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_remark_in(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemarkIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_retirement_date(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RetirementDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_road_transport_license_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadTransportLicenseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_terminal_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerminalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_use_nature(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_vehicle_brand(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleBrand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_vehicle_displacement(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDisplacement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_vehicle_identification_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleIdentificationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_vehicle_manager(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleManager, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_vehicle_manager_id_card(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleManagerIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_vehicle_manager_phone(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleManagerPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_vehicle_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_car_rental_price(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarRentalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_department_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_driving_licensee_pic(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLicenseePic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_inspection_date(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InspectionDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_insurance_company(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_insurance_date(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_operating_route(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingRoute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_owner(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_record_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_record_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_remark_in(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemarkIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_retirement_date(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RetirementDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_road_transport_license_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadTransportLicenseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_terminal_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerminalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOtimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_use_nature(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_vehicle_brand(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleBrand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_vehicle_displacement(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDisplacement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_vehicle_identification_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleIdentificationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_vehicle_manager(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleManager, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_vehicle_manager_id_card(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleManagerIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_vehicle_manager_phone(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleManagerPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_vehicle_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleInfo)
	fc.Result = res
	return ec.marshalNvehicle_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_car_rental_price(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarRentalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_insurance_company(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_vehicle_brand(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleBrand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_vehicle_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_car_rental_price(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarRentalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_insurance_company(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_vehicle_brand(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleBrand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_vehicle_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_car_rental_price(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarRentalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_insurance_company(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_vehicle_brand(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleBrand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_vehicle_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_car_rental_price(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarRentalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_insurance_company(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_vehicle_brand(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleBrand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_vehicle_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_car_rental_price(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarRentalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_insurance_company(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_vehicle_brand(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleBrand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_vehicle_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_car_rental_price(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarRentalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_insurance_company(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_vehicle_brand(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleBrand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_vehicle_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_car_rental_price(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarRentalPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_insurance_company(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsuranceCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_vehicle_brand(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleBrand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_vehicle_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_IMEI(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imei, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_monitoring_pic_address(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringPicAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_monitoring_pic_name(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringPicName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_monitoring_pic_upload_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringPicUploadTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_photo_condition(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhotoCondition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_sim_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_supervision_photo_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_update_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSupervisionPhotoAggregateFields)
	fc.Result = res
	return ec.marshalOvehicle_supervision_photo_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleSupervisionPhoto)
	fc.Result = res
	return ec.marshalNvehicle_supervision_photo2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSupervisionPhotoAvgFields)
	fc.Result = res
	return ec.marshalOvehicle_supervision_photo_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_vehicle_supervision_photo_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSupervisionPhotoMaxFields)
	fc.Result = res
	return ec.marshalOvehicle_supervision_photo_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSupervisionPhotoMinFields)
	fc.Result = res
	return ec.marshalOvehicle_supervision_photo_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSupervisionPhotoStddevFields)
	fc.Result = res
	return ec.marshalOvehicle_supervision_photo_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSupervisionPhotoStddevPopFields)
	fc.Result = res
	return ec.marshalOvehicle_supervision_photo_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSupervisionPhotoStddevSampFields)
	fc.Result = res
	return ec.marshalOvehicle_supervision_photo_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSupervisionPhotoSumFields)
	fc.Result = res
	return ec.marshalOvehicle_supervision_photo_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSupervisionPhotoVarPopFields)
	fc.Result = res
	return ec.marshalOvehicle_supervision_photo_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSupervisionPhotoVarSampFields)
	fc.Result = res
	return ec.marshalOvehicle_supervision_photo_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSupervisionPhotoVarianceFields)
	fc.Result = res
	return ec.marshalOvehicle_supervision_photo_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_avg_fields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_max_fields_IMEI(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imei, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_max_fields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_max_fields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_max_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_max_fields_monitoring_pic_address(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringPicAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_max_fields_monitoring_pic_name(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringPicName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_max_fields_monitoring_pic_upload_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringPicUploadTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_max_fields_photo_condition(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhotoCondition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_max_fields_sim_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_max_fields_supervision_photo_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_max_fields_update_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_max_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_min_fields_IMEI(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imei, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_min_fields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_min_fields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_min_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_min_fields_monitoring_pic_address(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringPicAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_min_fields_monitoring_pic_name(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringPicName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_min_fields_monitoring_pic_upload_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringPicUploadTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_min_fields_photo_condition(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhotoCondition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_min_fields_sim_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_min_fields_supervision_photo_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_min_fields_update_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_min_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleSupervisionPhoto)
	fc.Result = res
	return ec.marshalNvehicle_supervision_photo2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_stddev_fields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_stddev_pop_fields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_stddev_samp_fields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_sum_fields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_var_pop_fields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_var_samp_fields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_variance_fields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_supervision_photo_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSupervisionPhotoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_supervision_photo_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBoolean_comparison_exp(ctx context.Context, obj interface{}) (model1.BooleanComparisonExp, error) {
	var it model1.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInt_comparison_exp(ctx context.Context, obj interface{}) (model1.IntComparisonExp, error) {
	var it model1.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJJ_VEHICLE_aggregate_order_by(ctx context.Context, obj interface{}) (model.JjVehicleAggregateOrderBy, error) {
	var it model.JjVehicleAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOJJ_VEHICLE_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOJJ_VEHICLE_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOJJ_VEHICLE_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOJJ_VEHICLE_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOJJ_VEHICLE_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOJJ_VEHICLE_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOJJ_VEHICLE_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOJJ_VEHICLE_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOJJ_VEHICLE_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOJJ_VEHICLE_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJJ_VEHICLE_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.JjVehicleArrRelInsertInput, error) {
	var it model.JjVehicleArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNJJ_VEHICLE_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOJJ_VEHICLE_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJJ_VEHICLE_avg_order_by(ctx context.Context, obj interface{}) (model.JjVehicleAvgOrderBy, error) {
	var it model.JjVehicleAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "IS_DETELED":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IS_DETELED"))
			it.IsDeteled, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZT"))
			it.Zt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZZL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZZL"))
			it.Zzl, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJJ_VEHICLE_bool_exp(ctx context.Context, obj interface{}) (model.JjVehicleBoolExp, error) {
	var it model.JjVehicleBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "CCDJRQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CCDJRQ"))
			it.Ccdjrq, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "CLLX":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CLLX"))
			it.Cllx, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "CLSBDH":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CLSBDH"))
			it.Clsbdh, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "COUNTY":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("COUNTY"))
			it.County, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "DJRQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DJRQ"))
			it.Djrq, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "FPRQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FPRQ"))
			it.Fprq, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "GXRQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GXRQ"))
			it.Gxrq, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "HPHM":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("HPHM"))
			it.Hphm, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "HPZL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("HPZL"))
			it.Hpzl, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "IS_DETELED":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IS_DETELED"))
			it.IsDeteled, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "LXDH":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("LXDH"))
			it.Lxdh, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "LXDZ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("LXDZ"))
			it.Lxdz, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "OTHER":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OTHER"))
			it.Other, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "QZBFQZ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("QZBFQZ"))
			it.Qzbfqz, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "SJHM":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SJHM"))
			it.Sjhm, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "SYR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SYR"))
			it.Syr, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "SYXZ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SYXZ"))
			it.Syxz, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "UPDATETIME":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("UPDATETIME"))
			it.Updatetime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "VEHMONTYPE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("VEHMONTYPE"))
			it.Vehmontype, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "XH":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("XH"))
			it.Xh, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "YXQZ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("YXQZ"))
			it.Yxqz, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZT"))
			it.Zt, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZZL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZZL"))
			it.Zzl, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOJJ_VEHICLE_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOJJ_VEHICLE_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOJJ_VEHICLE_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJJ_VEHICLE_inc_input(ctx context.Context, obj interface{}) (model.JjVehicleIncInput, error) {
	var it model.JjVehicleIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "IS_DETELED":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IS_DETELED"))
			it.IsDeteled, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZT"))
			it.Zt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZZL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZZL"))
			it.Zzl, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJJ_VEHICLE_insert_input(ctx context.Context, obj interface{}) (model.JjVehicleInsertInput, error) {
	var it model.JjVehicleInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "CCDJRQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CCDJRQ"))
			it.Ccdjrq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "CLLX":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CLLX"))
			it.Cllx, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "CLSBDH":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CLSBDH"))
			it.Clsbdh, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "COUNTY":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("COUNTY"))
			it.County, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "DJRQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DJRQ"))
			it.Djrq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "FPRQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FPRQ"))
			it.Fprq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "GXRQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GXRQ"))
			it.Gxrq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "HPHM":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("HPHM"))
			it.Hphm, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "HPZL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("HPZL"))
			it.Hpzl, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "IS_DETELED":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IS_DETELED"))
			it.IsDeteled, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "LXDH":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("LXDH"))
			it.Lxdh, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "LXDZ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("LXDZ"))
			it.Lxdz, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "OTHER":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OTHER"))
			it.Other, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "QZBFQZ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("QZBFQZ"))
			it.Qzbfqz, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "SJHM":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SJHM"))
			it.Sjhm, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "SYR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SYR"))
			it.Syr, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "SYXZ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SYXZ"))
			it.Syxz, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "UPDATETIME":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("UPDATETIME"))
			it.Updatetime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "VEHMONTYPE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("VEHMONTYPE"))
			it.Vehmontype, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "XH":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("XH"))
			it.Xh, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "YXQZ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("YXQZ"))
			it.Yxqz, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZT"))
			it.Zt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZZL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZZL"))
			it.Zzl, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJJ_VEHICLE_max_order_by(ctx context.Context, obj interface{}) (model.JjVehicleMaxOrderBy, error) {
	var it model.JjVehicleMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "CCDJRQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CCDJRQ"))
			it.Ccdjrq, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "CLLX":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CLLX"))
			it.Cllx, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "CLSBDH":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CLSBDH"))
			it.Clsbdh, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "COUNTY":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("COUNTY"))
			it.County, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "DJRQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DJRQ"))
			it.Djrq, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "FPRQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FPRQ"))
			it.Fprq, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "GXRQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GXRQ"))
			it.Gxrq, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "HPHM":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("HPHM"))
			it.Hphm, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "HPZL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("HPZL"))
			it.Hpzl, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "IS_DETELED":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IS_DETELED"))
			it.IsDeteled, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "LXDH":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("LXDH"))
			it.Lxdh, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "LXDZ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("LXDZ"))
			it.Lxdz, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "OTHER":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OTHER"))
			it.Other, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "QZBFQZ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("QZBFQZ"))
			it.Qzbfqz, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "SJHM":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SJHM"))
			it.Sjhm, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "SYR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SYR"))
			it.Syr, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "SYXZ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SYXZ"))
			it.Syxz, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "UPDATETIME":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("UPDATETIME"))
			it.Updatetime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "VEHMONTYPE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("VEHMONTYPE"))
			it.Vehmontype, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "XH":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("XH"))
			it.Xh, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "YXQZ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("YXQZ"))
			it.Yxqz, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZT"))
			it.Zt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZZL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZZL"))
			it.Zzl, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJJ_VEHICLE_min_order_by(ctx context.Context, obj interface{}) (model.JjVehicleMinOrderBy, error) {
	var it model.JjVehicleMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "CCDJRQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CCDJRQ"))
			it.Ccdjrq, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "CLLX":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CLLX"))
			it.Cllx, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "CLSBDH":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CLSBDH"))
			it.Clsbdh, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "COUNTY":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("COUNTY"))
			it.County, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "DJRQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DJRQ"))
			it.Djrq, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "FPRQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FPRQ"))
			it.Fprq, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "GXRQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GXRQ"))
			it.Gxrq, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "HPHM":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("HPHM"))
			it.Hphm, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "HPZL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("HPZL"))
			it.Hpzl, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "IS_DETELED":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IS_DETELED"))
			it.IsDeteled, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "LXDH":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("LXDH"))
			it.Lxdh, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "LXDZ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("LXDZ"))
			it.Lxdz, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "OTHER":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OTHER"))
			it.Other, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "QZBFQZ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("QZBFQZ"))
			it.Qzbfqz, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "SJHM":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SJHM"))
			it.Sjhm, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "SYR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SYR"))
			it.Syr, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "SYXZ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SYXZ"))
			it.Syxz, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "UPDATETIME":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("UPDATETIME"))
			it.Updatetime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "VEHMONTYPE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("VEHMONTYPE"))
			it.Vehmontype, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "XH":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("XH"))
			it.Xh, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "YXQZ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("YXQZ"))
			it.Yxqz, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZT"))
			it.Zt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZZL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZZL"))
			it.Zzl, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJJ_VEHICLE_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.JjVehicleObjRelInsertInput, error) {
	var it model.JjVehicleObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNJJ_VEHICLE_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOJJ_VEHICLE_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJJ_VEHICLE_on_conflict(ctx context.Context, obj interface{}) (model.JjVehicleOnConflict, error) {
	var it model.JjVehicleOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNJJ_VEHICLE_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNJJ_VEHICLE_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOJJ_VEHICLE_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJJ_VEHICLE_order_by(ctx context.Context, obj interface{}) (model.JjVehicleOrderBy, error) {
	var it model.JjVehicleOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "CCDJRQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CCDJRQ"))
			it.Ccdjrq, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "CLLX":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CLLX"))
			it.Cllx, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "CLSBDH":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CLSBDH"))
			it.Clsbdh, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "COUNTY":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("COUNTY"))
			it.County, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "DJRQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DJRQ"))
			it.Djrq, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "FPRQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FPRQ"))
			it.Fprq, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "GXRQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GXRQ"))
			it.Gxrq, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "HPHM":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("HPHM"))
			it.Hphm, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "HPZL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("HPZL"))
			it.Hpzl, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "IS_DETELED":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IS_DETELED"))
			it.IsDeteled, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "LXDH":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("LXDH"))
			it.Lxdh, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "LXDZ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("LXDZ"))
			it.Lxdz, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "OTHER":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OTHER"))
			it.Other, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "QZBFQZ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("QZBFQZ"))
			it.Qzbfqz, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "SJHM":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SJHM"))
			it.Sjhm, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "SYR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SYR"))
			it.Syr, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "SYXZ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SYXZ"))
			it.Syxz, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "UPDATETIME":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("UPDATETIME"))
			it.Updatetime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "VEHMONTYPE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("VEHMONTYPE"))
			it.Vehmontype, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "XH":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("XH"))
			it.Xh, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "YXQZ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("YXQZ"))
			it.Yxqz, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZT"))
			it.Zt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZZL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZZL"))
			it.Zzl, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJJ_VEHICLE_pk_columns_input(ctx context.Context, obj interface{}) (model.JjVehiclePkColumnsInput, error) {
	var it model.JjVehiclePkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJJ_VEHICLE_set_input(ctx context.Context, obj interface{}) (model.JjVehicleSetInput, error) {
	var it model.JjVehicleSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "CCDJRQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CCDJRQ"))
			it.Ccdjrq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "CLLX":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CLLX"))
			it.Cllx, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "CLSBDH":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CLSBDH"))
			it.Clsbdh, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "COUNTY":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("COUNTY"))
			it.County, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "DJRQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DJRQ"))
			it.Djrq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "FPRQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FPRQ"))
			it.Fprq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "GXRQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GXRQ"))
			it.Gxrq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "HPHM":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("HPHM"))
			it.Hphm, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "HPZL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("HPZL"))
			it.Hpzl, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "IS_DETELED":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IS_DETELED"))
			it.IsDeteled, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "LXDH":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("LXDH"))
			it.Lxdh, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "LXDZ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("LXDZ"))
			it.Lxdz, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "OTHER":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OTHER"))
			it.Other, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "QZBFQZ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("QZBFQZ"))
			it.Qzbfqz, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "SJHM":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SJHM"))
			it.Sjhm, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "SYR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SYR"))
			it.Syr, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "SYXZ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SYXZ"))
			it.Syxz, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "UPDATETIME":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("UPDATETIME"))
			it.Updatetime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "VEHMONTYPE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("VEHMONTYPE"))
			it.Vehmontype, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "XH":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("XH"))
			it.Xh, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "YXQZ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("YXQZ"))
			it.Yxqz, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZT"))
			it.Zt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZZL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZZL"))
			it.Zzl, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJJ_VEHICLE_stddev_order_by(ctx context.Context, obj interface{}) (model.JjVehicleStddevOrderBy, error) {
	var it model.JjVehicleStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "IS_DETELED":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IS_DETELED"))
			it.IsDeteled, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZT"))
			it.Zt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZZL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZZL"))
			it.Zzl, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJJ_VEHICLE_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.JjVehicleStddevPopOrderBy, error) {
	var it model.JjVehicleStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "IS_DETELED":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IS_DETELED"))
			it.IsDeteled, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZT"))
			it.Zt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZZL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZZL"))
			it.Zzl, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJJ_VEHICLE_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.JjVehicleStddevSampOrderBy, error) {
	var it model.JjVehicleStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "IS_DETELED":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IS_DETELED"))
			it.IsDeteled, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZT"))
			it.Zt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZZL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZZL"))
			it.Zzl, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJJ_VEHICLE_sum_order_by(ctx context.Context, obj interface{}) (model.JjVehicleSumOrderBy, error) {
	var it model.JjVehicleSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "IS_DETELED":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IS_DETELED"))
			it.IsDeteled, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZT"))
			it.Zt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZZL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZZL"))
			it.Zzl, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJJ_VEHICLE_var_pop_order_by(ctx context.Context, obj interface{}) (model.JjVehicleVarPopOrderBy, error) {
	var it model.JjVehicleVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "IS_DETELED":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IS_DETELED"))
			it.IsDeteled, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZT"))
			it.Zt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZZL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZZL"))
			it.Zzl, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJJ_VEHICLE_var_samp_order_by(ctx context.Context, obj interface{}) (model.JjVehicleVarSampOrderBy, error) {
	var it model.JjVehicleVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "IS_DETELED":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IS_DETELED"))
			it.IsDeteled, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZT"))
			it.Zt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZZL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZZL"))
			it.Zzl, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJJ_VEHICLE_variance_order_by(ctx context.Context, obj interface{}) (model.JjVehicleVarianceOrderBy, error) {
	var it model.JjVehicleVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "IS_DETELED":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IS_DETELED"))
			it.IsDeteled, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZT"))
			it.Zt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZZL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZZL"))
			it.Zzl, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputString_comparison_exp(ctx context.Context, obj interface{}) (model1.StringComparisonExp, error) {
	var it model1.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInput_jsonb_comparison_exp(ctx context.Context, obj interface{}) (model1.JsonbComparisonExp, error) {
	var it model1.JsonbComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalO_jsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalO_jsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputbigint_comparison_exp(ctx context.Context, obj interface{}) (model1.BigintComparisonExp, error) {
	var it model1.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_category_info_aggregate_order_by(ctx context.Context, obj interface{}) (model.MuckTruckCategoryInfoAggregateOrderBy, error) {
	var it model.MuckTruckCategoryInfoAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOmuck_truck_category_info_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOmuck_truck_category_info_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOmuck_truck_category_info_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOmuck_truck_category_info_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOmuck_truck_category_info_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOmuck_truck_category_info_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOmuck_truck_category_info_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOmuck_truck_category_info_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOmuck_truck_category_info_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOmuck_truck_category_info_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_category_info_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.MuckTruckCategoryInfoArrRelInsertInput, error) {
	var it model.MuckTruckCategoryInfoArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNmuck_truck_category_info_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOmuck_truck_category_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_category_info_avg_order_by(ctx context.Context, obj interface{}) (model.MuckTruckCategoryInfoAvgOrderBy, error) {
	var it model.MuckTruckCategoryInfoAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "axes_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("axes_number"))
			it.AxesNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_mass":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_mass"))
			it.TotalMass, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_nature"))
			it.VehicleNature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_category_info_bool_exp(ctx context.Context, obj interface{}) (model.MuckTruckCategoryInfoBoolExp, error) {
	var it model.MuckTruckCategoryInfoBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOmuck_truck_category_info_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOmuck_truck_category_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOmuck_truck_category_info_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_owner_contact_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_owner_contact_phone"))
			it.ActualOwnerContactPhone, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_owner_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_owner_id_number"))
			it.ActualOwnerIDNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_owner_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_owner_id_photo"))
			it.ActualOwnerIDPhoto, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_owner_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_owner_name"))
			it.ActualOwnerName, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "annual_inspection_expiration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annual_inspection_expiration_time"))
			it.AnnualInspectionExpirationTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "apply_inspection_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_inspection_time"))
			it.ApplyInspectionTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "axes_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("axes_number"))
			it.AxesNumber, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_deadline":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_deadline"))
			it.BlacklistDeadline, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "compulsory_insurance_policy_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("compulsory_insurance_policy_picture"))
			it.CompulsoryInsurancePolicyPicture, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_license_contact_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_license_contact_phone"))
			it.DrivingLicenseContactPhone, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_license_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_license_id_number"))
			it.DrivingLicenseIDNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_liscense_owner_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_liscense_owner_id_photo"))
			it.DrivingLiscenseOwnerIDPhoto, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "engine_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("engine_number"))
			it.EngineNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_notice_number_endorsement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_notice_number_endorsement"))
			it.IllegalNoticeNumberEndorsement, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_number_endorsement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_number_endorsement"))
			it.IllegalNumberEndorsement, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "incident_number_endorsement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("incident_number_endorsement"))
			it.IncidentNumberEndorsement, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "initial_registration_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("initial_registration_date"))
			it.InitialRegistrationDate, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_expiry_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_expiry_time"))
			it.InsuranceExpiryTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_blacklist":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_blacklist"))
			it.IsBlacklist, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_due_security_alarm_processing":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_due_security_alarm_processing"))
			it.IsDueSecurityAlarmProcessing, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_first_register":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_first_register"))
			it.IsFirstRegister, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_muck_office_audit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_muck_office_audit"))
			it.IsMuckOfficeAudit, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_send_sms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_send_sms"))
			it.IsSendSms, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "issue_date_of_quangong_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("issue_date_of_quangong_number"))
			it.IssueDateOfQuangongNumber, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner_id_photo"))
			it.OwnerIDPhoto, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_notes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_notes"))
			it.ProcessingNotes, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_time"))
			it.ProcessingTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "processor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processor"))
			it.Processor, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_notes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_notes"))
			it.ReviewNotes, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_status"))
			it.ReviewStatus, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_time"))
			it.ReviewTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewer"))
			it.Reviewer, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "secondary_maintenance_expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secondary_maintenance_expiry_date"))
			it.SecondaryMaintenanceExpiryDate, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "secondary_maintenance_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secondary_maintenance_location"))
			it.SecondaryMaintenanceLocation, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "signing_acceptance_application_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signing_acceptance_application_time"))
			it.SigningAcceptanceApplicationTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "third_party_insurance_coverage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("third_party_insurance_coverage"))
			it.ThirdPartyInsuranceCoverage, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "third_party_insurance_expiry_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("third_party_insurance_expiry_time"))
			it.ThirdPartyInsuranceExpiryTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "third_party_insurance_policy_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("third_party_insurance_policy_picture"))
			it.ThirdPartyInsurancePolicyPicture, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_mass":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_mass"))
			it.TotalMass, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_description"))
			it.VehicleDescription, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_nature"))
			it.VehicleNature, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_operating_certificate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_operating_certificate_number"))
			it.VehicleOperatingCertificateNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_operating_certificate_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_operating_certificate_photo"))
			it.VehicleOperatingCertificatePhoto, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_picture"))
			it.VehiclePicture, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_category_info_inc_input(ctx context.Context, obj interface{}) (model.MuckTruckCategoryInfoIncInput, error) {
	var it model.MuckTruckCategoryInfoIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "axes_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("axes_number"))
			it.AxesNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_mass":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_mass"))
			it.TotalMass, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_nature"))
			it.VehicleNature, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_category_info_insert_input(ctx context.Context, obj interface{}) (model.MuckTruckCategoryInfoInsertInput, error) {
	var it model.MuckTruckCategoryInfoInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "actual_owner_contact_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_owner_contact_phone"))
			it.ActualOwnerContactPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_owner_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_owner_id_number"))
			it.ActualOwnerIDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_owner_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_owner_id_photo"))
			it.ActualOwnerIDPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_owner_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_owner_name"))
			it.ActualOwnerName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "annual_inspection_expiration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annual_inspection_expiration_time"))
			it.AnnualInspectionExpirationTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "apply_inspection_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_inspection_time"))
			it.ApplyInspectionTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "axes_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("axes_number"))
			it.AxesNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_deadline":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_deadline"))
			it.BlacklistDeadline, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "compulsory_insurance_policy_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("compulsory_insurance_policy_picture"))
			it.CompulsoryInsurancePolicyPicture, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_license_contact_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_license_contact_phone"))
			it.DrivingLicenseContactPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_license_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_license_id_number"))
			it.DrivingLicenseIDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_liscense_owner_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_liscense_owner_id_photo"))
			it.DrivingLiscenseOwnerIDPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "engine_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("engine_number"))
			it.EngineNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_notice_number_endorsement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_notice_number_endorsement"))
			it.IllegalNoticeNumberEndorsement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_number_endorsement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_number_endorsement"))
			it.IllegalNumberEndorsement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "incident_number_endorsement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("incident_number_endorsement"))
			it.IncidentNumberEndorsement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "initial_registration_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("initial_registration_date"))
			it.InitialRegistrationDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_expiry_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_expiry_time"))
			it.InsuranceExpiryTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_blacklist":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_blacklist"))
			it.IsBlacklist, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_due_security_alarm_processing":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_due_security_alarm_processing"))
			it.IsDueSecurityAlarmProcessing, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_first_register":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_first_register"))
			it.IsFirstRegister, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_muck_office_audit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_muck_office_audit"))
			it.IsMuckOfficeAudit, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_send_sms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_send_sms"))
			it.IsSendSms, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "issue_date_of_quangong_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("issue_date_of_quangong_number"))
			it.IssueDateOfQuangongNumber, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner_id_photo"))
			it.OwnerIDPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_notes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_notes"))
			it.ProcessingNotes, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_time"))
			it.ProcessingTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "processor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processor"))
			it.Processor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_notes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_notes"))
			it.ReviewNotes, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_status"))
			it.ReviewStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_time"))
			it.ReviewTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewer"))
			it.Reviewer, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "secondary_maintenance_expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secondary_maintenance_expiry_date"))
			it.SecondaryMaintenanceExpiryDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "secondary_maintenance_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secondary_maintenance_location"))
			it.SecondaryMaintenanceLocation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "signing_acceptance_application_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signing_acceptance_application_time"))
			it.SigningAcceptanceApplicationTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "third_party_insurance_coverage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("third_party_insurance_coverage"))
			it.ThirdPartyInsuranceCoverage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "third_party_insurance_expiry_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("third_party_insurance_expiry_time"))
			it.ThirdPartyInsuranceExpiryTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "third_party_insurance_policy_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("third_party_insurance_policy_picture"))
			it.ThirdPartyInsurancePolicyPicture, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_mass":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_mass"))
			it.TotalMass, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_description"))
			it.VehicleDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_nature"))
			it.VehicleNature, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_operating_certificate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_operating_certificate_number"))
			it.VehicleOperatingCertificateNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_operating_certificate_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_operating_certificate_photo"))
			it.VehicleOperatingCertificatePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_picture"))
			it.VehiclePicture, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_category_info_max_order_by(ctx context.Context, obj interface{}) (model.MuckTruckCategoryInfoMaxOrderBy, error) {
	var it model.MuckTruckCategoryInfoMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "actual_owner_contact_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_owner_contact_phone"))
			it.ActualOwnerContactPhone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_owner_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_owner_id_number"))
			it.ActualOwnerIDNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_owner_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_owner_id_photo"))
			it.ActualOwnerIDPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_owner_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_owner_name"))
			it.ActualOwnerName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "annual_inspection_expiration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annual_inspection_expiration_time"))
			it.AnnualInspectionExpirationTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "apply_inspection_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_inspection_time"))
			it.ApplyInspectionTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "axes_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("axes_number"))
			it.AxesNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_deadline":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_deadline"))
			it.BlacklistDeadline, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "compulsory_insurance_policy_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("compulsory_insurance_policy_picture"))
			it.CompulsoryInsurancePolicyPicture, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_license_contact_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_license_contact_phone"))
			it.DrivingLicenseContactPhone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_license_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_license_id_number"))
			it.DrivingLicenseIDNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_liscense_owner_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_liscense_owner_id_photo"))
			it.DrivingLiscenseOwnerIDPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "engine_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("engine_number"))
			it.EngineNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_notice_number_endorsement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_notice_number_endorsement"))
			it.IllegalNoticeNumberEndorsement, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_number_endorsement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_number_endorsement"))
			it.IllegalNumberEndorsement, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "incident_number_endorsement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("incident_number_endorsement"))
			it.IncidentNumberEndorsement, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "initial_registration_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("initial_registration_date"))
			it.InitialRegistrationDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_expiry_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_expiry_time"))
			it.InsuranceExpiryTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "issue_date_of_quangong_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("issue_date_of_quangong_number"))
			it.IssueDateOfQuangongNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner_id_photo"))
			it.OwnerIDPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_notes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_notes"))
			it.ProcessingNotes, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_time"))
			it.ProcessingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processor"))
			it.Processor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_notes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_notes"))
			it.ReviewNotes, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_status"))
			it.ReviewStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_time"))
			it.ReviewTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewer"))
			it.Reviewer, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "secondary_maintenance_expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secondary_maintenance_expiry_date"))
			it.SecondaryMaintenanceExpiryDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "secondary_maintenance_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secondary_maintenance_location"))
			it.SecondaryMaintenanceLocation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "signing_acceptance_application_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signing_acceptance_application_time"))
			it.SigningAcceptanceApplicationTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "third_party_insurance_coverage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("third_party_insurance_coverage"))
			it.ThirdPartyInsuranceCoverage, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "third_party_insurance_expiry_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("third_party_insurance_expiry_time"))
			it.ThirdPartyInsuranceExpiryTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "third_party_insurance_policy_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("third_party_insurance_policy_picture"))
			it.ThirdPartyInsurancePolicyPicture, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_mass":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_mass"))
			it.TotalMass, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_description"))
			it.VehicleDescription, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_nature"))
			it.VehicleNature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_operating_certificate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_operating_certificate_number"))
			it.VehicleOperatingCertificateNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_operating_certificate_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_operating_certificate_photo"))
			it.VehicleOperatingCertificatePhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_picture"))
			it.VehiclePicture, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_category_info_min_order_by(ctx context.Context, obj interface{}) (model.MuckTruckCategoryInfoMinOrderBy, error) {
	var it model.MuckTruckCategoryInfoMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "actual_owner_contact_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_owner_contact_phone"))
			it.ActualOwnerContactPhone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_owner_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_owner_id_number"))
			it.ActualOwnerIDNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_owner_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_owner_id_photo"))
			it.ActualOwnerIDPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_owner_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_owner_name"))
			it.ActualOwnerName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "annual_inspection_expiration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annual_inspection_expiration_time"))
			it.AnnualInspectionExpirationTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "apply_inspection_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_inspection_time"))
			it.ApplyInspectionTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "axes_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("axes_number"))
			it.AxesNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_deadline":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_deadline"))
			it.BlacklistDeadline, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "compulsory_insurance_policy_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("compulsory_insurance_policy_picture"))
			it.CompulsoryInsurancePolicyPicture, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_license_contact_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_license_contact_phone"))
			it.DrivingLicenseContactPhone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_license_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_license_id_number"))
			it.DrivingLicenseIDNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_liscense_owner_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_liscense_owner_id_photo"))
			it.DrivingLiscenseOwnerIDPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "engine_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("engine_number"))
			it.EngineNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_notice_number_endorsement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_notice_number_endorsement"))
			it.IllegalNoticeNumberEndorsement, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_number_endorsement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_number_endorsement"))
			it.IllegalNumberEndorsement, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "incident_number_endorsement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("incident_number_endorsement"))
			it.IncidentNumberEndorsement, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "initial_registration_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("initial_registration_date"))
			it.InitialRegistrationDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_expiry_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_expiry_time"))
			it.InsuranceExpiryTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "issue_date_of_quangong_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("issue_date_of_quangong_number"))
			it.IssueDateOfQuangongNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner_id_photo"))
			it.OwnerIDPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_notes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_notes"))
			it.ProcessingNotes, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_time"))
			it.ProcessingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processor"))
			it.Processor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_notes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_notes"))
			it.ReviewNotes, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_status"))
			it.ReviewStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_time"))
			it.ReviewTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewer"))
			it.Reviewer, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "secondary_maintenance_expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secondary_maintenance_expiry_date"))
			it.SecondaryMaintenanceExpiryDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "secondary_maintenance_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secondary_maintenance_location"))
			it.SecondaryMaintenanceLocation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "signing_acceptance_application_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signing_acceptance_application_time"))
			it.SigningAcceptanceApplicationTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "third_party_insurance_coverage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("third_party_insurance_coverage"))
			it.ThirdPartyInsuranceCoverage, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "third_party_insurance_expiry_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("third_party_insurance_expiry_time"))
			it.ThirdPartyInsuranceExpiryTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "third_party_insurance_policy_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("third_party_insurance_policy_picture"))
			it.ThirdPartyInsurancePolicyPicture, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_mass":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_mass"))
			it.TotalMass, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_description"))
			it.VehicleDescription, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_nature"))
			it.VehicleNature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_operating_certificate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_operating_certificate_number"))
			it.VehicleOperatingCertificateNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_operating_certificate_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_operating_certificate_photo"))
			it.VehicleOperatingCertificatePhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_picture"))
			it.VehiclePicture, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_category_info_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.MuckTruckCategoryInfoObjRelInsertInput, error) {
	var it model.MuckTruckCategoryInfoObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNmuck_truck_category_info_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOmuck_truck_category_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_category_info_on_conflict(ctx context.Context, obj interface{}) (model.MuckTruckCategoryInfoOnConflict, error) {
	var it model.MuckTruckCategoryInfoOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNmuck_truck_category_info_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNmuck_truck_category_info_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOmuck_truck_category_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_category_info_order_by(ctx context.Context, obj interface{}) (model.MuckTruckCategoryInfoOrderBy, error) {
	var it model.MuckTruckCategoryInfoOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "actual_owner_contact_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_owner_contact_phone"))
			it.ActualOwnerContactPhone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_owner_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_owner_id_number"))
			it.ActualOwnerIDNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_owner_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_owner_id_photo"))
			it.ActualOwnerIDPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_owner_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_owner_name"))
			it.ActualOwnerName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "annual_inspection_expiration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annual_inspection_expiration_time"))
			it.AnnualInspectionExpirationTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "apply_inspection_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_inspection_time"))
			it.ApplyInspectionTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "axes_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("axes_number"))
			it.AxesNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_deadline":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_deadline"))
			it.BlacklistDeadline, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "compulsory_insurance_policy_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("compulsory_insurance_policy_picture"))
			it.CompulsoryInsurancePolicyPicture, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_license_contact_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_license_contact_phone"))
			it.DrivingLicenseContactPhone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_license_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_license_id_number"))
			it.DrivingLicenseIDNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_liscense_owner_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_liscense_owner_id_photo"))
			it.DrivingLiscenseOwnerIDPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "engine_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("engine_number"))
			it.EngineNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_notice_number_endorsement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_notice_number_endorsement"))
			it.IllegalNoticeNumberEndorsement, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_number_endorsement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_number_endorsement"))
			it.IllegalNumberEndorsement, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "incident_number_endorsement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("incident_number_endorsement"))
			it.IncidentNumberEndorsement, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "initial_registration_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("initial_registration_date"))
			it.InitialRegistrationDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_expiry_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_expiry_time"))
			it.InsuranceExpiryTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_blacklist":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_blacklist"))
			it.IsBlacklist, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_due_security_alarm_processing":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_due_security_alarm_processing"))
			it.IsDueSecurityAlarmProcessing, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_first_register":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_first_register"))
			it.IsFirstRegister, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_muck_office_audit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_muck_office_audit"))
			it.IsMuckOfficeAudit, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_send_sms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_send_sms"))
			it.IsSendSms, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "issue_date_of_quangong_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("issue_date_of_quangong_number"))
			it.IssueDateOfQuangongNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner_id_photo"))
			it.OwnerIDPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_notes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_notes"))
			it.ProcessingNotes, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_time"))
			it.ProcessingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processor"))
			it.Processor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_notes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_notes"))
			it.ReviewNotes, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_status"))
			it.ReviewStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_time"))
			it.ReviewTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewer"))
			it.Reviewer, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "secondary_maintenance_expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secondary_maintenance_expiry_date"))
			it.SecondaryMaintenanceExpiryDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "secondary_maintenance_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secondary_maintenance_location"))
			it.SecondaryMaintenanceLocation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "signing_acceptance_application_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signing_acceptance_application_time"))
			it.SigningAcceptanceApplicationTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "third_party_insurance_coverage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("third_party_insurance_coverage"))
			it.ThirdPartyInsuranceCoverage, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "third_party_insurance_expiry_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("third_party_insurance_expiry_time"))
			it.ThirdPartyInsuranceExpiryTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "third_party_insurance_policy_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("third_party_insurance_policy_picture"))
			it.ThirdPartyInsurancePolicyPicture, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_mass":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_mass"))
			it.TotalMass, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_description"))
			it.VehicleDescription, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_nature"))
			it.VehicleNature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_operating_certificate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_operating_certificate_number"))
			it.VehicleOperatingCertificateNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_operating_certificate_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_operating_certificate_photo"))
			it.VehicleOperatingCertificatePhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_picture"))
			it.VehiclePicture, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_category_info_pk_columns_input(ctx context.Context, obj interface{}) (model.MuckTruckCategoryInfoPkColumnsInput, error) {
	var it model.MuckTruckCategoryInfoPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_category_info_set_input(ctx context.Context, obj interface{}) (model.MuckTruckCategoryInfoSetInput, error) {
	var it model.MuckTruckCategoryInfoSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "actual_owner_contact_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_owner_contact_phone"))
			it.ActualOwnerContactPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_owner_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_owner_id_number"))
			it.ActualOwnerIDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_owner_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_owner_id_photo"))
			it.ActualOwnerIDPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_owner_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_owner_name"))
			it.ActualOwnerName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "annual_inspection_expiration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annual_inspection_expiration_time"))
			it.AnnualInspectionExpirationTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "apply_inspection_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_inspection_time"))
			it.ApplyInspectionTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "axes_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("axes_number"))
			it.AxesNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_deadline":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_deadline"))
			it.BlacklistDeadline, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "compulsory_insurance_policy_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("compulsory_insurance_policy_picture"))
			it.CompulsoryInsurancePolicyPicture, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_license_contact_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_license_contact_phone"))
			it.DrivingLicenseContactPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_license_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_license_id_number"))
			it.DrivingLicenseIDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_liscense_owner_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_liscense_owner_id_photo"))
			it.DrivingLiscenseOwnerIDPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "engine_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("engine_number"))
			it.EngineNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_notice_number_endorsement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_notice_number_endorsement"))
			it.IllegalNoticeNumberEndorsement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "illegal_number_endorsement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("illegal_number_endorsement"))
			it.IllegalNumberEndorsement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "incident_number_endorsement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("incident_number_endorsement"))
			it.IncidentNumberEndorsement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "initial_registration_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("initial_registration_date"))
			it.InitialRegistrationDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_expiry_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_expiry_time"))
			it.InsuranceExpiryTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_blacklist":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_blacklist"))
			it.IsBlacklist, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_due_security_alarm_processing":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_due_security_alarm_processing"))
			it.IsDueSecurityAlarmProcessing, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_first_register":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_first_register"))
			it.IsFirstRegister, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_muck_office_audit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_muck_office_audit"))
			it.IsMuckOfficeAudit, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_send_sms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_send_sms"))
			it.IsSendSms, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "issue_date_of_quangong_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("issue_date_of_quangong_number"))
			it.IssueDateOfQuangongNumber, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner_id_photo"))
			it.OwnerIDPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_notes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_notes"))
			it.ProcessingNotes, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_time"))
			it.ProcessingTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "processor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processor"))
			it.Processor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_notes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_notes"))
			it.ReviewNotes, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_status"))
			it.ReviewStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_time"))
			it.ReviewTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewer"))
			it.Reviewer, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "secondary_maintenance_expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secondary_maintenance_expiry_date"))
			it.SecondaryMaintenanceExpiryDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "secondary_maintenance_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secondary_maintenance_location"))
			it.SecondaryMaintenanceLocation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "signing_acceptance_application_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signing_acceptance_application_time"))
			it.SigningAcceptanceApplicationTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "third_party_insurance_coverage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("third_party_insurance_coverage"))
			it.ThirdPartyInsuranceCoverage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "third_party_insurance_expiry_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("third_party_insurance_expiry_time"))
			it.ThirdPartyInsuranceExpiryTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "third_party_insurance_policy_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("third_party_insurance_policy_picture"))
			it.ThirdPartyInsurancePolicyPicture, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_mass":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_mass"))
			it.TotalMass, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_description"))
			it.VehicleDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_nature"))
			it.VehicleNature, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_operating_certificate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_operating_certificate_number"))
			it.VehicleOperatingCertificateNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_operating_certificate_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_operating_certificate_photo"))
			it.VehicleOperatingCertificatePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_picture"))
			it.VehiclePicture, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_category_info_stddev_order_by(ctx context.Context, obj interface{}) (model.MuckTruckCategoryInfoStddevOrderBy, error) {
	var it model.MuckTruckCategoryInfoStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "axes_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("axes_number"))
			it.AxesNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_mass":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_mass"))
			it.TotalMass, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_nature"))
			it.VehicleNature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_category_info_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.MuckTruckCategoryInfoStddevPopOrderBy, error) {
	var it model.MuckTruckCategoryInfoStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "axes_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("axes_number"))
			it.AxesNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_mass":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_mass"))
			it.TotalMass, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_nature"))
			it.VehicleNature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_category_info_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.MuckTruckCategoryInfoStddevSampOrderBy, error) {
	var it model.MuckTruckCategoryInfoStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "axes_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("axes_number"))
			it.AxesNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_mass":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_mass"))
			it.TotalMass, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_nature"))
			it.VehicleNature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_category_info_sum_order_by(ctx context.Context, obj interface{}) (model.MuckTruckCategoryInfoSumOrderBy, error) {
	var it model.MuckTruckCategoryInfoSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "axes_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("axes_number"))
			it.AxesNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_mass":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_mass"))
			it.TotalMass, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_nature"))
			it.VehicleNature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_category_info_var_pop_order_by(ctx context.Context, obj interface{}) (model.MuckTruckCategoryInfoVarPopOrderBy, error) {
	var it model.MuckTruckCategoryInfoVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "axes_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("axes_number"))
			it.AxesNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_mass":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_mass"))
			it.TotalMass, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_nature"))
			it.VehicleNature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_category_info_var_samp_order_by(ctx context.Context, obj interface{}) (model.MuckTruckCategoryInfoVarSampOrderBy, error) {
	var it model.MuckTruckCategoryInfoVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "axes_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("axes_number"))
			it.AxesNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_mass":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_mass"))
			it.TotalMass, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_nature"))
			it.VehicleNature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_category_info_variance_order_by(ctx context.Context, obj interface{}) (model.MuckTruckCategoryInfoVarianceOrderBy, error) {
	var it model.MuckTruckCategoryInfoVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "axes_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("axes_number"))
			it.AxesNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_mass":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_mass"))
			it.TotalMass, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_nature"))
			it.VehicleNature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_info_aggregate_order_by(ctx context.Context, obj interface{}) (model.MuckTruckInfoAggregateOrderBy, error) {
	var it model.MuckTruckInfoAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOmuck_truck_info_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOmuck_truck_info_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOmuck_truck_info_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOmuck_truck_info_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOmuck_truck_info_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOmuck_truck_info_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOmuck_truck_info_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOmuck_truck_info_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOmuck_truck_info_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOmuck_truck_info_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_info_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.MuckTruckInfoArrRelInsertInput, error) {
	var it model.MuckTruckInfoArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNmuck_truck_info_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOmuck_truck_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_info_avg_order_by(ctx context.Context, obj interface{}) (model.MuckTruckInfoAvgOrderBy, error) {
	var it model.MuckTruckInfoAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "server_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("server_id"))
			it.ServerID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_info_bool_exp(ctx context.Context, obj interface{}) (model.MuckTruckInfoBoolExp, error) {
	var it model.MuckTruckInfoBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOmuck_truck_info_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOmuck_truck_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOmuck_truck_info_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiry_date"))
			it.ExpiryDate, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "fake_ip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fake_ip"))
			it.FakeIP, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_reserve_library":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_reserve_library"))
			it.IsReserveLibrary, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "load_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("load_category"))
			it.LoadCategory, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile_card_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile_card_location"))
			it.MobileCardLocation, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_date"))
			it.RegistrationDate, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "self_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("self_number"))
			it.SelfNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "server_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("server_id"))
			it.ServerID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_card_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_card_number"))
			it.SimCardNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_info_inc_input(ctx context.Context, obj interface{}) (model.MuckTruckInfoIncInput, error) {
	var it model.MuckTruckInfoIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "server_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("server_id"))
			it.ServerID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_info_insert_input(ctx context.Context, obj interface{}) (model.MuckTruckInfoInsertInput, error) {
	var it model.MuckTruckInfoInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiry_date"))
			it.ExpiryDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "fake_ip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fake_ip"))
			it.FakeIP, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_reserve_library":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_reserve_library"))
			it.IsReserveLibrary, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "load_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("load_category"))
			it.LoadCategory, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile_card_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile_card_location"))
			it.MobileCardLocation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_date"))
			it.RegistrationDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "self_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("self_number"))
			it.SelfNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "server_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("server_id"))
			it.ServerID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_card_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_card_number"))
			it.SimCardNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_info_max_order_by(ctx context.Context, obj interface{}) (model.MuckTruckInfoMaxOrderBy, error) {
	var it model.MuckTruckInfoMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiry_date"))
			it.ExpiryDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fake_ip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fake_ip"))
			it.FakeIP, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "load_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("load_category"))
			it.LoadCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile_card_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile_card_location"))
			it.MobileCardLocation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_date"))
			it.RegistrationDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "self_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("self_number"))
			it.SelfNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "server_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("server_id"))
			it.ServerID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_card_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_card_number"))
			it.SimCardNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_info_min_order_by(ctx context.Context, obj interface{}) (model.MuckTruckInfoMinOrderBy, error) {
	var it model.MuckTruckInfoMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiry_date"))
			it.ExpiryDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fake_ip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fake_ip"))
			it.FakeIP, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "load_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("load_category"))
			it.LoadCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile_card_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile_card_location"))
			it.MobileCardLocation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_date"))
			it.RegistrationDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "self_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("self_number"))
			it.SelfNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "server_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("server_id"))
			it.ServerID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_card_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_card_number"))
			it.SimCardNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_info_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.MuckTruckInfoObjRelInsertInput, error) {
	var it model.MuckTruckInfoObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNmuck_truck_info_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOmuck_truck_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_info_on_conflict(ctx context.Context, obj interface{}) (model.MuckTruckInfoOnConflict, error) {
	var it model.MuckTruckInfoOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNmuck_truck_info_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNmuck_truck_info_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOmuck_truck_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_info_order_by(ctx context.Context, obj interface{}) (model.MuckTruckInfoOrderBy, error) {
	var it model.MuckTruckInfoOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiry_date"))
			it.ExpiryDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fake_ip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fake_ip"))
			it.FakeIP, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_reserve_library":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_reserve_library"))
			it.IsReserveLibrary, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "load_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("load_category"))
			it.LoadCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile_card_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile_card_location"))
			it.MobileCardLocation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_date"))
			it.RegistrationDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "self_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("self_number"))
			it.SelfNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "server_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("server_id"))
			it.ServerID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_card_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_card_number"))
			it.SimCardNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_info_pk_columns_input(ctx context.Context, obj interface{}) (model.MuckTruckInfoPkColumnsInput, error) {
	var it model.MuckTruckInfoPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_info_set_input(ctx context.Context, obj interface{}) (model.MuckTruckInfoSetInput, error) {
	var it model.MuckTruckInfoSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiry_date"))
			it.ExpiryDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "fake_ip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fake_ip"))
			it.FakeIP, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_reserve_library":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_reserve_library"))
			it.IsReserveLibrary, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "load_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("load_category"))
			it.LoadCategory, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile_card_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile_card_location"))
			it.MobileCardLocation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_date"))
			it.RegistrationDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "self_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("self_number"))
			it.SelfNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "server_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("server_id"))
			it.ServerID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_card_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_card_number"))
			it.SimCardNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_info_stddev_order_by(ctx context.Context, obj interface{}) (model.MuckTruckInfoStddevOrderBy, error) {
	var it model.MuckTruckInfoStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "server_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("server_id"))
			it.ServerID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_info_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.MuckTruckInfoStddevPopOrderBy, error) {
	var it model.MuckTruckInfoStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "server_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("server_id"))
			it.ServerID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_info_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.MuckTruckInfoStddevSampOrderBy, error) {
	var it model.MuckTruckInfoStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "server_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("server_id"))
			it.ServerID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_info_sum_order_by(ctx context.Context, obj interface{}) (model.MuckTruckInfoSumOrderBy, error) {
	var it model.MuckTruckInfoSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "server_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("server_id"))
			it.ServerID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_info_var_pop_order_by(ctx context.Context, obj interface{}) (model.MuckTruckInfoVarPopOrderBy, error) {
	var it model.MuckTruckInfoVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "server_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("server_id"))
			it.ServerID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_info_var_samp_order_by(ctx context.Context, obj interface{}) (model.MuckTruckInfoVarSampOrderBy, error) {
	var it model.MuckTruckInfoVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "server_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("server_id"))
			it.ServerID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_info_variance_order_by(ctx context.Context, obj interface{}) (model.MuckTruckInfoVarianceOrderBy, error) {
	var it model.MuckTruckInfoVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "server_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("server_id"))
			it.ServerID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_preview_number_aggregate_order_by(ctx context.Context, obj interface{}) (model.MuckTruckPreviewNumberAggregateOrderBy, error) {
	var it model.MuckTruckPreviewNumberAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOmuck_truck_preview_number_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOmuck_truck_preview_number_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOmuck_truck_preview_number_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOmuck_truck_preview_number_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOmuck_truck_preview_number_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOmuck_truck_preview_number_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOmuck_truck_preview_number_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOmuck_truck_preview_number_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOmuck_truck_preview_number_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOmuck_truck_preview_number_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_preview_number_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.MuckTruckPreviewNumberArrRelInsertInput, error) {
	var it model.MuckTruckPreviewNumberArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNmuck_truck_preview_number_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOmuck_truck_preview_number_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_preview_number_avg_order_by(ctx context.Context, obj interface{}) (model.MuckTruckPreviewNumberAvgOrderBy, error) {
	var it model.MuckTruckPreviewNumberAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "confirm_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirm_status"))
			it.ConfirmStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_status"))
			it.ProductionStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_times"))
			it.ProductionTimes, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "unlawful_violation_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unlawful_violation_number"))
			it.UnlawfulViolationNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_preview_number_bool_exp(ctx context.Context, obj interface{}) (model.MuckTruckPreviewNumberBoolExp, error) {
	var it model.MuckTruckPreviewNumberBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOmuck_truck_preview_number_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOmuck_truck_preview_number_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOmuck_truck_preview_number_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "confirm_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirm_status"))
			it.ConfirmStatus, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "confirm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirm_time"))
			it.ConfirmTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "confirmor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirmor"))
			it.Confirmor, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_person"))
			it.ContactPerson, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_phone"))
			it.ContactPhone, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "front_license_plate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("front_license_plate"))
			it.FrontLicensePlate, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "initial_registration_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("initial_registration_date"))
			it.InitialRegistrationDate, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_register_sale_order":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_register_sale_order"))
			it.IsRegisterSaleOrder, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_review_automatically":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_review_automatically"))
			it.IsReviewAutomatically, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "marking_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marking_time"))
			it.MarkingTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "original_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("original_number"))
			it.OriginalNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_status"))
			it.ProductionStatus, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_time"))
			it.ProductionTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_times"))
			it.ProductionTimes, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "rear_license_plate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rear_license_plate"))
			it.RearLicensePlate, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "side_license_plate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("side_license_plate"))
			it.SideLicensePlate, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "svn_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("svn_number"))
			it.SvnNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "unlawful_violation_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unlawful_violation_number"))
			it.UnlawfulViolationNumber, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "work_number_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("work_number_plate_color"))
			it.WorkNumberPlateColor, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_preview_number_inc_input(ctx context.Context, obj interface{}) (model.MuckTruckPreviewNumberIncInput, error) {
	var it model.MuckTruckPreviewNumberIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "confirm_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirm_status"))
			it.ConfirmStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_status"))
			it.ProductionStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_times"))
			it.ProductionTimes, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "unlawful_violation_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unlawful_violation_number"))
			it.UnlawfulViolationNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_preview_number_insert_input(ctx context.Context, obj interface{}) (model.MuckTruckPreviewNumberInsertInput, error) {
	var it model.MuckTruckPreviewNumberInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "confirm_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirm_status"))
			it.ConfirmStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "confirm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirm_time"))
			it.ConfirmTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "confirmor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirmor"))
			it.Confirmor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_person"))
			it.ContactPerson, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_phone"))
			it.ContactPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "front_license_plate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("front_license_plate"))
			it.FrontLicensePlate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "initial_registration_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("initial_registration_date"))
			it.InitialRegistrationDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_register_sale_order":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_register_sale_order"))
			it.IsRegisterSaleOrder, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_review_automatically":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_review_automatically"))
			it.IsReviewAutomatically, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "marking_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marking_time"))
			it.MarkingTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "original_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("original_number"))
			it.OriginalNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_status"))
			it.ProductionStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_time"))
			it.ProductionTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_times"))
			it.ProductionTimes, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "rear_license_plate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rear_license_plate"))
			it.RearLicensePlate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "side_license_plate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("side_license_plate"))
			it.SideLicensePlate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "svn_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("svn_number"))
			it.SvnNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "unlawful_violation_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unlawful_violation_number"))
			it.UnlawfulViolationNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "work_number_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("work_number_plate_color"))
			it.WorkNumberPlateColor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_preview_number_max_order_by(ctx context.Context, obj interface{}) (model.MuckTruckPreviewNumberMaxOrderBy, error) {
	var it model.MuckTruckPreviewNumberMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "confirm_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirm_status"))
			it.ConfirmStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "confirm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirm_time"))
			it.ConfirmTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "confirmor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirmor"))
			it.Confirmor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_person"))
			it.ContactPerson, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_phone"))
			it.ContactPhone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "front_license_plate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("front_license_plate"))
			it.FrontLicensePlate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "initial_registration_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("initial_registration_date"))
			it.InitialRegistrationDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "marking_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marking_time"))
			it.MarkingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "original_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("original_number"))
			it.OriginalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_status"))
			it.ProductionStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_time"))
			it.ProductionTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_times"))
			it.ProductionTimes, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "rear_license_plate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rear_license_plate"))
			it.RearLicensePlate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "side_license_plate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("side_license_plate"))
			it.SideLicensePlate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "svn_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("svn_number"))
			it.SvnNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "unlawful_violation_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unlawful_violation_number"))
			it.UnlawfulViolationNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "work_number_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("work_number_plate_color"))
			it.WorkNumberPlateColor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_preview_number_min_order_by(ctx context.Context, obj interface{}) (model.MuckTruckPreviewNumberMinOrderBy, error) {
	var it model.MuckTruckPreviewNumberMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "confirm_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirm_status"))
			it.ConfirmStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "confirm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirm_time"))
			it.ConfirmTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "confirmor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirmor"))
			it.Confirmor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_person"))
			it.ContactPerson, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_phone"))
			it.ContactPhone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "front_license_plate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("front_license_plate"))
			it.FrontLicensePlate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "initial_registration_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("initial_registration_date"))
			it.InitialRegistrationDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "marking_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marking_time"))
			it.MarkingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "original_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("original_number"))
			it.OriginalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_status"))
			it.ProductionStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_time"))
			it.ProductionTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_times"))
			it.ProductionTimes, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "rear_license_plate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rear_license_plate"))
			it.RearLicensePlate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "side_license_plate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("side_license_plate"))
			it.SideLicensePlate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "svn_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("svn_number"))
			it.SvnNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "unlawful_violation_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unlawful_violation_number"))
			it.UnlawfulViolationNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "work_number_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("work_number_plate_color"))
			it.WorkNumberPlateColor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_preview_number_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.MuckTruckPreviewNumberObjRelInsertInput, error) {
	var it model.MuckTruckPreviewNumberObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNmuck_truck_preview_number_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOmuck_truck_preview_number_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_preview_number_on_conflict(ctx context.Context, obj interface{}) (model.MuckTruckPreviewNumberOnConflict, error) {
	var it model.MuckTruckPreviewNumberOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNmuck_truck_preview_number_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNmuck_truck_preview_number_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOmuck_truck_preview_number_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_preview_number_order_by(ctx context.Context, obj interface{}) (model.MuckTruckPreviewNumberOrderBy, error) {
	var it model.MuckTruckPreviewNumberOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "confirm_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirm_status"))
			it.ConfirmStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "confirm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirm_time"))
			it.ConfirmTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "confirmor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirmor"))
			it.Confirmor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_person"))
			it.ContactPerson, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_phone"))
			it.ContactPhone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "front_license_plate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("front_license_plate"))
			it.FrontLicensePlate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "initial_registration_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("initial_registration_date"))
			it.InitialRegistrationDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_register_sale_order":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_register_sale_order"))
			it.IsRegisterSaleOrder, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_review_automatically":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_review_automatically"))
			it.IsReviewAutomatically, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "marking_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marking_time"))
			it.MarkingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "original_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("original_number"))
			it.OriginalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_status"))
			it.ProductionStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_time"))
			it.ProductionTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_times"))
			it.ProductionTimes, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "rear_license_plate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rear_license_plate"))
			it.RearLicensePlate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "side_license_plate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("side_license_plate"))
			it.SideLicensePlate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "svn_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("svn_number"))
			it.SvnNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "unlawful_violation_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unlawful_violation_number"))
			it.UnlawfulViolationNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "work_number_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("work_number_plate_color"))
			it.WorkNumberPlateColor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_preview_number_pk_columns_input(ctx context.Context, obj interface{}) (model.MuckTruckPreviewNumberPkColumnsInput, error) {
	var it model.MuckTruckPreviewNumberPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_preview_number_set_input(ctx context.Context, obj interface{}) (model.MuckTruckPreviewNumberSetInput, error) {
	var it model.MuckTruckPreviewNumberSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "confirm_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirm_status"))
			it.ConfirmStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "confirm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirm_time"))
			it.ConfirmTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "confirmor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirmor"))
			it.Confirmor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_person"))
			it.ContactPerson, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_phone"))
			it.ContactPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "front_license_plate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("front_license_plate"))
			it.FrontLicensePlate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "initial_registration_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("initial_registration_date"))
			it.InitialRegistrationDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_register_sale_order":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_register_sale_order"))
			it.IsRegisterSaleOrder, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_review_automatically":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_review_automatically"))
			it.IsReviewAutomatically, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "marking_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marking_time"))
			it.MarkingTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "original_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("original_number"))
			it.OriginalNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_status"))
			it.ProductionStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_time"))
			it.ProductionTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_times"))
			it.ProductionTimes, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "rear_license_plate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rear_license_plate"))
			it.RearLicensePlate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "side_license_plate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("side_license_plate"))
			it.SideLicensePlate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "svn_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("svn_number"))
			it.SvnNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "unlawful_violation_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unlawful_violation_number"))
			it.UnlawfulViolationNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "work_number_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("work_number_plate_color"))
			it.WorkNumberPlateColor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_preview_number_stddev_order_by(ctx context.Context, obj interface{}) (model.MuckTruckPreviewNumberStddevOrderBy, error) {
	var it model.MuckTruckPreviewNumberStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "confirm_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirm_status"))
			it.ConfirmStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_status"))
			it.ProductionStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_times"))
			it.ProductionTimes, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "unlawful_violation_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unlawful_violation_number"))
			it.UnlawfulViolationNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_preview_number_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.MuckTruckPreviewNumberStddevPopOrderBy, error) {
	var it model.MuckTruckPreviewNumberStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "confirm_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirm_status"))
			it.ConfirmStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_status"))
			it.ProductionStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_times"))
			it.ProductionTimes, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "unlawful_violation_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unlawful_violation_number"))
			it.UnlawfulViolationNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_preview_number_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.MuckTruckPreviewNumberStddevSampOrderBy, error) {
	var it model.MuckTruckPreviewNumberStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "confirm_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirm_status"))
			it.ConfirmStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_status"))
			it.ProductionStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_times"))
			it.ProductionTimes, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "unlawful_violation_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unlawful_violation_number"))
			it.UnlawfulViolationNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_preview_number_sum_order_by(ctx context.Context, obj interface{}) (model.MuckTruckPreviewNumberSumOrderBy, error) {
	var it model.MuckTruckPreviewNumberSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "confirm_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirm_status"))
			it.ConfirmStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_status"))
			it.ProductionStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_times"))
			it.ProductionTimes, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "unlawful_violation_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unlawful_violation_number"))
			it.UnlawfulViolationNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_preview_number_var_pop_order_by(ctx context.Context, obj interface{}) (model.MuckTruckPreviewNumberVarPopOrderBy, error) {
	var it model.MuckTruckPreviewNumberVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "confirm_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirm_status"))
			it.ConfirmStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_status"))
			it.ProductionStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_times"))
			it.ProductionTimes, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "unlawful_violation_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unlawful_violation_number"))
			it.UnlawfulViolationNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_preview_number_var_samp_order_by(ctx context.Context, obj interface{}) (model.MuckTruckPreviewNumberVarSampOrderBy, error) {
	var it model.MuckTruckPreviewNumberVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "confirm_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirm_status"))
			it.ConfirmStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_status"))
			it.ProductionStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_times"))
			it.ProductionTimes, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "unlawful_violation_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unlawful_violation_number"))
			it.UnlawfulViolationNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_preview_number_variance_order_by(ctx context.Context, obj interface{}) (model.MuckTruckPreviewNumberVarianceOrderBy, error) {
	var it model.MuckTruckPreviewNumberVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "confirm_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirm_status"))
			it.ConfirmStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_status"))
			it.ProductionStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "production_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("production_times"))
			it.ProductionTimes, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "unlawful_violation_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unlawful_violation_number"))
			it.UnlawfulViolationNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_worker_id_card_orders_aggregate_order_by(ctx context.Context, obj interface{}) (model.MuckTruckWorkerIDCardOrdersAggregateOrderBy, error) {
	var it model.MuckTruckWorkerIDCardOrdersAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOmuck_truck_worker_id_card_orders_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOmuck_truck_worker_id_card_orders_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOmuck_truck_worker_id_card_orders_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOmuck_truck_worker_id_card_orders_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOmuck_truck_worker_id_card_orders_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOmuck_truck_worker_id_card_orders_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOmuck_truck_worker_id_card_orders_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOmuck_truck_worker_id_card_orders_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOmuck_truck_worker_id_card_orders_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOmuck_truck_worker_id_card_orders_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_worker_id_card_orders_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.MuckTruckWorkerIDCardOrdersArrRelInsertInput, error) {
	var it model.MuckTruckWorkerIDCardOrdersArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNmuck_truck_worker_id_card_orders_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOmuck_truck_worker_id_card_orders_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_worker_id_card_orders_avg_order_by(ctx context.Context, obj interface{}) (model.MuckTruckWorkerIDCardOrdersAvgOrderBy, error) {
	var it model.MuckTruckWorkerIDCardOrdersAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "preview_number_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("preview_number_id"))
			it.PreviewNumberID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_worker_id_card_orders_bool_exp(ctx context.Context, obj interface{}) (model.MuckTruckWorkerIDCardOrdersBoolExp, error) {
	var it model.MuckTruckWorkerIDCardOrdersBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOmuck_truck_worker_id_card_orders_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOmuck_truck_worker_id_card_orders_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOmuck_truck_worker_id_card_orders_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "preview_number_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("preview_number_id"))
			it.PreviewNumberID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_worker_id_card_orders_inc_input(ctx context.Context, obj interface{}) (model.MuckTruckWorkerIDCardOrdersIncInput, error) {
	var it model.MuckTruckWorkerIDCardOrdersIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "preview_number_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("preview_number_id"))
			it.PreviewNumberID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_worker_id_card_orders_insert_input(ctx context.Context, obj interface{}) (model.MuckTruckWorkerIDCardOrdersInsertInput, error) {
	var it model.MuckTruckWorkerIDCardOrdersInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "preview_number_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("preview_number_id"))
			it.PreviewNumberID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_worker_id_card_orders_max_order_by(ctx context.Context, obj interface{}) (model.MuckTruckWorkerIDCardOrdersMaxOrderBy, error) {
	var it model.MuckTruckWorkerIDCardOrdersMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "preview_number_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("preview_number_id"))
			it.PreviewNumberID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_worker_id_card_orders_min_order_by(ctx context.Context, obj interface{}) (model.MuckTruckWorkerIDCardOrdersMinOrderBy, error) {
	var it model.MuckTruckWorkerIDCardOrdersMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "preview_number_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("preview_number_id"))
			it.PreviewNumberID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_worker_id_card_orders_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.MuckTruckWorkerIDCardOrdersObjRelInsertInput, error) {
	var it model.MuckTruckWorkerIDCardOrdersObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNmuck_truck_worker_id_card_orders_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOmuck_truck_worker_id_card_orders_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_worker_id_card_orders_on_conflict(ctx context.Context, obj interface{}) (model.MuckTruckWorkerIDCardOrdersOnConflict, error) {
	var it model.MuckTruckWorkerIDCardOrdersOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNmuck_truck_worker_id_card_orders_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNmuck_truck_worker_id_card_orders_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOmuck_truck_worker_id_card_orders_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_worker_id_card_orders_order_by(ctx context.Context, obj interface{}) (model.MuckTruckWorkerIDCardOrdersOrderBy, error) {
	var it model.MuckTruckWorkerIDCardOrdersOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "preview_number_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("preview_number_id"))
			it.PreviewNumberID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_worker_id_card_orders_pk_columns_input(ctx context.Context, obj interface{}) (model.MuckTruckWorkerIDCardOrdersPkColumnsInput, error) {
	var it model.MuckTruckWorkerIDCardOrdersPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_worker_id_card_orders_set_input(ctx context.Context, obj interface{}) (model.MuckTruckWorkerIDCardOrdersSetInput, error) {
	var it model.MuckTruckWorkerIDCardOrdersSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "preview_number_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("preview_number_id"))
			it.PreviewNumberID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_worker_id_card_orders_stddev_order_by(ctx context.Context, obj interface{}) (model.MuckTruckWorkerIDCardOrdersStddevOrderBy, error) {
	var it model.MuckTruckWorkerIDCardOrdersStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "preview_number_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("preview_number_id"))
			it.PreviewNumberID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_worker_id_card_orders_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.MuckTruckWorkerIDCardOrdersStddevPopOrderBy, error) {
	var it model.MuckTruckWorkerIDCardOrdersStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "preview_number_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("preview_number_id"))
			it.PreviewNumberID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_worker_id_card_orders_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.MuckTruckWorkerIDCardOrdersStddevSampOrderBy, error) {
	var it model.MuckTruckWorkerIDCardOrdersStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "preview_number_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("preview_number_id"))
			it.PreviewNumberID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_worker_id_card_orders_sum_order_by(ctx context.Context, obj interface{}) (model.MuckTruckWorkerIDCardOrdersSumOrderBy, error) {
	var it model.MuckTruckWorkerIDCardOrdersSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "preview_number_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("preview_number_id"))
			it.PreviewNumberID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_worker_id_card_orders_var_pop_order_by(ctx context.Context, obj interface{}) (model.MuckTruckWorkerIDCardOrdersVarPopOrderBy, error) {
	var it model.MuckTruckWorkerIDCardOrdersVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "preview_number_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("preview_number_id"))
			it.PreviewNumberID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_worker_id_card_orders_var_samp_order_by(ctx context.Context, obj interface{}) (model.MuckTruckWorkerIDCardOrdersVarSampOrderBy, error) {
	var it model.MuckTruckWorkerIDCardOrdersVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "preview_number_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("preview_number_id"))
			it.PreviewNumberID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputmuck_truck_worker_id_card_orders_variance_order_by(ctx context.Context, obj interface{}) (model.MuckTruckWorkerIDCardOrdersVarianceOrderBy, error) {
	var it model.MuckTruckWorkerIDCardOrdersVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "preview_number_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("preview_number_id"))
			it.PreviewNumberID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnumeric_comparison_exp(ctx context.Context, obj interface{}) (model1.NumericComparisonExp, error) {
	var it model1.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOnumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOnumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputoperating_vehicle_info_aggregate_order_by(ctx context.Context, obj interface{}) (model.OperatingVehicleInfoAggregateOrderBy, error) {
	var it model.OperatingVehicleInfoAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOoperating_vehicle_info_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOoperating_vehicle_info_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOoperating_vehicle_info_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOoperating_vehicle_info_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOoperating_vehicle_info_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOoperating_vehicle_info_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOoperating_vehicle_info_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOoperating_vehicle_info_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOoperating_vehicle_info_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOoperating_vehicle_info_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputoperating_vehicle_info_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.OperatingVehicleInfoArrRelInsertInput, error) {
	var it model.OperatingVehicleInfoArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNoperating_vehicle_info_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOoperating_vehicle_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputoperating_vehicle_info_avg_order_by(ctx context.Context, obj interface{}) (model.OperatingVehicleInfoAvgOrderBy, error) {
	var it model.OperatingVehicleInfoAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "platform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platform"))
			it.Platform, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrap_time_check":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrap_time_check"))
			it.ScrapTimeCheck, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_library":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_library"))
			it.TemporaryLibrary, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_transport_bureau":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_transport_bureau"))
			it.TemporaryTransportBureau, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputoperating_vehicle_info_bool_exp(ctx context.Context, obj interface{}) (model.OperatingVehicleInfoBoolExp, error) {
	var it model.OperatingVehicleInfoBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOoperating_vehicle_info_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOoperating_vehicle_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOoperating_vehicle_info_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "administrative_region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("administrative_region"))
			it.AdministrativeRegion, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			it.Agent, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_number"))
			it.ContactNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_time"))
			it.ContractTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_license_owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_license_owner"))
			it.DrivingLicenseOwner, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_online_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_online_time"))
			it.FirstOnlineTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "installation_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installation_time"))
			it.InstallationTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_BD":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_BD"))
			it.IsBd, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_active"))
			it.IsActive, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_applay_terminal_installation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_applay_terminal_installation"))
			it.IsApplayTerminalInstallation, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_block":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_block"))
			it.IsBlock, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_engineering_vehicle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_engineering_vehicle"))
			it.IsEngineeringVehicle, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_function_ok":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_function_ok"))
			it.IsFunctionOk, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_in_operating_system":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_in_operating_system"))
			it.IsInOperatingSystem, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_in_upload_platform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_in_upload_platform"))
			it.IsInUploadPlatform, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_need_supervise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_need_supervise"))
			it.IsNeedSupervise, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_supervise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_supervise"))
			it.IsSupervise, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_binding_terminal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_binding_terminal_time"))
			it.LastBindingTerminalTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_photo"))
			it.LicensePlatePhoto, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_photo"))
			it.OtherPhoto, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "platform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platform"))
			it.Platform, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "position_db_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("position_db_id"))
			it.PositionDbID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrap_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrap_reason"))
			it.ScrapReason, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrap_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrap_time"))
			it.ScrapTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrap_time_check":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrap_time_check"))
			it.ScrapTimeCheck, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "serial_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serial_number"))
			it.SerialNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_expiration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_expiration_time"))
			it.ServiceExpirationTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_mode_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_mode_status"))
			it.SpeedModeStatus, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_mode_status_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_mode_status_time"))
			it.SpeedModeStatusTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_library":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_library"))
			it.TemporaryLibrary, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_transport_bureau":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_transport_bureau"))
			it.TemporaryTransportBureau, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputoperating_vehicle_info_inc_input(ctx context.Context, obj interface{}) (model.OperatingVehicleInfoIncInput, error) {
	var it model.OperatingVehicleInfoIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "platform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platform"))
			it.Platform, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrap_time_check":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrap_time_check"))
			it.ScrapTimeCheck, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_library":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_library"))
			it.TemporaryLibrary, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_transport_bureau":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_transport_bureau"))
			it.TemporaryTransportBureau, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputoperating_vehicle_info_insert_input(ctx context.Context, obj interface{}) (model.OperatingVehicleInfoInsertInput, error) {
	var it model.OperatingVehicleInfoInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "administrative_region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("administrative_region"))
			it.AdministrativeRegion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			it.Agent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_number"))
			it.ContactNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_time"))
			it.ContractTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_license_owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_license_owner"))
			it.DrivingLicenseOwner, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_online_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_online_time"))
			it.FirstOnlineTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "installation_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installation_time"))
			it.InstallationTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_BD":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_BD"))
			it.IsBd, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_active"))
			it.IsActive, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_applay_terminal_installation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_applay_terminal_installation"))
			it.IsApplayTerminalInstallation, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_block":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_block"))
			it.IsBlock, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_engineering_vehicle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_engineering_vehicle"))
			it.IsEngineeringVehicle, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_function_ok":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_function_ok"))
			it.IsFunctionOk, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_in_operating_system":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_in_operating_system"))
			it.IsInOperatingSystem, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_in_upload_platform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_in_upload_platform"))
			it.IsInUploadPlatform, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_need_supervise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_need_supervise"))
			it.IsNeedSupervise, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_supervise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_supervise"))
			it.IsSupervise, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_binding_terminal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_binding_terminal_time"))
			it.LastBindingTerminalTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_photo"))
			it.LicensePlatePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_photo"))
			it.OtherPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "platform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platform"))
			it.Platform, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "position_db_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("position_db_id"))
			it.PositionDbID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrap_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrap_reason"))
			it.ScrapReason, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrap_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrap_time"))
			it.ScrapTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrap_time_check":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrap_time_check"))
			it.ScrapTimeCheck, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "serial_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serial_number"))
			it.SerialNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_expiration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_expiration_time"))
			it.ServiceExpirationTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_mode_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_mode_status"))
			it.SpeedModeStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_mode_status_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_mode_status_time"))
			it.SpeedModeStatusTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_library":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_library"))
			it.TemporaryLibrary, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_transport_bureau":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_transport_bureau"))
			it.TemporaryTransportBureau, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputoperating_vehicle_info_max_order_by(ctx context.Context, obj interface{}) (model.OperatingVehicleInfoMaxOrderBy, error) {
	var it model.OperatingVehicleInfoMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "administrative_region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("administrative_region"))
			it.AdministrativeRegion, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			it.Agent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_number"))
			it.ContactNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_time"))
			it.ContractTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_license_owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_license_owner"))
			it.DrivingLicenseOwner, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_online_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_online_time"))
			it.FirstOnlineTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "installation_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installation_time"))
			it.InstallationTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_binding_terminal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_binding_terminal_time"))
			it.LastBindingTerminalTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_photo"))
			it.LicensePlatePhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_photo"))
			it.OtherPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "platform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platform"))
			it.Platform, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "position_db_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("position_db_id"))
			it.PositionDbID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrap_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrap_reason"))
			it.ScrapReason, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrap_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrap_time"))
			it.ScrapTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrap_time_check":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrap_time_check"))
			it.ScrapTimeCheck, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "serial_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serial_number"))
			it.SerialNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_expiration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_expiration_time"))
			it.ServiceExpirationTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_mode_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_mode_status"))
			it.SpeedModeStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_mode_status_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_mode_status_time"))
			it.SpeedModeStatusTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_library":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_library"))
			it.TemporaryLibrary, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_transport_bureau":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_transport_bureau"))
			it.TemporaryTransportBureau, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputoperating_vehicle_info_min_order_by(ctx context.Context, obj interface{}) (model.OperatingVehicleInfoMinOrderBy, error) {
	var it model.OperatingVehicleInfoMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "administrative_region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("administrative_region"))
			it.AdministrativeRegion, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			it.Agent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_number"))
			it.ContactNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_time"))
			it.ContractTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_license_owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_license_owner"))
			it.DrivingLicenseOwner, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_online_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_online_time"))
			it.FirstOnlineTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "installation_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installation_time"))
			it.InstallationTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_binding_terminal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_binding_terminal_time"))
			it.LastBindingTerminalTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_photo"))
			it.LicensePlatePhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_photo"))
			it.OtherPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "platform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platform"))
			it.Platform, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "position_db_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("position_db_id"))
			it.PositionDbID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrap_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrap_reason"))
			it.ScrapReason, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrap_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrap_time"))
			it.ScrapTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrap_time_check":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrap_time_check"))
			it.ScrapTimeCheck, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "serial_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serial_number"))
			it.SerialNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_expiration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_expiration_time"))
			it.ServiceExpirationTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_mode_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_mode_status"))
			it.SpeedModeStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_mode_status_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_mode_status_time"))
			it.SpeedModeStatusTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_library":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_library"))
			it.TemporaryLibrary, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_transport_bureau":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_transport_bureau"))
			it.TemporaryTransportBureau, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputoperating_vehicle_info_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.OperatingVehicleInfoObjRelInsertInput, error) {
	var it model.OperatingVehicleInfoObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNoperating_vehicle_info_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOoperating_vehicle_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputoperating_vehicle_info_on_conflict(ctx context.Context, obj interface{}) (model.OperatingVehicleInfoOnConflict, error) {
	var it model.OperatingVehicleInfoOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNoperating_vehicle_info_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNoperating_vehicle_info_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOoperating_vehicle_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputoperating_vehicle_info_order_by(ctx context.Context, obj interface{}) (model.OperatingVehicleInfoOrderBy, error) {
	var it model.OperatingVehicleInfoOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "administrative_region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("administrative_region"))
			it.AdministrativeRegion, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			it.Agent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_number"))
			it.ContactNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_time"))
			it.ContractTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_license_owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_license_owner"))
			it.DrivingLicenseOwner, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_online_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_online_time"))
			it.FirstOnlineTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "installation_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installation_time"))
			it.InstallationTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_BD":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_BD"))
			it.IsBd, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_active"))
			it.IsActive, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_applay_terminal_installation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_applay_terminal_installation"))
			it.IsApplayTerminalInstallation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_block":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_block"))
			it.IsBlock, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_engineering_vehicle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_engineering_vehicle"))
			it.IsEngineeringVehicle, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_function_ok":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_function_ok"))
			it.IsFunctionOk, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_in_operating_system":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_in_operating_system"))
			it.IsInOperatingSystem, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_in_upload_platform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_in_upload_platform"))
			it.IsInUploadPlatform, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_need_supervise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_need_supervise"))
			it.IsNeedSupervise, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_supervise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_supervise"))
			it.IsSupervise, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_binding_terminal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_binding_terminal_time"))
			it.LastBindingTerminalTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_photo"))
			it.LicensePlatePhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_photo"))
			it.OtherPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "platform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platform"))
			it.Platform, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "position_db_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("position_db_id"))
			it.PositionDbID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrap_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrap_reason"))
			it.ScrapReason, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrap_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrap_time"))
			it.ScrapTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrap_time_check":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrap_time_check"))
			it.ScrapTimeCheck, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "serial_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serial_number"))
			it.SerialNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_expiration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_expiration_time"))
			it.ServiceExpirationTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_mode_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_mode_status"))
			it.SpeedModeStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_mode_status_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_mode_status_time"))
			it.SpeedModeStatusTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_library":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_library"))
			it.TemporaryLibrary, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_transport_bureau":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_transport_bureau"))
			it.TemporaryTransportBureau, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputoperating_vehicle_info_pk_columns_input(ctx context.Context, obj interface{}) (model.OperatingVehicleInfoPkColumnsInput, error) {
	var it model.OperatingVehicleInfoPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputoperating_vehicle_info_set_input(ctx context.Context, obj interface{}) (model.OperatingVehicleInfoSetInput, error) {
	var it model.OperatingVehicleInfoSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "administrative_region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("administrative_region"))
			it.AdministrativeRegion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			it.Agent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_number"))
			it.ContactNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_time"))
			it.ContractTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_license_owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_license_owner"))
			it.DrivingLicenseOwner, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_online_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_online_time"))
			it.FirstOnlineTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "installation_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installation_time"))
			it.InstallationTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_BD":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_BD"))
			it.IsBd, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_active"))
			it.IsActive, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_applay_terminal_installation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_applay_terminal_installation"))
			it.IsApplayTerminalInstallation, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_block":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_block"))
			it.IsBlock, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_engineering_vehicle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_engineering_vehicle"))
			it.IsEngineeringVehicle, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_function_ok":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_function_ok"))
			it.IsFunctionOk, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_in_operating_system":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_in_operating_system"))
			it.IsInOperatingSystem, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_in_upload_platform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_in_upload_platform"))
			it.IsInUploadPlatform, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_need_supervise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_need_supervise"))
			it.IsNeedSupervise, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_supervise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_supervise"))
			it.IsSupervise, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_binding_terminal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_binding_terminal_time"))
			it.LastBindingTerminalTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_photo"))
			it.LicensePlatePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_photo"))
			it.OtherPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "platform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platform"))
			it.Platform, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "position_db_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("position_db_id"))
			it.PositionDbID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrap_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrap_reason"))
			it.ScrapReason, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrap_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrap_time"))
			it.ScrapTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrap_time_check":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrap_time_check"))
			it.ScrapTimeCheck, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "serial_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serial_number"))
			it.SerialNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_expiration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_expiration_time"))
			it.ServiceExpirationTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_mode_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_mode_status"))
			it.SpeedModeStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_mode_status_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_mode_status_time"))
			it.SpeedModeStatusTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_library":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_library"))
			it.TemporaryLibrary, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_transport_bureau":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_transport_bureau"))
			it.TemporaryTransportBureau, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputoperating_vehicle_info_stddev_order_by(ctx context.Context, obj interface{}) (model.OperatingVehicleInfoStddevOrderBy, error) {
	var it model.OperatingVehicleInfoStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "platform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platform"))
			it.Platform, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrap_time_check":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrap_time_check"))
			it.ScrapTimeCheck, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_library":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_library"))
			it.TemporaryLibrary, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_transport_bureau":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_transport_bureau"))
			it.TemporaryTransportBureau, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputoperating_vehicle_info_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.OperatingVehicleInfoStddevPopOrderBy, error) {
	var it model.OperatingVehicleInfoStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "platform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platform"))
			it.Platform, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrap_time_check":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrap_time_check"))
			it.ScrapTimeCheck, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_library":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_library"))
			it.TemporaryLibrary, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_transport_bureau":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_transport_bureau"))
			it.TemporaryTransportBureau, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputoperating_vehicle_info_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.OperatingVehicleInfoStddevSampOrderBy, error) {
	var it model.OperatingVehicleInfoStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "platform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platform"))
			it.Platform, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrap_time_check":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrap_time_check"))
			it.ScrapTimeCheck, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_library":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_library"))
			it.TemporaryLibrary, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_transport_bureau":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_transport_bureau"))
			it.TemporaryTransportBureau, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputoperating_vehicle_info_sum_order_by(ctx context.Context, obj interface{}) (model.OperatingVehicleInfoSumOrderBy, error) {
	var it model.OperatingVehicleInfoSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "platform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platform"))
			it.Platform, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrap_time_check":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrap_time_check"))
			it.ScrapTimeCheck, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_library":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_library"))
			it.TemporaryLibrary, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_transport_bureau":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_transport_bureau"))
			it.TemporaryTransportBureau, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputoperating_vehicle_info_var_pop_order_by(ctx context.Context, obj interface{}) (model.OperatingVehicleInfoVarPopOrderBy, error) {
	var it model.OperatingVehicleInfoVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "platform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platform"))
			it.Platform, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrap_time_check":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrap_time_check"))
			it.ScrapTimeCheck, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_library":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_library"))
			it.TemporaryLibrary, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_transport_bureau":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_transport_bureau"))
			it.TemporaryTransportBureau, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputoperating_vehicle_info_var_samp_order_by(ctx context.Context, obj interface{}) (model.OperatingVehicleInfoVarSampOrderBy, error) {
	var it model.OperatingVehicleInfoVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "platform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platform"))
			it.Platform, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrap_time_check":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrap_time_check"))
			it.ScrapTimeCheck, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_library":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_library"))
			it.TemporaryLibrary, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_transport_bureau":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_transport_bureau"))
			it.TemporaryTransportBureau, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputoperating_vehicle_info_variance_order_by(ctx context.Context, obj interface{}) (model.OperatingVehicleInfoVarianceOrderBy, error) {
	var it model.OperatingVehicleInfoVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "muck_truck_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_type"))
			it.MuckTruckType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "platform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platform"))
			it.Platform, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrap_time_check":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrap_time_check"))
			it.ScrapTimeCheck, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_library":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_library"))
			it.TemporaryLibrary, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "temporary_transport_bureau":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("temporary_transport_bureau"))
			it.TemporaryTransportBureau, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputowner_info_aggregate_order_by(ctx context.Context, obj interface{}) (model.OwnerInfoAggregateOrderBy, error) {
	var it model.OwnerInfoAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOowner_info_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOowner_info_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOowner_info_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOowner_info_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOowner_info_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOowner_info_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOowner_info_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOowner_info_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOowner_info_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOowner_info_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputowner_info_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.OwnerInfoArrRelInsertInput, error) {
	var it model.OwnerInfoArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNowner_info_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOowner_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputowner_info_avg_order_by(ctx context.Context, obj interface{}) (model.OwnerInfoAvgOrderBy, error) {
	var it model.OwnerInfoAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputowner_info_bool_exp(ctx context.Context, obj interface{}) (model.OwnerInfoBoolExp, error) {
	var it model.OwnerInfoBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOowner_info_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOowner_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOowner_info_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			it.Agent, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "cellphone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cellphone"))
			it.Cellphone, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiry_date"))
			it.ExpiryDate, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_number"))
			it.IDNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner_id"))
			it.OwnerID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputowner_info_inc_input(ctx context.Context, obj interface{}) (model.OwnerInfoIncInput, error) {
	var it model.OwnerInfoIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputowner_info_insert_input(ctx context.Context, obj interface{}) (model.OwnerInfoInsertInput, error) {
	var it model.OwnerInfoInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			it.Agent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cellphone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cellphone"))
			it.Cellphone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiry_date"))
			it.ExpiryDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_number"))
			it.IDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner_id"))
			it.OwnerID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputowner_info_max_order_by(ctx context.Context, obj interface{}) (model.OwnerInfoMaxOrderBy, error) {
	var it model.OwnerInfoMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			it.Agent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "cellphone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cellphone"))
			it.Cellphone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiry_date"))
			it.ExpiryDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_number"))
			it.IDNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner_id"))
			it.OwnerID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputowner_info_min_order_by(ctx context.Context, obj interface{}) (model.OwnerInfoMinOrderBy, error) {
	var it model.OwnerInfoMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			it.Agent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "cellphone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cellphone"))
			it.Cellphone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiry_date"))
			it.ExpiryDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_number"))
			it.IDNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner_id"))
			it.OwnerID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputowner_info_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.OwnerInfoObjRelInsertInput, error) {
	var it model.OwnerInfoObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNowner_info_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOowner_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputowner_info_on_conflict(ctx context.Context, obj interface{}) (model.OwnerInfoOnConflict, error) {
	var it model.OwnerInfoOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNowner_info_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNowner_info_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOowner_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputowner_info_order_by(ctx context.Context, obj interface{}) (model.OwnerInfoOrderBy, error) {
	var it model.OwnerInfoOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			it.Agent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "cellphone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cellphone"))
			it.Cellphone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiry_date"))
			it.ExpiryDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_number"))
			it.IDNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner_id"))
			it.OwnerID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputowner_info_pk_columns_input(ctx context.Context, obj interface{}) (model.OwnerInfoPkColumnsInput, error) {
	var it model.OwnerInfoPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputowner_info_set_input(ctx context.Context, obj interface{}) (model.OwnerInfoSetInput, error) {
	var it model.OwnerInfoSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			it.Agent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cellphone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cellphone"))
			it.Cellphone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiry_date"))
			it.ExpiryDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_number"))
			it.IDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner_id"))
			it.OwnerID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputowner_info_stddev_order_by(ctx context.Context, obj interface{}) (model.OwnerInfoStddevOrderBy, error) {
	var it model.OwnerInfoStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputowner_info_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.OwnerInfoStddevPopOrderBy, error) {
	var it model.OwnerInfoStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputowner_info_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.OwnerInfoStddevSampOrderBy, error) {
	var it model.OwnerInfoStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputowner_info_sum_order_by(ctx context.Context, obj interface{}) (model.OwnerInfoSumOrderBy, error) {
	var it model.OwnerInfoSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputowner_info_var_pop_order_by(ctx context.Context, obj interface{}) (model.OwnerInfoVarPopOrderBy, error) {
	var it model.OwnerInfoVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputowner_info_var_samp_order_by(ctx context.Context, obj interface{}) (model.OwnerInfoVarSampOrderBy, error) {
	var it model.OwnerInfoVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputowner_info_variance_order_by(ctx context.Context, obj interface{}) (model.OwnerInfoVarianceOrderBy, error) {
	var it model.OwnerInfoVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtimestamp_comparison_exp(ctx context.Context, obj interface{}) (model.TimestampComparisonExp, error) {
	var it model.TimestampComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOtimestamp2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOtimestamp2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtimestamptz_comparison_exp(ctx context.Context, obj interface{}) (model1.TimestamptzComparisonExp, error) {
	var it model1.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_aggregate_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoAggregateOrderBy, error) {
	var it model.VehicleInfoAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOvehicle_info_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOvehicle_info_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOvehicle_info_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOvehicle_info_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOvehicle_info_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOvehicle_info_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOvehicle_info_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOvehicle_info_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOvehicle_info_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOvehicle_info_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.VehicleInfoArrRelInsertInput, error) {
	var it model.VehicleInfoArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNvehicle_info_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOvehicle_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_avg_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoAvgOrderBy, error) {
	var it model.VehicleInfoAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_bool_exp(ctx context.Context, obj interface{}) (model.VehicleInfoBoolExp, error) {
	var it model.VehicleInfoBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOvehicle_info_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOvehicle_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOvehicle_info_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamp_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐTimestampComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamp_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐTimestampComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOtimestamp_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐTimestampComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_licensee_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_licensee_pic"))
			it.DrivingLicenseePic, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "inspection_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspection_date"))
			it.InspectionDate, err = ec.unmarshalOtimestamp_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐTimestampComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_date"))
			it.InsuranceDate, err = ec.unmarshalOtimestamp_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐTimestampComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_active"))
			it.IsActive, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_apply_install_terminal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_apply_install_terminal"))
			it.IsApplyInstallTerminal, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_complete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_complete"))
			it.IsComplete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_import":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_import"))
			it.IsImport, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_upload_province":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_upload_province"))
			it.IsUploadProvince, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_route"))
			it.OperatingRoute, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			it.Owner, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_at"))
			it.RecordAt, err = ec.unmarshalOtimestamp_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐTimestampComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_by"))
			it.RecordBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark_in"))
			it.RemarkIn, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "retirement_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("retirement_date"))
			it.RetirementDate, err = ec.unmarshalOtimestamp_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐTimestampComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_transport_license_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_transport_license_number"))
			it.RoadTransportLicenseNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamp_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐTimestampComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOtimestamp_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐTimestampComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_nature"))
			it.UseNature, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_displacement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_displacement"))
			it.VehicleDisplacement, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_identification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_identification_number"))
			it.VehicleIdentificationNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_maintenances":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_maintenances"))
			it.VehicleMaintenances, err = ec.unmarshalO_jsonb_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐJsonbComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager"))
			it.VehicleManager, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_id_card"))
			it.VehicleManagerIDCard, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_phone"))
			it.VehicleManagerPhone, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_change_log_aggregate_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoChangeLogAggregateOrderBy, error) {
	var it model.VehicleInfoChangeLogAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOvehicle_info_change_log_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOvehicle_info_change_log_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOvehicle_info_change_log_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOvehicle_info_change_log_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOvehicle_info_change_log_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOvehicle_info_change_log_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOvehicle_info_change_log_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOvehicle_info_change_log_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOvehicle_info_change_log_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOvehicle_info_change_log_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_change_log_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.VehicleInfoChangeLogArrRelInsertInput, error) {
	var it model.VehicleInfoChangeLogArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNvehicle_info_change_log_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOvehicle_info_change_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_change_log_avg_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoChangeLogAvgOrderBy, error) {
	var it model.VehicleInfoChangeLogAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_change_log_bool_exp(ctx context.Context, obj interface{}) (model.VehicleInfoChangeLogBoolExp, error) {
	var it model.VehicleInfoChangeLogBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOvehicle_info_change_log_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOvehicle_info_change_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOvehicle_info_change_log_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamp_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐTimestampComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamp_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐTimestampComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOtimestamp_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐTimestampComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_licensee_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_licensee_pic"))
			it.DrivingLicenseePic, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "inspection_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspection_date"))
			it.InspectionDate, err = ec.unmarshalOtimestamp_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐTimestampComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_date"))
			it.InsuranceDate, err = ec.unmarshalOtimestamp_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐTimestampComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_active"))
			it.IsActive, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_apply_install_terminal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_apply_install_terminal"))
			it.IsApplyInstallTerminal, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_complete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_complete"))
			it.IsComplete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_import":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_import"))
			it.IsImport, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_upload_province":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_upload_province"))
			it.IsUploadProvince, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_route"))
			it.OperatingRoute, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			it.Owner, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_at"))
			it.RecordAt, err = ec.unmarshalOtimestamp_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐTimestampComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_by"))
			it.RecordBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark_in"))
			it.RemarkIn, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "retirement_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("retirement_date"))
			it.RetirementDate, err = ec.unmarshalOtimestamp_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐTimestampComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_transport_license_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_transport_license_number"))
			it.RoadTransportLicenseNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamp_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐTimestampComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOtimestamp_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐTimestampComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_nature"))
			it.UseNature, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_displacement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_displacement"))
			it.VehicleDisplacement, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_identification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_identification_number"))
			it.VehicleIdentificationNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_info_change_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_info_change_id"))
			it.VehicleInfoChangeID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_maintenances":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_maintenances"))
			it.VehicleMaintenances, err = ec.unmarshalO_jsonb_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐJsonbComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager"))
			it.VehicleManager, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_id_card"))
			it.VehicleManagerIDCard, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_phone"))
			it.VehicleManagerPhone, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_change_log_inc_input(ctx context.Context, obj interface{}) (model.VehicleInfoChangeLogIncInput, error) {
	var it model.VehicleInfoChangeLogIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_change_log_insert_input(ctx context.Context, obj interface{}) (model.VehicleInfoChangeLogInsertInput, error) {
	var it model.VehicleInfoChangeLogInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_licensee_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_licensee_pic"))
			it.DrivingLicenseePic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "inspection_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspection_date"))
			it.InspectionDate, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_date"))
			it.InsuranceDate, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_active"))
			it.IsActive, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_apply_install_terminal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_apply_install_terminal"))
			it.IsApplyInstallTerminal, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_complete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_complete"))
			it.IsComplete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_import":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_import"))
			it.IsImport, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_upload_province":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_upload_province"))
			it.IsUploadProvince, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_route"))
			it.OperatingRoute, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			it.Owner, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_at"))
			it.RecordAt, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_by"))
			it.RecordBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark_in"))
			it.RemarkIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "retirement_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("retirement_date"))
			it.RetirementDate, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_transport_license_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_transport_license_number"))
			it.RoadTransportLicenseNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_nature"))
			it.UseNature, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_displacement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_displacement"))
			it.VehicleDisplacement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_identification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_identification_number"))
			it.VehicleIdentificationNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_info_change_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_info_change_id"))
			it.VehicleInfoChangeID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_maintenances":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_maintenances"))
			it.VehicleMaintenances, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager"))
			it.VehicleManager, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_id_card"))
			it.VehicleManagerIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_phone"))
			it.VehicleManagerPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_change_log_max_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoChangeLogMaxOrderBy, error) {
	var it model.VehicleInfoChangeLogMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_licensee_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_licensee_pic"))
			it.DrivingLicenseePic, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "inspection_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspection_date"))
			it.InspectionDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_date"))
			it.InsuranceDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_route"))
			it.OperatingRoute, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			it.Owner, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_at"))
			it.RecordAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_by"))
			it.RecordBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark_in"))
			it.RemarkIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "retirement_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("retirement_date"))
			it.RetirementDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_transport_license_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_transport_license_number"))
			it.RoadTransportLicenseNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_nature"))
			it.UseNature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_displacement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_displacement"))
			it.VehicleDisplacement, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_identification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_identification_number"))
			it.VehicleIdentificationNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_info_change_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_info_change_id"))
			it.VehicleInfoChangeID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager"))
			it.VehicleManager, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_id_card"))
			it.VehicleManagerIDCard, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_phone"))
			it.VehicleManagerPhone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_change_log_min_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoChangeLogMinOrderBy, error) {
	var it model.VehicleInfoChangeLogMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_licensee_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_licensee_pic"))
			it.DrivingLicenseePic, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "inspection_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspection_date"))
			it.InspectionDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_date"))
			it.InsuranceDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_route"))
			it.OperatingRoute, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			it.Owner, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_at"))
			it.RecordAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_by"))
			it.RecordBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark_in"))
			it.RemarkIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "retirement_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("retirement_date"))
			it.RetirementDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_transport_license_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_transport_license_number"))
			it.RoadTransportLicenseNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_nature"))
			it.UseNature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_displacement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_displacement"))
			it.VehicleDisplacement, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_identification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_identification_number"))
			it.VehicleIdentificationNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_info_change_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_info_change_id"))
			it.VehicleInfoChangeID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager"))
			it.VehicleManager, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_id_card"))
			it.VehicleManagerIDCard, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_phone"))
			it.VehicleManagerPhone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_change_log_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.VehicleInfoChangeLogObjRelInsertInput, error) {
	var it model.VehicleInfoChangeLogObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNvehicle_info_change_log_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOvehicle_info_change_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_change_log_on_conflict(ctx context.Context, obj interface{}) (model.VehicleInfoChangeLogOnConflict, error) {
	var it model.VehicleInfoChangeLogOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNvehicle_info_change_log_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNvehicle_info_change_log_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOvehicle_info_change_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_change_log_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoChangeLogOrderBy, error) {
	var it model.VehicleInfoChangeLogOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_licensee_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_licensee_pic"))
			it.DrivingLicenseePic, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "inspection_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspection_date"))
			it.InspectionDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_date"))
			it.InsuranceDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_active"))
			it.IsActive, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_apply_install_terminal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_apply_install_terminal"))
			it.IsApplyInstallTerminal, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_complete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_complete"))
			it.IsComplete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_import":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_import"))
			it.IsImport, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_upload_province":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_upload_province"))
			it.IsUploadProvince, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_route"))
			it.OperatingRoute, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			it.Owner, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_at"))
			it.RecordAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_by"))
			it.RecordBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark_in"))
			it.RemarkIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "retirement_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("retirement_date"))
			it.RetirementDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_transport_license_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_transport_license_number"))
			it.RoadTransportLicenseNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_nature"))
			it.UseNature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_displacement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_displacement"))
			it.VehicleDisplacement, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_identification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_identification_number"))
			it.VehicleIdentificationNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_info_change_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_info_change_id"))
			it.VehicleInfoChangeID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_maintenances":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_maintenances"))
			it.VehicleMaintenances, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager"))
			it.VehicleManager, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_id_card"))
			it.VehicleManagerIDCard, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_phone"))
			it.VehicleManagerPhone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_change_log_pk_columns_input(ctx context.Context, obj interface{}) (model.VehicleInfoChangeLogPkColumnsInput, error) {
	var it model.VehicleInfoChangeLogPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_info_change_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_info_change_id"))
			it.VehicleInfoChangeID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_change_log_set_input(ctx context.Context, obj interface{}) (model.VehicleInfoChangeLogSetInput, error) {
	var it model.VehicleInfoChangeLogSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_licensee_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_licensee_pic"))
			it.DrivingLicenseePic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "inspection_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspection_date"))
			it.InspectionDate, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_date"))
			it.InsuranceDate, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_active"))
			it.IsActive, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_apply_install_terminal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_apply_install_terminal"))
			it.IsApplyInstallTerminal, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_complete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_complete"))
			it.IsComplete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_import":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_import"))
			it.IsImport, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_upload_province":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_upload_province"))
			it.IsUploadProvince, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_route"))
			it.OperatingRoute, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			it.Owner, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_at"))
			it.RecordAt, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_by"))
			it.RecordBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark_in"))
			it.RemarkIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "retirement_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("retirement_date"))
			it.RetirementDate, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_transport_license_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_transport_license_number"))
			it.RoadTransportLicenseNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_nature"))
			it.UseNature, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_displacement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_displacement"))
			it.VehicleDisplacement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_identification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_identification_number"))
			it.VehicleIdentificationNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_info_change_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_info_change_id"))
			it.VehicleInfoChangeID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_maintenances":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_maintenances"))
			it.VehicleMaintenances, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager"))
			it.VehicleManager, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_id_card"))
			it.VehicleManagerIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_phone"))
			it.VehicleManagerPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_change_log_stddev_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoChangeLogStddevOrderBy, error) {
	var it model.VehicleInfoChangeLogStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_change_log_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoChangeLogStddevPopOrderBy, error) {
	var it model.VehicleInfoChangeLogStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_change_log_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoChangeLogStddevSampOrderBy, error) {
	var it model.VehicleInfoChangeLogStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_change_log_sum_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoChangeLogSumOrderBy, error) {
	var it model.VehicleInfoChangeLogSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_change_log_var_pop_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoChangeLogVarPopOrderBy, error) {
	var it model.VehicleInfoChangeLogVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_change_log_var_samp_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoChangeLogVarSampOrderBy, error) {
	var it model.VehicleInfoChangeLogVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_change_log_variance_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoChangeLogVarianceOrderBy, error) {
	var it model.VehicleInfoChangeLogVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_inc_input(ctx context.Context, obj interface{}) (model.VehicleInfoIncInput, error) {
	var it model.VehicleInfoIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_insert_input(ctx context.Context, obj interface{}) (model.VehicleInfoInsertInput, error) {
	var it model.VehicleInfoInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_licensee_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_licensee_pic"))
			it.DrivingLicenseePic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "inspection_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspection_date"))
			it.InspectionDate, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_date"))
			it.InsuranceDate, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_active"))
			it.IsActive, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_apply_install_terminal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_apply_install_terminal"))
			it.IsApplyInstallTerminal, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_complete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_complete"))
			it.IsComplete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_import":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_import"))
			it.IsImport, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_upload_province":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_upload_province"))
			it.IsUploadProvince, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_route"))
			it.OperatingRoute, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			it.Owner, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_at"))
			it.RecordAt, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_by"))
			it.RecordBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark_in"))
			it.RemarkIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "retirement_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("retirement_date"))
			it.RetirementDate, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_transport_license_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_transport_license_number"))
			it.RoadTransportLicenseNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_nature"))
			it.UseNature, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_displacement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_displacement"))
			it.VehicleDisplacement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_identification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_identification_number"))
			it.VehicleIdentificationNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_maintenances":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_maintenances"))
			it.VehicleMaintenances, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager"))
			it.VehicleManager, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_id_card"))
			it.VehicleManagerIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_phone"))
			it.VehicleManagerPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_max_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoMaxOrderBy, error) {
	var it model.VehicleInfoMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_licensee_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_licensee_pic"))
			it.DrivingLicenseePic, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "inspection_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspection_date"))
			it.InspectionDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_date"))
			it.InsuranceDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_route"))
			it.OperatingRoute, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			it.Owner, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_at"))
			it.RecordAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_by"))
			it.RecordBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark_in"))
			it.RemarkIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "retirement_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("retirement_date"))
			it.RetirementDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_transport_license_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_transport_license_number"))
			it.RoadTransportLicenseNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_nature"))
			it.UseNature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_displacement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_displacement"))
			it.VehicleDisplacement, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_identification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_identification_number"))
			it.VehicleIdentificationNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager"))
			it.VehicleManager, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_id_card"))
			it.VehicleManagerIDCard, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_phone"))
			it.VehicleManagerPhone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_min_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoMinOrderBy, error) {
	var it model.VehicleInfoMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_licensee_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_licensee_pic"))
			it.DrivingLicenseePic, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "inspection_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspection_date"))
			it.InspectionDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_date"))
			it.InsuranceDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_route"))
			it.OperatingRoute, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			it.Owner, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_at"))
			it.RecordAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_by"))
			it.RecordBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark_in"))
			it.RemarkIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "retirement_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("retirement_date"))
			it.RetirementDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_transport_license_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_transport_license_number"))
			it.RoadTransportLicenseNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_nature"))
			it.UseNature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_displacement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_displacement"))
			it.VehicleDisplacement, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_identification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_identification_number"))
			it.VehicleIdentificationNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager"))
			it.VehicleManager, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_id_card"))
			it.VehicleManagerIDCard, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_phone"))
			it.VehicleManagerPhone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.VehicleInfoObjRelInsertInput, error) {
	var it model.VehicleInfoObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNvehicle_info_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOvehicle_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_on_conflict(ctx context.Context, obj interface{}) (model.VehicleInfoOnConflict, error) {
	var it model.VehicleInfoOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNvehicle_info_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNvehicle_info_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOvehicle_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoOrderBy, error) {
	var it model.VehicleInfoOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_licensee_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_licensee_pic"))
			it.DrivingLicenseePic, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "inspection_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspection_date"))
			it.InspectionDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_date"))
			it.InsuranceDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_active"))
			it.IsActive, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_apply_install_terminal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_apply_install_terminal"))
			it.IsApplyInstallTerminal, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_complete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_complete"))
			it.IsComplete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_import":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_import"))
			it.IsImport, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_upload_province":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_upload_province"))
			it.IsUploadProvince, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_route"))
			it.OperatingRoute, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			it.Owner, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_at"))
			it.RecordAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_by"))
			it.RecordBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark_in"))
			it.RemarkIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "retirement_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("retirement_date"))
			it.RetirementDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_transport_license_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_transport_license_number"))
			it.RoadTransportLicenseNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_nature"))
			it.UseNature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_displacement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_displacement"))
			it.VehicleDisplacement, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_identification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_identification_number"))
			it.VehicleIdentificationNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_maintenances":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_maintenances"))
			it.VehicleMaintenances, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager"))
			it.VehicleManager, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_id_card"))
			it.VehicleManagerIDCard, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_phone"))
			it.VehicleManagerPhone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_pk_columns_input(ctx context.Context, obj interface{}) (model.VehicleInfoPkColumnsInput, error) {
	var it model.VehicleInfoPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_set_input(ctx context.Context, obj interface{}) (model.VehicleInfoSetInput, error) {
	var it model.VehicleInfoSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_licensee_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_licensee_pic"))
			it.DrivingLicenseePic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "inspection_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspection_date"))
			it.InspectionDate, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_date"))
			it.InsuranceDate, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_active"))
			it.IsActive, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_apply_install_terminal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_apply_install_terminal"))
			it.IsApplyInstallTerminal, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_complete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_complete"))
			it.IsComplete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_import":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_import"))
			it.IsImport, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_upload_province":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_upload_province"))
			it.IsUploadProvince, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_route"))
			it.OperatingRoute, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			it.Owner, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_at"))
			it.RecordAt, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_by"))
			it.RecordBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark_in"))
			it.RemarkIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "retirement_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("retirement_date"))
			it.RetirementDate, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_transport_license_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_transport_license_number"))
			it.RoadTransportLicenseNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOtimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_nature"))
			it.UseNature, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_displacement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_displacement"))
			it.VehicleDisplacement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_identification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_identification_number"))
			it.VehicleIdentificationNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_maintenances":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_maintenances"))
			it.VehicleMaintenances, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager"))
			it.VehicleManager, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_id_card"))
			it.VehicleManagerIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_phone"))
			it.VehicleManagerPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_stddev_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoStddevOrderBy, error) {
	var it model.VehicleInfoStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoStddevPopOrderBy, error) {
	var it model.VehicleInfoStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoStddevSampOrderBy, error) {
	var it model.VehicleInfoStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_sum_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoSumOrderBy, error) {
	var it model.VehicleInfoSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_var_pop_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoVarPopOrderBy, error) {
	var it model.VehicleInfoVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_var_samp_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoVarSampOrderBy, error) {
	var it model.VehicleInfoVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_variance_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoVarianceOrderBy, error) {
	var it model.VehicleInfoVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "car_rental_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("car_rental_price"))
			it.CarRentalPrice, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "insurance_company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insurance_company"))
			it.InsuranceCompany, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_brand":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_brand"))
			it.VehicleBrand, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_state"))
			it.VehicleState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_supervision_photo_aggregate_order_by(ctx context.Context, obj interface{}) (model.VehicleSupervisionPhotoAggregateOrderBy, error) {
	var it model.VehicleSupervisionPhotoAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOvehicle_supervision_photo_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOvehicle_supervision_photo_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOvehicle_supervision_photo_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOvehicle_supervision_photo_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOvehicle_supervision_photo_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOvehicle_supervision_photo_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOvehicle_supervision_photo_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOvehicle_supervision_photo_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOvehicle_supervision_photo_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOvehicle_supervision_photo_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_supervision_photo_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.VehicleSupervisionPhotoArrRelInsertInput, error) {
	var it model.VehicleSupervisionPhotoArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNvehicle_supervision_photo_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOvehicle_supervision_photo_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_supervision_photo_avg_order_by(ctx context.Context, obj interface{}) (model.VehicleSupervisionPhotoAvgOrderBy, error) {
	var it model.VehicleSupervisionPhotoAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_supervision_photo_bool_exp(ctx context.Context, obj interface{}) (model.VehicleSupervisionPhotoBoolExp, error) {
	var it model.VehicleSupervisionPhotoBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "IMEI":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IMEI"))
			it.Imei, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOvehicle_supervision_photo_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOvehicle_supervision_photo_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOvehicle_supervision_photo_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_address"))
			it.MonitoringPicAddress, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_name"))
			it.MonitoringPicName, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_upload_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_upload_time"))
			it.MonitoringPicUploadTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "photo_condition":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photo_condition"))
			it.PhotoCondition, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
			it.SupervisionPhotoID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time"))
			it.UpdateTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_supervision_photo_inc_input(ctx context.Context, obj interface{}) (model.VehicleSupervisionPhotoIncInput, error) {
	var it model.VehicleSupervisionPhotoIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_supervision_photo_insert_input(ctx context.Context, obj interface{}) (model.VehicleSupervisionPhotoInsertInput, error) {
	var it model.VehicleSupervisionPhotoInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "IMEI":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IMEI"))
			it.Imei, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_address"))
			it.MonitoringPicAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_name"))
			it.MonitoringPicName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_upload_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_upload_time"))
			it.MonitoringPicUploadTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "photo_condition":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photo_condition"))
			it.PhotoCondition, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
			it.SupervisionPhotoID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time"))
			it.UpdateTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_supervision_photo_max_order_by(ctx context.Context, obj interface{}) (model.VehicleSupervisionPhotoMaxOrderBy, error) {
	var it model.VehicleSupervisionPhotoMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "IMEI":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IMEI"))
			it.Imei, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_address"))
			it.MonitoringPicAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_name"))
			it.MonitoringPicName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_upload_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_upload_time"))
			it.MonitoringPicUploadTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "photo_condition":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photo_condition"))
			it.PhotoCondition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
			it.SupervisionPhotoID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time"))
			it.UpdateTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_supervision_photo_min_order_by(ctx context.Context, obj interface{}) (model.VehicleSupervisionPhotoMinOrderBy, error) {
	var it model.VehicleSupervisionPhotoMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "IMEI":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IMEI"))
			it.Imei, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_address"))
			it.MonitoringPicAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_name"))
			it.MonitoringPicName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_upload_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_upload_time"))
			it.MonitoringPicUploadTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "photo_condition":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photo_condition"))
			it.PhotoCondition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
			it.SupervisionPhotoID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time"))
			it.UpdateTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_supervision_photo_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.VehicleSupervisionPhotoObjRelInsertInput, error) {
	var it model.VehicleSupervisionPhotoObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNvehicle_supervision_photo_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOvehicle_supervision_photo_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_supervision_photo_on_conflict(ctx context.Context, obj interface{}) (model.VehicleSupervisionPhotoOnConflict, error) {
	var it model.VehicleSupervisionPhotoOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNvehicle_supervision_photo_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNvehicle_supervision_photo_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOvehicle_supervision_photo_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_supervision_photo_order_by(ctx context.Context, obj interface{}) (model.VehicleSupervisionPhotoOrderBy, error) {
	var it model.VehicleSupervisionPhotoOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "IMEI":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IMEI"))
			it.Imei, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_address"))
			it.MonitoringPicAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_name"))
			it.MonitoringPicName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_upload_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_upload_time"))
			it.MonitoringPicUploadTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "photo_condition":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photo_condition"))
			it.PhotoCondition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
			it.SupervisionPhotoID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time"))
			it.UpdateTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_supervision_photo_pk_columns_input(ctx context.Context, obj interface{}) (model.VehicleSupervisionPhotoPkColumnsInput, error) {
	var it model.VehicleSupervisionPhotoPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
			it.SupervisionPhotoID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_supervision_photo_set_input(ctx context.Context, obj interface{}) (model.VehicleSupervisionPhotoSetInput, error) {
	var it model.VehicleSupervisionPhotoSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "IMEI":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IMEI"))
			it.Imei, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_address"))
			it.MonitoringPicAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_name"))
			it.MonitoringPicName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_upload_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_upload_time"))
			it.MonitoringPicUploadTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "photo_condition":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photo_condition"))
			it.PhotoCondition, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
			it.SupervisionPhotoID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time"))
			it.UpdateTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_supervision_photo_stddev_order_by(ctx context.Context, obj interface{}) (model.VehicleSupervisionPhotoStddevOrderBy, error) {
	var it model.VehicleSupervisionPhotoStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_supervision_photo_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.VehicleSupervisionPhotoStddevPopOrderBy, error) {
	var it model.VehicleSupervisionPhotoStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_supervision_photo_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.VehicleSupervisionPhotoStddevSampOrderBy, error) {
	var it model.VehicleSupervisionPhotoStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_supervision_photo_sum_order_by(ctx context.Context, obj interface{}) (model.VehicleSupervisionPhotoSumOrderBy, error) {
	var it model.VehicleSupervisionPhotoSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_supervision_photo_var_pop_order_by(ctx context.Context, obj interface{}) (model.VehicleSupervisionPhotoVarPopOrderBy, error) {
	var it model.VehicleSupervisionPhotoVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_supervision_photo_var_samp_order_by(ctx context.Context, obj interface{}) (model.VehicleSupervisionPhotoVarSampOrderBy, error) {
	var it model.VehicleSupervisionPhotoVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_supervision_photo_variance_order_by(ctx context.Context, obj interface{}) (model.VehicleSupervisionPhotoVarianceOrderBy, error) {
	var it model.VehicleSupervisionPhotoVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var jJ_VEHICLEImplementors = []string{"JJ_VEHICLE"}

func (ec *executionContext) _JJ_VEHICLE(ctx context.Context, sel ast.SelectionSet, obj *model.JjVehicle) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jJ_VEHICLEImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JJ_VEHICLE")
		case "CCDJRQ":
			out.Values[i] = ec._JJ_VEHICLE_CCDJRQ(ctx, field, obj)
		case "CLLX":
			out.Values[i] = ec._JJ_VEHICLE_CLLX(ctx, field, obj)
		case "CLSBDH":
			out.Values[i] = ec._JJ_VEHICLE_CLSBDH(ctx, field, obj)
		case "COUNTY":
			out.Values[i] = ec._JJ_VEHICLE_COUNTY(ctx, field, obj)
		case "DJRQ":
			out.Values[i] = ec._JJ_VEHICLE_DJRQ(ctx, field, obj)
		case "FPRQ":
			out.Values[i] = ec._JJ_VEHICLE_FPRQ(ctx, field, obj)
		case "GXRQ":
			out.Values[i] = ec._JJ_VEHICLE_GXRQ(ctx, field, obj)
		case "HPHM":
			out.Values[i] = ec._JJ_VEHICLE_HPHM(ctx, field, obj)
		case "HPZL":
			out.Values[i] = ec._JJ_VEHICLE_HPZL(ctx, field, obj)
		case "IS_DETELED":
			out.Values[i] = ec._JJ_VEHICLE_IS_DETELED(ctx, field, obj)
		case "LXDH":
			out.Values[i] = ec._JJ_VEHICLE_LXDH(ctx, field, obj)
		case "LXDZ":
			out.Values[i] = ec._JJ_VEHICLE_LXDZ(ctx, field, obj)
		case "OTHER":
			out.Values[i] = ec._JJ_VEHICLE_OTHER(ctx, field, obj)
		case "QZBFQZ":
			out.Values[i] = ec._JJ_VEHICLE_QZBFQZ(ctx, field, obj)
		case "SJHM":
			out.Values[i] = ec._JJ_VEHICLE_SJHM(ctx, field, obj)
		case "SYR":
			out.Values[i] = ec._JJ_VEHICLE_SYR(ctx, field, obj)
		case "SYXZ":
			out.Values[i] = ec._JJ_VEHICLE_SYXZ(ctx, field, obj)
		case "UPDATETIME":
			out.Values[i] = ec._JJ_VEHICLE_UPDATETIME(ctx, field, obj)
		case "VEHMONTYPE":
			out.Values[i] = ec._JJ_VEHICLE_VEHMONTYPE(ctx, field, obj)
		case "XH":
			out.Values[i] = ec._JJ_VEHICLE_XH(ctx, field, obj)
		case "YXQZ":
			out.Values[i] = ec._JJ_VEHICLE_YXQZ(ctx, field, obj)
		case "ZT":
			out.Values[i] = ec._JJ_VEHICLE_ZT(ctx, field, obj)
		case "ZZL":
			out.Values[i] = ec._JJ_VEHICLE_ZZL(ctx, field, obj)
		case "id":
			out.Values[i] = ec._JJ_VEHICLE_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._JJ_VEHICLE_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jJ_VEHICLE_aggregateImplementors = []string{"JJ_VEHICLE_aggregate"}

func (ec *executionContext) _JJ_VEHICLE_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.JjVehicleAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jJ_VEHICLE_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JJ_VEHICLE_aggregate")
		case "aggregate":
			out.Values[i] = ec._JJ_VEHICLE_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._JJ_VEHICLE_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jJ_VEHICLE_aggregate_fieldsImplementors = []string{"JJ_VEHICLE_aggregate_fields"}

func (ec *executionContext) _JJ_VEHICLE_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.JjVehicleAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jJ_VEHICLE_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JJ_VEHICLE_aggregate_fields")
		case "avg":
			out.Values[i] = ec._JJ_VEHICLE_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._JJ_VEHICLE_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._JJ_VEHICLE_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._JJ_VEHICLE_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._JJ_VEHICLE_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._JJ_VEHICLE_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._JJ_VEHICLE_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._JJ_VEHICLE_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._JJ_VEHICLE_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._JJ_VEHICLE_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._JJ_VEHICLE_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jJ_VEHICLE_avg_fieldsImplementors = []string{"JJ_VEHICLE_avg_fields"}

func (ec *executionContext) _JJ_VEHICLE_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.JjVehicleAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jJ_VEHICLE_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JJ_VEHICLE_avg_fields")
		case "IS_DETELED":
			out.Values[i] = ec._JJ_VEHICLE_avg_fields_IS_DETELED(ctx, field, obj)
		case "ZT":
			out.Values[i] = ec._JJ_VEHICLE_avg_fields_ZT(ctx, field, obj)
		case "ZZL":
			out.Values[i] = ec._JJ_VEHICLE_avg_fields_ZZL(ctx, field, obj)
		case "id":
			out.Values[i] = ec._JJ_VEHICLE_avg_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jJ_VEHICLE_max_fieldsImplementors = []string{"JJ_VEHICLE_max_fields"}

func (ec *executionContext) _JJ_VEHICLE_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.JjVehicleMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jJ_VEHICLE_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JJ_VEHICLE_max_fields")
		case "CCDJRQ":
			out.Values[i] = ec._JJ_VEHICLE_max_fields_CCDJRQ(ctx, field, obj)
		case "CLLX":
			out.Values[i] = ec._JJ_VEHICLE_max_fields_CLLX(ctx, field, obj)
		case "CLSBDH":
			out.Values[i] = ec._JJ_VEHICLE_max_fields_CLSBDH(ctx, field, obj)
		case "COUNTY":
			out.Values[i] = ec._JJ_VEHICLE_max_fields_COUNTY(ctx, field, obj)
		case "DJRQ":
			out.Values[i] = ec._JJ_VEHICLE_max_fields_DJRQ(ctx, field, obj)
		case "FPRQ":
			out.Values[i] = ec._JJ_VEHICLE_max_fields_FPRQ(ctx, field, obj)
		case "GXRQ":
			out.Values[i] = ec._JJ_VEHICLE_max_fields_GXRQ(ctx, field, obj)
		case "HPHM":
			out.Values[i] = ec._JJ_VEHICLE_max_fields_HPHM(ctx, field, obj)
		case "HPZL":
			out.Values[i] = ec._JJ_VEHICLE_max_fields_HPZL(ctx, field, obj)
		case "IS_DETELED":
			out.Values[i] = ec._JJ_VEHICLE_max_fields_IS_DETELED(ctx, field, obj)
		case "LXDH":
			out.Values[i] = ec._JJ_VEHICLE_max_fields_LXDH(ctx, field, obj)
		case "LXDZ":
			out.Values[i] = ec._JJ_VEHICLE_max_fields_LXDZ(ctx, field, obj)
		case "OTHER":
			out.Values[i] = ec._JJ_VEHICLE_max_fields_OTHER(ctx, field, obj)
		case "QZBFQZ":
			out.Values[i] = ec._JJ_VEHICLE_max_fields_QZBFQZ(ctx, field, obj)
		case "SJHM":
			out.Values[i] = ec._JJ_VEHICLE_max_fields_SJHM(ctx, field, obj)
		case "SYR":
			out.Values[i] = ec._JJ_VEHICLE_max_fields_SYR(ctx, field, obj)
		case "SYXZ":
			out.Values[i] = ec._JJ_VEHICLE_max_fields_SYXZ(ctx, field, obj)
		case "UPDATETIME":
			out.Values[i] = ec._JJ_VEHICLE_max_fields_UPDATETIME(ctx, field, obj)
		case "VEHMONTYPE":
			out.Values[i] = ec._JJ_VEHICLE_max_fields_VEHMONTYPE(ctx, field, obj)
		case "XH":
			out.Values[i] = ec._JJ_VEHICLE_max_fields_XH(ctx, field, obj)
		case "YXQZ":
			out.Values[i] = ec._JJ_VEHICLE_max_fields_YXQZ(ctx, field, obj)
		case "ZT":
			out.Values[i] = ec._JJ_VEHICLE_max_fields_ZT(ctx, field, obj)
		case "ZZL":
			out.Values[i] = ec._JJ_VEHICLE_max_fields_ZZL(ctx, field, obj)
		case "id":
			out.Values[i] = ec._JJ_VEHICLE_max_fields_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._JJ_VEHICLE_max_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jJ_VEHICLE_min_fieldsImplementors = []string{"JJ_VEHICLE_min_fields"}

func (ec *executionContext) _JJ_VEHICLE_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.JjVehicleMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jJ_VEHICLE_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JJ_VEHICLE_min_fields")
		case "CCDJRQ":
			out.Values[i] = ec._JJ_VEHICLE_min_fields_CCDJRQ(ctx, field, obj)
		case "CLLX":
			out.Values[i] = ec._JJ_VEHICLE_min_fields_CLLX(ctx, field, obj)
		case "CLSBDH":
			out.Values[i] = ec._JJ_VEHICLE_min_fields_CLSBDH(ctx, field, obj)
		case "COUNTY":
			out.Values[i] = ec._JJ_VEHICLE_min_fields_COUNTY(ctx, field, obj)
		case "DJRQ":
			out.Values[i] = ec._JJ_VEHICLE_min_fields_DJRQ(ctx, field, obj)
		case "FPRQ":
			out.Values[i] = ec._JJ_VEHICLE_min_fields_FPRQ(ctx, field, obj)
		case "GXRQ":
			out.Values[i] = ec._JJ_VEHICLE_min_fields_GXRQ(ctx, field, obj)
		case "HPHM":
			out.Values[i] = ec._JJ_VEHICLE_min_fields_HPHM(ctx, field, obj)
		case "HPZL":
			out.Values[i] = ec._JJ_VEHICLE_min_fields_HPZL(ctx, field, obj)
		case "IS_DETELED":
			out.Values[i] = ec._JJ_VEHICLE_min_fields_IS_DETELED(ctx, field, obj)
		case "LXDH":
			out.Values[i] = ec._JJ_VEHICLE_min_fields_LXDH(ctx, field, obj)
		case "LXDZ":
			out.Values[i] = ec._JJ_VEHICLE_min_fields_LXDZ(ctx, field, obj)
		case "OTHER":
			out.Values[i] = ec._JJ_VEHICLE_min_fields_OTHER(ctx, field, obj)
		case "QZBFQZ":
			out.Values[i] = ec._JJ_VEHICLE_min_fields_QZBFQZ(ctx, field, obj)
		case "SJHM":
			out.Values[i] = ec._JJ_VEHICLE_min_fields_SJHM(ctx, field, obj)
		case "SYR":
			out.Values[i] = ec._JJ_VEHICLE_min_fields_SYR(ctx, field, obj)
		case "SYXZ":
			out.Values[i] = ec._JJ_VEHICLE_min_fields_SYXZ(ctx, field, obj)
		case "UPDATETIME":
			out.Values[i] = ec._JJ_VEHICLE_min_fields_UPDATETIME(ctx, field, obj)
		case "VEHMONTYPE":
			out.Values[i] = ec._JJ_VEHICLE_min_fields_VEHMONTYPE(ctx, field, obj)
		case "XH":
			out.Values[i] = ec._JJ_VEHICLE_min_fields_XH(ctx, field, obj)
		case "YXQZ":
			out.Values[i] = ec._JJ_VEHICLE_min_fields_YXQZ(ctx, field, obj)
		case "ZT":
			out.Values[i] = ec._JJ_VEHICLE_min_fields_ZT(ctx, field, obj)
		case "ZZL":
			out.Values[i] = ec._JJ_VEHICLE_min_fields_ZZL(ctx, field, obj)
		case "id":
			out.Values[i] = ec._JJ_VEHICLE_min_fields_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._JJ_VEHICLE_min_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jJ_VEHICLE_mutation_responseImplementors = []string{"JJ_VEHICLE_mutation_response"}

func (ec *executionContext) _JJ_VEHICLE_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.JjVehicleMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jJ_VEHICLE_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JJ_VEHICLE_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._JJ_VEHICLE_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._JJ_VEHICLE_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jJ_VEHICLE_stddev_fieldsImplementors = []string{"JJ_VEHICLE_stddev_fields"}

func (ec *executionContext) _JJ_VEHICLE_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.JjVehicleStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jJ_VEHICLE_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JJ_VEHICLE_stddev_fields")
		case "IS_DETELED":
			out.Values[i] = ec._JJ_VEHICLE_stddev_fields_IS_DETELED(ctx, field, obj)
		case "ZT":
			out.Values[i] = ec._JJ_VEHICLE_stddev_fields_ZT(ctx, field, obj)
		case "ZZL":
			out.Values[i] = ec._JJ_VEHICLE_stddev_fields_ZZL(ctx, field, obj)
		case "id":
			out.Values[i] = ec._JJ_VEHICLE_stddev_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jJ_VEHICLE_stddev_pop_fieldsImplementors = []string{"JJ_VEHICLE_stddev_pop_fields"}

func (ec *executionContext) _JJ_VEHICLE_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.JjVehicleStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jJ_VEHICLE_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JJ_VEHICLE_stddev_pop_fields")
		case "IS_DETELED":
			out.Values[i] = ec._JJ_VEHICLE_stddev_pop_fields_IS_DETELED(ctx, field, obj)
		case "ZT":
			out.Values[i] = ec._JJ_VEHICLE_stddev_pop_fields_ZT(ctx, field, obj)
		case "ZZL":
			out.Values[i] = ec._JJ_VEHICLE_stddev_pop_fields_ZZL(ctx, field, obj)
		case "id":
			out.Values[i] = ec._JJ_VEHICLE_stddev_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jJ_VEHICLE_stddev_samp_fieldsImplementors = []string{"JJ_VEHICLE_stddev_samp_fields"}

func (ec *executionContext) _JJ_VEHICLE_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.JjVehicleStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jJ_VEHICLE_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JJ_VEHICLE_stddev_samp_fields")
		case "IS_DETELED":
			out.Values[i] = ec._JJ_VEHICLE_stddev_samp_fields_IS_DETELED(ctx, field, obj)
		case "ZT":
			out.Values[i] = ec._JJ_VEHICLE_stddev_samp_fields_ZT(ctx, field, obj)
		case "ZZL":
			out.Values[i] = ec._JJ_VEHICLE_stddev_samp_fields_ZZL(ctx, field, obj)
		case "id":
			out.Values[i] = ec._JJ_VEHICLE_stddev_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jJ_VEHICLE_sum_fieldsImplementors = []string{"JJ_VEHICLE_sum_fields"}

func (ec *executionContext) _JJ_VEHICLE_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.JjVehicleSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jJ_VEHICLE_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JJ_VEHICLE_sum_fields")
		case "IS_DETELED":
			out.Values[i] = ec._JJ_VEHICLE_sum_fields_IS_DETELED(ctx, field, obj)
		case "ZT":
			out.Values[i] = ec._JJ_VEHICLE_sum_fields_ZT(ctx, field, obj)
		case "ZZL":
			out.Values[i] = ec._JJ_VEHICLE_sum_fields_ZZL(ctx, field, obj)
		case "id":
			out.Values[i] = ec._JJ_VEHICLE_sum_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jJ_VEHICLE_var_pop_fieldsImplementors = []string{"JJ_VEHICLE_var_pop_fields"}

func (ec *executionContext) _JJ_VEHICLE_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.JjVehicleVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jJ_VEHICLE_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JJ_VEHICLE_var_pop_fields")
		case "IS_DETELED":
			out.Values[i] = ec._JJ_VEHICLE_var_pop_fields_IS_DETELED(ctx, field, obj)
		case "ZT":
			out.Values[i] = ec._JJ_VEHICLE_var_pop_fields_ZT(ctx, field, obj)
		case "ZZL":
			out.Values[i] = ec._JJ_VEHICLE_var_pop_fields_ZZL(ctx, field, obj)
		case "id":
			out.Values[i] = ec._JJ_VEHICLE_var_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jJ_VEHICLE_var_samp_fieldsImplementors = []string{"JJ_VEHICLE_var_samp_fields"}

func (ec *executionContext) _JJ_VEHICLE_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.JjVehicleVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jJ_VEHICLE_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JJ_VEHICLE_var_samp_fields")
		case "IS_DETELED":
			out.Values[i] = ec._JJ_VEHICLE_var_samp_fields_IS_DETELED(ctx, field, obj)
		case "ZT":
			out.Values[i] = ec._JJ_VEHICLE_var_samp_fields_ZT(ctx, field, obj)
		case "ZZL":
			out.Values[i] = ec._JJ_VEHICLE_var_samp_fields_ZZL(ctx, field, obj)
		case "id":
			out.Values[i] = ec._JJ_VEHICLE_var_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jJ_VEHICLE_variance_fieldsImplementors = []string{"JJ_VEHICLE_variance_fields"}

func (ec *executionContext) _JJ_VEHICLE_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.JjVehicleVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jJ_VEHICLE_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JJ_VEHICLE_variance_fields")
		case "IS_DETELED":
			out.Values[i] = ec._JJ_VEHICLE_variance_fields_IS_DETELED(ctx, field, obj)
		case "ZT":
			out.Values[i] = ec._JJ_VEHICLE_variance_fields_ZT(ctx, field, obj)
		case "ZZL":
			out.Values[i] = ec._JJ_VEHICLE_variance_fields_ZZL(ctx, field, obj)
		case "id":
			out.Values[i] = ec._JJ_VEHICLE_variance_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "delete_vehicle_info":
			out.Values[i] = ec._Mutation_delete_vehicle_info(ctx, field)
		case "delete_vehicle_info_by_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_info_by_pk(ctx, field)
		case "insert_vehicle_info":
			out.Values[i] = ec._Mutation_insert_vehicle_info(ctx, field)
		case "insert_vehicle_info_one":
			out.Values[i] = ec._Mutation_insert_vehicle_info_one(ctx, field)
		case "update_vehicle_info":
			out.Values[i] = ec._Mutation_update_vehicle_info(ctx, field)
		case "update_vehicle_info_by_pk":
			out.Values[i] = ec._Mutation_update_vehicle_info_by_pk(ctx, field)
		case "delete_JJ_VEHICLE":
			out.Values[i] = ec._Mutation_delete_JJ_VEHICLE(ctx, field)
		case "delete_JJ_VEHICLE_by_pk":
			out.Values[i] = ec._Mutation_delete_JJ_VEHICLE_by_pk(ctx, field)
		case "insert_JJ_VEHICLE":
			out.Values[i] = ec._Mutation_insert_JJ_VEHICLE(ctx, field)
		case "insert_JJ_VEHICLE_one":
			out.Values[i] = ec._Mutation_insert_JJ_VEHICLE_one(ctx, field)
		case "update_JJ_VEHICLE":
			out.Values[i] = ec._Mutation_update_JJ_VEHICLE(ctx, field)
		case "update_JJ_VEHICLE_by_pk":
			out.Values[i] = ec._Mutation_update_JJ_VEHICLE_by_pk(ctx, field)
		case "delete_muck_truck_category_info":
			out.Values[i] = ec._Mutation_delete_muck_truck_category_info(ctx, field)
		case "delete_muck_truck_category_info_by_pk":
			out.Values[i] = ec._Mutation_delete_muck_truck_category_info_by_pk(ctx, field)
		case "insert_muck_truck_category_info":
			out.Values[i] = ec._Mutation_insert_muck_truck_category_info(ctx, field)
		case "insert_muck_truck_category_info_one":
			out.Values[i] = ec._Mutation_insert_muck_truck_category_info_one(ctx, field)
		case "update_muck_truck_category_info":
			out.Values[i] = ec._Mutation_update_muck_truck_category_info(ctx, field)
		case "update_muck_truck_category_info_by_pk":
			out.Values[i] = ec._Mutation_update_muck_truck_category_info_by_pk(ctx, field)
		case "delete_muck_truck_info":
			out.Values[i] = ec._Mutation_delete_muck_truck_info(ctx, field)
		case "delete_muck_truck_info_by_pk":
			out.Values[i] = ec._Mutation_delete_muck_truck_info_by_pk(ctx, field)
		case "insert_muck_truck_info":
			out.Values[i] = ec._Mutation_insert_muck_truck_info(ctx, field)
		case "insert_muck_truck_info_one":
			out.Values[i] = ec._Mutation_insert_muck_truck_info_one(ctx, field)
		case "update_muck_truck_info":
			out.Values[i] = ec._Mutation_update_muck_truck_info(ctx, field)
		case "update_muck_truck_info_by_pk":
			out.Values[i] = ec._Mutation_update_muck_truck_info_by_pk(ctx, field)
		case "delete_muck_truck_preview_number":
			out.Values[i] = ec._Mutation_delete_muck_truck_preview_number(ctx, field)
		case "delete_muck_truck_preview_number_by_pk":
			out.Values[i] = ec._Mutation_delete_muck_truck_preview_number_by_pk(ctx, field)
		case "insert_muck_truck_preview_number":
			out.Values[i] = ec._Mutation_insert_muck_truck_preview_number(ctx, field)
		case "insert_muck_truck_preview_number_one":
			out.Values[i] = ec._Mutation_insert_muck_truck_preview_number_one(ctx, field)
		case "update_muck_truck_preview_number":
			out.Values[i] = ec._Mutation_update_muck_truck_preview_number(ctx, field)
		case "update_muck_truck_preview_number_by_pk":
			out.Values[i] = ec._Mutation_update_muck_truck_preview_number_by_pk(ctx, field)
		case "delete_muck_truck_worker_id_card_orders":
			out.Values[i] = ec._Mutation_delete_muck_truck_worker_id_card_orders(ctx, field)
		case "delete_muck_truck_worker_id_card_orders_by_pk":
			out.Values[i] = ec._Mutation_delete_muck_truck_worker_id_card_orders_by_pk(ctx, field)
		case "insert_muck_truck_worker_id_card_orders":
			out.Values[i] = ec._Mutation_insert_muck_truck_worker_id_card_orders(ctx, field)
		case "insert_muck_truck_worker_id_card_orders_one":
			out.Values[i] = ec._Mutation_insert_muck_truck_worker_id_card_orders_one(ctx, field)
		case "update_muck_truck_worker_id_card_orders":
			out.Values[i] = ec._Mutation_update_muck_truck_worker_id_card_orders(ctx, field)
		case "update_muck_truck_worker_id_card_orders_by_pk":
			out.Values[i] = ec._Mutation_update_muck_truck_worker_id_card_orders_by_pk(ctx, field)
		case "delete_operating_vehicle_info":
			out.Values[i] = ec._Mutation_delete_operating_vehicle_info(ctx, field)
		case "delete_operating_vehicle_info_by_pk":
			out.Values[i] = ec._Mutation_delete_operating_vehicle_info_by_pk(ctx, field)
		case "insert_operating_vehicle_info":
			out.Values[i] = ec._Mutation_insert_operating_vehicle_info(ctx, field)
		case "insert_operating_vehicle_info_one":
			out.Values[i] = ec._Mutation_insert_operating_vehicle_info_one(ctx, field)
		case "update_operating_vehicle_info":
			out.Values[i] = ec._Mutation_update_operating_vehicle_info(ctx, field)
		case "update_operating_vehicle_info_by_pk":
			out.Values[i] = ec._Mutation_update_operating_vehicle_info_by_pk(ctx, field)
		case "delete_owner_info":
			out.Values[i] = ec._Mutation_delete_owner_info(ctx, field)
		case "delete_owner_info_by_pk":
			out.Values[i] = ec._Mutation_delete_owner_info_by_pk(ctx, field)
		case "insert_owner_info":
			out.Values[i] = ec._Mutation_insert_owner_info(ctx, field)
		case "insert_owner_info_one":
			out.Values[i] = ec._Mutation_insert_owner_info_one(ctx, field)
		case "update_owner_info":
			out.Values[i] = ec._Mutation_update_owner_info(ctx, field)
		case "update_owner_info_by_pk":
			out.Values[i] = ec._Mutation_update_owner_info_by_pk(ctx, field)
		case "delete_vehicle_info_change_log":
			out.Values[i] = ec._Mutation_delete_vehicle_info_change_log(ctx, field)
		case "delete_vehicle_info_change_log_by_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_info_change_log_by_pk(ctx, field)
		case "insert_vehicle_info_change_log":
			out.Values[i] = ec._Mutation_insert_vehicle_info_change_log(ctx, field)
		case "insert_vehicle_info_change_log_one":
			out.Values[i] = ec._Mutation_insert_vehicle_info_change_log_one(ctx, field)
		case "update_vehicle_info_change_log":
			out.Values[i] = ec._Mutation_update_vehicle_info_change_log(ctx, field)
		case "update_vehicle_info_change_log_by_pk":
			out.Values[i] = ec._Mutation_update_vehicle_info_change_log_by_pk(ctx, field)
		case "delete_vehicle_supervision_photo":
			out.Values[i] = ec._Mutation_delete_vehicle_supervision_photo(ctx, field)
		case "delete_vehicle_supervision_photo_by_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_supervision_photo_by_pk(ctx, field)
		case "insert_vehicle_supervision_photo":
			out.Values[i] = ec._Mutation_insert_vehicle_supervision_photo(ctx, field)
		case "insert_vehicle_supervision_photo_one":
			out.Values[i] = ec._Mutation_insert_vehicle_supervision_photo_one(ctx, field)
		case "update_vehicle_supervision_photo":
			out.Values[i] = ec._Mutation_update_vehicle_supervision_photo(ctx, field)
		case "update_vehicle_supervision_photo_by_pk":
			out.Values[i] = ec._Mutation_update_vehicle_supervision_photo_by_pk(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "vehicle_info":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_info(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_info_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_info_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_info_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_info_by_pk(ctx, field)
				return res
			})
		case "JJ_VEHICLE":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_JJ_VEHICLE(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "JJ_VEHICLE_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_JJ_VEHICLE_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "JJ_VEHICLE_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_JJ_VEHICLE_by_pk(ctx, field)
				return res
			})
		case "muck_truck_category_info":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_muck_truck_category_info(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "muck_truck_category_info_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_muck_truck_category_info_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "muck_truck_category_info_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_muck_truck_category_info_by_pk(ctx, field)
				return res
			})
		case "muck_truck_info":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_muck_truck_info(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "muck_truck_info_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_muck_truck_info_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "muck_truck_info_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_muck_truck_info_by_pk(ctx, field)
				return res
			})
		case "muck_truck_preview_number":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_muck_truck_preview_number(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "muck_truck_preview_number_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_muck_truck_preview_number_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "muck_truck_preview_number_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_muck_truck_preview_number_by_pk(ctx, field)
				return res
			})
		case "muck_truck_worker_id_card_orders":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_muck_truck_worker_id_card_orders(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "muck_truck_worker_id_card_orders_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_muck_truck_worker_id_card_orders_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "muck_truck_worker_id_card_orders_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_muck_truck_worker_id_card_orders_by_pk(ctx, field)
				return res
			})
		case "operating_vehicle_info":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_operating_vehicle_info(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "operating_vehicle_info_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_operating_vehicle_info_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "operating_vehicle_info_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_operating_vehicle_info_by_pk(ctx, field)
				return res
			})
		case "owner_info":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_owner_info(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "owner_info_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_owner_info_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "owner_info_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_owner_info_by_pk(ctx, field)
				return res
			})
		case "vehicle_info_change_log":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_info_change_log(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_info_change_log_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_info_change_log_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_info_change_log_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_info_change_log_by_pk(ctx, field)
				return res
			})
		case "vehicle_supervision_photo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_supervision_photo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_supervision_photo_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_supervision_photo_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_supervision_photo_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_supervision_photo_by_pk(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func() graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "vehicle_info":
		return ec._Subscription_vehicle_info(ctx, fields[0])
	case "vehicle_info_aggregate":
		return ec._Subscription_vehicle_info_aggregate(ctx, fields[0])
	case "vehicle_info_by_pk":
		return ec._Subscription_vehicle_info_by_pk(ctx, fields[0])
	case "JJ_VEHICLE":
		return ec._Subscription_JJ_VEHICLE(ctx, fields[0])
	case "JJ_VEHICLE_aggregate":
		return ec._Subscription_JJ_VEHICLE_aggregate(ctx, fields[0])
	case "JJ_VEHICLE_by_pk":
		return ec._Subscription_JJ_VEHICLE_by_pk(ctx, fields[0])
	case "muck_truck_category_info":
		return ec._Subscription_muck_truck_category_info(ctx, fields[0])
	case "muck_truck_category_info_aggregate":
		return ec._Subscription_muck_truck_category_info_aggregate(ctx, fields[0])
	case "muck_truck_category_info_by_pk":
		return ec._Subscription_muck_truck_category_info_by_pk(ctx, fields[0])
	case "muck_truck_info":
		return ec._Subscription_muck_truck_info(ctx, fields[0])
	case "muck_truck_info_aggregate":
		return ec._Subscription_muck_truck_info_aggregate(ctx, fields[0])
	case "muck_truck_info_by_pk":
		return ec._Subscription_muck_truck_info_by_pk(ctx, fields[0])
	case "muck_truck_preview_number":
		return ec._Subscription_muck_truck_preview_number(ctx, fields[0])
	case "muck_truck_preview_number_aggregate":
		return ec._Subscription_muck_truck_preview_number_aggregate(ctx, fields[0])
	case "muck_truck_preview_number_by_pk":
		return ec._Subscription_muck_truck_preview_number_by_pk(ctx, fields[0])
	case "muck_truck_worker_id_card_orders":
		return ec._Subscription_muck_truck_worker_id_card_orders(ctx, fields[0])
	case "muck_truck_worker_id_card_orders_aggregate":
		return ec._Subscription_muck_truck_worker_id_card_orders_aggregate(ctx, fields[0])
	case "muck_truck_worker_id_card_orders_by_pk":
		return ec._Subscription_muck_truck_worker_id_card_orders_by_pk(ctx, fields[0])
	case "operating_vehicle_info":
		return ec._Subscription_operating_vehicle_info(ctx, fields[0])
	case "operating_vehicle_info_aggregate":
		return ec._Subscription_operating_vehicle_info_aggregate(ctx, fields[0])
	case "operating_vehicle_info_by_pk":
		return ec._Subscription_operating_vehicle_info_by_pk(ctx, fields[0])
	case "owner_info":
		return ec._Subscription_owner_info(ctx, fields[0])
	case "owner_info_aggregate":
		return ec._Subscription_owner_info_aggregate(ctx, fields[0])
	case "owner_info_by_pk":
		return ec._Subscription_owner_info_by_pk(ctx, fields[0])
	case "vehicle_info_change_log":
		return ec._Subscription_vehicle_info_change_log(ctx, fields[0])
	case "vehicle_info_change_log_aggregate":
		return ec._Subscription_vehicle_info_change_log_aggregate(ctx, fields[0])
	case "vehicle_info_change_log_by_pk":
		return ec._Subscription_vehicle_info_change_log_by_pk(ctx, fields[0])
	case "vehicle_supervision_photo":
		return ec._Subscription_vehicle_supervision_photo(ctx, fields[0])
	case "vehicle_supervision_photo_aggregate":
		return ec._Subscription_vehicle_supervision_photo_aggregate(ctx, fields[0])
	case "vehicle_supervision_photo_by_pk":
		return ec._Subscription_vehicle_supervision_photo_by_pk(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_category_infoImplementors = []string{"muck_truck_category_info"}

func (ec *executionContext) _muck_truck_category_info(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckCategoryInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_category_infoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_category_info")
		case "actual_owner_contact_phone":
			out.Values[i] = ec._muck_truck_category_info_actual_owner_contact_phone(ctx, field, obj)
		case "actual_owner_id_number":
			out.Values[i] = ec._muck_truck_category_info_actual_owner_id_number(ctx, field, obj)
		case "actual_owner_id_photo":
			out.Values[i] = ec._muck_truck_category_info_actual_owner_id_photo(ctx, field, obj)
		case "actual_owner_name":
			out.Values[i] = ec._muck_truck_category_info_actual_owner_name(ctx, field, obj)
		case "annual_inspection_expiration_time":
			out.Values[i] = ec._muck_truck_category_info_annual_inspection_expiration_time(ctx, field, obj)
		case "apply_inspection_time":
			out.Values[i] = ec._muck_truck_category_info_apply_inspection_time(ctx, field, obj)
		case "axes_number":
			out.Values[i] = ec._muck_truck_category_info_axes_number(ctx, field, obj)
		case "blacklist_deadline":
			out.Values[i] = ec._muck_truck_category_info_blacklist_deadline(ctx, field, obj)
		case "compulsory_insurance_policy_picture":
			out.Values[i] = ec._muck_truck_category_info_compulsory_insurance_policy_picture(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._muck_truck_category_info_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._muck_truck_category_info_create_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "delete_at":
			out.Values[i] = ec._muck_truck_category_info_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._muck_truck_category_info_delete_by(ctx, field, obj)
		case "driving_license_contact_phone":
			out.Values[i] = ec._muck_truck_category_info_driving_license_contact_phone(ctx, field, obj)
		case "driving_license_id_number":
			out.Values[i] = ec._muck_truck_category_info_driving_license_id_number(ctx, field, obj)
		case "driving_liscense_owner_id_photo":
			out.Values[i] = ec._muck_truck_category_info_driving_liscense_owner_id_photo(ctx, field, obj)
		case "engine_number":
			out.Values[i] = ec._muck_truck_category_info_engine_number(ctx, field, obj)
		case "id":
			out.Values[i] = ec._muck_truck_category_info_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "illegal_notice_number_endorsement":
			out.Values[i] = ec._muck_truck_category_info_illegal_notice_number_endorsement(ctx, field, obj)
		case "illegal_number_endorsement":
			out.Values[i] = ec._muck_truck_category_info_illegal_number_endorsement(ctx, field, obj)
		case "incident_number_endorsement":
			out.Values[i] = ec._muck_truck_category_info_incident_number_endorsement(ctx, field, obj)
		case "initial_registration_date":
			out.Values[i] = ec._muck_truck_category_info_initial_registration_date(ctx, field, obj)
		case "insurance_expiry_time":
			out.Values[i] = ec._muck_truck_category_info_insurance_expiry_time(ctx, field, obj)
		case "is_blacklist":
			out.Values[i] = ec._muck_truck_category_info_is_blacklist(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._muck_truck_category_info_is_delete(ctx, field, obj)
		case "is_due_security_alarm_processing":
			out.Values[i] = ec._muck_truck_category_info_is_due_security_alarm_processing(ctx, field, obj)
		case "is_first_register":
			out.Values[i] = ec._muck_truck_category_info_is_first_register(ctx, field, obj)
		case "is_muck_office_audit":
			out.Values[i] = ec._muck_truck_category_info_is_muck_office_audit(ctx, field, obj)
		case "is_send_sms":
			out.Values[i] = ec._muck_truck_category_info_is_send_sms(ctx, field, obj)
		case "issue_date_of_quangong_number":
			out.Values[i] = ec._muck_truck_category_info_issue_date_of_quangong_number(ctx, field, obj)
		case "owner_id_photo":
			out.Values[i] = ec._muck_truck_category_info_owner_id_photo(ctx, field, obj)
		case "processing_notes":
			out.Values[i] = ec._muck_truck_category_info_processing_notes(ctx, field, obj)
		case "processing_time":
			out.Values[i] = ec._muck_truck_category_info_processing_time(ctx, field, obj)
		case "processor":
			out.Values[i] = ec._muck_truck_category_info_processor(ctx, field, obj)
		case "review_notes":
			out.Values[i] = ec._muck_truck_category_info_review_notes(ctx, field, obj)
		case "review_status":
			out.Values[i] = ec._muck_truck_category_info_review_status(ctx, field, obj)
		case "review_time":
			out.Values[i] = ec._muck_truck_category_info_review_time(ctx, field, obj)
		case "reviewer":
			out.Values[i] = ec._muck_truck_category_info_reviewer(ctx, field, obj)
		case "secondary_maintenance_expiry_date":
			out.Values[i] = ec._muck_truck_category_info_secondary_maintenance_expiry_date(ctx, field, obj)
		case "secondary_maintenance_location":
			out.Values[i] = ec._muck_truck_category_info_secondary_maintenance_location(ctx, field, obj)
		case "signing_acceptance_application_time":
			out.Values[i] = ec._muck_truck_category_info_signing_acceptance_application_time(ctx, field, obj)
		case "third_party_insurance_coverage":
			out.Values[i] = ec._muck_truck_category_info_third_party_insurance_coverage(ctx, field, obj)
		case "third_party_insurance_expiry_time":
			out.Values[i] = ec._muck_truck_category_info_third_party_insurance_expiry_time(ctx, field, obj)
		case "third_party_insurance_policy_picture":
			out.Values[i] = ec._muck_truck_category_info_third_party_insurance_policy_picture(ctx, field, obj)
		case "total_mass":
			out.Values[i] = ec._muck_truck_category_info_total_mass(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._muck_truck_category_info_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._muck_truck_category_info_update_by(ctx, field, obj)
		case "vehicle_description":
			out.Values[i] = ec._muck_truck_category_info_vehicle_description(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._muck_truck_category_info_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_nature":
			out.Values[i] = ec._muck_truck_category_info_vehicle_nature(ctx, field, obj)
		case "vehicle_operating_certificate_number":
			out.Values[i] = ec._muck_truck_category_info_vehicle_operating_certificate_number(ctx, field, obj)
		case "vehicle_operating_certificate_photo":
			out.Values[i] = ec._muck_truck_category_info_vehicle_operating_certificate_photo(ctx, field, obj)
		case "vehicle_picture":
			out.Values[i] = ec._muck_truck_category_info_vehicle_picture(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_category_info_aggregateImplementors = []string{"muck_truck_category_info_aggregate"}

func (ec *executionContext) _muck_truck_category_info_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckCategoryInfoAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_category_info_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_category_info_aggregate")
		case "aggregate":
			out.Values[i] = ec._muck_truck_category_info_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._muck_truck_category_info_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_category_info_aggregate_fieldsImplementors = []string{"muck_truck_category_info_aggregate_fields"}

func (ec *executionContext) _muck_truck_category_info_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckCategoryInfoAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_category_info_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_category_info_aggregate_fields")
		case "avg":
			out.Values[i] = ec._muck_truck_category_info_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._muck_truck_category_info_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._muck_truck_category_info_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._muck_truck_category_info_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._muck_truck_category_info_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._muck_truck_category_info_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._muck_truck_category_info_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._muck_truck_category_info_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._muck_truck_category_info_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._muck_truck_category_info_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._muck_truck_category_info_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_category_info_avg_fieldsImplementors = []string{"muck_truck_category_info_avg_fields"}

func (ec *executionContext) _muck_truck_category_info_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckCategoryInfoAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_category_info_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_category_info_avg_fields")
		case "axes_number":
			out.Values[i] = ec._muck_truck_category_info_avg_fields_axes_number(ctx, field, obj)
		case "id":
			out.Values[i] = ec._muck_truck_category_info_avg_fields_id(ctx, field, obj)
		case "total_mass":
			out.Values[i] = ec._muck_truck_category_info_avg_fields_total_mass(ctx, field, obj)
		case "vehicle_nature":
			out.Values[i] = ec._muck_truck_category_info_avg_fields_vehicle_nature(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_category_info_max_fieldsImplementors = []string{"muck_truck_category_info_max_fields"}

func (ec *executionContext) _muck_truck_category_info_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckCategoryInfoMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_category_info_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_category_info_max_fields")
		case "actual_owner_contact_phone":
			out.Values[i] = ec._muck_truck_category_info_max_fields_actual_owner_contact_phone(ctx, field, obj)
		case "actual_owner_id_number":
			out.Values[i] = ec._muck_truck_category_info_max_fields_actual_owner_id_number(ctx, field, obj)
		case "actual_owner_id_photo":
			out.Values[i] = ec._muck_truck_category_info_max_fields_actual_owner_id_photo(ctx, field, obj)
		case "actual_owner_name":
			out.Values[i] = ec._muck_truck_category_info_max_fields_actual_owner_name(ctx, field, obj)
		case "annual_inspection_expiration_time":
			out.Values[i] = ec._muck_truck_category_info_max_fields_annual_inspection_expiration_time(ctx, field, obj)
		case "apply_inspection_time":
			out.Values[i] = ec._muck_truck_category_info_max_fields_apply_inspection_time(ctx, field, obj)
		case "axes_number":
			out.Values[i] = ec._muck_truck_category_info_max_fields_axes_number(ctx, field, obj)
		case "blacklist_deadline":
			out.Values[i] = ec._muck_truck_category_info_max_fields_blacklist_deadline(ctx, field, obj)
		case "compulsory_insurance_policy_picture":
			out.Values[i] = ec._muck_truck_category_info_max_fields_compulsory_insurance_policy_picture(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._muck_truck_category_info_max_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._muck_truck_category_info_max_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._muck_truck_category_info_max_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._muck_truck_category_info_max_fields_delete_by(ctx, field, obj)
		case "driving_license_contact_phone":
			out.Values[i] = ec._muck_truck_category_info_max_fields_driving_license_contact_phone(ctx, field, obj)
		case "driving_license_id_number":
			out.Values[i] = ec._muck_truck_category_info_max_fields_driving_license_id_number(ctx, field, obj)
		case "driving_liscense_owner_id_photo":
			out.Values[i] = ec._muck_truck_category_info_max_fields_driving_liscense_owner_id_photo(ctx, field, obj)
		case "engine_number":
			out.Values[i] = ec._muck_truck_category_info_max_fields_engine_number(ctx, field, obj)
		case "id":
			out.Values[i] = ec._muck_truck_category_info_max_fields_id(ctx, field, obj)
		case "illegal_notice_number_endorsement":
			out.Values[i] = ec._muck_truck_category_info_max_fields_illegal_notice_number_endorsement(ctx, field, obj)
		case "illegal_number_endorsement":
			out.Values[i] = ec._muck_truck_category_info_max_fields_illegal_number_endorsement(ctx, field, obj)
		case "incident_number_endorsement":
			out.Values[i] = ec._muck_truck_category_info_max_fields_incident_number_endorsement(ctx, field, obj)
		case "initial_registration_date":
			out.Values[i] = ec._muck_truck_category_info_max_fields_initial_registration_date(ctx, field, obj)
		case "insurance_expiry_time":
			out.Values[i] = ec._muck_truck_category_info_max_fields_insurance_expiry_time(ctx, field, obj)
		case "issue_date_of_quangong_number":
			out.Values[i] = ec._muck_truck_category_info_max_fields_issue_date_of_quangong_number(ctx, field, obj)
		case "owner_id_photo":
			out.Values[i] = ec._muck_truck_category_info_max_fields_owner_id_photo(ctx, field, obj)
		case "processing_notes":
			out.Values[i] = ec._muck_truck_category_info_max_fields_processing_notes(ctx, field, obj)
		case "processing_time":
			out.Values[i] = ec._muck_truck_category_info_max_fields_processing_time(ctx, field, obj)
		case "processor":
			out.Values[i] = ec._muck_truck_category_info_max_fields_processor(ctx, field, obj)
		case "review_notes":
			out.Values[i] = ec._muck_truck_category_info_max_fields_review_notes(ctx, field, obj)
		case "review_status":
			out.Values[i] = ec._muck_truck_category_info_max_fields_review_status(ctx, field, obj)
		case "review_time":
			out.Values[i] = ec._muck_truck_category_info_max_fields_review_time(ctx, field, obj)
		case "reviewer":
			out.Values[i] = ec._muck_truck_category_info_max_fields_reviewer(ctx, field, obj)
		case "secondary_maintenance_expiry_date":
			out.Values[i] = ec._muck_truck_category_info_max_fields_secondary_maintenance_expiry_date(ctx, field, obj)
		case "secondary_maintenance_location":
			out.Values[i] = ec._muck_truck_category_info_max_fields_secondary_maintenance_location(ctx, field, obj)
		case "signing_acceptance_application_time":
			out.Values[i] = ec._muck_truck_category_info_max_fields_signing_acceptance_application_time(ctx, field, obj)
		case "third_party_insurance_coverage":
			out.Values[i] = ec._muck_truck_category_info_max_fields_third_party_insurance_coverage(ctx, field, obj)
		case "third_party_insurance_expiry_time":
			out.Values[i] = ec._muck_truck_category_info_max_fields_third_party_insurance_expiry_time(ctx, field, obj)
		case "third_party_insurance_policy_picture":
			out.Values[i] = ec._muck_truck_category_info_max_fields_third_party_insurance_policy_picture(ctx, field, obj)
		case "total_mass":
			out.Values[i] = ec._muck_truck_category_info_max_fields_total_mass(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._muck_truck_category_info_max_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._muck_truck_category_info_max_fields_update_by(ctx, field, obj)
		case "vehicle_description":
			out.Values[i] = ec._muck_truck_category_info_max_fields_vehicle_description(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._muck_truck_category_info_max_fields_vehicle_id(ctx, field, obj)
		case "vehicle_nature":
			out.Values[i] = ec._muck_truck_category_info_max_fields_vehicle_nature(ctx, field, obj)
		case "vehicle_operating_certificate_number":
			out.Values[i] = ec._muck_truck_category_info_max_fields_vehicle_operating_certificate_number(ctx, field, obj)
		case "vehicle_operating_certificate_photo":
			out.Values[i] = ec._muck_truck_category_info_max_fields_vehicle_operating_certificate_photo(ctx, field, obj)
		case "vehicle_picture":
			out.Values[i] = ec._muck_truck_category_info_max_fields_vehicle_picture(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_category_info_min_fieldsImplementors = []string{"muck_truck_category_info_min_fields"}

func (ec *executionContext) _muck_truck_category_info_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckCategoryInfoMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_category_info_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_category_info_min_fields")
		case "actual_owner_contact_phone":
			out.Values[i] = ec._muck_truck_category_info_min_fields_actual_owner_contact_phone(ctx, field, obj)
		case "actual_owner_id_number":
			out.Values[i] = ec._muck_truck_category_info_min_fields_actual_owner_id_number(ctx, field, obj)
		case "actual_owner_id_photo":
			out.Values[i] = ec._muck_truck_category_info_min_fields_actual_owner_id_photo(ctx, field, obj)
		case "actual_owner_name":
			out.Values[i] = ec._muck_truck_category_info_min_fields_actual_owner_name(ctx, field, obj)
		case "annual_inspection_expiration_time":
			out.Values[i] = ec._muck_truck_category_info_min_fields_annual_inspection_expiration_time(ctx, field, obj)
		case "apply_inspection_time":
			out.Values[i] = ec._muck_truck_category_info_min_fields_apply_inspection_time(ctx, field, obj)
		case "axes_number":
			out.Values[i] = ec._muck_truck_category_info_min_fields_axes_number(ctx, field, obj)
		case "blacklist_deadline":
			out.Values[i] = ec._muck_truck_category_info_min_fields_blacklist_deadline(ctx, field, obj)
		case "compulsory_insurance_policy_picture":
			out.Values[i] = ec._muck_truck_category_info_min_fields_compulsory_insurance_policy_picture(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._muck_truck_category_info_min_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._muck_truck_category_info_min_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._muck_truck_category_info_min_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._muck_truck_category_info_min_fields_delete_by(ctx, field, obj)
		case "driving_license_contact_phone":
			out.Values[i] = ec._muck_truck_category_info_min_fields_driving_license_contact_phone(ctx, field, obj)
		case "driving_license_id_number":
			out.Values[i] = ec._muck_truck_category_info_min_fields_driving_license_id_number(ctx, field, obj)
		case "driving_liscense_owner_id_photo":
			out.Values[i] = ec._muck_truck_category_info_min_fields_driving_liscense_owner_id_photo(ctx, field, obj)
		case "engine_number":
			out.Values[i] = ec._muck_truck_category_info_min_fields_engine_number(ctx, field, obj)
		case "id":
			out.Values[i] = ec._muck_truck_category_info_min_fields_id(ctx, field, obj)
		case "illegal_notice_number_endorsement":
			out.Values[i] = ec._muck_truck_category_info_min_fields_illegal_notice_number_endorsement(ctx, field, obj)
		case "illegal_number_endorsement":
			out.Values[i] = ec._muck_truck_category_info_min_fields_illegal_number_endorsement(ctx, field, obj)
		case "incident_number_endorsement":
			out.Values[i] = ec._muck_truck_category_info_min_fields_incident_number_endorsement(ctx, field, obj)
		case "initial_registration_date":
			out.Values[i] = ec._muck_truck_category_info_min_fields_initial_registration_date(ctx, field, obj)
		case "insurance_expiry_time":
			out.Values[i] = ec._muck_truck_category_info_min_fields_insurance_expiry_time(ctx, field, obj)
		case "issue_date_of_quangong_number":
			out.Values[i] = ec._muck_truck_category_info_min_fields_issue_date_of_quangong_number(ctx, field, obj)
		case "owner_id_photo":
			out.Values[i] = ec._muck_truck_category_info_min_fields_owner_id_photo(ctx, field, obj)
		case "processing_notes":
			out.Values[i] = ec._muck_truck_category_info_min_fields_processing_notes(ctx, field, obj)
		case "processing_time":
			out.Values[i] = ec._muck_truck_category_info_min_fields_processing_time(ctx, field, obj)
		case "processor":
			out.Values[i] = ec._muck_truck_category_info_min_fields_processor(ctx, field, obj)
		case "review_notes":
			out.Values[i] = ec._muck_truck_category_info_min_fields_review_notes(ctx, field, obj)
		case "review_status":
			out.Values[i] = ec._muck_truck_category_info_min_fields_review_status(ctx, field, obj)
		case "review_time":
			out.Values[i] = ec._muck_truck_category_info_min_fields_review_time(ctx, field, obj)
		case "reviewer":
			out.Values[i] = ec._muck_truck_category_info_min_fields_reviewer(ctx, field, obj)
		case "secondary_maintenance_expiry_date":
			out.Values[i] = ec._muck_truck_category_info_min_fields_secondary_maintenance_expiry_date(ctx, field, obj)
		case "secondary_maintenance_location":
			out.Values[i] = ec._muck_truck_category_info_min_fields_secondary_maintenance_location(ctx, field, obj)
		case "signing_acceptance_application_time":
			out.Values[i] = ec._muck_truck_category_info_min_fields_signing_acceptance_application_time(ctx, field, obj)
		case "third_party_insurance_coverage":
			out.Values[i] = ec._muck_truck_category_info_min_fields_third_party_insurance_coverage(ctx, field, obj)
		case "third_party_insurance_expiry_time":
			out.Values[i] = ec._muck_truck_category_info_min_fields_third_party_insurance_expiry_time(ctx, field, obj)
		case "third_party_insurance_policy_picture":
			out.Values[i] = ec._muck_truck_category_info_min_fields_third_party_insurance_policy_picture(ctx, field, obj)
		case "total_mass":
			out.Values[i] = ec._muck_truck_category_info_min_fields_total_mass(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._muck_truck_category_info_min_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._muck_truck_category_info_min_fields_update_by(ctx, field, obj)
		case "vehicle_description":
			out.Values[i] = ec._muck_truck_category_info_min_fields_vehicle_description(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._muck_truck_category_info_min_fields_vehicle_id(ctx, field, obj)
		case "vehicle_nature":
			out.Values[i] = ec._muck_truck_category_info_min_fields_vehicle_nature(ctx, field, obj)
		case "vehicle_operating_certificate_number":
			out.Values[i] = ec._muck_truck_category_info_min_fields_vehicle_operating_certificate_number(ctx, field, obj)
		case "vehicle_operating_certificate_photo":
			out.Values[i] = ec._muck_truck_category_info_min_fields_vehicle_operating_certificate_photo(ctx, field, obj)
		case "vehicle_picture":
			out.Values[i] = ec._muck_truck_category_info_min_fields_vehicle_picture(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_category_info_mutation_responseImplementors = []string{"muck_truck_category_info_mutation_response"}

func (ec *executionContext) _muck_truck_category_info_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckCategoryInfoMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_category_info_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_category_info_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._muck_truck_category_info_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._muck_truck_category_info_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_category_info_stddev_fieldsImplementors = []string{"muck_truck_category_info_stddev_fields"}

func (ec *executionContext) _muck_truck_category_info_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckCategoryInfoStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_category_info_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_category_info_stddev_fields")
		case "axes_number":
			out.Values[i] = ec._muck_truck_category_info_stddev_fields_axes_number(ctx, field, obj)
		case "id":
			out.Values[i] = ec._muck_truck_category_info_stddev_fields_id(ctx, field, obj)
		case "total_mass":
			out.Values[i] = ec._muck_truck_category_info_stddev_fields_total_mass(ctx, field, obj)
		case "vehicle_nature":
			out.Values[i] = ec._muck_truck_category_info_stddev_fields_vehicle_nature(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_category_info_stddev_pop_fieldsImplementors = []string{"muck_truck_category_info_stddev_pop_fields"}

func (ec *executionContext) _muck_truck_category_info_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckCategoryInfoStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_category_info_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_category_info_stddev_pop_fields")
		case "axes_number":
			out.Values[i] = ec._muck_truck_category_info_stddev_pop_fields_axes_number(ctx, field, obj)
		case "id":
			out.Values[i] = ec._muck_truck_category_info_stddev_pop_fields_id(ctx, field, obj)
		case "total_mass":
			out.Values[i] = ec._muck_truck_category_info_stddev_pop_fields_total_mass(ctx, field, obj)
		case "vehicle_nature":
			out.Values[i] = ec._muck_truck_category_info_stddev_pop_fields_vehicle_nature(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_category_info_stddev_samp_fieldsImplementors = []string{"muck_truck_category_info_stddev_samp_fields"}

func (ec *executionContext) _muck_truck_category_info_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckCategoryInfoStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_category_info_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_category_info_stddev_samp_fields")
		case "axes_number":
			out.Values[i] = ec._muck_truck_category_info_stddev_samp_fields_axes_number(ctx, field, obj)
		case "id":
			out.Values[i] = ec._muck_truck_category_info_stddev_samp_fields_id(ctx, field, obj)
		case "total_mass":
			out.Values[i] = ec._muck_truck_category_info_stddev_samp_fields_total_mass(ctx, field, obj)
		case "vehicle_nature":
			out.Values[i] = ec._muck_truck_category_info_stddev_samp_fields_vehicle_nature(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_category_info_sum_fieldsImplementors = []string{"muck_truck_category_info_sum_fields"}

func (ec *executionContext) _muck_truck_category_info_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckCategoryInfoSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_category_info_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_category_info_sum_fields")
		case "axes_number":
			out.Values[i] = ec._muck_truck_category_info_sum_fields_axes_number(ctx, field, obj)
		case "id":
			out.Values[i] = ec._muck_truck_category_info_sum_fields_id(ctx, field, obj)
		case "total_mass":
			out.Values[i] = ec._muck_truck_category_info_sum_fields_total_mass(ctx, field, obj)
		case "vehicle_nature":
			out.Values[i] = ec._muck_truck_category_info_sum_fields_vehicle_nature(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_category_info_var_pop_fieldsImplementors = []string{"muck_truck_category_info_var_pop_fields"}

func (ec *executionContext) _muck_truck_category_info_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckCategoryInfoVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_category_info_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_category_info_var_pop_fields")
		case "axes_number":
			out.Values[i] = ec._muck_truck_category_info_var_pop_fields_axes_number(ctx, field, obj)
		case "id":
			out.Values[i] = ec._muck_truck_category_info_var_pop_fields_id(ctx, field, obj)
		case "total_mass":
			out.Values[i] = ec._muck_truck_category_info_var_pop_fields_total_mass(ctx, field, obj)
		case "vehicle_nature":
			out.Values[i] = ec._muck_truck_category_info_var_pop_fields_vehicle_nature(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_category_info_var_samp_fieldsImplementors = []string{"muck_truck_category_info_var_samp_fields"}

func (ec *executionContext) _muck_truck_category_info_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckCategoryInfoVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_category_info_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_category_info_var_samp_fields")
		case "axes_number":
			out.Values[i] = ec._muck_truck_category_info_var_samp_fields_axes_number(ctx, field, obj)
		case "id":
			out.Values[i] = ec._muck_truck_category_info_var_samp_fields_id(ctx, field, obj)
		case "total_mass":
			out.Values[i] = ec._muck_truck_category_info_var_samp_fields_total_mass(ctx, field, obj)
		case "vehicle_nature":
			out.Values[i] = ec._muck_truck_category_info_var_samp_fields_vehicle_nature(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_category_info_variance_fieldsImplementors = []string{"muck_truck_category_info_variance_fields"}

func (ec *executionContext) _muck_truck_category_info_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckCategoryInfoVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_category_info_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_category_info_variance_fields")
		case "axes_number":
			out.Values[i] = ec._muck_truck_category_info_variance_fields_axes_number(ctx, field, obj)
		case "id":
			out.Values[i] = ec._muck_truck_category_info_variance_fields_id(ctx, field, obj)
		case "total_mass":
			out.Values[i] = ec._muck_truck_category_info_variance_fields_total_mass(ctx, field, obj)
		case "vehicle_nature":
			out.Values[i] = ec._muck_truck_category_info_variance_fields_vehicle_nature(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_infoImplementors = []string{"muck_truck_info"}

func (ec *executionContext) _muck_truck_info(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_infoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_info")
		case "area_id":
			out.Values[i] = ec._muck_truck_info_area_id(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._muck_truck_info_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._muck_truck_info_create_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "delete_at":
			out.Values[i] = ec._muck_truck_info_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._muck_truck_info_delete_by(ctx, field, obj)
		case "expiry_date":
			out.Values[i] = ec._muck_truck_info_expiry_date(ctx, field, obj)
		case "fake_ip":
			out.Values[i] = ec._muck_truck_info_fake_ip(ctx, field, obj)
		case "is_reserve_library":
			out.Values[i] = ec._muck_truck_info_is_reserve_library(ctx, field, obj)
		case "load_category":
			out.Values[i] = ec._muck_truck_info_load_category(ctx, field, obj)
		case "mobile_card_location":
			out.Values[i] = ec._muck_truck_info_mobile_card_location(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._muck_truck_info_muck_truck_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "muck_truck_type":
			out.Values[i] = ec._muck_truck_info_muck_truck_type(ctx, field, obj)
		case "registration_date":
			out.Values[i] = ec._muck_truck_info_registration_date(ctx, field, obj)
		case "self_number":
			out.Values[i] = ec._muck_truck_info_self_number(ctx, field, obj)
		case "server_id":
			out.Values[i] = ec._muck_truck_info_server_id(ctx, field, obj)
		case "sim_card_number":
			out.Values[i] = ec._muck_truck_info_sim_card_number(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._muck_truck_info_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._muck_truck_info_update_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._muck_truck_info_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_info_aggregateImplementors = []string{"muck_truck_info_aggregate"}

func (ec *executionContext) _muck_truck_info_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckInfoAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_info_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_info_aggregate")
		case "aggregate":
			out.Values[i] = ec._muck_truck_info_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._muck_truck_info_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_info_aggregate_fieldsImplementors = []string{"muck_truck_info_aggregate_fields"}

func (ec *executionContext) _muck_truck_info_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckInfoAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_info_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_info_aggregate_fields")
		case "avg":
			out.Values[i] = ec._muck_truck_info_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._muck_truck_info_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._muck_truck_info_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._muck_truck_info_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._muck_truck_info_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._muck_truck_info_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._muck_truck_info_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._muck_truck_info_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._muck_truck_info_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._muck_truck_info_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._muck_truck_info_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_info_avg_fieldsImplementors = []string{"muck_truck_info_avg_fields"}

func (ec *executionContext) _muck_truck_info_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckInfoAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_info_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_info_avg_fields")
		case "area_id":
			out.Values[i] = ec._muck_truck_info_avg_fields_area_id(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._muck_truck_info_avg_fields_muck_truck_id(ctx, field, obj)
		case "muck_truck_type":
			out.Values[i] = ec._muck_truck_info_avg_fields_muck_truck_type(ctx, field, obj)
		case "server_id":
			out.Values[i] = ec._muck_truck_info_avg_fields_server_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_info_max_fieldsImplementors = []string{"muck_truck_info_max_fields"}

func (ec *executionContext) _muck_truck_info_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckInfoMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_info_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_info_max_fields")
		case "area_id":
			out.Values[i] = ec._muck_truck_info_max_fields_area_id(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._muck_truck_info_max_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._muck_truck_info_max_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._muck_truck_info_max_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._muck_truck_info_max_fields_delete_by(ctx, field, obj)
		case "expiry_date":
			out.Values[i] = ec._muck_truck_info_max_fields_expiry_date(ctx, field, obj)
		case "fake_ip":
			out.Values[i] = ec._muck_truck_info_max_fields_fake_ip(ctx, field, obj)
		case "load_category":
			out.Values[i] = ec._muck_truck_info_max_fields_load_category(ctx, field, obj)
		case "mobile_card_location":
			out.Values[i] = ec._muck_truck_info_max_fields_mobile_card_location(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._muck_truck_info_max_fields_muck_truck_id(ctx, field, obj)
		case "muck_truck_type":
			out.Values[i] = ec._muck_truck_info_max_fields_muck_truck_type(ctx, field, obj)
		case "registration_date":
			out.Values[i] = ec._muck_truck_info_max_fields_registration_date(ctx, field, obj)
		case "self_number":
			out.Values[i] = ec._muck_truck_info_max_fields_self_number(ctx, field, obj)
		case "server_id":
			out.Values[i] = ec._muck_truck_info_max_fields_server_id(ctx, field, obj)
		case "sim_card_number":
			out.Values[i] = ec._muck_truck_info_max_fields_sim_card_number(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._muck_truck_info_max_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._muck_truck_info_max_fields_update_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._muck_truck_info_max_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_info_min_fieldsImplementors = []string{"muck_truck_info_min_fields"}

func (ec *executionContext) _muck_truck_info_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckInfoMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_info_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_info_min_fields")
		case "area_id":
			out.Values[i] = ec._muck_truck_info_min_fields_area_id(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._muck_truck_info_min_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._muck_truck_info_min_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._muck_truck_info_min_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._muck_truck_info_min_fields_delete_by(ctx, field, obj)
		case "expiry_date":
			out.Values[i] = ec._muck_truck_info_min_fields_expiry_date(ctx, field, obj)
		case "fake_ip":
			out.Values[i] = ec._muck_truck_info_min_fields_fake_ip(ctx, field, obj)
		case "load_category":
			out.Values[i] = ec._muck_truck_info_min_fields_load_category(ctx, field, obj)
		case "mobile_card_location":
			out.Values[i] = ec._muck_truck_info_min_fields_mobile_card_location(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._muck_truck_info_min_fields_muck_truck_id(ctx, field, obj)
		case "muck_truck_type":
			out.Values[i] = ec._muck_truck_info_min_fields_muck_truck_type(ctx, field, obj)
		case "registration_date":
			out.Values[i] = ec._muck_truck_info_min_fields_registration_date(ctx, field, obj)
		case "self_number":
			out.Values[i] = ec._muck_truck_info_min_fields_self_number(ctx, field, obj)
		case "server_id":
			out.Values[i] = ec._muck_truck_info_min_fields_server_id(ctx, field, obj)
		case "sim_card_number":
			out.Values[i] = ec._muck_truck_info_min_fields_sim_card_number(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._muck_truck_info_min_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._muck_truck_info_min_fields_update_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._muck_truck_info_min_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_info_mutation_responseImplementors = []string{"muck_truck_info_mutation_response"}

func (ec *executionContext) _muck_truck_info_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckInfoMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_info_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_info_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._muck_truck_info_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._muck_truck_info_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_info_stddev_fieldsImplementors = []string{"muck_truck_info_stddev_fields"}

func (ec *executionContext) _muck_truck_info_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckInfoStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_info_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_info_stddev_fields")
		case "area_id":
			out.Values[i] = ec._muck_truck_info_stddev_fields_area_id(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._muck_truck_info_stddev_fields_muck_truck_id(ctx, field, obj)
		case "muck_truck_type":
			out.Values[i] = ec._muck_truck_info_stddev_fields_muck_truck_type(ctx, field, obj)
		case "server_id":
			out.Values[i] = ec._muck_truck_info_stddev_fields_server_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_info_stddev_pop_fieldsImplementors = []string{"muck_truck_info_stddev_pop_fields"}

func (ec *executionContext) _muck_truck_info_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckInfoStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_info_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_info_stddev_pop_fields")
		case "area_id":
			out.Values[i] = ec._muck_truck_info_stddev_pop_fields_area_id(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._muck_truck_info_stddev_pop_fields_muck_truck_id(ctx, field, obj)
		case "muck_truck_type":
			out.Values[i] = ec._muck_truck_info_stddev_pop_fields_muck_truck_type(ctx, field, obj)
		case "server_id":
			out.Values[i] = ec._muck_truck_info_stddev_pop_fields_server_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_info_stddev_samp_fieldsImplementors = []string{"muck_truck_info_stddev_samp_fields"}

func (ec *executionContext) _muck_truck_info_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckInfoStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_info_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_info_stddev_samp_fields")
		case "area_id":
			out.Values[i] = ec._muck_truck_info_stddev_samp_fields_area_id(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._muck_truck_info_stddev_samp_fields_muck_truck_id(ctx, field, obj)
		case "muck_truck_type":
			out.Values[i] = ec._muck_truck_info_stddev_samp_fields_muck_truck_type(ctx, field, obj)
		case "server_id":
			out.Values[i] = ec._muck_truck_info_stddev_samp_fields_server_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_info_sum_fieldsImplementors = []string{"muck_truck_info_sum_fields"}

func (ec *executionContext) _muck_truck_info_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckInfoSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_info_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_info_sum_fields")
		case "area_id":
			out.Values[i] = ec._muck_truck_info_sum_fields_area_id(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._muck_truck_info_sum_fields_muck_truck_id(ctx, field, obj)
		case "muck_truck_type":
			out.Values[i] = ec._muck_truck_info_sum_fields_muck_truck_type(ctx, field, obj)
		case "server_id":
			out.Values[i] = ec._muck_truck_info_sum_fields_server_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_info_var_pop_fieldsImplementors = []string{"muck_truck_info_var_pop_fields"}

func (ec *executionContext) _muck_truck_info_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckInfoVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_info_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_info_var_pop_fields")
		case "area_id":
			out.Values[i] = ec._muck_truck_info_var_pop_fields_area_id(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._muck_truck_info_var_pop_fields_muck_truck_id(ctx, field, obj)
		case "muck_truck_type":
			out.Values[i] = ec._muck_truck_info_var_pop_fields_muck_truck_type(ctx, field, obj)
		case "server_id":
			out.Values[i] = ec._muck_truck_info_var_pop_fields_server_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_info_var_samp_fieldsImplementors = []string{"muck_truck_info_var_samp_fields"}

func (ec *executionContext) _muck_truck_info_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckInfoVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_info_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_info_var_samp_fields")
		case "area_id":
			out.Values[i] = ec._muck_truck_info_var_samp_fields_area_id(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._muck_truck_info_var_samp_fields_muck_truck_id(ctx, field, obj)
		case "muck_truck_type":
			out.Values[i] = ec._muck_truck_info_var_samp_fields_muck_truck_type(ctx, field, obj)
		case "server_id":
			out.Values[i] = ec._muck_truck_info_var_samp_fields_server_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_info_variance_fieldsImplementors = []string{"muck_truck_info_variance_fields"}

func (ec *executionContext) _muck_truck_info_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckInfoVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_info_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_info_variance_fields")
		case "area_id":
			out.Values[i] = ec._muck_truck_info_variance_fields_area_id(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._muck_truck_info_variance_fields_muck_truck_id(ctx, field, obj)
		case "muck_truck_type":
			out.Values[i] = ec._muck_truck_info_variance_fields_muck_truck_type(ctx, field, obj)
		case "server_id":
			out.Values[i] = ec._muck_truck_info_variance_fields_server_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_preview_numberImplementors = []string{"muck_truck_preview_number"}

func (ec *executionContext) _muck_truck_preview_number(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckPreviewNumber) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_preview_numberImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_preview_number")
		case "confirm_status":
			out.Values[i] = ec._muck_truck_preview_number_confirm_status(ctx, field, obj)
		case "confirm_time":
			out.Values[i] = ec._muck_truck_preview_number_confirm_time(ctx, field, obj)
		case "confirmor":
			out.Values[i] = ec._muck_truck_preview_number_confirmor(ctx, field, obj)
		case "contact_person":
			out.Values[i] = ec._muck_truck_preview_number_contact_person(ctx, field, obj)
		case "contact_phone":
			out.Values[i] = ec._muck_truck_preview_number_contact_phone(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._muck_truck_preview_number_create_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "delete_at":
			out.Values[i] = ec._muck_truck_preview_number_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._muck_truck_preview_number_delete_by(ctx, field, obj)
		case "front_license_plate":
			out.Values[i] = ec._muck_truck_preview_number_front_license_plate(ctx, field, obj)
		case "id":
			out.Values[i] = ec._muck_truck_preview_number_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "initial_registration_date":
			out.Values[i] = ec._muck_truck_preview_number_initial_registration_date(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._muck_truck_preview_number_is_delete(ctx, field, obj)
		case "is_register_sale_order":
			out.Values[i] = ec._muck_truck_preview_number_is_register_sale_order(ctx, field, obj)
		case "is_review_automatically":
			out.Values[i] = ec._muck_truck_preview_number_is_review_automatically(ctx, field, obj)
		case "marking_time":
			out.Values[i] = ec._muck_truck_preview_number_marking_time(ctx, field, obj)
		case "original_number":
			out.Values[i] = ec._muck_truck_preview_number_original_number(ctx, field, obj)
		case "production_status":
			out.Values[i] = ec._muck_truck_preview_number_production_status(ctx, field, obj)
		case "production_time":
			out.Values[i] = ec._muck_truck_preview_number_production_time(ctx, field, obj)
		case "production_times":
			out.Values[i] = ec._muck_truck_preview_number_production_times(ctx, field, obj)
		case "rear_license_plate":
			out.Values[i] = ec._muck_truck_preview_number_rear_license_plate(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._muck_truck_preview_number_registration_time(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._muck_truck_preview_number_remarks(ctx, field, obj)
		case "side_license_plate":
			out.Values[i] = ec._muck_truck_preview_number_side_license_plate(ctx, field, obj)
		case "svn_number":
			out.Values[i] = ec._muck_truck_preview_number_svn_number(ctx, field, obj)
		case "unlawful_violation_number":
			out.Values[i] = ec._muck_truck_preview_number_unlawful_violation_number(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._muck_truck_preview_number_update_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "update_by":
			out.Values[i] = ec._muck_truck_preview_number_update_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._muck_truck_preview_number_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "work_number_plate_color":
			out.Values[i] = ec._muck_truck_preview_number_work_number_plate_color(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_preview_number_aggregateImplementors = []string{"muck_truck_preview_number_aggregate"}

func (ec *executionContext) _muck_truck_preview_number_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckPreviewNumberAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_preview_number_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_preview_number_aggregate")
		case "aggregate":
			out.Values[i] = ec._muck_truck_preview_number_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._muck_truck_preview_number_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_preview_number_aggregate_fieldsImplementors = []string{"muck_truck_preview_number_aggregate_fields"}

func (ec *executionContext) _muck_truck_preview_number_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckPreviewNumberAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_preview_number_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_preview_number_aggregate_fields")
		case "avg":
			out.Values[i] = ec._muck_truck_preview_number_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._muck_truck_preview_number_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._muck_truck_preview_number_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._muck_truck_preview_number_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._muck_truck_preview_number_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._muck_truck_preview_number_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._muck_truck_preview_number_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._muck_truck_preview_number_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._muck_truck_preview_number_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._muck_truck_preview_number_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._muck_truck_preview_number_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_preview_number_avg_fieldsImplementors = []string{"muck_truck_preview_number_avg_fields"}

func (ec *executionContext) _muck_truck_preview_number_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckPreviewNumberAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_preview_number_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_preview_number_avg_fields")
		case "confirm_status":
			out.Values[i] = ec._muck_truck_preview_number_avg_fields_confirm_status(ctx, field, obj)
		case "id":
			out.Values[i] = ec._muck_truck_preview_number_avg_fields_id(ctx, field, obj)
		case "production_status":
			out.Values[i] = ec._muck_truck_preview_number_avg_fields_production_status(ctx, field, obj)
		case "production_times":
			out.Values[i] = ec._muck_truck_preview_number_avg_fields_production_times(ctx, field, obj)
		case "unlawful_violation_number":
			out.Values[i] = ec._muck_truck_preview_number_avg_fields_unlawful_violation_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_preview_number_max_fieldsImplementors = []string{"muck_truck_preview_number_max_fields"}

func (ec *executionContext) _muck_truck_preview_number_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckPreviewNumberMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_preview_number_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_preview_number_max_fields")
		case "confirm_status":
			out.Values[i] = ec._muck_truck_preview_number_max_fields_confirm_status(ctx, field, obj)
		case "confirm_time":
			out.Values[i] = ec._muck_truck_preview_number_max_fields_confirm_time(ctx, field, obj)
		case "confirmor":
			out.Values[i] = ec._muck_truck_preview_number_max_fields_confirmor(ctx, field, obj)
		case "contact_person":
			out.Values[i] = ec._muck_truck_preview_number_max_fields_contact_person(ctx, field, obj)
		case "contact_phone":
			out.Values[i] = ec._muck_truck_preview_number_max_fields_contact_phone(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._muck_truck_preview_number_max_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._muck_truck_preview_number_max_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._muck_truck_preview_number_max_fields_delete_by(ctx, field, obj)
		case "front_license_plate":
			out.Values[i] = ec._muck_truck_preview_number_max_fields_front_license_plate(ctx, field, obj)
		case "id":
			out.Values[i] = ec._muck_truck_preview_number_max_fields_id(ctx, field, obj)
		case "initial_registration_date":
			out.Values[i] = ec._muck_truck_preview_number_max_fields_initial_registration_date(ctx, field, obj)
		case "marking_time":
			out.Values[i] = ec._muck_truck_preview_number_max_fields_marking_time(ctx, field, obj)
		case "original_number":
			out.Values[i] = ec._muck_truck_preview_number_max_fields_original_number(ctx, field, obj)
		case "production_status":
			out.Values[i] = ec._muck_truck_preview_number_max_fields_production_status(ctx, field, obj)
		case "production_time":
			out.Values[i] = ec._muck_truck_preview_number_max_fields_production_time(ctx, field, obj)
		case "production_times":
			out.Values[i] = ec._muck_truck_preview_number_max_fields_production_times(ctx, field, obj)
		case "rear_license_plate":
			out.Values[i] = ec._muck_truck_preview_number_max_fields_rear_license_plate(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._muck_truck_preview_number_max_fields_registration_time(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._muck_truck_preview_number_max_fields_remarks(ctx, field, obj)
		case "side_license_plate":
			out.Values[i] = ec._muck_truck_preview_number_max_fields_side_license_plate(ctx, field, obj)
		case "svn_number":
			out.Values[i] = ec._muck_truck_preview_number_max_fields_svn_number(ctx, field, obj)
		case "unlawful_violation_number":
			out.Values[i] = ec._muck_truck_preview_number_max_fields_unlawful_violation_number(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._muck_truck_preview_number_max_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._muck_truck_preview_number_max_fields_update_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._muck_truck_preview_number_max_fields_vehicle_id(ctx, field, obj)
		case "work_number_plate_color":
			out.Values[i] = ec._muck_truck_preview_number_max_fields_work_number_plate_color(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_preview_number_min_fieldsImplementors = []string{"muck_truck_preview_number_min_fields"}

func (ec *executionContext) _muck_truck_preview_number_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckPreviewNumberMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_preview_number_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_preview_number_min_fields")
		case "confirm_status":
			out.Values[i] = ec._muck_truck_preview_number_min_fields_confirm_status(ctx, field, obj)
		case "confirm_time":
			out.Values[i] = ec._muck_truck_preview_number_min_fields_confirm_time(ctx, field, obj)
		case "confirmor":
			out.Values[i] = ec._muck_truck_preview_number_min_fields_confirmor(ctx, field, obj)
		case "contact_person":
			out.Values[i] = ec._muck_truck_preview_number_min_fields_contact_person(ctx, field, obj)
		case "contact_phone":
			out.Values[i] = ec._muck_truck_preview_number_min_fields_contact_phone(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._muck_truck_preview_number_min_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._muck_truck_preview_number_min_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._muck_truck_preview_number_min_fields_delete_by(ctx, field, obj)
		case "front_license_plate":
			out.Values[i] = ec._muck_truck_preview_number_min_fields_front_license_plate(ctx, field, obj)
		case "id":
			out.Values[i] = ec._muck_truck_preview_number_min_fields_id(ctx, field, obj)
		case "initial_registration_date":
			out.Values[i] = ec._muck_truck_preview_number_min_fields_initial_registration_date(ctx, field, obj)
		case "marking_time":
			out.Values[i] = ec._muck_truck_preview_number_min_fields_marking_time(ctx, field, obj)
		case "original_number":
			out.Values[i] = ec._muck_truck_preview_number_min_fields_original_number(ctx, field, obj)
		case "production_status":
			out.Values[i] = ec._muck_truck_preview_number_min_fields_production_status(ctx, field, obj)
		case "production_time":
			out.Values[i] = ec._muck_truck_preview_number_min_fields_production_time(ctx, field, obj)
		case "production_times":
			out.Values[i] = ec._muck_truck_preview_number_min_fields_production_times(ctx, field, obj)
		case "rear_license_plate":
			out.Values[i] = ec._muck_truck_preview_number_min_fields_rear_license_plate(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._muck_truck_preview_number_min_fields_registration_time(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._muck_truck_preview_number_min_fields_remarks(ctx, field, obj)
		case "side_license_plate":
			out.Values[i] = ec._muck_truck_preview_number_min_fields_side_license_plate(ctx, field, obj)
		case "svn_number":
			out.Values[i] = ec._muck_truck_preview_number_min_fields_svn_number(ctx, field, obj)
		case "unlawful_violation_number":
			out.Values[i] = ec._muck_truck_preview_number_min_fields_unlawful_violation_number(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._muck_truck_preview_number_min_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._muck_truck_preview_number_min_fields_update_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._muck_truck_preview_number_min_fields_vehicle_id(ctx, field, obj)
		case "work_number_plate_color":
			out.Values[i] = ec._muck_truck_preview_number_min_fields_work_number_plate_color(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_preview_number_mutation_responseImplementors = []string{"muck_truck_preview_number_mutation_response"}

func (ec *executionContext) _muck_truck_preview_number_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckPreviewNumberMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_preview_number_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_preview_number_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._muck_truck_preview_number_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._muck_truck_preview_number_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_preview_number_stddev_fieldsImplementors = []string{"muck_truck_preview_number_stddev_fields"}

func (ec *executionContext) _muck_truck_preview_number_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckPreviewNumberStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_preview_number_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_preview_number_stddev_fields")
		case "confirm_status":
			out.Values[i] = ec._muck_truck_preview_number_stddev_fields_confirm_status(ctx, field, obj)
		case "id":
			out.Values[i] = ec._muck_truck_preview_number_stddev_fields_id(ctx, field, obj)
		case "production_status":
			out.Values[i] = ec._muck_truck_preview_number_stddev_fields_production_status(ctx, field, obj)
		case "production_times":
			out.Values[i] = ec._muck_truck_preview_number_stddev_fields_production_times(ctx, field, obj)
		case "unlawful_violation_number":
			out.Values[i] = ec._muck_truck_preview_number_stddev_fields_unlawful_violation_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_preview_number_stddev_pop_fieldsImplementors = []string{"muck_truck_preview_number_stddev_pop_fields"}

func (ec *executionContext) _muck_truck_preview_number_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckPreviewNumberStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_preview_number_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_preview_number_stddev_pop_fields")
		case "confirm_status":
			out.Values[i] = ec._muck_truck_preview_number_stddev_pop_fields_confirm_status(ctx, field, obj)
		case "id":
			out.Values[i] = ec._muck_truck_preview_number_stddev_pop_fields_id(ctx, field, obj)
		case "production_status":
			out.Values[i] = ec._muck_truck_preview_number_stddev_pop_fields_production_status(ctx, field, obj)
		case "production_times":
			out.Values[i] = ec._muck_truck_preview_number_stddev_pop_fields_production_times(ctx, field, obj)
		case "unlawful_violation_number":
			out.Values[i] = ec._muck_truck_preview_number_stddev_pop_fields_unlawful_violation_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_preview_number_stddev_samp_fieldsImplementors = []string{"muck_truck_preview_number_stddev_samp_fields"}

func (ec *executionContext) _muck_truck_preview_number_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckPreviewNumberStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_preview_number_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_preview_number_stddev_samp_fields")
		case "confirm_status":
			out.Values[i] = ec._muck_truck_preview_number_stddev_samp_fields_confirm_status(ctx, field, obj)
		case "id":
			out.Values[i] = ec._muck_truck_preview_number_stddev_samp_fields_id(ctx, field, obj)
		case "production_status":
			out.Values[i] = ec._muck_truck_preview_number_stddev_samp_fields_production_status(ctx, field, obj)
		case "production_times":
			out.Values[i] = ec._muck_truck_preview_number_stddev_samp_fields_production_times(ctx, field, obj)
		case "unlawful_violation_number":
			out.Values[i] = ec._muck_truck_preview_number_stddev_samp_fields_unlawful_violation_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_preview_number_sum_fieldsImplementors = []string{"muck_truck_preview_number_sum_fields"}

func (ec *executionContext) _muck_truck_preview_number_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckPreviewNumberSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_preview_number_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_preview_number_sum_fields")
		case "confirm_status":
			out.Values[i] = ec._muck_truck_preview_number_sum_fields_confirm_status(ctx, field, obj)
		case "id":
			out.Values[i] = ec._muck_truck_preview_number_sum_fields_id(ctx, field, obj)
		case "production_status":
			out.Values[i] = ec._muck_truck_preview_number_sum_fields_production_status(ctx, field, obj)
		case "production_times":
			out.Values[i] = ec._muck_truck_preview_number_sum_fields_production_times(ctx, field, obj)
		case "unlawful_violation_number":
			out.Values[i] = ec._muck_truck_preview_number_sum_fields_unlawful_violation_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_preview_number_var_pop_fieldsImplementors = []string{"muck_truck_preview_number_var_pop_fields"}

func (ec *executionContext) _muck_truck_preview_number_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckPreviewNumberVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_preview_number_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_preview_number_var_pop_fields")
		case "confirm_status":
			out.Values[i] = ec._muck_truck_preview_number_var_pop_fields_confirm_status(ctx, field, obj)
		case "id":
			out.Values[i] = ec._muck_truck_preview_number_var_pop_fields_id(ctx, field, obj)
		case "production_status":
			out.Values[i] = ec._muck_truck_preview_number_var_pop_fields_production_status(ctx, field, obj)
		case "production_times":
			out.Values[i] = ec._muck_truck_preview_number_var_pop_fields_production_times(ctx, field, obj)
		case "unlawful_violation_number":
			out.Values[i] = ec._muck_truck_preview_number_var_pop_fields_unlawful_violation_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_preview_number_var_samp_fieldsImplementors = []string{"muck_truck_preview_number_var_samp_fields"}

func (ec *executionContext) _muck_truck_preview_number_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckPreviewNumberVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_preview_number_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_preview_number_var_samp_fields")
		case "confirm_status":
			out.Values[i] = ec._muck_truck_preview_number_var_samp_fields_confirm_status(ctx, field, obj)
		case "id":
			out.Values[i] = ec._muck_truck_preview_number_var_samp_fields_id(ctx, field, obj)
		case "production_status":
			out.Values[i] = ec._muck_truck_preview_number_var_samp_fields_production_status(ctx, field, obj)
		case "production_times":
			out.Values[i] = ec._muck_truck_preview_number_var_samp_fields_production_times(ctx, field, obj)
		case "unlawful_violation_number":
			out.Values[i] = ec._muck_truck_preview_number_var_samp_fields_unlawful_violation_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_preview_number_variance_fieldsImplementors = []string{"muck_truck_preview_number_variance_fields"}

func (ec *executionContext) _muck_truck_preview_number_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckPreviewNumberVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_preview_number_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_preview_number_variance_fields")
		case "confirm_status":
			out.Values[i] = ec._muck_truck_preview_number_variance_fields_confirm_status(ctx, field, obj)
		case "id":
			out.Values[i] = ec._muck_truck_preview_number_variance_fields_id(ctx, field, obj)
		case "production_status":
			out.Values[i] = ec._muck_truck_preview_number_variance_fields_production_status(ctx, field, obj)
		case "production_times":
			out.Values[i] = ec._muck_truck_preview_number_variance_fields_production_times(ctx, field, obj)
		case "unlawful_violation_number":
			out.Values[i] = ec._muck_truck_preview_number_variance_fields_unlawful_violation_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_worker_id_card_ordersImplementors = []string{"muck_truck_worker_id_card_orders"}

func (ec *executionContext) _muck_truck_worker_id_card_orders(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckWorkerIDCardOrders) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_worker_id_card_ordersImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_worker_id_card_orders")
		case "create_at":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_create_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "delete_at":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_delete_by(ctx, field, obj)
		case "id":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "preview_number_id":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_preview_number_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "update_at":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_update_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_worker_id_card_orders_aggregateImplementors = []string{"muck_truck_worker_id_card_orders_aggregate"}

func (ec *executionContext) _muck_truck_worker_id_card_orders_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckWorkerIDCardOrdersAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_worker_id_card_orders_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_worker_id_card_orders_aggregate")
		case "aggregate":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_worker_id_card_orders_aggregate_fieldsImplementors = []string{"muck_truck_worker_id_card_orders_aggregate_fields"}

func (ec *executionContext) _muck_truck_worker_id_card_orders_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckWorkerIDCardOrdersAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_worker_id_card_orders_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_worker_id_card_orders_aggregate_fields")
		case "avg":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_worker_id_card_orders_avg_fieldsImplementors = []string{"muck_truck_worker_id_card_orders_avg_fields"}

func (ec *executionContext) _muck_truck_worker_id_card_orders_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckWorkerIDCardOrdersAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_worker_id_card_orders_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_worker_id_card_orders_avg_fields")
		case "id":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_avg_fields_id(ctx, field, obj)
		case "preview_number_id":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_avg_fields_preview_number_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_worker_id_card_orders_max_fieldsImplementors = []string{"muck_truck_worker_id_card_orders_max_fields"}

func (ec *executionContext) _muck_truck_worker_id_card_orders_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckWorkerIDCardOrdersMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_worker_id_card_orders_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_worker_id_card_orders_max_fields")
		case "create_at":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_max_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_max_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_max_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_max_fields_delete_by(ctx, field, obj)
		case "id":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_max_fields_id(ctx, field, obj)
		case "preview_number_id":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_max_fields_preview_number_id(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_max_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_max_fields_update_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_max_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_worker_id_card_orders_min_fieldsImplementors = []string{"muck_truck_worker_id_card_orders_min_fields"}

func (ec *executionContext) _muck_truck_worker_id_card_orders_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckWorkerIDCardOrdersMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_worker_id_card_orders_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_worker_id_card_orders_min_fields")
		case "create_at":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_min_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_min_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_min_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_min_fields_delete_by(ctx, field, obj)
		case "id":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_min_fields_id(ctx, field, obj)
		case "preview_number_id":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_min_fields_preview_number_id(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_min_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_min_fields_update_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_min_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_worker_id_card_orders_mutation_responseImplementors = []string{"muck_truck_worker_id_card_orders_mutation_response"}

func (ec *executionContext) _muck_truck_worker_id_card_orders_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckWorkerIDCardOrdersMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_worker_id_card_orders_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_worker_id_card_orders_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_worker_id_card_orders_stddev_fieldsImplementors = []string{"muck_truck_worker_id_card_orders_stddev_fields"}

func (ec *executionContext) _muck_truck_worker_id_card_orders_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckWorkerIDCardOrdersStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_worker_id_card_orders_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_worker_id_card_orders_stddev_fields")
		case "id":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_stddev_fields_id(ctx, field, obj)
		case "preview_number_id":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_stddev_fields_preview_number_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_worker_id_card_orders_stddev_pop_fieldsImplementors = []string{"muck_truck_worker_id_card_orders_stddev_pop_fields"}

func (ec *executionContext) _muck_truck_worker_id_card_orders_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckWorkerIDCardOrdersStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_worker_id_card_orders_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_worker_id_card_orders_stddev_pop_fields")
		case "id":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_stddev_pop_fields_id(ctx, field, obj)
		case "preview_number_id":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_stddev_pop_fields_preview_number_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_worker_id_card_orders_stddev_samp_fieldsImplementors = []string{"muck_truck_worker_id_card_orders_stddev_samp_fields"}

func (ec *executionContext) _muck_truck_worker_id_card_orders_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckWorkerIDCardOrdersStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_worker_id_card_orders_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_worker_id_card_orders_stddev_samp_fields")
		case "id":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_stddev_samp_fields_id(ctx, field, obj)
		case "preview_number_id":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_stddev_samp_fields_preview_number_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_worker_id_card_orders_sum_fieldsImplementors = []string{"muck_truck_worker_id_card_orders_sum_fields"}

func (ec *executionContext) _muck_truck_worker_id_card_orders_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckWorkerIDCardOrdersSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_worker_id_card_orders_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_worker_id_card_orders_sum_fields")
		case "id":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_sum_fields_id(ctx, field, obj)
		case "preview_number_id":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_sum_fields_preview_number_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_worker_id_card_orders_var_pop_fieldsImplementors = []string{"muck_truck_worker_id_card_orders_var_pop_fields"}

func (ec *executionContext) _muck_truck_worker_id_card_orders_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckWorkerIDCardOrdersVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_worker_id_card_orders_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_worker_id_card_orders_var_pop_fields")
		case "id":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_var_pop_fields_id(ctx, field, obj)
		case "preview_number_id":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_var_pop_fields_preview_number_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_worker_id_card_orders_var_samp_fieldsImplementors = []string{"muck_truck_worker_id_card_orders_var_samp_fields"}

func (ec *executionContext) _muck_truck_worker_id_card_orders_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckWorkerIDCardOrdersVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_worker_id_card_orders_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_worker_id_card_orders_var_samp_fields")
		case "id":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_var_samp_fields_id(ctx, field, obj)
		case "preview_number_id":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_var_samp_fields_preview_number_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muck_truck_worker_id_card_orders_variance_fieldsImplementors = []string{"muck_truck_worker_id_card_orders_variance_fields"}

func (ec *executionContext) _muck_truck_worker_id_card_orders_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckWorkerIDCardOrdersVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muck_truck_worker_id_card_orders_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("muck_truck_worker_id_card_orders_variance_fields")
		case "id":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_variance_fields_id(ctx, field, obj)
		case "preview_number_id":
			out.Values[i] = ec._muck_truck_worker_id_card_orders_variance_fields_preview_number_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operating_vehicle_infoImplementors = []string{"operating_vehicle_info"}

func (ec *executionContext) _operating_vehicle_info(ctx context.Context, sel ast.SelectionSet, obj *model.OperatingVehicleInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operating_vehicle_infoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("operating_vehicle_info")
		case "administrative_region":
			out.Values[i] = ec._operating_vehicle_info_administrative_region(ctx, field, obj)
		case "agent":
			out.Values[i] = ec._operating_vehicle_info_agent(ctx, field, obj)
		case "contact_number":
			out.Values[i] = ec._operating_vehicle_info_contact_number(ctx, field, obj)
		case "contract_time":
			out.Values[i] = ec._operating_vehicle_info_contract_time(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._operating_vehicle_info_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._operating_vehicle_info_create_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "delete_at":
			out.Values[i] = ec._operating_vehicle_info_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._operating_vehicle_info_delete_by(ctx, field, obj)
		case "driving_license_owner":
			out.Values[i] = ec._operating_vehicle_info_driving_license_owner(ctx, field, obj)
		case "first_online_time":
			out.Values[i] = ec._operating_vehicle_info_first_online_time(ctx, field, obj)
		case "installation_time":
			out.Values[i] = ec._operating_vehicle_info_installation_time(ctx, field, obj)
		case "is_BD":
			out.Values[i] = ec._operating_vehicle_info_is_BD(ctx, field, obj)
		case "is_active":
			out.Values[i] = ec._operating_vehicle_info_is_active(ctx, field, obj)
		case "is_applay_terminal_installation":
			out.Values[i] = ec._operating_vehicle_info_is_applay_terminal_installation(ctx, field, obj)
		case "is_block":
			out.Values[i] = ec._operating_vehicle_info_is_block(ctx, field, obj)
		case "is_engineering_vehicle":
			out.Values[i] = ec._operating_vehicle_info_is_engineering_vehicle(ctx, field, obj)
		case "is_function_ok":
			out.Values[i] = ec._operating_vehicle_info_is_function_ok(ctx, field, obj)
		case "is_in_operating_system":
			out.Values[i] = ec._operating_vehicle_info_is_in_operating_system(ctx, field, obj)
		case "is_in_upload_platform":
			out.Values[i] = ec._operating_vehicle_info_is_in_upload_platform(ctx, field, obj)
		case "is_need_supervise":
			out.Values[i] = ec._operating_vehicle_info_is_need_supervise(ctx, field, obj)
		case "is_supervise":
			out.Values[i] = ec._operating_vehicle_info_is_supervise(ctx, field, obj)
		case "last_binding_terminal_time":
			out.Values[i] = ec._operating_vehicle_info_last_binding_terminal_time(ctx, field, obj)
		case "license_plate_photo":
			out.Values[i] = ec._operating_vehicle_info_license_plate_photo(ctx, field, obj)
		case "muck_truck_type":
			out.Values[i] = ec._operating_vehicle_info_muck_truck_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._operating_vehicle_info_operating_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "other_photo":
			out.Values[i] = ec._operating_vehicle_info_other_photo(ctx, field, obj)
		case "platform":
			out.Values[i] = ec._operating_vehicle_info_platform(ctx, field, obj)
		case "position_db_id":
			out.Values[i] = ec._operating_vehicle_info_position_db_id(ctx, field, obj)
		case "scrap_reason":
			out.Values[i] = ec._operating_vehicle_info_scrap_reason(ctx, field, obj)
		case "scrap_time":
			out.Values[i] = ec._operating_vehicle_info_scrap_time(ctx, field, obj)
		case "scrap_time_check":
			out.Values[i] = ec._operating_vehicle_info_scrap_time_check(ctx, field, obj)
		case "serial_number":
			out.Values[i] = ec._operating_vehicle_info_serial_number(ctx, field, obj)
		case "service_expiration_time":
			out.Values[i] = ec._operating_vehicle_info_service_expiration_time(ctx, field, obj)
		case "speed_mode_status":
			out.Values[i] = ec._operating_vehicle_info_speed_mode_status(ctx, field, obj)
		case "speed_mode_status_time":
			out.Values[i] = ec._operating_vehicle_info_speed_mode_status_time(ctx, field, obj)
		case "temporary_library":
			out.Values[i] = ec._operating_vehicle_info_temporary_library(ctx, field, obj)
		case "temporary_transport_bureau":
			out.Values[i] = ec._operating_vehicle_info_temporary_transport_bureau(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._operating_vehicle_info_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._operating_vehicle_info_update_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._operating_vehicle_info_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operating_vehicle_info_aggregateImplementors = []string{"operating_vehicle_info_aggregate"}

func (ec *executionContext) _operating_vehicle_info_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.OperatingVehicleInfoAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operating_vehicle_info_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("operating_vehicle_info_aggregate")
		case "aggregate":
			out.Values[i] = ec._operating_vehicle_info_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._operating_vehicle_info_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operating_vehicle_info_aggregate_fieldsImplementors = []string{"operating_vehicle_info_aggregate_fields"}

func (ec *executionContext) _operating_vehicle_info_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.OperatingVehicleInfoAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operating_vehicle_info_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("operating_vehicle_info_aggregate_fields")
		case "avg":
			out.Values[i] = ec._operating_vehicle_info_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._operating_vehicle_info_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._operating_vehicle_info_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._operating_vehicle_info_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._operating_vehicle_info_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._operating_vehicle_info_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._operating_vehicle_info_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._operating_vehicle_info_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._operating_vehicle_info_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._operating_vehicle_info_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._operating_vehicle_info_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operating_vehicle_info_avg_fieldsImplementors = []string{"operating_vehicle_info_avg_fields"}

func (ec *executionContext) _operating_vehicle_info_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.OperatingVehicleInfoAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operating_vehicle_info_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("operating_vehicle_info_avg_fields")
		case "muck_truck_type":
			out.Values[i] = ec._operating_vehicle_info_avg_fields_muck_truck_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._operating_vehicle_info_avg_fields_operating_vehicle_id(ctx, field, obj)
		case "platform":
			out.Values[i] = ec._operating_vehicle_info_avg_fields_platform(ctx, field, obj)
		case "scrap_time_check":
			out.Values[i] = ec._operating_vehicle_info_avg_fields_scrap_time_check(ctx, field, obj)
		case "temporary_library":
			out.Values[i] = ec._operating_vehicle_info_avg_fields_temporary_library(ctx, field, obj)
		case "temporary_transport_bureau":
			out.Values[i] = ec._operating_vehicle_info_avg_fields_temporary_transport_bureau(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operating_vehicle_info_max_fieldsImplementors = []string{"operating_vehicle_info_max_fields"}

func (ec *executionContext) _operating_vehicle_info_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.OperatingVehicleInfoMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operating_vehicle_info_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("operating_vehicle_info_max_fields")
		case "administrative_region":
			out.Values[i] = ec._operating_vehicle_info_max_fields_administrative_region(ctx, field, obj)
		case "agent":
			out.Values[i] = ec._operating_vehicle_info_max_fields_agent(ctx, field, obj)
		case "contact_number":
			out.Values[i] = ec._operating_vehicle_info_max_fields_contact_number(ctx, field, obj)
		case "contract_time":
			out.Values[i] = ec._operating_vehicle_info_max_fields_contract_time(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._operating_vehicle_info_max_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._operating_vehicle_info_max_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._operating_vehicle_info_max_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._operating_vehicle_info_max_fields_delete_by(ctx, field, obj)
		case "driving_license_owner":
			out.Values[i] = ec._operating_vehicle_info_max_fields_driving_license_owner(ctx, field, obj)
		case "first_online_time":
			out.Values[i] = ec._operating_vehicle_info_max_fields_first_online_time(ctx, field, obj)
		case "installation_time":
			out.Values[i] = ec._operating_vehicle_info_max_fields_installation_time(ctx, field, obj)
		case "last_binding_terminal_time":
			out.Values[i] = ec._operating_vehicle_info_max_fields_last_binding_terminal_time(ctx, field, obj)
		case "license_plate_photo":
			out.Values[i] = ec._operating_vehicle_info_max_fields_license_plate_photo(ctx, field, obj)
		case "muck_truck_type":
			out.Values[i] = ec._operating_vehicle_info_max_fields_muck_truck_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._operating_vehicle_info_max_fields_operating_vehicle_id(ctx, field, obj)
		case "other_photo":
			out.Values[i] = ec._operating_vehicle_info_max_fields_other_photo(ctx, field, obj)
		case "platform":
			out.Values[i] = ec._operating_vehicle_info_max_fields_platform(ctx, field, obj)
		case "position_db_id":
			out.Values[i] = ec._operating_vehicle_info_max_fields_position_db_id(ctx, field, obj)
		case "scrap_reason":
			out.Values[i] = ec._operating_vehicle_info_max_fields_scrap_reason(ctx, field, obj)
		case "scrap_time":
			out.Values[i] = ec._operating_vehicle_info_max_fields_scrap_time(ctx, field, obj)
		case "scrap_time_check":
			out.Values[i] = ec._operating_vehicle_info_max_fields_scrap_time_check(ctx, field, obj)
		case "serial_number":
			out.Values[i] = ec._operating_vehicle_info_max_fields_serial_number(ctx, field, obj)
		case "service_expiration_time":
			out.Values[i] = ec._operating_vehicle_info_max_fields_service_expiration_time(ctx, field, obj)
		case "speed_mode_status":
			out.Values[i] = ec._operating_vehicle_info_max_fields_speed_mode_status(ctx, field, obj)
		case "speed_mode_status_time":
			out.Values[i] = ec._operating_vehicle_info_max_fields_speed_mode_status_time(ctx, field, obj)
		case "temporary_library":
			out.Values[i] = ec._operating_vehicle_info_max_fields_temporary_library(ctx, field, obj)
		case "temporary_transport_bureau":
			out.Values[i] = ec._operating_vehicle_info_max_fields_temporary_transport_bureau(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._operating_vehicle_info_max_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._operating_vehicle_info_max_fields_update_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._operating_vehicle_info_max_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operating_vehicle_info_min_fieldsImplementors = []string{"operating_vehicle_info_min_fields"}

func (ec *executionContext) _operating_vehicle_info_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.OperatingVehicleInfoMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operating_vehicle_info_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("operating_vehicle_info_min_fields")
		case "administrative_region":
			out.Values[i] = ec._operating_vehicle_info_min_fields_administrative_region(ctx, field, obj)
		case "agent":
			out.Values[i] = ec._operating_vehicle_info_min_fields_agent(ctx, field, obj)
		case "contact_number":
			out.Values[i] = ec._operating_vehicle_info_min_fields_contact_number(ctx, field, obj)
		case "contract_time":
			out.Values[i] = ec._operating_vehicle_info_min_fields_contract_time(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._operating_vehicle_info_min_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._operating_vehicle_info_min_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._operating_vehicle_info_min_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._operating_vehicle_info_min_fields_delete_by(ctx, field, obj)
		case "driving_license_owner":
			out.Values[i] = ec._operating_vehicle_info_min_fields_driving_license_owner(ctx, field, obj)
		case "first_online_time":
			out.Values[i] = ec._operating_vehicle_info_min_fields_first_online_time(ctx, field, obj)
		case "installation_time":
			out.Values[i] = ec._operating_vehicle_info_min_fields_installation_time(ctx, field, obj)
		case "last_binding_terminal_time":
			out.Values[i] = ec._operating_vehicle_info_min_fields_last_binding_terminal_time(ctx, field, obj)
		case "license_plate_photo":
			out.Values[i] = ec._operating_vehicle_info_min_fields_license_plate_photo(ctx, field, obj)
		case "muck_truck_type":
			out.Values[i] = ec._operating_vehicle_info_min_fields_muck_truck_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._operating_vehicle_info_min_fields_operating_vehicle_id(ctx, field, obj)
		case "other_photo":
			out.Values[i] = ec._operating_vehicle_info_min_fields_other_photo(ctx, field, obj)
		case "platform":
			out.Values[i] = ec._operating_vehicle_info_min_fields_platform(ctx, field, obj)
		case "position_db_id":
			out.Values[i] = ec._operating_vehicle_info_min_fields_position_db_id(ctx, field, obj)
		case "scrap_reason":
			out.Values[i] = ec._operating_vehicle_info_min_fields_scrap_reason(ctx, field, obj)
		case "scrap_time":
			out.Values[i] = ec._operating_vehicle_info_min_fields_scrap_time(ctx, field, obj)
		case "scrap_time_check":
			out.Values[i] = ec._operating_vehicle_info_min_fields_scrap_time_check(ctx, field, obj)
		case "serial_number":
			out.Values[i] = ec._operating_vehicle_info_min_fields_serial_number(ctx, field, obj)
		case "service_expiration_time":
			out.Values[i] = ec._operating_vehicle_info_min_fields_service_expiration_time(ctx, field, obj)
		case "speed_mode_status":
			out.Values[i] = ec._operating_vehicle_info_min_fields_speed_mode_status(ctx, field, obj)
		case "speed_mode_status_time":
			out.Values[i] = ec._operating_vehicle_info_min_fields_speed_mode_status_time(ctx, field, obj)
		case "temporary_library":
			out.Values[i] = ec._operating_vehicle_info_min_fields_temporary_library(ctx, field, obj)
		case "temporary_transport_bureau":
			out.Values[i] = ec._operating_vehicle_info_min_fields_temporary_transport_bureau(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._operating_vehicle_info_min_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._operating_vehicle_info_min_fields_update_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._operating_vehicle_info_min_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operating_vehicle_info_mutation_responseImplementors = []string{"operating_vehicle_info_mutation_response"}

func (ec *executionContext) _operating_vehicle_info_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.OperatingVehicleInfoMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operating_vehicle_info_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("operating_vehicle_info_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._operating_vehicle_info_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._operating_vehicle_info_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operating_vehicle_info_stddev_fieldsImplementors = []string{"operating_vehicle_info_stddev_fields"}

func (ec *executionContext) _operating_vehicle_info_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.OperatingVehicleInfoStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operating_vehicle_info_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("operating_vehicle_info_stddev_fields")
		case "muck_truck_type":
			out.Values[i] = ec._operating_vehicle_info_stddev_fields_muck_truck_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._operating_vehicle_info_stddev_fields_operating_vehicle_id(ctx, field, obj)
		case "platform":
			out.Values[i] = ec._operating_vehicle_info_stddev_fields_platform(ctx, field, obj)
		case "scrap_time_check":
			out.Values[i] = ec._operating_vehicle_info_stddev_fields_scrap_time_check(ctx, field, obj)
		case "temporary_library":
			out.Values[i] = ec._operating_vehicle_info_stddev_fields_temporary_library(ctx, field, obj)
		case "temporary_transport_bureau":
			out.Values[i] = ec._operating_vehicle_info_stddev_fields_temporary_transport_bureau(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operating_vehicle_info_stddev_pop_fieldsImplementors = []string{"operating_vehicle_info_stddev_pop_fields"}

func (ec *executionContext) _operating_vehicle_info_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.OperatingVehicleInfoStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operating_vehicle_info_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("operating_vehicle_info_stddev_pop_fields")
		case "muck_truck_type":
			out.Values[i] = ec._operating_vehicle_info_stddev_pop_fields_muck_truck_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._operating_vehicle_info_stddev_pop_fields_operating_vehicle_id(ctx, field, obj)
		case "platform":
			out.Values[i] = ec._operating_vehicle_info_stddev_pop_fields_platform(ctx, field, obj)
		case "scrap_time_check":
			out.Values[i] = ec._operating_vehicle_info_stddev_pop_fields_scrap_time_check(ctx, field, obj)
		case "temporary_library":
			out.Values[i] = ec._operating_vehicle_info_stddev_pop_fields_temporary_library(ctx, field, obj)
		case "temporary_transport_bureau":
			out.Values[i] = ec._operating_vehicle_info_stddev_pop_fields_temporary_transport_bureau(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operating_vehicle_info_stddev_samp_fieldsImplementors = []string{"operating_vehicle_info_stddev_samp_fields"}

func (ec *executionContext) _operating_vehicle_info_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.OperatingVehicleInfoStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operating_vehicle_info_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("operating_vehicle_info_stddev_samp_fields")
		case "muck_truck_type":
			out.Values[i] = ec._operating_vehicle_info_stddev_samp_fields_muck_truck_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._operating_vehicle_info_stddev_samp_fields_operating_vehicle_id(ctx, field, obj)
		case "platform":
			out.Values[i] = ec._operating_vehicle_info_stddev_samp_fields_platform(ctx, field, obj)
		case "scrap_time_check":
			out.Values[i] = ec._operating_vehicle_info_stddev_samp_fields_scrap_time_check(ctx, field, obj)
		case "temporary_library":
			out.Values[i] = ec._operating_vehicle_info_stddev_samp_fields_temporary_library(ctx, field, obj)
		case "temporary_transport_bureau":
			out.Values[i] = ec._operating_vehicle_info_stddev_samp_fields_temporary_transport_bureau(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operating_vehicle_info_sum_fieldsImplementors = []string{"operating_vehicle_info_sum_fields"}

func (ec *executionContext) _operating_vehicle_info_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.OperatingVehicleInfoSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operating_vehicle_info_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("operating_vehicle_info_sum_fields")
		case "muck_truck_type":
			out.Values[i] = ec._operating_vehicle_info_sum_fields_muck_truck_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._operating_vehicle_info_sum_fields_operating_vehicle_id(ctx, field, obj)
		case "platform":
			out.Values[i] = ec._operating_vehicle_info_sum_fields_platform(ctx, field, obj)
		case "scrap_time_check":
			out.Values[i] = ec._operating_vehicle_info_sum_fields_scrap_time_check(ctx, field, obj)
		case "temporary_library":
			out.Values[i] = ec._operating_vehicle_info_sum_fields_temporary_library(ctx, field, obj)
		case "temporary_transport_bureau":
			out.Values[i] = ec._operating_vehicle_info_sum_fields_temporary_transport_bureau(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operating_vehicle_info_var_pop_fieldsImplementors = []string{"operating_vehicle_info_var_pop_fields"}

func (ec *executionContext) _operating_vehicle_info_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.OperatingVehicleInfoVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operating_vehicle_info_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("operating_vehicle_info_var_pop_fields")
		case "muck_truck_type":
			out.Values[i] = ec._operating_vehicle_info_var_pop_fields_muck_truck_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._operating_vehicle_info_var_pop_fields_operating_vehicle_id(ctx, field, obj)
		case "platform":
			out.Values[i] = ec._operating_vehicle_info_var_pop_fields_platform(ctx, field, obj)
		case "scrap_time_check":
			out.Values[i] = ec._operating_vehicle_info_var_pop_fields_scrap_time_check(ctx, field, obj)
		case "temporary_library":
			out.Values[i] = ec._operating_vehicle_info_var_pop_fields_temporary_library(ctx, field, obj)
		case "temporary_transport_bureau":
			out.Values[i] = ec._operating_vehicle_info_var_pop_fields_temporary_transport_bureau(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operating_vehicle_info_var_samp_fieldsImplementors = []string{"operating_vehicle_info_var_samp_fields"}

func (ec *executionContext) _operating_vehicle_info_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.OperatingVehicleInfoVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operating_vehicle_info_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("operating_vehicle_info_var_samp_fields")
		case "muck_truck_type":
			out.Values[i] = ec._operating_vehicle_info_var_samp_fields_muck_truck_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._operating_vehicle_info_var_samp_fields_operating_vehicle_id(ctx, field, obj)
		case "platform":
			out.Values[i] = ec._operating_vehicle_info_var_samp_fields_platform(ctx, field, obj)
		case "scrap_time_check":
			out.Values[i] = ec._operating_vehicle_info_var_samp_fields_scrap_time_check(ctx, field, obj)
		case "temporary_library":
			out.Values[i] = ec._operating_vehicle_info_var_samp_fields_temporary_library(ctx, field, obj)
		case "temporary_transport_bureau":
			out.Values[i] = ec._operating_vehicle_info_var_samp_fields_temporary_transport_bureau(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operating_vehicle_info_variance_fieldsImplementors = []string{"operating_vehicle_info_variance_fields"}

func (ec *executionContext) _operating_vehicle_info_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.OperatingVehicleInfoVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operating_vehicle_info_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("operating_vehicle_info_variance_fields")
		case "muck_truck_type":
			out.Values[i] = ec._operating_vehicle_info_variance_fields_muck_truck_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._operating_vehicle_info_variance_fields_operating_vehicle_id(ctx, field, obj)
		case "platform":
			out.Values[i] = ec._operating_vehicle_info_variance_fields_platform(ctx, field, obj)
		case "scrap_time_check":
			out.Values[i] = ec._operating_vehicle_info_variance_fields_scrap_time_check(ctx, field, obj)
		case "temporary_library":
			out.Values[i] = ec._operating_vehicle_info_variance_fields_temporary_library(ctx, field, obj)
		case "temporary_transport_bureau":
			out.Values[i] = ec._operating_vehicle_info_variance_fields_temporary_transport_bureau(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var owner_infoImplementors = []string{"owner_info"}

func (ec *executionContext) _owner_info(ctx context.Context, sel ast.SelectionSet, obj *model.OwnerInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, owner_infoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("owner_info")
		case "address":
			out.Values[i] = ec._owner_info_address(ctx, field, obj)
		case "agent":
			out.Values[i] = ec._owner_info_agent(ctx, field, obj)
		case "cellphone":
			out.Values[i] = ec._owner_info_cellphone(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._owner_info_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._owner_info_create_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "delete_at":
			out.Values[i] = ec._owner_info_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._owner_info_delete_by(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._owner_info_department_id(ctx, field, obj)
		case "email":
			out.Values[i] = ec._owner_info_email(ctx, field, obj)
		case "expiry_date":
			out.Values[i] = ec._owner_info_expiry_date(ctx, field, obj)
		case "id":
			out.Values[i] = ec._owner_info_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id_number":
			out.Values[i] = ec._owner_info_id_number(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._owner_info_is_delete(ctx, field, obj)
		case "name":
			out.Values[i] = ec._owner_info_name(ctx, field, obj)
		case "operator":
			out.Values[i] = ec._owner_info_operator(ctx, field, obj)
		case "owner_id":
			out.Values[i] = ec._owner_info_owner_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remarks":
			out.Values[i] = ec._owner_info_remarks(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._owner_info_sex(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._owner_info_telephone(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._owner_info_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._owner_info_update_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var owner_info_aggregateImplementors = []string{"owner_info_aggregate"}

func (ec *executionContext) _owner_info_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.OwnerInfoAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, owner_info_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("owner_info_aggregate")
		case "aggregate":
			out.Values[i] = ec._owner_info_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._owner_info_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var owner_info_aggregate_fieldsImplementors = []string{"owner_info_aggregate_fields"}

func (ec *executionContext) _owner_info_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.OwnerInfoAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, owner_info_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("owner_info_aggregate_fields")
		case "avg":
			out.Values[i] = ec._owner_info_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._owner_info_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._owner_info_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._owner_info_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._owner_info_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._owner_info_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._owner_info_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._owner_info_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._owner_info_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._owner_info_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._owner_info_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var owner_info_avg_fieldsImplementors = []string{"owner_info_avg_fields"}

func (ec *executionContext) _owner_info_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.OwnerInfoAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, owner_info_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("owner_info_avg_fields")
		case "id":
			out.Values[i] = ec._owner_info_avg_fields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._owner_info_avg_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var owner_info_max_fieldsImplementors = []string{"owner_info_max_fields"}

func (ec *executionContext) _owner_info_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.OwnerInfoMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, owner_info_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("owner_info_max_fields")
		case "address":
			out.Values[i] = ec._owner_info_max_fields_address(ctx, field, obj)
		case "agent":
			out.Values[i] = ec._owner_info_max_fields_agent(ctx, field, obj)
		case "cellphone":
			out.Values[i] = ec._owner_info_max_fields_cellphone(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._owner_info_max_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._owner_info_max_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._owner_info_max_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._owner_info_max_fields_delete_by(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._owner_info_max_fields_department_id(ctx, field, obj)
		case "email":
			out.Values[i] = ec._owner_info_max_fields_email(ctx, field, obj)
		case "expiry_date":
			out.Values[i] = ec._owner_info_max_fields_expiry_date(ctx, field, obj)
		case "id":
			out.Values[i] = ec._owner_info_max_fields_id(ctx, field, obj)
		case "id_number":
			out.Values[i] = ec._owner_info_max_fields_id_number(ctx, field, obj)
		case "name":
			out.Values[i] = ec._owner_info_max_fields_name(ctx, field, obj)
		case "operator":
			out.Values[i] = ec._owner_info_max_fields_operator(ctx, field, obj)
		case "owner_id":
			out.Values[i] = ec._owner_info_max_fields_owner_id(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._owner_info_max_fields_remarks(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._owner_info_max_fields_sex(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._owner_info_max_fields_telephone(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._owner_info_max_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._owner_info_max_fields_update_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var owner_info_min_fieldsImplementors = []string{"owner_info_min_fields"}

func (ec *executionContext) _owner_info_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.OwnerInfoMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, owner_info_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("owner_info_min_fields")
		case "address":
			out.Values[i] = ec._owner_info_min_fields_address(ctx, field, obj)
		case "agent":
			out.Values[i] = ec._owner_info_min_fields_agent(ctx, field, obj)
		case "cellphone":
			out.Values[i] = ec._owner_info_min_fields_cellphone(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._owner_info_min_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._owner_info_min_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._owner_info_min_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._owner_info_min_fields_delete_by(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._owner_info_min_fields_department_id(ctx, field, obj)
		case "email":
			out.Values[i] = ec._owner_info_min_fields_email(ctx, field, obj)
		case "expiry_date":
			out.Values[i] = ec._owner_info_min_fields_expiry_date(ctx, field, obj)
		case "id":
			out.Values[i] = ec._owner_info_min_fields_id(ctx, field, obj)
		case "id_number":
			out.Values[i] = ec._owner_info_min_fields_id_number(ctx, field, obj)
		case "name":
			out.Values[i] = ec._owner_info_min_fields_name(ctx, field, obj)
		case "operator":
			out.Values[i] = ec._owner_info_min_fields_operator(ctx, field, obj)
		case "owner_id":
			out.Values[i] = ec._owner_info_min_fields_owner_id(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._owner_info_min_fields_remarks(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._owner_info_min_fields_sex(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._owner_info_min_fields_telephone(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._owner_info_min_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._owner_info_min_fields_update_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var owner_info_mutation_responseImplementors = []string{"owner_info_mutation_response"}

func (ec *executionContext) _owner_info_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.OwnerInfoMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, owner_info_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("owner_info_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._owner_info_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._owner_info_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var owner_info_stddev_fieldsImplementors = []string{"owner_info_stddev_fields"}

func (ec *executionContext) _owner_info_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.OwnerInfoStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, owner_info_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("owner_info_stddev_fields")
		case "id":
			out.Values[i] = ec._owner_info_stddev_fields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._owner_info_stddev_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var owner_info_stddev_pop_fieldsImplementors = []string{"owner_info_stddev_pop_fields"}

func (ec *executionContext) _owner_info_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.OwnerInfoStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, owner_info_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("owner_info_stddev_pop_fields")
		case "id":
			out.Values[i] = ec._owner_info_stddev_pop_fields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._owner_info_stddev_pop_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var owner_info_stddev_samp_fieldsImplementors = []string{"owner_info_stddev_samp_fields"}

func (ec *executionContext) _owner_info_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.OwnerInfoStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, owner_info_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("owner_info_stddev_samp_fields")
		case "id":
			out.Values[i] = ec._owner_info_stddev_samp_fields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._owner_info_stddev_samp_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var owner_info_sum_fieldsImplementors = []string{"owner_info_sum_fields"}

func (ec *executionContext) _owner_info_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.OwnerInfoSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, owner_info_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("owner_info_sum_fields")
		case "id":
			out.Values[i] = ec._owner_info_sum_fields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._owner_info_sum_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var owner_info_var_pop_fieldsImplementors = []string{"owner_info_var_pop_fields"}

func (ec *executionContext) _owner_info_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.OwnerInfoVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, owner_info_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("owner_info_var_pop_fields")
		case "id":
			out.Values[i] = ec._owner_info_var_pop_fields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._owner_info_var_pop_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var owner_info_var_samp_fieldsImplementors = []string{"owner_info_var_samp_fields"}

func (ec *executionContext) _owner_info_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.OwnerInfoVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, owner_info_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("owner_info_var_samp_fields")
		case "id":
			out.Values[i] = ec._owner_info_var_samp_fields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._owner_info_var_samp_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var owner_info_variance_fieldsImplementors = []string{"owner_info_variance_fields"}

func (ec *executionContext) _owner_info_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.OwnerInfoVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, owner_info_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("owner_info_variance_fields")
		case "id":
			out.Values[i] = ec._owner_info_variance_fields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._owner_info_variance_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_infoImplementors = []string{"vehicle_info"}

func (ec *executionContext) _vehicle_info(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_infoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_business_scope(ctx, field, obj)
		case "car_rental_price":
			out.Values[i] = ec._vehicle_info_car_rental_price(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._vehicle_info_check_state(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._vehicle_info_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._vehicle_info_create_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "delete_at":
			out.Values[i] = ec._vehicle_info_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._vehicle_info_delete_by(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._vehicle_info_department_id(ctx, field, obj)
		case "driving_licensee_pic":
			out.Values[i] = ec._vehicle_info_driving_licensee_pic(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._vehicle_info_enterprise_id(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "industry_category":
			out.Values[i] = ec._vehicle_info_industry_category(ctx, field, obj)
		case "inspection_date":
			out.Values[i] = ec._vehicle_info_inspection_date(ctx, field, obj)
		case "insurance_company":
			out.Values[i] = ec._vehicle_info_insurance_company(ctx, field, obj)
		case "insurance_date":
			out.Values[i] = ec._vehicle_info_insurance_date(ctx, field, obj)
		case "is_active":
			out.Values[i] = ec._vehicle_info_is_active(ctx, field, obj)
		case "is_apply_install_terminal":
			out.Values[i] = ec._vehicle_info_is_apply_install_terminal(ctx, field, obj)
		case "is_complete":
			out.Values[i] = ec._vehicle_info_is_complete(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._vehicle_info_is_delete(ctx, field, obj)
		case "is_import":
			out.Values[i] = ec._vehicle_info_is_import(ctx, field, obj)
		case "is_input":
			out.Values[i] = ec._vehicle_info_is_input(ctx, field, obj)
		case "is_upload_province":
			out.Values[i] = ec._vehicle_info_is_upload_province(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_license_plate_color(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._vehicle_info_license_plate_number(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_muck_truck_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "operating_route":
			out.Values[i] = ec._vehicle_info_operating_route(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_operating_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._vehicle_info_owner(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._vehicle_info_quasi_driving_models(ctx, field, obj)
		case "record_at":
			out.Values[i] = ec._vehicle_info_record_at(ctx, field, obj)
		case "record_by":
			out.Values[i] = ec._vehicle_info_record_by(ctx, field, obj)
		case "remark_in":
			out.Values[i] = ec._vehicle_info_remark_in(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._vehicle_info_remarks(ctx, field, obj)
		case "retirement_date":
			out.Values[i] = ec._vehicle_info_retirement_date(ctx, field, obj)
		case "road_transport_license_number":
			out.Values[i] = ec._vehicle_info_road_transport_license_number(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_seats(ctx, field, obj)
		case "terminal_id":
			out.Values[i] = ec._vehicle_info_terminal_id(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._vehicle_info_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._vehicle_info_update_by(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._vehicle_info_update_time_in(ctx, field, obj)
		case "use_nature":
			out.Values[i] = ec._vehicle_info_use_nature(ctx, field, obj)
		case "vehicle_brand":
			out.Values[i] = ec._vehicle_info_vehicle_brand(ctx, field, obj)
		case "vehicle_displacement":
			out.Values[i] = ec._vehicle_info_vehicle_displacement(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._vehicle_info_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_identification_number":
			out.Values[i] = ec._vehicle_info_vehicle_identification_number(ctx, field, obj)
		case "vehicle_maintenances":
			out.Values[i] = ec._vehicle_info_vehicle_maintenances(ctx, field, obj)
		case "vehicle_manager":
			out.Values[i] = ec._vehicle_info_vehicle_manager(ctx, field, obj)
		case "vehicle_manager_id_card":
			out.Values[i] = ec._vehicle_info_vehicle_manager_id_card(ctx, field, obj)
		case "vehicle_manager_phone":
			out.Values[i] = ec._vehicle_info_vehicle_manager_phone(ctx, field, obj)
		case "vehicle_state":
			out.Values[i] = ec._vehicle_info_vehicle_state(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_aggregateImplementors = []string{"vehicle_info_aggregate"}

func (ec *executionContext) _vehicle_info_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_aggregate")
		case "aggregate":
			out.Values[i] = ec._vehicle_info_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._vehicle_info_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_aggregate_fieldsImplementors = []string{"vehicle_info_aggregate_fields"}

func (ec *executionContext) _vehicle_info_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_aggregate_fields")
		case "avg":
			out.Values[i] = ec._vehicle_info_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._vehicle_info_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._vehicle_info_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._vehicle_info_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._vehicle_info_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._vehicle_info_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._vehicle_info_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._vehicle_info_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._vehicle_info_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._vehicle_info_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._vehicle_info_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_avg_fieldsImplementors = []string{"vehicle_info_avg_fields"}

func (ec *executionContext) _vehicle_info_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_avg_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_avg_fields_business_scope(ctx, field, obj)
		case "car_rental_price":
			out.Values[i] = ec._vehicle_info_avg_fields_car_rental_price(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._vehicle_info_avg_fields_check_state(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_avg_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_avg_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_avg_fields_industry_category(ctx, field, obj)
		case "insurance_company":
			out.Values[i] = ec._vehicle_info_avg_fields_insurance_company(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_avg_fields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_avg_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_avg_fields_muck_truck_id(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_avg_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_avg_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_avg_fields_operating_vehicle_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._vehicle_info_avg_fields_quasi_driving_models(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_avg_fields_seats(ctx, field, obj)
		case "vehicle_brand":
			out.Values[i] = ec._vehicle_info_avg_fields_vehicle_brand(ctx, field, obj)
		case "vehicle_state":
			out.Values[i] = ec._vehicle_info_avg_fields_vehicle_state(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_avg_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_change_logImplementors = []string{"vehicle_info_change_log"}

func (ec *executionContext) _vehicle_info_change_log(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoChangeLog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_change_logImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_change_log")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_change_log_business_scope(ctx, field, obj)
		case "car_rental_price":
			out.Values[i] = ec._vehicle_info_change_log_car_rental_price(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._vehicle_info_change_log_check_state(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._vehicle_info_change_log_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._vehicle_info_change_log_create_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "delete_at":
			out.Values[i] = ec._vehicle_info_change_log_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._vehicle_info_change_log_delete_by(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._vehicle_info_change_log_department_id(ctx, field, obj)
		case "driving_licensee_pic":
			out.Values[i] = ec._vehicle_info_change_log_driving_licensee_pic(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._vehicle_info_change_log_enterprise_id(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_change_log_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_change_log_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "industry_category":
			out.Values[i] = ec._vehicle_info_change_log_industry_category(ctx, field, obj)
		case "inspection_date":
			out.Values[i] = ec._vehicle_info_change_log_inspection_date(ctx, field, obj)
		case "insurance_company":
			out.Values[i] = ec._vehicle_info_change_log_insurance_company(ctx, field, obj)
		case "insurance_date":
			out.Values[i] = ec._vehicle_info_change_log_insurance_date(ctx, field, obj)
		case "is_active":
			out.Values[i] = ec._vehicle_info_change_log_is_active(ctx, field, obj)
		case "is_apply_install_terminal":
			out.Values[i] = ec._vehicle_info_change_log_is_apply_install_terminal(ctx, field, obj)
		case "is_complete":
			out.Values[i] = ec._vehicle_info_change_log_is_complete(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._vehicle_info_change_log_is_delete(ctx, field, obj)
		case "is_import":
			out.Values[i] = ec._vehicle_info_change_log_is_import(ctx, field, obj)
		case "is_input":
			out.Values[i] = ec._vehicle_info_change_log_is_input(ctx, field, obj)
		case "is_upload_province":
			out.Values[i] = ec._vehicle_info_change_log_is_upload_province(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_change_log_license_plate_color(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._vehicle_info_change_log_license_plate_number(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_change_log_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_change_log_muck_truck_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "operating_route":
			out.Values[i] = ec._vehicle_info_change_log_operating_route(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_change_log_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_change_log_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_change_log_operating_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":
			out.Values[i] = ec._vehicle_info_change_log_owner(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._vehicle_info_change_log_quasi_driving_models(ctx, field, obj)
		case "record_at":
			out.Values[i] = ec._vehicle_info_change_log_record_at(ctx, field, obj)
		case "record_by":
			out.Values[i] = ec._vehicle_info_change_log_record_by(ctx, field, obj)
		case "remark_in":
			out.Values[i] = ec._vehicle_info_change_log_remark_in(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._vehicle_info_change_log_remarks(ctx, field, obj)
		case "retirement_date":
			out.Values[i] = ec._vehicle_info_change_log_retirement_date(ctx, field, obj)
		case "road_transport_license_number":
			out.Values[i] = ec._vehicle_info_change_log_road_transport_license_number(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_change_log_seats(ctx, field, obj)
		case "terminal_id":
			out.Values[i] = ec._vehicle_info_change_log_terminal_id(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._vehicle_info_change_log_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._vehicle_info_change_log_update_by(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._vehicle_info_change_log_update_time_in(ctx, field, obj)
		case "use_nature":
			out.Values[i] = ec._vehicle_info_change_log_use_nature(ctx, field, obj)
		case "vehicle_brand":
			out.Values[i] = ec._vehicle_info_change_log_vehicle_brand(ctx, field, obj)
		case "vehicle_displacement":
			out.Values[i] = ec._vehicle_info_change_log_vehicle_displacement(ctx, field, obj)
		case "vehicle_identification_number":
			out.Values[i] = ec._vehicle_info_change_log_vehicle_identification_number(ctx, field, obj)
		case "vehicle_info_change_id":
			out.Values[i] = ec._vehicle_info_change_log_vehicle_info_change_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_maintenances":
			out.Values[i] = ec._vehicle_info_change_log_vehicle_maintenances(ctx, field, obj)
		case "vehicle_manager":
			out.Values[i] = ec._vehicle_info_change_log_vehicle_manager(ctx, field, obj)
		case "vehicle_manager_id_card":
			out.Values[i] = ec._vehicle_info_change_log_vehicle_manager_id_card(ctx, field, obj)
		case "vehicle_manager_phone":
			out.Values[i] = ec._vehicle_info_change_log_vehicle_manager_phone(ctx, field, obj)
		case "vehicle_state":
			out.Values[i] = ec._vehicle_info_change_log_vehicle_state(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_change_log_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_change_log_aggregateImplementors = []string{"vehicle_info_change_log_aggregate"}

func (ec *executionContext) _vehicle_info_change_log_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoChangeLogAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_change_log_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_change_log_aggregate")
		case "aggregate":
			out.Values[i] = ec._vehicle_info_change_log_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._vehicle_info_change_log_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_change_log_aggregate_fieldsImplementors = []string{"vehicle_info_change_log_aggregate_fields"}

func (ec *executionContext) _vehicle_info_change_log_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoChangeLogAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_change_log_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_change_log_aggregate_fields")
		case "avg":
			out.Values[i] = ec._vehicle_info_change_log_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._vehicle_info_change_log_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._vehicle_info_change_log_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._vehicle_info_change_log_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._vehicle_info_change_log_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._vehicle_info_change_log_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._vehicle_info_change_log_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._vehicle_info_change_log_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._vehicle_info_change_log_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._vehicle_info_change_log_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._vehicle_info_change_log_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_change_log_avg_fieldsImplementors = []string{"vehicle_info_change_log_avg_fields"}

func (ec *executionContext) _vehicle_info_change_log_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoChangeLogAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_change_log_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_change_log_avg_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_change_log_avg_fields_business_scope(ctx, field, obj)
		case "car_rental_price":
			out.Values[i] = ec._vehicle_info_change_log_avg_fields_car_rental_price(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._vehicle_info_change_log_avg_fields_check_state(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_change_log_avg_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_change_log_avg_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_change_log_avg_fields_industry_category(ctx, field, obj)
		case "insurance_company":
			out.Values[i] = ec._vehicle_info_change_log_avg_fields_insurance_company(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_change_log_avg_fields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_change_log_avg_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_change_log_avg_fields_muck_truck_id(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_change_log_avg_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_change_log_avg_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_change_log_avg_fields_operating_vehicle_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._vehicle_info_change_log_avg_fields_quasi_driving_models(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_change_log_avg_fields_seats(ctx, field, obj)
		case "vehicle_brand":
			out.Values[i] = ec._vehicle_info_change_log_avg_fields_vehicle_brand(ctx, field, obj)
		case "vehicle_state":
			out.Values[i] = ec._vehicle_info_change_log_avg_fields_vehicle_state(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_change_log_avg_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_change_log_max_fieldsImplementors = []string{"vehicle_info_change_log_max_fields"}

func (ec *executionContext) _vehicle_info_change_log_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoChangeLogMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_change_log_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_change_log_max_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_business_scope(ctx, field, obj)
		case "car_rental_price":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_car_rental_price(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_check_state(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_delete_by(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_department_id(ctx, field, obj)
		case "driving_licensee_pic":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_driving_licensee_pic(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_enterprise_id(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_industry_category(ctx, field, obj)
		case "inspection_date":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_inspection_date(ctx, field, obj)
		case "insurance_company":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_insurance_company(ctx, field, obj)
		case "insurance_date":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_insurance_date(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_license_plate_color(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_license_plate_number(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_muck_truck_id(ctx, field, obj)
		case "operating_route":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_operating_route(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_operating_vehicle_id(ctx, field, obj)
		case "owner":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_owner(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_quasi_driving_models(ctx, field, obj)
		case "record_at":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_record_at(ctx, field, obj)
		case "record_by":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_record_by(ctx, field, obj)
		case "remark_in":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_remark_in(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_remarks(ctx, field, obj)
		case "retirement_date":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_retirement_date(ctx, field, obj)
		case "road_transport_license_number":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_road_transport_license_number(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_seats(ctx, field, obj)
		case "terminal_id":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_terminal_id(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_update_by(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_update_time_in(ctx, field, obj)
		case "use_nature":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_use_nature(ctx, field, obj)
		case "vehicle_brand":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_vehicle_brand(ctx, field, obj)
		case "vehicle_displacement":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_vehicle_displacement(ctx, field, obj)
		case "vehicle_identification_number":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_vehicle_identification_number(ctx, field, obj)
		case "vehicle_info_change_id":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_vehicle_info_change_id(ctx, field, obj)
		case "vehicle_manager":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_vehicle_manager(ctx, field, obj)
		case "vehicle_manager_id_card":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_vehicle_manager_id_card(ctx, field, obj)
		case "vehicle_manager_phone":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_vehicle_manager_phone(ctx, field, obj)
		case "vehicle_state":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_vehicle_state(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_change_log_max_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_change_log_min_fieldsImplementors = []string{"vehicle_info_change_log_min_fields"}

func (ec *executionContext) _vehicle_info_change_log_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoChangeLogMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_change_log_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_change_log_min_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_business_scope(ctx, field, obj)
		case "car_rental_price":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_car_rental_price(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_check_state(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_delete_by(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_department_id(ctx, field, obj)
		case "driving_licensee_pic":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_driving_licensee_pic(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_enterprise_id(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_industry_category(ctx, field, obj)
		case "inspection_date":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_inspection_date(ctx, field, obj)
		case "insurance_company":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_insurance_company(ctx, field, obj)
		case "insurance_date":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_insurance_date(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_license_plate_color(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_license_plate_number(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_muck_truck_id(ctx, field, obj)
		case "operating_route":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_operating_route(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_operating_vehicle_id(ctx, field, obj)
		case "owner":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_owner(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_quasi_driving_models(ctx, field, obj)
		case "record_at":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_record_at(ctx, field, obj)
		case "record_by":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_record_by(ctx, field, obj)
		case "remark_in":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_remark_in(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_remarks(ctx, field, obj)
		case "retirement_date":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_retirement_date(ctx, field, obj)
		case "road_transport_license_number":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_road_transport_license_number(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_seats(ctx, field, obj)
		case "terminal_id":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_terminal_id(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_update_by(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_update_time_in(ctx, field, obj)
		case "use_nature":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_use_nature(ctx, field, obj)
		case "vehicle_brand":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_vehicle_brand(ctx, field, obj)
		case "vehicle_displacement":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_vehicle_displacement(ctx, field, obj)
		case "vehicle_identification_number":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_vehicle_identification_number(ctx, field, obj)
		case "vehicle_info_change_id":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_vehicle_info_change_id(ctx, field, obj)
		case "vehicle_manager":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_vehicle_manager(ctx, field, obj)
		case "vehicle_manager_id_card":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_vehicle_manager_id_card(ctx, field, obj)
		case "vehicle_manager_phone":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_vehicle_manager_phone(ctx, field, obj)
		case "vehicle_state":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_vehicle_state(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_change_log_min_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_change_log_mutation_responseImplementors = []string{"vehicle_info_change_log_mutation_response"}

func (ec *executionContext) _vehicle_info_change_log_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoChangeLogMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_change_log_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_change_log_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._vehicle_info_change_log_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._vehicle_info_change_log_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_change_log_stddev_fieldsImplementors = []string{"vehicle_info_change_log_stddev_fields"}

func (ec *executionContext) _vehicle_info_change_log_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoChangeLogStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_change_log_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_change_log_stddev_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_change_log_stddev_fields_business_scope(ctx, field, obj)
		case "car_rental_price":
			out.Values[i] = ec._vehicle_info_change_log_stddev_fields_car_rental_price(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._vehicle_info_change_log_stddev_fields_check_state(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_change_log_stddev_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_change_log_stddev_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_change_log_stddev_fields_industry_category(ctx, field, obj)
		case "insurance_company":
			out.Values[i] = ec._vehicle_info_change_log_stddev_fields_insurance_company(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_change_log_stddev_fields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_change_log_stddev_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_change_log_stddev_fields_muck_truck_id(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_change_log_stddev_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_change_log_stddev_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_change_log_stddev_fields_operating_vehicle_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._vehicle_info_change_log_stddev_fields_quasi_driving_models(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_change_log_stddev_fields_seats(ctx, field, obj)
		case "vehicle_brand":
			out.Values[i] = ec._vehicle_info_change_log_stddev_fields_vehicle_brand(ctx, field, obj)
		case "vehicle_state":
			out.Values[i] = ec._vehicle_info_change_log_stddev_fields_vehicle_state(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_change_log_stddev_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_change_log_stddev_pop_fieldsImplementors = []string{"vehicle_info_change_log_stddev_pop_fields"}

func (ec *executionContext) _vehicle_info_change_log_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoChangeLogStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_change_log_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_change_log_stddev_pop_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_change_log_stddev_pop_fields_business_scope(ctx, field, obj)
		case "car_rental_price":
			out.Values[i] = ec._vehicle_info_change_log_stddev_pop_fields_car_rental_price(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._vehicle_info_change_log_stddev_pop_fields_check_state(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_change_log_stddev_pop_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_change_log_stddev_pop_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_change_log_stddev_pop_fields_industry_category(ctx, field, obj)
		case "insurance_company":
			out.Values[i] = ec._vehicle_info_change_log_stddev_pop_fields_insurance_company(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_change_log_stddev_pop_fields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_change_log_stddev_pop_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_change_log_stddev_pop_fields_muck_truck_id(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_change_log_stddev_pop_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_change_log_stddev_pop_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_change_log_stddev_pop_fields_operating_vehicle_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._vehicle_info_change_log_stddev_pop_fields_quasi_driving_models(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_change_log_stddev_pop_fields_seats(ctx, field, obj)
		case "vehicle_brand":
			out.Values[i] = ec._vehicle_info_change_log_stddev_pop_fields_vehicle_brand(ctx, field, obj)
		case "vehicle_state":
			out.Values[i] = ec._vehicle_info_change_log_stddev_pop_fields_vehicle_state(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_change_log_stddev_pop_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_change_log_stddev_samp_fieldsImplementors = []string{"vehicle_info_change_log_stddev_samp_fields"}

func (ec *executionContext) _vehicle_info_change_log_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoChangeLogStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_change_log_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_change_log_stddev_samp_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_change_log_stddev_samp_fields_business_scope(ctx, field, obj)
		case "car_rental_price":
			out.Values[i] = ec._vehicle_info_change_log_stddev_samp_fields_car_rental_price(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._vehicle_info_change_log_stddev_samp_fields_check_state(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_change_log_stddev_samp_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_change_log_stddev_samp_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_change_log_stddev_samp_fields_industry_category(ctx, field, obj)
		case "insurance_company":
			out.Values[i] = ec._vehicle_info_change_log_stddev_samp_fields_insurance_company(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_change_log_stddev_samp_fields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_change_log_stddev_samp_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_change_log_stddev_samp_fields_muck_truck_id(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_change_log_stddev_samp_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_change_log_stddev_samp_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_change_log_stddev_samp_fields_operating_vehicle_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._vehicle_info_change_log_stddev_samp_fields_quasi_driving_models(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_change_log_stddev_samp_fields_seats(ctx, field, obj)
		case "vehicle_brand":
			out.Values[i] = ec._vehicle_info_change_log_stddev_samp_fields_vehicle_brand(ctx, field, obj)
		case "vehicle_state":
			out.Values[i] = ec._vehicle_info_change_log_stddev_samp_fields_vehicle_state(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_change_log_stddev_samp_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_change_log_sum_fieldsImplementors = []string{"vehicle_info_change_log_sum_fields"}

func (ec *executionContext) _vehicle_info_change_log_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoChangeLogSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_change_log_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_change_log_sum_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_change_log_sum_fields_business_scope(ctx, field, obj)
		case "car_rental_price":
			out.Values[i] = ec._vehicle_info_change_log_sum_fields_car_rental_price(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._vehicle_info_change_log_sum_fields_check_state(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_change_log_sum_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_change_log_sum_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_change_log_sum_fields_industry_category(ctx, field, obj)
		case "insurance_company":
			out.Values[i] = ec._vehicle_info_change_log_sum_fields_insurance_company(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_change_log_sum_fields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_change_log_sum_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_change_log_sum_fields_muck_truck_id(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_change_log_sum_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_change_log_sum_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_change_log_sum_fields_operating_vehicle_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._vehicle_info_change_log_sum_fields_quasi_driving_models(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_change_log_sum_fields_seats(ctx, field, obj)
		case "vehicle_brand":
			out.Values[i] = ec._vehicle_info_change_log_sum_fields_vehicle_brand(ctx, field, obj)
		case "vehicle_state":
			out.Values[i] = ec._vehicle_info_change_log_sum_fields_vehicle_state(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_change_log_sum_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_change_log_var_pop_fieldsImplementors = []string{"vehicle_info_change_log_var_pop_fields"}

func (ec *executionContext) _vehicle_info_change_log_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoChangeLogVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_change_log_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_change_log_var_pop_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_change_log_var_pop_fields_business_scope(ctx, field, obj)
		case "car_rental_price":
			out.Values[i] = ec._vehicle_info_change_log_var_pop_fields_car_rental_price(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._vehicle_info_change_log_var_pop_fields_check_state(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_change_log_var_pop_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_change_log_var_pop_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_change_log_var_pop_fields_industry_category(ctx, field, obj)
		case "insurance_company":
			out.Values[i] = ec._vehicle_info_change_log_var_pop_fields_insurance_company(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_change_log_var_pop_fields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_change_log_var_pop_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_change_log_var_pop_fields_muck_truck_id(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_change_log_var_pop_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_change_log_var_pop_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_change_log_var_pop_fields_operating_vehicle_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._vehicle_info_change_log_var_pop_fields_quasi_driving_models(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_change_log_var_pop_fields_seats(ctx, field, obj)
		case "vehicle_brand":
			out.Values[i] = ec._vehicle_info_change_log_var_pop_fields_vehicle_brand(ctx, field, obj)
		case "vehicle_state":
			out.Values[i] = ec._vehicle_info_change_log_var_pop_fields_vehicle_state(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_change_log_var_pop_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_change_log_var_samp_fieldsImplementors = []string{"vehicle_info_change_log_var_samp_fields"}

func (ec *executionContext) _vehicle_info_change_log_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoChangeLogVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_change_log_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_change_log_var_samp_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_change_log_var_samp_fields_business_scope(ctx, field, obj)
		case "car_rental_price":
			out.Values[i] = ec._vehicle_info_change_log_var_samp_fields_car_rental_price(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._vehicle_info_change_log_var_samp_fields_check_state(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_change_log_var_samp_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_change_log_var_samp_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_change_log_var_samp_fields_industry_category(ctx, field, obj)
		case "insurance_company":
			out.Values[i] = ec._vehicle_info_change_log_var_samp_fields_insurance_company(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_change_log_var_samp_fields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_change_log_var_samp_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_change_log_var_samp_fields_muck_truck_id(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_change_log_var_samp_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_change_log_var_samp_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_change_log_var_samp_fields_operating_vehicle_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._vehicle_info_change_log_var_samp_fields_quasi_driving_models(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_change_log_var_samp_fields_seats(ctx, field, obj)
		case "vehicle_brand":
			out.Values[i] = ec._vehicle_info_change_log_var_samp_fields_vehicle_brand(ctx, field, obj)
		case "vehicle_state":
			out.Values[i] = ec._vehicle_info_change_log_var_samp_fields_vehicle_state(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_change_log_var_samp_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_change_log_variance_fieldsImplementors = []string{"vehicle_info_change_log_variance_fields"}

func (ec *executionContext) _vehicle_info_change_log_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoChangeLogVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_change_log_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_change_log_variance_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_change_log_variance_fields_business_scope(ctx, field, obj)
		case "car_rental_price":
			out.Values[i] = ec._vehicle_info_change_log_variance_fields_car_rental_price(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._vehicle_info_change_log_variance_fields_check_state(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_change_log_variance_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_change_log_variance_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_change_log_variance_fields_industry_category(ctx, field, obj)
		case "insurance_company":
			out.Values[i] = ec._vehicle_info_change_log_variance_fields_insurance_company(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_change_log_variance_fields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_change_log_variance_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_change_log_variance_fields_muck_truck_id(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_change_log_variance_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_change_log_variance_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_change_log_variance_fields_operating_vehicle_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._vehicle_info_change_log_variance_fields_quasi_driving_models(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_change_log_variance_fields_seats(ctx, field, obj)
		case "vehicle_brand":
			out.Values[i] = ec._vehicle_info_change_log_variance_fields_vehicle_brand(ctx, field, obj)
		case "vehicle_state":
			out.Values[i] = ec._vehicle_info_change_log_variance_fields_vehicle_state(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_change_log_variance_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_max_fieldsImplementors = []string{"vehicle_info_max_fields"}

func (ec *executionContext) _vehicle_info_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_max_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_max_fields_business_scope(ctx, field, obj)
		case "car_rental_price":
			out.Values[i] = ec._vehicle_info_max_fields_car_rental_price(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._vehicle_info_max_fields_check_state(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._vehicle_info_max_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._vehicle_info_max_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._vehicle_info_max_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._vehicle_info_max_fields_delete_by(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._vehicle_info_max_fields_department_id(ctx, field, obj)
		case "driving_licensee_pic":
			out.Values[i] = ec._vehicle_info_max_fields_driving_licensee_pic(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._vehicle_info_max_fields_enterprise_id(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_max_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_max_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_max_fields_industry_category(ctx, field, obj)
		case "inspection_date":
			out.Values[i] = ec._vehicle_info_max_fields_inspection_date(ctx, field, obj)
		case "insurance_company":
			out.Values[i] = ec._vehicle_info_max_fields_insurance_company(ctx, field, obj)
		case "insurance_date":
			out.Values[i] = ec._vehicle_info_max_fields_insurance_date(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_max_fields_license_plate_color(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._vehicle_info_max_fields_license_plate_number(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_max_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_max_fields_muck_truck_id(ctx, field, obj)
		case "operating_route":
			out.Values[i] = ec._vehicle_info_max_fields_operating_route(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_max_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_max_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_max_fields_operating_vehicle_id(ctx, field, obj)
		case "owner":
			out.Values[i] = ec._vehicle_info_max_fields_owner(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._vehicle_info_max_fields_quasi_driving_models(ctx, field, obj)
		case "record_at":
			out.Values[i] = ec._vehicle_info_max_fields_record_at(ctx, field, obj)
		case "record_by":
			out.Values[i] = ec._vehicle_info_max_fields_record_by(ctx, field, obj)
		case "remark_in":
			out.Values[i] = ec._vehicle_info_max_fields_remark_in(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._vehicle_info_max_fields_remarks(ctx, field, obj)
		case "retirement_date":
			out.Values[i] = ec._vehicle_info_max_fields_retirement_date(ctx, field, obj)
		case "road_transport_license_number":
			out.Values[i] = ec._vehicle_info_max_fields_road_transport_license_number(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_max_fields_seats(ctx, field, obj)
		case "terminal_id":
			out.Values[i] = ec._vehicle_info_max_fields_terminal_id(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._vehicle_info_max_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._vehicle_info_max_fields_update_by(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._vehicle_info_max_fields_update_time_in(ctx, field, obj)
		case "use_nature":
			out.Values[i] = ec._vehicle_info_max_fields_use_nature(ctx, field, obj)
		case "vehicle_brand":
			out.Values[i] = ec._vehicle_info_max_fields_vehicle_brand(ctx, field, obj)
		case "vehicle_displacement":
			out.Values[i] = ec._vehicle_info_max_fields_vehicle_displacement(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._vehicle_info_max_fields_vehicle_id(ctx, field, obj)
		case "vehicle_identification_number":
			out.Values[i] = ec._vehicle_info_max_fields_vehicle_identification_number(ctx, field, obj)
		case "vehicle_manager":
			out.Values[i] = ec._vehicle_info_max_fields_vehicle_manager(ctx, field, obj)
		case "vehicle_manager_id_card":
			out.Values[i] = ec._vehicle_info_max_fields_vehicle_manager_id_card(ctx, field, obj)
		case "vehicle_manager_phone":
			out.Values[i] = ec._vehicle_info_max_fields_vehicle_manager_phone(ctx, field, obj)
		case "vehicle_state":
			out.Values[i] = ec._vehicle_info_max_fields_vehicle_state(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_max_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_min_fieldsImplementors = []string{"vehicle_info_min_fields"}

func (ec *executionContext) _vehicle_info_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_min_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_min_fields_business_scope(ctx, field, obj)
		case "car_rental_price":
			out.Values[i] = ec._vehicle_info_min_fields_car_rental_price(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._vehicle_info_min_fields_check_state(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._vehicle_info_min_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._vehicle_info_min_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._vehicle_info_min_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._vehicle_info_min_fields_delete_by(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._vehicle_info_min_fields_department_id(ctx, field, obj)
		case "driving_licensee_pic":
			out.Values[i] = ec._vehicle_info_min_fields_driving_licensee_pic(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._vehicle_info_min_fields_enterprise_id(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_min_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_min_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_min_fields_industry_category(ctx, field, obj)
		case "inspection_date":
			out.Values[i] = ec._vehicle_info_min_fields_inspection_date(ctx, field, obj)
		case "insurance_company":
			out.Values[i] = ec._vehicle_info_min_fields_insurance_company(ctx, field, obj)
		case "insurance_date":
			out.Values[i] = ec._vehicle_info_min_fields_insurance_date(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_min_fields_license_plate_color(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._vehicle_info_min_fields_license_plate_number(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_min_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_min_fields_muck_truck_id(ctx, field, obj)
		case "operating_route":
			out.Values[i] = ec._vehicle_info_min_fields_operating_route(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_min_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_min_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_min_fields_operating_vehicle_id(ctx, field, obj)
		case "owner":
			out.Values[i] = ec._vehicle_info_min_fields_owner(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._vehicle_info_min_fields_quasi_driving_models(ctx, field, obj)
		case "record_at":
			out.Values[i] = ec._vehicle_info_min_fields_record_at(ctx, field, obj)
		case "record_by":
			out.Values[i] = ec._vehicle_info_min_fields_record_by(ctx, field, obj)
		case "remark_in":
			out.Values[i] = ec._vehicle_info_min_fields_remark_in(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._vehicle_info_min_fields_remarks(ctx, field, obj)
		case "retirement_date":
			out.Values[i] = ec._vehicle_info_min_fields_retirement_date(ctx, field, obj)
		case "road_transport_license_number":
			out.Values[i] = ec._vehicle_info_min_fields_road_transport_license_number(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_min_fields_seats(ctx, field, obj)
		case "terminal_id":
			out.Values[i] = ec._vehicle_info_min_fields_terminal_id(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._vehicle_info_min_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._vehicle_info_min_fields_update_by(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._vehicle_info_min_fields_update_time_in(ctx, field, obj)
		case "use_nature":
			out.Values[i] = ec._vehicle_info_min_fields_use_nature(ctx, field, obj)
		case "vehicle_brand":
			out.Values[i] = ec._vehicle_info_min_fields_vehicle_brand(ctx, field, obj)
		case "vehicle_displacement":
			out.Values[i] = ec._vehicle_info_min_fields_vehicle_displacement(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._vehicle_info_min_fields_vehicle_id(ctx, field, obj)
		case "vehicle_identification_number":
			out.Values[i] = ec._vehicle_info_min_fields_vehicle_identification_number(ctx, field, obj)
		case "vehicle_manager":
			out.Values[i] = ec._vehicle_info_min_fields_vehicle_manager(ctx, field, obj)
		case "vehicle_manager_id_card":
			out.Values[i] = ec._vehicle_info_min_fields_vehicle_manager_id_card(ctx, field, obj)
		case "vehicle_manager_phone":
			out.Values[i] = ec._vehicle_info_min_fields_vehicle_manager_phone(ctx, field, obj)
		case "vehicle_state":
			out.Values[i] = ec._vehicle_info_min_fields_vehicle_state(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_min_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_mutation_responseImplementors = []string{"vehicle_info_mutation_response"}

func (ec *executionContext) _vehicle_info_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._vehicle_info_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._vehicle_info_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_stddev_fieldsImplementors = []string{"vehicle_info_stddev_fields"}

func (ec *executionContext) _vehicle_info_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_stddev_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_stddev_fields_business_scope(ctx, field, obj)
		case "car_rental_price":
			out.Values[i] = ec._vehicle_info_stddev_fields_car_rental_price(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._vehicle_info_stddev_fields_check_state(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_stddev_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_stddev_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_stddev_fields_industry_category(ctx, field, obj)
		case "insurance_company":
			out.Values[i] = ec._vehicle_info_stddev_fields_insurance_company(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_stddev_fields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_stddev_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_stddev_fields_muck_truck_id(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_stddev_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_stddev_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_stddev_fields_operating_vehicle_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._vehicle_info_stddev_fields_quasi_driving_models(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_stddev_fields_seats(ctx, field, obj)
		case "vehicle_brand":
			out.Values[i] = ec._vehicle_info_stddev_fields_vehicle_brand(ctx, field, obj)
		case "vehicle_state":
			out.Values[i] = ec._vehicle_info_stddev_fields_vehicle_state(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_stddev_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_stddev_pop_fieldsImplementors = []string{"vehicle_info_stddev_pop_fields"}

func (ec *executionContext) _vehicle_info_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_stddev_pop_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_business_scope(ctx, field, obj)
		case "car_rental_price":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_car_rental_price(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_check_state(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_industry_category(ctx, field, obj)
		case "insurance_company":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_insurance_company(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_muck_truck_id(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_operating_vehicle_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_quasi_driving_models(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_seats(ctx, field, obj)
		case "vehicle_brand":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_vehicle_brand(ctx, field, obj)
		case "vehicle_state":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_vehicle_state(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_stddev_samp_fieldsImplementors = []string{"vehicle_info_stddev_samp_fields"}

func (ec *executionContext) _vehicle_info_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_stddev_samp_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_business_scope(ctx, field, obj)
		case "car_rental_price":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_car_rental_price(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_check_state(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_industry_category(ctx, field, obj)
		case "insurance_company":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_insurance_company(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_muck_truck_id(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_operating_vehicle_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_quasi_driving_models(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_seats(ctx, field, obj)
		case "vehicle_brand":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_vehicle_brand(ctx, field, obj)
		case "vehicle_state":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_vehicle_state(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_sum_fieldsImplementors = []string{"vehicle_info_sum_fields"}

func (ec *executionContext) _vehicle_info_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_sum_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_sum_fields_business_scope(ctx, field, obj)
		case "car_rental_price":
			out.Values[i] = ec._vehicle_info_sum_fields_car_rental_price(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._vehicle_info_sum_fields_check_state(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_sum_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_sum_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_sum_fields_industry_category(ctx, field, obj)
		case "insurance_company":
			out.Values[i] = ec._vehicle_info_sum_fields_insurance_company(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_sum_fields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_sum_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_sum_fields_muck_truck_id(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_sum_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_sum_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_sum_fields_operating_vehicle_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._vehicle_info_sum_fields_quasi_driving_models(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_sum_fields_seats(ctx, field, obj)
		case "vehicle_brand":
			out.Values[i] = ec._vehicle_info_sum_fields_vehicle_brand(ctx, field, obj)
		case "vehicle_state":
			out.Values[i] = ec._vehicle_info_sum_fields_vehicle_state(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_sum_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_var_pop_fieldsImplementors = []string{"vehicle_info_var_pop_fields"}

func (ec *executionContext) _vehicle_info_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_var_pop_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_var_pop_fields_business_scope(ctx, field, obj)
		case "car_rental_price":
			out.Values[i] = ec._vehicle_info_var_pop_fields_car_rental_price(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._vehicle_info_var_pop_fields_check_state(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_var_pop_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_var_pop_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_var_pop_fields_industry_category(ctx, field, obj)
		case "insurance_company":
			out.Values[i] = ec._vehicle_info_var_pop_fields_insurance_company(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_var_pop_fields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_var_pop_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_var_pop_fields_muck_truck_id(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_var_pop_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_var_pop_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_var_pop_fields_operating_vehicle_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._vehicle_info_var_pop_fields_quasi_driving_models(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_var_pop_fields_seats(ctx, field, obj)
		case "vehicle_brand":
			out.Values[i] = ec._vehicle_info_var_pop_fields_vehicle_brand(ctx, field, obj)
		case "vehicle_state":
			out.Values[i] = ec._vehicle_info_var_pop_fields_vehicle_state(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_var_pop_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_var_samp_fieldsImplementors = []string{"vehicle_info_var_samp_fields"}

func (ec *executionContext) _vehicle_info_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_var_samp_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_var_samp_fields_business_scope(ctx, field, obj)
		case "car_rental_price":
			out.Values[i] = ec._vehicle_info_var_samp_fields_car_rental_price(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._vehicle_info_var_samp_fields_check_state(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_var_samp_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_var_samp_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_var_samp_fields_industry_category(ctx, field, obj)
		case "insurance_company":
			out.Values[i] = ec._vehicle_info_var_samp_fields_insurance_company(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_var_samp_fields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_var_samp_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_var_samp_fields_muck_truck_id(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_var_samp_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_var_samp_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_var_samp_fields_operating_vehicle_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._vehicle_info_var_samp_fields_quasi_driving_models(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_var_samp_fields_seats(ctx, field, obj)
		case "vehicle_brand":
			out.Values[i] = ec._vehicle_info_var_samp_fields_vehicle_brand(ctx, field, obj)
		case "vehicle_state":
			out.Values[i] = ec._vehicle_info_var_samp_fields_vehicle_state(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_var_samp_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_variance_fieldsImplementors = []string{"vehicle_info_variance_fields"}

func (ec *executionContext) _vehicle_info_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_variance_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_variance_fields_business_scope(ctx, field, obj)
		case "car_rental_price":
			out.Values[i] = ec._vehicle_info_variance_fields_car_rental_price(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._vehicle_info_variance_fields_check_state(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_variance_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_variance_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_variance_fields_industry_category(ctx, field, obj)
		case "insurance_company":
			out.Values[i] = ec._vehicle_info_variance_fields_insurance_company(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_variance_fields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_variance_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_variance_fields_muck_truck_id(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_variance_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_variance_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_variance_fields_operating_vehicle_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._vehicle_info_variance_fields_quasi_driving_models(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_variance_fields_seats(ctx, field, obj)
		case "vehicle_brand":
			out.Values[i] = ec._vehicle_info_variance_fields_vehicle_brand(ctx, field, obj)
		case "vehicle_state":
			out.Values[i] = ec._vehicle_info_variance_fields_vehicle_state(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_variance_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_supervision_photoImplementors = []string{"vehicle_supervision_photo"}

func (ec *executionContext) _vehicle_supervision_photo(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleSupervisionPhoto) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_supervision_photoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_supervision_photo")
		case "IMEI":
			out.Values[i] = ec._vehicle_supervision_photo_IMEI(ctx, field, obj)
		case "camera_id":
			out.Values[i] = ec._vehicle_supervision_photo_camera_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._vehicle_supervision_photo_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._vehicle_supervision_photo_enterprise_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_supervision_photo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "monitoring_pic_address":
			out.Values[i] = ec._vehicle_supervision_photo_monitoring_pic_address(ctx, field, obj)
		case "monitoring_pic_name":
			out.Values[i] = ec._vehicle_supervision_photo_monitoring_pic_name(ctx, field, obj)
		case "monitoring_pic_upload_time":
			out.Values[i] = ec._vehicle_supervision_photo_monitoring_pic_upload_time(ctx, field, obj)
		case "photo_condition":
			out.Values[i] = ec._vehicle_supervision_photo_photo_condition(ctx, field, obj)
		case "sim_number":
			out.Values[i] = ec._vehicle_supervision_photo_sim_number(ctx, field, obj)
		case "supervision_photo_id":
			out.Values[i] = ec._vehicle_supervision_photo_supervision_photo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "update_time":
			out.Values[i] = ec._vehicle_supervision_photo_update_time(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._vehicle_supervision_photo_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_supervision_photo_aggregateImplementors = []string{"vehicle_supervision_photo_aggregate"}

func (ec *executionContext) _vehicle_supervision_photo_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleSupervisionPhotoAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_supervision_photo_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_supervision_photo_aggregate")
		case "aggregate":
			out.Values[i] = ec._vehicle_supervision_photo_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._vehicle_supervision_photo_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_supervision_photo_aggregate_fieldsImplementors = []string{"vehicle_supervision_photo_aggregate_fields"}

func (ec *executionContext) _vehicle_supervision_photo_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleSupervisionPhotoAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_supervision_photo_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_supervision_photo_aggregate_fields")
		case "avg":
			out.Values[i] = ec._vehicle_supervision_photo_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._vehicle_supervision_photo_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._vehicle_supervision_photo_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._vehicle_supervision_photo_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._vehicle_supervision_photo_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._vehicle_supervision_photo_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._vehicle_supervision_photo_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._vehicle_supervision_photo_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._vehicle_supervision_photo_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._vehicle_supervision_photo_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._vehicle_supervision_photo_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_supervision_photo_avg_fieldsImplementors = []string{"vehicle_supervision_photo_avg_fields"}

func (ec *executionContext) _vehicle_supervision_photo_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleSupervisionPhotoAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_supervision_photo_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_supervision_photo_avg_fields")
		case "camera_id":
			out.Values[i] = ec._vehicle_supervision_photo_avg_fields_camera_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_supervision_photo_avg_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_supervision_photo_max_fieldsImplementors = []string{"vehicle_supervision_photo_max_fields"}

func (ec *executionContext) _vehicle_supervision_photo_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleSupervisionPhotoMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_supervision_photo_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_supervision_photo_max_fields")
		case "IMEI":
			out.Values[i] = ec._vehicle_supervision_photo_max_fields_IMEI(ctx, field, obj)
		case "camera_id":
			out.Values[i] = ec._vehicle_supervision_photo_max_fields_camera_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._vehicle_supervision_photo_max_fields_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._vehicle_supervision_photo_max_fields_enterprise_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_supervision_photo_max_fields_id(ctx, field, obj)
		case "monitoring_pic_address":
			out.Values[i] = ec._vehicle_supervision_photo_max_fields_monitoring_pic_address(ctx, field, obj)
		case "monitoring_pic_name":
			out.Values[i] = ec._vehicle_supervision_photo_max_fields_monitoring_pic_name(ctx, field, obj)
		case "monitoring_pic_upload_time":
			out.Values[i] = ec._vehicle_supervision_photo_max_fields_monitoring_pic_upload_time(ctx, field, obj)
		case "photo_condition":
			out.Values[i] = ec._vehicle_supervision_photo_max_fields_photo_condition(ctx, field, obj)
		case "sim_number":
			out.Values[i] = ec._vehicle_supervision_photo_max_fields_sim_number(ctx, field, obj)
		case "supervision_photo_id":
			out.Values[i] = ec._vehicle_supervision_photo_max_fields_supervision_photo_id(ctx, field, obj)
		case "update_time":
			out.Values[i] = ec._vehicle_supervision_photo_max_fields_update_time(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._vehicle_supervision_photo_max_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_supervision_photo_min_fieldsImplementors = []string{"vehicle_supervision_photo_min_fields"}

func (ec *executionContext) _vehicle_supervision_photo_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleSupervisionPhotoMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_supervision_photo_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_supervision_photo_min_fields")
		case "IMEI":
			out.Values[i] = ec._vehicle_supervision_photo_min_fields_IMEI(ctx, field, obj)
		case "camera_id":
			out.Values[i] = ec._vehicle_supervision_photo_min_fields_camera_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._vehicle_supervision_photo_min_fields_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._vehicle_supervision_photo_min_fields_enterprise_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_supervision_photo_min_fields_id(ctx, field, obj)
		case "monitoring_pic_address":
			out.Values[i] = ec._vehicle_supervision_photo_min_fields_monitoring_pic_address(ctx, field, obj)
		case "monitoring_pic_name":
			out.Values[i] = ec._vehicle_supervision_photo_min_fields_monitoring_pic_name(ctx, field, obj)
		case "monitoring_pic_upload_time":
			out.Values[i] = ec._vehicle_supervision_photo_min_fields_monitoring_pic_upload_time(ctx, field, obj)
		case "photo_condition":
			out.Values[i] = ec._vehicle_supervision_photo_min_fields_photo_condition(ctx, field, obj)
		case "sim_number":
			out.Values[i] = ec._vehicle_supervision_photo_min_fields_sim_number(ctx, field, obj)
		case "supervision_photo_id":
			out.Values[i] = ec._vehicle_supervision_photo_min_fields_supervision_photo_id(ctx, field, obj)
		case "update_time":
			out.Values[i] = ec._vehicle_supervision_photo_min_fields_update_time(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._vehicle_supervision_photo_min_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_supervision_photo_mutation_responseImplementors = []string{"vehicle_supervision_photo_mutation_response"}

func (ec *executionContext) _vehicle_supervision_photo_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleSupervisionPhotoMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_supervision_photo_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_supervision_photo_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._vehicle_supervision_photo_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._vehicle_supervision_photo_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_supervision_photo_stddev_fieldsImplementors = []string{"vehicle_supervision_photo_stddev_fields"}

func (ec *executionContext) _vehicle_supervision_photo_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleSupervisionPhotoStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_supervision_photo_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_supervision_photo_stddev_fields")
		case "camera_id":
			out.Values[i] = ec._vehicle_supervision_photo_stddev_fields_camera_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_supervision_photo_stddev_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_supervision_photo_stddev_pop_fieldsImplementors = []string{"vehicle_supervision_photo_stddev_pop_fields"}

func (ec *executionContext) _vehicle_supervision_photo_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleSupervisionPhotoStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_supervision_photo_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_supervision_photo_stddev_pop_fields")
		case "camera_id":
			out.Values[i] = ec._vehicle_supervision_photo_stddev_pop_fields_camera_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_supervision_photo_stddev_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_supervision_photo_stddev_samp_fieldsImplementors = []string{"vehicle_supervision_photo_stddev_samp_fields"}

func (ec *executionContext) _vehicle_supervision_photo_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleSupervisionPhotoStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_supervision_photo_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_supervision_photo_stddev_samp_fields")
		case "camera_id":
			out.Values[i] = ec._vehicle_supervision_photo_stddev_samp_fields_camera_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_supervision_photo_stddev_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_supervision_photo_sum_fieldsImplementors = []string{"vehicle_supervision_photo_sum_fields"}

func (ec *executionContext) _vehicle_supervision_photo_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleSupervisionPhotoSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_supervision_photo_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_supervision_photo_sum_fields")
		case "camera_id":
			out.Values[i] = ec._vehicle_supervision_photo_sum_fields_camera_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_supervision_photo_sum_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_supervision_photo_var_pop_fieldsImplementors = []string{"vehicle_supervision_photo_var_pop_fields"}

func (ec *executionContext) _vehicle_supervision_photo_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleSupervisionPhotoVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_supervision_photo_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_supervision_photo_var_pop_fields")
		case "camera_id":
			out.Values[i] = ec._vehicle_supervision_photo_var_pop_fields_camera_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_supervision_photo_var_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_supervision_photo_var_samp_fieldsImplementors = []string{"vehicle_supervision_photo_var_samp_fields"}

func (ec *executionContext) _vehicle_supervision_photo_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleSupervisionPhotoVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_supervision_photo_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_supervision_photo_var_samp_fields")
		case "camera_id":
			out.Values[i] = ec._vehicle_supervision_photo_var_samp_fields_camera_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_supervision_photo_var_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_supervision_photo_variance_fieldsImplementors = []string{"vehicle_supervision_photo_variance_fields"}

func (ec *executionContext) _vehicle_supervision_photo_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleSupervisionPhotoVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_supervision_photo_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_supervision_photo_variance_fields")
		case "camera_id":
			out.Values[i] = ec._vehicle_supervision_photo_variance_fields_camera_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_supervision_photo_variance_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNJJ_VEHICLE2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.JjVehicle) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNJJ_VEHICLE2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicle(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNJJ_VEHICLE2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicle(ctx context.Context, sel ast.SelectionSet, v *model.JjVehicle) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._JJ_VEHICLE(ctx, sel, v)
}

func (ec *executionContext) marshalNJJ_VEHICLE_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleAggregate(ctx context.Context, sel ast.SelectionSet, v model.JjVehicleAggregate) graphql.Marshaler {
	return ec._JJ_VEHICLE_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNJJ_VEHICLE_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleAggregate(ctx context.Context, sel ast.SelectionSet, v *model.JjVehicleAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._JJ_VEHICLE_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNJJ_VEHICLE_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleBoolExp(ctx context.Context, v interface{}) (model.JjVehicleBoolExp, error) {
	res, err := ec.unmarshalInputJJ_VEHICLE_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNJJ_VEHICLE_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleConstraint(ctx context.Context, v interface{}) (model.JjVehicleConstraint, error) {
	var res model.JjVehicleConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJJ_VEHICLE_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleConstraint(ctx context.Context, sel ast.SelectionSet, v model.JjVehicleConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNJJ_VEHICLE_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleInsertInput(ctx context.Context, v interface{}) (model.JjVehicleInsertInput, error) {
	res, err := ec.unmarshalInputJJ_VEHICLE_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNJJ_VEHICLE_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.JjVehicleInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.JjVehicleInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNJJ_VEHICLE_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNJJ_VEHICLE_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleInsertInput(ctx context.Context, v interface{}) (*model.JjVehicleInsertInput, error) {
	res, err := ec.unmarshalInputJJ_VEHICLE_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNJJ_VEHICLE_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleOrderBy(ctx context.Context, v interface{}) (*model.JjVehicleOrderBy, error) {
	res, err := ec.unmarshalInputJJ_VEHICLE_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNJJ_VEHICLE_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehiclePkColumnsInput(ctx context.Context, v interface{}) (model.JjVehiclePkColumnsInput, error) {
	res, err := ec.unmarshalInputJJ_VEHICLE_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNJJ_VEHICLE_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleSelectColumn(ctx context.Context, v interface{}) (model.JjVehicleSelectColumn, error) {
	var res model.JjVehicleSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJJ_VEHICLE_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.JjVehicleSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNJJ_VEHICLE_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleUpdateColumn(ctx context.Context, v interface{}) (model.JjVehicleUpdateColumn, error) {
	var res model.JjVehicleUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJJ_VEHICLE_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.JjVehicleUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNJJ_VEHICLE_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.JjVehicleUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.JjVehicleUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNJJ_VEHICLE_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNJJ_VEHICLE_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.JjVehicleUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNJJ_VEHICLE_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN_jsonb2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_jsonb2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNbigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNbigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNmuck_truck_category_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MuckTruckCategoryInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNmuck_truck_category_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNmuck_truck_category_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfo(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckCategoryInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._muck_truck_category_info(ctx, sel, v)
}

func (ec *executionContext) marshalNmuck_truck_category_info_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoAggregate(ctx context.Context, sel ast.SelectionSet, v model.MuckTruckCategoryInfoAggregate) graphql.Marshaler {
	return ec._muck_truck_category_info_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNmuck_truck_category_info_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoAggregate(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckCategoryInfoAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._muck_truck_category_info_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNmuck_truck_category_info_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoBoolExp(ctx context.Context, v interface{}) (model.MuckTruckCategoryInfoBoolExp, error) {
	res, err := ec.unmarshalInputmuck_truck_category_info_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNmuck_truck_category_info_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoConstraint(ctx context.Context, v interface{}) (model.MuckTruckCategoryInfoConstraint, error) {
	var res model.MuckTruckCategoryInfoConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNmuck_truck_category_info_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoConstraint(ctx context.Context, sel ast.SelectionSet, v model.MuckTruckCategoryInfoConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNmuck_truck_category_info_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoInsertInput(ctx context.Context, v interface{}) (model.MuckTruckCategoryInfoInsertInput, error) {
	res, err := ec.unmarshalInputmuck_truck_category_info_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNmuck_truck_category_info_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.MuckTruckCategoryInfoInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MuckTruckCategoryInfoInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNmuck_truck_category_info_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNmuck_truck_category_info_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoInsertInput(ctx context.Context, v interface{}) (*model.MuckTruckCategoryInfoInsertInput, error) {
	res, err := ec.unmarshalInputmuck_truck_category_info_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNmuck_truck_category_info_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckCategoryInfoOrderBy, error) {
	res, err := ec.unmarshalInputmuck_truck_category_info_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNmuck_truck_category_info_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoPkColumnsInput(ctx context.Context, v interface{}) (model.MuckTruckCategoryInfoPkColumnsInput, error) {
	res, err := ec.unmarshalInputmuck_truck_category_info_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNmuck_truck_category_info_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoSelectColumn(ctx context.Context, v interface{}) (model.MuckTruckCategoryInfoSelectColumn, error) {
	var res model.MuckTruckCategoryInfoSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNmuck_truck_category_info_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.MuckTruckCategoryInfoSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNmuck_truck_category_info_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoUpdateColumn(ctx context.Context, v interface{}) (model.MuckTruckCategoryInfoUpdateColumn, error) {
	var res model.MuckTruckCategoryInfoUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNmuck_truck_category_info_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.MuckTruckCategoryInfoUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNmuck_truck_category_info_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.MuckTruckCategoryInfoUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.MuckTruckCategoryInfoUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNmuck_truck_category_info_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNmuck_truck_category_info_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.MuckTruckCategoryInfoUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNmuck_truck_category_info_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNmuck_truck_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MuckTruckInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNmuck_truck_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNmuck_truck_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfo(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._muck_truck_info(ctx, sel, v)
}

func (ec *executionContext) marshalNmuck_truck_info_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoAggregate(ctx context.Context, sel ast.SelectionSet, v model.MuckTruckInfoAggregate) graphql.Marshaler {
	return ec._muck_truck_info_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNmuck_truck_info_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoAggregate(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckInfoAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._muck_truck_info_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNmuck_truck_info_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoBoolExp(ctx context.Context, v interface{}) (model.MuckTruckInfoBoolExp, error) {
	res, err := ec.unmarshalInputmuck_truck_info_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNmuck_truck_info_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoConstraint(ctx context.Context, v interface{}) (model.MuckTruckInfoConstraint, error) {
	var res model.MuckTruckInfoConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNmuck_truck_info_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoConstraint(ctx context.Context, sel ast.SelectionSet, v model.MuckTruckInfoConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNmuck_truck_info_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoInsertInput(ctx context.Context, v interface{}) (model.MuckTruckInfoInsertInput, error) {
	res, err := ec.unmarshalInputmuck_truck_info_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNmuck_truck_info_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.MuckTruckInfoInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MuckTruckInfoInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNmuck_truck_info_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNmuck_truck_info_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoInsertInput(ctx context.Context, v interface{}) (*model.MuckTruckInfoInsertInput, error) {
	res, err := ec.unmarshalInputmuck_truck_info_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNmuck_truck_info_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckInfoOrderBy, error) {
	res, err := ec.unmarshalInputmuck_truck_info_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNmuck_truck_info_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoPkColumnsInput(ctx context.Context, v interface{}) (model.MuckTruckInfoPkColumnsInput, error) {
	res, err := ec.unmarshalInputmuck_truck_info_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNmuck_truck_info_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoSelectColumn(ctx context.Context, v interface{}) (model.MuckTruckInfoSelectColumn, error) {
	var res model.MuckTruckInfoSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNmuck_truck_info_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.MuckTruckInfoSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNmuck_truck_info_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoUpdateColumn(ctx context.Context, v interface{}) (model.MuckTruckInfoUpdateColumn, error) {
	var res model.MuckTruckInfoUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNmuck_truck_info_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.MuckTruckInfoUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNmuck_truck_info_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.MuckTruckInfoUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.MuckTruckInfoUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNmuck_truck_info_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNmuck_truck_info_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.MuckTruckInfoUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNmuck_truck_info_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNmuck_truck_preview_number2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MuckTruckPreviewNumber) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNmuck_truck_preview_number2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumber(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNmuck_truck_preview_number2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumber(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckPreviewNumber) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._muck_truck_preview_number(ctx, sel, v)
}

func (ec *executionContext) marshalNmuck_truck_preview_number_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberAggregate(ctx context.Context, sel ast.SelectionSet, v model.MuckTruckPreviewNumberAggregate) graphql.Marshaler {
	return ec._muck_truck_preview_number_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNmuck_truck_preview_number_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberAggregate(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckPreviewNumberAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._muck_truck_preview_number_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNmuck_truck_preview_number_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberBoolExp(ctx context.Context, v interface{}) (model.MuckTruckPreviewNumberBoolExp, error) {
	res, err := ec.unmarshalInputmuck_truck_preview_number_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNmuck_truck_preview_number_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberConstraint(ctx context.Context, v interface{}) (model.MuckTruckPreviewNumberConstraint, error) {
	var res model.MuckTruckPreviewNumberConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNmuck_truck_preview_number_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberConstraint(ctx context.Context, sel ast.SelectionSet, v model.MuckTruckPreviewNumberConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNmuck_truck_preview_number_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberInsertInput(ctx context.Context, v interface{}) (model.MuckTruckPreviewNumberInsertInput, error) {
	res, err := ec.unmarshalInputmuck_truck_preview_number_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNmuck_truck_preview_number_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.MuckTruckPreviewNumberInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MuckTruckPreviewNumberInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNmuck_truck_preview_number_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNmuck_truck_preview_number_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberInsertInput(ctx context.Context, v interface{}) (*model.MuckTruckPreviewNumberInsertInput, error) {
	res, err := ec.unmarshalInputmuck_truck_preview_number_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNmuck_truck_preview_number_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckPreviewNumberOrderBy, error) {
	res, err := ec.unmarshalInputmuck_truck_preview_number_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNmuck_truck_preview_number_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberPkColumnsInput(ctx context.Context, v interface{}) (model.MuckTruckPreviewNumberPkColumnsInput, error) {
	res, err := ec.unmarshalInputmuck_truck_preview_number_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNmuck_truck_preview_number_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberSelectColumn(ctx context.Context, v interface{}) (model.MuckTruckPreviewNumberSelectColumn, error) {
	var res model.MuckTruckPreviewNumberSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNmuck_truck_preview_number_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.MuckTruckPreviewNumberSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNmuck_truck_preview_number_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberUpdateColumn(ctx context.Context, v interface{}) (model.MuckTruckPreviewNumberUpdateColumn, error) {
	var res model.MuckTruckPreviewNumberUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNmuck_truck_preview_number_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.MuckTruckPreviewNumberUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNmuck_truck_preview_number_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.MuckTruckPreviewNumberUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.MuckTruckPreviewNumberUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNmuck_truck_preview_number_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNmuck_truck_preview_number_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.MuckTruckPreviewNumberUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNmuck_truck_preview_number_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNmuck_truck_worker_id_card_orders2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MuckTruckWorkerIDCardOrders) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNmuck_truck_worker_id_card_orders2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrders(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNmuck_truck_worker_id_card_orders2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrders(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckWorkerIDCardOrders) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._muck_truck_worker_id_card_orders(ctx, sel, v)
}

func (ec *executionContext) marshalNmuck_truck_worker_id_card_orders_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersAggregate(ctx context.Context, sel ast.SelectionSet, v model.MuckTruckWorkerIDCardOrdersAggregate) graphql.Marshaler {
	return ec._muck_truck_worker_id_card_orders_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNmuck_truck_worker_id_card_orders_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersAggregate(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckWorkerIDCardOrdersAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._muck_truck_worker_id_card_orders_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNmuck_truck_worker_id_card_orders_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersBoolExp(ctx context.Context, v interface{}) (model.MuckTruckWorkerIDCardOrdersBoolExp, error) {
	res, err := ec.unmarshalInputmuck_truck_worker_id_card_orders_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNmuck_truck_worker_id_card_orders_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersConstraint(ctx context.Context, v interface{}) (model.MuckTruckWorkerIDCardOrdersConstraint, error) {
	var res model.MuckTruckWorkerIDCardOrdersConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNmuck_truck_worker_id_card_orders_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersConstraint(ctx context.Context, sel ast.SelectionSet, v model.MuckTruckWorkerIDCardOrdersConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNmuck_truck_worker_id_card_orders_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersInsertInput(ctx context.Context, v interface{}) (model.MuckTruckWorkerIDCardOrdersInsertInput, error) {
	res, err := ec.unmarshalInputmuck_truck_worker_id_card_orders_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNmuck_truck_worker_id_card_orders_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.MuckTruckWorkerIDCardOrdersInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MuckTruckWorkerIDCardOrdersInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNmuck_truck_worker_id_card_orders_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNmuck_truck_worker_id_card_orders_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersInsertInput(ctx context.Context, v interface{}) (*model.MuckTruckWorkerIDCardOrdersInsertInput, error) {
	res, err := ec.unmarshalInputmuck_truck_worker_id_card_orders_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNmuck_truck_worker_id_card_orders_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckWorkerIDCardOrdersOrderBy, error) {
	res, err := ec.unmarshalInputmuck_truck_worker_id_card_orders_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNmuck_truck_worker_id_card_orders_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersPkColumnsInput(ctx context.Context, v interface{}) (model.MuckTruckWorkerIDCardOrdersPkColumnsInput, error) {
	res, err := ec.unmarshalInputmuck_truck_worker_id_card_orders_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNmuck_truck_worker_id_card_orders_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersSelectColumn(ctx context.Context, v interface{}) (model.MuckTruckWorkerIDCardOrdersSelectColumn, error) {
	var res model.MuckTruckWorkerIDCardOrdersSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNmuck_truck_worker_id_card_orders_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.MuckTruckWorkerIDCardOrdersSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNmuck_truck_worker_id_card_orders_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersUpdateColumn(ctx context.Context, v interface{}) (model.MuckTruckWorkerIDCardOrdersUpdateColumn, error) {
	var res model.MuckTruckWorkerIDCardOrdersUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNmuck_truck_worker_id_card_orders_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.MuckTruckWorkerIDCardOrdersUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNmuck_truck_worker_id_card_orders_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.MuckTruckWorkerIDCardOrdersUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.MuckTruckWorkerIDCardOrdersUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNmuck_truck_worker_id_card_orders_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNmuck_truck_worker_id_card_orders_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.MuckTruckWorkerIDCardOrdersUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNmuck_truck_worker_id_card_orders_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNnumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNnumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNoperating_vehicle_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.OperatingVehicleInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNoperating_vehicle_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNoperating_vehicle_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfo(ctx context.Context, sel ast.SelectionSet, v *model.OperatingVehicleInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._operating_vehicle_info(ctx, sel, v)
}

func (ec *executionContext) marshalNoperating_vehicle_info_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoAggregate(ctx context.Context, sel ast.SelectionSet, v model.OperatingVehicleInfoAggregate) graphql.Marshaler {
	return ec._operating_vehicle_info_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNoperating_vehicle_info_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoAggregate(ctx context.Context, sel ast.SelectionSet, v *model.OperatingVehicleInfoAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._operating_vehicle_info_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNoperating_vehicle_info_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoBoolExp(ctx context.Context, v interface{}) (model.OperatingVehicleInfoBoolExp, error) {
	res, err := ec.unmarshalInputoperating_vehicle_info_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNoperating_vehicle_info_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoConstraint(ctx context.Context, v interface{}) (model.OperatingVehicleInfoConstraint, error) {
	var res model.OperatingVehicleInfoConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNoperating_vehicle_info_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoConstraint(ctx context.Context, sel ast.SelectionSet, v model.OperatingVehicleInfoConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNoperating_vehicle_info_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoInsertInput(ctx context.Context, v interface{}) (model.OperatingVehicleInfoInsertInput, error) {
	res, err := ec.unmarshalInputoperating_vehicle_info_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNoperating_vehicle_info_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.OperatingVehicleInfoInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.OperatingVehicleInfoInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNoperating_vehicle_info_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNoperating_vehicle_info_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoInsertInput(ctx context.Context, v interface{}) (*model.OperatingVehicleInfoInsertInput, error) {
	res, err := ec.unmarshalInputoperating_vehicle_info_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNoperating_vehicle_info_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoOrderBy(ctx context.Context, v interface{}) (*model.OperatingVehicleInfoOrderBy, error) {
	res, err := ec.unmarshalInputoperating_vehicle_info_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNoperating_vehicle_info_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoPkColumnsInput(ctx context.Context, v interface{}) (model.OperatingVehicleInfoPkColumnsInput, error) {
	res, err := ec.unmarshalInputoperating_vehicle_info_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNoperating_vehicle_info_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoSelectColumn(ctx context.Context, v interface{}) (model.OperatingVehicleInfoSelectColumn, error) {
	var res model.OperatingVehicleInfoSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNoperating_vehicle_info_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.OperatingVehicleInfoSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNoperating_vehicle_info_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoUpdateColumn(ctx context.Context, v interface{}) (model.OperatingVehicleInfoUpdateColumn, error) {
	var res model.OperatingVehicleInfoUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNoperating_vehicle_info_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.OperatingVehicleInfoUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNoperating_vehicle_info_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.OperatingVehicleInfoUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.OperatingVehicleInfoUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNoperating_vehicle_info_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNoperating_vehicle_info_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OperatingVehicleInfoUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNoperating_vehicle_info_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNowner_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.OwnerInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNowner_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNowner_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfo(ctx context.Context, sel ast.SelectionSet, v *model.OwnerInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._owner_info(ctx, sel, v)
}

func (ec *executionContext) marshalNowner_info_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoAggregate(ctx context.Context, sel ast.SelectionSet, v model.OwnerInfoAggregate) graphql.Marshaler {
	return ec._owner_info_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNowner_info_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoAggregate(ctx context.Context, sel ast.SelectionSet, v *model.OwnerInfoAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._owner_info_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNowner_info_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoBoolExp(ctx context.Context, v interface{}) (model.OwnerInfoBoolExp, error) {
	res, err := ec.unmarshalInputowner_info_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNowner_info_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoConstraint(ctx context.Context, v interface{}) (model.OwnerInfoConstraint, error) {
	var res model.OwnerInfoConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNowner_info_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoConstraint(ctx context.Context, sel ast.SelectionSet, v model.OwnerInfoConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNowner_info_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoInsertInput(ctx context.Context, v interface{}) (model.OwnerInfoInsertInput, error) {
	res, err := ec.unmarshalInputowner_info_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNowner_info_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.OwnerInfoInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.OwnerInfoInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNowner_info_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNowner_info_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoInsertInput(ctx context.Context, v interface{}) (*model.OwnerInfoInsertInput, error) {
	res, err := ec.unmarshalInputowner_info_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNowner_info_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoOrderBy(ctx context.Context, v interface{}) (*model.OwnerInfoOrderBy, error) {
	res, err := ec.unmarshalInputowner_info_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNowner_info_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoPkColumnsInput(ctx context.Context, v interface{}) (model.OwnerInfoPkColumnsInput, error) {
	res, err := ec.unmarshalInputowner_info_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNowner_info_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoSelectColumn(ctx context.Context, v interface{}) (model.OwnerInfoSelectColumn, error) {
	var res model.OwnerInfoSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNowner_info_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.OwnerInfoSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNowner_info_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoUpdateColumn(ctx context.Context, v interface{}) (model.OwnerInfoUpdateColumn, error) {
	var res model.OwnerInfoUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNowner_info_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.OwnerInfoUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNowner_info_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.OwnerInfoUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.OwnerInfoUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNowner_info_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNowner_info_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OwnerInfoUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNowner_info_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNtimestamp2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNtimestamp2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNtimestamptz2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNtimestamptz2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := scalar.MarshalTimestamptz(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNvehicle_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.VehicleInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNvehicle_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfo(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._vehicle_info(ctx, sel, v)
}

func (ec *executionContext) marshalNvehicle_info_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoAggregate(ctx context.Context, sel ast.SelectionSet, v model.VehicleInfoAggregate) graphql.Marshaler {
	return ec._vehicle_info_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNvehicle_info_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._vehicle_info_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNvehicle_info_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoBoolExp(ctx context.Context, v interface{}) (model.VehicleInfoBoolExp, error) {
	res, err := ec.unmarshalInputvehicle_info_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_info_change_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.VehicleInfoChangeLog) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_info_change_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLog(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNvehicle_info_change_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLog(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoChangeLog) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._vehicle_info_change_log(ctx, sel, v)
}

func (ec *executionContext) marshalNvehicle_info_change_log_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogAggregate(ctx context.Context, sel ast.SelectionSet, v model.VehicleInfoChangeLogAggregate) graphql.Marshaler {
	return ec._vehicle_info_change_log_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNvehicle_info_change_log_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoChangeLogAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._vehicle_info_change_log_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNvehicle_info_change_log_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogBoolExp(ctx context.Context, v interface{}) (model.VehicleInfoChangeLogBoolExp, error) {
	res, err := ec.unmarshalInputvehicle_info_change_log_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_info_change_log_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogConstraint(ctx context.Context, v interface{}) (model.VehicleInfoChangeLogConstraint, error) {
	var res model.VehicleInfoChangeLogConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_info_change_log_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogConstraint(ctx context.Context, sel ast.SelectionSet, v model.VehicleInfoChangeLogConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_info_change_log_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogInsertInput(ctx context.Context, v interface{}) (model.VehicleInfoChangeLogInsertInput, error) {
	res, err := ec.unmarshalInputvehicle_info_change_log_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_info_change_log_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VehicleInfoChangeLogInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleInfoChangeLogInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_info_change_log_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNvehicle_info_change_log_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogInsertInput(ctx context.Context, v interface{}) (*model.VehicleInfoChangeLogInsertInput, error) {
	res, err := ec.unmarshalInputvehicle_info_change_log_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_info_change_log_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoChangeLogOrderBy, error) {
	res, err := ec.unmarshalInputvehicle_info_change_log_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_info_change_log_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogPkColumnsInput(ctx context.Context, v interface{}) (model.VehicleInfoChangeLogPkColumnsInput, error) {
	res, err := ec.unmarshalInputvehicle_info_change_log_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_info_change_log_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogSelectColumn(ctx context.Context, v interface{}) (model.VehicleInfoChangeLogSelectColumn, error) {
	var res model.VehicleInfoChangeLogSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_info_change_log_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleInfoChangeLogSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_info_change_log_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogUpdateColumn(ctx context.Context, v interface{}) (model.VehicleInfoChangeLogUpdateColumn, error) {
	var res model.VehicleInfoChangeLogUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_info_change_log_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleInfoChangeLogUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_info_change_log_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleInfoChangeLogUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleInfoChangeLogUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_info_change_log_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNvehicle_info_change_log_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleInfoChangeLogUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_info_change_log_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNvehicle_info_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoConstraint(ctx context.Context, v interface{}) (model.VehicleInfoConstraint, error) {
	var res model.VehicleInfoConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_info_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoConstraint(ctx context.Context, sel ast.SelectionSet, v model.VehicleInfoConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_info_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoInsertInput(ctx context.Context, v interface{}) (model.VehicleInfoInsertInput, error) {
	res, err := ec.unmarshalInputvehicle_info_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_info_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VehicleInfoInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleInfoInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_info_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNvehicle_info_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoInsertInput(ctx context.Context, v interface{}) (*model.VehicleInfoInsertInput, error) {
	res, err := ec.unmarshalInputvehicle_info_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_info_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoOrderBy, error) {
	res, err := ec.unmarshalInputvehicle_info_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_info_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoPkColumnsInput(ctx context.Context, v interface{}) (model.VehicleInfoPkColumnsInput, error) {
	res, err := ec.unmarshalInputvehicle_info_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_info_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoSelectColumn(ctx context.Context, v interface{}) (model.VehicleInfoSelectColumn, error) {
	var res model.VehicleInfoSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_info_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleInfoSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_info_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoUpdateColumn(ctx context.Context, v interface{}) (model.VehicleInfoUpdateColumn, error) {
	var res model.VehicleInfoUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_info_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleInfoUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_info_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleInfoUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleInfoUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_info_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNvehicle_info_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleInfoUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_info_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNvehicle_supervision_photo2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.VehicleSupervisionPhoto) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_supervision_photo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhoto(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNvehicle_supervision_photo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhoto(ctx context.Context, sel ast.SelectionSet, v *model.VehicleSupervisionPhoto) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._vehicle_supervision_photo(ctx, sel, v)
}

func (ec *executionContext) marshalNvehicle_supervision_photo_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoAggregate(ctx context.Context, sel ast.SelectionSet, v model.VehicleSupervisionPhotoAggregate) graphql.Marshaler {
	return ec._vehicle_supervision_photo_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNvehicle_supervision_photo_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VehicleSupervisionPhotoAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._vehicle_supervision_photo_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNvehicle_supervision_photo_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoBoolExp(ctx context.Context, v interface{}) (model.VehicleSupervisionPhotoBoolExp, error) {
	res, err := ec.unmarshalInputvehicle_supervision_photo_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_supervision_photo_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoConstraint(ctx context.Context, v interface{}) (model.VehicleSupervisionPhotoConstraint, error) {
	var res model.VehicleSupervisionPhotoConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_supervision_photo_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoConstraint(ctx context.Context, sel ast.SelectionSet, v model.VehicleSupervisionPhotoConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_supervision_photo_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoInsertInput(ctx context.Context, v interface{}) (model.VehicleSupervisionPhotoInsertInput, error) {
	res, err := ec.unmarshalInputvehicle_supervision_photo_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_supervision_photo_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VehicleSupervisionPhotoInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleSupervisionPhotoInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_supervision_photo_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNvehicle_supervision_photo_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoInsertInput(ctx context.Context, v interface{}) (*model.VehicleSupervisionPhotoInsertInput, error) {
	res, err := ec.unmarshalInputvehicle_supervision_photo_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_supervision_photo_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoOrderBy(ctx context.Context, v interface{}) (*model.VehicleSupervisionPhotoOrderBy, error) {
	res, err := ec.unmarshalInputvehicle_supervision_photo_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_supervision_photo_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoPkColumnsInput(ctx context.Context, v interface{}) (model.VehicleSupervisionPhotoPkColumnsInput, error) {
	res, err := ec.unmarshalInputvehicle_supervision_photo_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_supervision_photo_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoSelectColumn(ctx context.Context, v interface{}) (model.VehicleSupervisionPhotoSelectColumn, error) {
	var res model.VehicleSupervisionPhotoSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_supervision_photo_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleSupervisionPhotoSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_supervision_photo_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoUpdateColumn(ctx context.Context, v interface{}) (model.VehicleSupervisionPhotoUpdateColumn, error) {
	var res model.VehicleSupervisionPhotoUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_supervision_photo_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleSupervisionPhotoUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_supervision_photo_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleSupervisionPhotoUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleSupervisionPhotoUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_supervision_photo_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNvehicle_supervision_photo_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleSupervisionPhotoUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_supervision_photo_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model1.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBoolean_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx context.Context, v interface{}) (*model1.IntComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInt_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJJ_VEHICLE2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicle(ctx context.Context, sel ast.SelectionSet, v *model.JjVehicle) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JJ_VEHICLE(ctx, sel, v)
}

func (ec *executionContext) marshalOJJ_VEHICLE_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.JjVehicleAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JJ_VEHICLE_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOJJ_VEHICLE_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.JjVehicleAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JJ_VEHICLE_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOJJ_VEHICLE_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleAvgOrderBy(ctx context.Context, v interface{}) (*model.JjVehicleAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJJ_VEHICLE_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJJ_VEHICLE_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleBoolExp(ctx context.Context, v interface{}) ([]*model.JjVehicleBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.JjVehicleBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOJJ_VEHICLE_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOJJ_VEHICLE_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleBoolExp(ctx context.Context, v interface{}) (*model.JjVehicleBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJJ_VEHICLE_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJJ_VEHICLE_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleIncInput(ctx context.Context, v interface{}) (*model.JjVehicleIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJJ_VEHICLE_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJJ_VEHICLE_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.JjVehicleMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JJ_VEHICLE_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOJJ_VEHICLE_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleMaxOrderBy(ctx context.Context, v interface{}) (*model.JjVehicleMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJJ_VEHICLE_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJJ_VEHICLE_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleMinFields(ctx context.Context, sel ast.SelectionSet, v *model.JjVehicleMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JJ_VEHICLE_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOJJ_VEHICLE_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleMinOrderBy(ctx context.Context, v interface{}) (*model.JjVehicleMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJJ_VEHICLE_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJJ_VEHICLE_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.JjVehicleMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JJ_VEHICLE_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOJJ_VEHICLE_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleOnConflict(ctx context.Context, v interface{}) (*model.JjVehicleOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJJ_VEHICLE_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJJ_VEHICLE_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleOrderByᚄ(ctx context.Context, v interface{}) ([]*model.JjVehicleOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.JjVehicleOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNJJ_VEHICLE_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOJJ_VEHICLE_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.JjVehicleSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.JjVehicleSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNJJ_VEHICLE_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOJJ_VEHICLE_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.JjVehicleSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNJJ_VEHICLE_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOJJ_VEHICLE_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleSetInput(ctx context.Context, v interface{}) (*model.JjVehicleSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJJ_VEHICLE_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJJ_VEHICLE_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.JjVehicleStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JJ_VEHICLE_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOJJ_VEHICLE_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleStddevOrderBy(ctx context.Context, v interface{}) (*model.JjVehicleStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJJ_VEHICLE_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJJ_VEHICLE_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.JjVehicleStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JJ_VEHICLE_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOJJ_VEHICLE_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleStddevPopOrderBy(ctx context.Context, v interface{}) (*model.JjVehicleStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJJ_VEHICLE_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJJ_VEHICLE_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.JjVehicleStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JJ_VEHICLE_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOJJ_VEHICLE_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleStddevSampOrderBy(ctx context.Context, v interface{}) (*model.JjVehicleStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJJ_VEHICLE_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJJ_VEHICLE_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleSumFields(ctx context.Context, sel ast.SelectionSet, v *model.JjVehicleSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JJ_VEHICLE_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOJJ_VEHICLE_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleSumOrderBy(ctx context.Context, v interface{}) (*model.JjVehicleSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJJ_VEHICLE_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJJ_VEHICLE_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.JjVehicleVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JJ_VEHICLE_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOJJ_VEHICLE_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleVarPopOrderBy(ctx context.Context, v interface{}) (*model.JjVehicleVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJJ_VEHICLE_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJJ_VEHICLE_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.JjVehicleVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JJ_VEHICLE_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOJJ_VEHICLE_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleVarSampOrderBy(ctx context.Context, v interface{}) (*model.JjVehicleVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJJ_VEHICLE_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJJ_VEHICLE_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.JjVehicleVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JJ_VEHICLE_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOJJ_VEHICLE_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐJjVehicleVarianceOrderBy(ctx context.Context, v interface{}) (*model.JjVehicleVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJJ_VEHICLE_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model1.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputString_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalO_jsonb2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN_jsonb2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalO_jsonb2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalN_jsonb2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalO_jsonb2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO_jsonb2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalO_jsonb_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐJsonbComparisonExp(ctx context.Context, v interface{}) (*model1.JsonbComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInput_jsonb_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalObigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNbigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalObigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNbigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalObigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalObigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model1.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputbigint_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_category_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfo(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckCategoryInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_category_info(ctx, sel, v)
}

func (ec *executionContext) marshalOmuck_truck_category_info_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckCategoryInfoAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_category_info_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOmuck_truck_category_info_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckCategoryInfoAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_category_info_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_category_info_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoAvgOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckCategoryInfoAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_category_info_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOmuck_truck_category_info_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoBoolExp(ctx context.Context, v interface{}) ([]*model.MuckTruckCategoryInfoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MuckTruckCategoryInfoBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOmuck_truck_category_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOmuck_truck_category_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoBoolExp(ctx context.Context, v interface{}) (*model.MuckTruckCategoryInfoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_category_info_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOmuck_truck_category_info_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoIncInput(ctx context.Context, v interface{}) (*model.MuckTruckCategoryInfoIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_category_info_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_category_info_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckCategoryInfoMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_category_info_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_category_info_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoMaxOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckCategoryInfoMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_category_info_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_category_info_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoMinFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckCategoryInfoMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_category_info_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_category_info_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoMinOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckCategoryInfoMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_category_info_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_category_info_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckCategoryInfoMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_category_info_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_category_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoOnConflict(ctx context.Context, v interface{}) (*model.MuckTruckCategoryInfoOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_category_info_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOmuck_truck_category_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoOrderByᚄ(ctx context.Context, v interface{}) ([]*model.MuckTruckCategoryInfoOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MuckTruckCategoryInfoOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNmuck_truck_category_info_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOmuck_truck_category_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.MuckTruckCategoryInfoSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.MuckTruckCategoryInfoSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNmuck_truck_category_info_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOmuck_truck_category_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.MuckTruckCategoryInfoSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNmuck_truck_category_info_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOmuck_truck_category_info_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoSetInput(ctx context.Context, v interface{}) (*model.MuckTruckCategoryInfoSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_category_info_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_category_info_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckCategoryInfoStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_category_info_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_category_info_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoStddevOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckCategoryInfoStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_category_info_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_category_info_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckCategoryInfoStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_category_info_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_category_info_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoStddevPopOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckCategoryInfoStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_category_info_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_category_info_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckCategoryInfoStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_category_info_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_category_info_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoStddevSampOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckCategoryInfoStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_category_info_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_category_info_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoSumFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckCategoryInfoSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_category_info_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_category_info_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoSumOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckCategoryInfoSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_category_info_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_category_info_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckCategoryInfoVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_category_info_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_category_info_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoVarPopOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckCategoryInfoVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_category_info_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_category_info_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckCategoryInfoVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_category_info_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_category_info_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoVarSampOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckCategoryInfoVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_category_info_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_category_info_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckCategoryInfoVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_category_info_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_category_info_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckCategoryInfoVarianceOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckCategoryInfoVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_category_info_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfo(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_info(ctx, sel, v)
}

func (ec *executionContext) marshalOmuck_truck_info_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckInfoAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_info_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOmuck_truck_info_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckInfoAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_info_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_info_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoAvgOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckInfoAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_info_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOmuck_truck_info_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoBoolExp(ctx context.Context, v interface{}) ([]*model.MuckTruckInfoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MuckTruckInfoBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOmuck_truck_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOmuck_truck_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoBoolExp(ctx context.Context, v interface{}) (*model.MuckTruckInfoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_info_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOmuck_truck_info_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoIncInput(ctx context.Context, v interface{}) (*model.MuckTruckInfoIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_info_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_info_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckInfoMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_info_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_info_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoMaxOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckInfoMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_info_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_info_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoMinFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckInfoMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_info_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_info_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoMinOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckInfoMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_info_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_info_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckInfoMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_info_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoOnConflict(ctx context.Context, v interface{}) (*model.MuckTruckInfoOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_info_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOmuck_truck_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoOrderByᚄ(ctx context.Context, v interface{}) ([]*model.MuckTruckInfoOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MuckTruckInfoOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNmuck_truck_info_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOmuck_truck_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.MuckTruckInfoSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.MuckTruckInfoSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNmuck_truck_info_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOmuck_truck_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.MuckTruckInfoSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNmuck_truck_info_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOmuck_truck_info_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoSetInput(ctx context.Context, v interface{}) (*model.MuckTruckInfoSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_info_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_info_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckInfoStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_info_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_info_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoStddevOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckInfoStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_info_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_info_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckInfoStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_info_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_info_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoStddevPopOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckInfoStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_info_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_info_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckInfoStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_info_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_info_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoStddevSampOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckInfoStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_info_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_info_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoSumFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckInfoSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_info_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_info_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoSumOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckInfoSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_info_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_info_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckInfoVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_info_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_info_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoVarPopOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckInfoVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_info_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_info_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckInfoVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_info_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_info_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoVarSampOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckInfoVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_info_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_info_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckInfoVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_info_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_info_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckInfoVarianceOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckInfoVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_info_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_preview_number2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumber(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckPreviewNumber) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_preview_number(ctx, sel, v)
}

func (ec *executionContext) marshalOmuck_truck_preview_number_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckPreviewNumberAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_preview_number_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOmuck_truck_preview_number_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckPreviewNumberAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_preview_number_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_preview_number_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberAvgOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckPreviewNumberAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_preview_number_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOmuck_truck_preview_number_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberBoolExp(ctx context.Context, v interface{}) ([]*model.MuckTruckPreviewNumberBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MuckTruckPreviewNumberBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOmuck_truck_preview_number_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOmuck_truck_preview_number_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberBoolExp(ctx context.Context, v interface{}) (*model.MuckTruckPreviewNumberBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_preview_number_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOmuck_truck_preview_number_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberIncInput(ctx context.Context, v interface{}) (*model.MuckTruckPreviewNumberIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_preview_number_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_preview_number_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckPreviewNumberMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_preview_number_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_preview_number_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberMaxOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckPreviewNumberMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_preview_number_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_preview_number_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberMinFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckPreviewNumberMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_preview_number_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_preview_number_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberMinOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckPreviewNumberMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_preview_number_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_preview_number_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckPreviewNumberMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_preview_number_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_preview_number_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberOnConflict(ctx context.Context, v interface{}) (*model.MuckTruckPreviewNumberOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_preview_number_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOmuck_truck_preview_number_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberOrderByᚄ(ctx context.Context, v interface{}) ([]*model.MuckTruckPreviewNumberOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MuckTruckPreviewNumberOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNmuck_truck_preview_number_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOmuck_truck_preview_number_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.MuckTruckPreviewNumberSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.MuckTruckPreviewNumberSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNmuck_truck_preview_number_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOmuck_truck_preview_number_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.MuckTruckPreviewNumberSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNmuck_truck_preview_number_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOmuck_truck_preview_number_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberSetInput(ctx context.Context, v interface{}) (*model.MuckTruckPreviewNumberSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_preview_number_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_preview_number_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckPreviewNumberStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_preview_number_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_preview_number_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberStddevOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckPreviewNumberStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_preview_number_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_preview_number_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckPreviewNumberStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_preview_number_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_preview_number_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberStddevPopOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckPreviewNumberStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_preview_number_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_preview_number_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckPreviewNumberStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_preview_number_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_preview_number_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberStddevSampOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckPreviewNumberStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_preview_number_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_preview_number_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberSumFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckPreviewNumberSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_preview_number_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_preview_number_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberSumOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckPreviewNumberSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_preview_number_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_preview_number_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckPreviewNumberVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_preview_number_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_preview_number_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberVarPopOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckPreviewNumberVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_preview_number_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_preview_number_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckPreviewNumberVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_preview_number_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_preview_number_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberVarSampOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckPreviewNumberVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_preview_number_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_preview_number_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckPreviewNumberVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_preview_number_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_preview_number_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckPreviewNumberVarianceOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckPreviewNumberVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_preview_number_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_worker_id_card_orders2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrders(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckWorkerIDCardOrders) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_worker_id_card_orders(ctx, sel, v)
}

func (ec *executionContext) marshalOmuck_truck_worker_id_card_orders_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckWorkerIDCardOrdersAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_worker_id_card_orders_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOmuck_truck_worker_id_card_orders_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckWorkerIDCardOrdersAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_worker_id_card_orders_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_worker_id_card_orders_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersAvgOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckWorkerIDCardOrdersAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_worker_id_card_orders_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOmuck_truck_worker_id_card_orders_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersBoolExp(ctx context.Context, v interface{}) ([]*model.MuckTruckWorkerIDCardOrdersBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MuckTruckWorkerIDCardOrdersBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOmuck_truck_worker_id_card_orders_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOmuck_truck_worker_id_card_orders_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersBoolExp(ctx context.Context, v interface{}) (*model.MuckTruckWorkerIDCardOrdersBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_worker_id_card_orders_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOmuck_truck_worker_id_card_orders_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersIncInput(ctx context.Context, v interface{}) (*model.MuckTruckWorkerIDCardOrdersIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_worker_id_card_orders_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_worker_id_card_orders_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckWorkerIDCardOrdersMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_worker_id_card_orders_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_worker_id_card_orders_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersMaxOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckWorkerIDCardOrdersMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_worker_id_card_orders_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_worker_id_card_orders_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersMinFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckWorkerIDCardOrdersMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_worker_id_card_orders_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_worker_id_card_orders_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersMinOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckWorkerIDCardOrdersMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_worker_id_card_orders_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_worker_id_card_orders_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckWorkerIDCardOrdersMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_worker_id_card_orders_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_worker_id_card_orders_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersOnConflict(ctx context.Context, v interface{}) (*model.MuckTruckWorkerIDCardOrdersOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_worker_id_card_orders_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOmuck_truck_worker_id_card_orders_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersOrderByᚄ(ctx context.Context, v interface{}) ([]*model.MuckTruckWorkerIDCardOrdersOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MuckTruckWorkerIDCardOrdersOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNmuck_truck_worker_id_card_orders_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOmuck_truck_worker_id_card_orders_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.MuckTruckWorkerIDCardOrdersSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.MuckTruckWorkerIDCardOrdersSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNmuck_truck_worker_id_card_orders_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOmuck_truck_worker_id_card_orders_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.MuckTruckWorkerIDCardOrdersSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNmuck_truck_worker_id_card_orders_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOmuck_truck_worker_id_card_orders_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersSetInput(ctx context.Context, v interface{}) (*model.MuckTruckWorkerIDCardOrdersSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_worker_id_card_orders_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_worker_id_card_orders_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckWorkerIDCardOrdersStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_worker_id_card_orders_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_worker_id_card_orders_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersStddevOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckWorkerIDCardOrdersStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_worker_id_card_orders_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_worker_id_card_orders_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckWorkerIDCardOrdersStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_worker_id_card_orders_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_worker_id_card_orders_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersStddevPopOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckWorkerIDCardOrdersStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_worker_id_card_orders_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_worker_id_card_orders_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckWorkerIDCardOrdersStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_worker_id_card_orders_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_worker_id_card_orders_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersStddevSampOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckWorkerIDCardOrdersStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_worker_id_card_orders_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_worker_id_card_orders_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersSumFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckWorkerIDCardOrdersSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_worker_id_card_orders_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_worker_id_card_orders_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersSumOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckWorkerIDCardOrdersSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_worker_id_card_orders_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_worker_id_card_orders_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckWorkerIDCardOrdersVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_worker_id_card_orders_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_worker_id_card_orders_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersVarPopOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckWorkerIDCardOrdersVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_worker_id_card_orders_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_worker_id_card_orders_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckWorkerIDCardOrdersVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_worker_id_card_orders_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_worker_id_card_orders_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersVarSampOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckWorkerIDCardOrdersVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_worker_id_card_orders_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmuck_truck_worker_id_card_orders_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckWorkerIDCardOrdersVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._muck_truck_worker_id_card_orders_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOmuck_truck_worker_id_card_orders_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐMuckTruckWorkerIDCardOrdersVarianceOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckWorkerIDCardOrdersVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputmuck_truck_worker_id_card_orders_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOnumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNnumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOnumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNnumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOnumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOnumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx context.Context, v interface{}) (*model1.NumericComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputnumeric_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOoperating_vehicle_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfo(ctx context.Context, sel ast.SelectionSet, v *model.OperatingVehicleInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._operating_vehicle_info(ctx, sel, v)
}

func (ec *executionContext) marshalOoperating_vehicle_info_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.OperatingVehicleInfoAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._operating_vehicle_info_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOoperating_vehicle_info_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.OperatingVehicleInfoAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._operating_vehicle_info_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOoperating_vehicle_info_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoAvgOrderBy(ctx context.Context, v interface{}) (*model.OperatingVehicleInfoAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputoperating_vehicle_info_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOoperating_vehicle_info_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoBoolExp(ctx context.Context, v interface{}) ([]*model.OperatingVehicleInfoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.OperatingVehicleInfoBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOoperating_vehicle_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOoperating_vehicle_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoBoolExp(ctx context.Context, v interface{}) (*model.OperatingVehicleInfoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputoperating_vehicle_info_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOoperating_vehicle_info_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoIncInput(ctx context.Context, v interface{}) (*model.OperatingVehicleInfoIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputoperating_vehicle_info_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOoperating_vehicle_info_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.OperatingVehicleInfoMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._operating_vehicle_info_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOoperating_vehicle_info_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoMaxOrderBy(ctx context.Context, v interface{}) (*model.OperatingVehicleInfoMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputoperating_vehicle_info_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOoperating_vehicle_info_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoMinFields(ctx context.Context, sel ast.SelectionSet, v *model.OperatingVehicleInfoMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._operating_vehicle_info_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOoperating_vehicle_info_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoMinOrderBy(ctx context.Context, v interface{}) (*model.OperatingVehicleInfoMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputoperating_vehicle_info_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOoperating_vehicle_info_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.OperatingVehicleInfoMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._operating_vehicle_info_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOoperating_vehicle_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoOnConflict(ctx context.Context, v interface{}) (*model.OperatingVehicleInfoOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputoperating_vehicle_info_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOoperating_vehicle_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoOrderByᚄ(ctx context.Context, v interface{}) ([]*model.OperatingVehicleInfoOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.OperatingVehicleInfoOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNoperating_vehicle_info_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOoperating_vehicle_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.OperatingVehicleInfoSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.OperatingVehicleInfoSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNoperating_vehicle_info_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOoperating_vehicle_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OperatingVehicleInfoSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNoperating_vehicle_info_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOoperating_vehicle_info_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoSetInput(ctx context.Context, v interface{}) (*model.OperatingVehicleInfoSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputoperating_vehicle_info_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOoperating_vehicle_info_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.OperatingVehicleInfoStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._operating_vehicle_info_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOoperating_vehicle_info_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoStddevOrderBy(ctx context.Context, v interface{}) (*model.OperatingVehicleInfoStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputoperating_vehicle_info_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOoperating_vehicle_info_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.OperatingVehicleInfoStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._operating_vehicle_info_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOoperating_vehicle_info_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoStddevPopOrderBy(ctx context.Context, v interface{}) (*model.OperatingVehicleInfoStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputoperating_vehicle_info_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOoperating_vehicle_info_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.OperatingVehicleInfoStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._operating_vehicle_info_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOoperating_vehicle_info_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoStddevSampOrderBy(ctx context.Context, v interface{}) (*model.OperatingVehicleInfoStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputoperating_vehicle_info_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOoperating_vehicle_info_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoSumFields(ctx context.Context, sel ast.SelectionSet, v *model.OperatingVehicleInfoSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._operating_vehicle_info_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOoperating_vehicle_info_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoSumOrderBy(ctx context.Context, v interface{}) (*model.OperatingVehicleInfoSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputoperating_vehicle_info_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOoperating_vehicle_info_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.OperatingVehicleInfoVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._operating_vehicle_info_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOoperating_vehicle_info_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoVarPopOrderBy(ctx context.Context, v interface{}) (*model.OperatingVehicleInfoVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputoperating_vehicle_info_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOoperating_vehicle_info_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.OperatingVehicleInfoVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._operating_vehicle_info_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOoperating_vehicle_info_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoVarSampOrderBy(ctx context.Context, v interface{}) (*model.OperatingVehicleInfoVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputoperating_vehicle_info_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOoperating_vehicle_info_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.OperatingVehicleInfoVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._operating_vehicle_info_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOoperating_vehicle_info_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOperatingVehicleInfoVarianceOrderBy(ctx context.Context, v interface{}) (*model.OperatingVehicleInfoVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputoperating_vehicle_info_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model1.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model1.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model1.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOowner_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfo(ctx context.Context, sel ast.SelectionSet, v *model.OwnerInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._owner_info(ctx, sel, v)
}

func (ec *executionContext) marshalOowner_info_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.OwnerInfoAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._owner_info_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOowner_info_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.OwnerInfoAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._owner_info_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOowner_info_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoAvgOrderBy(ctx context.Context, v interface{}) (*model.OwnerInfoAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputowner_info_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOowner_info_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoBoolExp(ctx context.Context, v interface{}) ([]*model.OwnerInfoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.OwnerInfoBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOowner_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOowner_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoBoolExp(ctx context.Context, v interface{}) (*model.OwnerInfoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputowner_info_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOowner_info_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoIncInput(ctx context.Context, v interface{}) (*model.OwnerInfoIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputowner_info_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOowner_info_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.OwnerInfoMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._owner_info_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOowner_info_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoMaxOrderBy(ctx context.Context, v interface{}) (*model.OwnerInfoMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputowner_info_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOowner_info_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoMinFields(ctx context.Context, sel ast.SelectionSet, v *model.OwnerInfoMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._owner_info_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOowner_info_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoMinOrderBy(ctx context.Context, v interface{}) (*model.OwnerInfoMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputowner_info_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOowner_info_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.OwnerInfoMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._owner_info_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOowner_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoOnConflict(ctx context.Context, v interface{}) (*model.OwnerInfoOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputowner_info_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOowner_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoOrderByᚄ(ctx context.Context, v interface{}) ([]*model.OwnerInfoOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.OwnerInfoOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNowner_info_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOowner_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.OwnerInfoSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.OwnerInfoSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNowner_info_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOowner_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OwnerInfoSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNowner_info_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOowner_info_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoSetInput(ctx context.Context, v interface{}) (*model.OwnerInfoSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputowner_info_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOowner_info_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.OwnerInfoStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._owner_info_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOowner_info_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoStddevOrderBy(ctx context.Context, v interface{}) (*model.OwnerInfoStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputowner_info_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOowner_info_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.OwnerInfoStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._owner_info_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOowner_info_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoStddevPopOrderBy(ctx context.Context, v interface{}) (*model.OwnerInfoStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputowner_info_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOowner_info_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.OwnerInfoStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._owner_info_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOowner_info_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoStddevSampOrderBy(ctx context.Context, v interface{}) (*model.OwnerInfoStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputowner_info_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOowner_info_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoSumFields(ctx context.Context, sel ast.SelectionSet, v *model.OwnerInfoSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._owner_info_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOowner_info_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoSumOrderBy(ctx context.Context, v interface{}) (*model.OwnerInfoSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputowner_info_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOowner_info_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.OwnerInfoVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._owner_info_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOowner_info_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoVarPopOrderBy(ctx context.Context, v interface{}) (*model.OwnerInfoVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputowner_info_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOowner_info_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.OwnerInfoVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._owner_info_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOowner_info_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoVarSampOrderBy(ctx context.Context, v interface{}) (*model.OwnerInfoVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputowner_info_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOowner_info_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.OwnerInfoVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._owner_info_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOowner_info_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐOwnerInfoVarianceOrderBy(ctx context.Context, v interface{}) (*model.OwnerInfoVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputowner_info_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOtimestamp2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNtimestamp2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOtimestamp2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNtimestamp2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOtimestamp2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOtimestamp2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOtimestamp_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐTimestampComparisonExp(ctx context.Context, v interface{}) (*model.TimestampComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtimestamp_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNtimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNtimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model1.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtimestamptz_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfo(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info(ctx, sel, v)
}

func (ec *executionContext) marshalOvehicle_info_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOvehicle_info_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoAvgOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_info_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoBoolExp(ctx context.Context, v interface{}) ([]*model.VehicleInfoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleInfoBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOvehicle_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOvehicle_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoBoolExp(ctx context.Context, v interface{}) (*model.VehicleInfoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_change_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLog(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoChangeLog) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_change_log(ctx, sel, v)
}

func (ec *executionContext) marshalOvehicle_info_change_log_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoChangeLogAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_change_log_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOvehicle_info_change_log_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoChangeLogAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_change_log_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_change_log_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogAvgOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoChangeLogAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_change_log_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_info_change_log_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogBoolExp(ctx context.Context, v interface{}) ([]*model.VehicleInfoChangeLogBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleInfoChangeLogBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOvehicle_info_change_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOvehicle_info_change_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogBoolExp(ctx context.Context, v interface{}) (*model.VehicleInfoChangeLogBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_change_log_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_info_change_log_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogIncInput(ctx context.Context, v interface{}) (*model.VehicleInfoChangeLogIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_change_log_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_change_log_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoChangeLogMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_change_log_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_change_log_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogMaxOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoChangeLogMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_change_log_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_change_log_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoChangeLogMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_change_log_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_change_log_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogMinOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoChangeLogMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_change_log_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_change_log_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoChangeLogMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_change_log_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_change_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogOnConflict(ctx context.Context, v interface{}) (*model.VehicleInfoChangeLogOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_change_log_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_info_change_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VehicleInfoChangeLogOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleInfoChangeLogOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_info_change_log_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOvehicle_info_change_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleInfoChangeLogSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleInfoChangeLogSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_info_change_log_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOvehicle_info_change_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleInfoChangeLogSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_info_change_log_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOvehicle_info_change_log_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogSetInput(ctx context.Context, v interface{}) (*model.VehicleInfoChangeLogSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_change_log_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_change_log_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoChangeLogStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_change_log_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_change_log_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogStddevOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoChangeLogStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_change_log_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_change_log_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoChangeLogStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_change_log_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_change_log_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogStddevPopOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoChangeLogStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_change_log_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_change_log_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoChangeLogStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_change_log_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_change_log_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogStddevSampOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoChangeLogStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_change_log_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_change_log_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoChangeLogSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_change_log_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_change_log_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogSumOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoChangeLogSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_change_log_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_change_log_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoChangeLogVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_change_log_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_change_log_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogVarPopOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoChangeLogVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_change_log_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_change_log_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoChangeLogVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_change_log_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_change_log_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogVarSampOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoChangeLogVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_change_log_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_change_log_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoChangeLogVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_change_log_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_change_log_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoChangeLogVarianceOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoChangeLogVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_change_log_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_info_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoIncInput(ctx context.Context, v interface{}) (*model.VehicleInfoIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoMaxOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoMinOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoOnConflict(ctx context.Context, v interface{}) (*model.VehicleInfoOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VehicleInfoOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleInfoOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_info_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOvehicle_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleInfoSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleInfoSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_info_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOvehicle_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleInfoSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_info_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOvehicle_info_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoSetInput(ctx context.Context, v interface{}) (*model.VehicleInfoSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoStddevOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoStddevPopOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoStddevSampOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoSumOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoVarPopOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoVarSampOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleInfoVarianceOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_supervision_photo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhoto(ctx context.Context, sel ast.SelectionSet, v *model.VehicleSupervisionPhoto) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_supervision_photo(ctx, sel, v)
}

func (ec *executionContext) marshalOvehicle_supervision_photo_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleSupervisionPhotoAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_supervision_photo_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOvehicle_supervision_photo_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleSupervisionPhotoAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_supervision_photo_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_supervision_photo_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoAvgOrderBy(ctx context.Context, v interface{}) (*model.VehicleSupervisionPhotoAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_supervision_photo_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_supervision_photo_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoBoolExp(ctx context.Context, v interface{}) ([]*model.VehicleSupervisionPhotoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleSupervisionPhotoBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOvehicle_supervision_photo_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOvehicle_supervision_photo_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoBoolExp(ctx context.Context, v interface{}) (*model.VehicleSupervisionPhotoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_supervision_photo_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_supervision_photo_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoIncInput(ctx context.Context, v interface{}) (*model.VehicleSupervisionPhotoIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_supervision_photo_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_supervision_photo_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleSupervisionPhotoMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_supervision_photo_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_supervision_photo_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoMaxOrderBy(ctx context.Context, v interface{}) (*model.VehicleSupervisionPhotoMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_supervision_photo_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_supervision_photo_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleSupervisionPhotoMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_supervision_photo_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_supervision_photo_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoMinOrderBy(ctx context.Context, v interface{}) (*model.VehicleSupervisionPhotoMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_supervision_photo_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_supervision_photo_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VehicleSupervisionPhotoMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_supervision_photo_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_supervision_photo_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoOnConflict(ctx context.Context, v interface{}) (*model.VehicleSupervisionPhotoOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_supervision_photo_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_supervision_photo_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VehicleSupervisionPhotoOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleSupervisionPhotoOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_supervision_photo_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOvehicle_supervision_photo_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleSupervisionPhotoSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleSupervisionPhotoSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_supervision_photo_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOvehicle_supervision_photo_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleSupervisionPhotoSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_supervision_photo_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOvehicle_supervision_photo_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoSetInput(ctx context.Context, v interface{}) (*model.VehicleSupervisionPhotoSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_supervision_photo_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_supervision_photo_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleSupervisionPhotoStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_supervision_photo_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_supervision_photo_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoStddevOrderBy(ctx context.Context, v interface{}) (*model.VehicleSupervisionPhotoStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_supervision_photo_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_supervision_photo_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleSupervisionPhotoStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_supervision_photo_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_supervision_photo_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoStddevPopOrderBy(ctx context.Context, v interface{}) (*model.VehicleSupervisionPhotoStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_supervision_photo_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_supervision_photo_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleSupervisionPhotoStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_supervision_photo_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_supervision_photo_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoStddevSampOrderBy(ctx context.Context, v interface{}) (*model.VehicleSupervisionPhotoStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_supervision_photo_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_supervision_photo_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleSupervisionPhotoSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_supervision_photo_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_supervision_photo_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoSumOrderBy(ctx context.Context, v interface{}) (*model.VehicleSupervisionPhotoSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_supervision_photo_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_supervision_photo_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleSupervisionPhotoVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_supervision_photo_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_supervision_photo_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoVarPopOrderBy(ctx context.Context, v interface{}) (*model.VehicleSupervisionPhotoVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_supervision_photo_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_supervision_photo_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleSupervisionPhotoVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_supervision_photo_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_supervision_photo_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoVarSampOrderBy(ctx context.Context, v interface{}) (*model.VehicleSupervisionPhotoVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_supervision_photo_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_supervision_photo_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleSupervisionPhotoVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_supervision_photo_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_supervision_photo_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicleᚋgraphᚋmodelᚐVehicleSupervisionPhotoVarianceOrderBy(ctx context.Context, v interface{}) (*model.VehicleSupervisionPhotoVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_supervision_photo_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
