
"""
渣土车信息表


columns and relationships of "muck_truck_info"

"""
type muck_truck_info {
    """地区ID"""
    area_id: bigint

    """创建时间"""
    create_at: timestamptz!

    """创建人"""
    create_by: String!

    """删除时间"""
    delete_at: timestamptz

    """删除人"""
    delete_by: String

    """费用到期时间"""
    expiry_date: timestamptz

    """伪IP"""
    fake_ip: String

    """是否预备库"""
    is_reserve_library: Boolean

    """装载类别"""
    load_category: String

    """移动办卡地"""
    mobile_card_location: String

    """主键"""
    muck_truck_id: bigint!

    """车辆类型（1.渣土车 2.混凝土车 3.砂石车）"""
    muck_truck_type: Int

    """注册日期"""
    registration_date: timestamptz

    """自编号"""
    self_number: String

    """服务器ID??"""
    server_id: bigint

    """SIM卡号"""
    sim_card_number: String

    """修改时间"""
    update_at: timestamptz

    """修改人"""
    update_by: String

    """vehicle_info 车辆信息表 的vehicle_id"""
    vehicle_id: String!
}

"""
aggregated selection of "muck_truck_info"
"""
type muck_truck_info_aggregate {
    aggregate: muck_truck_info_aggregate_fields
    nodes: [muck_truck_info!]!
}

"""
aggregate fields of "muck_truck_info"
"""
type muck_truck_info_aggregate_fields {
    avg: muck_truck_info_avg_fields
    count(columns: [muck_truck_info_select_column!], distinct: Boolean): Int
    max: muck_truck_info_max_fields
    min: muck_truck_info_min_fields
    stddev: muck_truck_info_stddev_fields
    stddev_pop: muck_truck_info_stddev_pop_fields
    stddev_samp: muck_truck_info_stddev_samp_fields
    sum: muck_truck_info_sum_fields
    var_pop: muck_truck_info_var_pop_fields
    var_samp: muck_truck_info_var_samp_fields
    variance: muck_truck_info_variance_fields
}

"""
order by aggregate values of table "muck_truck_info"
"""
input muck_truck_info_aggregate_order_by {
    avg: muck_truck_info_avg_order_by
    count: order_by
    max: muck_truck_info_max_order_by
    min: muck_truck_info_min_order_by
    stddev: muck_truck_info_stddev_order_by
    stddev_pop: muck_truck_info_stddev_pop_order_by
    stddev_samp: muck_truck_info_stddev_samp_order_by
    sum: muck_truck_info_sum_order_by
    var_pop: muck_truck_info_var_pop_order_by
    var_samp: muck_truck_info_var_samp_order_by
    variance: muck_truck_info_variance_order_by
}

"""
input type for inserting array relation for remote table "muck_truck_info"
"""
input muck_truck_info_arr_rel_insert_input {
    data: [muck_truck_info_insert_input!]!
    on_conflict: muck_truck_info_on_conflict
}

"""aggregate avg on columns"""
type muck_truck_info_avg_fields {
    area_id: Float
    muck_truck_id: Float
    muck_truck_type: Float
    server_id: Float
}

"""
order by avg() on columns of table "muck_truck_info"
"""
input muck_truck_info_avg_order_by {
    area_id: order_by
    muck_truck_id: order_by
    muck_truck_type: order_by
    server_id: order_by
}

"""
Boolean expression to filter rows from the table "muck_truck_info". All fields are combined with a logical 'AND'.
"""
input muck_truck_info_bool_exp {
    _and: [muck_truck_info_bool_exp]
    _not: muck_truck_info_bool_exp
    _or: [muck_truck_info_bool_exp]
    area_id: bigint_comparison_exp
    create_at: timestamptz_comparison_exp
    create_by: String_comparison_exp
    delete_at: timestamptz_comparison_exp
    delete_by: String_comparison_exp
    expiry_date: timestamptz_comparison_exp
    fake_ip: String_comparison_exp
    is_reserve_library: Boolean_comparison_exp
    load_category: String_comparison_exp
    mobile_card_location: String_comparison_exp
    muck_truck_id: bigint_comparison_exp
    muck_truck_type: Int_comparison_exp
    registration_date: timestamptz_comparison_exp
    self_number: String_comparison_exp
    server_id: bigint_comparison_exp
    sim_card_number: String_comparison_exp
    update_at: timestamptz_comparison_exp
    update_by: String_comparison_exp
    vehicle_id: String_comparison_exp
}

"""
unique or primary key constraints on table "muck_truck_info"
"""
enum muck_truck_info_constraint {
    """unique or primary key constraint"""
    muck_truck_info_pkey
}

"""
input type for incrementing integer column in table "muck_truck_info"
"""
input muck_truck_info_inc_input {
    area_id: bigint
    muck_truck_id: bigint
    muck_truck_type: Int
    server_id: bigint
}

"""
input type for inserting data into table "muck_truck_info"
"""
input muck_truck_info_insert_input {
    area_id: bigint
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    expiry_date: timestamptz
    fake_ip: String
    is_reserve_library: Boolean
    load_category: String
    mobile_card_location: String
    muck_truck_id: bigint
    muck_truck_type: Int
    registration_date: timestamptz
    self_number: String
    server_id: bigint
    sim_card_number: String
    update_at: timestamptz
    update_by: String
    vehicle_id: String
}

"""aggregate max on columns"""
type muck_truck_info_max_fields {
    area_id: bigint
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    expiry_date: timestamptz
    fake_ip: String
    load_category: String
    mobile_card_location: String
    muck_truck_id: bigint
    muck_truck_type: Int
    registration_date: timestamptz
    self_number: String
    server_id: bigint
    sim_card_number: String
    update_at: timestamptz
    update_by: String
    vehicle_id: String
}

"""
order by max() on columns of table "muck_truck_info"
"""
input muck_truck_info_max_order_by {
    area_id: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    expiry_date: order_by
    fake_ip: order_by
    load_category: order_by
    mobile_card_location: order_by
    muck_truck_id: order_by
    muck_truck_type: order_by
    registration_date: order_by
    self_number: order_by
    server_id: order_by
    sim_card_number: order_by
    update_at: order_by
    update_by: order_by
    vehicle_id: order_by
}

"""aggregate min on columns"""
type muck_truck_info_min_fields {
    area_id: bigint
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    expiry_date: timestamptz
    fake_ip: String
    load_category: String
    mobile_card_location: String
    muck_truck_id: bigint
    muck_truck_type: Int
    registration_date: timestamptz
    self_number: String
    server_id: bigint
    sim_card_number: String
    update_at: timestamptz
    update_by: String
    vehicle_id: String
}

"""
order by min() on columns of table "muck_truck_info"
"""
input muck_truck_info_min_order_by {
    area_id: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    expiry_date: order_by
    fake_ip: order_by
    load_category: order_by
    mobile_card_location: order_by
    muck_truck_id: order_by
    muck_truck_type: order_by
    registration_date: order_by
    self_number: order_by
    server_id: order_by
    sim_card_number: order_by
    update_at: order_by
    update_by: order_by
    vehicle_id: order_by
}

"""
response of any mutation on the table "muck_truck_info"
"""
type muck_truck_info_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [muck_truck_info!]!
}

"""
input type for inserting object relation for remote table "muck_truck_info"
"""
input muck_truck_info_obj_rel_insert_input {
    data: muck_truck_info_insert_input!
    on_conflict: muck_truck_info_on_conflict
}

"""
on conflict condition type for table "muck_truck_info"
"""
input muck_truck_info_on_conflict {
    constraint: muck_truck_info_constraint!
    update_columns: [muck_truck_info_update_column!]!
    where: muck_truck_info_bool_exp
}

"""
ordering options when selecting data from "muck_truck_info"
"""
input muck_truck_info_order_by {
    area_id: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    expiry_date: order_by
    fake_ip: order_by
    is_reserve_library: order_by
    load_category: order_by
    mobile_card_location: order_by
    muck_truck_id: order_by
    muck_truck_type: order_by
    registration_date: order_by
    self_number: order_by
    server_id: order_by
    sim_card_number: order_by
    update_at: order_by
    update_by: order_by
    vehicle_id: order_by
}

"""
primary key columns input for table: "muck_truck_info"
"""
input muck_truck_info_pk_columns_input {
    """主键"""
    muck_truck_id: bigint!
}

"""
select columns of table "muck_truck_info"
"""
enum muck_truck_info_select_column {
    """column name"""
    area_id

    """column name"""
    create_at

    """column name"""
    create_by

    """column name"""
    delete_at

    """column name"""
    delete_by

    """column name"""
    expiry_date

    """column name"""
    fake_ip

    """column name"""
    is_reserve_library

    """column name"""
    load_category

    """column name"""
    mobile_card_location

    """column name"""
    muck_truck_id

    """column name"""
    muck_truck_type

    """column name"""
    registration_date

    """column name"""
    self_number

    """column name"""
    server_id

    """column name"""
    sim_card_number

    """column name"""
    update_at

    """column name"""
    update_by

    """column name"""
    vehicle_id
}

"""
input type for updating data in table "muck_truck_info"
"""
input muck_truck_info_set_input {
    area_id: bigint
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    expiry_date: timestamptz
    fake_ip: String
    is_reserve_library: Boolean
    load_category: String
    mobile_card_location: String
    muck_truck_id: bigint
    muck_truck_type: Int
    registration_date: timestamptz
    self_number: String
    server_id: bigint
    sim_card_number: String
    update_at: timestamptz
    update_by: String
    vehicle_id: String
}

"""aggregate stddev on columns"""
type muck_truck_info_stddev_fields {
    area_id: Float
    muck_truck_id: Float
    muck_truck_type: Float
    server_id: Float
}

"""
order by stddev() on columns of table "muck_truck_info"
"""
input muck_truck_info_stddev_order_by {
    area_id: order_by
    muck_truck_id: order_by
    muck_truck_type: order_by
    server_id: order_by
}

"""aggregate stddev_pop on columns"""
type muck_truck_info_stddev_pop_fields {
    area_id: Float
    muck_truck_id: Float
    muck_truck_type: Float
    server_id: Float
}

"""
order by stddev_pop() on columns of table "muck_truck_info"
"""
input muck_truck_info_stddev_pop_order_by {
    area_id: order_by
    muck_truck_id: order_by
    muck_truck_type: order_by
    server_id: order_by
}

"""aggregate stddev_samp on columns"""
type muck_truck_info_stddev_samp_fields {
    area_id: Float
    muck_truck_id: Float
    muck_truck_type: Float
    server_id: Float
}

"""
order by stddev_samp() on columns of table "muck_truck_info"
"""
input muck_truck_info_stddev_samp_order_by {
    area_id: order_by
    muck_truck_id: order_by
    muck_truck_type: order_by
    server_id: order_by
}

"""aggregate sum on columns"""
type muck_truck_info_sum_fields {
    area_id: bigint
    muck_truck_id: bigint
    muck_truck_type: Int
    server_id: bigint
}

"""
order by sum() on columns of table "muck_truck_info"
"""
input muck_truck_info_sum_order_by {
    area_id: order_by
    muck_truck_id: order_by
    muck_truck_type: order_by
    server_id: order_by
}

"""
update columns of table "muck_truck_info"
"""
enum muck_truck_info_update_column {
    """column name"""
    area_id

    """column name"""
    create_at

    """column name"""
    create_by

    """column name"""
    delete_at

    """column name"""
    delete_by

    """column name"""
    expiry_date

    """column name"""
    fake_ip

    """column name"""
    is_reserve_library

    """column name"""
    load_category

    """column name"""
    mobile_card_location

    """column name"""
    muck_truck_id

    """column name"""
    muck_truck_type

    """column name"""
    registration_date

    """column name"""
    self_number

    """column name"""
    server_id

    """column name"""
    sim_card_number

    """column name"""
    update_at

    """column name"""
    update_by

    """column name"""
    vehicle_id
}

"""aggregate var_pop on columns"""
type muck_truck_info_var_pop_fields {
    area_id: Float
    muck_truck_id: Float
    muck_truck_type: Float
    server_id: Float
}

"""
order by var_pop() on columns of table "muck_truck_info"
"""
input muck_truck_info_var_pop_order_by {
    area_id: order_by
    muck_truck_id: order_by
    muck_truck_type: order_by
    server_id: order_by
}

"""aggregate var_samp on columns"""
type muck_truck_info_var_samp_fields {
    area_id: Float
    muck_truck_id: Float
    muck_truck_type: Float
    server_id: Float
}

"""
order by var_samp() on columns of table "muck_truck_info"
"""
input muck_truck_info_var_samp_order_by {
    area_id: order_by
    muck_truck_id: order_by
    muck_truck_type: order_by
    server_id: order_by
}

"""aggregate variance on columns"""
type muck_truck_info_variance_fields {
    area_id: Float
    muck_truck_id: Float
    muck_truck_type: Float
    server_id: Float
}

"""
order by variance() on columns of table "muck_truck_info"
"""
input muck_truck_info_variance_order_by {
    area_id: order_by
    muck_truck_id: order_by
    muck_truck_type: order_by
    server_id: order_by
}

extend type Mutation {
    """
    delete data from the table: "muck_truck_info"
  """
    delete_muck_truck_info(
        """filter the rows which have to be deleted"""
        where: muck_truck_info_bool_exp!
    ): muck_truck_info_mutation_response

    """
    delete single row from the table: "muck_truck_info"
  """
    delete_muck_truck_info_by_pk(
        """主键"""
        muck_truck_id: bigint!
    ): muck_truck_info

    """
    insert data into the table: "muck_truck_info"
  """
    insert_muck_truck_info(
        """the rows to be inserted"""
        objects: [muck_truck_info_insert_input!]!

        """on conflict condition"""
        on_conflict: muck_truck_info_on_conflict
    ): muck_truck_info_mutation_response

    """
    insert a single row into the table: "muck_truck_info"
  """
    insert_muck_truck_info_one(
        """the row to be inserted"""
        object: muck_truck_info_insert_input!

        """on conflict condition"""
        on_conflict: muck_truck_info_on_conflict
    ): muck_truck_info

    """
    update data of the table: "muck_truck_info"
  """
    update_muck_truck_info(
        """increments the integer columns with given value of the filtered values"""
        _inc: muck_truck_info_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: muck_truck_info_set_input

        """filter the rows which have to be updated"""
        where: muck_truck_info_bool_exp!
    ): muck_truck_info_mutation_response

    """
    update single row of the table: "muck_truck_info"
  """
    update_muck_truck_info_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: muck_truck_info_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: muck_truck_info_set_input
        pk_columns: muck_truck_info_pk_columns_input!
    ): muck_truck_info
}


extend type Query {
    """
    fetch data from the table: "muck_truck_info"
  """
    muck_truck_info(
        """distinct select on columns"""
        distinct_on: [muck_truck_info_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [muck_truck_info_order_by!]

        """filter the rows returned"""
        where: muck_truck_info_bool_exp
    ): [muck_truck_info!]!

    """
    fetch aggregated fields from the table: "muck_truck_info"
  """
    muck_truck_info_aggregate(
        """distinct select on columns"""
        distinct_on: [muck_truck_info_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [muck_truck_info_order_by!]

        """filter the rows returned"""
        where: muck_truck_info_bool_exp
    ): muck_truck_info_aggregate!

    """fetch data from the table: "muck_truck_info" using primary key columns"""
    muck_truck_info_by_pk(
        """主键"""
        muck_truck_id: bigint!
    ): muck_truck_info
}



extend type Subscription {
    """
    fetch data from the table: "muck_truck_info"
  """
    muck_truck_info(
        """distinct select on columns"""
        distinct_on: [muck_truck_info_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [muck_truck_info_order_by!]

        """filter the rows returned"""
        where: muck_truck_info_bool_exp
    ): [muck_truck_info!]!

    """
    fetch aggregated fields from the table: "muck_truck_info"
  """
    muck_truck_info_aggregate(
        """distinct select on columns"""
        distinct_on: [muck_truck_info_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [muck_truck_info_order_by!]

        """filter the rows returned"""
        where: muck_truck_info_bool_exp
    ): muck_truck_info_aggregate!

    """fetch data from the table: "muck_truck_info" using primary key columns"""
    muck_truck_info_by_pk(
        """主键"""
        muck_truck_id: bigint!
    ): muck_truck_info
}

