// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"VehicleSupervision/internal/modules/adas/query/graph/model"
	model1 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Query struct {
		AdasAttachment          func(childComplexity int, distinctOn []model.AdasAttachmentSelectColumn, limit *int, offset *int, orderBy []*model.AdasAttachmentOrderBy, where *model.AdasAttachmentBoolExp) int
		AdasAttachmentAggregate func(childComplexity int, distinctOn []model.AdasAttachmentSelectColumn, limit *int, offset *int, orderBy []*model.AdasAttachmentOrderBy, where *model.AdasAttachmentBoolExp) int
		AdasAttachmentByPk      func(childComplexity int, id int64) int
		AdasData                func(childComplexity int, distinctOn []model.AdasDataSelectColumn, limit *int, offset *int, orderBy []*model.AdasDataOrderBy, where *model.AdasDataBoolExp) int
		AdasDataAggregate       func(childComplexity int, distinctOn []model.AdasDataSelectColumn, limit *int, offset *int, orderBy []*model.AdasDataOrderBy, where *model.AdasDataBoolExp) int
		AdasDataByPk            func(childComplexity int, id int64) int
	}

	AdasAttachment struct {
		AlarmNo      func(childComplexity int) int
		AttachmentID func(childComplexity int) int
		ChannelID    func(childComplexity int) int
		CreateDate   func(childComplexity int) int
		FileLength   func(childComplexity int) int
		FileName     func(childComplexity int) int
		FilePath     func(childComplexity int) int
		FileType     func(childComplexity int) int
		ID           func(childComplexity int) int
		PlateNo      func(childComplexity int) int
		SimNo        func(childComplexity int) int
		Status       func(childComplexity int) int
		VehicleID    func(childComplexity int) int
	}

	AdasAttachmentAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	AdasAttachmentAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.AdasAttachmentSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	AdasAttachmentAvgFields struct {
		ChannelID  func(childComplexity int) int
		FileLength func(childComplexity int) int
		ID         func(childComplexity int) int
		SimNo      func(childComplexity int) int
		VehicleID  func(childComplexity int) int
	}

	AdasAttachmentMaxFields struct {
		AlarmNo      func(childComplexity int) int
		AttachmentID func(childComplexity int) int
		ChannelID    func(childComplexity int) int
		CreateDate   func(childComplexity int) int
		FileLength   func(childComplexity int) int
		FileName     func(childComplexity int) int
		FilePath     func(childComplexity int) int
		FileType     func(childComplexity int) int
		ID           func(childComplexity int) int
		PlateNo      func(childComplexity int) int
		SimNo        func(childComplexity int) int
		Status       func(childComplexity int) int
		VehicleID    func(childComplexity int) int
	}

	AdasAttachmentMinFields struct {
		AlarmNo      func(childComplexity int) int
		AttachmentID func(childComplexity int) int
		ChannelID    func(childComplexity int) int
		CreateDate   func(childComplexity int) int
		FileLength   func(childComplexity int) int
		FileName     func(childComplexity int) int
		FilePath     func(childComplexity int) int
		FileType     func(childComplexity int) int
		ID           func(childComplexity int) int
		PlateNo      func(childComplexity int) int
		SimNo        func(childComplexity int) int
		Status       func(childComplexity int) int
		VehicleID    func(childComplexity int) int
	}

	AdasAttachmentMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	AdasAttachmentStddevFields struct {
		ChannelID  func(childComplexity int) int
		FileLength func(childComplexity int) int
		ID         func(childComplexity int) int
		SimNo      func(childComplexity int) int
		VehicleID  func(childComplexity int) int
	}

	AdasAttachmentStddevPopFields struct {
		ChannelID  func(childComplexity int) int
		FileLength func(childComplexity int) int
		ID         func(childComplexity int) int
		SimNo      func(childComplexity int) int
		VehicleID  func(childComplexity int) int
	}

	AdasAttachmentStddevSampFields struct {
		ChannelID  func(childComplexity int) int
		FileLength func(childComplexity int) int
		ID         func(childComplexity int) int
		SimNo      func(childComplexity int) int
		VehicleID  func(childComplexity int) int
	}

	AdasAttachmentSumFields struct {
		ChannelID  func(childComplexity int) int
		FileLength func(childComplexity int) int
		ID         func(childComplexity int) int
		SimNo      func(childComplexity int) int
		VehicleID  func(childComplexity int) int
	}

	AdasAttachmentVarPopFields struct {
		ChannelID  func(childComplexity int) int
		FileLength func(childComplexity int) int
		ID         func(childComplexity int) int
		SimNo      func(childComplexity int) int
		VehicleID  func(childComplexity int) int
	}

	AdasAttachmentVarSampFields struct {
		ChannelID  func(childComplexity int) int
		FileLength func(childComplexity int) int
		ID         func(childComplexity int) int
		SimNo      func(childComplexity int) int
		VehicleID  func(childComplexity int) int
	}

	AdasAttachmentVarianceFields struct {
		ChannelID  func(childComplexity int) int
		FileLength func(childComplexity int) int
		ID         func(childComplexity int) int
		SimNo      func(childComplexity int) int
		VehicleID  func(childComplexity int) int
	}

	AdasData struct {
		AdasAttachment   func(childComplexity int) int
		AlarmID          func(childComplexity int) int
		AlarmNo          func(childComplexity int) int
		AlarmSource      func(childComplexity int) int
		AlarmTime        func(childComplexity int) int
		AlarmType        func(childComplexity int) int
		Altitude         func(childComplexity int) int
		CreatedDate      func(childComplexity int) int
		FatigueDegree    func(childComplexity int) int
		FrontCarDistance func(childComplexity int) int
		ID               func(childComplexity int) int
		Latitude         func(childComplexity int) int
		Levels           func(childComplexity int) int
		Location         func(childComplexity int) int
		Longitude        func(childComplexity int) int
		PlateNo          func(childComplexity int) int
		SimID            func(childComplexity int) int
		Speed            func(childComplexity int) int
		TerminalID       func(childComplexity int) int
		VehicleID        func(childComplexity int) int
		VehicleStatus    func(childComplexity int) int
	}

	AdasDataAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	AdasDataAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.AdasDataSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	AdasDataAvgFields struct {
		AlarmID          func(childComplexity int) int
		Altitude         func(childComplexity int) int
		FatigueDegree    func(childComplexity int) int
		FrontCarDistance func(childComplexity int) int
		ID               func(childComplexity int) int
		Latitude         func(childComplexity int) int
		Levels           func(childComplexity int) int
		Longitude        func(childComplexity int) int
		SimID            func(childComplexity int) int
		Speed            func(childComplexity int) int
		TerminalID       func(childComplexity int) int
	}

	AdasDataMaxFields struct {
		AdasAttachment   func(childComplexity int) int
		AlarmID          func(childComplexity int) int
		AlarmNo          func(childComplexity int) int
		AlarmSource      func(childComplexity int) int
		AlarmTime        func(childComplexity int) int
		AlarmType        func(childComplexity int) int
		Altitude         func(childComplexity int) int
		CreatedDate      func(childComplexity int) int
		FatigueDegree    func(childComplexity int) int
		FrontCarDistance func(childComplexity int) int
		ID               func(childComplexity int) int
		Latitude         func(childComplexity int) int
		Levels           func(childComplexity int) int
		Location         func(childComplexity int) int
		Longitude        func(childComplexity int) int
		PlateNo          func(childComplexity int) int
		SimID            func(childComplexity int) int
		Speed            func(childComplexity int) int
		TerminalID       func(childComplexity int) int
		VehicleID        func(childComplexity int) int
		VehicleStatus    func(childComplexity int) int
	}

	AdasDataMinFields struct {
		AdasAttachment   func(childComplexity int) int
		AlarmID          func(childComplexity int) int
		AlarmNo          func(childComplexity int) int
		AlarmSource      func(childComplexity int) int
		AlarmTime        func(childComplexity int) int
		AlarmType        func(childComplexity int) int
		Altitude         func(childComplexity int) int
		CreatedDate      func(childComplexity int) int
		FatigueDegree    func(childComplexity int) int
		FrontCarDistance func(childComplexity int) int
		ID               func(childComplexity int) int
		Latitude         func(childComplexity int) int
		Levels           func(childComplexity int) int
		Location         func(childComplexity int) int
		Longitude        func(childComplexity int) int
		PlateNo          func(childComplexity int) int
		SimID            func(childComplexity int) int
		Speed            func(childComplexity int) int
		TerminalID       func(childComplexity int) int
		VehicleID        func(childComplexity int) int
		VehicleStatus    func(childComplexity int) int
	}

	AdasDataMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	AdasDataStddevFields struct {
		AlarmID          func(childComplexity int) int
		Altitude         func(childComplexity int) int
		FatigueDegree    func(childComplexity int) int
		FrontCarDistance func(childComplexity int) int
		ID               func(childComplexity int) int
		Latitude         func(childComplexity int) int
		Levels           func(childComplexity int) int
		Longitude        func(childComplexity int) int
		SimID            func(childComplexity int) int
		Speed            func(childComplexity int) int
		TerminalID       func(childComplexity int) int
	}

	AdasDataStddevPopFields struct {
		AlarmID          func(childComplexity int) int
		Altitude         func(childComplexity int) int
		FatigueDegree    func(childComplexity int) int
		FrontCarDistance func(childComplexity int) int
		ID               func(childComplexity int) int
		Latitude         func(childComplexity int) int
		Levels           func(childComplexity int) int
		Longitude        func(childComplexity int) int
		SimID            func(childComplexity int) int
		Speed            func(childComplexity int) int
		TerminalID       func(childComplexity int) int
	}

	AdasDataStddevSampFields struct {
		AlarmID          func(childComplexity int) int
		Altitude         func(childComplexity int) int
		FatigueDegree    func(childComplexity int) int
		FrontCarDistance func(childComplexity int) int
		ID               func(childComplexity int) int
		Latitude         func(childComplexity int) int
		Levels           func(childComplexity int) int
		Longitude        func(childComplexity int) int
		SimID            func(childComplexity int) int
		Speed            func(childComplexity int) int
		TerminalID       func(childComplexity int) int
	}

	AdasDataSumFields struct {
		AlarmID          func(childComplexity int) int
		Altitude         func(childComplexity int) int
		FatigueDegree    func(childComplexity int) int
		FrontCarDistance func(childComplexity int) int
		ID               func(childComplexity int) int
		Latitude         func(childComplexity int) int
		Levels           func(childComplexity int) int
		Longitude        func(childComplexity int) int
		SimID            func(childComplexity int) int
		Speed            func(childComplexity int) int
		TerminalID       func(childComplexity int) int
	}

	AdasDataVarPopFields struct {
		AlarmID          func(childComplexity int) int
		Altitude         func(childComplexity int) int
		FatigueDegree    func(childComplexity int) int
		FrontCarDistance func(childComplexity int) int
		ID               func(childComplexity int) int
		Latitude         func(childComplexity int) int
		Levels           func(childComplexity int) int
		Longitude        func(childComplexity int) int
		SimID            func(childComplexity int) int
		Speed            func(childComplexity int) int
		TerminalID       func(childComplexity int) int
	}

	AdasDataVarSampFields struct {
		AlarmID          func(childComplexity int) int
		Altitude         func(childComplexity int) int
		FatigueDegree    func(childComplexity int) int
		FrontCarDistance func(childComplexity int) int
		ID               func(childComplexity int) int
		Latitude         func(childComplexity int) int
		Levels           func(childComplexity int) int
		Longitude        func(childComplexity int) int
		SimID            func(childComplexity int) int
		Speed            func(childComplexity int) int
		TerminalID       func(childComplexity int) int
	}

	AdasDataVarianceFields struct {
		AlarmID          func(childComplexity int) int
		Altitude         func(childComplexity int) int
		FatigueDegree    func(childComplexity int) int
		FrontCarDistance func(childComplexity int) int
		ID               func(childComplexity int) int
		Latitude         func(childComplexity int) int
		Levels           func(childComplexity int) int
		Longitude        func(childComplexity int) int
		SimID            func(childComplexity int) int
		Speed            func(childComplexity int) int
		TerminalID       func(childComplexity int) int
	}
}

type QueryResolver interface {
	AdasAttachment(ctx context.Context, distinctOn []model.AdasAttachmentSelectColumn, limit *int, offset *int, orderBy []*model.AdasAttachmentOrderBy, where *model.AdasAttachmentBoolExp) ([]*model.AdasAttachment, error)
	AdasAttachmentAggregate(ctx context.Context, distinctOn []model.AdasAttachmentSelectColumn, limit *int, offset *int, orderBy []*model.AdasAttachmentOrderBy, where *model.AdasAttachmentBoolExp) (*model.AdasAttachmentAggregate, error)
	AdasAttachmentByPk(ctx context.Context, id int64) (*model.AdasAttachment, error)
	AdasData(ctx context.Context, distinctOn []model.AdasDataSelectColumn, limit *int, offset *int, orderBy []*model.AdasDataOrderBy, where *model.AdasDataBoolExp) ([]*model.AdasData, error)
	AdasDataAggregate(ctx context.Context, distinctOn []model.AdasDataSelectColumn, limit *int, offset *int, orderBy []*model.AdasDataOrderBy, where *model.AdasDataBoolExp) (*model.AdasDataAggregate, error)
	AdasDataByPk(ctx context.Context, id int64) (*model.AdasData, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Query.adas_attachment":
		if e.complexity.Query.AdasAttachment == nil {
			break
		}

		args, err := ec.field_Query_adas_attachment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdasAttachment(childComplexity, args["distinct_on"].([]model.AdasAttachmentSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AdasAttachmentOrderBy), args["where"].(*model.AdasAttachmentBoolExp)), true

	case "Query.adas_attachment_aggregate":
		if e.complexity.Query.AdasAttachmentAggregate == nil {
			break
		}

		args, err := ec.field_Query_adas_attachment_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdasAttachmentAggregate(childComplexity, args["distinct_on"].([]model.AdasAttachmentSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AdasAttachmentOrderBy), args["where"].(*model.AdasAttachmentBoolExp)), true

	case "Query.adas_attachment_by_pk":
		if e.complexity.Query.AdasAttachmentByPk == nil {
			break
		}

		args, err := ec.field_Query_adas_attachment_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdasAttachmentByPk(childComplexity, args["id"].(int64)), true

	case "Query.adas_data":
		if e.complexity.Query.AdasData == nil {
			break
		}

		args, err := ec.field_Query_adas_data_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdasData(childComplexity, args["distinct_on"].([]model.AdasDataSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AdasDataOrderBy), args["where"].(*model.AdasDataBoolExp)), true

	case "Query.adas_data_aggregate":
		if e.complexity.Query.AdasDataAggregate == nil {
			break
		}

		args, err := ec.field_Query_adas_data_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdasDataAggregate(childComplexity, args["distinct_on"].([]model.AdasDataSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AdasDataOrderBy), args["where"].(*model.AdasDataBoolExp)), true

	case "Query.adas_data_by_pk":
		if e.complexity.Query.AdasDataByPk == nil {
			break
		}

		args, err := ec.field_Query_adas_data_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdasDataByPk(childComplexity, args["id"].(int64)), true

	case "adas_attachment.alarm_no":
		if e.complexity.AdasAttachment.AlarmNo == nil {
			break
		}

		return e.complexity.AdasAttachment.AlarmNo(childComplexity), true

	case "adas_attachment.attachment_id":
		if e.complexity.AdasAttachment.AttachmentID == nil {
			break
		}

		return e.complexity.AdasAttachment.AttachmentID(childComplexity), true

	case "adas_attachment.channel_id":
		if e.complexity.AdasAttachment.ChannelID == nil {
			break
		}

		return e.complexity.AdasAttachment.ChannelID(childComplexity), true

	case "adas_attachment.create_date":
		if e.complexity.AdasAttachment.CreateDate == nil {
			break
		}

		return e.complexity.AdasAttachment.CreateDate(childComplexity), true

	case "adas_attachment.file_length":
		if e.complexity.AdasAttachment.FileLength == nil {
			break
		}

		return e.complexity.AdasAttachment.FileLength(childComplexity), true

	case "adas_attachment.file_name":
		if e.complexity.AdasAttachment.FileName == nil {
			break
		}

		return e.complexity.AdasAttachment.FileName(childComplexity), true

	case "adas_attachment.file_path":
		if e.complexity.AdasAttachment.FilePath == nil {
			break
		}

		return e.complexity.AdasAttachment.FilePath(childComplexity), true

	case "adas_attachment.file_type":
		if e.complexity.AdasAttachment.FileType == nil {
			break
		}

		return e.complexity.AdasAttachment.FileType(childComplexity), true

	case "adas_attachment.id":
		if e.complexity.AdasAttachment.ID == nil {
			break
		}

		return e.complexity.AdasAttachment.ID(childComplexity), true

	case "adas_attachment.plate_no":
		if e.complexity.AdasAttachment.PlateNo == nil {
			break
		}

		return e.complexity.AdasAttachment.PlateNo(childComplexity), true

	case "adas_attachment.sim_no":
		if e.complexity.AdasAttachment.SimNo == nil {
			break
		}

		return e.complexity.AdasAttachment.SimNo(childComplexity), true

	case "adas_attachment.status":
		if e.complexity.AdasAttachment.Status == nil {
			break
		}

		return e.complexity.AdasAttachment.Status(childComplexity), true

	case "adas_attachment.vehicle_id":
		if e.complexity.AdasAttachment.VehicleID == nil {
			break
		}

		return e.complexity.AdasAttachment.VehicleID(childComplexity), true

	case "adas_attachment_aggregate.aggregate":
		if e.complexity.AdasAttachmentAggregate.Aggregate == nil {
			break
		}

		return e.complexity.AdasAttachmentAggregate.Aggregate(childComplexity), true

	case "adas_attachment_aggregate.nodes":
		if e.complexity.AdasAttachmentAggregate.Nodes == nil {
			break
		}

		return e.complexity.AdasAttachmentAggregate.Nodes(childComplexity), true

	case "adas_attachment_aggregate_fields.avg":
		if e.complexity.AdasAttachmentAggregateFields.Avg == nil {
			break
		}

		return e.complexity.AdasAttachmentAggregateFields.Avg(childComplexity), true

	case "adas_attachment_aggregate_fields.count":
		if e.complexity.AdasAttachmentAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_adas_attachment_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AdasAttachmentAggregateFields.Count(childComplexity, args["columns"].([]model.AdasAttachmentSelectColumn), args["distinct"].(*bool)), true

	case "adas_attachment_aggregate_fields.max":
		if e.complexity.AdasAttachmentAggregateFields.Max == nil {
			break
		}

		return e.complexity.AdasAttachmentAggregateFields.Max(childComplexity), true

	case "adas_attachment_aggregate_fields.min":
		if e.complexity.AdasAttachmentAggregateFields.Min == nil {
			break
		}

		return e.complexity.AdasAttachmentAggregateFields.Min(childComplexity), true

	case "adas_attachment_aggregate_fields.stddev":
		if e.complexity.AdasAttachmentAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.AdasAttachmentAggregateFields.Stddev(childComplexity), true

	case "adas_attachment_aggregate_fields.stddev_pop":
		if e.complexity.AdasAttachmentAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.AdasAttachmentAggregateFields.StddevPop(childComplexity), true

	case "adas_attachment_aggregate_fields.stddev_samp":
		if e.complexity.AdasAttachmentAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.AdasAttachmentAggregateFields.StddevSamp(childComplexity), true

	case "adas_attachment_aggregate_fields.sum":
		if e.complexity.AdasAttachmentAggregateFields.Sum == nil {
			break
		}

		return e.complexity.AdasAttachmentAggregateFields.Sum(childComplexity), true

	case "adas_attachment_aggregate_fields.var_pop":
		if e.complexity.AdasAttachmentAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.AdasAttachmentAggregateFields.VarPop(childComplexity), true

	case "adas_attachment_aggregate_fields.var_samp":
		if e.complexity.AdasAttachmentAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.AdasAttachmentAggregateFields.VarSamp(childComplexity), true

	case "adas_attachment_aggregate_fields.variance":
		if e.complexity.AdasAttachmentAggregateFields.Variance == nil {
			break
		}

		return e.complexity.AdasAttachmentAggregateFields.Variance(childComplexity), true

	case "adas_attachment_avg_fields.channel_id":
		if e.complexity.AdasAttachmentAvgFields.ChannelID == nil {
			break
		}

		return e.complexity.AdasAttachmentAvgFields.ChannelID(childComplexity), true

	case "adas_attachment_avg_fields.file_length":
		if e.complexity.AdasAttachmentAvgFields.FileLength == nil {
			break
		}

		return e.complexity.AdasAttachmentAvgFields.FileLength(childComplexity), true

	case "adas_attachment_avg_fields.id":
		if e.complexity.AdasAttachmentAvgFields.ID == nil {
			break
		}

		return e.complexity.AdasAttachmentAvgFields.ID(childComplexity), true

	case "adas_attachment_avg_fields.sim_no":
		if e.complexity.AdasAttachmentAvgFields.SimNo == nil {
			break
		}

		return e.complexity.AdasAttachmentAvgFields.SimNo(childComplexity), true

	case "adas_attachment_avg_fields.vehicle_id":
		if e.complexity.AdasAttachmentAvgFields.VehicleID == nil {
			break
		}

		return e.complexity.AdasAttachmentAvgFields.VehicleID(childComplexity), true

	case "adas_attachment_max_fields.alarm_no":
		if e.complexity.AdasAttachmentMaxFields.AlarmNo == nil {
			break
		}

		return e.complexity.AdasAttachmentMaxFields.AlarmNo(childComplexity), true

	case "adas_attachment_max_fields.attachment_id":
		if e.complexity.AdasAttachmentMaxFields.AttachmentID == nil {
			break
		}

		return e.complexity.AdasAttachmentMaxFields.AttachmentID(childComplexity), true

	case "adas_attachment_max_fields.channel_id":
		if e.complexity.AdasAttachmentMaxFields.ChannelID == nil {
			break
		}

		return e.complexity.AdasAttachmentMaxFields.ChannelID(childComplexity), true

	case "adas_attachment_max_fields.create_date":
		if e.complexity.AdasAttachmentMaxFields.CreateDate == nil {
			break
		}

		return e.complexity.AdasAttachmentMaxFields.CreateDate(childComplexity), true

	case "adas_attachment_max_fields.file_length":
		if e.complexity.AdasAttachmentMaxFields.FileLength == nil {
			break
		}

		return e.complexity.AdasAttachmentMaxFields.FileLength(childComplexity), true

	case "adas_attachment_max_fields.file_name":
		if e.complexity.AdasAttachmentMaxFields.FileName == nil {
			break
		}

		return e.complexity.AdasAttachmentMaxFields.FileName(childComplexity), true

	case "adas_attachment_max_fields.file_path":
		if e.complexity.AdasAttachmentMaxFields.FilePath == nil {
			break
		}

		return e.complexity.AdasAttachmentMaxFields.FilePath(childComplexity), true

	case "adas_attachment_max_fields.file_type":
		if e.complexity.AdasAttachmentMaxFields.FileType == nil {
			break
		}

		return e.complexity.AdasAttachmentMaxFields.FileType(childComplexity), true

	case "adas_attachment_max_fields.id":
		if e.complexity.AdasAttachmentMaxFields.ID == nil {
			break
		}

		return e.complexity.AdasAttachmentMaxFields.ID(childComplexity), true

	case "adas_attachment_max_fields.plate_no":
		if e.complexity.AdasAttachmentMaxFields.PlateNo == nil {
			break
		}

		return e.complexity.AdasAttachmentMaxFields.PlateNo(childComplexity), true

	case "adas_attachment_max_fields.sim_no":
		if e.complexity.AdasAttachmentMaxFields.SimNo == nil {
			break
		}

		return e.complexity.AdasAttachmentMaxFields.SimNo(childComplexity), true

	case "adas_attachment_max_fields.status":
		if e.complexity.AdasAttachmentMaxFields.Status == nil {
			break
		}

		return e.complexity.AdasAttachmentMaxFields.Status(childComplexity), true

	case "adas_attachment_max_fields.vehicle_id":
		if e.complexity.AdasAttachmentMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.AdasAttachmentMaxFields.VehicleID(childComplexity), true

	case "adas_attachment_min_fields.alarm_no":
		if e.complexity.AdasAttachmentMinFields.AlarmNo == nil {
			break
		}

		return e.complexity.AdasAttachmentMinFields.AlarmNo(childComplexity), true

	case "adas_attachment_min_fields.attachment_id":
		if e.complexity.AdasAttachmentMinFields.AttachmentID == nil {
			break
		}

		return e.complexity.AdasAttachmentMinFields.AttachmentID(childComplexity), true

	case "adas_attachment_min_fields.channel_id":
		if e.complexity.AdasAttachmentMinFields.ChannelID == nil {
			break
		}

		return e.complexity.AdasAttachmentMinFields.ChannelID(childComplexity), true

	case "adas_attachment_min_fields.create_date":
		if e.complexity.AdasAttachmentMinFields.CreateDate == nil {
			break
		}

		return e.complexity.AdasAttachmentMinFields.CreateDate(childComplexity), true

	case "adas_attachment_min_fields.file_length":
		if e.complexity.AdasAttachmentMinFields.FileLength == nil {
			break
		}

		return e.complexity.AdasAttachmentMinFields.FileLength(childComplexity), true

	case "adas_attachment_min_fields.file_name":
		if e.complexity.AdasAttachmentMinFields.FileName == nil {
			break
		}

		return e.complexity.AdasAttachmentMinFields.FileName(childComplexity), true

	case "adas_attachment_min_fields.file_path":
		if e.complexity.AdasAttachmentMinFields.FilePath == nil {
			break
		}

		return e.complexity.AdasAttachmentMinFields.FilePath(childComplexity), true

	case "adas_attachment_min_fields.file_type":
		if e.complexity.AdasAttachmentMinFields.FileType == nil {
			break
		}

		return e.complexity.AdasAttachmentMinFields.FileType(childComplexity), true

	case "adas_attachment_min_fields.id":
		if e.complexity.AdasAttachmentMinFields.ID == nil {
			break
		}

		return e.complexity.AdasAttachmentMinFields.ID(childComplexity), true

	case "adas_attachment_min_fields.plate_no":
		if e.complexity.AdasAttachmentMinFields.PlateNo == nil {
			break
		}

		return e.complexity.AdasAttachmentMinFields.PlateNo(childComplexity), true

	case "adas_attachment_min_fields.sim_no":
		if e.complexity.AdasAttachmentMinFields.SimNo == nil {
			break
		}

		return e.complexity.AdasAttachmentMinFields.SimNo(childComplexity), true

	case "adas_attachment_min_fields.status":
		if e.complexity.AdasAttachmentMinFields.Status == nil {
			break
		}

		return e.complexity.AdasAttachmentMinFields.Status(childComplexity), true

	case "adas_attachment_min_fields.vehicle_id":
		if e.complexity.AdasAttachmentMinFields.VehicleID == nil {
			break
		}

		return e.complexity.AdasAttachmentMinFields.VehicleID(childComplexity), true

	case "adas_attachment_mutation_response.affected_rows":
		if e.complexity.AdasAttachmentMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.AdasAttachmentMutationResponse.AffectedRows(childComplexity), true

	case "adas_attachment_mutation_response.returning":
		if e.complexity.AdasAttachmentMutationResponse.Returning == nil {
			break
		}

		return e.complexity.AdasAttachmentMutationResponse.Returning(childComplexity), true

	case "adas_attachment_stddev_fields.channel_id":
		if e.complexity.AdasAttachmentStddevFields.ChannelID == nil {
			break
		}

		return e.complexity.AdasAttachmentStddevFields.ChannelID(childComplexity), true

	case "adas_attachment_stddev_fields.file_length":
		if e.complexity.AdasAttachmentStddevFields.FileLength == nil {
			break
		}

		return e.complexity.AdasAttachmentStddevFields.FileLength(childComplexity), true

	case "adas_attachment_stddev_fields.id":
		if e.complexity.AdasAttachmentStddevFields.ID == nil {
			break
		}

		return e.complexity.AdasAttachmentStddevFields.ID(childComplexity), true

	case "adas_attachment_stddev_fields.sim_no":
		if e.complexity.AdasAttachmentStddevFields.SimNo == nil {
			break
		}

		return e.complexity.AdasAttachmentStddevFields.SimNo(childComplexity), true

	case "adas_attachment_stddev_fields.vehicle_id":
		if e.complexity.AdasAttachmentStddevFields.VehicleID == nil {
			break
		}

		return e.complexity.AdasAttachmentStddevFields.VehicleID(childComplexity), true

	case "adas_attachment_stddev_pop_fields.channel_id":
		if e.complexity.AdasAttachmentStddevPopFields.ChannelID == nil {
			break
		}

		return e.complexity.AdasAttachmentStddevPopFields.ChannelID(childComplexity), true

	case "adas_attachment_stddev_pop_fields.file_length":
		if e.complexity.AdasAttachmentStddevPopFields.FileLength == nil {
			break
		}

		return e.complexity.AdasAttachmentStddevPopFields.FileLength(childComplexity), true

	case "adas_attachment_stddev_pop_fields.id":
		if e.complexity.AdasAttachmentStddevPopFields.ID == nil {
			break
		}

		return e.complexity.AdasAttachmentStddevPopFields.ID(childComplexity), true

	case "adas_attachment_stddev_pop_fields.sim_no":
		if e.complexity.AdasAttachmentStddevPopFields.SimNo == nil {
			break
		}

		return e.complexity.AdasAttachmentStddevPopFields.SimNo(childComplexity), true

	case "adas_attachment_stddev_pop_fields.vehicle_id":
		if e.complexity.AdasAttachmentStddevPopFields.VehicleID == nil {
			break
		}

		return e.complexity.AdasAttachmentStddevPopFields.VehicleID(childComplexity), true

	case "adas_attachment_stddev_samp_fields.channel_id":
		if e.complexity.AdasAttachmentStddevSampFields.ChannelID == nil {
			break
		}

		return e.complexity.AdasAttachmentStddevSampFields.ChannelID(childComplexity), true

	case "adas_attachment_stddev_samp_fields.file_length":
		if e.complexity.AdasAttachmentStddevSampFields.FileLength == nil {
			break
		}

		return e.complexity.AdasAttachmentStddevSampFields.FileLength(childComplexity), true

	case "adas_attachment_stddev_samp_fields.id":
		if e.complexity.AdasAttachmentStddevSampFields.ID == nil {
			break
		}

		return e.complexity.AdasAttachmentStddevSampFields.ID(childComplexity), true

	case "adas_attachment_stddev_samp_fields.sim_no":
		if e.complexity.AdasAttachmentStddevSampFields.SimNo == nil {
			break
		}

		return e.complexity.AdasAttachmentStddevSampFields.SimNo(childComplexity), true

	case "adas_attachment_stddev_samp_fields.vehicle_id":
		if e.complexity.AdasAttachmentStddevSampFields.VehicleID == nil {
			break
		}

		return e.complexity.AdasAttachmentStddevSampFields.VehicleID(childComplexity), true

	case "adas_attachment_sum_fields.channel_id":
		if e.complexity.AdasAttachmentSumFields.ChannelID == nil {
			break
		}

		return e.complexity.AdasAttachmentSumFields.ChannelID(childComplexity), true

	case "adas_attachment_sum_fields.file_length":
		if e.complexity.AdasAttachmentSumFields.FileLength == nil {
			break
		}

		return e.complexity.AdasAttachmentSumFields.FileLength(childComplexity), true

	case "adas_attachment_sum_fields.id":
		if e.complexity.AdasAttachmentSumFields.ID == nil {
			break
		}

		return e.complexity.AdasAttachmentSumFields.ID(childComplexity), true

	case "adas_attachment_sum_fields.sim_no":
		if e.complexity.AdasAttachmentSumFields.SimNo == nil {
			break
		}

		return e.complexity.AdasAttachmentSumFields.SimNo(childComplexity), true

	case "adas_attachment_sum_fields.vehicle_id":
		if e.complexity.AdasAttachmentSumFields.VehicleID == nil {
			break
		}

		return e.complexity.AdasAttachmentSumFields.VehicleID(childComplexity), true

	case "adas_attachment_var_pop_fields.channel_id":
		if e.complexity.AdasAttachmentVarPopFields.ChannelID == nil {
			break
		}

		return e.complexity.AdasAttachmentVarPopFields.ChannelID(childComplexity), true

	case "adas_attachment_var_pop_fields.file_length":
		if e.complexity.AdasAttachmentVarPopFields.FileLength == nil {
			break
		}

		return e.complexity.AdasAttachmentVarPopFields.FileLength(childComplexity), true

	case "adas_attachment_var_pop_fields.id":
		if e.complexity.AdasAttachmentVarPopFields.ID == nil {
			break
		}

		return e.complexity.AdasAttachmentVarPopFields.ID(childComplexity), true

	case "adas_attachment_var_pop_fields.sim_no":
		if e.complexity.AdasAttachmentVarPopFields.SimNo == nil {
			break
		}

		return e.complexity.AdasAttachmentVarPopFields.SimNo(childComplexity), true

	case "adas_attachment_var_pop_fields.vehicle_id":
		if e.complexity.AdasAttachmentVarPopFields.VehicleID == nil {
			break
		}

		return e.complexity.AdasAttachmentVarPopFields.VehicleID(childComplexity), true

	case "adas_attachment_var_samp_fields.channel_id":
		if e.complexity.AdasAttachmentVarSampFields.ChannelID == nil {
			break
		}

		return e.complexity.AdasAttachmentVarSampFields.ChannelID(childComplexity), true

	case "adas_attachment_var_samp_fields.file_length":
		if e.complexity.AdasAttachmentVarSampFields.FileLength == nil {
			break
		}

		return e.complexity.AdasAttachmentVarSampFields.FileLength(childComplexity), true

	case "adas_attachment_var_samp_fields.id":
		if e.complexity.AdasAttachmentVarSampFields.ID == nil {
			break
		}

		return e.complexity.AdasAttachmentVarSampFields.ID(childComplexity), true

	case "adas_attachment_var_samp_fields.sim_no":
		if e.complexity.AdasAttachmentVarSampFields.SimNo == nil {
			break
		}

		return e.complexity.AdasAttachmentVarSampFields.SimNo(childComplexity), true

	case "adas_attachment_var_samp_fields.vehicle_id":
		if e.complexity.AdasAttachmentVarSampFields.VehicleID == nil {
			break
		}

		return e.complexity.AdasAttachmentVarSampFields.VehicleID(childComplexity), true

	case "adas_attachment_variance_fields.channel_id":
		if e.complexity.AdasAttachmentVarianceFields.ChannelID == nil {
			break
		}

		return e.complexity.AdasAttachmentVarianceFields.ChannelID(childComplexity), true

	case "adas_attachment_variance_fields.file_length":
		if e.complexity.AdasAttachmentVarianceFields.FileLength == nil {
			break
		}

		return e.complexity.AdasAttachmentVarianceFields.FileLength(childComplexity), true

	case "adas_attachment_variance_fields.id":
		if e.complexity.AdasAttachmentVarianceFields.ID == nil {
			break
		}

		return e.complexity.AdasAttachmentVarianceFields.ID(childComplexity), true

	case "adas_attachment_variance_fields.sim_no":
		if e.complexity.AdasAttachmentVarianceFields.SimNo == nil {
			break
		}

		return e.complexity.AdasAttachmentVarianceFields.SimNo(childComplexity), true

	case "adas_attachment_variance_fields.vehicle_id":
		if e.complexity.AdasAttachmentVarianceFields.VehicleID == nil {
			break
		}

		return e.complexity.AdasAttachmentVarianceFields.VehicleID(childComplexity), true

	case "adas_data.adas_attachment":
		if e.complexity.AdasData.AdasAttachment == nil {
			break
		}

		return e.complexity.AdasData.AdasAttachment(childComplexity), true

	case "adas_data.alarm_id":
		if e.complexity.AdasData.AlarmID == nil {
			break
		}

		return e.complexity.AdasData.AlarmID(childComplexity), true

	case "adas_data.alarm_no":
		if e.complexity.AdasData.AlarmNo == nil {
			break
		}

		return e.complexity.AdasData.AlarmNo(childComplexity), true

	case "adas_data.alarm_source":
		if e.complexity.AdasData.AlarmSource == nil {
			break
		}

		return e.complexity.AdasData.AlarmSource(childComplexity), true

	case "adas_data.alarm_time":
		if e.complexity.AdasData.AlarmTime == nil {
			break
		}

		return e.complexity.AdasData.AlarmTime(childComplexity), true

	case "adas_data.alarm_type":
		if e.complexity.AdasData.AlarmType == nil {
			break
		}

		return e.complexity.AdasData.AlarmType(childComplexity), true

	case "adas_data.altitude":
		if e.complexity.AdasData.Altitude == nil {
			break
		}

		return e.complexity.AdasData.Altitude(childComplexity), true

	case "adas_data.created_date":
		if e.complexity.AdasData.CreatedDate == nil {
			break
		}

		return e.complexity.AdasData.CreatedDate(childComplexity), true

	case "adas_data.fatigue_degree":
		if e.complexity.AdasData.FatigueDegree == nil {
			break
		}

		return e.complexity.AdasData.FatigueDegree(childComplexity), true

	case "adas_data.front_car_distance":
		if e.complexity.AdasData.FrontCarDistance == nil {
			break
		}

		return e.complexity.AdasData.FrontCarDistance(childComplexity), true

	case "adas_data.id":
		if e.complexity.AdasData.ID == nil {
			break
		}

		return e.complexity.AdasData.ID(childComplexity), true

	case "adas_data.latitude":
		if e.complexity.AdasData.Latitude == nil {
			break
		}

		return e.complexity.AdasData.Latitude(childComplexity), true

	case "adas_data.levels":
		if e.complexity.AdasData.Levels == nil {
			break
		}

		return e.complexity.AdasData.Levels(childComplexity), true

	case "adas_data.location":
		if e.complexity.AdasData.Location == nil {
			break
		}

		return e.complexity.AdasData.Location(childComplexity), true

	case "adas_data.longitude":
		if e.complexity.AdasData.Longitude == nil {
			break
		}

		return e.complexity.AdasData.Longitude(childComplexity), true

	case "adas_data.plate_no":
		if e.complexity.AdasData.PlateNo == nil {
			break
		}

		return e.complexity.AdasData.PlateNo(childComplexity), true

	case "adas_data.sim_id":
		if e.complexity.AdasData.SimID == nil {
			break
		}

		return e.complexity.AdasData.SimID(childComplexity), true

	case "adas_data.speed":
		if e.complexity.AdasData.Speed == nil {
			break
		}

		return e.complexity.AdasData.Speed(childComplexity), true

	case "adas_data.terminal_id":
		if e.complexity.AdasData.TerminalID == nil {
			break
		}

		return e.complexity.AdasData.TerminalID(childComplexity), true

	case "adas_data.vehicle_id":
		if e.complexity.AdasData.VehicleID == nil {
			break
		}

		return e.complexity.AdasData.VehicleID(childComplexity), true

	case "adas_data.vehicle_status":
		if e.complexity.AdasData.VehicleStatus == nil {
			break
		}

		return e.complexity.AdasData.VehicleStatus(childComplexity), true

	case "adas_data_aggregate.aggregate":
		if e.complexity.AdasDataAggregate.Aggregate == nil {
			break
		}

		return e.complexity.AdasDataAggregate.Aggregate(childComplexity), true

	case "adas_data_aggregate.nodes":
		if e.complexity.AdasDataAggregate.Nodes == nil {
			break
		}

		return e.complexity.AdasDataAggregate.Nodes(childComplexity), true

	case "adas_data_aggregate_fields.avg":
		if e.complexity.AdasDataAggregateFields.Avg == nil {
			break
		}

		return e.complexity.AdasDataAggregateFields.Avg(childComplexity), true

	case "adas_data_aggregate_fields.count":
		if e.complexity.AdasDataAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_adas_data_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AdasDataAggregateFields.Count(childComplexity, args["columns"].([]model.AdasDataSelectColumn), args["distinct"].(*bool)), true

	case "adas_data_aggregate_fields.max":
		if e.complexity.AdasDataAggregateFields.Max == nil {
			break
		}

		return e.complexity.AdasDataAggregateFields.Max(childComplexity), true

	case "adas_data_aggregate_fields.min":
		if e.complexity.AdasDataAggregateFields.Min == nil {
			break
		}

		return e.complexity.AdasDataAggregateFields.Min(childComplexity), true

	case "adas_data_aggregate_fields.stddev":
		if e.complexity.AdasDataAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.AdasDataAggregateFields.Stddev(childComplexity), true

	case "adas_data_aggregate_fields.stddev_pop":
		if e.complexity.AdasDataAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.AdasDataAggregateFields.StddevPop(childComplexity), true

	case "adas_data_aggregate_fields.stddev_samp":
		if e.complexity.AdasDataAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.AdasDataAggregateFields.StddevSamp(childComplexity), true

	case "adas_data_aggregate_fields.sum":
		if e.complexity.AdasDataAggregateFields.Sum == nil {
			break
		}

		return e.complexity.AdasDataAggregateFields.Sum(childComplexity), true

	case "adas_data_aggregate_fields.var_pop":
		if e.complexity.AdasDataAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.AdasDataAggregateFields.VarPop(childComplexity), true

	case "adas_data_aggregate_fields.var_samp":
		if e.complexity.AdasDataAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.AdasDataAggregateFields.VarSamp(childComplexity), true

	case "adas_data_aggregate_fields.variance":
		if e.complexity.AdasDataAggregateFields.Variance == nil {
			break
		}

		return e.complexity.AdasDataAggregateFields.Variance(childComplexity), true

	case "adas_data_avg_fields.alarm_id":
		if e.complexity.AdasDataAvgFields.AlarmID == nil {
			break
		}

		return e.complexity.AdasDataAvgFields.AlarmID(childComplexity), true

	case "adas_data_avg_fields.altitude":
		if e.complexity.AdasDataAvgFields.Altitude == nil {
			break
		}

		return e.complexity.AdasDataAvgFields.Altitude(childComplexity), true

	case "adas_data_avg_fields.fatigue_degree":
		if e.complexity.AdasDataAvgFields.FatigueDegree == nil {
			break
		}

		return e.complexity.AdasDataAvgFields.FatigueDegree(childComplexity), true

	case "adas_data_avg_fields.front_car_distance":
		if e.complexity.AdasDataAvgFields.FrontCarDistance == nil {
			break
		}

		return e.complexity.AdasDataAvgFields.FrontCarDistance(childComplexity), true

	case "adas_data_avg_fields.id":
		if e.complexity.AdasDataAvgFields.ID == nil {
			break
		}

		return e.complexity.AdasDataAvgFields.ID(childComplexity), true

	case "adas_data_avg_fields.latitude":
		if e.complexity.AdasDataAvgFields.Latitude == nil {
			break
		}

		return e.complexity.AdasDataAvgFields.Latitude(childComplexity), true

	case "adas_data_avg_fields.levels":
		if e.complexity.AdasDataAvgFields.Levels == nil {
			break
		}

		return e.complexity.AdasDataAvgFields.Levels(childComplexity), true

	case "adas_data_avg_fields.longitude":
		if e.complexity.AdasDataAvgFields.Longitude == nil {
			break
		}

		return e.complexity.AdasDataAvgFields.Longitude(childComplexity), true

	case "adas_data_avg_fields.sim_id":
		if e.complexity.AdasDataAvgFields.SimID == nil {
			break
		}

		return e.complexity.AdasDataAvgFields.SimID(childComplexity), true

	case "adas_data_avg_fields.speed":
		if e.complexity.AdasDataAvgFields.Speed == nil {
			break
		}

		return e.complexity.AdasDataAvgFields.Speed(childComplexity), true

	case "adas_data_avg_fields.terminal_id":
		if e.complexity.AdasDataAvgFields.TerminalID == nil {
			break
		}

		return e.complexity.AdasDataAvgFields.TerminalID(childComplexity), true

	case "adas_data_max_fields.adas_attachment":
		if e.complexity.AdasDataMaxFields.AdasAttachment == nil {
			break
		}

		return e.complexity.AdasDataMaxFields.AdasAttachment(childComplexity), true

	case "adas_data_max_fields.alarm_id":
		if e.complexity.AdasDataMaxFields.AlarmID == nil {
			break
		}

		return e.complexity.AdasDataMaxFields.AlarmID(childComplexity), true

	case "adas_data_max_fields.alarm_no":
		if e.complexity.AdasDataMaxFields.AlarmNo == nil {
			break
		}

		return e.complexity.AdasDataMaxFields.AlarmNo(childComplexity), true

	case "adas_data_max_fields.alarm_source":
		if e.complexity.AdasDataMaxFields.AlarmSource == nil {
			break
		}

		return e.complexity.AdasDataMaxFields.AlarmSource(childComplexity), true

	case "adas_data_max_fields.alarm_time":
		if e.complexity.AdasDataMaxFields.AlarmTime == nil {
			break
		}

		return e.complexity.AdasDataMaxFields.AlarmTime(childComplexity), true

	case "adas_data_max_fields.alarm_type":
		if e.complexity.AdasDataMaxFields.AlarmType == nil {
			break
		}

		return e.complexity.AdasDataMaxFields.AlarmType(childComplexity), true

	case "adas_data_max_fields.altitude":
		if e.complexity.AdasDataMaxFields.Altitude == nil {
			break
		}

		return e.complexity.AdasDataMaxFields.Altitude(childComplexity), true

	case "adas_data_max_fields.created_date":
		if e.complexity.AdasDataMaxFields.CreatedDate == nil {
			break
		}

		return e.complexity.AdasDataMaxFields.CreatedDate(childComplexity), true

	case "adas_data_max_fields.fatigue_degree":
		if e.complexity.AdasDataMaxFields.FatigueDegree == nil {
			break
		}

		return e.complexity.AdasDataMaxFields.FatigueDegree(childComplexity), true

	case "adas_data_max_fields.front_car_distance":
		if e.complexity.AdasDataMaxFields.FrontCarDistance == nil {
			break
		}

		return e.complexity.AdasDataMaxFields.FrontCarDistance(childComplexity), true

	case "adas_data_max_fields.id":
		if e.complexity.AdasDataMaxFields.ID == nil {
			break
		}

		return e.complexity.AdasDataMaxFields.ID(childComplexity), true

	case "adas_data_max_fields.latitude":
		if e.complexity.AdasDataMaxFields.Latitude == nil {
			break
		}

		return e.complexity.AdasDataMaxFields.Latitude(childComplexity), true

	case "adas_data_max_fields.levels":
		if e.complexity.AdasDataMaxFields.Levels == nil {
			break
		}

		return e.complexity.AdasDataMaxFields.Levels(childComplexity), true

	case "adas_data_max_fields.location":
		if e.complexity.AdasDataMaxFields.Location == nil {
			break
		}

		return e.complexity.AdasDataMaxFields.Location(childComplexity), true

	case "adas_data_max_fields.longitude":
		if e.complexity.AdasDataMaxFields.Longitude == nil {
			break
		}

		return e.complexity.AdasDataMaxFields.Longitude(childComplexity), true

	case "adas_data_max_fields.plate_no":
		if e.complexity.AdasDataMaxFields.PlateNo == nil {
			break
		}

		return e.complexity.AdasDataMaxFields.PlateNo(childComplexity), true

	case "adas_data_max_fields.sim_id":
		if e.complexity.AdasDataMaxFields.SimID == nil {
			break
		}

		return e.complexity.AdasDataMaxFields.SimID(childComplexity), true

	case "adas_data_max_fields.speed":
		if e.complexity.AdasDataMaxFields.Speed == nil {
			break
		}

		return e.complexity.AdasDataMaxFields.Speed(childComplexity), true

	case "adas_data_max_fields.terminal_id":
		if e.complexity.AdasDataMaxFields.TerminalID == nil {
			break
		}

		return e.complexity.AdasDataMaxFields.TerminalID(childComplexity), true

	case "adas_data_max_fields.vehicle_id":
		if e.complexity.AdasDataMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.AdasDataMaxFields.VehicleID(childComplexity), true

	case "adas_data_max_fields.vehicle_status":
		if e.complexity.AdasDataMaxFields.VehicleStatus == nil {
			break
		}

		return e.complexity.AdasDataMaxFields.VehicleStatus(childComplexity), true

	case "adas_data_min_fields.adas_attachment":
		if e.complexity.AdasDataMinFields.AdasAttachment == nil {
			break
		}

		return e.complexity.AdasDataMinFields.AdasAttachment(childComplexity), true

	case "adas_data_min_fields.alarm_id":
		if e.complexity.AdasDataMinFields.AlarmID == nil {
			break
		}

		return e.complexity.AdasDataMinFields.AlarmID(childComplexity), true

	case "adas_data_min_fields.alarm_no":
		if e.complexity.AdasDataMinFields.AlarmNo == nil {
			break
		}

		return e.complexity.AdasDataMinFields.AlarmNo(childComplexity), true

	case "adas_data_min_fields.alarm_source":
		if e.complexity.AdasDataMinFields.AlarmSource == nil {
			break
		}

		return e.complexity.AdasDataMinFields.AlarmSource(childComplexity), true

	case "adas_data_min_fields.alarm_time":
		if e.complexity.AdasDataMinFields.AlarmTime == nil {
			break
		}

		return e.complexity.AdasDataMinFields.AlarmTime(childComplexity), true

	case "adas_data_min_fields.alarm_type":
		if e.complexity.AdasDataMinFields.AlarmType == nil {
			break
		}

		return e.complexity.AdasDataMinFields.AlarmType(childComplexity), true

	case "adas_data_min_fields.altitude":
		if e.complexity.AdasDataMinFields.Altitude == nil {
			break
		}

		return e.complexity.AdasDataMinFields.Altitude(childComplexity), true

	case "adas_data_min_fields.created_date":
		if e.complexity.AdasDataMinFields.CreatedDate == nil {
			break
		}

		return e.complexity.AdasDataMinFields.CreatedDate(childComplexity), true

	case "adas_data_min_fields.fatigue_degree":
		if e.complexity.AdasDataMinFields.FatigueDegree == nil {
			break
		}

		return e.complexity.AdasDataMinFields.FatigueDegree(childComplexity), true

	case "adas_data_min_fields.front_car_distance":
		if e.complexity.AdasDataMinFields.FrontCarDistance == nil {
			break
		}

		return e.complexity.AdasDataMinFields.FrontCarDistance(childComplexity), true

	case "adas_data_min_fields.id":
		if e.complexity.AdasDataMinFields.ID == nil {
			break
		}

		return e.complexity.AdasDataMinFields.ID(childComplexity), true

	case "adas_data_min_fields.latitude":
		if e.complexity.AdasDataMinFields.Latitude == nil {
			break
		}

		return e.complexity.AdasDataMinFields.Latitude(childComplexity), true

	case "adas_data_min_fields.levels":
		if e.complexity.AdasDataMinFields.Levels == nil {
			break
		}

		return e.complexity.AdasDataMinFields.Levels(childComplexity), true

	case "adas_data_min_fields.location":
		if e.complexity.AdasDataMinFields.Location == nil {
			break
		}

		return e.complexity.AdasDataMinFields.Location(childComplexity), true

	case "adas_data_min_fields.longitude":
		if e.complexity.AdasDataMinFields.Longitude == nil {
			break
		}

		return e.complexity.AdasDataMinFields.Longitude(childComplexity), true

	case "adas_data_min_fields.plate_no":
		if e.complexity.AdasDataMinFields.PlateNo == nil {
			break
		}

		return e.complexity.AdasDataMinFields.PlateNo(childComplexity), true

	case "adas_data_min_fields.sim_id":
		if e.complexity.AdasDataMinFields.SimID == nil {
			break
		}

		return e.complexity.AdasDataMinFields.SimID(childComplexity), true

	case "adas_data_min_fields.speed":
		if e.complexity.AdasDataMinFields.Speed == nil {
			break
		}

		return e.complexity.AdasDataMinFields.Speed(childComplexity), true

	case "adas_data_min_fields.terminal_id":
		if e.complexity.AdasDataMinFields.TerminalID == nil {
			break
		}

		return e.complexity.AdasDataMinFields.TerminalID(childComplexity), true

	case "adas_data_min_fields.vehicle_id":
		if e.complexity.AdasDataMinFields.VehicleID == nil {
			break
		}

		return e.complexity.AdasDataMinFields.VehicleID(childComplexity), true

	case "adas_data_min_fields.vehicle_status":
		if e.complexity.AdasDataMinFields.VehicleStatus == nil {
			break
		}

		return e.complexity.AdasDataMinFields.VehicleStatus(childComplexity), true

	case "adas_data_mutation_response.affected_rows":
		if e.complexity.AdasDataMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.AdasDataMutationResponse.AffectedRows(childComplexity), true

	case "adas_data_mutation_response.returning":
		if e.complexity.AdasDataMutationResponse.Returning == nil {
			break
		}

		return e.complexity.AdasDataMutationResponse.Returning(childComplexity), true

	case "adas_data_stddev_fields.alarm_id":
		if e.complexity.AdasDataStddevFields.AlarmID == nil {
			break
		}

		return e.complexity.AdasDataStddevFields.AlarmID(childComplexity), true

	case "adas_data_stddev_fields.altitude":
		if e.complexity.AdasDataStddevFields.Altitude == nil {
			break
		}

		return e.complexity.AdasDataStddevFields.Altitude(childComplexity), true

	case "adas_data_stddev_fields.fatigue_degree":
		if e.complexity.AdasDataStddevFields.FatigueDegree == nil {
			break
		}

		return e.complexity.AdasDataStddevFields.FatigueDegree(childComplexity), true

	case "adas_data_stddev_fields.front_car_distance":
		if e.complexity.AdasDataStddevFields.FrontCarDistance == nil {
			break
		}

		return e.complexity.AdasDataStddevFields.FrontCarDistance(childComplexity), true

	case "adas_data_stddev_fields.id":
		if e.complexity.AdasDataStddevFields.ID == nil {
			break
		}

		return e.complexity.AdasDataStddevFields.ID(childComplexity), true

	case "adas_data_stddev_fields.latitude":
		if e.complexity.AdasDataStddevFields.Latitude == nil {
			break
		}

		return e.complexity.AdasDataStddevFields.Latitude(childComplexity), true

	case "adas_data_stddev_fields.levels":
		if e.complexity.AdasDataStddevFields.Levels == nil {
			break
		}

		return e.complexity.AdasDataStddevFields.Levels(childComplexity), true

	case "adas_data_stddev_fields.longitude":
		if e.complexity.AdasDataStddevFields.Longitude == nil {
			break
		}

		return e.complexity.AdasDataStddevFields.Longitude(childComplexity), true

	case "adas_data_stddev_fields.sim_id":
		if e.complexity.AdasDataStddevFields.SimID == nil {
			break
		}

		return e.complexity.AdasDataStddevFields.SimID(childComplexity), true

	case "adas_data_stddev_fields.speed":
		if e.complexity.AdasDataStddevFields.Speed == nil {
			break
		}

		return e.complexity.AdasDataStddevFields.Speed(childComplexity), true

	case "adas_data_stddev_fields.terminal_id":
		if e.complexity.AdasDataStddevFields.TerminalID == nil {
			break
		}

		return e.complexity.AdasDataStddevFields.TerminalID(childComplexity), true

	case "adas_data_stddev_pop_fields.alarm_id":
		if e.complexity.AdasDataStddevPopFields.AlarmID == nil {
			break
		}

		return e.complexity.AdasDataStddevPopFields.AlarmID(childComplexity), true

	case "adas_data_stddev_pop_fields.altitude":
		if e.complexity.AdasDataStddevPopFields.Altitude == nil {
			break
		}

		return e.complexity.AdasDataStddevPopFields.Altitude(childComplexity), true

	case "adas_data_stddev_pop_fields.fatigue_degree":
		if e.complexity.AdasDataStddevPopFields.FatigueDegree == nil {
			break
		}

		return e.complexity.AdasDataStddevPopFields.FatigueDegree(childComplexity), true

	case "adas_data_stddev_pop_fields.front_car_distance":
		if e.complexity.AdasDataStddevPopFields.FrontCarDistance == nil {
			break
		}

		return e.complexity.AdasDataStddevPopFields.FrontCarDistance(childComplexity), true

	case "adas_data_stddev_pop_fields.id":
		if e.complexity.AdasDataStddevPopFields.ID == nil {
			break
		}

		return e.complexity.AdasDataStddevPopFields.ID(childComplexity), true

	case "adas_data_stddev_pop_fields.latitude":
		if e.complexity.AdasDataStddevPopFields.Latitude == nil {
			break
		}

		return e.complexity.AdasDataStddevPopFields.Latitude(childComplexity), true

	case "adas_data_stddev_pop_fields.levels":
		if e.complexity.AdasDataStddevPopFields.Levels == nil {
			break
		}

		return e.complexity.AdasDataStddevPopFields.Levels(childComplexity), true

	case "adas_data_stddev_pop_fields.longitude":
		if e.complexity.AdasDataStddevPopFields.Longitude == nil {
			break
		}

		return e.complexity.AdasDataStddevPopFields.Longitude(childComplexity), true

	case "adas_data_stddev_pop_fields.sim_id":
		if e.complexity.AdasDataStddevPopFields.SimID == nil {
			break
		}

		return e.complexity.AdasDataStddevPopFields.SimID(childComplexity), true

	case "adas_data_stddev_pop_fields.speed":
		if e.complexity.AdasDataStddevPopFields.Speed == nil {
			break
		}

		return e.complexity.AdasDataStddevPopFields.Speed(childComplexity), true

	case "adas_data_stddev_pop_fields.terminal_id":
		if e.complexity.AdasDataStddevPopFields.TerminalID == nil {
			break
		}

		return e.complexity.AdasDataStddevPopFields.TerminalID(childComplexity), true

	case "adas_data_stddev_samp_fields.alarm_id":
		if e.complexity.AdasDataStddevSampFields.AlarmID == nil {
			break
		}

		return e.complexity.AdasDataStddevSampFields.AlarmID(childComplexity), true

	case "adas_data_stddev_samp_fields.altitude":
		if e.complexity.AdasDataStddevSampFields.Altitude == nil {
			break
		}

		return e.complexity.AdasDataStddevSampFields.Altitude(childComplexity), true

	case "adas_data_stddev_samp_fields.fatigue_degree":
		if e.complexity.AdasDataStddevSampFields.FatigueDegree == nil {
			break
		}

		return e.complexity.AdasDataStddevSampFields.FatigueDegree(childComplexity), true

	case "adas_data_stddev_samp_fields.front_car_distance":
		if e.complexity.AdasDataStddevSampFields.FrontCarDistance == nil {
			break
		}

		return e.complexity.AdasDataStddevSampFields.FrontCarDistance(childComplexity), true

	case "adas_data_stddev_samp_fields.id":
		if e.complexity.AdasDataStddevSampFields.ID == nil {
			break
		}

		return e.complexity.AdasDataStddevSampFields.ID(childComplexity), true

	case "adas_data_stddev_samp_fields.latitude":
		if e.complexity.AdasDataStddevSampFields.Latitude == nil {
			break
		}

		return e.complexity.AdasDataStddevSampFields.Latitude(childComplexity), true

	case "adas_data_stddev_samp_fields.levels":
		if e.complexity.AdasDataStddevSampFields.Levels == nil {
			break
		}

		return e.complexity.AdasDataStddevSampFields.Levels(childComplexity), true

	case "adas_data_stddev_samp_fields.longitude":
		if e.complexity.AdasDataStddevSampFields.Longitude == nil {
			break
		}

		return e.complexity.AdasDataStddevSampFields.Longitude(childComplexity), true

	case "adas_data_stddev_samp_fields.sim_id":
		if e.complexity.AdasDataStddevSampFields.SimID == nil {
			break
		}

		return e.complexity.AdasDataStddevSampFields.SimID(childComplexity), true

	case "adas_data_stddev_samp_fields.speed":
		if e.complexity.AdasDataStddevSampFields.Speed == nil {
			break
		}

		return e.complexity.AdasDataStddevSampFields.Speed(childComplexity), true

	case "adas_data_stddev_samp_fields.terminal_id":
		if e.complexity.AdasDataStddevSampFields.TerminalID == nil {
			break
		}

		return e.complexity.AdasDataStddevSampFields.TerminalID(childComplexity), true

	case "adas_data_sum_fields.alarm_id":
		if e.complexity.AdasDataSumFields.AlarmID == nil {
			break
		}

		return e.complexity.AdasDataSumFields.AlarmID(childComplexity), true

	case "adas_data_sum_fields.altitude":
		if e.complexity.AdasDataSumFields.Altitude == nil {
			break
		}

		return e.complexity.AdasDataSumFields.Altitude(childComplexity), true

	case "adas_data_sum_fields.fatigue_degree":
		if e.complexity.AdasDataSumFields.FatigueDegree == nil {
			break
		}

		return e.complexity.AdasDataSumFields.FatigueDegree(childComplexity), true

	case "adas_data_sum_fields.front_car_distance":
		if e.complexity.AdasDataSumFields.FrontCarDistance == nil {
			break
		}

		return e.complexity.AdasDataSumFields.FrontCarDistance(childComplexity), true

	case "adas_data_sum_fields.id":
		if e.complexity.AdasDataSumFields.ID == nil {
			break
		}

		return e.complexity.AdasDataSumFields.ID(childComplexity), true

	case "adas_data_sum_fields.latitude":
		if e.complexity.AdasDataSumFields.Latitude == nil {
			break
		}

		return e.complexity.AdasDataSumFields.Latitude(childComplexity), true

	case "adas_data_sum_fields.levels":
		if e.complexity.AdasDataSumFields.Levels == nil {
			break
		}

		return e.complexity.AdasDataSumFields.Levels(childComplexity), true

	case "adas_data_sum_fields.longitude":
		if e.complexity.AdasDataSumFields.Longitude == nil {
			break
		}

		return e.complexity.AdasDataSumFields.Longitude(childComplexity), true

	case "adas_data_sum_fields.sim_id":
		if e.complexity.AdasDataSumFields.SimID == nil {
			break
		}

		return e.complexity.AdasDataSumFields.SimID(childComplexity), true

	case "adas_data_sum_fields.speed":
		if e.complexity.AdasDataSumFields.Speed == nil {
			break
		}

		return e.complexity.AdasDataSumFields.Speed(childComplexity), true

	case "adas_data_sum_fields.terminal_id":
		if e.complexity.AdasDataSumFields.TerminalID == nil {
			break
		}

		return e.complexity.AdasDataSumFields.TerminalID(childComplexity), true

	case "adas_data_var_pop_fields.alarm_id":
		if e.complexity.AdasDataVarPopFields.AlarmID == nil {
			break
		}

		return e.complexity.AdasDataVarPopFields.AlarmID(childComplexity), true

	case "adas_data_var_pop_fields.altitude":
		if e.complexity.AdasDataVarPopFields.Altitude == nil {
			break
		}

		return e.complexity.AdasDataVarPopFields.Altitude(childComplexity), true

	case "adas_data_var_pop_fields.fatigue_degree":
		if e.complexity.AdasDataVarPopFields.FatigueDegree == nil {
			break
		}

		return e.complexity.AdasDataVarPopFields.FatigueDegree(childComplexity), true

	case "adas_data_var_pop_fields.front_car_distance":
		if e.complexity.AdasDataVarPopFields.FrontCarDistance == nil {
			break
		}

		return e.complexity.AdasDataVarPopFields.FrontCarDistance(childComplexity), true

	case "adas_data_var_pop_fields.id":
		if e.complexity.AdasDataVarPopFields.ID == nil {
			break
		}

		return e.complexity.AdasDataVarPopFields.ID(childComplexity), true

	case "adas_data_var_pop_fields.latitude":
		if e.complexity.AdasDataVarPopFields.Latitude == nil {
			break
		}

		return e.complexity.AdasDataVarPopFields.Latitude(childComplexity), true

	case "adas_data_var_pop_fields.levels":
		if e.complexity.AdasDataVarPopFields.Levels == nil {
			break
		}

		return e.complexity.AdasDataVarPopFields.Levels(childComplexity), true

	case "adas_data_var_pop_fields.longitude":
		if e.complexity.AdasDataVarPopFields.Longitude == nil {
			break
		}

		return e.complexity.AdasDataVarPopFields.Longitude(childComplexity), true

	case "adas_data_var_pop_fields.sim_id":
		if e.complexity.AdasDataVarPopFields.SimID == nil {
			break
		}

		return e.complexity.AdasDataVarPopFields.SimID(childComplexity), true

	case "adas_data_var_pop_fields.speed":
		if e.complexity.AdasDataVarPopFields.Speed == nil {
			break
		}

		return e.complexity.AdasDataVarPopFields.Speed(childComplexity), true

	case "adas_data_var_pop_fields.terminal_id":
		if e.complexity.AdasDataVarPopFields.TerminalID == nil {
			break
		}

		return e.complexity.AdasDataVarPopFields.TerminalID(childComplexity), true

	case "adas_data_var_samp_fields.alarm_id":
		if e.complexity.AdasDataVarSampFields.AlarmID == nil {
			break
		}

		return e.complexity.AdasDataVarSampFields.AlarmID(childComplexity), true

	case "adas_data_var_samp_fields.altitude":
		if e.complexity.AdasDataVarSampFields.Altitude == nil {
			break
		}

		return e.complexity.AdasDataVarSampFields.Altitude(childComplexity), true

	case "adas_data_var_samp_fields.fatigue_degree":
		if e.complexity.AdasDataVarSampFields.FatigueDegree == nil {
			break
		}

		return e.complexity.AdasDataVarSampFields.FatigueDegree(childComplexity), true

	case "adas_data_var_samp_fields.front_car_distance":
		if e.complexity.AdasDataVarSampFields.FrontCarDistance == nil {
			break
		}

		return e.complexity.AdasDataVarSampFields.FrontCarDistance(childComplexity), true

	case "adas_data_var_samp_fields.id":
		if e.complexity.AdasDataVarSampFields.ID == nil {
			break
		}

		return e.complexity.AdasDataVarSampFields.ID(childComplexity), true

	case "adas_data_var_samp_fields.latitude":
		if e.complexity.AdasDataVarSampFields.Latitude == nil {
			break
		}

		return e.complexity.AdasDataVarSampFields.Latitude(childComplexity), true

	case "adas_data_var_samp_fields.levels":
		if e.complexity.AdasDataVarSampFields.Levels == nil {
			break
		}

		return e.complexity.AdasDataVarSampFields.Levels(childComplexity), true

	case "adas_data_var_samp_fields.longitude":
		if e.complexity.AdasDataVarSampFields.Longitude == nil {
			break
		}

		return e.complexity.AdasDataVarSampFields.Longitude(childComplexity), true

	case "adas_data_var_samp_fields.sim_id":
		if e.complexity.AdasDataVarSampFields.SimID == nil {
			break
		}

		return e.complexity.AdasDataVarSampFields.SimID(childComplexity), true

	case "adas_data_var_samp_fields.speed":
		if e.complexity.AdasDataVarSampFields.Speed == nil {
			break
		}

		return e.complexity.AdasDataVarSampFields.Speed(childComplexity), true

	case "adas_data_var_samp_fields.terminal_id":
		if e.complexity.AdasDataVarSampFields.TerminalID == nil {
			break
		}

		return e.complexity.AdasDataVarSampFields.TerminalID(childComplexity), true

	case "adas_data_variance_fields.alarm_id":
		if e.complexity.AdasDataVarianceFields.AlarmID == nil {
			break
		}

		return e.complexity.AdasDataVarianceFields.AlarmID(childComplexity), true

	case "adas_data_variance_fields.altitude":
		if e.complexity.AdasDataVarianceFields.Altitude == nil {
			break
		}

		return e.complexity.AdasDataVarianceFields.Altitude(childComplexity), true

	case "adas_data_variance_fields.fatigue_degree":
		if e.complexity.AdasDataVarianceFields.FatigueDegree == nil {
			break
		}

		return e.complexity.AdasDataVarianceFields.FatigueDegree(childComplexity), true

	case "adas_data_variance_fields.front_car_distance":
		if e.complexity.AdasDataVarianceFields.FrontCarDistance == nil {
			break
		}

		return e.complexity.AdasDataVarianceFields.FrontCarDistance(childComplexity), true

	case "adas_data_variance_fields.id":
		if e.complexity.AdasDataVarianceFields.ID == nil {
			break
		}

		return e.complexity.AdasDataVarianceFields.ID(childComplexity), true

	case "adas_data_variance_fields.latitude":
		if e.complexity.AdasDataVarianceFields.Latitude == nil {
			break
		}

		return e.complexity.AdasDataVarianceFields.Latitude(childComplexity), true

	case "adas_data_variance_fields.levels":
		if e.complexity.AdasDataVarianceFields.Levels == nil {
			break
		}

		return e.complexity.AdasDataVarianceFields.Levels(childComplexity), true

	case "adas_data_variance_fields.longitude":
		if e.complexity.AdasDataVarianceFields.Longitude == nil {
			break
		}

		return e.complexity.AdasDataVarianceFields.Longitude(childComplexity), true

	case "adas_data_variance_fields.sim_id":
		if e.complexity.AdasDataVarianceFields.SimID == nil {
			break
		}

		return e.complexity.AdasDataVarianceFields.SimID(childComplexity), true

	case "adas_data_variance_fields.speed":
		if e.complexity.AdasDataVarianceFields.Speed == nil {
			break
		}

		return e.complexity.AdasDataVarianceFields.Speed(childComplexity), true

	case "adas_data_variance_fields.terminal_id":
		if e.complexity.AdasDataVarianceFields.TerminalID == nil {
			break
		}

		return e.complexity.AdasDataVarianceFields.TerminalID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/adas_alarm.graphqls", Input: `# columns and relationships of "adas_attachment"
type adas_attachment {
    alarm_no: String
    attachment_id: String!
    channel_id: bigint
    create_date: timestamptz
    file_length: bigint
    file_name: String
    file_path: String
    file_type: String
    id: bigint!
    plate_no: String
    sim_no: bigint
    status: String
    vehicle_id: bigint
}

# aggregated selection of "adas_attachment"
type adas_attachment_aggregate {
    aggregate: adas_attachment_aggregate_fields
    nodes: [adas_attachment!]!
}

# aggregate fields of "adas_attachment"
type adas_attachment_aggregate_fields {
    avg: adas_attachment_avg_fields
    count(columns: [adas_attachment_select_column!], distinct: Boolean): Int
    max: adas_attachment_max_fields
    min: adas_attachment_min_fields
    stddev: adas_attachment_stddev_fields
    stddev_pop: adas_attachment_stddev_pop_fields
    stddev_samp: adas_attachment_stddev_samp_fields
    sum: adas_attachment_sum_fields
    var_pop: adas_attachment_var_pop_fields
    var_samp: adas_attachment_var_samp_fields
    variance: adas_attachment_variance_fields
}

# order by aggregate values of table "adas_attachment"
input adas_attachment_aggregate_order_by {
    avg: adas_attachment_avg_order_by
    count: order_by
    max: adas_attachment_max_order_by
    min: adas_attachment_min_order_by
    stddev: adas_attachment_stddev_order_by
    stddev_pop: adas_attachment_stddev_pop_order_by
    stddev_samp: adas_attachment_stddev_samp_order_by
    sum: adas_attachment_sum_order_by
    var_pop: adas_attachment_var_pop_order_by
    var_samp: adas_attachment_var_samp_order_by
    variance: adas_attachment_variance_order_by
}

# input type for inserting array relation for remote table "adas_attachment"
input adas_attachment_arr_rel_insert_input {
    data: [adas_attachment_insert_input!]!
    on_conflict: adas_attachment_on_conflict
}

# aggregate avg on columns
type adas_attachment_avg_fields {
    channel_id: Float
    file_length: Float
    id: Float
    sim_no: Float
    vehicle_id: Float
}

# order by avg() on columns of table "adas_attachment"
input adas_attachment_avg_order_by {
    channel_id: order_by
    file_length: order_by
    id: order_by
    sim_no: order_by
    vehicle_id: order_by
}

# Boolean expression to filter rows from the table "adas_attachment". All fields are combined with a logical 'AND'.
input adas_attachment_bool_exp {
    _and: [adas_attachment_bool_exp]
    _not: adas_attachment_bool_exp
    _or: [adas_attachment_bool_exp]
    alarm_no: String_comparison_exp
    attachment_id: String_comparison_exp
    channel_id: bigint_comparison_exp
    create_date: timestamptz_comparison_exp
    file_length: bigint_comparison_exp
    file_name: String_comparison_exp
    file_path: String_comparison_exp
    file_type: String_comparison_exp
    id: bigint_comparison_exp
    plate_no: String_comparison_exp
    sim_no: bigint_comparison_exp
    status: String_comparison_exp
    vehicle_id: bigint_comparison_exp
}

# unique or primary key constraints on table "adas_attachment"
enum adas_attachment_constraint {
    # unique or primary key constraint
    adas_attachment_attachment_id_key
    # unique or primary key constraint
    adas_attachment_pkey
}

# input type for incrementing integer column in table "adas_attachment"
input adas_attachment_inc_input {
    channel_id: bigint
    file_length: bigint
    id: bigint
    sim_no: bigint
    vehicle_id: bigint
}

# input type for inserting data into table "adas_attachment"
input adas_attachment_insert_input {
    alarm_no: String
    attachment_id: String
    channel_id: bigint
    create_date: timestamptz
    file_length: bigint
    file_name: String
    file_path: String
    file_type: String
    id: bigint
    plate_no: String
    sim_no: bigint
    status: String
    vehicle_id: bigint
}

# aggregate max on columns
type adas_attachment_max_fields {
    alarm_no: String
    attachment_id: String
    channel_id: bigint
    create_date: timestamptz
    file_length: bigint
    file_name: String
    file_path: String
    file_type: String
    id: bigint
    plate_no: String
    sim_no: bigint
    status: String
    vehicle_id: bigint
}

# order by max() on columns of table "adas_attachment"
input adas_attachment_max_order_by {
    alarm_no: order_by
    attachment_id: order_by
    channel_id: order_by
    create_date: order_by
    file_length: order_by
    file_name: order_by
    file_path: order_by
    file_type: order_by
    id: order_by
    plate_no: order_by
    sim_no: order_by
    status: order_by
    vehicle_id: order_by
}

# aggregate min on columns
type adas_attachment_min_fields {
    alarm_no: String
    attachment_id: String
    channel_id: bigint
    create_date: timestamptz
    file_length: bigint
    file_name: String
    file_path: String
    file_type: String
    id: bigint
    plate_no: String
    sim_no: bigint
    status: String
    vehicle_id: bigint
}

# order by min() on columns of table "adas_attachment"
input adas_attachment_min_order_by {
    alarm_no: order_by
    attachment_id: order_by
    channel_id: order_by
    create_date: order_by
    file_length: order_by
    file_name: order_by
    file_path: order_by
    file_type: order_by
    id: order_by
    plate_no: order_by
    sim_no: order_by
    status: order_by
    vehicle_id: order_by
}

# response of any mutation on the table "adas_attachment"
type adas_attachment_mutation_response {
    # number of affected rows by the mutation
    affected_rows: Int!
    # data of the affected rows by the mutation
    returning: [adas_attachment!]!
}

# input type for inserting object relation for remote table "adas_attachment"
input adas_attachment_obj_rel_insert_input {
    data: adas_attachment_insert_input!
    on_conflict: adas_attachment_on_conflict
}

# on conflict condition type for table "adas_attachment"
input adas_attachment_on_conflict {
    constraint: adas_attachment_constraint!
    update_columns: [adas_attachment_update_column!]!
    where: adas_attachment_bool_exp
}

# ordering options when selecting data from "adas_attachment"
input adas_attachment_order_by {
    alarm_no: order_by
    attachment_id: order_by
    channel_id: order_by
    create_date: order_by
    file_length: order_by
    file_name: order_by
    file_path: order_by
    file_type: order_by
    id: order_by
    plate_no: order_by
    sim_no: order_by
    status: order_by
    vehicle_id: order_by
}

# primary key columns input for table: "adas_attachment"
input adas_attachment_pk_columns_input {
    id: bigint!
}

# select columns of table "adas_attachment"
enum adas_attachment_select_column {
    # column name
    alarm_no
    # column name
    attachment_id
    # column name
    channel_id
    # column name
    create_date
    # column name
    file_length
    # column name
    file_name
    # column name
    file_path
    # column name
    file_type
    # column name
    id
    # column name
    plate_no
    # column name
    sim_no
    # column name
    status
    # column name
    vehicle_id
}

# input type for updating data in table "adas_attachment"
input adas_attachment_set_input {
    alarm_no: String
    attachment_id: String
    channel_id: bigint
    create_date: timestamptz
    file_length: bigint
    file_name: String
    file_path: String
    file_type: String
    id: bigint
    plate_no: String
    sim_no: bigint
    status: String
    vehicle_id: bigint
}

# aggregate stddev on columns
type adas_attachment_stddev_fields {
    channel_id: Float
    file_length: Float
    id: Float
    sim_no: Float
    vehicle_id: Float
}

# order by stddev() on columns of table "adas_attachment"
input adas_attachment_stddev_order_by {
    channel_id: order_by
    file_length: order_by
    id: order_by
    sim_no: order_by
    vehicle_id: order_by
}

# aggregate stddev_pop on columns
type adas_attachment_stddev_pop_fields {
    channel_id: Float
    file_length: Float
    id: Float
    sim_no: Float
    vehicle_id: Float
}

# order by stddev_pop() on columns of table "adas_attachment"
input adas_attachment_stddev_pop_order_by {
    channel_id: order_by
    file_length: order_by
    id: order_by
    sim_no: order_by
    vehicle_id: order_by
}

# aggregate stddev_samp on columns
type adas_attachment_stddev_samp_fields {
    channel_id: Float
    file_length: Float
    id: Float
    sim_no: Float
    vehicle_id: Float
}

# order by stddev_samp() on columns of table "adas_attachment"
input adas_attachment_stddev_samp_order_by {
    channel_id: order_by
    file_length: order_by
    id: order_by
    sim_no: order_by
    vehicle_id: order_by
}

# aggregate sum on columns
type adas_attachment_sum_fields {
    channel_id: bigint
    file_length: bigint
    id: bigint
    sim_no: bigint
    vehicle_id: bigint
}

# order by sum() on columns of table "adas_attachment"
input adas_attachment_sum_order_by {
    channel_id: order_by
    file_length: order_by
    id: order_by
    sim_no: order_by
    vehicle_id: order_by
}

# update columns of table "adas_attachment"
enum adas_attachment_update_column {
    # column name
    alarm_no
    # column name
    attachment_id
    # column name
    channel_id
    # column name
    create_date
    # column name
    file_length
    # column name
    file_name
    # column name
    file_path
    # column name
    file_type
    # column name
    id
    # column name
    plate_no
    # column name
    sim_no
    # column name
    status
    # column name
    vehicle_id
}

# aggregate var_pop on columns
type adas_attachment_var_pop_fields {
    channel_id: Float
    file_length: Float
    id: Float
    sim_no: Float
    vehicle_id: Float
}

# order by var_pop() on columns of table "adas_attachment"
input adas_attachment_var_pop_order_by {
    channel_id: order_by
    file_length: order_by
    id: order_by
    sim_no: order_by
    vehicle_id: order_by
}

# aggregate var_samp on columns
type adas_attachment_var_samp_fields {
    channel_id: Float
    file_length: Float
    id: Float
    sim_no: Float
    vehicle_id: Float
}

# order by var_samp() on columns of table "adas_attachment"
input adas_attachment_var_samp_order_by {
    channel_id: order_by
    file_length: order_by
    id: order_by
    sim_no: order_by
    vehicle_id: order_by
}

# aggregate variance on columns
type adas_attachment_variance_fields {
    channel_id: Float
    file_length: Float
    id: Float
    sim_no: Float
    vehicle_id: Float
}

# order by variance() on columns of table "adas_attachment"
input adas_attachment_variance_order_by {
    channel_id: order_by
    file_length: order_by
    id: order_by
    sim_no: order_by
    vehicle_id: order_by
}

# columns and relationships of "adas_data"
type adas_data {
    adas_attachment: String
    alarm_id: bigint
    alarm_no: String
    alarm_source: String
    alarm_time: timestamptz
    alarm_type: String
    altitude: bigint
    created_date: timestamptz
    fatigue_degree: bigint
    front_car_distance: numeric
    id: bigint!
    latitude: numeric
    levels: bigint
    location: String
    longitude: numeric
    plate_no: String
    sim_id: bigint
    speed: bigint
    terminal_id: bigint
    vehicle_id: String
    vehicle_status: String
}

# aggregated selection of "adas_data"
type adas_data_aggregate {
    aggregate: adas_data_aggregate_fields
    nodes: [adas_data!]!
}

# aggregate fields of "adas_data"
type adas_data_aggregate_fields {
    avg: adas_data_avg_fields
    count(columns: [adas_data_select_column!], distinct: Boolean): Int
    max: adas_data_max_fields
    min: adas_data_min_fields
    stddev: adas_data_stddev_fields
    stddev_pop: adas_data_stddev_pop_fields
    stddev_samp: adas_data_stddev_samp_fields
    sum: adas_data_sum_fields
    var_pop: adas_data_var_pop_fields
    var_samp: adas_data_var_samp_fields
    variance: adas_data_variance_fields
}

# order by aggregate values of table "adas_data"
input adas_data_aggregate_order_by {
    avg: adas_data_avg_order_by
    count: order_by
    max: adas_data_max_order_by
    min: adas_data_min_order_by
    stddev: adas_data_stddev_order_by
    stddev_pop: adas_data_stddev_pop_order_by
    stddev_samp: adas_data_stddev_samp_order_by
    sum: adas_data_sum_order_by
    var_pop: adas_data_var_pop_order_by
    var_samp: adas_data_var_samp_order_by
    variance: adas_data_variance_order_by
}

# input type for inserting array relation for remote table "adas_data"
input adas_data_arr_rel_insert_input {
    data: [adas_data_insert_input!]!
    on_conflict: adas_data_on_conflict
}

# aggregate avg on columns
type adas_data_avg_fields {
    alarm_id: Float
    altitude: Float
    fatigue_degree: Float
    front_car_distance: Float
    id: Float
    latitude: Float
    levels: Float
    longitude: Float
    sim_id: Float
    speed: Float
    terminal_id: Float
}

# order by avg() on columns of table "adas_data"
input adas_data_avg_order_by {
    alarm_id: order_by
    altitude: order_by
    fatigue_degree: order_by
    front_car_distance: order_by
    id: order_by
    latitude: order_by
    levels: order_by
    longitude: order_by
    sim_id: order_by
    speed: order_by
    terminal_id: order_by
}

# Boolean expression to filter rows from the table "adas_data". All fields are combined with a logical 'AND'.
input adas_data_bool_exp {
    _and: [adas_data_bool_exp]
    _not: adas_data_bool_exp
    _or: [adas_data_bool_exp]
    adas_attachment: String_comparison_exp
    alarm_id: bigint_comparison_exp
    alarm_no: String_comparison_exp
    alarm_source: String_comparison_exp
    alarm_time: timestamptz_comparison_exp
    alarm_type: String_comparison_exp
    altitude: bigint_comparison_exp
    created_date: timestamptz_comparison_exp
    fatigue_degree: bigint_comparison_exp
    front_car_distance: numeric_comparison_exp
    id: bigint_comparison_exp
    latitude: numeric_comparison_exp
    levels: bigint_comparison_exp
    location: String_comparison_exp
    longitude: numeric_comparison_exp
    plate_no: String_comparison_exp
    sim_id: bigint_comparison_exp
    speed: bigint_comparison_exp
    terminal_id: bigint_comparison_exp
    vehicle_id: String_comparison_exp
    vehicle_status: String_comparison_exp
}

# unique or primary key constraints on table "adas_data"
enum adas_data_constraint {
    # unique or primary key constraint
    adas_data_pkey
}

# input type for incrementing integer column in table "adas_data"
input adas_data_inc_input {
    alarm_id: bigint
    altitude: bigint
    fatigue_degree: bigint
    front_car_distance: numeric
    id: bigint
    latitude: numeric
    levels: bigint
    longitude: numeric
    sim_id: bigint
    speed: bigint
    terminal_id: bigint
}

# input type for inserting data into table "adas_data"
input adas_data_insert_input {
    adas_attachment: String
    alarm_id: bigint
    alarm_no: String
    alarm_source: String
    alarm_time: timestamptz
    alarm_type: String
    altitude: bigint
    created_date: timestamptz
    fatigue_degree: bigint
    front_car_distance: numeric
    id: bigint
    latitude: numeric
    levels: bigint
    location: String
    longitude: numeric
    plate_no: String
    sim_id: bigint
    speed: bigint
    terminal_id: bigint
    vehicle_id: String
    vehicle_status: String
}

# aggregate max on columns
type adas_data_max_fields {
    adas_attachment: String
    alarm_id: bigint
    alarm_no: String
    alarm_source: String
    alarm_time: timestamptz
    alarm_type: String
    altitude: bigint
    created_date: timestamptz
    fatigue_degree: bigint
    front_car_distance: numeric
    id: bigint
    latitude: numeric
    levels: bigint
    location: String
    longitude: numeric
    plate_no: String
    sim_id: bigint
    speed: bigint
    terminal_id: bigint
    vehicle_id: String
    vehicle_status: String
}

# order by max() on columns of table "adas_data"
input adas_data_max_order_by {
    adas_attachment: order_by
    alarm_id: order_by
    alarm_no: order_by
    alarm_source: order_by
    alarm_time: order_by
    alarm_type: order_by
    altitude: order_by
    created_date: order_by
    fatigue_degree: order_by
    front_car_distance: order_by
    id: order_by
    latitude: order_by
    levels: order_by
    location: order_by
    longitude: order_by
    plate_no: order_by
    sim_id: order_by
    speed: order_by
    terminal_id: order_by
    vehicle_id: order_by
    vehicle_status: order_by
}

# aggregate min on columns
type adas_data_min_fields {
    adas_attachment: String
    alarm_id: bigint
    alarm_no: String
    alarm_source: String
    alarm_time: timestamptz
    alarm_type: String
    altitude: bigint
    created_date: timestamptz
    fatigue_degree: bigint
    front_car_distance: numeric
    id: bigint
    latitude: numeric
    levels: bigint
    location: String
    longitude: numeric
    plate_no: String
    sim_id: bigint
    speed: bigint
    terminal_id: bigint
    vehicle_id: String
    vehicle_status: String
}

# order by min() on columns of table "adas_data"
input adas_data_min_order_by {
    adas_attachment: order_by
    alarm_id: order_by
    alarm_no: order_by
    alarm_source: order_by
    alarm_time: order_by
    alarm_type: order_by
    altitude: order_by
    created_date: order_by
    fatigue_degree: order_by
    front_car_distance: order_by
    id: order_by
    latitude: order_by
    levels: order_by
    location: order_by
    longitude: order_by
    plate_no: order_by
    sim_id: order_by
    speed: order_by
    terminal_id: order_by
    vehicle_id: order_by
    vehicle_status: order_by
}

# response of any mutation on the table "adas_data"
type adas_data_mutation_response {
    # number of affected rows by the mutation
    affected_rows: Int!
    # data of the affected rows by the mutation
    returning: [adas_data!]!
}

# input type for inserting object relation for remote table "adas_data"
input adas_data_obj_rel_insert_input {
    data: adas_data_insert_input!
    on_conflict: adas_data_on_conflict
}

# on conflict condition type for table "adas_data"
input adas_data_on_conflict {
    constraint: adas_data_constraint!
    update_columns: [adas_data_update_column!]!
    where: adas_data_bool_exp
}

# ordering options when selecting data from "adas_data"
input adas_data_order_by {
    adas_attachment: order_by
    alarm_id: order_by
    alarm_no: order_by
    alarm_source: order_by
    alarm_time: order_by
    alarm_type: order_by
    altitude: order_by
    created_date: order_by
    fatigue_degree: order_by
    front_car_distance: order_by
    id: order_by
    latitude: order_by
    levels: order_by
    location: order_by
    longitude: order_by
    plate_no: order_by
    sim_id: order_by
    speed: order_by
    terminal_id: order_by
    vehicle_id: order_by
    vehicle_status: order_by
}

# primary key columns input for table: "adas_data"
input adas_data_pk_columns_input {
    id: bigint!
}

# select columns of table "adas_data"
enum adas_data_select_column {
    # column name
    adas_attachment
    # column name
    alarm_id
    # column name
    alarm_no
    # column name
    alarm_source
    # column name
    alarm_time
    # column name
    alarm_type
    # column name
    altitude
    # column name
    created_date
    # column name
    fatigue_degree
    # column name
    front_car_distance
    # column name
    id
    # column name
    latitude
    # column name
    levels
    # column name
    location
    # column name
    longitude
    # column name
    plate_no
    # column name
    sim_id
    # column name
    speed
    # column name
    terminal_id
    # column name
    vehicle_id
    # column name
    vehicle_status
}

# input type for updating data in table "adas_data"
input adas_data_set_input {
    adas_attachment: String
    alarm_id: bigint
    alarm_no: String
    alarm_source: String
    alarm_time: timestamptz
    alarm_type: String
    altitude: bigint
    created_date: timestamptz
    fatigue_degree: bigint
    front_car_distance: numeric
    id: bigint
    latitude: numeric
    levels: bigint
    location: String
    longitude: numeric
    plate_no: String
    sim_id: bigint
    speed: bigint
    terminal_id: bigint
    vehicle_id: String
    vehicle_status: String
}

# aggregate stddev on columns
type adas_data_stddev_fields {
    alarm_id: Float
    altitude: Float
    fatigue_degree: Float
    front_car_distance: Float
    id: Float
    latitude: Float
    levels: Float
    longitude: Float
    sim_id: Float
    speed: Float
    terminal_id: Float
}

# order by stddev() on columns of table "adas_data"
input adas_data_stddev_order_by {
    alarm_id: order_by
    altitude: order_by
    fatigue_degree: order_by
    front_car_distance: order_by
    id: order_by
    latitude: order_by
    levels: order_by
    longitude: order_by
    sim_id: order_by
    speed: order_by
    terminal_id: order_by
}

# aggregate stddev_pop on columns
type adas_data_stddev_pop_fields {
    alarm_id: Float
    altitude: Float
    fatigue_degree: Float
    front_car_distance: Float
    id: Float
    latitude: Float
    levels: Float
    longitude: Float
    sim_id: Float
    speed: Float
    terminal_id: Float
}

# order by stddev_pop() on columns of table "adas_data"
input adas_data_stddev_pop_order_by {
    alarm_id: order_by
    altitude: order_by
    fatigue_degree: order_by
    front_car_distance: order_by
    id: order_by
    latitude: order_by
    levels: order_by
    longitude: order_by
    sim_id: order_by
    speed: order_by
    terminal_id: order_by
}

# aggregate stddev_samp on columns
type adas_data_stddev_samp_fields {
    alarm_id: Float
    altitude: Float
    fatigue_degree: Float
    front_car_distance: Float
    id: Float
    latitude: Float
    levels: Float
    longitude: Float
    sim_id: Float
    speed: Float
    terminal_id: Float
}

# order by stddev_samp() on columns of table "adas_data"
input adas_data_stddev_samp_order_by {
    alarm_id: order_by
    altitude: order_by
    fatigue_degree: order_by
    front_car_distance: order_by
    id: order_by
    latitude: order_by
    levels: order_by
    longitude: order_by
    sim_id: order_by
    speed: order_by
    terminal_id: order_by
}

# aggregate sum on columns
type adas_data_sum_fields {
    alarm_id: bigint
    altitude: bigint
    fatigue_degree: bigint
    front_car_distance: numeric
    id: bigint
    latitude: numeric
    levels: bigint
    longitude: numeric
    sim_id: bigint
    speed: bigint
    terminal_id: bigint
}

# order by sum() on columns of table "adas_data"
input adas_data_sum_order_by {
    alarm_id: order_by
    altitude: order_by
    fatigue_degree: order_by
    front_car_distance: order_by
    id: order_by
    latitude: order_by
    levels: order_by
    longitude: order_by
    sim_id: order_by
    speed: order_by
    terminal_id: order_by
}

# update columns of table "adas_data"
enum adas_data_update_column {
    # column name
    adas_attachment
    # column name
    alarm_id
    # column name
    alarm_no
    # column name
    alarm_source
    # column name
    alarm_time
    # column name
    alarm_type
    # column name
    altitude
    # column name
    created_date
    # column name
    fatigue_degree
    # column name
    front_car_distance
    # column name
    id
    # column name
    latitude
    # column name
    levels
    # column name
    location
    # column name
    longitude
    # column name
    plate_no
    # column name
    sim_id
    # column name
    speed
    # column name
    terminal_id
    # column name
    vehicle_id
    # column name
    vehicle_status
}

# aggregate var_pop on columns
type adas_data_var_pop_fields {
    alarm_id: Float
    altitude: Float
    fatigue_degree: Float
    front_car_distance: Float
    id: Float
    latitude: Float
    levels: Float
    longitude: Float
    sim_id: Float
    speed: Float
    terminal_id: Float
}

# order by var_pop() on columns of table "adas_data"
input adas_data_var_pop_order_by {
    alarm_id: order_by
    altitude: order_by
    fatigue_degree: order_by
    front_car_distance: order_by
    id: order_by
    latitude: order_by
    levels: order_by
    longitude: order_by
    sim_id: order_by
    speed: order_by
    terminal_id: order_by
}

# aggregate var_samp on columns
type adas_data_var_samp_fields {
    alarm_id: Float
    altitude: Float
    fatigue_degree: Float
    front_car_distance: Float
    id: Float
    latitude: Float
    levels: Float
    longitude: Float
    sim_id: Float
    speed: Float
    terminal_id: Float
}

# order by var_samp() on columns of table "adas_data"
input adas_data_var_samp_order_by {
    alarm_id: order_by
    altitude: order_by
    fatigue_degree: order_by
    front_car_distance: order_by
    id: order_by
    latitude: order_by
    levels: order_by
    longitude: order_by
    sim_id: order_by
    speed: order_by
    terminal_id: order_by
}

# aggregate variance on columns
type adas_data_variance_fields {
    alarm_id: Float
    altitude: Float
    fatigue_degree: Float
    front_car_distance: Float
    id: Float
    latitude: Float
    levels: Float
    longitude: Float
    sim_id: Float
    speed: Float
    terminal_id: Float
}

# order by variance() on columns of table "adas_data"
input adas_data_variance_order_by {
    alarm_id: order_by
    altitude: order_by
    fatigue_degree: order_by
    front_car_distance: order_by
    id: order_by
    latitude: order_by
    levels: order_by
    longitude: order_by
    sim_id: order_by
    speed: order_by
    terminal_id: order_by
}
`, BuiltIn: false},
	{Name: "graph/graphqls/comparison.graphqls", Input: `scalar timestamptz
scalar numeric
scalar bigint
scalar _jsonb

# An object with globally unique ID
interface Node {
    # A globally unique identifier
    id: ID!
}

type PageInfo {
    endCursor: String!
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String!
}


"""
expression to compare columns of type _jsonb. All fields are combined with logical 'AND'.
"""
input _jsonb_comparison_exp {
    _eq: _jsonb
    _gt: _jsonb
    _gte: _jsonb
    _in: [_jsonb!]
    _is_null: Boolean
    _lt: _jsonb
    _lte: _jsonb
    _neq: _jsonb
    _nin: [_jsonb!]
}

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
    _eq: bigint
    _gt: bigint
    _gte: bigint
    _in: [bigint!]
    _is_null: Boolean
    _lt: bigint
    _lte: bigint
    _neq: bigint
    _nin: [bigint!]
}


"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
    _eq: Boolean
    _gt: Boolean
    _gte: Boolean
    _in: [Boolean!]
    _is_null: Boolean
    _lt: Boolean
    _lte: Boolean
    _neq: Boolean
    _nin: [Boolean!]
}


"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}


# expression to compare columns of type numeric. All fields are combined with logical 'AND'.
input numeric_comparison_exp {
    _eq: numeric
    _gt: numeric
    _gte: numeric
    _in: [numeric!]
    _is_null: Boolean
    _lt: numeric
    _lte: numeric
    _neq: numeric
    _nin: [numeric!]
}



"""column ordering options"""
enum order_by {
    """in the ascending order, nulls last"""
    asc

    """in the ascending order, nulls first"""
    asc_nulls_first

    """in the ascending order, nulls last"""
    asc_nulls_last

    """in the descending order, nulls first"""
    desc

    """in the descending order, nulls first"""
    desc_nulls_first

    """in the descending order, nulls last"""
    desc_nulls_last
}


"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    _ilike: String
    _in: [String!]
    _is_null: Boolean
    _like: String
    _lt: String
    _lte: String
    _neq: String
    _nilike: String
    _nin: [String!]
    _nlike: String
    _nsimilar: String
    _similar: String
}


"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _is_null: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}
`, BuiltIn: false},
	{Name: "graph/graphqls/query.graphqls", Input: `schema {
    query: Query
}
type Query {
    # fetch data from the table: "adas_attachment"
    adas_attachment(
        # distinct select on columns
        distinct_on: [adas_attachment_select_column!]
        # limit the number of rows returned
        limit: Int
        # skip the first n rows. Use only with order_by
        offset: Int
        # sort the rows by one or more columns
        order_by: [adas_attachment_order_by!]
        # filter the rows returned
        where: adas_attachment_bool_exp
    ): [adas_attachment!]!
    # fetch aggregated fields from the table: "adas_attachment"
    adas_attachment_aggregate(
        # distinct select on columns
        distinct_on: [adas_attachment_select_column!]
        # limit the number of rows returned
        limit: Int
        # skip the first n rows. Use only with order_by
        offset: Int
        # sort the rows by one or more columns
        order_by: [adas_attachment_order_by!]
        # filter the rows returned
        where: adas_attachment_bool_exp
    ): adas_attachment_aggregate!
    # fetch data from the table: "adas_attachment" using primary key columns
    adas_attachment_by_pk(id: bigint!): adas_attachment
    # fetch data from the table: "adas_data"
    adas_data(
        # distinct select on columns
        distinct_on: [adas_data_select_column!]
        # limit the number of rows returned
        limit: Int
        # skip the first n rows. Use only with order_by
        offset: Int
        # sort the rows by one or more columns
        order_by: [adas_data_order_by!]
        # filter the rows returned
        where: adas_data_bool_exp
    ): [adas_data!]!
    # fetch aggregated fields from the table: "adas_data"
    adas_data_aggregate(
        # distinct select on columns
        distinct_on: [adas_data_select_column!]
        # limit the number of rows returned
        limit: Int
        # skip the first n rows. Use only with order_by
        offset: Int
        # sort the rows by one or more columns
        order_by: [adas_data_order_by!]
        # filter the rows returned
        where: adas_data_bool_exp
    ): adas_data_aggregate!
    # fetch data from the table: "adas_data" using primary key columns
    adas_data_by_pk(id: bigint!): adas_data
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_adas_attachment_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AdasAttachmentSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOadas_attachment_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.AdasAttachmentOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOadas_attachment_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.AdasAttachmentBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOadas_attachment_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_adas_attachment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AdasAttachmentSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOadas_attachment_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.AdasAttachmentOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOadas_attachment_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.AdasAttachmentBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOadas_attachment_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_adas_attachment_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_adas_data_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AdasDataSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOadas_data_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.AdasDataOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOadas_data_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.AdasDataBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOadas_data_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_adas_data_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AdasDataSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOadas_data_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.AdasDataOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOadas_data_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.AdasDataBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOadas_data_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_adas_data_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field_adas_attachment_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AdasAttachmentSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOadas_attachment_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_adas_data_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AdasDataSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOadas_data_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *model.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *model.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *model.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *model.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_adas_attachment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_adas_attachment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdasAttachment(rctx, args["distinct_on"].([]model.AdasAttachmentSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AdasAttachmentOrderBy), args["where"].(*model.AdasAttachmentBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AdasAttachment)
	fc.Result = res
	return ec.marshalNadas_attachment2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_adas_attachment_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_adas_attachment_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdasAttachmentAggregate(rctx, args["distinct_on"].([]model.AdasAttachmentSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AdasAttachmentOrderBy), args["where"].(*model.AdasAttachmentBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AdasAttachmentAggregate)
	fc.Result = res
	return ec.marshalNadas_attachment_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_adas_attachment_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_adas_attachment_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdasAttachmentByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdasAttachment)
	fc.Result = res
	return ec.marshalOadas_attachment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachment(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_adas_data(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_adas_data_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdasData(rctx, args["distinct_on"].([]model.AdasDataSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AdasDataOrderBy), args["where"].(*model.AdasDataBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AdasData)
	fc.Result = res
	return ec.marshalNadas_data2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_adas_data_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_adas_data_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdasDataAggregate(rctx, args["distinct_on"].([]model.AdasDataSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AdasDataOrderBy), args["where"].(*model.AdasDataBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AdasDataAggregate)
	fc.Result = res
	return ec.marshalNadas_data_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_adas_data_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_adas_data_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdasDataByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdasData)
	fc.Result = res
	return ec.marshalOadas_data2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasData(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_alarm_no(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_attachment_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AttachmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_channel_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_create_date(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_file_length(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_file_name(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_file_path(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilePath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_file_type(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_plate_no(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlateNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_sim_no(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_status(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdasAttachmentAggregateFields)
	fc.Result = res
	return ec.marshalOadas_attachment_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AdasAttachment)
	fc.Result = res
	return ec.marshalNadas_attachment2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdasAttachmentAvgFields)
	fc.Result = res
	return ec.marshalOadas_attachment_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_adas_attachment_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdasAttachmentMaxFields)
	fc.Result = res
	return ec.marshalOadas_attachment_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdasAttachmentMinFields)
	fc.Result = res
	return ec.marshalOadas_attachment_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdasAttachmentStddevFields)
	fc.Result = res
	return ec.marshalOadas_attachment_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdasAttachmentStddevPopFields)
	fc.Result = res
	return ec.marshalOadas_attachment_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdasAttachmentStddevSampFields)
	fc.Result = res
	return ec.marshalOadas_attachment_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdasAttachmentSumFields)
	fc.Result = res
	return ec.marshalOadas_attachment_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdasAttachmentVarPopFields)
	fc.Result = res
	return ec.marshalOadas_attachment_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdasAttachmentVarSampFields)
	fc.Result = res
	return ec.marshalOadas_attachment_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdasAttachmentVarianceFields)
	fc.Result = res
	return ec.marshalOadas_attachment_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_avg_fields_channel_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_avg_fields_file_length(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_avg_fields_sim_no(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_avg_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_max_fields_alarm_no(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_max_fields_attachment_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AttachmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_max_fields_channel_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_max_fields_create_date(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_max_fields_file_length(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_max_fields_file_name(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_max_fields_file_path(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilePath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_max_fields_file_type(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_max_fields_plate_no(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlateNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_max_fields_sim_no(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_max_fields_status(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_max_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_min_fields_alarm_no(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_min_fields_attachment_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AttachmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_min_fields_channel_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_min_fields_create_date(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_min_fields_file_length(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_min_fields_file_name(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_min_fields_file_path(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilePath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_min_fields_file_type(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_min_fields_plate_no(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlateNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_min_fields_sim_no(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_min_fields_status(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_min_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AdasAttachment)
	fc.Result = res
	return ec.marshalNadas_attachment2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_stddev_fields_channel_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_stddev_fields_file_length(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_stddev_fields_sim_no(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_stddev_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_stddev_pop_fields_channel_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_stddev_pop_fields_file_length(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_stddev_pop_fields_sim_no(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_stddev_pop_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_stddev_samp_fields_channel_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_stddev_samp_fields_file_length(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_stddev_samp_fields_sim_no(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_stddev_samp_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_sum_fields_channel_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_sum_fields_file_length(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_sum_fields_sim_no(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_sum_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_var_pop_fields_channel_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_var_pop_fields_file_length(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_var_pop_fields_sim_no(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_var_pop_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_var_samp_fields_channel_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_var_samp_fields_file_length(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_var_samp_fields_sim_no(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_var_samp_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_variance_fields_channel_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_variance_fields_file_length(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_variance_fields_sim_no(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_attachment_variance_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasAttachmentVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_attachment_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_adas_attachment(ctx context.Context, field graphql.CollectedField, obj *model.AdasData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdasAttachment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_alarm_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_alarm_no(ctx context.Context, field graphql.CollectedField, obj *model.AdasData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_alarm_source(ctx context.Context, field graphql.CollectedField, obj *model.AdasData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model.AdasData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.AdasData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_altitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Altitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_created_date(ctx context.Context, field graphql.CollectedField, obj *model.AdasData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_fatigue_degree(ctx context.Context, field graphql.CollectedField, obj *model.AdasData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FatigueDegree, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_front_car_distance(ctx context.Context, field graphql.CollectedField, obj *model.AdasData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FrontCarDistance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_latitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_levels(ctx context.Context, field graphql.CollectedField, obj *model.AdasData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Levels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_location(ctx context.Context, field graphql.CollectedField, obj *model.AdasData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_longitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Longitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_plate_no(ctx context.Context, field graphql.CollectedField, obj *model.AdasData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlateNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_sim_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_speed(ctx context.Context, field graphql.CollectedField, obj *model.AdasData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Speed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_terminal_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerminalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_vehicle_status(ctx context.Context, field graphql.CollectedField, obj *model.AdasData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdasDataAggregateFields)
	fc.Result = res
	return ec.marshalOadas_data_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AdasData)
	fc.Result = res
	return ec.marshalNadas_data2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdasDataAvgFields)
	fc.Result = res
	return ec.marshalOadas_data_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_adas_data_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdasDataMaxFields)
	fc.Result = res
	return ec.marshalOadas_data_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdasDataMinFields)
	fc.Result = res
	return ec.marshalOadas_data_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdasDataStddevFields)
	fc.Result = res
	return ec.marshalOadas_data_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdasDataStddevPopFields)
	fc.Result = res
	return ec.marshalOadas_data_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdasDataStddevSampFields)
	fc.Result = res
	return ec.marshalOadas_data_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdasDataSumFields)
	fc.Result = res
	return ec.marshalOadas_data_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdasDataVarPopFields)
	fc.Result = res
	return ec.marshalOadas_data_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdasDataVarSampFields)
	fc.Result = res
	return ec.marshalOadas_data_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdasDataVarianceFields)
	fc.Result = res
	return ec.marshalOadas_data_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_avg_fields_alarm_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_avg_fields_altitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Altitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_avg_fields_fatigue_degree(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FatigueDegree, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_avg_fields_front_car_distance(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FrontCarDistance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_avg_fields_latitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_avg_fields_levels(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Levels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_avg_fields_longitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Longitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_avg_fields_sim_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_avg_fields_speed(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Speed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_avg_fields_terminal_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerminalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_max_fields_adas_attachment(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdasAttachment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_max_fields_alarm_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_max_fields_alarm_no(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_max_fields_alarm_source(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_max_fields_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_max_fields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_max_fields_altitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Altitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_max_fields_created_date(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_max_fields_fatigue_degree(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FatigueDegree, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_max_fields_front_car_distance(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FrontCarDistance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_max_fields_latitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_max_fields_levels(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Levels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_max_fields_location(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_max_fields_longitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Longitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_max_fields_plate_no(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlateNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_max_fields_sim_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_max_fields_speed(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Speed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_max_fields_terminal_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerminalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_max_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_max_fields_vehicle_status(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_min_fields_adas_attachment(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdasAttachment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_min_fields_alarm_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_min_fields_alarm_no(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_min_fields_alarm_source(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_min_fields_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_min_fields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_min_fields_altitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Altitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_min_fields_created_date(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_min_fields_fatigue_degree(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FatigueDegree, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_min_fields_front_car_distance(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FrontCarDistance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_min_fields_latitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_min_fields_levels(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Levels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_min_fields_location(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_min_fields_longitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Longitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_min_fields_plate_no(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlateNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_min_fields_sim_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_min_fields_speed(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Speed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_min_fields_terminal_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerminalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_min_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_min_fields_vehicle_status(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AdasData)
	fc.Result = res
	return ec.marshalNadas_data2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_fields_alarm_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_fields_altitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Altitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_fields_fatigue_degree(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FatigueDegree, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_fields_front_car_distance(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FrontCarDistance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_fields_latitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_fields_levels(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Levels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_fields_longitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Longitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_fields_sim_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_fields_speed(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Speed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_fields_terminal_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerminalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_pop_fields_alarm_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_pop_fields_altitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Altitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_pop_fields_fatigue_degree(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FatigueDegree, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_pop_fields_front_car_distance(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FrontCarDistance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_pop_fields_latitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_pop_fields_levels(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Levels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_pop_fields_longitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Longitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_pop_fields_sim_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_pop_fields_speed(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Speed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_pop_fields_terminal_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerminalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_samp_fields_alarm_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_samp_fields_altitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Altitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_samp_fields_fatigue_degree(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FatigueDegree, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_samp_fields_front_car_distance(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FrontCarDistance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_samp_fields_latitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_samp_fields_levels(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Levels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_samp_fields_longitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Longitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_samp_fields_sim_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_samp_fields_speed(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Speed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_stddev_samp_fields_terminal_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerminalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_sum_fields_alarm_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_sum_fields_altitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Altitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_sum_fields_fatigue_degree(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FatigueDegree, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_sum_fields_front_car_distance(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FrontCarDistance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_sum_fields_latitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_sum_fields_levels(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Levels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_sum_fields_longitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Longitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_sum_fields_sim_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_sum_fields_speed(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Speed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_sum_fields_terminal_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerminalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_var_pop_fields_alarm_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_var_pop_fields_altitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Altitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_var_pop_fields_fatigue_degree(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FatigueDegree, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_var_pop_fields_front_car_distance(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FrontCarDistance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_var_pop_fields_latitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_var_pop_fields_levels(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Levels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_var_pop_fields_longitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Longitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_var_pop_fields_sim_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_var_pop_fields_speed(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Speed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_var_pop_fields_terminal_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerminalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_var_samp_fields_alarm_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_var_samp_fields_altitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Altitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_var_samp_fields_fatigue_degree(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FatigueDegree, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_var_samp_fields_front_car_distance(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FrontCarDistance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_var_samp_fields_latitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_var_samp_fields_levels(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Levels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_var_samp_fields_longitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Longitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_var_samp_fields_sim_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_var_samp_fields_speed(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Speed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_var_samp_fields_terminal_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerminalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_variance_fields_alarm_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_variance_fields_altitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Altitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_variance_fields_fatigue_degree(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FatigueDegree, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_variance_fields_front_car_distance(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FrontCarDistance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_variance_fields_latitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_variance_fields_levels(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Levels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_variance_fields_longitude(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Longitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_variance_fields_sim_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_variance_fields_speed(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Speed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _adas_data_variance_fields_terminal_id(ctx context.Context, field graphql.CollectedField, obj *model.AdasDataVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "adas_data_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerminalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBoolean_comparison_exp(ctx context.Context, obj interface{}) (model1.BooleanComparisonExp, error) {
	var it model1.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInt_comparison_exp(ctx context.Context, obj interface{}) (model1.IntComparisonExp, error) {
	var it model1.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputString_comparison_exp(ctx context.Context, obj interface{}) (model1.StringComparisonExp, error) {
	var it model1.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInput_jsonb_comparison_exp(ctx context.Context, obj interface{}) (model1.JsonbComparisonExp, error) {
	var it model1.JsonbComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalO_jsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalO_jsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_attachment_aggregate_order_by(ctx context.Context, obj interface{}) (model.AdasAttachmentAggregateOrderBy, error) {
	var it model.AdasAttachmentAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOadas_attachment_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOadas_attachment_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOadas_attachment_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOadas_attachment_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOadas_attachment_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOadas_attachment_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOadas_attachment_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOadas_attachment_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOadas_attachment_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOadas_attachment_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_attachment_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.AdasAttachmentArrRelInsertInput, error) {
	var it model.AdasAttachmentArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNadas_attachment_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOadas_attachment_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_attachment_avg_order_by(ctx context.Context, obj interface{}) (model.AdasAttachmentAvgOrderBy, error) {
	var it model.AdasAttachmentAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "channel_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channel_id"))
			it.ChannelID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_length"))
			it.FileLength, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_no"))
			it.SimNo, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_attachment_bool_exp(ctx context.Context, obj interface{}) (model.AdasAttachmentBoolExp, error) {
	var it model.AdasAttachmentBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOadas_attachment_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOadas_attachment_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOadas_attachment_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_no"))
			it.AlarmNo, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "attachment_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attachment_id"))
			it.AttachmentID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "channel_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channel_id"))
			it.ChannelID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_date"))
			it.CreateDate, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_length"))
			it.FileLength, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_name"))
			it.FileName, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_path":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_path"))
			it.FilePath, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_type"))
			it.FileType, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "plate_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plate_no"))
			it.PlateNo, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_no"))
			it.SimNo, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_attachment_inc_input(ctx context.Context, obj interface{}) (model.AdasAttachmentIncInput, error) {
	var it model.AdasAttachmentIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "channel_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channel_id"))
			it.ChannelID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_length"))
			it.FileLength, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_no"))
			it.SimNo, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_attachment_insert_input(ctx context.Context, obj interface{}) (model.AdasAttachmentInsertInput, error) {
	var it model.AdasAttachmentInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_no"))
			it.AlarmNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "attachment_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attachment_id"))
			it.AttachmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "channel_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channel_id"))
			it.ChannelID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_date"))
			it.CreateDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_length"))
			it.FileLength, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_name"))
			it.FileName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_path":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_path"))
			it.FilePath, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_type"))
			it.FileType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "plate_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plate_no"))
			it.PlateNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_no"))
			it.SimNo, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_attachment_max_order_by(ctx context.Context, obj interface{}) (model.AdasAttachmentMaxOrderBy, error) {
	var it model.AdasAttachmentMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_no"))
			it.AlarmNo, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "attachment_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attachment_id"))
			it.AttachmentID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "channel_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channel_id"))
			it.ChannelID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_date"))
			it.CreateDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_length"))
			it.FileLength, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_name"))
			it.FileName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_path":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_path"))
			it.FilePath, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_type"))
			it.FileType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "plate_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plate_no"))
			it.PlateNo, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_no"))
			it.SimNo, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_attachment_min_order_by(ctx context.Context, obj interface{}) (model.AdasAttachmentMinOrderBy, error) {
	var it model.AdasAttachmentMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_no"))
			it.AlarmNo, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "attachment_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attachment_id"))
			it.AttachmentID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "channel_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channel_id"))
			it.ChannelID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_date"))
			it.CreateDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_length"))
			it.FileLength, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_name"))
			it.FileName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_path":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_path"))
			it.FilePath, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_type"))
			it.FileType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "plate_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plate_no"))
			it.PlateNo, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_no"))
			it.SimNo, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_attachment_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.AdasAttachmentObjRelInsertInput, error) {
	var it model.AdasAttachmentObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNadas_attachment_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOadas_attachment_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_attachment_on_conflict(ctx context.Context, obj interface{}) (model.AdasAttachmentOnConflict, error) {
	var it model.AdasAttachmentOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNadas_attachment_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNadas_attachment_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOadas_attachment_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_attachment_order_by(ctx context.Context, obj interface{}) (model.AdasAttachmentOrderBy, error) {
	var it model.AdasAttachmentOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_no"))
			it.AlarmNo, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "attachment_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attachment_id"))
			it.AttachmentID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "channel_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channel_id"))
			it.ChannelID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_date"))
			it.CreateDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_length"))
			it.FileLength, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_name"))
			it.FileName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_path":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_path"))
			it.FilePath, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_type"))
			it.FileType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "plate_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plate_no"))
			it.PlateNo, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_no"))
			it.SimNo, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_attachment_pk_columns_input(ctx context.Context, obj interface{}) (model.AdasAttachmentPkColumnsInput, error) {
	var it model.AdasAttachmentPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_attachment_set_input(ctx context.Context, obj interface{}) (model.AdasAttachmentSetInput, error) {
	var it model.AdasAttachmentSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_no"))
			it.AlarmNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "attachment_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attachment_id"))
			it.AttachmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "channel_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channel_id"))
			it.ChannelID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_date"))
			it.CreateDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_length"))
			it.FileLength, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_name"))
			it.FileName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_path":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_path"))
			it.FilePath, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_type"))
			it.FileType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "plate_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plate_no"))
			it.PlateNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_no"))
			it.SimNo, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_attachment_stddev_order_by(ctx context.Context, obj interface{}) (model.AdasAttachmentStddevOrderBy, error) {
	var it model.AdasAttachmentStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "channel_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channel_id"))
			it.ChannelID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_length"))
			it.FileLength, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_no"))
			it.SimNo, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_attachment_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.AdasAttachmentStddevPopOrderBy, error) {
	var it model.AdasAttachmentStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "channel_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channel_id"))
			it.ChannelID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_length"))
			it.FileLength, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_no"))
			it.SimNo, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_attachment_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.AdasAttachmentStddevSampOrderBy, error) {
	var it model.AdasAttachmentStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "channel_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channel_id"))
			it.ChannelID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_length"))
			it.FileLength, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_no"))
			it.SimNo, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_attachment_sum_order_by(ctx context.Context, obj interface{}) (model.AdasAttachmentSumOrderBy, error) {
	var it model.AdasAttachmentSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "channel_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channel_id"))
			it.ChannelID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_length"))
			it.FileLength, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_no"))
			it.SimNo, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_attachment_var_pop_order_by(ctx context.Context, obj interface{}) (model.AdasAttachmentVarPopOrderBy, error) {
	var it model.AdasAttachmentVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "channel_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channel_id"))
			it.ChannelID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_length"))
			it.FileLength, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_no"))
			it.SimNo, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_attachment_var_samp_order_by(ctx context.Context, obj interface{}) (model.AdasAttachmentVarSampOrderBy, error) {
	var it model.AdasAttachmentVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "channel_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channel_id"))
			it.ChannelID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_length"))
			it.FileLength, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_no"))
			it.SimNo, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_attachment_variance_order_by(ctx context.Context, obj interface{}) (model.AdasAttachmentVarianceOrderBy, error) {
	var it model.AdasAttachmentVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "channel_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channel_id"))
			it.ChannelID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_length"))
			it.FileLength, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_no"))
			it.SimNo, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_data_aggregate_order_by(ctx context.Context, obj interface{}) (model.AdasDataAggregateOrderBy, error) {
	var it model.AdasDataAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOadas_data_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOadas_data_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOadas_data_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOadas_data_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOadas_data_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOadas_data_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOadas_data_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOadas_data_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOadas_data_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOadas_data_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_data_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.AdasDataArrRelInsertInput, error) {
	var it model.AdasDataArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNadas_data_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOadas_data_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_data_avg_order_by(ctx context.Context, obj interface{}) (model.AdasDataAvgOrderBy, error) {
	var it model.AdasDataAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
			it.AlarmID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "altitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("altitude"))
			it.Altitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fatigue_degree":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fatigue_degree"))
			it.FatigueDegree, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "front_car_distance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("front_car_distance"))
			it.FrontCarDistance, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude"))
			it.Latitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "levels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levels"))
			it.Levels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "longitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitude"))
			it.Longitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_id"))
			it.SimID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed"))
			it.Speed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_data_bool_exp(ctx context.Context, obj interface{}) (model.AdasDataBoolExp, error) {
	var it model.AdasDataBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOadas_data_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOadas_data_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOadas_data_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "adas_attachment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adas_attachment"))
			it.AdasAttachment, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
			it.AlarmID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_no"))
			it.AlarmNo, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_source"))
			it.AlarmSource, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_time"))
			it.AlarmTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "altitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("altitude"))
			it.Altitude, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_date"))
			it.CreatedDate, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "fatigue_degree":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fatigue_degree"))
			it.FatigueDegree, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "front_car_distance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("front_car_distance"))
			it.FrontCarDistance, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "latitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude"))
			it.Latitude, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "levels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levels"))
			it.Levels, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			it.Location, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "longitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitude"))
			it.Longitude, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "plate_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plate_no"))
			it.PlateNo, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_id"))
			it.SimID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed"))
			it.Speed, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_status"))
			it.VehicleStatus, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_data_inc_input(ctx context.Context, obj interface{}) (model.AdasDataIncInput, error) {
	var it model.AdasDataIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
			it.AlarmID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "altitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("altitude"))
			it.Altitude, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fatigue_degree":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fatigue_degree"))
			it.FatigueDegree, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "front_car_distance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("front_car_distance"))
			it.FrontCarDistance, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "latitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude"))
			it.Latitude, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "levels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levels"))
			it.Levels, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "longitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitude"))
			it.Longitude, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_id"))
			it.SimID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed"))
			it.Speed, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_data_insert_input(ctx context.Context, obj interface{}) (model.AdasDataInsertInput, error) {
	var it model.AdasDataInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "adas_attachment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adas_attachment"))
			it.AdasAttachment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
			it.AlarmID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_no"))
			it.AlarmNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_source"))
			it.AlarmSource, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_time"))
			it.AlarmTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "altitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("altitude"))
			it.Altitude, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_date"))
			it.CreatedDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "fatigue_degree":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fatigue_degree"))
			it.FatigueDegree, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "front_car_distance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("front_car_distance"))
			it.FrontCarDistance, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "latitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude"))
			it.Latitude, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "levels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levels"))
			it.Levels, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			it.Location, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "longitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitude"))
			it.Longitude, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "plate_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plate_no"))
			it.PlateNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_id"))
			it.SimID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed"))
			it.Speed, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_status"))
			it.VehicleStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_data_max_order_by(ctx context.Context, obj interface{}) (model.AdasDataMaxOrderBy, error) {
	var it model.AdasDataMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "adas_attachment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adas_attachment"))
			it.AdasAttachment, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
			it.AlarmID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_no"))
			it.AlarmNo, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_source"))
			it.AlarmSource, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_time"))
			it.AlarmTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "altitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("altitude"))
			it.Altitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_date"))
			it.CreatedDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fatigue_degree":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fatigue_degree"))
			it.FatigueDegree, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "front_car_distance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("front_car_distance"))
			it.FrontCarDistance, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude"))
			it.Latitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "levels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levels"))
			it.Levels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			it.Location, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "longitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitude"))
			it.Longitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "plate_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plate_no"))
			it.PlateNo, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_id"))
			it.SimID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed"))
			it.Speed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_status"))
			it.VehicleStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_data_min_order_by(ctx context.Context, obj interface{}) (model.AdasDataMinOrderBy, error) {
	var it model.AdasDataMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "adas_attachment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adas_attachment"))
			it.AdasAttachment, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
			it.AlarmID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_no"))
			it.AlarmNo, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_source"))
			it.AlarmSource, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_time"))
			it.AlarmTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "altitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("altitude"))
			it.Altitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_date"))
			it.CreatedDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fatigue_degree":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fatigue_degree"))
			it.FatigueDegree, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "front_car_distance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("front_car_distance"))
			it.FrontCarDistance, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude"))
			it.Latitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "levels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levels"))
			it.Levels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			it.Location, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "longitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitude"))
			it.Longitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "plate_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plate_no"))
			it.PlateNo, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_id"))
			it.SimID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed"))
			it.Speed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_status"))
			it.VehicleStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_data_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.AdasDataObjRelInsertInput, error) {
	var it model.AdasDataObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNadas_data_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOadas_data_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_data_on_conflict(ctx context.Context, obj interface{}) (model.AdasDataOnConflict, error) {
	var it model.AdasDataOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNadas_data_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNadas_data_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOadas_data_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_data_order_by(ctx context.Context, obj interface{}) (model.AdasDataOrderBy, error) {
	var it model.AdasDataOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "adas_attachment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adas_attachment"))
			it.AdasAttachment, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
			it.AlarmID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_no"))
			it.AlarmNo, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_source"))
			it.AlarmSource, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_time"))
			it.AlarmTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "altitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("altitude"))
			it.Altitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_date"))
			it.CreatedDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fatigue_degree":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fatigue_degree"))
			it.FatigueDegree, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "front_car_distance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("front_car_distance"))
			it.FrontCarDistance, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude"))
			it.Latitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "levels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levels"))
			it.Levels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			it.Location, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "longitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitude"))
			it.Longitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "plate_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plate_no"))
			it.PlateNo, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_id"))
			it.SimID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed"))
			it.Speed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_status"))
			it.VehicleStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_data_pk_columns_input(ctx context.Context, obj interface{}) (model.AdasDataPkColumnsInput, error) {
	var it model.AdasDataPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_data_set_input(ctx context.Context, obj interface{}) (model.AdasDataSetInput, error) {
	var it model.AdasDataSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "adas_attachment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adas_attachment"))
			it.AdasAttachment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
			it.AlarmID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_no"))
			it.AlarmNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_source"))
			it.AlarmSource, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_time"))
			it.AlarmTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "altitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("altitude"))
			it.Altitude, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_date"))
			it.CreatedDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "fatigue_degree":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fatigue_degree"))
			it.FatigueDegree, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "front_car_distance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("front_car_distance"))
			it.FrontCarDistance, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "latitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude"))
			it.Latitude, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "levels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levels"))
			it.Levels, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			it.Location, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "longitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitude"))
			it.Longitude, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "plate_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plate_no"))
			it.PlateNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_id"))
			it.SimID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed"))
			it.Speed, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_status"))
			it.VehicleStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_data_stddev_order_by(ctx context.Context, obj interface{}) (model.AdasDataStddevOrderBy, error) {
	var it model.AdasDataStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
			it.AlarmID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "altitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("altitude"))
			it.Altitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fatigue_degree":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fatigue_degree"))
			it.FatigueDegree, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "front_car_distance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("front_car_distance"))
			it.FrontCarDistance, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude"))
			it.Latitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "levels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levels"))
			it.Levels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "longitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitude"))
			it.Longitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_id"))
			it.SimID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed"))
			it.Speed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_data_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.AdasDataStddevPopOrderBy, error) {
	var it model.AdasDataStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
			it.AlarmID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "altitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("altitude"))
			it.Altitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fatigue_degree":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fatigue_degree"))
			it.FatigueDegree, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "front_car_distance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("front_car_distance"))
			it.FrontCarDistance, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude"))
			it.Latitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "levels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levels"))
			it.Levels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "longitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitude"))
			it.Longitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_id"))
			it.SimID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed"))
			it.Speed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_data_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.AdasDataStddevSampOrderBy, error) {
	var it model.AdasDataStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
			it.AlarmID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "altitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("altitude"))
			it.Altitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fatigue_degree":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fatigue_degree"))
			it.FatigueDegree, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "front_car_distance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("front_car_distance"))
			it.FrontCarDistance, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude"))
			it.Latitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "levels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levels"))
			it.Levels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "longitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitude"))
			it.Longitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_id"))
			it.SimID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed"))
			it.Speed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_data_sum_order_by(ctx context.Context, obj interface{}) (model.AdasDataSumOrderBy, error) {
	var it model.AdasDataSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
			it.AlarmID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "altitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("altitude"))
			it.Altitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fatigue_degree":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fatigue_degree"))
			it.FatigueDegree, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "front_car_distance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("front_car_distance"))
			it.FrontCarDistance, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude"))
			it.Latitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "levels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levels"))
			it.Levels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "longitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitude"))
			it.Longitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_id"))
			it.SimID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed"))
			it.Speed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_data_var_pop_order_by(ctx context.Context, obj interface{}) (model.AdasDataVarPopOrderBy, error) {
	var it model.AdasDataVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
			it.AlarmID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "altitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("altitude"))
			it.Altitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fatigue_degree":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fatigue_degree"))
			it.FatigueDegree, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "front_car_distance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("front_car_distance"))
			it.FrontCarDistance, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude"))
			it.Latitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "levels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levels"))
			it.Levels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "longitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitude"))
			it.Longitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_id"))
			it.SimID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed"))
			it.Speed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_data_var_samp_order_by(ctx context.Context, obj interface{}) (model.AdasDataVarSampOrderBy, error) {
	var it model.AdasDataVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
			it.AlarmID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "altitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("altitude"))
			it.Altitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fatigue_degree":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fatigue_degree"))
			it.FatigueDegree, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "front_car_distance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("front_car_distance"))
			it.FrontCarDistance, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude"))
			it.Latitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "levels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levels"))
			it.Levels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "longitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitude"))
			it.Longitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_id"))
			it.SimID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed"))
			it.Speed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadas_data_variance_order_by(ctx context.Context, obj interface{}) (model.AdasDataVarianceOrderBy, error) {
	var it model.AdasDataVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
			it.AlarmID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "altitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("altitude"))
			it.Altitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fatigue_degree":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fatigue_degree"))
			it.FatigueDegree, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "front_car_distance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("front_car_distance"))
			it.FrontCarDistance, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude"))
			it.Latitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "levels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levels"))
			it.Levels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "longitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitude"))
			it.Longitude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_id"))
			it.SimID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed"))
			it.Speed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputbigint_comparison_exp(ctx context.Context, obj interface{}) (model1.BigintComparisonExp, error) {
	var it model1.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnumeric_comparison_exp(ctx context.Context, obj interface{}) (model.NumericComparisonExp, error) {
	var it model.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOnumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOnumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtimestamptz_comparison_exp(ctx context.Context, obj interface{}) (model1.TimestamptzComparisonExp, error) {
	var it model1.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj model.Node) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *model.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "endCursor":
			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasPreviousPage":
			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startCursor":
			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "adas_attachment":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_adas_attachment(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "adas_attachment_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_adas_attachment_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "adas_attachment_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_adas_attachment_by_pk(ctx, field)
				return res
			})
		case "adas_data":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_adas_data(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "adas_data_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_adas_data_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "adas_data_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_adas_data_by_pk(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adas_attachmentImplementors = []string{"adas_attachment"}

func (ec *executionContext) _adas_attachment(ctx context.Context, sel ast.SelectionSet, obj *model.AdasAttachment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adas_attachmentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("adas_attachment")
		case "alarm_no":
			out.Values[i] = ec._adas_attachment_alarm_no(ctx, field, obj)
		case "attachment_id":
			out.Values[i] = ec._adas_attachment_attachment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "channel_id":
			out.Values[i] = ec._adas_attachment_channel_id(ctx, field, obj)
		case "create_date":
			out.Values[i] = ec._adas_attachment_create_date(ctx, field, obj)
		case "file_length":
			out.Values[i] = ec._adas_attachment_file_length(ctx, field, obj)
		case "file_name":
			out.Values[i] = ec._adas_attachment_file_name(ctx, field, obj)
		case "file_path":
			out.Values[i] = ec._adas_attachment_file_path(ctx, field, obj)
		case "file_type":
			out.Values[i] = ec._adas_attachment_file_type(ctx, field, obj)
		case "id":
			out.Values[i] = ec._adas_attachment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "plate_no":
			out.Values[i] = ec._adas_attachment_plate_no(ctx, field, obj)
		case "sim_no":
			out.Values[i] = ec._adas_attachment_sim_no(ctx, field, obj)
		case "status":
			out.Values[i] = ec._adas_attachment_status(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._adas_attachment_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adas_attachment_aggregateImplementors = []string{"adas_attachment_aggregate"}

func (ec *executionContext) _adas_attachment_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.AdasAttachmentAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adas_attachment_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("adas_attachment_aggregate")
		case "aggregate":
			out.Values[i] = ec._adas_attachment_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._adas_attachment_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adas_attachment_aggregate_fieldsImplementors = []string{"adas_attachment_aggregate_fields"}

func (ec *executionContext) _adas_attachment_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AdasAttachmentAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adas_attachment_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("adas_attachment_aggregate_fields")
		case "avg":
			out.Values[i] = ec._adas_attachment_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._adas_attachment_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._adas_attachment_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._adas_attachment_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._adas_attachment_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._adas_attachment_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._adas_attachment_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._adas_attachment_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._adas_attachment_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._adas_attachment_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._adas_attachment_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adas_attachment_avg_fieldsImplementors = []string{"adas_attachment_avg_fields"}

func (ec *executionContext) _adas_attachment_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AdasAttachmentAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adas_attachment_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("adas_attachment_avg_fields")
		case "channel_id":
			out.Values[i] = ec._adas_attachment_avg_fields_channel_id(ctx, field, obj)
		case "file_length":
			out.Values[i] = ec._adas_attachment_avg_fields_file_length(ctx, field, obj)
		case "id":
			out.Values[i] = ec._adas_attachment_avg_fields_id(ctx, field, obj)
		case "sim_no":
			out.Values[i] = ec._adas_attachment_avg_fields_sim_no(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._adas_attachment_avg_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adas_attachment_max_fieldsImplementors = []string{"adas_attachment_max_fields"}

func (ec *executionContext) _adas_attachment_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AdasAttachmentMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adas_attachment_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("adas_attachment_max_fields")
		case "alarm_no":
			out.Values[i] = ec._adas_attachment_max_fields_alarm_no(ctx, field, obj)
		case "attachment_id":
			out.Values[i] = ec._adas_attachment_max_fields_attachment_id(ctx, field, obj)
		case "channel_id":
			out.Values[i] = ec._adas_attachment_max_fields_channel_id(ctx, field, obj)
		case "create_date":
			out.Values[i] = ec._adas_attachment_max_fields_create_date(ctx, field, obj)
		case "file_length":
			out.Values[i] = ec._adas_attachment_max_fields_file_length(ctx, field, obj)
		case "file_name":
			out.Values[i] = ec._adas_attachment_max_fields_file_name(ctx, field, obj)
		case "file_path":
			out.Values[i] = ec._adas_attachment_max_fields_file_path(ctx, field, obj)
		case "file_type":
			out.Values[i] = ec._adas_attachment_max_fields_file_type(ctx, field, obj)
		case "id":
			out.Values[i] = ec._adas_attachment_max_fields_id(ctx, field, obj)
		case "plate_no":
			out.Values[i] = ec._adas_attachment_max_fields_plate_no(ctx, field, obj)
		case "sim_no":
			out.Values[i] = ec._adas_attachment_max_fields_sim_no(ctx, field, obj)
		case "status":
			out.Values[i] = ec._adas_attachment_max_fields_status(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._adas_attachment_max_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adas_attachment_min_fieldsImplementors = []string{"adas_attachment_min_fields"}

func (ec *executionContext) _adas_attachment_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AdasAttachmentMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adas_attachment_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("adas_attachment_min_fields")
		case "alarm_no":
			out.Values[i] = ec._adas_attachment_min_fields_alarm_no(ctx, field, obj)
		case "attachment_id":
			out.Values[i] = ec._adas_attachment_min_fields_attachment_id(ctx, field, obj)
		case "channel_id":
			out.Values[i] = ec._adas_attachment_min_fields_channel_id(ctx, field, obj)
		case "create_date":
			out.Values[i] = ec._adas_attachment_min_fields_create_date(ctx, field, obj)
		case "file_length":
			out.Values[i] = ec._adas_attachment_min_fields_file_length(ctx, field, obj)
		case "file_name":
			out.Values[i] = ec._adas_attachment_min_fields_file_name(ctx, field, obj)
		case "file_path":
			out.Values[i] = ec._adas_attachment_min_fields_file_path(ctx, field, obj)
		case "file_type":
			out.Values[i] = ec._adas_attachment_min_fields_file_type(ctx, field, obj)
		case "id":
			out.Values[i] = ec._adas_attachment_min_fields_id(ctx, field, obj)
		case "plate_no":
			out.Values[i] = ec._adas_attachment_min_fields_plate_no(ctx, field, obj)
		case "sim_no":
			out.Values[i] = ec._adas_attachment_min_fields_sim_no(ctx, field, obj)
		case "status":
			out.Values[i] = ec._adas_attachment_min_fields_status(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._adas_attachment_min_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adas_attachment_mutation_responseImplementors = []string{"adas_attachment_mutation_response"}

func (ec *executionContext) _adas_attachment_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.AdasAttachmentMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adas_attachment_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("adas_attachment_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._adas_attachment_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._adas_attachment_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adas_attachment_stddev_fieldsImplementors = []string{"adas_attachment_stddev_fields"}

func (ec *executionContext) _adas_attachment_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AdasAttachmentStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adas_attachment_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("adas_attachment_stddev_fields")
		case "channel_id":
			out.Values[i] = ec._adas_attachment_stddev_fields_channel_id(ctx, field, obj)
		case "file_length":
			out.Values[i] = ec._adas_attachment_stddev_fields_file_length(ctx, field, obj)
		case "id":
			out.Values[i] = ec._adas_attachment_stddev_fields_id(ctx, field, obj)
		case "sim_no":
			out.Values[i] = ec._adas_attachment_stddev_fields_sim_no(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._adas_attachment_stddev_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adas_attachment_stddev_pop_fieldsImplementors = []string{"adas_attachment_stddev_pop_fields"}

func (ec *executionContext) _adas_attachment_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AdasAttachmentStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adas_attachment_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("adas_attachment_stddev_pop_fields")
		case "channel_id":
			out.Values[i] = ec._adas_attachment_stddev_pop_fields_channel_id(ctx, field, obj)
		case "file_length":
			out.Values[i] = ec._adas_attachment_stddev_pop_fields_file_length(ctx, field, obj)
		case "id":
			out.Values[i] = ec._adas_attachment_stddev_pop_fields_id(ctx, field, obj)
		case "sim_no":
			out.Values[i] = ec._adas_attachment_stddev_pop_fields_sim_no(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._adas_attachment_stddev_pop_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adas_attachment_stddev_samp_fieldsImplementors = []string{"adas_attachment_stddev_samp_fields"}

func (ec *executionContext) _adas_attachment_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AdasAttachmentStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adas_attachment_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("adas_attachment_stddev_samp_fields")
		case "channel_id":
			out.Values[i] = ec._adas_attachment_stddev_samp_fields_channel_id(ctx, field, obj)
		case "file_length":
			out.Values[i] = ec._adas_attachment_stddev_samp_fields_file_length(ctx, field, obj)
		case "id":
			out.Values[i] = ec._adas_attachment_stddev_samp_fields_id(ctx, field, obj)
		case "sim_no":
			out.Values[i] = ec._adas_attachment_stddev_samp_fields_sim_no(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._adas_attachment_stddev_samp_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adas_attachment_sum_fieldsImplementors = []string{"adas_attachment_sum_fields"}

func (ec *executionContext) _adas_attachment_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AdasAttachmentSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adas_attachment_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("adas_attachment_sum_fields")
		case "channel_id":
			out.Values[i] = ec._adas_attachment_sum_fields_channel_id(ctx, field, obj)
		case "file_length":
			out.Values[i] = ec._adas_attachment_sum_fields_file_length(ctx, field, obj)
		case "id":
			out.Values[i] = ec._adas_attachment_sum_fields_id(ctx, field, obj)
		case "sim_no":
			out.Values[i] = ec._adas_attachment_sum_fields_sim_no(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._adas_attachment_sum_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adas_attachment_var_pop_fieldsImplementors = []string{"adas_attachment_var_pop_fields"}

func (ec *executionContext) _adas_attachment_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AdasAttachmentVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adas_attachment_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("adas_attachment_var_pop_fields")
		case "channel_id":
			out.Values[i] = ec._adas_attachment_var_pop_fields_channel_id(ctx, field, obj)
		case "file_length":
			out.Values[i] = ec._adas_attachment_var_pop_fields_file_length(ctx, field, obj)
		case "id":
			out.Values[i] = ec._adas_attachment_var_pop_fields_id(ctx, field, obj)
		case "sim_no":
			out.Values[i] = ec._adas_attachment_var_pop_fields_sim_no(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._adas_attachment_var_pop_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adas_attachment_var_samp_fieldsImplementors = []string{"adas_attachment_var_samp_fields"}

func (ec *executionContext) _adas_attachment_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AdasAttachmentVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adas_attachment_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("adas_attachment_var_samp_fields")
		case "channel_id":
			out.Values[i] = ec._adas_attachment_var_samp_fields_channel_id(ctx, field, obj)
		case "file_length":
			out.Values[i] = ec._adas_attachment_var_samp_fields_file_length(ctx, field, obj)
		case "id":
			out.Values[i] = ec._adas_attachment_var_samp_fields_id(ctx, field, obj)
		case "sim_no":
			out.Values[i] = ec._adas_attachment_var_samp_fields_sim_no(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._adas_attachment_var_samp_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adas_attachment_variance_fieldsImplementors = []string{"adas_attachment_variance_fields"}

func (ec *executionContext) _adas_attachment_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AdasAttachmentVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adas_attachment_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("adas_attachment_variance_fields")
		case "channel_id":
			out.Values[i] = ec._adas_attachment_variance_fields_channel_id(ctx, field, obj)
		case "file_length":
			out.Values[i] = ec._adas_attachment_variance_fields_file_length(ctx, field, obj)
		case "id":
			out.Values[i] = ec._adas_attachment_variance_fields_id(ctx, field, obj)
		case "sim_no":
			out.Values[i] = ec._adas_attachment_variance_fields_sim_no(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._adas_attachment_variance_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adas_dataImplementors = []string{"adas_data"}

func (ec *executionContext) _adas_data(ctx context.Context, sel ast.SelectionSet, obj *model.AdasData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adas_dataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("adas_data")
		case "adas_attachment":
			out.Values[i] = ec._adas_data_adas_attachment(ctx, field, obj)
		case "alarm_id":
			out.Values[i] = ec._adas_data_alarm_id(ctx, field, obj)
		case "alarm_no":
			out.Values[i] = ec._adas_data_alarm_no(ctx, field, obj)
		case "alarm_source":
			out.Values[i] = ec._adas_data_alarm_source(ctx, field, obj)
		case "alarm_time":
			out.Values[i] = ec._adas_data_alarm_time(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._adas_data_alarm_type(ctx, field, obj)
		case "altitude":
			out.Values[i] = ec._adas_data_altitude(ctx, field, obj)
		case "created_date":
			out.Values[i] = ec._adas_data_created_date(ctx, field, obj)
		case "fatigue_degree":
			out.Values[i] = ec._adas_data_fatigue_degree(ctx, field, obj)
		case "front_car_distance":
			out.Values[i] = ec._adas_data_front_car_distance(ctx, field, obj)
		case "id":
			out.Values[i] = ec._adas_data_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "latitude":
			out.Values[i] = ec._adas_data_latitude(ctx, field, obj)
		case "levels":
			out.Values[i] = ec._adas_data_levels(ctx, field, obj)
		case "location":
			out.Values[i] = ec._adas_data_location(ctx, field, obj)
		case "longitude":
			out.Values[i] = ec._adas_data_longitude(ctx, field, obj)
		case "plate_no":
			out.Values[i] = ec._adas_data_plate_no(ctx, field, obj)
		case "sim_id":
			out.Values[i] = ec._adas_data_sim_id(ctx, field, obj)
		case "speed":
			out.Values[i] = ec._adas_data_speed(ctx, field, obj)
		case "terminal_id":
			out.Values[i] = ec._adas_data_terminal_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._adas_data_vehicle_id(ctx, field, obj)
		case "vehicle_status":
			out.Values[i] = ec._adas_data_vehicle_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adas_data_aggregateImplementors = []string{"adas_data_aggregate"}

func (ec *executionContext) _adas_data_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.AdasDataAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adas_data_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("adas_data_aggregate")
		case "aggregate":
			out.Values[i] = ec._adas_data_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._adas_data_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adas_data_aggregate_fieldsImplementors = []string{"adas_data_aggregate_fields"}

func (ec *executionContext) _adas_data_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AdasDataAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adas_data_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("adas_data_aggregate_fields")
		case "avg":
			out.Values[i] = ec._adas_data_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._adas_data_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._adas_data_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._adas_data_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._adas_data_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._adas_data_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._adas_data_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._adas_data_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._adas_data_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._adas_data_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._adas_data_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adas_data_avg_fieldsImplementors = []string{"adas_data_avg_fields"}

func (ec *executionContext) _adas_data_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AdasDataAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adas_data_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("adas_data_avg_fields")
		case "alarm_id":
			out.Values[i] = ec._adas_data_avg_fields_alarm_id(ctx, field, obj)
		case "altitude":
			out.Values[i] = ec._adas_data_avg_fields_altitude(ctx, field, obj)
		case "fatigue_degree":
			out.Values[i] = ec._adas_data_avg_fields_fatigue_degree(ctx, field, obj)
		case "front_car_distance":
			out.Values[i] = ec._adas_data_avg_fields_front_car_distance(ctx, field, obj)
		case "id":
			out.Values[i] = ec._adas_data_avg_fields_id(ctx, field, obj)
		case "latitude":
			out.Values[i] = ec._adas_data_avg_fields_latitude(ctx, field, obj)
		case "levels":
			out.Values[i] = ec._adas_data_avg_fields_levels(ctx, field, obj)
		case "longitude":
			out.Values[i] = ec._adas_data_avg_fields_longitude(ctx, field, obj)
		case "sim_id":
			out.Values[i] = ec._adas_data_avg_fields_sim_id(ctx, field, obj)
		case "speed":
			out.Values[i] = ec._adas_data_avg_fields_speed(ctx, field, obj)
		case "terminal_id":
			out.Values[i] = ec._adas_data_avg_fields_terminal_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adas_data_max_fieldsImplementors = []string{"adas_data_max_fields"}

func (ec *executionContext) _adas_data_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AdasDataMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adas_data_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("adas_data_max_fields")
		case "adas_attachment":
			out.Values[i] = ec._adas_data_max_fields_adas_attachment(ctx, field, obj)
		case "alarm_id":
			out.Values[i] = ec._adas_data_max_fields_alarm_id(ctx, field, obj)
		case "alarm_no":
			out.Values[i] = ec._adas_data_max_fields_alarm_no(ctx, field, obj)
		case "alarm_source":
			out.Values[i] = ec._adas_data_max_fields_alarm_source(ctx, field, obj)
		case "alarm_time":
			out.Values[i] = ec._adas_data_max_fields_alarm_time(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._adas_data_max_fields_alarm_type(ctx, field, obj)
		case "altitude":
			out.Values[i] = ec._adas_data_max_fields_altitude(ctx, field, obj)
		case "created_date":
			out.Values[i] = ec._adas_data_max_fields_created_date(ctx, field, obj)
		case "fatigue_degree":
			out.Values[i] = ec._adas_data_max_fields_fatigue_degree(ctx, field, obj)
		case "front_car_distance":
			out.Values[i] = ec._adas_data_max_fields_front_car_distance(ctx, field, obj)
		case "id":
			out.Values[i] = ec._adas_data_max_fields_id(ctx, field, obj)
		case "latitude":
			out.Values[i] = ec._adas_data_max_fields_latitude(ctx, field, obj)
		case "levels":
			out.Values[i] = ec._adas_data_max_fields_levels(ctx, field, obj)
		case "location":
			out.Values[i] = ec._adas_data_max_fields_location(ctx, field, obj)
		case "longitude":
			out.Values[i] = ec._adas_data_max_fields_longitude(ctx, field, obj)
		case "plate_no":
			out.Values[i] = ec._adas_data_max_fields_plate_no(ctx, field, obj)
		case "sim_id":
			out.Values[i] = ec._adas_data_max_fields_sim_id(ctx, field, obj)
		case "speed":
			out.Values[i] = ec._adas_data_max_fields_speed(ctx, field, obj)
		case "terminal_id":
			out.Values[i] = ec._adas_data_max_fields_terminal_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._adas_data_max_fields_vehicle_id(ctx, field, obj)
		case "vehicle_status":
			out.Values[i] = ec._adas_data_max_fields_vehicle_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adas_data_min_fieldsImplementors = []string{"adas_data_min_fields"}

func (ec *executionContext) _adas_data_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AdasDataMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adas_data_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("adas_data_min_fields")
		case "adas_attachment":
			out.Values[i] = ec._adas_data_min_fields_adas_attachment(ctx, field, obj)
		case "alarm_id":
			out.Values[i] = ec._adas_data_min_fields_alarm_id(ctx, field, obj)
		case "alarm_no":
			out.Values[i] = ec._adas_data_min_fields_alarm_no(ctx, field, obj)
		case "alarm_source":
			out.Values[i] = ec._adas_data_min_fields_alarm_source(ctx, field, obj)
		case "alarm_time":
			out.Values[i] = ec._adas_data_min_fields_alarm_time(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._adas_data_min_fields_alarm_type(ctx, field, obj)
		case "altitude":
			out.Values[i] = ec._adas_data_min_fields_altitude(ctx, field, obj)
		case "created_date":
			out.Values[i] = ec._adas_data_min_fields_created_date(ctx, field, obj)
		case "fatigue_degree":
			out.Values[i] = ec._adas_data_min_fields_fatigue_degree(ctx, field, obj)
		case "front_car_distance":
			out.Values[i] = ec._adas_data_min_fields_front_car_distance(ctx, field, obj)
		case "id":
			out.Values[i] = ec._adas_data_min_fields_id(ctx, field, obj)
		case "latitude":
			out.Values[i] = ec._adas_data_min_fields_latitude(ctx, field, obj)
		case "levels":
			out.Values[i] = ec._adas_data_min_fields_levels(ctx, field, obj)
		case "location":
			out.Values[i] = ec._adas_data_min_fields_location(ctx, field, obj)
		case "longitude":
			out.Values[i] = ec._adas_data_min_fields_longitude(ctx, field, obj)
		case "plate_no":
			out.Values[i] = ec._adas_data_min_fields_plate_no(ctx, field, obj)
		case "sim_id":
			out.Values[i] = ec._adas_data_min_fields_sim_id(ctx, field, obj)
		case "speed":
			out.Values[i] = ec._adas_data_min_fields_speed(ctx, field, obj)
		case "terminal_id":
			out.Values[i] = ec._adas_data_min_fields_terminal_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._adas_data_min_fields_vehicle_id(ctx, field, obj)
		case "vehicle_status":
			out.Values[i] = ec._adas_data_min_fields_vehicle_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adas_data_mutation_responseImplementors = []string{"adas_data_mutation_response"}

func (ec *executionContext) _adas_data_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.AdasDataMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adas_data_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("adas_data_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._adas_data_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._adas_data_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adas_data_stddev_fieldsImplementors = []string{"adas_data_stddev_fields"}

func (ec *executionContext) _adas_data_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AdasDataStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adas_data_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("adas_data_stddev_fields")
		case "alarm_id":
			out.Values[i] = ec._adas_data_stddev_fields_alarm_id(ctx, field, obj)
		case "altitude":
			out.Values[i] = ec._adas_data_stddev_fields_altitude(ctx, field, obj)
		case "fatigue_degree":
			out.Values[i] = ec._adas_data_stddev_fields_fatigue_degree(ctx, field, obj)
		case "front_car_distance":
			out.Values[i] = ec._adas_data_stddev_fields_front_car_distance(ctx, field, obj)
		case "id":
			out.Values[i] = ec._adas_data_stddev_fields_id(ctx, field, obj)
		case "latitude":
			out.Values[i] = ec._adas_data_stddev_fields_latitude(ctx, field, obj)
		case "levels":
			out.Values[i] = ec._adas_data_stddev_fields_levels(ctx, field, obj)
		case "longitude":
			out.Values[i] = ec._adas_data_stddev_fields_longitude(ctx, field, obj)
		case "sim_id":
			out.Values[i] = ec._adas_data_stddev_fields_sim_id(ctx, field, obj)
		case "speed":
			out.Values[i] = ec._adas_data_stddev_fields_speed(ctx, field, obj)
		case "terminal_id":
			out.Values[i] = ec._adas_data_stddev_fields_terminal_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adas_data_stddev_pop_fieldsImplementors = []string{"adas_data_stddev_pop_fields"}

func (ec *executionContext) _adas_data_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AdasDataStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adas_data_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("adas_data_stddev_pop_fields")
		case "alarm_id":
			out.Values[i] = ec._adas_data_stddev_pop_fields_alarm_id(ctx, field, obj)
		case "altitude":
			out.Values[i] = ec._adas_data_stddev_pop_fields_altitude(ctx, field, obj)
		case "fatigue_degree":
			out.Values[i] = ec._adas_data_stddev_pop_fields_fatigue_degree(ctx, field, obj)
		case "front_car_distance":
			out.Values[i] = ec._adas_data_stddev_pop_fields_front_car_distance(ctx, field, obj)
		case "id":
			out.Values[i] = ec._adas_data_stddev_pop_fields_id(ctx, field, obj)
		case "latitude":
			out.Values[i] = ec._adas_data_stddev_pop_fields_latitude(ctx, field, obj)
		case "levels":
			out.Values[i] = ec._adas_data_stddev_pop_fields_levels(ctx, field, obj)
		case "longitude":
			out.Values[i] = ec._adas_data_stddev_pop_fields_longitude(ctx, field, obj)
		case "sim_id":
			out.Values[i] = ec._adas_data_stddev_pop_fields_sim_id(ctx, field, obj)
		case "speed":
			out.Values[i] = ec._adas_data_stddev_pop_fields_speed(ctx, field, obj)
		case "terminal_id":
			out.Values[i] = ec._adas_data_stddev_pop_fields_terminal_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adas_data_stddev_samp_fieldsImplementors = []string{"adas_data_stddev_samp_fields"}

func (ec *executionContext) _adas_data_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AdasDataStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adas_data_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("adas_data_stddev_samp_fields")
		case "alarm_id":
			out.Values[i] = ec._adas_data_stddev_samp_fields_alarm_id(ctx, field, obj)
		case "altitude":
			out.Values[i] = ec._adas_data_stddev_samp_fields_altitude(ctx, field, obj)
		case "fatigue_degree":
			out.Values[i] = ec._adas_data_stddev_samp_fields_fatigue_degree(ctx, field, obj)
		case "front_car_distance":
			out.Values[i] = ec._adas_data_stddev_samp_fields_front_car_distance(ctx, field, obj)
		case "id":
			out.Values[i] = ec._adas_data_stddev_samp_fields_id(ctx, field, obj)
		case "latitude":
			out.Values[i] = ec._adas_data_stddev_samp_fields_latitude(ctx, field, obj)
		case "levels":
			out.Values[i] = ec._adas_data_stddev_samp_fields_levels(ctx, field, obj)
		case "longitude":
			out.Values[i] = ec._adas_data_stddev_samp_fields_longitude(ctx, field, obj)
		case "sim_id":
			out.Values[i] = ec._adas_data_stddev_samp_fields_sim_id(ctx, field, obj)
		case "speed":
			out.Values[i] = ec._adas_data_stddev_samp_fields_speed(ctx, field, obj)
		case "terminal_id":
			out.Values[i] = ec._adas_data_stddev_samp_fields_terminal_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adas_data_sum_fieldsImplementors = []string{"adas_data_sum_fields"}

func (ec *executionContext) _adas_data_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AdasDataSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adas_data_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("adas_data_sum_fields")
		case "alarm_id":
			out.Values[i] = ec._adas_data_sum_fields_alarm_id(ctx, field, obj)
		case "altitude":
			out.Values[i] = ec._adas_data_sum_fields_altitude(ctx, field, obj)
		case "fatigue_degree":
			out.Values[i] = ec._adas_data_sum_fields_fatigue_degree(ctx, field, obj)
		case "front_car_distance":
			out.Values[i] = ec._adas_data_sum_fields_front_car_distance(ctx, field, obj)
		case "id":
			out.Values[i] = ec._adas_data_sum_fields_id(ctx, field, obj)
		case "latitude":
			out.Values[i] = ec._adas_data_sum_fields_latitude(ctx, field, obj)
		case "levels":
			out.Values[i] = ec._adas_data_sum_fields_levels(ctx, field, obj)
		case "longitude":
			out.Values[i] = ec._adas_data_sum_fields_longitude(ctx, field, obj)
		case "sim_id":
			out.Values[i] = ec._adas_data_sum_fields_sim_id(ctx, field, obj)
		case "speed":
			out.Values[i] = ec._adas_data_sum_fields_speed(ctx, field, obj)
		case "terminal_id":
			out.Values[i] = ec._adas_data_sum_fields_terminal_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adas_data_var_pop_fieldsImplementors = []string{"adas_data_var_pop_fields"}

func (ec *executionContext) _adas_data_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AdasDataVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adas_data_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("adas_data_var_pop_fields")
		case "alarm_id":
			out.Values[i] = ec._adas_data_var_pop_fields_alarm_id(ctx, field, obj)
		case "altitude":
			out.Values[i] = ec._adas_data_var_pop_fields_altitude(ctx, field, obj)
		case "fatigue_degree":
			out.Values[i] = ec._adas_data_var_pop_fields_fatigue_degree(ctx, field, obj)
		case "front_car_distance":
			out.Values[i] = ec._adas_data_var_pop_fields_front_car_distance(ctx, field, obj)
		case "id":
			out.Values[i] = ec._adas_data_var_pop_fields_id(ctx, field, obj)
		case "latitude":
			out.Values[i] = ec._adas_data_var_pop_fields_latitude(ctx, field, obj)
		case "levels":
			out.Values[i] = ec._adas_data_var_pop_fields_levels(ctx, field, obj)
		case "longitude":
			out.Values[i] = ec._adas_data_var_pop_fields_longitude(ctx, field, obj)
		case "sim_id":
			out.Values[i] = ec._adas_data_var_pop_fields_sim_id(ctx, field, obj)
		case "speed":
			out.Values[i] = ec._adas_data_var_pop_fields_speed(ctx, field, obj)
		case "terminal_id":
			out.Values[i] = ec._adas_data_var_pop_fields_terminal_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adas_data_var_samp_fieldsImplementors = []string{"adas_data_var_samp_fields"}

func (ec *executionContext) _adas_data_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AdasDataVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adas_data_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("adas_data_var_samp_fields")
		case "alarm_id":
			out.Values[i] = ec._adas_data_var_samp_fields_alarm_id(ctx, field, obj)
		case "altitude":
			out.Values[i] = ec._adas_data_var_samp_fields_altitude(ctx, field, obj)
		case "fatigue_degree":
			out.Values[i] = ec._adas_data_var_samp_fields_fatigue_degree(ctx, field, obj)
		case "front_car_distance":
			out.Values[i] = ec._adas_data_var_samp_fields_front_car_distance(ctx, field, obj)
		case "id":
			out.Values[i] = ec._adas_data_var_samp_fields_id(ctx, field, obj)
		case "latitude":
			out.Values[i] = ec._adas_data_var_samp_fields_latitude(ctx, field, obj)
		case "levels":
			out.Values[i] = ec._adas_data_var_samp_fields_levels(ctx, field, obj)
		case "longitude":
			out.Values[i] = ec._adas_data_var_samp_fields_longitude(ctx, field, obj)
		case "sim_id":
			out.Values[i] = ec._adas_data_var_samp_fields_sim_id(ctx, field, obj)
		case "speed":
			out.Values[i] = ec._adas_data_var_samp_fields_speed(ctx, field, obj)
		case "terminal_id":
			out.Values[i] = ec._adas_data_var_samp_fields_terminal_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adas_data_variance_fieldsImplementors = []string{"adas_data_variance_fields"}

func (ec *executionContext) _adas_data_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AdasDataVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adas_data_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("adas_data_variance_fields")
		case "alarm_id":
			out.Values[i] = ec._adas_data_variance_fields_alarm_id(ctx, field, obj)
		case "altitude":
			out.Values[i] = ec._adas_data_variance_fields_altitude(ctx, field, obj)
		case "fatigue_degree":
			out.Values[i] = ec._adas_data_variance_fields_fatigue_degree(ctx, field, obj)
		case "front_car_distance":
			out.Values[i] = ec._adas_data_variance_fields_front_car_distance(ctx, field, obj)
		case "id":
			out.Values[i] = ec._adas_data_variance_fields_id(ctx, field, obj)
		case "latitude":
			out.Values[i] = ec._adas_data_variance_fields_latitude(ctx, field, obj)
		case "levels":
			out.Values[i] = ec._adas_data_variance_fields_levels(ctx, field, obj)
		case "longitude":
			out.Values[i] = ec._adas_data_variance_fields_longitude(ctx, field, obj)
		case "sim_id":
			out.Values[i] = ec._adas_data_variance_fields_sim_id(ctx, field, obj)
		case "speed":
			out.Values[i] = ec._adas_data_variance_fields_speed(ctx, field, obj)
		case "terminal_id":
			out.Values[i] = ec._adas_data_variance_fields_terminal_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN_jsonb2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_jsonb2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNadas_attachment2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.AdasAttachment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNadas_attachment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNadas_attachment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachment(ctx context.Context, sel ast.SelectionSet, v *model.AdasAttachment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._adas_attachment(ctx, sel, v)
}

func (ec *executionContext) marshalNadas_attachment_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentAggregate(ctx context.Context, sel ast.SelectionSet, v model.AdasAttachmentAggregate) graphql.Marshaler {
	return ec._adas_attachment_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNadas_attachment_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentAggregate(ctx context.Context, sel ast.SelectionSet, v *model.AdasAttachmentAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._adas_attachment_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNadas_attachment_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentConstraint(ctx context.Context, v interface{}) (model.AdasAttachmentConstraint, error) {
	var res model.AdasAttachmentConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNadas_attachment_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentConstraint(ctx context.Context, sel ast.SelectionSet, v model.AdasAttachmentConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNadas_attachment_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.AdasAttachmentInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AdasAttachmentInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNadas_attachment_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNadas_attachment_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentInsertInput(ctx context.Context, v interface{}) (*model.AdasAttachmentInsertInput, error) {
	res, err := ec.unmarshalInputadas_attachment_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNadas_attachment_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentOrderBy(ctx context.Context, v interface{}) (*model.AdasAttachmentOrderBy, error) {
	res, err := ec.unmarshalInputadas_attachment_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNadas_attachment_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentSelectColumn(ctx context.Context, v interface{}) (model.AdasAttachmentSelectColumn, error) {
	var res model.AdasAttachmentSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNadas_attachment_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.AdasAttachmentSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNadas_attachment_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentUpdateColumn(ctx context.Context, v interface{}) (model.AdasAttachmentUpdateColumn, error) {
	var res model.AdasAttachmentUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNadas_attachment_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.AdasAttachmentUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNadas_attachment_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.AdasAttachmentUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.AdasAttachmentUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNadas_attachment_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNadas_attachment_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AdasAttachmentUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNadas_attachment_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNadas_data2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.AdasData) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNadas_data2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasData(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNadas_data2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasData(ctx context.Context, sel ast.SelectionSet, v *model.AdasData) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._adas_data(ctx, sel, v)
}

func (ec *executionContext) marshalNadas_data_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataAggregate(ctx context.Context, sel ast.SelectionSet, v model.AdasDataAggregate) graphql.Marshaler {
	return ec._adas_data_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNadas_data_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataAggregate(ctx context.Context, sel ast.SelectionSet, v *model.AdasDataAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._adas_data_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNadas_data_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataConstraint(ctx context.Context, v interface{}) (model.AdasDataConstraint, error) {
	var res model.AdasDataConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNadas_data_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataConstraint(ctx context.Context, sel ast.SelectionSet, v model.AdasDataConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNadas_data_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.AdasDataInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AdasDataInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNadas_data_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNadas_data_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataInsertInput(ctx context.Context, v interface{}) (*model.AdasDataInsertInput, error) {
	res, err := ec.unmarshalInputadas_data_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNadas_data_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataOrderBy(ctx context.Context, v interface{}) (*model.AdasDataOrderBy, error) {
	res, err := ec.unmarshalInputadas_data_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNadas_data_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataSelectColumn(ctx context.Context, v interface{}) (model.AdasDataSelectColumn, error) {
	var res model.AdasDataSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNadas_data_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.AdasDataSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNadas_data_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataUpdateColumn(ctx context.Context, v interface{}) (model.AdasDataUpdateColumn, error) {
	var res model.AdasDataUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNadas_data_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.AdasDataUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNadas_data_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.AdasDataUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.AdasDataUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNadas_data_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNadas_data_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AdasDataUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNadas_data_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNbigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNbigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNnumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNnumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model1.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputString_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalO_jsonb2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN_jsonb2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalO_jsonb2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalN_jsonb2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalO_jsonb2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO_jsonb2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalOadas_attachment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachment(ctx context.Context, sel ast.SelectionSet, v *model.AdasAttachment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._adas_attachment(ctx, sel, v)
}

func (ec *executionContext) marshalOadas_attachment_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.AdasAttachmentAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._adas_attachment_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOadas_attachment_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.AdasAttachmentAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._adas_attachment_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOadas_attachment_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentAvgOrderBy(ctx context.Context, v interface{}) (*model.AdasAttachmentAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputadas_attachment_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOadas_attachment_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentBoolExp(ctx context.Context, v interface{}) ([]*model.AdasAttachmentBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AdasAttachmentBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOadas_attachment_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOadas_attachment_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentBoolExp(ctx context.Context, v interface{}) (*model.AdasAttachmentBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputadas_attachment_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOadas_attachment_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.AdasAttachmentMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._adas_attachment_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOadas_attachment_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentMaxOrderBy(ctx context.Context, v interface{}) (*model.AdasAttachmentMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputadas_attachment_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOadas_attachment_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentMinFields(ctx context.Context, sel ast.SelectionSet, v *model.AdasAttachmentMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._adas_attachment_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOadas_attachment_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentMinOrderBy(ctx context.Context, v interface{}) (*model.AdasAttachmentMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputadas_attachment_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOadas_attachment_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentOnConflict(ctx context.Context, v interface{}) (*model.AdasAttachmentOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputadas_attachment_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOadas_attachment_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentOrderByᚄ(ctx context.Context, v interface{}) ([]*model.AdasAttachmentOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AdasAttachmentOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNadas_attachment_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOadas_attachment_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.AdasAttachmentSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.AdasAttachmentSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNadas_attachment_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOadas_attachment_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AdasAttachmentSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNadas_attachment_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOadas_attachment_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.AdasAttachmentStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._adas_attachment_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOadas_attachment_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentStddevOrderBy(ctx context.Context, v interface{}) (*model.AdasAttachmentStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputadas_attachment_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOadas_attachment_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.AdasAttachmentStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._adas_attachment_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOadas_attachment_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentStddevPopOrderBy(ctx context.Context, v interface{}) (*model.AdasAttachmentStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputadas_attachment_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOadas_attachment_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.AdasAttachmentStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._adas_attachment_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOadas_attachment_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentStddevSampOrderBy(ctx context.Context, v interface{}) (*model.AdasAttachmentStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputadas_attachment_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOadas_attachment_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentSumFields(ctx context.Context, sel ast.SelectionSet, v *model.AdasAttachmentSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._adas_attachment_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOadas_attachment_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentSumOrderBy(ctx context.Context, v interface{}) (*model.AdasAttachmentSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputadas_attachment_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOadas_attachment_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.AdasAttachmentVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._adas_attachment_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOadas_attachment_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentVarPopOrderBy(ctx context.Context, v interface{}) (*model.AdasAttachmentVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputadas_attachment_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOadas_attachment_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.AdasAttachmentVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._adas_attachment_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOadas_attachment_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentVarSampOrderBy(ctx context.Context, v interface{}) (*model.AdasAttachmentVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputadas_attachment_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOadas_attachment_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.AdasAttachmentVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._adas_attachment_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOadas_attachment_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasAttachmentVarianceOrderBy(ctx context.Context, v interface{}) (*model.AdasAttachmentVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputadas_attachment_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOadas_data2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasData(ctx context.Context, sel ast.SelectionSet, v *model.AdasData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._adas_data(ctx, sel, v)
}

func (ec *executionContext) marshalOadas_data_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.AdasDataAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._adas_data_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOadas_data_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.AdasDataAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._adas_data_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOadas_data_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataAvgOrderBy(ctx context.Context, v interface{}) (*model.AdasDataAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputadas_data_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOadas_data_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataBoolExp(ctx context.Context, v interface{}) ([]*model.AdasDataBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AdasDataBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOadas_data_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOadas_data_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataBoolExp(ctx context.Context, v interface{}) (*model.AdasDataBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputadas_data_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOadas_data_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.AdasDataMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._adas_data_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOadas_data_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataMaxOrderBy(ctx context.Context, v interface{}) (*model.AdasDataMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputadas_data_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOadas_data_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataMinFields(ctx context.Context, sel ast.SelectionSet, v *model.AdasDataMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._adas_data_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOadas_data_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataMinOrderBy(ctx context.Context, v interface{}) (*model.AdasDataMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputadas_data_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOadas_data_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataOnConflict(ctx context.Context, v interface{}) (*model.AdasDataOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputadas_data_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOadas_data_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataOrderByᚄ(ctx context.Context, v interface{}) ([]*model.AdasDataOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AdasDataOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNadas_data_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOadas_data_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.AdasDataSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.AdasDataSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNadas_data_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOadas_data_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AdasDataSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNadas_data_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOadas_data_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.AdasDataStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._adas_data_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOadas_data_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataStddevOrderBy(ctx context.Context, v interface{}) (*model.AdasDataStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputadas_data_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOadas_data_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.AdasDataStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._adas_data_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOadas_data_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataStddevPopOrderBy(ctx context.Context, v interface{}) (*model.AdasDataStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputadas_data_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOadas_data_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.AdasDataStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._adas_data_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOadas_data_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataStddevSampOrderBy(ctx context.Context, v interface{}) (*model.AdasDataStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputadas_data_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOadas_data_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataSumFields(ctx context.Context, sel ast.SelectionSet, v *model.AdasDataSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._adas_data_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOadas_data_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataSumOrderBy(ctx context.Context, v interface{}) (*model.AdasDataSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputadas_data_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOadas_data_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.AdasDataVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._adas_data_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOadas_data_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataVarPopOrderBy(ctx context.Context, v interface{}) (*model.AdasDataVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputadas_data_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOadas_data_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.AdasDataVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._adas_data_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOadas_data_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataVarSampOrderBy(ctx context.Context, v interface{}) (*model.AdasDataVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputadas_data_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOadas_data_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.AdasDataVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._adas_data_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOadas_data_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐAdasDataVarianceOrderBy(ctx context.Context, v interface{}) (*model.AdasDataVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputadas_data_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalObigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNbigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalObigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNbigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalObigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalObigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model1.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputbigint_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOnumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNnumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOnumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNnumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOnumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOnumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadasᚋqueryᚋgraphᚋmodelᚐNumericComparisonExp(ctx context.Context, v interface{}) (*model.NumericComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputnumeric_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model1.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model1.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model1.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNtimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNtimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model1.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtimestamptz_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
