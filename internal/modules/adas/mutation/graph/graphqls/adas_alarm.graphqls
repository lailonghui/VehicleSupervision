

type adas_attachment implements Node {
    alarm_no: String
    attachment_id: String
    channel_id: bigint
    create_date: timestamptz
    file_length: bigint
    file_name: String
    file_path: String
    file_type: String
    id: ID!
    plate_no: String
    sim_no: bigint
    status: String
    vehicle_id: bigint
}

# aggregated selection of "adas_attachment"
type adas_attachment_aggregate {
    aggregate: adas_attachment_aggregate_fields
    nodes: [adas_attachment!]!
}

# aggregate fields of "adas_attachment"
type adas_attachment_aggregate_fields {
    avg: adas_attachment_avg_fields
    count(columns: [adas_attachment_select_column!], distinct: Boolean): Int
    max: adas_attachment_max_fields
    min: adas_attachment_min_fields
    stddev: adas_attachment_stddev_fields
    stddev_pop: adas_attachment_stddev_pop_fields
    stddev_samp: adas_attachment_stddev_samp_fields
    sum: adas_attachment_sum_fields
    var_pop: adas_attachment_var_pop_fields
    var_samp: adas_attachment_var_samp_fields
    variance: adas_attachment_variance_fields
}

# order by aggregate values of table "adas_attachment"
input adas_attachment_aggregate_order_by {
    avg: adas_attachment_avg_order_by
    count: order_by
    max: adas_attachment_max_order_by
    min: adas_attachment_min_order_by
    stddev: adas_attachment_stddev_order_by
    stddev_pop: adas_attachment_stddev_pop_order_by
    stddev_samp: adas_attachment_stddev_samp_order_by
    sum: adas_attachment_sum_order_by
    var_pop: adas_attachment_var_pop_order_by
    var_samp: adas_attachment_var_samp_order_by
    variance: adas_attachment_variance_order_by
}

# input type for inserting array relation for remote table "adas_attachment"
input adas_attachment_arr_rel_insert_input {
    data: [adas_attachment_insert_input!]!
    on_conflict: adas_attachment_on_conflict
}

# aggregate avg on columns
type adas_attachment_avg_fields {
    channel_id: Float
    file_length: Float
    id: Float
    sim_no: Float
    vehicle_id: Float
}

# order by avg() on columns of table "adas_attachment"
input adas_attachment_avg_order_by {
    channel_id: order_by
    file_length: order_by
    id: order_by
    sim_no: order_by
    vehicle_id: order_by
}

# Boolean expression to filter rows from the table "adas_attachment". All fields are combined with a logical 'AND'.
input adas_attachment_bool_exp {
    _and: [adas_attachment_bool_exp]
    _not: adas_attachment_bool_exp
    _or: [adas_attachment_bool_exp]
    alarm_no: String_comparison_exp
    attachment_id: String_comparison_exp
    channel_id: bigint_comparison_exp
    create_date: timestamptz_comparison_exp
    file_length: bigint_comparison_exp
    file_name: String_comparison_exp
    file_path: String_comparison_exp
    file_type: String_comparison_exp
    id: bigint_comparison_exp
    plate_no: String_comparison_exp
    sim_no: bigint_comparison_exp
    status: String_comparison_exp
    vehicle_id: bigint_comparison_exp
}

# unique or primary key constraints on table "adas_attachment"
enum adas_attachment_constraint {
    # unique or primary key constraint
    adas_attachment_pkey
}

# input type for incrementing integer column in table "adas_attachment"
input adas_attachment_inc_input {
    channel_id: bigint
    file_length: bigint
    id: bigint
    sim_no: bigint
    vehicle_id: bigint
}

# input type for inserting data into table "adas_attachment"
input adas_attachment_insert_input {
    alarm_no: String
    attachment_id: String
    channel_id: bigint
    create_date: timestamptz
    file_length: bigint
    file_name: String
    file_path: String
    file_type: String
    id: bigint
    plate_no: String
    sim_no: bigint
    status: String
    vehicle_id: bigint
}

# aggregate max on columns
type adas_attachment_max_fields {
    alarm_no: String
    attachment_id: String
    channel_id: bigint
    create_date: timestamptz
    file_length: bigint
    file_name: String
    file_path: String
    file_type: String
    id: bigint
    plate_no: String
    sim_no: bigint
    status: String
    vehicle_id: bigint
}

# order by max() on columns of table "adas_attachment"
input adas_attachment_max_order_by {
    alarm_no: order_by
    attachment_id: order_by
    channel_id: order_by
    create_date: order_by
    file_length: order_by
    file_name: order_by
    file_path: order_by
    file_type: order_by
    id: order_by
    plate_no: order_by
    sim_no: order_by
    status: order_by
    vehicle_id: order_by
}

# aggregate min on columns
type adas_attachment_min_fields {
    alarm_no: String
    attachment_id: String
    channel_id: bigint
    create_date: timestamptz
    file_length: bigint
    file_name: String
    file_path: String
    file_type: String
    id: bigint
    plate_no: String
    sim_no: bigint
    status: String
    vehicle_id: bigint
}

# order by min() on columns of table "adas_attachment"
input adas_attachment_min_order_by {
    alarm_no: order_by
    attachment_id: order_by
    channel_id: order_by
    create_date: order_by
    file_length: order_by
    file_name: order_by
    file_path: order_by
    file_type: order_by
    id: order_by
    plate_no: order_by
    sim_no: order_by
    status: order_by
    vehicle_id: order_by
}

# response of any mutation on the table "adas_attachment"
type adas_attachment_mutation_response {
    # number of affected rows by the mutation
    affected_rows: Int!
    # data of the affected rows by the mutation
    returning: [adas_attachment!]!
}

# input type for inserting object relation for remote table "adas_attachment"
input adas_attachment_obj_rel_insert_input {
    data: adas_attachment_insert_input!
    on_conflict: adas_attachment_on_conflict
}

# on conflict condition type for table "adas_attachment"
input adas_attachment_on_conflict {
    constraint: adas_attachment_constraint!
    update_columns: [adas_attachment_update_column!]!
    where: adas_attachment_bool_exp
}

# ordering options when selecting data from "adas_attachment"
input adas_attachment_order_by {
    alarm_no: order_by
    attachment_id: order_by
    channel_id: order_by
    create_date: order_by
    file_length: order_by
    file_name: order_by
    file_path: order_by
    file_type: order_by
    id: order_by
    plate_no: order_by
    sim_no: order_by
    status: order_by
    vehicle_id: order_by
}

# primary key columns input for table: "adas_attachment"
input adas_attachment_pk_columns_input {
    id: bigint!
}

# select columns of table "adas_attachment"
enum adas_attachment_select_column {
    # column name
    alarm_no
    # column name
    attachment_id
    # column name
    channel_id
    # column name
    create_date
    # column name
    file_length
    # column name
    file_name
    # column name
    file_path
    # column name
    file_type
    # column name
    id
    # column name
    plate_no
    # column name
    sim_no
    # column name
    status
    # column name
    vehicle_id
}

# input type for updating data in table "adas_attachment"
input adas_attachment_set_input {
    alarm_no: String
    attachment_id: String
    channel_id: bigint
    create_date: timestamptz
    file_length: bigint
    file_name: String
    file_path: String
    file_type: String
    id: bigint
    plate_no: String
    sim_no: bigint
    status: String
    vehicle_id: bigint
}

# aggregate stddev on columns
type adas_attachment_stddev_fields {
    channel_id: Float
    file_length: Float
    id: Float
    sim_no: Float
    vehicle_id: Float
}

# order by stddev() on columns of table "adas_attachment"
input adas_attachment_stddev_order_by {
    channel_id: order_by
    file_length: order_by
    id: order_by
    sim_no: order_by
    vehicle_id: order_by
}

# aggregate stddev_pop on columns
type adas_attachment_stddev_pop_fields {
    channel_id: Float
    file_length: Float
    id: Float
    sim_no: Float
    vehicle_id: Float
}

# order by stddev_pop() on columns of table "adas_attachment"
input adas_attachment_stddev_pop_order_by {
    channel_id: order_by
    file_length: order_by
    id: order_by
    sim_no: order_by
    vehicle_id: order_by
}

# aggregate stddev_samp on columns
type adas_attachment_stddev_samp_fields {
    channel_id: Float
    file_length: Float
    id: Float
    sim_no: Float
    vehicle_id: Float
}

# order by stddev_samp() on columns of table "adas_attachment"
input adas_attachment_stddev_samp_order_by {
    channel_id: order_by
    file_length: order_by
    id: order_by
    sim_no: order_by
    vehicle_id: order_by
}

# aggregate sum on columns
type adas_attachment_sum_fields {
    channel_id: bigint
    file_length: bigint
    id: bigint
    sim_no: bigint
    vehicle_id: bigint
}

# order by sum() on columns of table "adas_attachment"
input adas_attachment_sum_order_by {
    channel_id: order_by
    file_length: order_by
    id: order_by
    sim_no: order_by
    vehicle_id: order_by
}

# update columns of table "adas_attachment"
enum adas_attachment_update_column {
    # column name
    alarm_no
    # column name
    attachment_id
    # column name
    channel_id
    # column name
    create_date
    # column name
    file_length
    # column name
    file_name
    # column name
    file_path
    # column name
    file_type
    # column name
    id
    # column name
    plate_no
    # column name
    sim_no
    # column name
    status
    # column name
    vehicle_id
}

# aggregate var_pop on columns
type adas_attachment_var_pop_fields {
    channel_id: Float
    file_length: Float
    id: Float
    sim_no: Float
    vehicle_id: Float
}

# order by var_pop() on columns of table "adas_attachment"
input adas_attachment_var_pop_order_by {
    channel_id: order_by
    file_length: order_by
    id: order_by
    sim_no: order_by
    vehicle_id: order_by
}

# aggregate var_samp on columns
type adas_attachment_var_samp_fields {
    channel_id: Float
    file_length: Float
    id: Float
    sim_no: Float
    vehicle_id: Float
}

# order by var_samp() on columns of table "adas_attachment"
input adas_attachment_var_samp_order_by {
    channel_id: order_by
    file_length: order_by
    id: order_by
    sim_no: order_by
    vehicle_id: order_by
}

# aggregate variance on columns
type adas_attachment_variance_fields {
    channel_id: Float
    file_length: Float
    id: Float
    sim_no: Float
    vehicle_id: Float
}

# order by variance() on columns of table "adas_attachment"
input adas_attachment_variance_order_by {
    channel_id: order_by
    file_length: order_by
    id: order_by
    sim_no: order_by
    vehicle_id: order_by
}

# A Relay Connection object on "adas_attachment"
type adas_attachmentConnection {
    edges: [adas_attachmentEdge!]!
    pageInfo: PageInfo!
}

type adas_attachmentEdge {
    cursor: String!
    node: adas_attachment!
}

# columns and relationships of "adas_data"
type adas_data implements Node {
    adas_attachment: String
    alarm_id: bigint
    alarm_no: String
    alarm_source: String
    alarm_time: timestamptz
    alarm_type: String
    altitude: bigint
    created_date: timestamptz
    fatigue_degree: bigint
    front_car_distance: numeric
    id: ID!
    latitude: numeric
    levels: bigint
    location: String
    longitude: numeric
    plate_no: String
    sim_id: bigint
    speed: bigint
    terminal_id: bigint
    vehicle_id: String
    vehicle_status: String
}

# aggregated selection of "adas_data"
type adas_data_aggregate {
    aggregate: adas_data_aggregate_fields
    nodes: [adas_data!]!
}

# aggregate fields of "adas_data"
type adas_data_aggregate_fields {
    avg: adas_data_avg_fields
    count(columns: [adas_data_select_column!], distinct: Boolean): Int
    max: adas_data_max_fields
    min: adas_data_min_fields
    stddev: adas_data_stddev_fields
    stddev_pop: adas_data_stddev_pop_fields
    stddev_samp: adas_data_stddev_samp_fields
    sum: adas_data_sum_fields
    var_pop: adas_data_var_pop_fields
    var_samp: adas_data_var_samp_fields
    variance: adas_data_variance_fields
}

# order by aggregate values of table "adas_data"
input adas_data_aggregate_order_by {
    avg: adas_data_avg_order_by
    count: order_by
    max: adas_data_max_order_by
    min: adas_data_min_order_by
    stddev: adas_data_stddev_order_by
    stddev_pop: adas_data_stddev_pop_order_by
    stddev_samp: adas_data_stddev_samp_order_by
    sum: adas_data_sum_order_by
    var_pop: adas_data_var_pop_order_by
    var_samp: adas_data_var_samp_order_by
    variance: adas_data_variance_order_by
}

# input type for inserting array relation for remote table "adas_data"
input adas_data_arr_rel_insert_input {
    data: [adas_data_insert_input!]!
    on_conflict: adas_data_on_conflict
}

# aggregate avg on columns
type adas_data_avg_fields {
    alarm_id: Float
    altitude: Float
    fatigue_degree: Float
    front_car_distance: Float
    id: Float
    latitude: Float
    levels: Float
    longitude: Float
    sim_id: Float
    speed: Float
    terminal_id: Float
}

# order by avg() on columns of table "adas_data"
input adas_data_avg_order_by {
    alarm_id: order_by
    altitude: order_by
    fatigue_degree: order_by
    front_car_distance: order_by
    id: order_by
    latitude: order_by
    levels: order_by
    longitude: order_by
    sim_id: order_by
    speed: order_by
    terminal_id: order_by
}

# Boolean expression to filter rows from the table "adas_data". All fields are combined with a logical 'AND'.
input adas_data_bool_exp {
    _and: [adas_data_bool_exp]
    _not: adas_data_bool_exp
    _or: [adas_data_bool_exp]
    adas_attachment: String_comparison_exp
    alarm_id: bigint_comparison_exp
    alarm_no: String_comparison_exp
    alarm_source: String_comparison_exp
    alarm_time: timestamptz_comparison_exp
    alarm_type: String_comparison_exp
    altitude: bigint_comparison_exp
    created_date: timestamptz_comparison_exp
    fatigue_degree: bigint_comparison_exp
    front_car_distance: numeric_comparison_exp
    id: bigint_comparison_exp
    latitude: numeric_comparison_exp
    levels: bigint_comparison_exp
    location: String_comparison_exp
    longitude: numeric_comparison_exp
    plate_no: String_comparison_exp
    sim_id: bigint_comparison_exp
    speed: bigint_comparison_exp
    terminal_id: bigint_comparison_exp
    vehicle_id: String_comparison_exp
    vehicle_status: String_comparison_exp
}

# unique or primary key constraints on table "adas_data"
enum adas_data_constraint {
    # unique or primary key constraint
    adas_data_pkey
}

# input type for incrementing integer column in table "adas_data"
input adas_data_inc_input {
    alarm_id: bigint
    altitude: bigint
    fatigue_degree: bigint
    front_car_distance: numeric
    id: bigint
    latitude: numeric
    levels: bigint
    longitude: numeric
    sim_id: bigint
    speed: bigint
    terminal_id: bigint
}

# input type for inserting data into table "adas_data"
input adas_data_insert_input {
    adas_attachment: String
    alarm_id: bigint
    alarm_no: String
    alarm_source: String
    alarm_time: timestamptz
    alarm_type: String
    altitude: bigint
    created_date: timestamptz
    fatigue_degree: bigint
    front_car_distance: numeric
    id: bigint
    latitude: numeric
    levels: bigint
    location: String
    longitude: numeric
    plate_no: String
    sim_id: bigint
    speed: bigint
    terminal_id: bigint
    vehicle_id: String
    vehicle_status: String
}

# aggregate max on columns
type adas_data_max_fields {
    adas_attachment: String
    alarm_id: bigint
    alarm_no: String
    alarm_source: String
    alarm_time: timestamptz
    alarm_type: String
    altitude: bigint
    created_date: timestamptz
    fatigue_degree: bigint
    front_car_distance: numeric
    id: bigint
    latitude: numeric
    levels: bigint
    location: String
    longitude: numeric
    plate_no: String
    sim_id: bigint
    speed: bigint
    terminal_id: bigint
    vehicle_id: String
    vehicle_status: String
}

# order by max() on columns of table "adas_data"
input adas_data_max_order_by {
    adas_attachment: order_by
    alarm_id: order_by
    alarm_no: order_by
    alarm_source: order_by
    alarm_time: order_by
    alarm_type: order_by
    altitude: order_by
    created_date: order_by
    fatigue_degree: order_by
    front_car_distance: order_by
    id: order_by
    latitude: order_by
    levels: order_by
    location: order_by
    longitude: order_by
    plate_no: order_by
    sim_id: order_by
    speed: order_by
    terminal_id: order_by
    vehicle_id: order_by
    vehicle_status: order_by
}

# aggregate min on columns
type adas_data_min_fields {
    adas_attachment: String
    alarm_id: bigint
    alarm_no: String
    alarm_source: String
    alarm_time: timestamptz
    alarm_type: String
    altitude: bigint
    created_date: timestamptz
    fatigue_degree: bigint
    front_car_distance: numeric
    id: bigint
    latitude: numeric
    levels: bigint
    location: String
    longitude: numeric
    plate_no: String
    sim_id: bigint
    speed: bigint
    terminal_id: bigint
    vehicle_id: String
    vehicle_status: String
}

# order by min() on columns of table "adas_data"
input adas_data_min_order_by {
    adas_attachment: order_by
    alarm_id: order_by
    alarm_no: order_by
    alarm_source: order_by
    alarm_time: order_by
    alarm_type: order_by
    altitude: order_by
    created_date: order_by
    fatigue_degree: order_by
    front_car_distance: order_by
    id: order_by
    latitude: order_by
    levels: order_by
    location: order_by
    longitude: order_by
    plate_no: order_by
    sim_id: order_by
    speed: order_by
    terminal_id: order_by
    vehicle_id: order_by
    vehicle_status: order_by
}

# response of any mutation on the table "adas_data"
type adas_data_mutation_response {
    # number of affected rows by the mutation
    affected_rows: Int!
    # data of the affected rows by the mutation
    returning: [adas_data!]!
}

# input type for inserting object relation for remote table "adas_data"
input adas_data_obj_rel_insert_input {
    data: adas_data_insert_input!
    on_conflict: adas_data_on_conflict
}

# on conflict condition type for table "adas_data"
input adas_data_on_conflict {
    constraint: adas_data_constraint!
    update_columns: [adas_data_update_column!]!
    where: adas_data_bool_exp
}

# ordering options when selecting data from "adas_data"
input adas_data_order_by {
    adas_attachment: order_by
    alarm_id: order_by
    alarm_no: order_by
    alarm_source: order_by
    alarm_time: order_by
    alarm_type: order_by
    altitude: order_by
    created_date: order_by
    fatigue_degree: order_by
    front_car_distance: order_by
    id: order_by
    latitude: order_by
    levels: order_by
    location: order_by
    longitude: order_by
    plate_no: order_by
    sim_id: order_by
    speed: order_by
    terminal_id: order_by
    vehicle_id: order_by
    vehicle_status: order_by
}

# primary key columns input for table: "adas_data"
input adas_data_pk_columns_input {
    id: bigint!
}

# select columns of table "adas_data"
enum adas_data_select_column {
    # column name
    adas_attachment
    # column name
    alarm_id
    # column name
    alarm_no
    # column name
    alarm_source
    # column name
    alarm_time
    # column name
    alarm_type
    # column name
    altitude
    # column name
    created_date
    # column name
    fatigue_degree
    # column name
    front_car_distance
    # column name
    id
    # column name
    latitude
    # column name
    levels
    # column name
    location
    # column name
    longitude
    # column name
    plate_no
    # column name
    sim_id
    # column name
    speed
    # column name
    terminal_id
    # column name
    vehicle_id
    # column name
    vehicle_status
}

# input type for updating data in table "adas_data"
input adas_data_set_input {
    adas_attachment: String
    alarm_id: bigint
    alarm_no: String
    alarm_source: String
    alarm_time: timestamptz
    alarm_type: String
    altitude: bigint
    created_date: timestamptz
    fatigue_degree: bigint
    front_car_distance: numeric
    id: bigint
    latitude: numeric
    levels: bigint
    location: String
    longitude: numeric
    plate_no: String
    sim_id: bigint
    speed: bigint
    terminal_id: bigint
    vehicle_id: String
    vehicle_status: String
}

# aggregate stddev on columns
type adas_data_stddev_fields {
    alarm_id: Float
    altitude: Float
    fatigue_degree: Float
    front_car_distance: Float
    id: Float
    latitude: Float
    levels: Float
    longitude: Float
    sim_id: Float
    speed: Float
    terminal_id: Float
}

# order by stddev() on columns of table "adas_data"
input adas_data_stddev_order_by {
    alarm_id: order_by
    altitude: order_by
    fatigue_degree: order_by
    front_car_distance: order_by
    id: order_by
    latitude: order_by
    levels: order_by
    longitude: order_by
    sim_id: order_by
    speed: order_by
    terminal_id: order_by
}

# aggregate stddev_pop on columns
type adas_data_stddev_pop_fields {
    alarm_id: Float
    altitude: Float
    fatigue_degree: Float
    front_car_distance: Float
    id: Float
    latitude: Float
    levels: Float
    longitude: Float
    sim_id: Float
    speed: Float
    terminal_id: Float
}

# order by stddev_pop() on columns of table "adas_data"
input adas_data_stddev_pop_order_by {
    alarm_id: order_by
    altitude: order_by
    fatigue_degree: order_by
    front_car_distance: order_by
    id: order_by
    latitude: order_by
    levels: order_by
    longitude: order_by
    sim_id: order_by
    speed: order_by
    terminal_id: order_by
}

# aggregate stddev_samp on columns
type adas_data_stddev_samp_fields {
    alarm_id: Float
    altitude: Float
    fatigue_degree: Float
    front_car_distance: Float
    id: Float
    latitude: Float
    levels: Float
    longitude: Float
    sim_id: Float
    speed: Float
    terminal_id: Float
}

# order by stddev_samp() on columns of table "adas_data"
input adas_data_stddev_samp_order_by {
    alarm_id: order_by
    altitude: order_by
    fatigue_degree: order_by
    front_car_distance: order_by
    id: order_by
    latitude: order_by
    levels: order_by
    longitude: order_by
    sim_id: order_by
    speed: order_by
    terminal_id: order_by
}

# aggregate sum on columns
type adas_data_sum_fields {
    alarm_id: bigint
    altitude: bigint
    fatigue_degree: bigint
    front_car_distance: numeric
    id: bigint
    latitude: numeric
    levels: bigint
    longitude: numeric
    sim_id: bigint
    speed: bigint
    terminal_id: bigint
}

# order by sum() on columns of table "adas_data"
input adas_data_sum_order_by {
    alarm_id: order_by
    altitude: order_by
    fatigue_degree: order_by
    front_car_distance: order_by
    id: order_by
    latitude: order_by
    levels: order_by
    longitude: order_by
    sim_id: order_by
    speed: order_by
    terminal_id: order_by
}

# update columns of table "adas_data"
enum adas_data_update_column {
    # column name
    adas_attachment
    # column name
    alarm_id
    # column name
    alarm_no
    # column name
    alarm_source
    # column name
    alarm_time
    # column name
    alarm_type
    # column name
    altitude
    # column name
    created_date
    # column name
    fatigue_degree
    # column name
    front_car_distance
    # column name
    id
    # column name
    latitude
    # column name
    levels
    # column name
    location
    # column name
    longitude
    # column name
    plate_no
    # column name
    sim_id
    # column name
    speed
    # column name
    terminal_id
    # column name
    vehicle_id
    # column name
    vehicle_status
}

# aggregate var_pop on columns
type adas_data_var_pop_fields {
    alarm_id: Float
    altitude: Float
    fatigue_degree: Float
    front_car_distance: Float
    id: Float
    latitude: Float
    levels: Float
    longitude: Float
    sim_id: Float
    speed: Float
    terminal_id: Float
}

# order by var_pop() on columns of table "adas_data"
input adas_data_var_pop_order_by {
    alarm_id: order_by
    altitude: order_by
    fatigue_degree: order_by
    front_car_distance: order_by
    id: order_by
    latitude: order_by
    levels: order_by
    longitude: order_by
    sim_id: order_by
    speed: order_by
    terminal_id: order_by
}

# aggregate var_samp on columns
type adas_data_var_samp_fields {
    alarm_id: Float
    altitude: Float
    fatigue_degree: Float
    front_car_distance: Float
    id: Float
    latitude: Float
    levels: Float
    longitude: Float
    sim_id: Float
    speed: Float
    terminal_id: Float
}

# order by var_samp() on columns of table "adas_data"
input adas_data_var_samp_order_by {
    alarm_id: order_by
    altitude: order_by
    fatigue_degree: order_by
    front_car_distance: order_by
    id: order_by
    latitude: order_by
    levels: order_by
    longitude: order_by
    sim_id: order_by
    speed: order_by
    terminal_id: order_by
}

# aggregate variance on columns
type adas_data_variance_fields {
    alarm_id: Float
    altitude: Float
    fatigue_degree: Float
    front_car_distance: Float
    id: Float
    latitude: Float
    levels: Float
    longitude: Float
    sim_id: Float
    speed: Float
    terminal_id: Float
}




# order by variance() on columns of table "adas_data"
input adas_data_variance_order_by {
    alarm_id: order_by
    altitude: order_by
    fatigue_degree: order_by
    front_car_distance: order_by
    id: order_by
    latitude: order_by
    levels: order_by
    longitude: order_by
    sim_id: order_by
    speed: order_by
    terminal_id: order_by
}

# A Relay Connection object on "adas_data"
type adas_dataConnection {
    edges: [adas_dataEdge!]!
    pageInfo: PageInfo!
}

type adas_dataEdge {
    cursor: String!
    node: adas_data!
}