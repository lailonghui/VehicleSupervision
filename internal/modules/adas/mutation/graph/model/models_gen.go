// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"VehicleSupervision/pkg/graphql/model"
	"fmt"
	"io"
	"strconv"
	"time"
)

type Node interface {
	IsNode()
}

type PageInfo struct {
	EndCursor       string `json:"endCursor"`
	HasNextPage     bool   `json:"hasNextPage"`
	HasPreviousPage bool   `json:"hasPreviousPage"`
	StartCursor     string `json:"startCursor"`
}

type AdasAttachment struct {
	AlarmNo      *string    `json:"alarm_no"`
	AttachmentID string     `json:"attachment_id"`
	ChannelID    *int64     `json:"channel_id"`
	CreateDate   *time.Time `json:"create_date"`
	FileLength   *int64     `json:"file_length"`
	FileName     *string    `json:"file_name"`
	FilePath     *string    `json:"file_path"`
	FileType     *string    `json:"file_type"`
	ID           int64      `json:"id"`
	PlateNo      *string    `json:"plate_no"`
	SimNo        *int64     `json:"sim_no"`
	Status       *string    `json:"status"`
	VehicleID    *int64     `json:"vehicle_id"`
}

type AdasAttachmentAggregate struct {
	Aggregate *AdasAttachmentAggregateFields `json:"aggregate"`
	Nodes     []*AdasAttachment              `json:"nodes"`
}

type AdasAttachmentAggregateFields struct {
	Avg        *AdasAttachmentAvgFields        `json:"avg"`
	Count      *int                            `json:"count"`
	Max        *AdasAttachmentMaxFields        `json:"max"`
	Min        *AdasAttachmentMinFields        `json:"min"`
	Stddev     *AdasAttachmentStddevFields     `json:"stddev"`
	StddevPop  *AdasAttachmentStddevPopFields  `json:"stddev_pop"`
	StddevSamp *AdasAttachmentStddevSampFields `json:"stddev_samp"`
	Sum        *AdasAttachmentSumFields        `json:"sum"`
	VarPop     *AdasAttachmentVarPopFields     `json:"var_pop"`
	VarSamp    *AdasAttachmentVarSampFields    `json:"var_samp"`
	Variance   *AdasAttachmentVarianceFields   `json:"variance"`
}

type AdasAttachmentAggregateOrderBy struct {
	Avg        *AdasAttachmentAvgOrderBy        `json:"avg"`
	Count      *model.OrderBy                   `json:"count"`
	Max        *AdasAttachmentMaxOrderBy        `json:"max"`
	Min        *AdasAttachmentMinOrderBy        `json:"min"`
	Stddev     *AdasAttachmentStddevOrderBy     `json:"stddev"`
	StddevPop  *AdasAttachmentStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *AdasAttachmentStddevSampOrderBy `json:"stddev_samp"`
	Sum        *AdasAttachmentSumOrderBy        `json:"sum"`
	VarPop     *AdasAttachmentVarPopOrderBy     `json:"var_pop"`
	VarSamp    *AdasAttachmentVarSampOrderBy    `json:"var_samp"`
	Variance   *AdasAttachmentVarianceOrderBy   `json:"variance"`
}

type AdasAttachmentArrRelInsertInput struct {
	Data       []*AdasAttachmentInsertInput `json:"data"`
	OnConflict *AdasAttachmentOnConflict    `json:"on_conflict"`
}

type AdasAttachmentAvgFields struct {
	ChannelID  *float64 `json:"channel_id"`
	FileLength *float64 `json:"file_length"`
	ID         *float64 `json:"id"`
	SimNo      *float64 `json:"sim_no"`
	VehicleID  *float64 `json:"vehicle_id"`
}

type AdasAttachmentAvgOrderBy struct {
	ChannelID  *model.OrderBy `json:"channel_id"`
	FileLength *model.OrderBy `json:"file_length"`
	ID         *model.OrderBy `json:"id"`
	SimNo      *model.OrderBy `json:"sim_no"`
	VehicleID  *model.OrderBy `json:"vehicle_id"`
}

type AdasAttachmentBoolExp struct {
	And          []*AdasAttachmentBoolExp        `json:"_and"`
	Not          *AdasAttachmentBoolExp          `json:"_not"`
	Or           []*AdasAttachmentBoolExp        `json:"_or"`
	AlarmNo      *model.StringComparisonExp      `json:"alarm_no"`
	AttachmentID *model.StringComparisonExp      `json:"attachment_id"`
	ChannelID    *model.BigintComparisonExp      `json:"channel_id"`
	CreateDate   *model.TimestamptzComparisonExp `json:"create_date"`
	FileLength   *model.BigintComparisonExp      `json:"file_length"`
	FileName     *model.StringComparisonExp      `json:"file_name"`
	FilePath     *model.StringComparisonExp      `json:"file_path"`
	FileType     *model.StringComparisonExp      `json:"file_type"`
	ID           *model.BigintComparisonExp      `json:"id"`
	PlateNo      *model.StringComparisonExp      `json:"plate_no"`
	SimNo        *model.BigintComparisonExp      `json:"sim_no"`
	Status       *model.StringComparisonExp      `json:"status"`
	VehicleID    *model.BigintComparisonExp      `json:"vehicle_id"`
}

type AdasAttachmentIncInput struct {
	ChannelID  *int64 `json:"channel_id"`
	FileLength *int64 `json:"file_length"`
	ID         *int64 `json:"id"`
	SimNo      *int64 `json:"sim_no"`
	VehicleID  *int64 `json:"vehicle_id"`
}

type AdasAttachmentInsertInput struct {
	AlarmNo      *string    `json:"alarm_no"`
	AttachmentID *string    `json:"attachment_id"`
	ChannelID    *int64     `json:"channel_id"`
	CreateDate   *time.Time `json:"create_date"`
	FileLength   *int64     `json:"file_length"`
	FileName     *string    `json:"file_name"`
	FilePath     *string    `json:"file_path"`
	FileType     *string    `json:"file_type"`
	ID           *int64     `json:"id"`
	PlateNo      *string    `json:"plate_no"`
	SimNo        *int64     `json:"sim_no"`
	Status       *string    `json:"status"`
	VehicleID    *int64     `json:"vehicle_id"`
}

type AdasAttachmentMaxFields struct {
	AlarmNo      *string    `json:"alarm_no"`
	AttachmentID *string    `json:"attachment_id"`
	ChannelID    *int64     `json:"channel_id"`
	CreateDate   *time.Time `json:"create_date"`
	FileLength   *int64     `json:"file_length"`
	FileName     *string    `json:"file_name"`
	FilePath     *string    `json:"file_path"`
	FileType     *string    `json:"file_type"`
	ID           *int64     `json:"id"`
	PlateNo      *string    `json:"plate_no"`
	SimNo        *int64     `json:"sim_no"`
	Status       *string    `json:"status"`
	VehicleID    *int64     `json:"vehicle_id"`
}

type AdasAttachmentMaxOrderBy struct {
	AlarmNo      *model.OrderBy `json:"alarm_no"`
	AttachmentID *model.OrderBy `json:"attachment_id"`
	ChannelID    *model.OrderBy `json:"channel_id"`
	CreateDate   *model.OrderBy `json:"create_date"`
	FileLength   *model.OrderBy `json:"file_length"`
	FileName     *model.OrderBy `json:"file_name"`
	FilePath     *model.OrderBy `json:"file_path"`
	FileType     *model.OrderBy `json:"file_type"`
	ID           *model.OrderBy `json:"id"`
	PlateNo      *model.OrderBy `json:"plate_no"`
	SimNo        *model.OrderBy `json:"sim_no"`
	Status       *model.OrderBy `json:"status"`
	VehicleID    *model.OrderBy `json:"vehicle_id"`
}

type AdasAttachmentMinFields struct {
	AlarmNo      *string    `json:"alarm_no"`
	AttachmentID *string    `json:"attachment_id"`
	ChannelID    *int64     `json:"channel_id"`
	CreateDate   *time.Time `json:"create_date"`
	FileLength   *int64     `json:"file_length"`
	FileName     *string    `json:"file_name"`
	FilePath     *string    `json:"file_path"`
	FileType     *string    `json:"file_type"`
	ID           *int64     `json:"id"`
	PlateNo      *string    `json:"plate_no"`
	SimNo        *int64     `json:"sim_no"`
	Status       *string    `json:"status"`
	VehicleID    *int64     `json:"vehicle_id"`
}

type AdasAttachmentMinOrderBy struct {
	AlarmNo      *model.OrderBy `json:"alarm_no"`
	AttachmentID *model.OrderBy `json:"attachment_id"`
	ChannelID    *model.OrderBy `json:"channel_id"`
	CreateDate   *model.OrderBy `json:"create_date"`
	FileLength   *model.OrderBy `json:"file_length"`
	FileName     *model.OrderBy `json:"file_name"`
	FilePath     *model.OrderBy `json:"file_path"`
	FileType     *model.OrderBy `json:"file_type"`
	ID           *model.OrderBy `json:"id"`
	PlateNo      *model.OrderBy `json:"plate_no"`
	SimNo        *model.OrderBy `json:"sim_no"`
	Status       *model.OrderBy `json:"status"`
	VehicleID    *model.OrderBy `json:"vehicle_id"`
}

type AdasAttachmentMutationResponse struct {
	AffectedRows int               `json:"affected_rows"`
	Returning    []*AdasAttachment `json:"returning"`
}

type AdasAttachmentObjRelInsertInput struct {
	Data       *AdasAttachmentInsertInput `json:"data"`
	OnConflict *AdasAttachmentOnConflict  `json:"on_conflict"`
}

type AdasAttachmentOnConflict struct {
	Constraint    AdasAttachmentConstraint     `json:"constraint"`
	UpdateColumns []AdasAttachmentUpdateColumn `json:"update_columns"`
	Where         *AdasAttachmentBoolExp       `json:"where"`
}

type AdasAttachmentOrderBy struct {
	AlarmNo      *model.OrderBy `json:"alarm_no"`
	AttachmentID *model.OrderBy `json:"attachment_id"`
	ChannelID    *model.OrderBy `json:"channel_id"`
	CreateDate   *model.OrderBy `json:"create_date"`
	FileLength   *model.OrderBy `json:"file_length"`
	FileName     *model.OrderBy `json:"file_name"`
	FilePath     *model.OrderBy `json:"file_path"`
	FileType     *model.OrderBy `json:"file_type"`
	ID           *model.OrderBy `json:"id"`
	PlateNo      *model.OrderBy `json:"plate_no"`
	SimNo        *model.OrderBy `json:"sim_no"`
	Status       *model.OrderBy `json:"status"`
	VehicleID    *model.OrderBy `json:"vehicle_id"`
}

type AdasAttachmentPkColumnsInput struct {
	ID int64 `json:"id"`
}

type AdasAttachmentSetInput struct {
	AlarmNo      *string    `json:"alarm_no"`
	AttachmentID *string    `json:"attachment_id"`
	ChannelID    *int64     `json:"channel_id"`
	CreateDate   *time.Time `json:"create_date"`
	FileLength   *int64     `json:"file_length"`
	FileName     *string    `json:"file_name"`
	FilePath     *string    `json:"file_path"`
	FileType     *string    `json:"file_type"`
	ID           *int64     `json:"id"`
	PlateNo      *string    `json:"plate_no"`
	SimNo        *int64     `json:"sim_no"`
	Status       *string    `json:"status"`
	VehicleID    *int64     `json:"vehicle_id"`
}

type AdasAttachmentStddevFields struct {
	ChannelID  *float64 `json:"channel_id"`
	FileLength *float64 `json:"file_length"`
	ID         *float64 `json:"id"`
	SimNo      *float64 `json:"sim_no"`
	VehicleID  *float64 `json:"vehicle_id"`
}

type AdasAttachmentStddevOrderBy struct {
	ChannelID  *model.OrderBy `json:"channel_id"`
	FileLength *model.OrderBy `json:"file_length"`
	ID         *model.OrderBy `json:"id"`
	SimNo      *model.OrderBy `json:"sim_no"`
	VehicleID  *model.OrderBy `json:"vehicle_id"`
}

type AdasAttachmentStddevPopFields struct {
	ChannelID  *float64 `json:"channel_id"`
	FileLength *float64 `json:"file_length"`
	ID         *float64 `json:"id"`
	SimNo      *float64 `json:"sim_no"`
	VehicleID  *float64 `json:"vehicle_id"`
}

type AdasAttachmentStddevPopOrderBy struct {
	ChannelID  *model.OrderBy `json:"channel_id"`
	FileLength *model.OrderBy `json:"file_length"`
	ID         *model.OrderBy `json:"id"`
	SimNo      *model.OrderBy `json:"sim_no"`
	VehicleID  *model.OrderBy `json:"vehicle_id"`
}

type AdasAttachmentStddevSampFields struct {
	ChannelID  *float64 `json:"channel_id"`
	FileLength *float64 `json:"file_length"`
	ID         *float64 `json:"id"`
	SimNo      *float64 `json:"sim_no"`
	VehicleID  *float64 `json:"vehicle_id"`
}

type AdasAttachmentStddevSampOrderBy struct {
	ChannelID  *model.OrderBy `json:"channel_id"`
	FileLength *model.OrderBy `json:"file_length"`
	ID         *model.OrderBy `json:"id"`
	SimNo      *model.OrderBy `json:"sim_no"`
	VehicleID  *model.OrderBy `json:"vehicle_id"`
}

type AdasAttachmentSumFields struct {
	ChannelID  *int64 `json:"channel_id"`
	FileLength *int64 `json:"file_length"`
	ID         *int64 `json:"id"`
	SimNo      *int64 `json:"sim_no"`
	VehicleID  *int64 `json:"vehicle_id"`
}

type AdasAttachmentSumOrderBy struct {
	ChannelID  *model.OrderBy `json:"channel_id"`
	FileLength *model.OrderBy `json:"file_length"`
	ID         *model.OrderBy `json:"id"`
	SimNo      *model.OrderBy `json:"sim_no"`
	VehicleID  *model.OrderBy `json:"vehicle_id"`
}

type AdasAttachmentVarPopFields struct {
	ChannelID  *float64 `json:"channel_id"`
	FileLength *float64 `json:"file_length"`
	ID         *float64 `json:"id"`
	SimNo      *float64 `json:"sim_no"`
	VehicleID  *float64 `json:"vehicle_id"`
}

type AdasAttachmentVarPopOrderBy struct {
	ChannelID  *model.OrderBy `json:"channel_id"`
	FileLength *model.OrderBy `json:"file_length"`
	ID         *model.OrderBy `json:"id"`
	SimNo      *model.OrderBy `json:"sim_no"`
	VehicleID  *model.OrderBy `json:"vehicle_id"`
}

type AdasAttachmentVarSampFields struct {
	ChannelID  *float64 `json:"channel_id"`
	FileLength *float64 `json:"file_length"`
	ID         *float64 `json:"id"`
	SimNo      *float64 `json:"sim_no"`
	VehicleID  *float64 `json:"vehicle_id"`
}

type AdasAttachmentVarSampOrderBy struct {
	ChannelID  *model.OrderBy `json:"channel_id"`
	FileLength *model.OrderBy `json:"file_length"`
	ID         *model.OrderBy `json:"id"`
	SimNo      *model.OrderBy `json:"sim_no"`
	VehicleID  *model.OrderBy `json:"vehicle_id"`
}

type AdasAttachmentVarianceFields struct {
	ChannelID  *float64 `json:"channel_id"`
	FileLength *float64 `json:"file_length"`
	ID         *float64 `json:"id"`
	SimNo      *float64 `json:"sim_no"`
	VehicleID  *float64 `json:"vehicle_id"`
}

type AdasAttachmentVarianceOrderBy struct {
	ChannelID  *model.OrderBy `json:"channel_id"`
	FileLength *model.OrderBy `json:"file_length"`
	ID         *model.OrderBy `json:"id"`
	SimNo      *model.OrderBy `json:"sim_no"`
	VehicleID  *model.OrderBy `json:"vehicle_id"`
}

type AdasData struct {
	AdasAttachment   *string    `json:"adas_attachment"`
	AlarmID          *int64     `json:"alarm_id"`
	AlarmNo          *string    `json:"alarm_no"`
	AlarmSource      *string    `json:"alarm_source"`
	AlarmTime        *time.Time `json:"alarm_time"`
	AlarmType        *string    `json:"alarm_type"`
	Altitude         *int64     `json:"altitude"`
	CreatedDate      *time.Time `json:"created_date"`
	FatigueDegree    *int64     `json:"fatigue_degree"`
	FrontCarDistance *float64   `json:"front_car_distance"`
	ID               int64      `json:"id"`
	Latitude         *float64   `json:"latitude"`
	Levels           *int64     `json:"levels"`
	Location         *string    `json:"location"`
	Longitude        *float64   `json:"longitude"`
	PlateNo          *string    `json:"plate_no"`
	SimID            *int64     `json:"sim_id"`
	Speed            *int64     `json:"speed"`
	TerminalID       *int64     `json:"terminal_id"`
	VehicleID        *string    `json:"vehicle_id"`
	VehicleStatus    *string    `json:"vehicle_status"`
}

type AdasDataAggregate struct {
	Aggregate *AdasDataAggregateFields `json:"aggregate"`
	Nodes     []*AdasData              `json:"nodes"`
}

type AdasDataAggregateFields struct {
	Avg        *AdasDataAvgFields        `json:"avg"`
	Count      *int                      `json:"count"`
	Max        *AdasDataMaxFields        `json:"max"`
	Min        *AdasDataMinFields        `json:"min"`
	Stddev     *AdasDataStddevFields     `json:"stddev"`
	StddevPop  *AdasDataStddevPopFields  `json:"stddev_pop"`
	StddevSamp *AdasDataStddevSampFields `json:"stddev_samp"`
	Sum        *AdasDataSumFields        `json:"sum"`
	VarPop     *AdasDataVarPopFields     `json:"var_pop"`
	VarSamp    *AdasDataVarSampFields    `json:"var_samp"`
	Variance   *AdasDataVarianceFields   `json:"variance"`
}

type AdasDataAggregateOrderBy struct {
	Avg        *AdasDataAvgOrderBy        `json:"avg"`
	Count      *model.OrderBy             `json:"count"`
	Max        *AdasDataMaxOrderBy        `json:"max"`
	Min        *AdasDataMinOrderBy        `json:"min"`
	Stddev     *AdasDataStddevOrderBy     `json:"stddev"`
	StddevPop  *AdasDataStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *AdasDataStddevSampOrderBy `json:"stddev_samp"`
	Sum        *AdasDataSumOrderBy        `json:"sum"`
	VarPop     *AdasDataVarPopOrderBy     `json:"var_pop"`
	VarSamp    *AdasDataVarSampOrderBy    `json:"var_samp"`
	Variance   *AdasDataVarianceOrderBy   `json:"variance"`
}

type AdasDataArrRelInsertInput struct {
	Data       []*AdasDataInsertInput `json:"data"`
	OnConflict *AdasDataOnConflict    `json:"on_conflict"`
}

type AdasDataAvgFields struct {
	AlarmID          *float64 `json:"alarm_id"`
	Altitude         *float64 `json:"altitude"`
	FatigueDegree    *float64 `json:"fatigue_degree"`
	FrontCarDistance *float64 `json:"front_car_distance"`
	ID               *float64 `json:"id"`
	Latitude         *float64 `json:"latitude"`
	Levels           *float64 `json:"levels"`
	Longitude        *float64 `json:"longitude"`
	SimID            *float64 `json:"sim_id"`
	Speed            *float64 `json:"speed"`
	TerminalID       *float64 `json:"terminal_id"`
}

type AdasDataAvgOrderBy struct {
	AlarmID          *model.OrderBy `json:"alarm_id"`
	Altitude         *model.OrderBy `json:"altitude"`
	FatigueDegree    *model.OrderBy `json:"fatigue_degree"`
	FrontCarDistance *model.OrderBy `json:"front_car_distance"`
	ID               *model.OrderBy `json:"id"`
	Latitude         *model.OrderBy `json:"latitude"`
	Levels           *model.OrderBy `json:"levels"`
	Longitude        *model.OrderBy `json:"longitude"`
	SimID            *model.OrderBy `json:"sim_id"`
	Speed            *model.OrderBy `json:"speed"`
	TerminalID       *model.OrderBy `json:"terminal_id"`
}

type AdasDataBoolExp struct {
	And              []*AdasDataBoolExp              `json:"_and"`
	Not              *AdasDataBoolExp                `json:"_not"`
	Or               []*AdasDataBoolExp              `json:"_or"`
	AdasAttachment   *model.StringComparisonExp      `json:"adas_attachment"`
	AlarmID          *model.BigintComparisonExp      `json:"alarm_id"`
	AlarmNo          *model.StringComparisonExp      `json:"alarm_no"`
	AlarmSource      *model.StringComparisonExp      `json:"alarm_source"`
	AlarmTime        *model.TimestamptzComparisonExp `json:"alarm_time"`
	AlarmType        *model.StringComparisonExp      `json:"alarm_type"`
	Altitude         *model.BigintComparisonExp      `json:"altitude"`
	CreatedDate      *model.TimestamptzComparisonExp `json:"created_date"`
	FatigueDegree    *model.BigintComparisonExp      `json:"fatigue_degree"`
	FrontCarDistance *NumericComparisonExp           `json:"front_car_distance"`
	ID               *model.BigintComparisonExp      `json:"id"`
	Latitude         *NumericComparisonExp           `json:"latitude"`
	Levels           *model.BigintComparisonExp      `json:"levels"`
	Location         *model.StringComparisonExp      `json:"location"`
	Longitude        *NumericComparisonExp           `json:"longitude"`
	PlateNo          *model.StringComparisonExp      `json:"plate_no"`
	SimID            *model.BigintComparisonExp      `json:"sim_id"`
	Speed            *model.BigintComparisonExp      `json:"speed"`
	TerminalID       *model.BigintComparisonExp      `json:"terminal_id"`
	VehicleID        *model.StringComparisonExp      `json:"vehicle_id"`
	VehicleStatus    *model.StringComparisonExp      `json:"vehicle_status"`
}

type AdasDataIncInput struct {
	AlarmID          *int64   `json:"alarm_id"`
	Altitude         *int64   `json:"altitude"`
	FatigueDegree    *int64   `json:"fatigue_degree"`
	FrontCarDistance *float64 `json:"front_car_distance"`
	ID               *int64   `json:"id"`
	Latitude         *float64 `json:"latitude"`
	Levels           *int64   `json:"levels"`
	Longitude        *float64 `json:"longitude"`
	SimID            *int64   `json:"sim_id"`
	Speed            *int64   `json:"speed"`
	TerminalID       *int64   `json:"terminal_id"`
}

type AdasDataInsertInput struct {
	AdasAttachment   *string    `json:"adas_attachment"`
	AlarmID          *int64     `json:"alarm_id"`
	AlarmNo          *string    `json:"alarm_no"`
	AlarmSource      *string    `json:"alarm_source"`
	AlarmTime        *time.Time `json:"alarm_time"`
	AlarmType        *string    `json:"alarm_type"`
	Altitude         *int64     `json:"altitude"`
	CreatedDate      *time.Time `json:"created_date"`
	FatigueDegree    *int64     `json:"fatigue_degree"`
	FrontCarDistance *float64   `json:"front_car_distance"`
	ID               *int64     `json:"id"`
	Latitude         *float64   `json:"latitude"`
	Levels           *int64     `json:"levels"`
	Location         *string    `json:"location"`
	Longitude        *float64   `json:"longitude"`
	PlateNo          *string    `json:"plate_no"`
	SimID            *int64     `json:"sim_id"`
	Speed            *int64     `json:"speed"`
	TerminalID       *int64     `json:"terminal_id"`
	VehicleID        *string    `json:"vehicle_id"`
	VehicleStatus    *string    `json:"vehicle_status"`
}

type AdasDataMaxFields struct {
	AdasAttachment   *string    `json:"adas_attachment"`
	AlarmID          *int64     `json:"alarm_id"`
	AlarmNo          *string    `json:"alarm_no"`
	AlarmSource      *string    `json:"alarm_source"`
	AlarmTime        *time.Time `json:"alarm_time"`
	AlarmType        *string    `json:"alarm_type"`
	Altitude         *int64     `json:"altitude"`
	CreatedDate      *time.Time `json:"created_date"`
	FatigueDegree    *int64     `json:"fatigue_degree"`
	FrontCarDistance *float64   `json:"front_car_distance"`
	ID               *int64     `json:"id"`
	Latitude         *float64   `json:"latitude"`
	Levels           *int64     `json:"levels"`
	Location         *string    `json:"location"`
	Longitude        *float64   `json:"longitude"`
	PlateNo          *string    `json:"plate_no"`
	SimID            *int64     `json:"sim_id"`
	Speed            *int64     `json:"speed"`
	TerminalID       *int64     `json:"terminal_id"`
	VehicleID        *string    `json:"vehicle_id"`
	VehicleStatus    *string    `json:"vehicle_status"`
}

type AdasDataMaxOrderBy struct {
	AdasAttachment   *model.OrderBy `json:"adas_attachment"`
	AlarmID          *model.OrderBy `json:"alarm_id"`
	AlarmNo          *model.OrderBy `json:"alarm_no"`
	AlarmSource      *model.OrderBy `json:"alarm_source"`
	AlarmTime        *model.OrderBy `json:"alarm_time"`
	AlarmType        *model.OrderBy `json:"alarm_type"`
	Altitude         *model.OrderBy `json:"altitude"`
	CreatedDate      *model.OrderBy `json:"created_date"`
	FatigueDegree    *model.OrderBy `json:"fatigue_degree"`
	FrontCarDistance *model.OrderBy `json:"front_car_distance"`
	ID               *model.OrderBy `json:"id"`
	Latitude         *model.OrderBy `json:"latitude"`
	Levels           *model.OrderBy `json:"levels"`
	Location         *model.OrderBy `json:"location"`
	Longitude        *model.OrderBy `json:"longitude"`
	PlateNo          *model.OrderBy `json:"plate_no"`
	SimID            *model.OrderBy `json:"sim_id"`
	Speed            *model.OrderBy `json:"speed"`
	TerminalID       *model.OrderBy `json:"terminal_id"`
	VehicleID        *model.OrderBy `json:"vehicle_id"`
	VehicleStatus    *model.OrderBy `json:"vehicle_status"`
}

type AdasDataMinFields struct {
	AdasAttachment   *string    `json:"adas_attachment"`
	AlarmID          *int64     `json:"alarm_id"`
	AlarmNo          *string    `json:"alarm_no"`
	AlarmSource      *string    `json:"alarm_source"`
	AlarmTime        *time.Time `json:"alarm_time"`
	AlarmType        *string    `json:"alarm_type"`
	Altitude         *int64     `json:"altitude"`
	CreatedDate      *time.Time `json:"created_date"`
	FatigueDegree    *int64     `json:"fatigue_degree"`
	FrontCarDistance *float64   `json:"front_car_distance"`
	ID               *int64     `json:"id"`
	Latitude         *float64   `json:"latitude"`
	Levels           *int64     `json:"levels"`
	Location         *string    `json:"location"`
	Longitude        *float64   `json:"longitude"`
	PlateNo          *string    `json:"plate_no"`
	SimID            *int64     `json:"sim_id"`
	Speed            *int64     `json:"speed"`
	TerminalID       *int64     `json:"terminal_id"`
	VehicleID        *string    `json:"vehicle_id"`
	VehicleStatus    *string    `json:"vehicle_status"`
}

type AdasDataMinOrderBy struct {
	AdasAttachment   *model.OrderBy `json:"adas_attachment"`
	AlarmID          *model.OrderBy `json:"alarm_id"`
	AlarmNo          *model.OrderBy `json:"alarm_no"`
	AlarmSource      *model.OrderBy `json:"alarm_source"`
	AlarmTime        *model.OrderBy `json:"alarm_time"`
	AlarmType        *model.OrderBy `json:"alarm_type"`
	Altitude         *model.OrderBy `json:"altitude"`
	CreatedDate      *model.OrderBy `json:"created_date"`
	FatigueDegree    *model.OrderBy `json:"fatigue_degree"`
	FrontCarDistance *model.OrderBy `json:"front_car_distance"`
	ID               *model.OrderBy `json:"id"`
	Latitude         *model.OrderBy `json:"latitude"`
	Levels           *model.OrderBy `json:"levels"`
	Location         *model.OrderBy `json:"location"`
	Longitude        *model.OrderBy `json:"longitude"`
	PlateNo          *model.OrderBy `json:"plate_no"`
	SimID            *model.OrderBy `json:"sim_id"`
	Speed            *model.OrderBy `json:"speed"`
	TerminalID       *model.OrderBy `json:"terminal_id"`
	VehicleID        *model.OrderBy `json:"vehicle_id"`
	VehicleStatus    *model.OrderBy `json:"vehicle_status"`
}

type AdasDataMutationResponse struct {
	AffectedRows int         `json:"affected_rows"`
	Returning    []*AdasData `json:"returning"`
}

type AdasDataObjRelInsertInput struct {
	Data       *AdasDataInsertInput `json:"data"`
	OnConflict *AdasDataOnConflict  `json:"on_conflict"`
}

type AdasDataOnConflict struct {
	Constraint    AdasDataConstraint     `json:"constraint"`
	UpdateColumns []AdasDataUpdateColumn `json:"update_columns"`
	Where         *AdasDataBoolExp       `json:"where"`
}

type AdasDataOrderBy struct {
	AdasAttachment   *model.OrderBy `json:"adas_attachment"`
	AlarmID          *model.OrderBy `json:"alarm_id"`
	AlarmNo          *model.OrderBy `json:"alarm_no"`
	AlarmSource      *model.OrderBy `json:"alarm_source"`
	AlarmTime        *model.OrderBy `json:"alarm_time"`
	AlarmType        *model.OrderBy `json:"alarm_type"`
	Altitude         *model.OrderBy `json:"altitude"`
	CreatedDate      *model.OrderBy `json:"created_date"`
	FatigueDegree    *model.OrderBy `json:"fatigue_degree"`
	FrontCarDistance *model.OrderBy `json:"front_car_distance"`
	ID               *model.OrderBy `json:"id"`
	Latitude         *model.OrderBy `json:"latitude"`
	Levels           *model.OrderBy `json:"levels"`
	Location         *model.OrderBy `json:"location"`
	Longitude        *model.OrderBy `json:"longitude"`
	PlateNo          *model.OrderBy `json:"plate_no"`
	SimID            *model.OrderBy `json:"sim_id"`
	Speed            *model.OrderBy `json:"speed"`
	TerminalID       *model.OrderBy `json:"terminal_id"`
	VehicleID        *model.OrderBy `json:"vehicle_id"`
	VehicleStatus    *model.OrderBy `json:"vehicle_status"`
}

type AdasDataPkColumnsInput struct {
	ID int64 `json:"id"`
}

type AdasDataSetInput struct {
	AdasAttachment   *string    `json:"adas_attachment"`
	AlarmID          *int64     `json:"alarm_id"`
	AlarmNo          *string    `json:"alarm_no"`
	AlarmSource      *string    `json:"alarm_source"`
	AlarmTime        *time.Time `json:"alarm_time"`
	AlarmType        *string    `json:"alarm_type"`
	Altitude         *int64     `json:"altitude"`
	CreatedDate      *time.Time `json:"created_date"`
	FatigueDegree    *int64     `json:"fatigue_degree"`
	FrontCarDistance *float64   `json:"front_car_distance"`
	ID               *int64     `json:"id"`
	Latitude         *float64   `json:"latitude"`
	Levels           *int64     `json:"levels"`
	Location         *string    `json:"location"`
	Longitude        *float64   `json:"longitude"`
	PlateNo          *string    `json:"plate_no"`
	SimID            *int64     `json:"sim_id"`
	Speed            *int64     `json:"speed"`
	TerminalID       *int64     `json:"terminal_id"`
	VehicleID        *string    `json:"vehicle_id"`
	VehicleStatus    *string    `json:"vehicle_status"`
}

type AdasDataStddevFields struct {
	AlarmID          *float64 `json:"alarm_id"`
	Altitude         *float64 `json:"altitude"`
	FatigueDegree    *float64 `json:"fatigue_degree"`
	FrontCarDistance *float64 `json:"front_car_distance"`
	ID               *float64 `json:"id"`
	Latitude         *float64 `json:"latitude"`
	Levels           *float64 `json:"levels"`
	Longitude        *float64 `json:"longitude"`
	SimID            *float64 `json:"sim_id"`
	Speed            *float64 `json:"speed"`
	TerminalID       *float64 `json:"terminal_id"`
}

type AdasDataStddevOrderBy struct {
	AlarmID          *model.OrderBy `json:"alarm_id"`
	Altitude         *model.OrderBy `json:"altitude"`
	FatigueDegree    *model.OrderBy `json:"fatigue_degree"`
	FrontCarDistance *model.OrderBy `json:"front_car_distance"`
	ID               *model.OrderBy `json:"id"`
	Latitude         *model.OrderBy `json:"latitude"`
	Levels           *model.OrderBy `json:"levels"`
	Longitude        *model.OrderBy `json:"longitude"`
	SimID            *model.OrderBy `json:"sim_id"`
	Speed            *model.OrderBy `json:"speed"`
	TerminalID       *model.OrderBy `json:"terminal_id"`
}

type AdasDataStddevPopFields struct {
	AlarmID          *float64 `json:"alarm_id"`
	Altitude         *float64 `json:"altitude"`
	FatigueDegree    *float64 `json:"fatigue_degree"`
	FrontCarDistance *float64 `json:"front_car_distance"`
	ID               *float64 `json:"id"`
	Latitude         *float64 `json:"latitude"`
	Levels           *float64 `json:"levels"`
	Longitude        *float64 `json:"longitude"`
	SimID            *float64 `json:"sim_id"`
	Speed            *float64 `json:"speed"`
	TerminalID       *float64 `json:"terminal_id"`
}

type AdasDataStddevPopOrderBy struct {
	AlarmID          *model.OrderBy `json:"alarm_id"`
	Altitude         *model.OrderBy `json:"altitude"`
	FatigueDegree    *model.OrderBy `json:"fatigue_degree"`
	FrontCarDistance *model.OrderBy `json:"front_car_distance"`
	ID               *model.OrderBy `json:"id"`
	Latitude         *model.OrderBy `json:"latitude"`
	Levels           *model.OrderBy `json:"levels"`
	Longitude        *model.OrderBy `json:"longitude"`
	SimID            *model.OrderBy `json:"sim_id"`
	Speed            *model.OrderBy `json:"speed"`
	TerminalID       *model.OrderBy `json:"terminal_id"`
}

type AdasDataStddevSampFields struct {
	AlarmID          *float64 `json:"alarm_id"`
	Altitude         *float64 `json:"altitude"`
	FatigueDegree    *float64 `json:"fatigue_degree"`
	FrontCarDistance *float64 `json:"front_car_distance"`
	ID               *float64 `json:"id"`
	Latitude         *float64 `json:"latitude"`
	Levels           *float64 `json:"levels"`
	Longitude        *float64 `json:"longitude"`
	SimID            *float64 `json:"sim_id"`
	Speed            *float64 `json:"speed"`
	TerminalID       *float64 `json:"terminal_id"`
}

type AdasDataStddevSampOrderBy struct {
	AlarmID          *model.OrderBy `json:"alarm_id"`
	Altitude         *model.OrderBy `json:"altitude"`
	FatigueDegree    *model.OrderBy `json:"fatigue_degree"`
	FrontCarDistance *model.OrderBy `json:"front_car_distance"`
	ID               *model.OrderBy `json:"id"`
	Latitude         *model.OrderBy `json:"latitude"`
	Levels           *model.OrderBy `json:"levels"`
	Longitude        *model.OrderBy `json:"longitude"`
	SimID            *model.OrderBy `json:"sim_id"`
	Speed            *model.OrderBy `json:"speed"`
	TerminalID       *model.OrderBy `json:"terminal_id"`
}

type AdasDataSumFields struct {
	AlarmID          *int64   `json:"alarm_id"`
	Altitude         *int64   `json:"altitude"`
	FatigueDegree    *int64   `json:"fatigue_degree"`
	FrontCarDistance *float64 `json:"front_car_distance"`
	ID               *int64   `json:"id"`
	Latitude         *float64 `json:"latitude"`
	Levels           *int64   `json:"levels"`
	Longitude        *float64 `json:"longitude"`
	SimID            *int64   `json:"sim_id"`
	Speed            *int64   `json:"speed"`
	TerminalID       *int64   `json:"terminal_id"`
}

type AdasDataSumOrderBy struct {
	AlarmID          *model.OrderBy `json:"alarm_id"`
	Altitude         *model.OrderBy `json:"altitude"`
	FatigueDegree    *model.OrderBy `json:"fatigue_degree"`
	FrontCarDistance *model.OrderBy `json:"front_car_distance"`
	ID               *model.OrderBy `json:"id"`
	Latitude         *model.OrderBy `json:"latitude"`
	Levels           *model.OrderBy `json:"levels"`
	Longitude        *model.OrderBy `json:"longitude"`
	SimID            *model.OrderBy `json:"sim_id"`
	Speed            *model.OrderBy `json:"speed"`
	TerminalID       *model.OrderBy `json:"terminal_id"`
}

type AdasDataVarPopFields struct {
	AlarmID          *float64 `json:"alarm_id"`
	Altitude         *float64 `json:"altitude"`
	FatigueDegree    *float64 `json:"fatigue_degree"`
	FrontCarDistance *float64 `json:"front_car_distance"`
	ID               *float64 `json:"id"`
	Latitude         *float64 `json:"latitude"`
	Levels           *float64 `json:"levels"`
	Longitude        *float64 `json:"longitude"`
	SimID            *float64 `json:"sim_id"`
	Speed            *float64 `json:"speed"`
	TerminalID       *float64 `json:"terminal_id"`
}

type AdasDataVarPopOrderBy struct {
	AlarmID          *model.OrderBy `json:"alarm_id"`
	Altitude         *model.OrderBy `json:"altitude"`
	FatigueDegree    *model.OrderBy `json:"fatigue_degree"`
	FrontCarDistance *model.OrderBy `json:"front_car_distance"`
	ID               *model.OrderBy `json:"id"`
	Latitude         *model.OrderBy `json:"latitude"`
	Levels           *model.OrderBy `json:"levels"`
	Longitude        *model.OrderBy `json:"longitude"`
	SimID            *model.OrderBy `json:"sim_id"`
	Speed            *model.OrderBy `json:"speed"`
	TerminalID       *model.OrderBy `json:"terminal_id"`
}

type AdasDataVarSampFields struct {
	AlarmID          *float64 `json:"alarm_id"`
	Altitude         *float64 `json:"altitude"`
	FatigueDegree    *float64 `json:"fatigue_degree"`
	FrontCarDistance *float64 `json:"front_car_distance"`
	ID               *float64 `json:"id"`
	Latitude         *float64 `json:"latitude"`
	Levels           *float64 `json:"levels"`
	Longitude        *float64 `json:"longitude"`
	SimID            *float64 `json:"sim_id"`
	Speed            *float64 `json:"speed"`
	TerminalID       *float64 `json:"terminal_id"`
}

type AdasDataVarSampOrderBy struct {
	AlarmID          *model.OrderBy `json:"alarm_id"`
	Altitude         *model.OrderBy `json:"altitude"`
	FatigueDegree    *model.OrderBy `json:"fatigue_degree"`
	FrontCarDistance *model.OrderBy `json:"front_car_distance"`
	ID               *model.OrderBy `json:"id"`
	Latitude         *model.OrderBy `json:"latitude"`
	Levels           *model.OrderBy `json:"levels"`
	Longitude        *model.OrderBy `json:"longitude"`
	SimID            *model.OrderBy `json:"sim_id"`
	Speed            *model.OrderBy `json:"speed"`
	TerminalID       *model.OrderBy `json:"terminal_id"`
}

type AdasDataVarianceFields struct {
	AlarmID          *float64 `json:"alarm_id"`
	Altitude         *float64 `json:"altitude"`
	FatigueDegree    *float64 `json:"fatigue_degree"`
	FrontCarDistance *float64 `json:"front_car_distance"`
	ID               *float64 `json:"id"`
	Latitude         *float64 `json:"latitude"`
	Levels           *float64 `json:"levels"`
	Longitude        *float64 `json:"longitude"`
	SimID            *float64 `json:"sim_id"`
	Speed            *float64 `json:"speed"`
	TerminalID       *float64 `json:"terminal_id"`
}

type AdasDataVarianceOrderBy struct {
	AlarmID          *model.OrderBy `json:"alarm_id"`
	Altitude         *model.OrderBy `json:"altitude"`
	FatigueDegree    *model.OrderBy `json:"fatigue_degree"`
	FrontCarDistance *model.OrderBy `json:"front_car_distance"`
	ID               *model.OrderBy `json:"id"`
	Latitude         *model.OrderBy `json:"latitude"`
	Levels           *model.OrderBy `json:"levels"`
	Longitude        *model.OrderBy `json:"longitude"`
	SimID            *model.OrderBy `json:"sim_id"`
	Speed            *model.OrderBy `json:"speed"`
	TerminalID       *model.OrderBy `json:"terminal_id"`
}

type NumericComparisonExp struct {
	Eq     *float64  `json:"_eq"`
	Gt     *float64  `json:"_gt"`
	Gte    *float64  `json:"_gte"`
	In     []float64 `json:"_in"`
	IsNull *bool     `json:"_is_null"`
	Lt     *float64  `json:"_lt"`
	Lte    *float64  `json:"_lte"`
	Neq    *float64  `json:"_neq"`
	Nin    []float64 `json:"_nin"`
}

type AdasAttachmentConstraint string

const (
	AdasAttachmentConstraintAdasAttachmentAttachmentIDKey AdasAttachmentConstraint = "adas_attachment_attachment_id_key"
	AdasAttachmentConstraintAdasAttachmentPkey            AdasAttachmentConstraint = "adas_attachment_pkey"
)

var AllAdasAttachmentConstraint = []AdasAttachmentConstraint{
	AdasAttachmentConstraintAdasAttachmentAttachmentIDKey,
	AdasAttachmentConstraintAdasAttachmentPkey,
}

func (e AdasAttachmentConstraint) IsValid() bool {
	switch e {
	case AdasAttachmentConstraintAdasAttachmentAttachmentIDKey, AdasAttachmentConstraintAdasAttachmentPkey:
		return true
	}
	return false
}

func (e AdasAttachmentConstraint) String() string {
	return string(e)
}

func (e *AdasAttachmentConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AdasAttachmentConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid adas_attachment_constraint", str)
	}
	return nil
}

func (e AdasAttachmentConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AdasAttachmentSelectColumn string

const (
	AdasAttachmentSelectColumnAlarmNo      AdasAttachmentSelectColumn = "alarm_no"
	AdasAttachmentSelectColumnAttachmentID AdasAttachmentSelectColumn = "attachment_id"
	AdasAttachmentSelectColumnChannelID    AdasAttachmentSelectColumn = "channel_id"
	AdasAttachmentSelectColumnCreateDate   AdasAttachmentSelectColumn = "create_date"
	AdasAttachmentSelectColumnFileLength   AdasAttachmentSelectColumn = "file_length"
	AdasAttachmentSelectColumnFileName     AdasAttachmentSelectColumn = "file_name"
	AdasAttachmentSelectColumnFilePath     AdasAttachmentSelectColumn = "file_path"
	AdasAttachmentSelectColumnFileType     AdasAttachmentSelectColumn = "file_type"
	AdasAttachmentSelectColumnID           AdasAttachmentSelectColumn = "id"
	AdasAttachmentSelectColumnPlateNo      AdasAttachmentSelectColumn = "plate_no"
	AdasAttachmentSelectColumnSimNo        AdasAttachmentSelectColumn = "sim_no"
	AdasAttachmentSelectColumnStatus       AdasAttachmentSelectColumn = "status"
	AdasAttachmentSelectColumnVehicleID    AdasAttachmentSelectColumn = "vehicle_id"
)

var AllAdasAttachmentSelectColumn = []AdasAttachmentSelectColumn{
	AdasAttachmentSelectColumnAlarmNo,
	AdasAttachmentSelectColumnAttachmentID,
	AdasAttachmentSelectColumnChannelID,
	AdasAttachmentSelectColumnCreateDate,
	AdasAttachmentSelectColumnFileLength,
	AdasAttachmentSelectColumnFileName,
	AdasAttachmentSelectColumnFilePath,
	AdasAttachmentSelectColumnFileType,
	AdasAttachmentSelectColumnID,
	AdasAttachmentSelectColumnPlateNo,
	AdasAttachmentSelectColumnSimNo,
	AdasAttachmentSelectColumnStatus,
	AdasAttachmentSelectColumnVehicleID,
}

func (e AdasAttachmentSelectColumn) IsValid() bool {
	switch e {
	case AdasAttachmentSelectColumnAlarmNo, AdasAttachmentSelectColumnAttachmentID, AdasAttachmentSelectColumnChannelID, AdasAttachmentSelectColumnCreateDate, AdasAttachmentSelectColumnFileLength, AdasAttachmentSelectColumnFileName, AdasAttachmentSelectColumnFilePath, AdasAttachmentSelectColumnFileType, AdasAttachmentSelectColumnID, AdasAttachmentSelectColumnPlateNo, AdasAttachmentSelectColumnSimNo, AdasAttachmentSelectColumnStatus, AdasAttachmentSelectColumnVehicleID:
		return true
	}
	return false
}

func (e AdasAttachmentSelectColumn) String() string {
	return string(e)
}

func (e *AdasAttachmentSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AdasAttachmentSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid adas_attachment_select_column", str)
	}
	return nil
}

func (e AdasAttachmentSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AdasAttachmentUpdateColumn string

const (
	AdasAttachmentUpdateColumnAlarmNo      AdasAttachmentUpdateColumn = "alarm_no"
	AdasAttachmentUpdateColumnAttachmentID AdasAttachmentUpdateColumn = "attachment_id"
	AdasAttachmentUpdateColumnChannelID    AdasAttachmentUpdateColumn = "channel_id"
	AdasAttachmentUpdateColumnCreateDate   AdasAttachmentUpdateColumn = "create_date"
	AdasAttachmentUpdateColumnFileLength   AdasAttachmentUpdateColumn = "file_length"
	AdasAttachmentUpdateColumnFileName     AdasAttachmentUpdateColumn = "file_name"
	AdasAttachmentUpdateColumnFilePath     AdasAttachmentUpdateColumn = "file_path"
	AdasAttachmentUpdateColumnFileType     AdasAttachmentUpdateColumn = "file_type"
	AdasAttachmentUpdateColumnID           AdasAttachmentUpdateColumn = "id"
	AdasAttachmentUpdateColumnPlateNo      AdasAttachmentUpdateColumn = "plate_no"
	AdasAttachmentUpdateColumnSimNo        AdasAttachmentUpdateColumn = "sim_no"
	AdasAttachmentUpdateColumnStatus       AdasAttachmentUpdateColumn = "status"
	AdasAttachmentUpdateColumnVehicleID    AdasAttachmentUpdateColumn = "vehicle_id"
)

var AllAdasAttachmentUpdateColumn = []AdasAttachmentUpdateColumn{
	AdasAttachmentUpdateColumnAlarmNo,
	AdasAttachmentUpdateColumnAttachmentID,
	AdasAttachmentUpdateColumnChannelID,
	AdasAttachmentUpdateColumnCreateDate,
	AdasAttachmentUpdateColumnFileLength,
	AdasAttachmentUpdateColumnFileName,
	AdasAttachmentUpdateColumnFilePath,
	AdasAttachmentUpdateColumnFileType,
	AdasAttachmentUpdateColumnID,
	AdasAttachmentUpdateColumnPlateNo,
	AdasAttachmentUpdateColumnSimNo,
	AdasAttachmentUpdateColumnStatus,
	AdasAttachmentUpdateColumnVehicleID,
}

func (e AdasAttachmentUpdateColumn) IsValid() bool {
	switch e {
	case AdasAttachmentUpdateColumnAlarmNo, AdasAttachmentUpdateColumnAttachmentID, AdasAttachmentUpdateColumnChannelID, AdasAttachmentUpdateColumnCreateDate, AdasAttachmentUpdateColumnFileLength, AdasAttachmentUpdateColumnFileName, AdasAttachmentUpdateColumnFilePath, AdasAttachmentUpdateColumnFileType, AdasAttachmentUpdateColumnID, AdasAttachmentUpdateColumnPlateNo, AdasAttachmentUpdateColumnSimNo, AdasAttachmentUpdateColumnStatus, AdasAttachmentUpdateColumnVehicleID:
		return true
	}
	return false
}

func (e AdasAttachmentUpdateColumn) String() string {
	return string(e)
}

func (e *AdasAttachmentUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AdasAttachmentUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid adas_attachment_update_column", str)
	}
	return nil
}

func (e AdasAttachmentUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AdasDataConstraint string

const (
	AdasDataConstraintAdasDataPkey AdasDataConstraint = "adas_data_pkey"
)

var AllAdasDataConstraint = []AdasDataConstraint{
	AdasDataConstraintAdasDataPkey,
}

func (e AdasDataConstraint) IsValid() bool {
	switch e {
	case AdasDataConstraintAdasDataPkey:
		return true
	}
	return false
}

func (e AdasDataConstraint) String() string {
	return string(e)
}

func (e *AdasDataConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AdasDataConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid adas_data_constraint", str)
	}
	return nil
}

func (e AdasDataConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AdasDataSelectColumn string

const (
	AdasDataSelectColumnAdasAttachment   AdasDataSelectColumn = "adas_attachment"
	AdasDataSelectColumnAlarmID          AdasDataSelectColumn = "alarm_id"
	AdasDataSelectColumnAlarmNo          AdasDataSelectColumn = "alarm_no"
	AdasDataSelectColumnAlarmSource      AdasDataSelectColumn = "alarm_source"
	AdasDataSelectColumnAlarmTime        AdasDataSelectColumn = "alarm_time"
	AdasDataSelectColumnAlarmType        AdasDataSelectColumn = "alarm_type"
	AdasDataSelectColumnAltitude         AdasDataSelectColumn = "altitude"
	AdasDataSelectColumnCreatedDate      AdasDataSelectColumn = "created_date"
	AdasDataSelectColumnFatigueDegree    AdasDataSelectColumn = "fatigue_degree"
	AdasDataSelectColumnFrontCarDistance AdasDataSelectColumn = "front_car_distance"
	AdasDataSelectColumnID               AdasDataSelectColumn = "id"
	AdasDataSelectColumnLatitude         AdasDataSelectColumn = "latitude"
	AdasDataSelectColumnLevels           AdasDataSelectColumn = "levels"
	AdasDataSelectColumnLocation         AdasDataSelectColumn = "location"
	AdasDataSelectColumnLongitude        AdasDataSelectColumn = "longitude"
	AdasDataSelectColumnPlateNo          AdasDataSelectColumn = "plate_no"
	AdasDataSelectColumnSimID            AdasDataSelectColumn = "sim_id"
	AdasDataSelectColumnSpeed            AdasDataSelectColumn = "speed"
	AdasDataSelectColumnTerminalID       AdasDataSelectColumn = "terminal_id"
	AdasDataSelectColumnVehicleID        AdasDataSelectColumn = "vehicle_id"
	AdasDataSelectColumnVehicleStatus    AdasDataSelectColumn = "vehicle_status"
)

var AllAdasDataSelectColumn = []AdasDataSelectColumn{
	AdasDataSelectColumnAdasAttachment,
	AdasDataSelectColumnAlarmID,
	AdasDataSelectColumnAlarmNo,
	AdasDataSelectColumnAlarmSource,
	AdasDataSelectColumnAlarmTime,
	AdasDataSelectColumnAlarmType,
	AdasDataSelectColumnAltitude,
	AdasDataSelectColumnCreatedDate,
	AdasDataSelectColumnFatigueDegree,
	AdasDataSelectColumnFrontCarDistance,
	AdasDataSelectColumnID,
	AdasDataSelectColumnLatitude,
	AdasDataSelectColumnLevels,
	AdasDataSelectColumnLocation,
	AdasDataSelectColumnLongitude,
	AdasDataSelectColumnPlateNo,
	AdasDataSelectColumnSimID,
	AdasDataSelectColumnSpeed,
	AdasDataSelectColumnTerminalID,
	AdasDataSelectColumnVehicleID,
	AdasDataSelectColumnVehicleStatus,
}

func (e AdasDataSelectColumn) IsValid() bool {
	switch e {
	case AdasDataSelectColumnAdasAttachment, AdasDataSelectColumnAlarmID, AdasDataSelectColumnAlarmNo, AdasDataSelectColumnAlarmSource, AdasDataSelectColumnAlarmTime, AdasDataSelectColumnAlarmType, AdasDataSelectColumnAltitude, AdasDataSelectColumnCreatedDate, AdasDataSelectColumnFatigueDegree, AdasDataSelectColumnFrontCarDistance, AdasDataSelectColumnID, AdasDataSelectColumnLatitude, AdasDataSelectColumnLevels, AdasDataSelectColumnLocation, AdasDataSelectColumnLongitude, AdasDataSelectColumnPlateNo, AdasDataSelectColumnSimID, AdasDataSelectColumnSpeed, AdasDataSelectColumnTerminalID, AdasDataSelectColumnVehicleID, AdasDataSelectColumnVehicleStatus:
		return true
	}
	return false
}

func (e AdasDataSelectColumn) String() string {
	return string(e)
}

func (e *AdasDataSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AdasDataSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid adas_data_select_column", str)
	}
	return nil
}

func (e AdasDataSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AdasDataUpdateColumn string

const (
	AdasDataUpdateColumnAdasAttachment   AdasDataUpdateColumn = "adas_attachment"
	AdasDataUpdateColumnAlarmID          AdasDataUpdateColumn = "alarm_id"
	AdasDataUpdateColumnAlarmNo          AdasDataUpdateColumn = "alarm_no"
	AdasDataUpdateColumnAlarmSource      AdasDataUpdateColumn = "alarm_source"
	AdasDataUpdateColumnAlarmTime        AdasDataUpdateColumn = "alarm_time"
	AdasDataUpdateColumnAlarmType        AdasDataUpdateColumn = "alarm_type"
	AdasDataUpdateColumnAltitude         AdasDataUpdateColumn = "altitude"
	AdasDataUpdateColumnCreatedDate      AdasDataUpdateColumn = "created_date"
	AdasDataUpdateColumnFatigueDegree    AdasDataUpdateColumn = "fatigue_degree"
	AdasDataUpdateColumnFrontCarDistance AdasDataUpdateColumn = "front_car_distance"
	AdasDataUpdateColumnID               AdasDataUpdateColumn = "id"
	AdasDataUpdateColumnLatitude         AdasDataUpdateColumn = "latitude"
	AdasDataUpdateColumnLevels           AdasDataUpdateColumn = "levels"
	AdasDataUpdateColumnLocation         AdasDataUpdateColumn = "location"
	AdasDataUpdateColumnLongitude        AdasDataUpdateColumn = "longitude"
	AdasDataUpdateColumnPlateNo          AdasDataUpdateColumn = "plate_no"
	AdasDataUpdateColumnSimID            AdasDataUpdateColumn = "sim_id"
	AdasDataUpdateColumnSpeed            AdasDataUpdateColumn = "speed"
	AdasDataUpdateColumnTerminalID       AdasDataUpdateColumn = "terminal_id"
	AdasDataUpdateColumnVehicleID        AdasDataUpdateColumn = "vehicle_id"
	AdasDataUpdateColumnVehicleStatus    AdasDataUpdateColumn = "vehicle_status"
)

var AllAdasDataUpdateColumn = []AdasDataUpdateColumn{
	AdasDataUpdateColumnAdasAttachment,
	AdasDataUpdateColumnAlarmID,
	AdasDataUpdateColumnAlarmNo,
	AdasDataUpdateColumnAlarmSource,
	AdasDataUpdateColumnAlarmTime,
	AdasDataUpdateColumnAlarmType,
	AdasDataUpdateColumnAltitude,
	AdasDataUpdateColumnCreatedDate,
	AdasDataUpdateColumnFatigueDegree,
	AdasDataUpdateColumnFrontCarDistance,
	AdasDataUpdateColumnID,
	AdasDataUpdateColumnLatitude,
	AdasDataUpdateColumnLevels,
	AdasDataUpdateColumnLocation,
	AdasDataUpdateColumnLongitude,
	AdasDataUpdateColumnPlateNo,
	AdasDataUpdateColumnSimID,
	AdasDataUpdateColumnSpeed,
	AdasDataUpdateColumnTerminalID,
	AdasDataUpdateColumnVehicleID,
	AdasDataUpdateColumnVehicleStatus,
}

func (e AdasDataUpdateColumn) IsValid() bool {
	switch e {
	case AdasDataUpdateColumnAdasAttachment, AdasDataUpdateColumnAlarmID, AdasDataUpdateColumnAlarmNo, AdasDataUpdateColumnAlarmSource, AdasDataUpdateColumnAlarmTime, AdasDataUpdateColumnAlarmType, AdasDataUpdateColumnAltitude, AdasDataUpdateColumnCreatedDate, AdasDataUpdateColumnFatigueDegree, AdasDataUpdateColumnFrontCarDistance, AdasDataUpdateColumnID, AdasDataUpdateColumnLatitude, AdasDataUpdateColumnLevels, AdasDataUpdateColumnLocation, AdasDataUpdateColumnLongitude, AdasDataUpdateColumnPlateNo, AdasDataUpdateColumnSimID, AdasDataUpdateColumnSpeed, AdasDataUpdateColumnTerminalID, AdasDataUpdateColumnVehicleID, AdasDataUpdateColumnVehicleStatus:
		return true
	}
	return false
}

func (e AdasDataUpdateColumn) String() string {
	return string(e)
}

func (e *AdasDataUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AdasDataUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid adas_data_update_column", str)
	}
	return nil
}

func (e AdasDataUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
