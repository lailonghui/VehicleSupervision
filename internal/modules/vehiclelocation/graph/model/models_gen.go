// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	model1 "VehicleSupervision/internal/modules/vehiclelocation/model"
	"VehicleSupervision/pkg/graphql/model"
	"fmt"
	"io"
	"strconv"
	"time"
)

// aggregated selection of "vehicle_location_his"
type VehicleLocationHisAggregate struct {
	Aggregate *VehicleLocationHisAggregateFields `json:"aggregate"`
}

// aggregate fields of "vehicle_location_his"
type VehicleLocationHisAggregateFields struct {
	Avg        *VehicleLocationHisAvgFields        `json:"avg"`
	Count      *int                                `json:"count"`
	Max        *VehicleLocationHisMaxFields        `json:"max"`
	Min        *VehicleLocationHisMinFields        `json:"min"`
	Stddev     *VehicleLocationHisStddevFields     `json:"stddev"`
	StddevPop  *VehicleLocationHisStddevPopFields  `json:"stddev_pop"`
	StddevSamp *VehicleLocationHisStddevSampFields `json:"stddev_samp"`
	Sum        *VehicleLocationHisSumFields        `json:"sum"`
	VarPop     *VehicleLocationHisVarPopFields     `json:"var_pop"`
	VarSamp    *VehicleLocationHisVarSampFields    `json:"var_samp"`
	Variance   *VehicleLocationHisVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "vehicle_location_his"
type VehicleLocationHisAvgFields struct {
	ID                  *int64   `json:"id"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
	GpsSpeed            *float64 `json:"gps_speed"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vehicle_location_his'.
type VehicleLocationHisBoolExp struct {
	And                 []*VehicleLocationHisBoolExp    `json:"_and"`
	Not                 *VehicleLocationHisBoolExp      `json:"_not"`
	Or                  []*VehicleLocationHisBoolExp    `json:"_or"`
	ID                  *model.BigintComparisonExp      `json:"id"`
	VehicleID           *model.StringComparisonExp      `json:"vehicle_id"`
	DriverID            *model.StringComparisonExp      `json:"driver_id"`
	EnterpriseID        *model.StringComparisonExp      `json:"enterprise_id"`
	SupervisionPhotoID  *model.StringComparisonExp      `json:"supervision_photo_id"`
	Acceleration        *model.StringComparisonExp      `json:"acceleration"`
	AlarmContent        *model.StringComparisonExp      `json:"alarm_content"`
	Alititude           *model.StringComparisonExp      `json:"alititude"`
	Direction           *model.StringComparisonExp      `json:"direction"`
	TachographSpeed     *model.NumericComparisonExp     `json:"tachograph_speed"`
	IsLocate            *model.BooleanComparisonExp     `json:"is_locate"`
	LocateTime          *model.TimestamptzComparisonExp `json:"locate_time"`
	Coordinate          *model.PointComparisonExp       `json:"coordinate"`
	LocationDescription *model.StringComparisonExp      `json:"location_description"`
	Mileage             *model.StringComparisonExp      `json:"mileage"`
	GpsSpeed            *model.NumericComparisonExp     `json:"gps_speed"`
	StarCount           *model.StringComparisonExp      `json:"star_count"`
	StarStatus          *model.StringComparisonExp      `json:"star_status"`
	RoadName            *model.StringComparisonExp      `json:"road_name"`
	SpeedLimitThreshold *model.NumericComparisonExp     `json:"speed_limit_threshold"`
	CorrectCoordinate   *model.PointComparisonExp       `json:"correct_coordinate"`
	VehicleStatus       *model.StringComparisonExp      `json:"vehicle_status"`
	Imei                *model.StringComparisonExp      `json:"imei"`
	SimNumber           *model.StringComparisonExp      `json:"sim_number"`
	DistrictID          *model.StringComparisonExp      `json:"district_id"`
}

// input type for incrementing integer column in table "vehicle_location_his"
type VehicleLocationHisIncInput struct {
	ID                  *int64   `json:"id"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
	GpsSpeed            *float64 `json:"gps_speed"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
}

// input type for inserting data into table "vehicle_location_his"
type VehicleLocationHisInsertInput struct {
	VehicleID           string     `json:"vehicle_id"`
	DriverID            *string    `json:"driver_id"`
	EnterpriseID        *string    `json:"enterprise_id"`
	SupervisionPhotoID  *string    `json:"supervision_photo_id"`
	Acceleration        *string    `json:"acceleration"`
	AlarmContent        *string    `json:"alarm_content"`
	Alititude           *string    `json:"alititude"`
	Direction           *string    `json:"direction"`
	TachographSpeed     *float64   `json:"tachograph_speed"`
	IsLocate            *bool      `json:"is_locate"`
	LocateTime          *time.Time `json:"locate_time"`
	Coordinate          *string    `json:"coordinate"`
	LocationDescription *string    `json:"location_description"`
	Mileage             *string    `json:"mileage"`
	GpsSpeed            *float64   `json:"gps_speed"`
	StarCount           *string    `json:"star_count"`
	StarStatus          *string    `json:"star_status"`
	RoadName            *string    `json:"road_name"`
	SpeedLimitThreshold *float64   `json:"speed_limit_threshold"`
	CorrectCoordinate   *string    `json:"correct_coordinate"`
	VehicleStatus       *string    `json:"vehicle_status"`
	Imei                *string    `json:"imei"`
	SimNumber           *string    `json:"sim_number"`
	DistrictID          *string    `json:"district_id"`
}

// aggregate max on columns of table "vehicle_location_his"
type VehicleLocationHisMaxFields struct {
	ID                  *int64     `json:"id"`
	VehicleID           *string    `json:"vehicle_id"`
	DriverID            *string    `json:"driver_id"`
	EnterpriseID        *string    `json:"enterprise_id"`
	SupervisionPhotoID  *string    `json:"supervision_photo_id"`
	Acceleration        *string    `json:"acceleration"`
	AlarmContent        *string    `json:"alarm_content"`
	Alititude           *string    `json:"alititude"`
	Direction           *string    `json:"direction"`
	TachographSpeed     *float64   `json:"tachograph_speed"`
	IsLocate            *bool      `json:"is_locate"`
	LocateTime          *time.Time `json:"locate_time"`
	Coordinate          *string    `json:"coordinate"`
	LocationDescription *string    `json:"location_description"`
	Mileage             *string    `json:"mileage"`
	GpsSpeed            *float64   `json:"gps_speed"`
	StarCount           *string    `json:"star_count"`
	StarStatus          *string    `json:"star_status"`
	RoadName            *string    `json:"road_name"`
	SpeedLimitThreshold *float64   `json:"speed_limit_threshold"`
	CorrectCoordinate   *string    `json:"correct_coordinate"`
	VehicleStatus       *string    `json:"vehicle_status"`
	Imei                *string    `json:"imei"`
	SimNumber           *string    `json:"sim_number"`
	DistrictID          *string    `json:"district_id"`
}

// aggregate min on columns of table "vehicle_location_his"
type VehicleLocationHisMinFields struct {
	ID                  *int64     `json:"id"`
	VehicleID           *string    `json:"vehicle_id"`
	DriverID            *string    `json:"driver_id"`
	EnterpriseID        *string    `json:"enterprise_id"`
	SupervisionPhotoID  *string    `json:"supervision_photo_id"`
	Acceleration        *string    `json:"acceleration"`
	AlarmContent        *string    `json:"alarm_content"`
	Alititude           *string    `json:"alititude"`
	Direction           *string    `json:"direction"`
	TachographSpeed     *float64   `json:"tachograph_speed"`
	IsLocate            *bool      `json:"is_locate"`
	LocateTime          *time.Time `json:"locate_time"`
	Coordinate          *string    `json:"coordinate"`
	LocationDescription *string    `json:"location_description"`
	Mileage             *string    `json:"mileage"`
	GpsSpeed            *float64   `json:"gps_speed"`
	StarCount           *string    `json:"star_count"`
	StarStatus          *string    `json:"star_status"`
	RoadName            *string    `json:"road_name"`
	SpeedLimitThreshold *float64   `json:"speed_limit_threshold"`
	CorrectCoordinate   *string    `json:"correct_coordinate"`
	VehicleStatus       *string    `json:"vehicle_status"`
	Imei                *string    `json:"imei"`
	SimNumber           *string    `json:"sim_number"`
	DistrictID          *string    `json:"district_id"`
}

// response of any mutation on the table "vehicle_location_his"
type VehicleLocationHisMutationResponse struct {
	AffectedRows int                          `json:"affected_rows"`
	Returning    []*model1.VehicleLocationHis `json:"returning"`
}

// ordering options when selecting data from "vehicle_location_his"
type VehicleLocationHisOrderBy struct {
	ID                  *model.OrderBy `json:"id"`
	VehicleID           *model.OrderBy `json:"vehicle_id"`
	DriverID            *model.OrderBy `json:"driver_id"`
	EnterpriseID        *model.OrderBy `json:"enterprise_id"`
	SupervisionPhotoID  *model.OrderBy `json:"supervision_photo_id"`
	Acceleration        *model.OrderBy `json:"acceleration"`
	AlarmContent        *model.OrderBy `json:"alarm_content"`
	Alititude           *model.OrderBy `json:"alititude"`
	Direction           *model.OrderBy `json:"direction"`
	TachographSpeed     *model.OrderBy `json:"tachograph_speed"`
	IsLocate            *model.OrderBy `json:"is_locate"`
	LocateTime          *model.OrderBy `json:"locate_time"`
	Coordinate          *model.OrderBy `json:"coordinate"`
	LocationDescription *model.OrderBy `json:"location_description"`
	Mileage             *model.OrderBy `json:"mileage"`
	GpsSpeed            *model.OrderBy `json:"gps_speed"`
	StarCount           *model.OrderBy `json:"star_count"`
	StarStatus          *model.OrderBy `json:"star_status"`
	RoadName            *model.OrderBy `json:"road_name"`
	SpeedLimitThreshold *model.OrderBy `json:"speed_limit_threshold"`
	CorrectCoordinate   *model.OrderBy `json:"correct_coordinate"`
	VehicleStatus       *model.OrderBy `json:"vehicle_status"`
	Imei                *model.OrderBy `json:"imei"`
	SimNumber           *model.OrderBy `json:"sim_number"`
	DistrictID          *model.OrderBy `json:"district_id"`
}

// input type for updating data in table "vehicle_location_his"
type VehicleLocationHisSetInput struct {
	ID                  *int64     `json:"id"`
	VehicleID           *string    `json:"vehicle_id"`
	DriverID            *string    `json:"driver_id"`
	EnterpriseID        *string    `json:"enterprise_id"`
	SupervisionPhotoID  *string    `json:"supervision_photo_id"`
	Acceleration        *string    `json:"acceleration"`
	AlarmContent        *string    `json:"alarm_content"`
	Alititude           *string    `json:"alititude"`
	Direction           *string    `json:"direction"`
	TachographSpeed     *float64   `json:"tachograph_speed"`
	IsLocate            *bool      `json:"is_locate"`
	LocateTime          *time.Time `json:"locate_time"`
	Coordinate          *string    `json:"coordinate"`
	LocationDescription *string    `json:"location_description"`
	Mileage             *string    `json:"mileage"`
	GpsSpeed            *float64   `json:"gps_speed"`
	StarCount           *string    `json:"star_count"`
	StarStatus          *string    `json:"star_status"`
	RoadName            *string    `json:"road_name"`
	SpeedLimitThreshold *float64   `json:"speed_limit_threshold"`
	CorrectCoordinate   *string    `json:"correct_coordinate"`
	VehicleStatus       *string    `json:"vehicle_status"`
	Imei                *string    `json:"imei"`
	SimNumber           *string    `json:"sim_number"`
	DistrictID          *string    `json:"district_id"`
}

// aggregate stddev on columns of table "vehicle_location_his"
type VehicleLocationHisStddevFields struct {
	ID                  *int64   `json:"id"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
	GpsSpeed            *float64 `json:"gps_speed"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
}

// aggregate stddev_pop on columns of table "vehicle_location_his"
type VehicleLocationHisStddevPopFields struct {
	ID                  *int64   `json:"id"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
	GpsSpeed            *float64 `json:"gps_speed"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
}

// aggregate stddev_samp on columns of table "vehicle_location_his"
type VehicleLocationHisStddevSampFields struct {
	ID                  *int64   `json:"id"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
	GpsSpeed            *float64 `json:"gps_speed"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
}

// aggregate sum on columns of table "vehicle_location_his"
type VehicleLocationHisSumFields struct {
	ID                  *int64   `json:"id"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
	GpsSpeed            *float64 `json:"gps_speed"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
}

// aggregate var_pop on columns of table "vehicle_location_his"
type VehicleLocationHisVarPopFields struct {
	ID                  *int64   `json:"id"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
	GpsSpeed            *float64 `json:"gps_speed"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
}

// aggregate var_samp on columns of table "vehicle_location_his"
type VehicleLocationHisVarSampFields struct {
	ID                  *int64   `json:"id"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
	GpsSpeed            *float64 `json:"gps_speed"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
}

// aggregate variance on columns of table "vehicle_location_his"
type VehicleLocationHisVarianceFields struct {
	ID                  *int64   `json:"id"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
	GpsSpeed            *float64 `json:"gps_speed"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
}

// aggregated selection of "vehicle_location_last"
type VehicleLocationLastAggregate struct {
	Aggregate *VehicleLocationLastAggregateFields `json:"aggregate"`
}

// aggregate fields of "vehicle_location_last"
type VehicleLocationLastAggregateFields struct {
	Avg        *VehicleLocationLastAvgFields        `json:"avg"`
	Count      *int                                 `json:"count"`
	Max        *VehicleLocationLastMaxFields        `json:"max"`
	Min        *VehicleLocationLastMinFields        `json:"min"`
	Stddev     *VehicleLocationLastStddevFields     `json:"stddev"`
	StddevPop  *VehicleLocationLastStddevPopFields  `json:"stddev_pop"`
	StddevSamp *VehicleLocationLastStddevSampFields `json:"stddev_samp"`
	Sum        *VehicleLocationLastSumFields        `json:"sum"`
	VarPop     *VehicleLocationLastVarPopFields     `json:"var_pop"`
	VarSamp    *VehicleLocationLastVarSampFields    `json:"var_samp"`
	Variance   *VehicleLocationLastVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "vehicle_location_last"
type VehicleLocationLastAvgFields struct {
	ID                  *int64   `json:"id"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
	GpsSpeed            *float64 `json:"gps_speed"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vehicle_location_last'.
type VehicleLocationLastBoolExp struct {
	And                 []*VehicleLocationLastBoolExp   `json:"_and"`
	Not                 *VehicleLocationLastBoolExp     `json:"_not"`
	Or                  []*VehicleLocationLastBoolExp   `json:"_or"`
	ID                  *model.BigintComparisonExp      `json:"id"`
	VehicleID           *model.StringComparisonExp      `json:"vehicle_id"`
	DriverID            *model.StringComparisonExp      `json:"driver_id"`
	EnterpriseID        *model.StringComparisonExp      `json:"enterprise_id"`
	SupervisionPhotoID  *model.StringComparisonExp      `json:"supervision_photo_id"`
	Acceleration        *model.StringComparisonExp      `json:"acceleration"`
	AlarmContent        *model.StringComparisonExp      `json:"alarm_content"`
	Alititude           *model.StringComparisonExp      `json:"alititude"`
	Direction           *model.StringComparisonExp      `json:"direction"`
	TachographSpeed     *model.NumericComparisonExp     `json:"tachograph_speed"`
	IsLocate            *model.BooleanComparisonExp     `json:"is_locate"`
	LocateTime          *model.TimestamptzComparisonExp `json:"locate_time"`
	Coordinate          *model.PointComparisonExp       `json:"coordinate"`
	LocationDescription *model.StringComparisonExp      `json:"location_description"`
	Mileage             *model.StringComparisonExp      `json:"mileage"`
	GpsSpeed            *model.NumericComparisonExp     `json:"gps_speed"`
	StarCount           *model.StringComparisonExp      `json:"star_count"`
	StarStatus          *model.StringComparisonExp      `json:"star_status"`
	RoadName            *model.StringComparisonExp      `json:"road_name"`
	SpeedLimitThreshold *model.NumericComparisonExp     `json:"speed_limit_threshold"`
	CorrectCoordinate   *model.PointComparisonExp       `json:"correct_coordinate"`
	VehicleStatus       *model.StringComparisonExp      `json:"vehicle_status"`
	Imei                *model.StringComparisonExp      `json:"imei"`
	SimNumber           *model.StringComparisonExp      `json:"sim_number"`
	DistrictID          *model.StringComparisonExp      `json:"district_id"`
}

// input type for incrementing integer column in table "vehicle_location_last"
type VehicleLocationLastIncInput struct {
	ID                  *int64   `json:"id"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
	GpsSpeed            *float64 `json:"gps_speed"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
}

// input type for inserting data into table "vehicle_location_last"
type VehicleLocationLastInsertInput struct {
	VehicleID           string     `json:"vehicle_id"`
	DriverID            *string    `json:"driver_id"`
	EnterpriseID        *string    `json:"enterprise_id"`
	SupervisionPhotoID  *string    `json:"supervision_photo_id"`
	Acceleration        *string    `json:"acceleration"`
	AlarmContent        *string    `json:"alarm_content"`
	Alititude           *string    `json:"alititude"`
	Direction           *string    `json:"direction"`
	TachographSpeed     *float64   `json:"tachograph_speed"`
	IsLocate            *bool      `json:"is_locate"`
	LocateTime          *time.Time `json:"locate_time"`
	Coordinate          *string    `json:"coordinate"`
	LocationDescription *string    `json:"location_description"`
	Mileage             *string    `json:"mileage"`
	GpsSpeed            *float64   `json:"gps_speed"`
	StarCount           *string    `json:"star_count"`
	StarStatus          *string    `json:"star_status"`
	RoadName            *string    `json:"road_name"`
	SpeedLimitThreshold *float64   `json:"speed_limit_threshold"`
	CorrectCoordinate   *string    `json:"correct_coordinate"`
	VehicleStatus       *string    `json:"vehicle_status"`
	Imei                *string    `json:"imei"`
	SimNumber           *string    `json:"sim_number"`
	DistrictID          *string    `json:"district_id"`
}

// aggregate max on columns of table "vehicle_location_last"
type VehicleLocationLastMaxFields struct {
	ID                  *int64     `json:"id"`
	VehicleID           *string    `json:"vehicle_id"`
	DriverID            *string    `json:"driver_id"`
	EnterpriseID        *string    `json:"enterprise_id"`
	SupervisionPhotoID  *string    `json:"supervision_photo_id"`
	Acceleration        *string    `json:"acceleration"`
	AlarmContent        *string    `json:"alarm_content"`
	Alititude           *string    `json:"alititude"`
	Direction           *string    `json:"direction"`
	TachographSpeed     *float64   `json:"tachograph_speed"`
	IsLocate            *bool      `json:"is_locate"`
	LocateTime          *time.Time `json:"locate_time"`
	Coordinate          *string    `json:"coordinate"`
	LocationDescription *string    `json:"location_description"`
	Mileage             *string    `json:"mileage"`
	GpsSpeed            *float64   `json:"gps_speed"`
	StarCount           *string    `json:"star_count"`
	StarStatus          *string    `json:"star_status"`
	RoadName            *string    `json:"road_name"`
	SpeedLimitThreshold *float64   `json:"speed_limit_threshold"`
	CorrectCoordinate   *string    `json:"correct_coordinate"`
	VehicleStatus       *string    `json:"vehicle_status"`
	Imei                *string    `json:"imei"`
	SimNumber           *string    `json:"sim_number"`
	DistrictID          *string    `json:"district_id"`
}

// aggregate min on columns of table "vehicle_location_last"
type VehicleLocationLastMinFields struct {
	ID                  *int64     `json:"id"`
	VehicleID           *string    `json:"vehicle_id"`
	DriverID            *string    `json:"driver_id"`
	EnterpriseID        *string    `json:"enterprise_id"`
	SupervisionPhotoID  *string    `json:"supervision_photo_id"`
	Acceleration        *string    `json:"acceleration"`
	AlarmContent        *string    `json:"alarm_content"`
	Alititude           *string    `json:"alititude"`
	Direction           *string    `json:"direction"`
	TachographSpeed     *float64   `json:"tachograph_speed"`
	IsLocate            *bool      `json:"is_locate"`
	LocateTime          *time.Time `json:"locate_time"`
	Coordinate          *string    `json:"coordinate"`
	LocationDescription *string    `json:"location_description"`
	Mileage             *string    `json:"mileage"`
	GpsSpeed            *float64   `json:"gps_speed"`
	StarCount           *string    `json:"star_count"`
	StarStatus          *string    `json:"star_status"`
	RoadName            *string    `json:"road_name"`
	SpeedLimitThreshold *float64   `json:"speed_limit_threshold"`
	CorrectCoordinate   *string    `json:"correct_coordinate"`
	VehicleStatus       *string    `json:"vehicle_status"`
	Imei                *string    `json:"imei"`
	SimNumber           *string    `json:"sim_number"`
	DistrictID          *string    `json:"district_id"`
}

// response of any mutation on the table "vehicle_location_last"
type VehicleLocationLastMutationResponse struct {
	AffectedRows int                           `json:"affected_rows"`
	Returning    []*model1.VehicleLocationLast `json:"returning"`
}

// ordering options when selecting data from "vehicle_location_last"
type VehicleLocationLastOrderBy struct {
	ID                  *model.OrderBy `json:"id"`
	VehicleID           *model.OrderBy `json:"vehicle_id"`
	DriverID            *model.OrderBy `json:"driver_id"`
	EnterpriseID        *model.OrderBy `json:"enterprise_id"`
	SupervisionPhotoID  *model.OrderBy `json:"supervision_photo_id"`
	Acceleration        *model.OrderBy `json:"acceleration"`
	AlarmContent        *model.OrderBy `json:"alarm_content"`
	Alititude           *model.OrderBy `json:"alititude"`
	Direction           *model.OrderBy `json:"direction"`
	TachographSpeed     *model.OrderBy `json:"tachograph_speed"`
	IsLocate            *model.OrderBy `json:"is_locate"`
	LocateTime          *model.OrderBy `json:"locate_time"`
	Coordinate          *model.OrderBy `json:"coordinate"`
	LocationDescription *model.OrderBy `json:"location_description"`
	Mileage             *model.OrderBy `json:"mileage"`
	GpsSpeed            *model.OrderBy `json:"gps_speed"`
	StarCount           *model.OrderBy `json:"star_count"`
	StarStatus          *model.OrderBy `json:"star_status"`
	RoadName            *model.OrderBy `json:"road_name"`
	SpeedLimitThreshold *model.OrderBy `json:"speed_limit_threshold"`
	CorrectCoordinate   *model.OrderBy `json:"correct_coordinate"`
	VehicleStatus       *model.OrderBy `json:"vehicle_status"`
	Imei                *model.OrderBy `json:"imei"`
	SimNumber           *model.OrderBy `json:"sim_number"`
	DistrictID          *model.OrderBy `json:"district_id"`
}

// input type for updating data in table "vehicle_location_last"
type VehicleLocationLastSetInput struct {
	ID                  *int64     `json:"id"`
	VehicleID           *string    `json:"vehicle_id"`
	DriverID            *string    `json:"driver_id"`
	EnterpriseID        *string    `json:"enterprise_id"`
	SupervisionPhotoID  *string    `json:"supervision_photo_id"`
	Acceleration        *string    `json:"acceleration"`
	AlarmContent        *string    `json:"alarm_content"`
	Alititude           *string    `json:"alititude"`
	Direction           *string    `json:"direction"`
	TachographSpeed     *float64   `json:"tachograph_speed"`
	IsLocate            *bool      `json:"is_locate"`
	LocateTime          *time.Time `json:"locate_time"`
	Coordinate          *string    `json:"coordinate"`
	LocationDescription *string    `json:"location_description"`
	Mileage             *string    `json:"mileage"`
	GpsSpeed            *float64   `json:"gps_speed"`
	StarCount           *string    `json:"star_count"`
	StarStatus          *string    `json:"star_status"`
	RoadName            *string    `json:"road_name"`
	SpeedLimitThreshold *float64   `json:"speed_limit_threshold"`
	CorrectCoordinate   *string    `json:"correct_coordinate"`
	VehicleStatus       *string    `json:"vehicle_status"`
	Imei                *string    `json:"imei"`
	SimNumber           *string    `json:"sim_number"`
	DistrictID          *string    `json:"district_id"`
}

// aggregate stddev on columns of table "vehicle_location_last"
type VehicleLocationLastStddevFields struct {
	ID                  *int64   `json:"id"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
	GpsSpeed            *float64 `json:"gps_speed"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
}

// aggregate stddev_pop on columns of table "vehicle_location_last"
type VehicleLocationLastStddevPopFields struct {
	ID                  *int64   `json:"id"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
	GpsSpeed            *float64 `json:"gps_speed"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
}

// aggregate stddev_samp on columns of table "vehicle_location_last"
type VehicleLocationLastStddevSampFields struct {
	ID                  *int64   `json:"id"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
	GpsSpeed            *float64 `json:"gps_speed"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
}

// aggregate sum on columns of table "vehicle_location_last"
type VehicleLocationLastSumFields struct {
	ID                  *int64   `json:"id"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
	GpsSpeed            *float64 `json:"gps_speed"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
}

// aggregate var_pop on columns of table "vehicle_location_last"
type VehicleLocationLastVarPopFields struct {
	ID                  *int64   `json:"id"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
	GpsSpeed            *float64 `json:"gps_speed"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
}

// aggregate var_samp on columns of table "vehicle_location_last"
type VehicleLocationLastVarSampFields struct {
	ID                  *int64   `json:"id"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
	GpsSpeed            *float64 `json:"gps_speed"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
}

// aggregate variance on columns of table "vehicle_location_last"
type VehicleLocationLastVarianceFields struct {
	ID                  *int64   `json:"id"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
	GpsSpeed            *float64 `json:"gps_speed"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
}

// 可选select
type VehicleLocationHisSelectColumn string

const (
	// ID
	VehicleLocationHisSelectColumnID VehicleLocationHisSelectColumn = "id"
	// 车辆ID
	VehicleLocationHisSelectColumnVehicleID VehicleLocationHisSelectColumn = "vehicle_id"
	// 驾驶员ID
	VehicleLocationHisSelectColumnDriverID VehicleLocationHisSelectColumn = "driver_id"
	// 企业ID
	VehicleLocationHisSelectColumnEnterpriseID VehicleLocationHisSelectColumn = "enterprise_id"
	// 监控图片ID
	VehicleLocationHisSelectColumnSupervisionPhotoID VehicleLocationHisSelectColumn = "supervision_photo_id"
	// 加速度
	VehicleLocationHisSelectColumnAcceleration VehicleLocationHisSelectColumn = "acceleration"
	// 报警内容
	VehicleLocationHisSelectColumnAlarmContent VehicleLocationHisSelectColumn = "alarm_content"
	// 海拔
	VehicleLocationHisSelectColumnAlititude VehicleLocationHisSelectColumn = "alititude"
	// 方向
	VehicleLocationHisSelectColumnDirection VehicleLocationHisSelectColumn = "direction"
	// 行驶记录仪速度
	VehicleLocationHisSelectColumnTachographSpeed VehicleLocationHisSelectColumn = "tachograph_speed"
	// 是否定位
	VehicleLocationHisSelectColumnIsLocate VehicleLocationHisSelectColumn = "is_locate"
	// 定位时间
	VehicleLocationHisSelectColumnLocateTime VehicleLocationHisSelectColumn = "locate_time"
	// 坐标
	VehicleLocationHisSelectColumnCoordinate VehicleLocationHisSelectColumn = "coordinate"
	// 位置描述
	VehicleLocationHisSelectColumnLocationDescription VehicleLocationHisSelectColumn = "location_description"
	// 里程
	VehicleLocationHisSelectColumnMileage VehicleLocationHisSelectColumn = "mileage"
	// GPS速度
	VehicleLocationHisSelectColumnGpsSpeed VehicleLocationHisSelectColumn = "gps_speed"
	// 星数
	VehicleLocationHisSelectColumnStarCount VehicleLocationHisSelectColumn = "star_count"
	// 星况
	VehicleLocationHisSelectColumnStarStatus VehicleLocationHisSelectColumn = "star_status"
	// 道路名称
	VehicleLocationHisSelectColumnRoadName VehicleLocationHisSelectColumn = "road_name"
	// 限速阀值
	VehicleLocationHisSelectColumnSpeedLimitThreshold VehicleLocationHisSelectColumn = "speed_limit_threshold"
	// 纠偏后坐标
	VehicleLocationHisSelectColumnCorrectCoordinate VehicleLocationHisSelectColumn = "correct_coordinate"
	// 车辆状态
	VehicleLocationHisSelectColumnVehicleStatus VehicleLocationHisSelectColumn = "vehicle_status"
	// 终端IMEI
	VehicleLocationHisSelectColumnImei VehicleLocationHisSelectColumn = "imei"
	// SIM卡号
	VehicleLocationHisSelectColumnSimNumber VehicleLocationHisSelectColumn = "sim_number"
	// 区域ID
	VehicleLocationHisSelectColumnDistrictID VehicleLocationHisSelectColumn = "district_id"
)

var AllVehicleLocationHisSelectColumn = []VehicleLocationHisSelectColumn{
	VehicleLocationHisSelectColumnID,
	VehicleLocationHisSelectColumnVehicleID,
	VehicleLocationHisSelectColumnDriverID,
	VehicleLocationHisSelectColumnEnterpriseID,
	VehicleLocationHisSelectColumnSupervisionPhotoID,
	VehicleLocationHisSelectColumnAcceleration,
	VehicleLocationHisSelectColumnAlarmContent,
	VehicleLocationHisSelectColumnAlititude,
	VehicleLocationHisSelectColumnDirection,
	VehicleLocationHisSelectColumnTachographSpeed,
	VehicleLocationHisSelectColumnIsLocate,
	VehicleLocationHisSelectColumnLocateTime,
	VehicleLocationHisSelectColumnCoordinate,
	VehicleLocationHisSelectColumnLocationDescription,
	VehicleLocationHisSelectColumnMileage,
	VehicleLocationHisSelectColumnGpsSpeed,
	VehicleLocationHisSelectColumnStarCount,
	VehicleLocationHisSelectColumnStarStatus,
	VehicleLocationHisSelectColumnRoadName,
	VehicleLocationHisSelectColumnSpeedLimitThreshold,
	VehicleLocationHisSelectColumnCorrectCoordinate,
	VehicleLocationHisSelectColumnVehicleStatus,
	VehicleLocationHisSelectColumnImei,
	VehicleLocationHisSelectColumnSimNumber,
	VehicleLocationHisSelectColumnDistrictID,
}

func (e VehicleLocationHisSelectColumn) IsValid() bool {
	switch e {
	case VehicleLocationHisSelectColumnID, VehicleLocationHisSelectColumnVehicleID, VehicleLocationHisSelectColumnDriverID, VehicleLocationHisSelectColumnEnterpriseID, VehicleLocationHisSelectColumnSupervisionPhotoID, VehicleLocationHisSelectColumnAcceleration, VehicleLocationHisSelectColumnAlarmContent, VehicleLocationHisSelectColumnAlititude, VehicleLocationHisSelectColumnDirection, VehicleLocationHisSelectColumnTachographSpeed, VehicleLocationHisSelectColumnIsLocate, VehicleLocationHisSelectColumnLocateTime, VehicleLocationHisSelectColumnCoordinate, VehicleLocationHisSelectColumnLocationDescription, VehicleLocationHisSelectColumnMileage, VehicleLocationHisSelectColumnGpsSpeed, VehicleLocationHisSelectColumnStarCount, VehicleLocationHisSelectColumnStarStatus, VehicleLocationHisSelectColumnRoadName, VehicleLocationHisSelectColumnSpeedLimitThreshold, VehicleLocationHisSelectColumnCorrectCoordinate, VehicleLocationHisSelectColumnVehicleStatus, VehicleLocationHisSelectColumnImei, VehicleLocationHisSelectColumnSimNumber, VehicleLocationHisSelectColumnDistrictID:
		return true
	}
	return false
}

func (e VehicleLocationHisSelectColumn) String() string {
	return string(e)
}

func (e *VehicleLocationHisSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleLocationHisSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VehicleLocationHisSelectColumn", str)
	}
	return nil
}

func (e VehicleLocationHisSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type VehicleLocationLastSelectColumn string

const (
	// ID
	VehicleLocationLastSelectColumnID VehicleLocationLastSelectColumn = "id"
	// 车辆ID
	VehicleLocationLastSelectColumnVehicleID VehicleLocationLastSelectColumn = "vehicle_id"
	// 驾驶员ID
	VehicleLocationLastSelectColumnDriverID VehicleLocationLastSelectColumn = "driver_id"
	// 企业ID
	VehicleLocationLastSelectColumnEnterpriseID VehicleLocationLastSelectColumn = "enterprise_id"
	// 监控图片ID
	VehicleLocationLastSelectColumnSupervisionPhotoID VehicleLocationLastSelectColumn = "supervision_photo_id"
	// 加速度
	VehicleLocationLastSelectColumnAcceleration VehicleLocationLastSelectColumn = "acceleration"
	// 报警内容
	VehicleLocationLastSelectColumnAlarmContent VehicleLocationLastSelectColumn = "alarm_content"
	// 海拔
	VehicleLocationLastSelectColumnAlititude VehicleLocationLastSelectColumn = "alititude"
	// 方向
	VehicleLocationLastSelectColumnDirection VehicleLocationLastSelectColumn = "direction"
	// 行驶记录仪速度
	VehicleLocationLastSelectColumnTachographSpeed VehicleLocationLastSelectColumn = "tachograph_speed"
	// 是否定位
	VehicleLocationLastSelectColumnIsLocate VehicleLocationLastSelectColumn = "is_locate"
	// 定位时间
	VehicleLocationLastSelectColumnLocateTime VehicleLocationLastSelectColumn = "locate_time"
	// 坐标
	VehicleLocationLastSelectColumnCoordinate VehicleLocationLastSelectColumn = "coordinate"
	// 位置描述
	VehicleLocationLastSelectColumnLocationDescription VehicleLocationLastSelectColumn = "location_description"
	// 里程
	VehicleLocationLastSelectColumnMileage VehicleLocationLastSelectColumn = "mileage"
	// GPS速度
	VehicleLocationLastSelectColumnGpsSpeed VehicleLocationLastSelectColumn = "gps_speed"
	// 星数
	VehicleLocationLastSelectColumnStarCount VehicleLocationLastSelectColumn = "star_count"
	// 星况
	VehicleLocationLastSelectColumnStarStatus VehicleLocationLastSelectColumn = "star_status"
	// 道路名称
	VehicleLocationLastSelectColumnRoadName VehicleLocationLastSelectColumn = "road_name"
	// 限速阀值
	VehicleLocationLastSelectColumnSpeedLimitThreshold VehicleLocationLastSelectColumn = "speed_limit_threshold"
	// 纠偏后坐标
	VehicleLocationLastSelectColumnCorrectCoordinate VehicleLocationLastSelectColumn = "correct_coordinate"
	// 车辆状态
	VehicleLocationLastSelectColumnVehicleStatus VehicleLocationLastSelectColumn = "vehicle_status"
	// 终端IMEI
	VehicleLocationLastSelectColumnImei VehicleLocationLastSelectColumn = "imei"
	// SIM卡号
	VehicleLocationLastSelectColumnSimNumber VehicleLocationLastSelectColumn = "sim_number"
	// 区域ID
	VehicleLocationLastSelectColumnDistrictID VehicleLocationLastSelectColumn = "district_id"
)

var AllVehicleLocationLastSelectColumn = []VehicleLocationLastSelectColumn{
	VehicleLocationLastSelectColumnID,
	VehicleLocationLastSelectColumnVehicleID,
	VehicleLocationLastSelectColumnDriverID,
	VehicleLocationLastSelectColumnEnterpriseID,
	VehicleLocationLastSelectColumnSupervisionPhotoID,
	VehicleLocationLastSelectColumnAcceleration,
	VehicleLocationLastSelectColumnAlarmContent,
	VehicleLocationLastSelectColumnAlititude,
	VehicleLocationLastSelectColumnDirection,
	VehicleLocationLastSelectColumnTachographSpeed,
	VehicleLocationLastSelectColumnIsLocate,
	VehicleLocationLastSelectColumnLocateTime,
	VehicleLocationLastSelectColumnCoordinate,
	VehicleLocationLastSelectColumnLocationDescription,
	VehicleLocationLastSelectColumnMileage,
	VehicleLocationLastSelectColumnGpsSpeed,
	VehicleLocationLastSelectColumnStarCount,
	VehicleLocationLastSelectColumnStarStatus,
	VehicleLocationLastSelectColumnRoadName,
	VehicleLocationLastSelectColumnSpeedLimitThreshold,
	VehicleLocationLastSelectColumnCorrectCoordinate,
	VehicleLocationLastSelectColumnVehicleStatus,
	VehicleLocationLastSelectColumnImei,
	VehicleLocationLastSelectColumnSimNumber,
	VehicleLocationLastSelectColumnDistrictID,
}

func (e VehicleLocationLastSelectColumn) IsValid() bool {
	switch e {
	case VehicleLocationLastSelectColumnID, VehicleLocationLastSelectColumnVehicleID, VehicleLocationLastSelectColumnDriverID, VehicleLocationLastSelectColumnEnterpriseID, VehicleLocationLastSelectColumnSupervisionPhotoID, VehicleLocationLastSelectColumnAcceleration, VehicleLocationLastSelectColumnAlarmContent, VehicleLocationLastSelectColumnAlititude, VehicleLocationLastSelectColumnDirection, VehicleLocationLastSelectColumnTachographSpeed, VehicleLocationLastSelectColumnIsLocate, VehicleLocationLastSelectColumnLocateTime, VehicleLocationLastSelectColumnCoordinate, VehicleLocationLastSelectColumnLocationDescription, VehicleLocationLastSelectColumnMileage, VehicleLocationLastSelectColumnGpsSpeed, VehicleLocationLastSelectColumnStarCount, VehicleLocationLastSelectColumnStarStatus, VehicleLocationLastSelectColumnRoadName, VehicleLocationLastSelectColumnSpeedLimitThreshold, VehicleLocationLastSelectColumnCorrectCoordinate, VehicleLocationLastSelectColumnVehicleStatus, VehicleLocationLastSelectColumnImei, VehicleLocationLastSelectColumnSimNumber, VehicleLocationLastSelectColumnDistrictID:
		return true
	}
	return false
}

func (e VehicleLocationLastSelectColumn) String() string {
	return string(e)
}

func (e *VehicleLocationLastSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleLocationLastSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VehicleLocationLastSelectColumn", str)
	}
	return nil
}

func (e VehicleLocationLastSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
