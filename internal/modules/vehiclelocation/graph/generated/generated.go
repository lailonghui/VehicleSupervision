// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"VehicleSupervision/internal/modules/vehiclelocation/graph/model"
	model1 "VehicleSupervision/internal/modules/vehiclelocation/model"
	model2 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Mutation struct {
		DeleteVehicleLocationHis      func(childComplexity int, where model.VehicleLocationHisBoolExp) int
		DeleteVehicleLocationHisByPk  func(childComplexity int, id int64) int
		DeleteVehicleLocationLast     func(childComplexity int, where model.VehicleLocationLastBoolExp) int
		DeleteVehicleLocationLastByPk func(childComplexity int, id int64) int
		InsertVehicleLocationHis      func(childComplexity int, objects []*model.VehicleLocationHisInsertInput) int
		InsertVehicleLocationHisOne   func(childComplexity int, objects model.VehicleLocationHisInsertInput) int
		InsertVehicleLocationLast     func(childComplexity int, objects []*model.VehicleLocationLastInsertInput) int
		InsertVehicleLocationLastOne  func(childComplexity int, objects model.VehicleLocationLastInsertInput) int
		UpdateVehicleLocationHis      func(childComplexity int, inc *model.VehicleLocationHisIncInput, set *model.VehicleLocationHisSetInput, where model.VehicleLocationHisBoolExp) int
		UpdateVehicleLocationHisByPk  func(childComplexity int, inc *model.VehicleLocationHisIncInput, set *model.VehicleLocationHisSetInput, id int64) int
		UpdateVehicleLocationLast     func(childComplexity int, inc *model.VehicleLocationLastIncInput, set *model.VehicleLocationLastSetInput, where model.VehicleLocationLastBoolExp) int
		UpdateVehicleLocationLastByPk func(childComplexity int, inc *model.VehicleLocationLastIncInput, set *model.VehicleLocationLastSetInput, id int64) int
	}

	Query struct {
		VehicleLocationHis           func(childComplexity int, distinctOn []model.VehicleLocationHisSelectColumn, limit *int, offset *int, orderBy []*model.VehicleLocationHisOrderBy, where *model.VehicleLocationHisBoolExp) int
		VehicleLocationHisAggregate  func(childComplexity int, distinctOn []model.VehicleLocationHisSelectColumn, limit *int, offset *int, orderBy []*model.VehicleLocationHisOrderBy, where *model.VehicleLocationHisBoolExp) int
		VehicleLocationHisByPk       func(childComplexity int, id int64) int
		VehicleLocationLast          func(childComplexity int, distinctOn []model.VehicleLocationLastSelectColumn, limit *int, offset *int, orderBy []*model.VehicleLocationLastOrderBy, where *model.VehicleLocationLastBoolExp) int
		VehicleLocationLastAggregate func(childComplexity int, distinctOn []model.VehicleLocationLastSelectColumn, limit *int, offset *int, orderBy []*model.VehicleLocationLastOrderBy, where *model.VehicleLocationLastBoolExp) int
		VehicleLocationLastByPk      func(childComplexity int, id int64) int
	}

	VehicleLocationHis struct {
		Acceleration        func(childComplexity int) int
		AlarmContent        func(childComplexity int) int
		Alititude           func(childComplexity int) int
		Coordinate          func(childComplexity int) int
		CorrectCoordinate   func(childComplexity int) int
		Direction           func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		DriverID            func(childComplexity int) int
		EnterpriseID        func(childComplexity int) int
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		Imei                func(childComplexity int) int
		IsLocate            func(childComplexity int) int
		LocateTime          func(childComplexity int) int
		LocationDescription func(childComplexity int) int
		Mileage             func(childComplexity int) int
		RoadName            func(childComplexity int) int
		SimNumber           func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		StarCount           func(childComplexity int) int
		StarStatus          func(childComplexity int) int
		SupervisionPhotoID  func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
		VehicleID           func(childComplexity int) int
		VehicleStatus       func(childComplexity int) int
	}

	VehicleLocationHisAggregate struct {
		Aggregate func(childComplexity int) int
	}

	VehicleLocationHisAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VehicleLocationHisAvgFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationHisMaxFields struct {
		Acceleration        func(childComplexity int) int
		AlarmContent        func(childComplexity int) int
		Alititude           func(childComplexity int) int
		Coordinate          func(childComplexity int) int
		CorrectCoordinate   func(childComplexity int) int
		Direction           func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		DriverID            func(childComplexity int) int
		EnterpriseID        func(childComplexity int) int
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		Imei                func(childComplexity int) int
		IsLocate            func(childComplexity int) int
		LocateTime          func(childComplexity int) int
		LocationDescription func(childComplexity int) int
		Mileage             func(childComplexity int) int
		RoadName            func(childComplexity int) int
		SimNumber           func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		StarCount           func(childComplexity int) int
		StarStatus          func(childComplexity int) int
		SupervisionPhotoID  func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
		VehicleID           func(childComplexity int) int
		VehicleStatus       func(childComplexity int) int
	}

	VehicleLocationHisMinFields struct {
		Acceleration        func(childComplexity int) int
		AlarmContent        func(childComplexity int) int
		Alititude           func(childComplexity int) int
		Coordinate          func(childComplexity int) int
		CorrectCoordinate   func(childComplexity int) int
		Direction           func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		DriverID            func(childComplexity int) int
		EnterpriseID        func(childComplexity int) int
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		Imei                func(childComplexity int) int
		IsLocate            func(childComplexity int) int
		LocateTime          func(childComplexity int) int
		LocationDescription func(childComplexity int) int
		Mileage             func(childComplexity int) int
		RoadName            func(childComplexity int) int
		SimNumber           func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		StarCount           func(childComplexity int) int
		StarStatus          func(childComplexity int) int
		SupervisionPhotoID  func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
		VehicleID           func(childComplexity int) int
		VehicleStatus       func(childComplexity int) int
	}

	VehicleLocationHisMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VehicleLocationHisStddevFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationHisStddevPopFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationHisStddevSampFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationHisSumFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationHisVarPopFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationHisVarSampFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationHisVarianceFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationLast struct {
		Acceleration        func(childComplexity int) int
		AlarmContent        func(childComplexity int) int
		Alititude           func(childComplexity int) int
		Coordinate          func(childComplexity int) int
		CorrectCoordinate   func(childComplexity int) int
		Direction           func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		DriverID            func(childComplexity int) int
		EnterpriseID        func(childComplexity int) int
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		Imei                func(childComplexity int) int
		IsLocate            func(childComplexity int) int
		LocateTime          func(childComplexity int) int
		LocationDescription func(childComplexity int) int
		Mileage             func(childComplexity int) int
		RoadName            func(childComplexity int) int
		SimNumber           func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		StarCount           func(childComplexity int) int
		StarStatus          func(childComplexity int) int
		SupervisionPhotoID  func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
		VehicleID           func(childComplexity int) int
		VehicleStatus       func(childComplexity int) int
	}

	VehicleLocationLastAggregate struct {
		Aggregate func(childComplexity int) int
	}

	VehicleLocationLastAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VehicleLocationLastAvgFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationLastMaxFields struct {
		Acceleration        func(childComplexity int) int
		AlarmContent        func(childComplexity int) int
		Alititude           func(childComplexity int) int
		Coordinate          func(childComplexity int) int
		CorrectCoordinate   func(childComplexity int) int
		Direction           func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		DriverID            func(childComplexity int) int
		EnterpriseID        func(childComplexity int) int
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		Imei                func(childComplexity int) int
		IsLocate            func(childComplexity int) int
		LocateTime          func(childComplexity int) int
		LocationDescription func(childComplexity int) int
		Mileage             func(childComplexity int) int
		RoadName            func(childComplexity int) int
		SimNumber           func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		StarCount           func(childComplexity int) int
		StarStatus          func(childComplexity int) int
		SupervisionPhotoID  func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
		VehicleID           func(childComplexity int) int
		VehicleStatus       func(childComplexity int) int
	}

	VehicleLocationLastMinFields struct {
		Acceleration        func(childComplexity int) int
		AlarmContent        func(childComplexity int) int
		Alititude           func(childComplexity int) int
		Coordinate          func(childComplexity int) int
		CorrectCoordinate   func(childComplexity int) int
		Direction           func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		DriverID            func(childComplexity int) int
		EnterpriseID        func(childComplexity int) int
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		Imei                func(childComplexity int) int
		IsLocate            func(childComplexity int) int
		LocateTime          func(childComplexity int) int
		LocationDescription func(childComplexity int) int
		Mileage             func(childComplexity int) int
		RoadName            func(childComplexity int) int
		SimNumber           func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		StarCount           func(childComplexity int) int
		StarStatus          func(childComplexity int) int
		SupervisionPhotoID  func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
		VehicleID           func(childComplexity int) int
		VehicleStatus       func(childComplexity int) int
	}

	VehicleLocationLastMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VehicleLocationLastStddevFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationLastStddevPopFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationLastStddevSampFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationLastSumFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationLastVarPopFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationLastVarSampFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationLastVarianceFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}
}

type MutationResolver interface {
	DeleteVehicleLocationHis(ctx context.Context, where model.VehicleLocationHisBoolExp) (*model.VehicleLocationHisMutationResponse, error)
	DeleteVehicleLocationHisByPk(ctx context.Context, id int64) (*model1.VehicleLocationHis, error)
	InsertVehicleLocationHis(ctx context.Context, objects []*model.VehicleLocationHisInsertInput) (*model.VehicleLocationHisMutationResponse, error)
	InsertVehicleLocationHisOne(ctx context.Context, objects model.VehicleLocationHisInsertInput) (*model1.VehicleLocationHis, error)
	UpdateVehicleLocationHis(ctx context.Context, inc *model.VehicleLocationHisIncInput, set *model.VehicleLocationHisSetInput, where model.VehicleLocationHisBoolExp) (*model.VehicleLocationHisMutationResponse, error)
	UpdateVehicleLocationHisByPk(ctx context.Context, inc *model.VehicleLocationHisIncInput, set *model.VehicleLocationHisSetInput, id int64) (*model1.VehicleLocationHis, error)
	DeleteVehicleLocationLast(ctx context.Context, where model.VehicleLocationLastBoolExp) (*model.VehicleLocationLastMutationResponse, error)
	DeleteVehicleLocationLastByPk(ctx context.Context, id int64) (*model1.VehicleLocationLast, error)
	InsertVehicleLocationLast(ctx context.Context, objects []*model.VehicleLocationLastInsertInput) (*model.VehicleLocationLastMutationResponse, error)
	InsertVehicleLocationLastOne(ctx context.Context, objects model.VehicleLocationLastInsertInput) (*model1.VehicleLocationLast, error)
	UpdateVehicleLocationLast(ctx context.Context, inc *model.VehicleLocationLastIncInput, set *model.VehicleLocationLastSetInput, where model.VehicleLocationLastBoolExp) (*model.VehicleLocationLastMutationResponse, error)
	UpdateVehicleLocationLastByPk(ctx context.Context, inc *model.VehicleLocationLastIncInput, set *model.VehicleLocationLastSetInput, id int64) (*model1.VehicleLocationLast, error)
}
type QueryResolver interface {
	VehicleLocationHis(ctx context.Context, distinctOn []model.VehicleLocationHisSelectColumn, limit *int, offset *int, orderBy []*model.VehicleLocationHisOrderBy, where *model.VehicleLocationHisBoolExp) ([]*model1.VehicleLocationHis, error)
	VehicleLocationHisAggregate(ctx context.Context, distinctOn []model.VehicleLocationHisSelectColumn, limit *int, offset *int, orderBy []*model.VehicleLocationHisOrderBy, where *model.VehicleLocationHisBoolExp) (*model.VehicleLocationHisAggregate, error)
	VehicleLocationHisByPk(ctx context.Context, id int64) (*model1.VehicleLocationHis, error)
	VehicleLocationLast(ctx context.Context, distinctOn []model.VehicleLocationLastSelectColumn, limit *int, offset *int, orderBy []*model.VehicleLocationLastOrderBy, where *model.VehicleLocationLastBoolExp) ([]*model1.VehicleLocationLast, error)
	VehicleLocationLastAggregate(ctx context.Context, distinctOn []model.VehicleLocationLastSelectColumn, limit *int, offset *int, orderBy []*model.VehicleLocationLastOrderBy, where *model.VehicleLocationLastBoolExp) (*model.VehicleLocationLastAggregate, error)
	VehicleLocationLastByPk(ctx context.Context, id int64) (*model1.VehicleLocationLast, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Mutation.delete_vehicle_location_his":
		if e.complexity.Mutation.DeleteVehicleLocationHis == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_location_his_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleLocationHis(childComplexity, args["where"].(model.VehicleLocationHisBoolExp)), true

	case "Mutation.delete_vehicle_location_his_by_pk":
		if e.complexity.Mutation.DeleteVehicleLocationHisByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_location_his_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleLocationHisByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_vehicle_location_last":
		if e.complexity.Mutation.DeleteVehicleLocationLast == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_location_last_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleLocationLast(childComplexity, args["where"].(model.VehicleLocationLastBoolExp)), true

	case "Mutation.delete_vehicle_location_last_by_pk":
		if e.complexity.Mutation.DeleteVehicleLocationLastByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_location_last_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleLocationLastByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.insert_vehicle_location_his":
		if e.complexity.Mutation.InsertVehicleLocationHis == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_location_his_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleLocationHis(childComplexity, args["objects"].([]*model.VehicleLocationHisInsertInput)), true

	case "Mutation.insert_vehicle_location_his_one":
		if e.complexity.Mutation.InsertVehicleLocationHisOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_location_his_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleLocationHisOne(childComplexity, args["objects"].(model.VehicleLocationHisInsertInput)), true

	case "Mutation.insert_vehicle_location_last":
		if e.complexity.Mutation.InsertVehicleLocationLast == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_location_last_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleLocationLast(childComplexity, args["objects"].([]*model.VehicleLocationLastInsertInput)), true

	case "Mutation.insert_vehicle_location_last_one":
		if e.complexity.Mutation.InsertVehicleLocationLastOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_location_last_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleLocationLastOne(childComplexity, args["objects"].(model.VehicleLocationLastInsertInput)), true

	case "Mutation.update_vehicle_location_his":
		if e.complexity.Mutation.UpdateVehicleLocationHis == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_location_his_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleLocationHis(childComplexity, args["_inc"].(*model.VehicleLocationHisIncInput), args["_set"].(*model.VehicleLocationHisSetInput), args["where"].(model.VehicleLocationHisBoolExp)), true

	case "Mutation.update_vehicle_location_his_by_pk":
		if e.complexity.Mutation.UpdateVehicleLocationHisByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_location_his_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleLocationHisByPk(childComplexity, args["_inc"].(*model.VehicleLocationHisIncInput), args["_set"].(*model.VehicleLocationHisSetInput), args["id"].(int64)), true

	case "Mutation.update_vehicle_location_last":
		if e.complexity.Mutation.UpdateVehicleLocationLast == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_location_last_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleLocationLast(childComplexity, args["_inc"].(*model.VehicleLocationLastIncInput), args["_set"].(*model.VehicleLocationLastSetInput), args["where"].(model.VehicleLocationLastBoolExp)), true

	case "Mutation.update_vehicle_location_last_by_pk":
		if e.complexity.Mutation.UpdateVehicleLocationLastByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_location_last_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleLocationLastByPk(childComplexity, args["_inc"].(*model.VehicleLocationLastIncInput), args["_set"].(*model.VehicleLocationLastSetInput), args["id"].(int64)), true

	case "Query.vehicle_location_his":
		if e.complexity.Query.VehicleLocationHis == nil {
			break
		}

		args, err := ec.field_Query_vehicle_location_his_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleLocationHis(childComplexity, args["distinct_on"].([]model.VehicleLocationHisSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleLocationHisOrderBy), args["where"].(*model.VehicleLocationHisBoolExp)), true

	case "Query.vehicle_location_his_aggregate":
		if e.complexity.Query.VehicleLocationHisAggregate == nil {
			break
		}

		args, err := ec.field_Query_vehicle_location_his_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleLocationHisAggregate(childComplexity, args["distinct_on"].([]model.VehicleLocationHisSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleLocationHisOrderBy), args["where"].(*model.VehicleLocationHisBoolExp)), true

	case "Query.vehicle_location_his_by_pk":
		if e.complexity.Query.VehicleLocationHisByPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_location_his_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleLocationHisByPk(childComplexity, args["id"].(int64)), true

	case "Query.vehicle_location_last":
		if e.complexity.Query.VehicleLocationLast == nil {
			break
		}

		args, err := ec.field_Query_vehicle_location_last_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleLocationLast(childComplexity, args["distinct_on"].([]model.VehicleLocationLastSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleLocationLastOrderBy), args["where"].(*model.VehicleLocationLastBoolExp)), true

	case "Query.vehicle_location_last_aggregate":
		if e.complexity.Query.VehicleLocationLastAggregate == nil {
			break
		}

		args, err := ec.field_Query_vehicle_location_last_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleLocationLastAggregate(childComplexity, args["distinct_on"].([]model.VehicleLocationLastSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleLocationLastOrderBy), args["where"].(*model.VehicleLocationLastBoolExp)), true

	case "Query.vehicle_location_last_by_pk":
		if e.complexity.Query.VehicleLocationLastByPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_location_last_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleLocationLastByPk(childComplexity, args["id"].(int64)), true

	case "VehicleLocationHis.acceleration":
		if e.complexity.VehicleLocationHis.Acceleration == nil {
			break
		}

		return e.complexity.VehicleLocationHis.Acceleration(childComplexity), true

	case "VehicleLocationHis.alarm_content":
		if e.complexity.VehicleLocationHis.AlarmContent == nil {
			break
		}

		return e.complexity.VehicleLocationHis.AlarmContent(childComplexity), true

	case "VehicleLocationHis.alititude":
		if e.complexity.VehicleLocationHis.Alititude == nil {
			break
		}

		return e.complexity.VehicleLocationHis.Alititude(childComplexity), true

	case "VehicleLocationHis.coordinate":
		if e.complexity.VehicleLocationHis.Coordinate == nil {
			break
		}

		return e.complexity.VehicleLocationHis.Coordinate(childComplexity), true

	case "VehicleLocationHis.correct_coordinate":
		if e.complexity.VehicleLocationHis.CorrectCoordinate == nil {
			break
		}

		return e.complexity.VehicleLocationHis.CorrectCoordinate(childComplexity), true

	case "VehicleLocationHis.direction":
		if e.complexity.VehicleLocationHis.Direction == nil {
			break
		}

		return e.complexity.VehicleLocationHis.Direction(childComplexity), true

	case "VehicleLocationHis.district_id":
		if e.complexity.VehicleLocationHis.DistrictID == nil {
			break
		}

		return e.complexity.VehicleLocationHis.DistrictID(childComplexity), true

	case "VehicleLocationHis.driver_id":
		if e.complexity.VehicleLocationHis.DriverID == nil {
			break
		}

		return e.complexity.VehicleLocationHis.DriverID(childComplexity), true

	case "VehicleLocationHis.enterprise_id":
		if e.complexity.VehicleLocationHis.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleLocationHis.EnterpriseID(childComplexity), true

	case "VehicleLocationHis.gps_speed":
		if e.complexity.VehicleLocationHis.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHis.GpsSpeed(childComplexity), true

	case "VehicleLocationHis.id":
		if e.complexity.VehicleLocationHis.ID == nil {
			break
		}

		return e.complexity.VehicleLocationHis.ID(childComplexity), true

	case "VehicleLocationHis.imei":
		if e.complexity.VehicleLocationHis.Imei == nil {
			break
		}

		return e.complexity.VehicleLocationHis.Imei(childComplexity), true

	case "VehicleLocationHis.is_locate":
		if e.complexity.VehicleLocationHis.IsLocate == nil {
			break
		}

		return e.complexity.VehicleLocationHis.IsLocate(childComplexity), true

	case "VehicleLocationHis.locate_time":
		if e.complexity.VehicleLocationHis.LocateTime == nil {
			break
		}

		return e.complexity.VehicleLocationHis.LocateTime(childComplexity), true

	case "VehicleLocationHis.location_description":
		if e.complexity.VehicleLocationHis.LocationDescription == nil {
			break
		}

		return e.complexity.VehicleLocationHis.LocationDescription(childComplexity), true

	case "VehicleLocationHis.mileage":
		if e.complexity.VehicleLocationHis.Mileage == nil {
			break
		}

		return e.complexity.VehicleLocationHis.Mileage(childComplexity), true

	case "VehicleLocationHis.road_name":
		if e.complexity.VehicleLocationHis.RoadName == nil {
			break
		}

		return e.complexity.VehicleLocationHis.RoadName(childComplexity), true

	case "VehicleLocationHis.sim_number":
		if e.complexity.VehicleLocationHis.SimNumber == nil {
			break
		}

		return e.complexity.VehicleLocationHis.SimNumber(childComplexity), true

	case "VehicleLocationHis.speed_limit_threshold":
		if e.complexity.VehicleLocationHis.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationHis.SpeedLimitThreshold(childComplexity), true

	case "VehicleLocationHis.star_count":
		if e.complexity.VehicleLocationHis.StarCount == nil {
			break
		}

		return e.complexity.VehicleLocationHis.StarCount(childComplexity), true

	case "VehicleLocationHis.star_status":
		if e.complexity.VehicleLocationHis.StarStatus == nil {
			break
		}

		return e.complexity.VehicleLocationHis.StarStatus(childComplexity), true

	case "VehicleLocationHis.supervision_photo_id":
		if e.complexity.VehicleLocationHis.SupervisionPhotoID == nil {
			break
		}

		return e.complexity.VehicleLocationHis.SupervisionPhotoID(childComplexity), true

	case "VehicleLocationHis.tachograph_speed":
		if e.complexity.VehicleLocationHis.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHis.TachographSpeed(childComplexity), true

	case "VehicleLocationHis.vehicle_id":
		if e.complexity.VehicleLocationHis.VehicleID == nil {
			break
		}

		return e.complexity.VehicleLocationHis.VehicleID(childComplexity), true

	case "VehicleLocationHis.vehicle_status":
		if e.complexity.VehicleLocationHis.VehicleStatus == nil {
			break
		}

		return e.complexity.VehicleLocationHis.VehicleStatus(childComplexity), true

	case "VehicleLocationHisAggregate.aggregate":
		if e.complexity.VehicleLocationHisAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VehicleLocationHisAggregate.Aggregate(childComplexity), true

	case "VehicleLocationHisAggregateFields.avg":
		if e.complexity.VehicleLocationHisAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VehicleLocationHisAggregateFields.Avg(childComplexity), true

	case "VehicleLocationHisAggregateFields.count":
		if e.complexity.VehicleLocationHisAggregateFields.Count == nil {
			break
		}

		return e.complexity.VehicleLocationHisAggregateFields.Count(childComplexity), true

	case "VehicleLocationHisAggregateFields.max":
		if e.complexity.VehicleLocationHisAggregateFields.Max == nil {
			break
		}

		return e.complexity.VehicleLocationHisAggregateFields.Max(childComplexity), true

	case "VehicleLocationHisAggregateFields.min":
		if e.complexity.VehicleLocationHisAggregateFields.Min == nil {
			break
		}

		return e.complexity.VehicleLocationHisAggregateFields.Min(childComplexity), true

	case "VehicleLocationHisAggregateFields.stddev":
		if e.complexity.VehicleLocationHisAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VehicleLocationHisAggregateFields.Stddev(childComplexity), true

	case "VehicleLocationHisAggregateFields.stddev_pop":
		if e.complexity.VehicleLocationHisAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VehicleLocationHisAggregateFields.StddevPop(childComplexity), true

	case "VehicleLocationHisAggregateFields.stddev_samp":
		if e.complexity.VehicleLocationHisAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VehicleLocationHisAggregateFields.StddevSamp(childComplexity), true

	case "VehicleLocationHisAggregateFields.sum":
		if e.complexity.VehicleLocationHisAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VehicleLocationHisAggregateFields.Sum(childComplexity), true

	case "VehicleLocationHisAggregateFields.var_pop":
		if e.complexity.VehicleLocationHisAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VehicleLocationHisAggregateFields.VarPop(childComplexity), true

	case "VehicleLocationHisAggregateFields.var_samp":
		if e.complexity.VehicleLocationHisAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VehicleLocationHisAggregateFields.VarSamp(childComplexity), true

	case "VehicleLocationHisAggregateFields.variance":
		if e.complexity.VehicleLocationHisAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VehicleLocationHisAggregateFields.Variance(childComplexity), true

	case "VehicleLocationHisAvgFields.gps_speed":
		if e.complexity.VehicleLocationHisAvgFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisAvgFields.GpsSpeed(childComplexity), true

	case "VehicleLocationHisAvgFields.id":
		if e.complexity.VehicleLocationHisAvgFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationHisAvgFields.ID(childComplexity), true

	case "VehicleLocationHisAvgFields.speed_limit_threshold":
		if e.complexity.VehicleLocationHisAvgFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationHisAvgFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleLocationHisAvgFields.tachograph_speed":
		if e.complexity.VehicleLocationHisAvgFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisAvgFields.TachographSpeed(childComplexity), true

	case "VehicleLocationHisMaxFields.acceleration":
		if e.complexity.VehicleLocationHisMaxFields.Acceleration == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.Acceleration(childComplexity), true

	case "VehicleLocationHisMaxFields.alarm_content":
		if e.complexity.VehicleLocationHisMaxFields.AlarmContent == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.AlarmContent(childComplexity), true

	case "VehicleLocationHisMaxFields.alititude":
		if e.complexity.VehicleLocationHisMaxFields.Alititude == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.Alititude(childComplexity), true

	case "VehicleLocationHisMaxFields.coordinate":
		if e.complexity.VehicleLocationHisMaxFields.Coordinate == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.Coordinate(childComplexity), true

	case "VehicleLocationHisMaxFields.correct_coordinate":
		if e.complexity.VehicleLocationHisMaxFields.CorrectCoordinate == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.CorrectCoordinate(childComplexity), true

	case "VehicleLocationHisMaxFields.direction":
		if e.complexity.VehicleLocationHisMaxFields.Direction == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.Direction(childComplexity), true

	case "VehicleLocationHisMaxFields.district_id":
		if e.complexity.VehicleLocationHisMaxFields.DistrictID == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.DistrictID(childComplexity), true

	case "VehicleLocationHisMaxFields.driver_id":
		if e.complexity.VehicleLocationHisMaxFields.DriverID == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.DriverID(childComplexity), true

	case "VehicleLocationHisMaxFields.enterprise_id":
		if e.complexity.VehicleLocationHisMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.EnterpriseID(childComplexity), true

	case "VehicleLocationHisMaxFields.gps_speed":
		if e.complexity.VehicleLocationHisMaxFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.GpsSpeed(childComplexity), true

	case "VehicleLocationHisMaxFields.id":
		if e.complexity.VehicleLocationHisMaxFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.ID(childComplexity), true

	case "VehicleLocationHisMaxFields.imei":
		if e.complexity.VehicleLocationHisMaxFields.Imei == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.Imei(childComplexity), true

	case "VehicleLocationHisMaxFields.is_locate":
		if e.complexity.VehicleLocationHisMaxFields.IsLocate == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.IsLocate(childComplexity), true

	case "VehicleLocationHisMaxFields.locate_time":
		if e.complexity.VehicleLocationHisMaxFields.LocateTime == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.LocateTime(childComplexity), true

	case "VehicleLocationHisMaxFields.location_description":
		if e.complexity.VehicleLocationHisMaxFields.LocationDescription == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.LocationDescription(childComplexity), true

	case "VehicleLocationHisMaxFields.mileage":
		if e.complexity.VehicleLocationHisMaxFields.Mileage == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.Mileage(childComplexity), true

	case "VehicleLocationHisMaxFields.road_name":
		if e.complexity.VehicleLocationHisMaxFields.RoadName == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.RoadName(childComplexity), true

	case "VehicleLocationHisMaxFields.sim_number":
		if e.complexity.VehicleLocationHisMaxFields.SimNumber == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.SimNumber(childComplexity), true

	case "VehicleLocationHisMaxFields.speed_limit_threshold":
		if e.complexity.VehicleLocationHisMaxFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleLocationHisMaxFields.star_count":
		if e.complexity.VehicleLocationHisMaxFields.StarCount == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.StarCount(childComplexity), true

	case "VehicleLocationHisMaxFields.star_status":
		if e.complexity.VehicleLocationHisMaxFields.StarStatus == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.StarStatus(childComplexity), true

	case "VehicleLocationHisMaxFields.supervision_photo_id":
		if e.complexity.VehicleLocationHisMaxFields.SupervisionPhotoID == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.SupervisionPhotoID(childComplexity), true

	case "VehicleLocationHisMaxFields.tachograph_speed":
		if e.complexity.VehicleLocationHisMaxFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.TachographSpeed(childComplexity), true

	case "VehicleLocationHisMaxFields.vehicle_id":
		if e.complexity.VehicleLocationHisMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.VehicleID(childComplexity), true

	case "VehicleLocationHisMaxFields.vehicle_status":
		if e.complexity.VehicleLocationHisMaxFields.VehicleStatus == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.VehicleStatus(childComplexity), true

	case "VehicleLocationHisMinFields.acceleration":
		if e.complexity.VehicleLocationHisMinFields.Acceleration == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.Acceleration(childComplexity), true

	case "VehicleLocationHisMinFields.alarm_content":
		if e.complexity.VehicleLocationHisMinFields.AlarmContent == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.AlarmContent(childComplexity), true

	case "VehicleLocationHisMinFields.alititude":
		if e.complexity.VehicleLocationHisMinFields.Alititude == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.Alititude(childComplexity), true

	case "VehicleLocationHisMinFields.coordinate":
		if e.complexity.VehicleLocationHisMinFields.Coordinate == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.Coordinate(childComplexity), true

	case "VehicleLocationHisMinFields.correct_coordinate":
		if e.complexity.VehicleLocationHisMinFields.CorrectCoordinate == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.CorrectCoordinate(childComplexity), true

	case "VehicleLocationHisMinFields.direction":
		if e.complexity.VehicleLocationHisMinFields.Direction == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.Direction(childComplexity), true

	case "VehicleLocationHisMinFields.district_id":
		if e.complexity.VehicleLocationHisMinFields.DistrictID == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.DistrictID(childComplexity), true

	case "VehicleLocationHisMinFields.driver_id":
		if e.complexity.VehicleLocationHisMinFields.DriverID == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.DriverID(childComplexity), true

	case "VehicleLocationHisMinFields.enterprise_id":
		if e.complexity.VehicleLocationHisMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.EnterpriseID(childComplexity), true

	case "VehicleLocationHisMinFields.gps_speed":
		if e.complexity.VehicleLocationHisMinFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.GpsSpeed(childComplexity), true

	case "VehicleLocationHisMinFields.id":
		if e.complexity.VehicleLocationHisMinFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.ID(childComplexity), true

	case "VehicleLocationHisMinFields.imei":
		if e.complexity.VehicleLocationHisMinFields.Imei == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.Imei(childComplexity), true

	case "VehicleLocationHisMinFields.is_locate":
		if e.complexity.VehicleLocationHisMinFields.IsLocate == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.IsLocate(childComplexity), true

	case "VehicleLocationHisMinFields.locate_time":
		if e.complexity.VehicleLocationHisMinFields.LocateTime == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.LocateTime(childComplexity), true

	case "VehicleLocationHisMinFields.location_description":
		if e.complexity.VehicleLocationHisMinFields.LocationDescription == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.LocationDescription(childComplexity), true

	case "VehicleLocationHisMinFields.mileage":
		if e.complexity.VehicleLocationHisMinFields.Mileage == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.Mileage(childComplexity), true

	case "VehicleLocationHisMinFields.road_name":
		if e.complexity.VehicleLocationHisMinFields.RoadName == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.RoadName(childComplexity), true

	case "VehicleLocationHisMinFields.sim_number":
		if e.complexity.VehicleLocationHisMinFields.SimNumber == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.SimNumber(childComplexity), true

	case "VehicleLocationHisMinFields.speed_limit_threshold":
		if e.complexity.VehicleLocationHisMinFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleLocationHisMinFields.star_count":
		if e.complexity.VehicleLocationHisMinFields.StarCount == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.StarCount(childComplexity), true

	case "VehicleLocationHisMinFields.star_status":
		if e.complexity.VehicleLocationHisMinFields.StarStatus == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.StarStatus(childComplexity), true

	case "VehicleLocationHisMinFields.supervision_photo_id":
		if e.complexity.VehicleLocationHisMinFields.SupervisionPhotoID == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.SupervisionPhotoID(childComplexity), true

	case "VehicleLocationHisMinFields.tachograph_speed":
		if e.complexity.VehicleLocationHisMinFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.TachographSpeed(childComplexity), true

	case "VehicleLocationHisMinFields.vehicle_id":
		if e.complexity.VehicleLocationHisMinFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.VehicleID(childComplexity), true

	case "VehicleLocationHisMinFields.vehicle_status":
		if e.complexity.VehicleLocationHisMinFields.VehicleStatus == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.VehicleStatus(childComplexity), true

	case "VehicleLocationHisMutationResponse.affected_rows":
		if e.complexity.VehicleLocationHisMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VehicleLocationHisMutationResponse.AffectedRows(childComplexity), true

	case "VehicleLocationHisMutationResponse.returning":
		if e.complexity.VehicleLocationHisMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VehicleLocationHisMutationResponse.Returning(childComplexity), true

	case "VehicleLocationHisStddevFields.gps_speed":
		if e.complexity.VehicleLocationHisStddevFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisStddevFields.GpsSpeed(childComplexity), true

	case "VehicleLocationHisStddevFields.id":
		if e.complexity.VehicleLocationHisStddevFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationHisStddevFields.ID(childComplexity), true

	case "VehicleLocationHisStddevFields.speed_limit_threshold":
		if e.complexity.VehicleLocationHisStddevFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationHisStddevFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleLocationHisStddevFields.tachograph_speed":
		if e.complexity.VehicleLocationHisStddevFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisStddevFields.TachographSpeed(childComplexity), true

	case "VehicleLocationHisStddevPopFields.gps_speed":
		if e.complexity.VehicleLocationHisStddevPopFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisStddevPopFields.GpsSpeed(childComplexity), true

	case "VehicleLocationHisStddevPopFields.id":
		if e.complexity.VehicleLocationHisStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationHisStddevPopFields.ID(childComplexity), true

	case "VehicleLocationHisStddevPopFields.speed_limit_threshold":
		if e.complexity.VehicleLocationHisStddevPopFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationHisStddevPopFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleLocationHisStddevPopFields.tachograph_speed":
		if e.complexity.VehicleLocationHisStddevPopFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisStddevPopFields.TachographSpeed(childComplexity), true

	case "VehicleLocationHisStddevSampFields.gps_speed":
		if e.complexity.VehicleLocationHisStddevSampFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisStddevSampFields.GpsSpeed(childComplexity), true

	case "VehicleLocationHisStddevSampFields.id":
		if e.complexity.VehicleLocationHisStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationHisStddevSampFields.ID(childComplexity), true

	case "VehicleLocationHisStddevSampFields.speed_limit_threshold":
		if e.complexity.VehicleLocationHisStddevSampFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationHisStddevSampFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleLocationHisStddevSampFields.tachograph_speed":
		if e.complexity.VehicleLocationHisStddevSampFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisStddevSampFields.TachographSpeed(childComplexity), true

	case "VehicleLocationHisSumFields.gps_speed":
		if e.complexity.VehicleLocationHisSumFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisSumFields.GpsSpeed(childComplexity), true

	case "VehicleLocationHisSumFields.id":
		if e.complexity.VehicleLocationHisSumFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationHisSumFields.ID(childComplexity), true

	case "VehicleLocationHisSumFields.speed_limit_threshold":
		if e.complexity.VehicleLocationHisSumFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationHisSumFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleLocationHisSumFields.tachograph_speed":
		if e.complexity.VehicleLocationHisSumFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisSumFields.TachographSpeed(childComplexity), true

	case "VehicleLocationHisVarPopFields.gps_speed":
		if e.complexity.VehicleLocationHisVarPopFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisVarPopFields.GpsSpeed(childComplexity), true

	case "VehicleLocationHisVarPopFields.id":
		if e.complexity.VehicleLocationHisVarPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationHisVarPopFields.ID(childComplexity), true

	case "VehicleLocationHisVarPopFields.speed_limit_threshold":
		if e.complexity.VehicleLocationHisVarPopFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationHisVarPopFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleLocationHisVarPopFields.tachograph_speed":
		if e.complexity.VehicleLocationHisVarPopFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisVarPopFields.TachographSpeed(childComplexity), true

	case "VehicleLocationHisVarSampFields.gps_speed":
		if e.complexity.VehicleLocationHisVarSampFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisVarSampFields.GpsSpeed(childComplexity), true

	case "VehicleLocationHisVarSampFields.id":
		if e.complexity.VehicleLocationHisVarSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationHisVarSampFields.ID(childComplexity), true

	case "VehicleLocationHisVarSampFields.speed_limit_threshold":
		if e.complexity.VehicleLocationHisVarSampFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationHisVarSampFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleLocationHisVarSampFields.tachograph_speed":
		if e.complexity.VehicleLocationHisVarSampFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisVarSampFields.TachographSpeed(childComplexity), true

	case "VehicleLocationHisVarianceFields.gps_speed":
		if e.complexity.VehicleLocationHisVarianceFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisVarianceFields.GpsSpeed(childComplexity), true

	case "VehicleLocationHisVarianceFields.id":
		if e.complexity.VehicleLocationHisVarianceFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationHisVarianceFields.ID(childComplexity), true

	case "VehicleLocationHisVarianceFields.speed_limit_threshold":
		if e.complexity.VehicleLocationHisVarianceFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationHisVarianceFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleLocationHisVarianceFields.tachograph_speed":
		if e.complexity.VehicleLocationHisVarianceFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisVarianceFields.TachographSpeed(childComplexity), true

	case "VehicleLocationLast.acceleration":
		if e.complexity.VehicleLocationLast.Acceleration == nil {
			break
		}

		return e.complexity.VehicleLocationLast.Acceleration(childComplexity), true

	case "VehicleLocationLast.alarm_content":
		if e.complexity.VehicleLocationLast.AlarmContent == nil {
			break
		}

		return e.complexity.VehicleLocationLast.AlarmContent(childComplexity), true

	case "VehicleLocationLast.alititude":
		if e.complexity.VehicleLocationLast.Alititude == nil {
			break
		}

		return e.complexity.VehicleLocationLast.Alititude(childComplexity), true

	case "VehicleLocationLast.coordinate":
		if e.complexity.VehicleLocationLast.Coordinate == nil {
			break
		}

		return e.complexity.VehicleLocationLast.Coordinate(childComplexity), true

	case "VehicleLocationLast.correct_coordinate":
		if e.complexity.VehicleLocationLast.CorrectCoordinate == nil {
			break
		}

		return e.complexity.VehicleLocationLast.CorrectCoordinate(childComplexity), true

	case "VehicleLocationLast.direction":
		if e.complexity.VehicleLocationLast.Direction == nil {
			break
		}

		return e.complexity.VehicleLocationLast.Direction(childComplexity), true

	case "VehicleLocationLast.district_id":
		if e.complexity.VehicleLocationLast.DistrictID == nil {
			break
		}

		return e.complexity.VehicleLocationLast.DistrictID(childComplexity), true

	case "VehicleLocationLast.driver_id":
		if e.complexity.VehicleLocationLast.DriverID == nil {
			break
		}

		return e.complexity.VehicleLocationLast.DriverID(childComplexity), true

	case "VehicleLocationLast.enterprise_id":
		if e.complexity.VehicleLocationLast.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleLocationLast.EnterpriseID(childComplexity), true

	case "VehicleLocationLast.gps_speed":
		if e.complexity.VehicleLocationLast.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLast.GpsSpeed(childComplexity), true

	case "VehicleLocationLast.id":
		if e.complexity.VehicleLocationLast.ID == nil {
			break
		}

		return e.complexity.VehicleLocationLast.ID(childComplexity), true

	case "VehicleLocationLast.imei":
		if e.complexity.VehicleLocationLast.Imei == nil {
			break
		}

		return e.complexity.VehicleLocationLast.Imei(childComplexity), true

	case "VehicleLocationLast.is_locate":
		if e.complexity.VehicleLocationLast.IsLocate == nil {
			break
		}

		return e.complexity.VehicleLocationLast.IsLocate(childComplexity), true

	case "VehicleLocationLast.locate_time":
		if e.complexity.VehicleLocationLast.LocateTime == nil {
			break
		}

		return e.complexity.VehicleLocationLast.LocateTime(childComplexity), true

	case "VehicleLocationLast.location_description":
		if e.complexity.VehicleLocationLast.LocationDescription == nil {
			break
		}

		return e.complexity.VehicleLocationLast.LocationDescription(childComplexity), true

	case "VehicleLocationLast.mileage":
		if e.complexity.VehicleLocationLast.Mileage == nil {
			break
		}

		return e.complexity.VehicleLocationLast.Mileage(childComplexity), true

	case "VehicleLocationLast.road_name":
		if e.complexity.VehicleLocationLast.RoadName == nil {
			break
		}

		return e.complexity.VehicleLocationLast.RoadName(childComplexity), true

	case "VehicleLocationLast.sim_number":
		if e.complexity.VehicleLocationLast.SimNumber == nil {
			break
		}

		return e.complexity.VehicleLocationLast.SimNumber(childComplexity), true

	case "VehicleLocationLast.speed_limit_threshold":
		if e.complexity.VehicleLocationLast.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationLast.SpeedLimitThreshold(childComplexity), true

	case "VehicleLocationLast.star_count":
		if e.complexity.VehicleLocationLast.StarCount == nil {
			break
		}

		return e.complexity.VehicleLocationLast.StarCount(childComplexity), true

	case "VehicleLocationLast.star_status":
		if e.complexity.VehicleLocationLast.StarStatus == nil {
			break
		}

		return e.complexity.VehicleLocationLast.StarStatus(childComplexity), true

	case "VehicleLocationLast.supervision_photo_id":
		if e.complexity.VehicleLocationLast.SupervisionPhotoID == nil {
			break
		}

		return e.complexity.VehicleLocationLast.SupervisionPhotoID(childComplexity), true

	case "VehicleLocationLast.tachograph_speed":
		if e.complexity.VehicleLocationLast.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLast.TachographSpeed(childComplexity), true

	case "VehicleLocationLast.vehicle_id":
		if e.complexity.VehicleLocationLast.VehicleID == nil {
			break
		}

		return e.complexity.VehicleLocationLast.VehicleID(childComplexity), true

	case "VehicleLocationLast.vehicle_status":
		if e.complexity.VehicleLocationLast.VehicleStatus == nil {
			break
		}

		return e.complexity.VehicleLocationLast.VehicleStatus(childComplexity), true

	case "VehicleLocationLastAggregate.aggregate":
		if e.complexity.VehicleLocationLastAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VehicleLocationLastAggregate.Aggregate(childComplexity), true

	case "VehicleLocationLastAggregateFields.avg":
		if e.complexity.VehicleLocationLastAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VehicleLocationLastAggregateFields.Avg(childComplexity), true

	case "VehicleLocationLastAggregateFields.count":
		if e.complexity.VehicleLocationLastAggregateFields.Count == nil {
			break
		}

		return e.complexity.VehicleLocationLastAggregateFields.Count(childComplexity), true

	case "VehicleLocationLastAggregateFields.max":
		if e.complexity.VehicleLocationLastAggregateFields.Max == nil {
			break
		}

		return e.complexity.VehicleLocationLastAggregateFields.Max(childComplexity), true

	case "VehicleLocationLastAggregateFields.min":
		if e.complexity.VehicleLocationLastAggregateFields.Min == nil {
			break
		}

		return e.complexity.VehicleLocationLastAggregateFields.Min(childComplexity), true

	case "VehicleLocationLastAggregateFields.stddev":
		if e.complexity.VehicleLocationLastAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VehicleLocationLastAggregateFields.Stddev(childComplexity), true

	case "VehicleLocationLastAggregateFields.stddev_pop":
		if e.complexity.VehicleLocationLastAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VehicleLocationLastAggregateFields.StddevPop(childComplexity), true

	case "VehicleLocationLastAggregateFields.stddev_samp":
		if e.complexity.VehicleLocationLastAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VehicleLocationLastAggregateFields.StddevSamp(childComplexity), true

	case "VehicleLocationLastAggregateFields.sum":
		if e.complexity.VehicleLocationLastAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VehicleLocationLastAggregateFields.Sum(childComplexity), true

	case "VehicleLocationLastAggregateFields.var_pop":
		if e.complexity.VehicleLocationLastAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VehicleLocationLastAggregateFields.VarPop(childComplexity), true

	case "VehicleLocationLastAggregateFields.var_samp":
		if e.complexity.VehicleLocationLastAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VehicleLocationLastAggregateFields.VarSamp(childComplexity), true

	case "VehicleLocationLastAggregateFields.variance":
		if e.complexity.VehicleLocationLastAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VehicleLocationLastAggregateFields.Variance(childComplexity), true

	case "VehicleLocationLastAvgFields.gps_speed":
		if e.complexity.VehicleLocationLastAvgFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastAvgFields.GpsSpeed(childComplexity), true

	case "VehicleLocationLastAvgFields.id":
		if e.complexity.VehicleLocationLastAvgFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationLastAvgFields.ID(childComplexity), true

	case "VehicleLocationLastAvgFields.speed_limit_threshold":
		if e.complexity.VehicleLocationLastAvgFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationLastAvgFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleLocationLastAvgFields.tachograph_speed":
		if e.complexity.VehicleLocationLastAvgFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastAvgFields.TachographSpeed(childComplexity), true

	case "VehicleLocationLastMaxFields.acceleration":
		if e.complexity.VehicleLocationLastMaxFields.Acceleration == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.Acceleration(childComplexity), true

	case "VehicleLocationLastMaxFields.alarm_content":
		if e.complexity.VehicleLocationLastMaxFields.AlarmContent == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.AlarmContent(childComplexity), true

	case "VehicleLocationLastMaxFields.alititude":
		if e.complexity.VehicleLocationLastMaxFields.Alititude == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.Alititude(childComplexity), true

	case "VehicleLocationLastMaxFields.coordinate":
		if e.complexity.VehicleLocationLastMaxFields.Coordinate == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.Coordinate(childComplexity), true

	case "VehicleLocationLastMaxFields.correct_coordinate":
		if e.complexity.VehicleLocationLastMaxFields.CorrectCoordinate == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.CorrectCoordinate(childComplexity), true

	case "VehicleLocationLastMaxFields.direction":
		if e.complexity.VehicleLocationLastMaxFields.Direction == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.Direction(childComplexity), true

	case "VehicleLocationLastMaxFields.district_id":
		if e.complexity.VehicleLocationLastMaxFields.DistrictID == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.DistrictID(childComplexity), true

	case "VehicleLocationLastMaxFields.driver_id":
		if e.complexity.VehicleLocationLastMaxFields.DriverID == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.DriverID(childComplexity), true

	case "VehicleLocationLastMaxFields.enterprise_id":
		if e.complexity.VehicleLocationLastMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.EnterpriseID(childComplexity), true

	case "VehicleLocationLastMaxFields.gps_speed":
		if e.complexity.VehicleLocationLastMaxFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.GpsSpeed(childComplexity), true

	case "VehicleLocationLastMaxFields.id":
		if e.complexity.VehicleLocationLastMaxFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.ID(childComplexity), true

	case "VehicleLocationLastMaxFields.imei":
		if e.complexity.VehicleLocationLastMaxFields.Imei == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.Imei(childComplexity), true

	case "VehicleLocationLastMaxFields.is_locate":
		if e.complexity.VehicleLocationLastMaxFields.IsLocate == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.IsLocate(childComplexity), true

	case "VehicleLocationLastMaxFields.locate_time":
		if e.complexity.VehicleLocationLastMaxFields.LocateTime == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.LocateTime(childComplexity), true

	case "VehicleLocationLastMaxFields.location_description":
		if e.complexity.VehicleLocationLastMaxFields.LocationDescription == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.LocationDescription(childComplexity), true

	case "VehicleLocationLastMaxFields.mileage":
		if e.complexity.VehicleLocationLastMaxFields.Mileage == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.Mileage(childComplexity), true

	case "VehicleLocationLastMaxFields.road_name":
		if e.complexity.VehicleLocationLastMaxFields.RoadName == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.RoadName(childComplexity), true

	case "VehicleLocationLastMaxFields.sim_number":
		if e.complexity.VehicleLocationLastMaxFields.SimNumber == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.SimNumber(childComplexity), true

	case "VehicleLocationLastMaxFields.speed_limit_threshold":
		if e.complexity.VehicleLocationLastMaxFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleLocationLastMaxFields.star_count":
		if e.complexity.VehicleLocationLastMaxFields.StarCount == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.StarCount(childComplexity), true

	case "VehicleLocationLastMaxFields.star_status":
		if e.complexity.VehicleLocationLastMaxFields.StarStatus == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.StarStatus(childComplexity), true

	case "VehicleLocationLastMaxFields.supervision_photo_id":
		if e.complexity.VehicleLocationLastMaxFields.SupervisionPhotoID == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.SupervisionPhotoID(childComplexity), true

	case "VehicleLocationLastMaxFields.tachograph_speed":
		if e.complexity.VehicleLocationLastMaxFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.TachographSpeed(childComplexity), true

	case "VehicleLocationLastMaxFields.vehicle_id":
		if e.complexity.VehicleLocationLastMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.VehicleID(childComplexity), true

	case "VehicleLocationLastMaxFields.vehicle_status":
		if e.complexity.VehicleLocationLastMaxFields.VehicleStatus == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.VehicleStatus(childComplexity), true

	case "VehicleLocationLastMinFields.acceleration":
		if e.complexity.VehicleLocationLastMinFields.Acceleration == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.Acceleration(childComplexity), true

	case "VehicleLocationLastMinFields.alarm_content":
		if e.complexity.VehicleLocationLastMinFields.AlarmContent == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.AlarmContent(childComplexity), true

	case "VehicleLocationLastMinFields.alititude":
		if e.complexity.VehicleLocationLastMinFields.Alititude == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.Alititude(childComplexity), true

	case "VehicleLocationLastMinFields.coordinate":
		if e.complexity.VehicleLocationLastMinFields.Coordinate == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.Coordinate(childComplexity), true

	case "VehicleLocationLastMinFields.correct_coordinate":
		if e.complexity.VehicleLocationLastMinFields.CorrectCoordinate == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.CorrectCoordinate(childComplexity), true

	case "VehicleLocationLastMinFields.direction":
		if e.complexity.VehicleLocationLastMinFields.Direction == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.Direction(childComplexity), true

	case "VehicleLocationLastMinFields.district_id":
		if e.complexity.VehicleLocationLastMinFields.DistrictID == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.DistrictID(childComplexity), true

	case "VehicleLocationLastMinFields.driver_id":
		if e.complexity.VehicleLocationLastMinFields.DriverID == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.DriverID(childComplexity), true

	case "VehicleLocationLastMinFields.enterprise_id":
		if e.complexity.VehicleLocationLastMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.EnterpriseID(childComplexity), true

	case "VehicleLocationLastMinFields.gps_speed":
		if e.complexity.VehicleLocationLastMinFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.GpsSpeed(childComplexity), true

	case "VehicleLocationLastMinFields.id":
		if e.complexity.VehicleLocationLastMinFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.ID(childComplexity), true

	case "VehicleLocationLastMinFields.imei":
		if e.complexity.VehicleLocationLastMinFields.Imei == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.Imei(childComplexity), true

	case "VehicleLocationLastMinFields.is_locate":
		if e.complexity.VehicleLocationLastMinFields.IsLocate == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.IsLocate(childComplexity), true

	case "VehicleLocationLastMinFields.locate_time":
		if e.complexity.VehicleLocationLastMinFields.LocateTime == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.LocateTime(childComplexity), true

	case "VehicleLocationLastMinFields.location_description":
		if e.complexity.VehicleLocationLastMinFields.LocationDescription == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.LocationDescription(childComplexity), true

	case "VehicleLocationLastMinFields.mileage":
		if e.complexity.VehicleLocationLastMinFields.Mileage == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.Mileage(childComplexity), true

	case "VehicleLocationLastMinFields.road_name":
		if e.complexity.VehicleLocationLastMinFields.RoadName == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.RoadName(childComplexity), true

	case "VehicleLocationLastMinFields.sim_number":
		if e.complexity.VehicleLocationLastMinFields.SimNumber == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.SimNumber(childComplexity), true

	case "VehicleLocationLastMinFields.speed_limit_threshold":
		if e.complexity.VehicleLocationLastMinFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleLocationLastMinFields.star_count":
		if e.complexity.VehicleLocationLastMinFields.StarCount == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.StarCount(childComplexity), true

	case "VehicleLocationLastMinFields.star_status":
		if e.complexity.VehicleLocationLastMinFields.StarStatus == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.StarStatus(childComplexity), true

	case "VehicleLocationLastMinFields.supervision_photo_id":
		if e.complexity.VehicleLocationLastMinFields.SupervisionPhotoID == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.SupervisionPhotoID(childComplexity), true

	case "VehicleLocationLastMinFields.tachograph_speed":
		if e.complexity.VehicleLocationLastMinFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.TachographSpeed(childComplexity), true

	case "VehicleLocationLastMinFields.vehicle_id":
		if e.complexity.VehicleLocationLastMinFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.VehicleID(childComplexity), true

	case "VehicleLocationLastMinFields.vehicle_status":
		if e.complexity.VehicleLocationLastMinFields.VehicleStatus == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.VehicleStatus(childComplexity), true

	case "VehicleLocationLastMutationResponse.affected_rows":
		if e.complexity.VehicleLocationLastMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VehicleLocationLastMutationResponse.AffectedRows(childComplexity), true

	case "VehicleLocationLastMutationResponse.returning":
		if e.complexity.VehicleLocationLastMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VehicleLocationLastMutationResponse.Returning(childComplexity), true

	case "VehicleLocationLastStddevFields.gps_speed":
		if e.complexity.VehicleLocationLastStddevFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastStddevFields.GpsSpeed(childComplexity), true

	case "VehicleLocationLastStddevFields.id":
		if e.complexity.VehicleLocationLastStddevFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationLastStddevFields.ID(childComplexity), true

	case "VehicleLocationLastStddevFields.speed_limit_threshold":
		if e.complexity.VehicleLocationLastStddevFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationLastStddevFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleLocationLastStddevFields.tachograph_speed":
		if e.complexity.VehicleLocationLastStddevFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastStddevFields.TachographSpeed(childComplexity), true

	case "VehicleLocationLastStddevPopFields.gps_speed":
		if e.complexity.VehicleLocationLastStddevPopFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastStddevPopFields.GpsSpeed(childComplexity), true

	case "VehicleLocationLastStddevPopFields.id":
		if e.complexity.VehicleLocationLastStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationLastStddevPopFields.ID(childComplexity), true

	case "VehicleLocationLastStddevPopFields.speed_limit_threshold":
		if e.complexity.VehicleLocationLastStddevPopFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationLastStddevPopFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleLocationLastStddevPopFields.tachograph_speed":
		if e.complexity.VehicleLocationLastStddevPopFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastStddevPopFields.TachographSpeed(childComplexity), true

	case "VehicleLocationLastStddevSampFields.gps_speed":
		if e.complexity.VehicleLocationLastStddevSampFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastStddevSampFields.GpsSpeed(childComplexity), true

	case "VehicleLocationLastStddevSampFields.id":
		if e.complexity.VehicleLocationLastStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationLastStddevSampFields.ID(childComplexity), true

	case "VehicleLocationLastStddevSampFields.speed_limit_threshold":
		if e.complexity.VehicleLocationLastStddevSampFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationLastStddevSampFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleLocationLastStddevSampFields.tachograph_speed":
		if e.complexity.VehicleLocationLastStddevSampFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastStddevSampFields.TachographSpeed(childComplexity), true

	case "VehicleLocationLastSumFields.gps_speed":
		if e.complexity.VehicleLocationLastSumFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastSumFields.GpsSpeed(childComplexity), true

	case "VehicleLocationLastSumFields.id":
		if e.complexity.VehicleLocationLastSumFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationLastSumFields.ID(childComplexity), true

	case "VehicleLocationLastSumFields.speed_limit_threshold":
		if e.complexity.VehicleLocationLastSumFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationLastSumFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleLocationLastSumFields.tachograph_speed":
		if e.complexity.VehicleLocationLastSumFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastSumFields.TachographSpeed(childComplexity), true

	case "VehicleLocationLastVarPopFields.gps_speed":
		if e.complexity.VehicleLocationLastVarPopFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastVarPopFields.GpsSpeed(childComplexity), true

	case "VehicleLocationLastVarPopFields.id":
		if e.complexity.VehicleLocationLastVarPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationLastVarPopFields.ID(childComplexity), true

	case "VehicleLocationLastVarPopFields.speed_limit_threshold":
		if e.complexity.VehicleLocationLastVarPopFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationLastVarPopFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleLocationLastVarPopFields.tachograph_speed":
		if e.complexity.VehicleLocationLastVarPopFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastVarPopFields.TachographSpeed(childComplexity), true

	case "VehicleLocationLastVarSampFields.gps_speed":
		if e.complexity.VehicleLocationLastVarSampFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastVarSampFields.GpsSpeed(childComplexity), true

	case "VehicleLocationLastVarSampFields.id":
		if e.complexity.VehicleLocationLastVarSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationLastVarSampFields.ID(childComplexity), true

	case "VehicleLocationLastVarSampFields.speed_limit_threshold":
		if e.complexity.VehicleLocationLastVarSampFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationLastVarSampFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleLocationLastVarSampFields.tachograph_speed":
		if e.complexity.VehicleLocationLastVarSampFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastVarSampFields.TachographSpeed(childComplexity), true

	case "VehicleLocationLastVarianceFields.gps_speed":
		if e.complexity.VehicleLocationLastVarianceFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastVarianceFields.GpsSpeed(childComplexity), true

	case "VehicleLocationLastVarianceFields.id":
		if e.complexity.VehicleLocationLastVarianceFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationLastVarianceFields.ID(childComplexity), true

	case "VehicleLocationLastVarianceFields.speed_limit_threshold":
		if e.complexity.VehicleLocationLastVarianceFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationLastVarianceFields.SpeedLimitThreshold(childComplexity), true

	case "VehicleLocationLastVarianceFields.tachograph_speed":
		if e.complexity.VehicleLocationLastVarianceFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastVarianceFields.TachographSpeed(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/common.graphqls", Input: `
"""
expression to compare columns of type _jsonb. All fields are combined with logical 'AND'.
"""
input JsonbComparisonExp {
	_eq: Jsonb
	_gt: Jsonb
	_gte: Jsonb
	_in: [Jsonb!]
	_is_null: Boolean
	_lt: Jsonb
	_lte: Jsonb
	_neq: Jsonb
	_nin: [Jsonb!]
}
"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input BigintComparisonExp {
	_eq: Bigint
	_gt: Bigint
	_gte: Bigint
	_in: [Bigint!]
	_is_null: Boolean
	_lt: Bigint
	_lte: Bigint
	_neq: Bigint
	_nin: [Bigint!]
}
"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input BooleanComparisonExp {
	_eq: Boolean
	_gt: Boolean
	_gte: Boolean
	_in: [Boolean!]
	_is_null: Boolean
	_lt: Boolean
	_lte: Boolean
	_neq: Boolean
	_nin: [Boolean!]
}
"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input IntComparisonExp {
	_eq: Int
	_gt: Int
	_gte: Int
	_in: [Int!]
	_is_null: Boolean
	_lt: Int
	_lte: Int
	_neq: Int
	_nin: [Int!]
}
"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input FloatComparisonExp{
	_eq: Float
	_gt: Float
	_gte: Float
	_in: [Float!]
	_is_null: Boolean
	_lt: Float
	_lte: Float
	_neq: Float
	_nin: [Float!]
}
"""
column ordering options
"""
enum OrderBy {
	"""
	in the ascending order, nulls last
	"""
	asc
	"""
	in the ascending order, nulls first
	"""
	asc_nulls_first
	"""
	in the ascending order, nulls last
	"""
	asc_nulls_last
	"""
	in the descending order, nulls first
	"""
	desc
	"""
	in the descending order, nulls first
	"""
	desc_nulls_first
	"""
	in the descending order, nulls last
	"""
	desc_nulls_last
}
"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input StringComparisonExp {
	_eq: String
	_gt: String
	_gte: String
	_ilike: String
	_in: [String!]
	_is_null: Boolean
	_like: String
	_lt: String
	_lte: String
	_neq: String
	_nilike: String
	_nin: [String!]
	_nlike: String
	_nsimilar: String
	_similar: String
}
"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input TimestamptzComparisonExp {
	_eq: Timestamptz
	_gt: Timestamptz
	_gte: Timestamptz
	_in: [Timestamptz!]
	_is_null: Boolean
	_lt: Timestamptz
	_lte: Timestamptz
	_neq: Timestamptz
	_nin: [Timestamptz!]
}
"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input NumericComparisonExp {
	_eq: Numeric
	_gt: Numeric
	_gte: Numeric
	_in: [Numeric!]
	_is_null: Boolean
	_lt: Numeric
	_lte: Numeric
	_neq: Numeric
	_nin: [Numeric!]
}
"""
expression to compare columns of type point. All fields are combined with logical 'AND'.
"""
input PointComparisonExp {
	_eq: Point
	_gt: Point
	_gte: Point
	_in: [Point!]
	_is_null: Boolean
	_lt: Point
	_lte: Point
	_neq: Point
	_nin: [Point!]
}
scalar Jsonb
scalar Bigint
scalar Timestamptz
scalar Point
scalar Numeric

`, BuiltIn: false},
	{Name: "graph/graphqls/vehicle_location_his.graphqls", Input: `"""
车辆位置历史表
"""
type VehicleLocationHis {
	"""
	ID
	"""
	id: Bigint!
	"""
	车辆ID
	"""
	vehicle_id: String!
	"""
	驾驶员ID
	"""
	driver_id: String
	"""
	企业ID
	"""
	enterprise_id: String
	"""
	监控图片ID
	"""
	supervision_photo_id: String
	"""
	加速度
	"""
	acceleration: String
	"""
	报警内容
	"""
	alarm_content: String
	"""
	海拔
	"""
	alititude: String
	"""
	方向
	"""
	direction: String
	"""
	行驶记录仪速度
	"""
	tachograph_speed: Numeric
	"""
	是否定位
	"""
	is_locate: Boolean
	"""
	定位时间
	"""
	locate_time: Timestamptz
	"""
	坐标
	"""
	coordinate: Point
	"""
	位置描述
	"""
	location_description: String
	"""
	里程
	"""
	mileage: String
	"""
	GPS速度
	"""
	gps_speed: Numeric
	"""
	星数
	"""
	star_count: String
	"""
	星况
	"""
	star_status: String
	"""
	道路名称
	"""
	road_name: String
	"""
	限速阀值
	"""
	speed_limit_threshold: Numeric
	"""
	纠偏后坐标
	"""
	correct_coordinate: Point
	"""
	车辆状态
	"""
	vehicle_status: String
	"""
	终端IMEI
	"""
	imei: String
	"""
	SIM卡号
	"""
	sim_number: String
	"""
	区域ID
	"""
	district_id: String
}
"""
aggregated selection of "vehicle_location_his"
"""
type VehicleLocationHisAggregate {
	aggregate: VehicleLocationHisAggregateFields
}
"""
aggregate fields of "vehicle_location_his"
"""
type VehicleLocationHisAggregateFields {
	avg: VehicleLocationHisAvgFields
	count: Int
	max: VehicleLocationHisMaxFields
	min: VehicleLocationHisMinFields
	stddev: VehicleLocationHisStddevFields
	stddev_pop: VehicleLocationHisStddevPopFields
	stddev_samp: VehicleLocationHisStddevSampFields
	sum: VehicleLocationHisSumFields
	var_pop: VehicleLocationHisVarPopFields
	var_samp: VehicleLocationHisVarSampFields
	variance: VehicleLocationHisVarianceFields
}
"""
aggregate avg on columns of table "vehicle_location_his"
"""
type VehicleLocationHisAvgFields {
	id: Bigint
	tachograph_speed: Numeric
	gps_speed: Numeric
	speed_limit_threshold: Numeric
}
"""
aggregate max on columns of table "vehicle_location_his"
"""
type VehicleLocationHisMaxFields {
	id: Bigint
	vehicle_id: String
	driver_id: String
	enterprise_id: String
	supervision_photo_id: String
	acceleration: String
	alarm_content: String
	alititude: String
	direction: String
	tachograph_speed: Numeric
	is_locate: Boolean
	locate_time: Timestamptz
	coordinate: Point
	location_description: String
	mileage: String
	gps_speed: Numeric
	star_count: String
	star_status: String
	road_name: String
	speed_limit_threshold: Numeric
	correct_coordinate: Point
	vehicle_status: String
	imei: String
	sim_number: String
	district_id: String
}
"""
aggregate min on columns of table "vehicle_location_his"
"""
type VehicleLocationHisMinFields {
	id: Bigint
	vehicle_id: String
	driver_id: String
	enterprise_id: String
	supervision_photo_id: String
	acceleration: String
	alarm_content: String
	alititude: String
	direction: String
	tachograph_speed: Numeric
	is_locate: Boolean
	locate_time: Timestamptz
	coordinate: Point
	location_description: String
	mileage: String
	gps_speed: Numeric
	star_count: String
	star_status: String
	road_name: String
	speed_limit_threshold: Numeric
	correct_coordinate: Point
	vehicle_status: String
	imei: String
	sim_number: String
	district_id: String
}
"""
aggregate stddev on columns of table "vehicle_location_his"
"""
type VehicleLocationHisStddevFields {
	id: Bigint
	tachograph_speed: Numeric
	gps_speed: Numeric
	speed_limit_threshold: Numeric
}
"""
aggregate stddev_pop on columns of table "vehicle_location_his"
"""
type VehicleLocationHisStddevPopFields {
	id: Bigint
	tachograph_speed: Numeric
	gps_speed: Numeric
	speed_limit_threshold: Numeric
}
"""
aggregate stddev_samp on columns of table "vehicle_location_his"
"""
type VehicleLocationHisStddevSampFields {
	id: Bigint
	tachograph_speed: Numeric
	gps_speed: Numeric
	speed_limit_threshold: Numeric
}
"""
aggregate sum on columns of table "vehicle_location_his"
"""
type VehicleLocationHisSumFields {
	id: Bigint
	tachograph_speed: Numeric
	gps_speed: Numeric
	speed_limit_threshold: Numeric
}
"""
aggregate var_pop on columns of table "vehicle_location_his"
"""
type VehicleLocationHisVarPopFields {
	id: Bigint
	tachograph_speed: Numeric
	gps_speed: Numeric
	speed_limit_threshold: Numeric
}
"""
aggregate var_samp on columns of table "vehicle_location_his"
"""
type VehicleLocationHisVarSampFields {
	id: Bigint
	tachograph_speed: Numeric
	gps_speed: Numeric
	speed_limit_threshold: Numeric
}
"""
aggregate variance on columns of table "vehicle_location_his"
"""
type VehicleLocationHisVarianceFields {
	id: Bigint
	tachograph_speed: Numeric
	gps_speed: Numeric
	speed_limit_threshold: Numeric
}
"""
response of any mutation on the table "vehicle_location_his"
"""
type VehicleLocationHisMutationResponse {
	affected_rows: Int!
	returning: [VehicleLocationHis!]!
}
"""
ordering options when selecting data from "vehicle_location_his"
"""
input VehicleLocationHisOrderBy {
	id: OrderBy
	vehicle_id: OrderBy
	driver_id: OrderBy
	enterprise_id: OrderBy
	supervision_photo_id: OrderBy
	acceleration: OrderBy
	alarm_content: OrderBy
	alititude: OrderBy
	direction: OrderBy
	tachograph_speed: OrderBy
	is_locate: OrderBy
	locate_time: OrderBy
	coordinate: OrderBy
	location_description: OrderBy
	mileage: OrderBy
	gps_speed: OrderBy
	star_count: OrderBy
	star_status: OrderBy
	road_name: OrderBy
	speed_limit_threshold: OrderBy
	correct_coordinate: OrderBy
	vehicle_status: OrderBy
	imei: OrderBy
	sim_number: OrderBy
	district_id: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vehicle_location_his'.
"""
input VehicleLocationHisBoolExp {
	_and: [VehicleLocationHisBoolExp]
	_not: VehicleLocationHisBoolExp
	_or: [VehicleLocationHisBoolExp]
	id: BigintComparisonExp
	vehicle_id: StringComparisonExp
	driver_id: StringComparisonExp
	enterprise_id: StringComparisonExp
	supervision_photo_id: StringComparisonExp
	acceleration: StringComparisonExp
	alarm_content: StringComparisonExp
	alititude: StringComparisonExp
	direction: StringComparisonExp
	tachograph_speed: NumericComparisonExp
	is_locate: BooleanComparisonExp
	locate_time: TimestamptzComparisonExp
	coordinate: PointComparisonExp
	location_description: StringComparisonExp
	mileage: StringComparisonExp
	gps_speed: NumericComparisonExp
	star_count: StringComparisonExp
	star_status: StringComparisonExp
	road_name: StringComparisonExp
	speed_limit_threshold: NumericComparisonExp
	correct_coordinate: PointComparisonExp
	vehicle_status: StringComparisonExp
	imei: StringComparisonExp
	sim_number: StringComparisonExp
	district_id: StringComparisonExp
}
"""
input type for inserting data into table "vehicle_location_his"
"""
input VehicleLocationHisInsertInput {
	vehicle_id: String!
	driver_id: String
	enterprise_id: String
	supervision_photo_id: String
	acceleration: String
	alarm_content: String
	alititude: String
	direction: String
	tachograph_speed: Numeric
	is_locate: Boolean
	locate_time: Timestamptz
	coordinate: Point
	location_description: String
	mileage: String
	gps_speed: Numeric
	star_count: String
	star_status: String
	road_name: String
	speed_limit_threshold: Numeric
	correct_coordinate: Point
	vehicle_status: String
	imei: String
	sim_number: String
	district_id: String
}
"""
input type for incrementing integer column in table "vehicle_location_his"
"""
input VehicleLocationHisIncInput {
	id: Bigint
	tachograph_speed: Numeric
	gps_speed: Numeric
	speed_limit_threshold: Numeric
}
"""
input type for updating data in table "vehicle_location_his"
"""
input VehicleLocationHisSetInput {
	id: Bigint
	vehicle_id: String
	driver_id: String
	enterprise_id: String
	supervision_photo_id: String
	acceleration: String
	alarm_content: String
	alititude: String
	direction: String
	tachograph_speed: Numeric
	is_locate: Boolean
	locate_time: Timestamptz
	coordinate: Point
	location_description: String
	mileage: String
	gps_speed: Numeric
	star_count: String
	star_status: String
	road_name: String
	speed_limit_threshold: Numeric
	correct_coordinate: Point
	vehicle_status: String
	imei: String
	sim_number: String
	district_id: String
}
"""
可选select
"""
enum VehicleLocationHisSelectColumn {
	"""
	ID
	"""
	id
	"""
	车辆ID
	"""
	vehicle_id
	"""
	驾驶员ID
	"""
	driver_id
	"""
	企业ID
	"""
	enterprise_id
	"""
	监控图片ID
	"""
	supervision_photo_id
	"""
	加速度
	"""
	acceleration
	"""
	报警内容
	"""
	alarm_content
	"""
	海拔
	"""
	alititude
	"""
	方向
	"""
	direction
	"""
	行驶记录仪速度
	"""
	tachograph_speed
	"""
	是否定位
	"""
	is_locate
	"""
	定位时间
	"""
	locate_time
	"""
	坐标
	"""
	coordinate
	"""
	位置描述
	"""
	location_description
	"""
	里程
	"""
	mileage
	"""
	GPS速度
	"""
	gps_speed
	"""
	星数
	"""
	star_count
	"""
	星况
	"""
	star_status
	"""
	道路名称
	"""
	road_name
	"""
	限速阀值
	"""
	speed_limit_threshold
	"""
	纠偏后坐标
	"""
	correct_coordinate
	"""
	车辆状态
	"""
	vehicle_status
	"""
	终端IMEI
	"""
	imei
	"""
	SIM卡号
	"""
	sim_number
	"""
	区域ID
	"""
	district_id
}
extend type Query {
	"""
	列表查询
	"""
	vehicle_location_his(distinct_on: [VehicleLocationHisSelectColumn!], limit: Int, offset: Int, order_by: [VehicleLocationHisOrderBy!], where: VehicleLocationHisBoolExp): [VehicleLocationHis!]!
	"""
	聚合查询
	"""
	vehicle_location_his_aggregate(distinct_on: [VehicleLocationHisSelectColumn!], limit: Int, offset: Int, order_by: [VehicleLocationHisOrderBy!], where: VehicleLocationHisBoolExp): VehicleLocationHisAggregate!
	"""
	主键查询
	"""
	vehicle_location_his_by_pk(id: Bigint!): VehicleLocationHis!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_vehicle_location_his(where: VehicleLocationHisBoolExp!): VehicleLocationHisMutationResponse
	"""
	根据主键删除记录
	"""
	delete_vehicle_location_his_by_pk(id: Bigint!): VehicleLocationHis
	"""
	插入
	"""
	insert_vehicle_location_his(objects: [VehicleLocationHisInsertInput!]!): VehicleLocationHisMutationResponse
	"""
	插入一条记录
	"""
	insert_vehicle_location_his_one(objects: VehicleLocationHisInsertInput!): VehicleLocationHis
	"""
	更新
	"""
	update_vehicle_location_his(_inc: VehicleLocationHisIncInput, _set: VehicleLocationHisSetInput, where: VehicleLocationHisBoolExp!): VehicleLocationHisMutationResponse
	"""
	更新
	"""
	update_vehicle_location_his_by_pk(_inc: VehicleLocationHisIncInput, _set: VehicleLocationHisSetInput, id: Bigint!): VehicleLocationHis
}
`, BuiltIn: false},
	{Name: "graph/graphqls/vehicle_location_last.graphqls", Input: `"""
车辆最新位置表
"""
type VehicleLocationLast {
	"""
	ID
	"""
	id: Bigint!
	"""
	车辆ID
	"""
	vehicle_id: String!
	"""
	驾驶员ID
	"""
	driver_id: String
	"""
	企业ID
	"""
	enterprise_id: String
	"""
	监控图片ID
	"""
	supervision_photo_id: String
	"""
	加速度
	"""
	acceleration: String
	"""
	报警内容
	"""
	alarm_content: String
	"""
	海拔
	"""
	alititude: String
	"""
	方向
	"""
	direction: String
	"""
	行驶记录仪速度
	"""
	tachograph_speed: Numeric
	"""
	是否定位
	"""
	is_locate: Boolean
	"""
	定位时间
	"""
	locate_time: Timestamptz
	"""
	坐标
	"""
	coordinate: Point
	"""
	位置描述
	"""
	location_description: String
	"""
	里程
	"""
	mileage: String
	"""
	GPS速度
	"""
	gps_speed: Numeric
	"""
	星数
	"""
	star_count: String
	"""
	星况
	"""
	star_status: String
	"""
	道路名称
	"""
	road_name: String
	"""
	限速阀值
	"""
	speed_limit_threshold: Numeric
	"""
	纠偏后坐标
	"""
	correct_coordinate: Point
	"""
	车辆状态
	"""
	vehicle_status: String
	"""
	终端IMEI
	"""
	imei: String
	"""
	SIM卡号
	"""
	sim_number: String
	"""
	区域ID
	"""
	district_id: String
}
"""
aggregated selection of "vehicle_location_last"
"""
type VehicleLocationLastAggregate {
	aggregate: VehicleLocationLastAggregateFields
}
"""
aggregate fields of "vehicle_location_last"
"""
type VehicleLocationLastAggregateFields {
	avg: VehicleLocationLastAvgFields
	count: Int
	max: VehicleLocationLastMaxFields
	min: VehicleLocationLastMinFields
	stddev: VehicleLocationLastStddevFields
	stddev_pop: VehicleLocationLastStddevPopFields
	stddev_samp: VehicleLocationLastStddevSampFields
	sum: VehicleLocationLastSumFields
	var_pop: VehicleLocationLastVarPopFields
	var_samp: VehicleLocationLastVarSampFields
	variance: VehicleLocationLastVarianceFields
}
"""
aggregate avg on columns of table "vehicle_location_last"
"""
type VehicleLocationLastAvgFields {
	id: Bigint
	tachograph_speed: Numeric
	gps_speed: Numeric
	speed_limit_threshold: Numeric
}
"""
aggregate max on columns of table "vehicle_location_last"
"""
type VehicleLocationLastMaxFields {
	id: Bigint
	vehicle_id: String
	driver_id: String
	enterprise_id: String
	supervision_photo_id: String
	acceleration: String
	alarm_content: String
	alititude: String
	direction: String
	tachograph_speed: Numeric
	is_locate: Boolean
	locate_time: Timestamptz
	coordinate: Point
	location_description: String
	mileage: String
	gps_speed: Numeric
	star_count: String
	star_status: String
	road_name: String
	speed_limit_threshold: Numeric
	correct_coordinate: Point
	vehicle_status: String
	imei: String
	sim_number: String
	district_id: String
}
"""
aggregate min on columns of table "vehicle_location_last"
"""
type VehicleLocationLastMinFields {
	id: Bigint
	vehicle_id: String
	driver_id: String
	enterprise_id: String
	supervision_photo_id: String
	acceleration: String
	alarm_content: String
	alititude: String
	direction: String
	tachograph_speed: Numeric
	is_locate: Boolean
	locate_time: Timestamptz
	coordinate: Point
	location_description: String
	mileage: String
	gps_speed: Numeric
	star_count: String
	star_status: String
	road_name: String
	speed_limit_threshold: Numeric
	correct_coordinate: Point
	vehicle_status: String
	imei: String
	sim_number: String
	district_id: String
}
"""
aggregate stddev on columns of table "vehicle_location_last"
"""
type VehicleLocationLastStddevFields {
	id: Bigint
	tachograph_speed: Numeric
	gps_speed: Numeric
	speed_limit_threshold: Numeric
}
"""
aggregate stddev_pop on columns of table "vehicle_location_last"
"""
type VehicleLocationLastStddevPopFields {
	id: Bigint
	tachograph_speed: Numeric
	gps_speed: Numeric
	speed_limit_threshold: Numeric
}
"""
aggregate stddev_samp on columns of table "vehicle_location_last"
"""
type VehicleLocationLastStddevSampFields {
	id: Bigint
	tachograph_speed: Numeric
	gps_speed: Numeric
	speed_limit_threshold: Numeric
}
"""
aggregate sum on columns of table "vehicle_location_last"
"""
type VehicleLocationLastSumFields {
	id: Bigint
	tachograph_speed: Numeric
	gps_speed: Numeric
	speed_limit_threshold: Numeric
}
"""
aggregate var_pop on columns of table "vehicle_location_last"
"""
type VehicleLocationLastVarPopFields {
	id: Bigint
	tachograph_speed: Numeric
	gps_speed: Numeric
	speed_limit_threshold: Numeric
}
"""
aggregate var_samp on columns of table "vehicle_location_last"
"""
type VehicleLocationLastVarSampFields {
	id: Bigint
	tachograph_speed: Numeric
	gps_speed: Numeric
	speed_limit_threshold: Numeric
}
"""
aggregate variance on columns of table "vehicle_location_last"
"""
type VehicleLocationLastVarianceFields {
	id: Bigint
	tachograph_speed: Numeric
	gps_speed: Numeric
	speed_limit_threshold: Numeric
}
"""
response of any mutation on the table "vehicle_location_last"
"""
type VehicleLocationLastMutationResponse {
	affected_rows: Int!
	returning: [VehicleLocationLast!]!
}
"""
ordering options when selecting data from "vehicle_location_last"
"""
input VehicleLocationLastOrderBy {
	id: OrderBy
	vehicle_id: OrderBy
	driver_id: OrderBy
	enterprise_id: OrderBy
	supervision_photo_id: OrderBy
	acceleration: OrderBy
	alarm_content: OrderBy
	alititude: OrderBy
	direction: OrderBy
	tachograph_speed: OrderBy
	is_locate: OrderBy
	locate_time: OrderBy
	coordinate: OrderBy
	location_description: OrderBy
	mileage: OrderBy
	gps_speed: OrderBy
	star_count: OrderBy
	star_status: OrderBy
	road_name: OrderBy
	speed_limit_threshold: OrderBy
	correct_coordinate: OrderBy
	vehicle_status: OrderBy
	imei: OrderBy
	sim_number: OrderBy
	district_id: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vehicle_location_last'.
"""
input VehicleLocationLastBoolExp {
	_and: [VehicleLocationLastBoolExp]
	_not: VehicleLocationLastBoolExp
	_or: [VehicleLocationLastBoolExp]
	id: BigintComparisonExp
	vehicle_id: StringComparisonExp
	driver_id: StringComparisonExp
	enterprise_id: StringComparisonExp
	supervision_photo_id: StringComparisonExp
	acceleration: StringComparisonExp
	alarm_content: StringComparisonExp
	alititude: StringComparisonExp
	direction: StringComparisonExp
	tachograph_speed: NumericComparisonExp
	is_locate: BooleanComparisonExp
	locate_time: TimestamptzComparisonExp
	coordinate: PointComparisonExp
	location_description: StringComparisonExp
	mileage: StringComparisonExp
	gps_speed: NumericComparisonExp
	star_count: StringComparisonExp
	star_status: StringComparisonExp
	road_name: StringComparisonExp
	speed_limit_threshold: NumericComparisonExp
	correct_coordinate: PointComparisonExp
	vehicle_status: StringComparisonExp
	imei: StringComparisonExp
	sim_number: StringComparisonExp
	district_id: StringComparisonExp
}
"""
input type for inserting data into table "vehicle_location_last"
"""
input VehicleLocationLastInsertInput {
	vehicle_id: String!
	driver_id: String
	enterprise_id: String
	supervision_photo_id: String
	acceleration: String
	alarm_content: String
	alititude: String
	direction: String
	tachograph_speed: Numeric
	is_locate: Boolean
	locate_time: Timestamptz
	coordinate: Point
	location_description: String
	mileage: String
	gps_speed: Numeric
	star_count: String
	star_status: String
	road_name: String
	speed_limit_threshold: Numeric
	correct_coordinate: Point
	vehicle_status: String
	imei: String
	sim_number: String
	district_id: String
}
"""
input type for incrementing integer column in table "vehicle_location_last"
"""
input VehicleLocationLastIncInput {
	id: Bigint
	tachograph_speed: Numeric
	gps_speed: Numeric
	speed_limit_threshold: Numeric
}
"""
input type for updating data in table "vehicle_location_last"
"""
input VehicleLocationLastSetInput {
	id: Bigint
	vehicle_id: String
	driver_id: String
	enterprise_id: String
	supervision_photo_id: String
	acceleration: String
	alarm_content: String
	alititude: String
	direction: String
	tachograph_speed: Numeric
	is_locate: Boolean
	locate_time: Timestamptz
	coordinate: Point
	location_description: String
	mileage: String
	gps_speed: Numeric
	star_count: String
	star_status: String
	road_name: String
	speed_limit_threshold: Numeric
	correct_coordinate: Point
	vehicle_status: String
	imei: String
	sim_number: String
	district_id: String
}
"""
可选select
"""
enum VehicleLocationLastSelectColumn {
	"""
	ID
	"""
	id
	"""
	车辆ID
	"""
	vehicle_id
	"""
	驾驶员ID
	"""
	driver_id
	"""
	企业ID
	"""
	enterprise_id
	"""
	监控图片ID
	"""
	supervision_photo_id
	"""
	加速度
	"""
	acceleration
	"""
	报警内容
	"""
	alarm_content
	"""
	海拔
	"""
	alititude
	"""
	方向
	"""
	direction
	"""
	行驶记录仪速度
	"""
	tachograph_speed
	"""
	是否定位
	"""
	is_locate
	"""
	定位时间
	"""
	locate_time
	"""
	坐标
	"""
	coordinate
	"""
	位置描述
	"""
	location_description
	"""
	里程
	"""
	mileage
	"""
	GPS速度
	"""
	gps_speed
	"""
	星数
	"""
	star_count
	"""
	星况
	"""
	star_status
	"""
	道路名称
	"""
	road_name
	"""
	限速阀值
	"""
	speed_limit_threshold
	"""
	纠偏后坐标
	"""
	correct_coordinate
	"""
	车辆状态
	"""
	vehicle_status
	"""
	终端IMEI
	"""
	imei
	"""
	SIM卡号
	"""
	sim_number
	"""
	区域ID
	"""
	district_id
}
extend type Query {
	"""
	列表查询
	"""
	vehicle_location_last(distinct_on: [VehicleLocationLastSelectColumn!], limit: Int, offset: Int, order_by: [VehicleLocationLastOrderBy!], where: VehicleLocationLastBoolExp): [VehicleLocationLast!]!
	"""
	聚合查询
	"""
	vehicle_location_last_aggregate(distinct_on: [VehicleLocationLastSelectColumn!], limit: Int, offset: Int, order_by: [VehicleLocationLastOrderBy!], where: VehicleLocationLastBoolExp): VehicleLocationLastAggregate!
	"""
	主键查询
	"""
	vehicle_location_last_by_pk(id: Bigint!): VehicleLocationLast!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_vehicle_location_last(where: VehicleLocationLastBoolExp!): VehicleLocationLastMutationResponse
	"""
	根据主键删除记录
	"""
	delete_vehicle_location_last_by_pk(id: Bigint!): VehicleLocationLast
	"""
	插入
	"""
	insert_vehicle_location_last(objects: [VehicleLocationLastInsertInput!]!): VehicleLocationLastMutationResponse
	"""
	插入一条记录
	"""
	insert_vehicle_location_last_one(objects: VehicleLocationLastInsertInput!): VehicleLocationLast
	"""
	更新
	"""
	update_vehicle_location_last(_inc: VehicleLocationLastIncInput, _set: VehicleLocationLastSetInput, where: VehicleLocationLastBoolExp!): VehicleLocationLastMutationResponse
	"""
	更新
	"""
	update_vehicle_location_last_by_pk(_inc: VehicleLocationLastIncInput, _set: VehicleLocationLastSetInput, id: Bigint!): VehicleLocationLast
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_delete_vehicle_location_his_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleLocationHisBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNVehicleLocationHisBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_location_his_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_location_last_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleLocationLastBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNVehicleLocationLastBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_location_last_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_location_his_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VehicleLocationHisInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleLocationHisInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_location_his_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleLocationHisInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleLocationHisInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_location_last_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VehicleLocationLastInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleLocationLastInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_location_last_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleLocationLastInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleLocationLastInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_location_his_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleLocationHisIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleLocationHisIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleLocationHisSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleLocationHisSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleLocationHisBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNVehicleLocationHisBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_location_his_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleLocationHisIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleLocationHisIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleLocationHisSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleLocationHisSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_location_last_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleLocationLastIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleLocationLastIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleLocationLastSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleLocationLastSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleLocationLastBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNVehicleLocationLastBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_location_last_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleLocationLastIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleLocationLastIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleLocationLastSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleLocationLastSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_location_his_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleLocationHisSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleLocationHisSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleLocationHisOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleLocationHisOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleLocationHisBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleLocationHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_location_his_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleLocationHisSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleLocationHisSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleLocationHisOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleLocationHisOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleLocationHisBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleLocationHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_location_his_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_location_last_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleLocationLastSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleLocationLastSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleLocationLastOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleLocationLastOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleLocationLastBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleLocationLastBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_location_last_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleLocationLastSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleLocationLastSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleLocationLastOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleLocationLastOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleLocationLastBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleLocationLastBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_location_last_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Mutation_delete_vehicle_location_his(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_location_his_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleLocationHis(rctx, args["where"].(model.VehicleLocationHisBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleLocationHisMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_location_his_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_location_his_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleLocationHisByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleLocationHis)
	fc.Result = res
	return ec.marshalOVehicleLocationHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋmodelᚐVehicleLocationHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_location_his(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_location_his_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleLocationHis(rctx, args["objects"].([]*model.VehicleLocationHisInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleLocationHisMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_location_his_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_location_his_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleLocationHisOne(rctx, args["objects"].(model.VehicleLocationHisInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleLocationHis)
	fc.Result = res
	return ec.marshalOVehicleLocationHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋmodelᚐVehicleLocationHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_location_his(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_location_his_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleLocationHis(rctx, args["_inc"].(*model.VehicleLocationHisIncInput), args["_set"].(*model.VehicleLocationHisSetInput), args["where"].(model.VehicleLocationHisBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleLocationHisMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_location_his_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_location_his_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleLocationHisByPk(rctx, args["_inc"].(*model.VehicleLocationHisIncInput), args["_set"].(*model.VehicleLocationHisSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleLocationHis)
	fc.Result = res
	return ec.marshalOVehicleLocationHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋmodelᚐVehicleLocationHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_location_last(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_location_last_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleLocationLast(rctx, args["where"].(model.VehicleLocationLastBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleLocationLastMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_location_last_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_location_last_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleLocationLastByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleLocationLast)
	fc.Result = res
	return ec.marshalOVehicleLocationLast2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋmodelᚐVehicleLocationLast(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_location_last(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_location_last_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleLocationLast(rctx, args["objects"].([]*model.VehicleLocationLastInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleLocationLastMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_location_last_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_location_last_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleLocationLastOne(rctx, args["objects"].(model.VehicleLocationLastInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleLocationLast)
	fc.Result = res
	return ec.marshalOVehicleLocationLast2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋmodelᚐVehicleLocationLast(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_location_last(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_location_last_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleLocationLast(rctx, args["_inc"].(*model.VehicleLocationLastIncInput), args["_set"].(*model.VehicleLocationLastSetInput), args["where"].(model.VehicleLocationLastBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleLocationLastMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_location_last_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_location_last_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleLocationLastByPk(rctx, args["_inc"].(*model.VehicleLocationLastIncInput), args["_set"].(*model.VehicleLocationLastSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleLocationLast)
	fc.Result = res
	return ec.marshalOVehicleLocationLast2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋmodelᚐVehicleLocationLast(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_location_his(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_location_his_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleLocationHis(rctx, args["distinct_on"].([]model.VehicleLocationHisSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleLocationHisOrderBy), args["where"].(*model.VehicleLocationHisBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleLocationHis)
	fc.Result = res
	return ec.marshalNVehicleLocationHis2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋmodelᚐVehicleLocationHisᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_location_his_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_location_his_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleLocationHisAggregate(rctx, args["distinct_on"].([]model.VehicleLocationHisSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleLocationHisOrderBy), args["where"].(*model.VehicleLocationHisBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisAggregate)
	fc.Result = res
	return ec.marshalNVehicleLocationHisAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_location_his_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_location_his_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleLocationHisByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleLocationHis)
	fc.Result = res
	return ec.marshalNVehicleLocationHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋmodelᚐVehicleLocationHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_location_last(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_location_last_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleLocationLast(rctx, args["distinct_on"].([]model.VehicleLocationLastSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleLocationLastOrderBy), args["where"].(*model.VehicleLocationLastBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleLocationLast)
	fc.Result = res
	return ec.marshalNVehicleLocationLast2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋmodelᚐVehicleLocationLastᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_location_last_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_location_last_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleLocationLastAggregate(rctx, args["distinct_on"].([]model.VehicleLocationLastSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleLocationLastOrderBy), args["where"].(*model.VehicleLocationLastBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastAggregate)
	fc.Result = res
	return ec.marshalNVehicleLocationLastAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_location_last_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_location_last_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleLocationLastByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleLocationLast)
	fc.Result = res
	return ec.marshalNVehicleLocationLast2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋmodelᚐVehicleLocationLast(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHis_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHis_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHis_driver_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHis_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHis_supervision_photo_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHis_acceleration(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Acceleration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHis_alarm_content(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHis_alititude(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alititude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHis_direction(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHis_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHis_is_locate(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsLocate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHis_locate_time(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHis_coordinate(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHis_location_description(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHis_mileage(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mileage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHis_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHis_star_count(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StarCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHis_star_status(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StarStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHis_road_name(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHis_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHis_correct_coordinate(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CorrectCoordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHis_vehicle_status(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHis_imei(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imei, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHis_sim_number(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHis_district_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisAggregateFields)
	fc.Result = res
	return ec.marshalOVehicleLocationHisAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisAvgFields)
	fc.Result = res
	return ec.marshalOVehicleLocationHisAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisMaxFields)
	fc.Result = res
	return ec.marshalOVehicleLocationHisMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisMinFields)
	fc.Result = res
	return ec.marshalOVehicleLocationHisMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisStddevFields)
	fc.Result = res
	return ec.marshalOVehicleLocationHisStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisStddevPopFields)
	fc.Result = res
	return ec.marshalOVehicleLocationHisStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisStddevSampFields)
	fc.Result = res
	return ec.marshalOVehicleLocationHisStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisSumFields)
	fc.Result = res
	return ec.marshalOVehicleLocationHisSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisVarPopFields)
	fc.Result = res
	return ec.marshalOVehicleLocationHisVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisVarSampFields)
	fc.Result = res
	return ec.marshalOVehicleLocationHisVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisVarianceFields)
	fc.Result = res
	return ec.marshalOVehicleLocationHisVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisAvgFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisAvgFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisAvgFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMaxFields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMaxFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMaxFields_supervision_photo_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMaxFields_acceleration(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Acceleration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMaxFields_alarm_content(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMaxFields_alititude(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alititude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMaxFields_direction(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMaxFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMaxFields_is_locate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsLocate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMaxFields_locate_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMaxFields_coordinate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMaxFields_location_description(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMaxFields_mileage(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mileage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMaxFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMaxFields_star_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StarCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMaxFields_star_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StarStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMaxFields_road_name(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMaxFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMaxFields_correct_coordinate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CorrectCoordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMaxFields_vehicle_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMaxFields_imei(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imei, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMaxFields_sim_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMaxFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMinFields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMinFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMinFields_supervision_photo_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMinFields_acceleration(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Acceleration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMinFields_alarm_content(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMinFields_alititude(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alititude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMinFields_direction(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMinFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMinFields_is_locate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsLocate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMinFields_locate_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMinFields_coordinate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMinFields_location_description(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMinFields_mileage(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mileage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMinFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMinFields_star_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StarCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMinFields_star_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StarStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMinFields_road_name(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMinFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMinFields_correct_coordinate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CorrectCoordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMinFields_vehicle_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMinFields_imei(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imei, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMinFields_sim_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMinFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleLocationHis)
	fc.Result = res
	return ec.marshalNVehicleLocationHis2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋmodelᚐVehicleLocationHisᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisStddevFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisStddevFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisStddevFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisStddevPopFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisStddevPopFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisStddevPopFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisStddevSampFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisStddevSampFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisStddevSampFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisSumFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisSumFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisSumFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisVarPopFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisVarPopFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisVarPopFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisVarSampFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisVarSampFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisVarSampFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisVarianceFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisVarianceFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationHisVarianceFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationHisVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLast_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLast",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLast_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLast",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLast_driver_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLast",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLast_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLast",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLast_supervision_photo_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLast",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLast_acceleration(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLast",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Acceleration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLast_alarm_content(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLast",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLast_alititude(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLast",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alititude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLast_direction(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLast",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLast_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLast",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLast_is_locate(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLast",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsLocate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLast_locate_time(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLast",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLast_coordinate(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLast",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLast_location_description(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLast",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLast_mileage(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLast",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mileage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLast_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLast",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLast_star_count(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLast",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StarCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLast_star_status(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLast",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StarStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLast_road_name(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLast",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLast_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLast",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLast_correct_coordinate(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLast",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CorrectCoordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLast_vehicle_status(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLast",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLast_imei(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLast",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imei, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLast_sim_number(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLast",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLast_district_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLast",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastAggregateFields)
	fc.Result = res
	return ec.marshalOVehicleLocationLastAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastAvgFields)
	fc.Result = res
	return ec.marshalOVehicleLocationLastAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastMaxFields)
	fc.Result = res
	return ec.marshalOVehicleLocationLastMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastMinFields)
	fc.Result = res
	return ec.marshalOVehicleLocationLastMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastStddevFields)
	fc.Result = res
	return ec.marshalOVehicleLocationLastStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastStddevPopFields)
	fc.Result = res
	return ec.marshalOVehicleLocationLastStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastStddevSampFields)
	fc.Result = res
	return ec.marshalOVehicleLocationLastStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastSumFields)
	fc.Result = res
	return ec.marshalOVehicleLocationLastSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastVarPopFields)
	fc.Result = res
	return ec.marshalOVehicleLocationLastVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastVarSampFields)
	fc.Result = res
	return ec.marshalOVehicleLocationLastVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastVarianceFields)
	fc.Result = res
	return ec.marshalOVehicleLocationLastVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastAvgFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastAvgFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastAvgFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMaxFields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMaxFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMaxFields_supervision_photo_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMaxFields_acceleration(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Acceleration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMaxFields_alarm_content(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMaxFields_alititude(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alititude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMaxFields_direction(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMaxFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMaxFields_is_locate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsLocate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMaxFields_locate_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMaxFields_coordinate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMaxFields_location_description(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMaxFields_mileage(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mileage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMaxFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMaxFields_star_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StarCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMaxFields_star_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StarStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMaxFields_road_name(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMaxFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMaxFields_correct_coordinate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CorrectCoordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMaxFields_vehicle_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMaxFields_imei(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imei, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMaxFields_sim_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMaxFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMinFields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMinFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMinFields_supervision_photo_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMinFields_acceleration(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Acceleration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMinFields_alarm_content(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMinFields_alititude(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alititude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMinFields_direction(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMinFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMinFields_is_locate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsLocate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMinFields_locate_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMinFields_coordinate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMinFields_location_description(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMinFields_mileage(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mileage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMinFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMinFields_star_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StarCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMinFields_star_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StarStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMinFields_road_name(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMinFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMinFields_correct_coordinate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CorrectCoordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMinFields_vehicle_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMinFields_imei(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imei, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMinFields_sim_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMinFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleLocationLast)
	fc.Result = res
	return ec.marshalNVehicleLocationLast2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋmodelᚐVehicleLocationLastᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastStddevFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastStddevFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastStddevFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastStddevPopFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastStddevPopFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastStddevPopFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastStddevSampFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastStddevSampFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastStddevSampFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastSumFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastSumFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastSumFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastVarPopFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastVarPopFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastVarPopFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastVarSampFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastVarSampFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastVarSampFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastVarianceFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastVarianceFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleLocationLastVarianceFields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleLocationLastVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBigintComparisonExp(ctx context.Context, obj interface{}) (model2.BigintComparisonExp, error) {
	var it model2.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBooleanComparisonExp(ctx context.Context, obj interface{}) (model2.BooleanComparisonExp, error) {
	var it model2.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFloatComparisonExp(ctx context.Context, obj interface{}) (model2.FloatComparisonExp, error) {
	var it model2.FloatComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIntComparisonExp(ctx context.Context, obj interface{}) (model2.IntComparisonExp, error) {
	var it model2.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJsonbComparisonExp(ctx context.Context, obj interface{}) (model2.JsonbComparisonExp, error) {
	var it model2.JsonbComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNumericComparisonExp(ctx context.Context, obj interface{}) (model2.NumericComparisonExp, error) {
	var it model2.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPointComparisonExp(ctx context.Context, obj interface{}) (model2.PointComparisonExp, error) {
	var it model2.PointComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringComparisonExp(ctx context.Context, obj interface{}) (model2.StringComparisonExp, error) {
	var it model2.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTimestamptzComparisonExp(ctx context.Context, obj interface{}) (model2.TimestamptzComparisonExp, error) {
	var it model2.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleLocationHisBoolExp(ctx context.Context, obj interface{}) (model.VehicleLocationHisBoolExp, error) {
	var it model.VehicleLocationHisBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOVehicleLocationHisBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOVehicleLocationHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOVehicleLocationHisBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
			it.SupervisionPhotoID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "acceleration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceleration"))
			it.Acceleration, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alititude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alititude"))
			it.Alititude, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_locate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_locate"))
			it.IsLocate, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "locate_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locate_time"))
			it.LocateTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOPointComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "mileage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mileage"))
			it.Mileage, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_count"))
			it.StarCount, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_status"))
			it.StarStatus, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "correct_coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("correct_coordinate"))
			it.CorrectCoordinate, err = ec.unmarshalOPointComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_status"))
			it.VehicleStatus, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "imei":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imei"))
			it.Imei, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleLocationHisIncInput(ctx context.Context, obj interface{}) (model.VehicleLocationHisIncInput, error) {
	var it model.VehicleLocationHisIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleLocationHisInsertInput(ctx context.Context, obj interface{}) (model.VehicleLocationHisInsertInput, error) {
	var it model.VehicleLocationHisInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
			it.SupervisionPhotoID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "acceleration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceleration"))
			it.Acceleration, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alititude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alititude"))
			it.Alititude, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_locate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_locate"))
			it.IsLocate, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "locate_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locate_time"))
			it.LocateTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mileage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mileage"))
			it.Mileage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_count"))
			it.StarCount, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_status"))
			it.StarStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "correct_coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("correct_coordinate"))
			it.CorrectCoordinate, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_status"))
			it.VehicleStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "imei":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imei"))
			it.Imei, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleLocationHisOrderBy(ctx context.Context, obj interface{}) (model.VehicleLocationHisOrderBy, error) {
	var it model.VehicleLocationHisOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
			it.SupervisionPhotoID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "acceleration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceleration"))
			it.Acceleration, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alititude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alititude"))
			it.Alititude, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_locate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_locate"))
			it.IsLocate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "locate_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locate_time"))
			it.LocateTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mileage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mileage"))
			it.Mileage, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_count"))
			it.StarCount, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_status"))
			it.StarStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "correct_coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("correct_coordinate"))
			it.CorrectCoordinate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_status"))
			it.VehicleStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "imei":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imei"))
			it.Imei, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleLocationHisSetInput(ctx context.Context, obj interface{}) (model.VehicleLocationHisSetInput, error) {
	var it model.VehicleLocationHisSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
			it.SupervisionPhotoID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "acceleration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceleration"))
			it.Acceleration, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alititude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alititude"))
			it.Alititude, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_locate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_locate"))
			it.IsLocate, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "locate_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locate_time"))
			it.LocateTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mileage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mileage"))
			it.Mileage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_count"))
			it.StarCount, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_status"))
			it.StarStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "correct_coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("correct_coordinate"))
			it.CorrectCoordinate, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_status"))
			it.VehicleStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "imei":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imei"))
			it.Imei, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleLocationLastBoolExp(ctx context.Context, obj interface{}) (model.VehicleLocationLastBoolExp, error) {
	var it model.VehicleLocationLastBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOVehicleLocationLastBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOVehicleLocationLastBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOVehicleLocationLastBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
			it.SupervisionPhotoID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "acceleration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceleration"))
			it.Acceleration, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alititude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alititude"))
			it.Alititude, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_locate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_locate"))
			it.IsLocate, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "locate_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locate_time"))
			it.LocateTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOPointComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "mileage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mileage"))
			it.Mileage, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_count"))
			it.StarCount, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_status"))
			it.StarStatus, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "correct_coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("correct_coordinate"))
			it.CorrectCoordinate, err = ec.unmarshalOPointComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_status"))
			it.VehicleStatus, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "imei":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imei"))
			it.Imei, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleLocationLastIncInput(ctx context.Context, obj interface{}) (model.VehicleLocationLastIncInput, error) {
	var it model.VehicleLocationLastIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleLocationLastInsertInput(ctx context.Context, obj interface{}) (model.VehicleLocationLastInsertInput, error) {
	var it model.VehicleLocationLastInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
			it.SupervisionPhotoID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "acceleration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceleration"))
			it.Acceleration, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alititude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alititude"))
			it.Alititude, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_locate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_locate"))
			it.IsLocate, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "locate_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locate_time"))
			it.LocateTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mileage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mileage"))
			it.Mileage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_count"))
			it.StarCount, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_status"))
			it.StarStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "correct_coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("correct_coordinate"))
			it.CorrectCoordinate, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_status"))
			it.VehicleStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "imei":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imei"))
			it.Imei, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleLocationLastOrderBy(ctx context.Context, obj interface{}) (model.VehicleLocationLastOrderBy, error) {
	var it model.VehicleLocationLastOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
			it.SupervisionPhotoID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "acceleration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceleration"))
			it.Acceleration, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alititude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alititude"))
			it.Alititude, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_locate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_locate"))
			it.IsLocate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "locate_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locate_time"))
			it.LocateTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mileage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mileage"))
			it.Mileage, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_count"))
			it.StarCount, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_status"))
			it.StarStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "correct_coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("correct_coordinate"))
			it.CorrectCoordinate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_status"))
			it.VehicleStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "imei":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imei"))
			it.Imei, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleLocationLastSetInput(ctx context.Context, obj interface{}) (model.VehicleLocationLastSetInput, error) {
	var it model.VehicleLocationLastSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
			it.SupervisionPhotoID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "acceleration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceleration"))
			it.Acceleration, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alititude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alititude"))
			it.Alititude, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_locate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_locate"))
			it.IsLocate, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "locate_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locate_time"))
			it.LocateTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mileage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mileage"))
			it.Mileage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_count"))
			it.StarCount, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_status"))
			it.StarStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "correct_coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("correct_coordinate"))
			it.CorrectCoordinate, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_status"))
			it.VehicleStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "imei":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imei"))
			it.Imei, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "delete_vehicle_location_his":
			out.Values[i] = ec._Mutation_delete_vehicle_location_his(ctx, field)
		case "delete_vehicle_location_his_by_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_location_his_by_pk(ctx, field)
		case "insert_vehicle_location_his":
			out.Values[i] = ec._Mutation_insert_vehicle_location_his(ctx, field)
		case "insert_vehicle_location_his_one":
			out.Values[i] = ec._Mutation_insert_vehicle_location_his_one(ctx, field)
		case "update_vehicle_location_his":
			out.Values[i] = ec._Mutation_update_vehicle_location_his(ctx, field)
		case "update_vehicle_location_his_by_pk":
			out.Values[i] = ec._Mutation_update_vehicle_location_his_by_pk(ctx, field)
		case "delete_vehicle_location_last":
			out.Values[i] = ec._Mutation_delete_vehicle_location_last(ctx, field)
		case "delete_vehicle_location_last_by_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_location_last_by_pk(ctx, field)
		case "insert_vehicle_location_last":
			out.Values[i] = ec._Mutation_insert_vehicle_location_last(ctx, field)
		case "insert_vehicle_location_last_one":
			out.Values[i] = ec._Mutation_insert_vehicle_location_last_one(ctx, field)
		case "update_vehicle_location_last":
			out.Values[i] = ec._Mutation_update_vehicle_location_last(ctx, field)
		case "update_vehicle_location_last_by_pk":
			out.Values[i] = ec._Mutation_update_vehicle_location_last_by_pk(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "vehicle_location_his":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_location_his(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_location_his_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_location_his_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_location_his_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_location_his_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_location_last":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_location_last(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_location_last_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_location_last_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_location_last_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_location_last_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleLocationHisImplementors = []string{"VehicleLocationHis"}

func (ec *executionContext) _VehicleLocationHis(ctx context.Context, sel ast.SelectionSet, obj *model1.VehicleLocationHis) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleLocationHisImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleLocationHis")
		case "id":
			out.Values[i] = ec._VehicleLocationHis_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._VehicleLocationHis_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "driver_id":
			out.Values[i] = ec._VehicleLocationHis_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._VehicleLocationHis_enterprise_id(ctx, field, obj)
		case "supervision_photo_id":
			out.Values[i] = ec._VehicleLocationHis_supervision_photo_id(ctx, field, obj)
		case "acceleration":
			out.Values[i] = ec._VehicleLocationHis_acceleration(ctx, field, obj)
		case "alarm_content":
			out.Values[i] = ec._VehicleLocationHis_alarm_content(ctx, field, obj)
		case "alititude":
			out.Values[i] = ec._VehicleLocationHis_alititude(ctx, field, obj)
		case "direction":
			out.Values[i] = ec._VehicleLocationHis_direction(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleLocationHis_tachograph_speed(ctx, field, obj)
		case "is_locate":
			out.Values[i] = ec._VehicleLocationHis_is_locate(ctx, field, obj)
		case "locate_time":
			out.Values[i] = ec._VehicleLocationHis_locate_time(ctx, field, obj)
		case "coordinate":
			out.Values[i] = ec._VehicleLocationHis_coordinate(ctx, field, obj)
		case "location_description":
			out.Values[i] = ec._VehicleLocationHis_location_description(ctx, field, obj)
		case "mileage":
			out.Values[i] = ec._VehicleLocationHis_mileage(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleLocationHis_gps_speed(ctx, field, obj)
		case "star_count":
			out.Values[i] = ec._VehicleLocationHis_star_count(ctx, field, obj)
		case "star_status":
			out.Values[i] = ec._VehicleLocationHis_star_status(ctx, field, obj)
		case "road_name":
			out.Values[i] = ec._VehicleLocationHis_road_name(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleLocationHis_speed_limit_threshold(ctx, field, obj)
		case "correct_coordinate":
			out.Values[i] = ec._VehicleLocationHis_correct_coordinate(ctx, field, obj)
		case "vehicle_status":
			out.Values[i] = ec._VehicleLocationHis_vehicle_status(ctx, field, obj)
		case "imei":
			out.Values[i] = ec._VehicleLocationHis_imei(ctx, field, obj)
		case "sim_number":
			out.Values[i] = ec._VehicleLocationHis_sim_number(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._VehicleLocationHis_district_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleLocationHisAggregateImplementors = []string{"VehicleLocationHisAggregate"}

func (ec *executionContext) _VehicleLocationHisAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationHisAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleLocationHisAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleLocationHisAggregate")
		case "aggregate":
			out.Values[i] = ec._VehicleLocationHisAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleLocationHisAggregateFieldsImplementors = []string{"VehicleLocationHisAggregateFields"}

func (ec *executionContext) _VehicleLocationHisAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationHisAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleLocationHisAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleLocationHisAggregateFields")
		case "avg":
			out.Values[i] = ec._VehicleLocationHisAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._VehicleLocationHisAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._VehicleLocationHisAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._VehicleLocationHisAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._VehicleLocationHisAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._VehicleLocationHisAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._VehicleLocationHisAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._VehicleLocationHisAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._VehicleLocationHisAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._VehicleLocationHisAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._VehicleLocationHisAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleLocationHisAvgFieldsImplementors = []string{"VehicleLocationHisAvgFields"}

func (ec *executionContext) _VehicleLocationHisAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationHisAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleLocationHisAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleLocationHisAvgFields")
		case "id":
			out.Values[i] = ec._VehicleLocationHisAvgFields_id(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleLocationHisAvgFields_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleLocationHisAvgFields_gps_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleLocationHisAvgFields_speed_limit_threshold(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleLocationHisMaxFieldsImplementors = []string{"VehicleLocationHisMaxFields"}

func (ec *executionContext) _VehicleLocationHisMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationHisMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleLocationHisMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleLocationHisMaxFields")
		case "id":
			out.Values[i] = ec._VehicleLocationHisMaxFields_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VehicleLocationHisMaxFields_vehicle_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._VehicleLocationHisMaxFields_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._VehicleLocationHisMaxFields_enterprise_id(ctx, field, obj)
		case "supervision_photo_id":
			out.Values[i] = ec._VehicleLocationHisMaxFields_supervision_photo_id(ctx, field, obj)
		case "acceleration":
			out.Values[i] = ec._VehicleLocationHisMaxFields_acceleration(ctx, field, obj)
		case "alarm_content":
			out.Values[i] = ec._VehicleLocationHisMaxFields_alarm_content(ctx, field, obj)
		case "alititude":
			out.Values[i] = ec._VehicleLocationHisMaxFields_alititude(ctx, field, obj)
		case "direction":
			out.Values[i] = ec._VehicleLocationHisMaxFields_direction(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleLocationHisMaxFields_tachograph_speed(ctx, field, obj)
		case "is_locate":
			out.Values[i] = ec._VehicleLocationHisMaxFields_is_locate(ctx, field, obj)
		case "locate_time":
			out.Values[i] = ec._VehicleLocationHisMaxFields_locate_time(ctx, field, obj)
		case "coordinate":
			out.Values[i] = ec._VehicleLocationHisMaxFields_coordinate(ctx, field, obj)
		case "location_description":
			out.Values[i] = ec._VehicleLocationHisMaxFields_location_description(ctx, field, obj)
		case "mileage":
			out.Values[i] = ec._VehicleLocationHisMaxFields_mileage(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleLocationHisMaxFields_gps_speed(ctx, field, obj)
		case "star_count":
			out.Values[i] = ec._VehicleLocationHisMaxFields_star_count(ctx, field, obj)
		case "star_status":
			out.Values[i] = ec._VehicleLocationHisMaxFields_star_status(ctx, field, obj)
		case "road_name":
			out.Values[i] = ec._VehicleLocationHisMaxFields_road_name(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleLocationHisMaxFields_speed_limit_threshold(ctx, field, obj)
		case "correct_coordinate":
			out.Values[i] = ec._VehicleLocationHisMaxFields_correct_coordinate(ctx, field, obj)
		case "vehicle_status":
			out.Values[i] = ec._VehicleLocationHisMaxFields_vehicle_status(ctx, field, obj)
		case "imei":
			out.Values[i] = ec._VehicleLocationHisMaxFields_imei(ctx, field, obj)
		case "sim_number":
			out.Values[i] = ec._VehicleLocationHisMaxFields_sim_number(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._VehicleLocationHisMaxFields_district_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleLocationHisMinFieldsImplementors = []string{"VehicleLocationHisMinFields"}

func (ec *executionContext) _VehicleLocationHisMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationHisMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleLocationHisMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleLocationHisMinFields")
		case "id":
			out.Values[i] = ec._VehicleLocationHisMinFields_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VehicleLocationHisMinFields_vehicle_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._VehicleLocationHisMinFields_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._VehicleLocationHisMinFields_enterprise_id(ctx, field, obj)
		case "supervision_photo_id":
			out.Values[i] = ec._VehicleLocationHisMinFields_supervision_photo_id(ctx, field, obj)
		case "acceleration":
			out.Values[i] = ec._VehicleLocationHisMinFields_acceleration(ctx, field, obj)
		case "alarm_content":
			out.Values[i] = ec._VehicleLocationHisMinFields_alarm_content(ctx, field, obj)
		case "alititude":
			out.Values[i] = ec._VehicleLocationHisMinFields_alititude(ctx, field, obj)
		case "direction":
			out.Values[i] = ec._VehicleLocationHisMinFields_direction(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleLocationHisMinFields_tachograph_speed(ctx, field, obj)
		case "is_locate":
			out.Values[i] = ec._VehicleLocationHisMinFields_is_locate(ctx, field, obj)
		case "locate_time":
			out.Values[i] = ec._VehicleLocationHisMinFields_locate_time(ctx, field, obj)
		case "coordinate":
			out.Values[i] = ec._VehicleLocationHisMinFields_coordinate(ctx, field, obj)
		case "location_description":
			out.Values[i] = ec._VehicleLocationHisMinFields_location_description(ctx, field, obj)
		case "mileage":
			out.Values[i] = ec._VehicleLocationHisMinFields_mileage(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleLocationHisMinFields_gps_speed(ctx, field, obj)
		case "star_count":
			out.Values[i] = ec._VehicleLocationHisMinFields_star_count(ctx, field, obj)
		case "star_status":
			out.Values[i] = ec._VehicleLocationHisMinFields_star_status(ctx, field, obj)
		case "road_name":
			out.Values[i] = ec._VehicleLocationHisMinFields_road_name(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleLocationHisMinFields_speed_limit_threshold(ctx, field, obj)
		case "correct_coordinate":
			out.Values[i] = ec._VehicleLocationHisMinFields_correct_coordinate(ctx, field, obj)
		case "vehicle_status":
			out.Values[i] = ec._VehicleLocationHisMinFields_vehicle_status(ctx, field, obj)
		case "imei":
			out.Values[i] = ec._VehicleLocationHisMinFields_imei(ctx, field, obj)
		case "sim_number":
			out.Values[i] = ec._VehicleLocationHisMinFields_sim_number(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._VehicleLocationHisMinFields_district_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleLocationHisMutationResponseImplementors = []string{"VehicleLocationHisMutationResponse"}

func (ec *executionContext) _VehicleLocationHisMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationHisMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleLocationHisMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleLocationHisMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._VehicleLocationHisMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._VehicleLocationHisMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleLocationHisStddevFieldsImplementors = []string{"VehicleLocationHisStddevFields"}

func (ec *executionContext) _VehicleLocationHisStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationHisStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleLocationHisStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleLocationHisStddevFields")
		case "id":
			out.Values[i] = ec._VehicleLocationHisStddevFields_id(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleLocationHisStddevFields_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleLocationHisStddevFields_gps_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleLocationHisStddevFields_speed_limit_threshold(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleLocationHisStddevPopFieldsImplementors = []string{"VehicleLocationHisStddevPopFields"}

func (ec *executionContext) _VehicleLocationHisStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationHisStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleLocationHisStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleLocationHisStddevPopFields")
		case "id":
			out.Values[i] = ec._VehicleLocationHisStddevPopFields_id(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleLocationHisStddevPopFields_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleLocationHisStddevPopFields_gps_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleLocationHisStddevPopFields_speed_limit_threshold(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleLocationHisStddevSampFieldsImplementors = []string{"VehicleLocationHisStddevSampFields"}

func (ec *executionContext) _VehicleLocationHisStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationHisStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleLocationHisStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleLocationHisStddevSampFields")
		case "id":
			out.Values[i] = ec._VehicleLocationHisStddevSampFields_id(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleLocationHisStddevSampFields_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleLocationHisStddevSampFields_gps_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleLocationHisStddevSampFields_speed_limit_threshold(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleLocationHisSumFieldsImplementors = []string{"VehicleLocationHisSumFields"}

func (ec *executionContext) _VehicleLocationHisSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationHisSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleLocationHisSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleLocationHisSumFields")
		case "id":
			out.Values[i] = ec._VehicleLocationHisSumFields_id(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleLocationHisSumFields_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleLocationHisSumFields_gps_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleLocationHisSumFields_speed_limit_threshold(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleLocationHisVarPopFieldsImplementors = []string{"VehicleLocationHisVarPopFields"}

func (ec *executionContext) _VehicleLocationHisVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationHisVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleLocationHisVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleLocationHisVarPopFields")
		case "id":
			out.Values[i] = ec._VehicleLocationHisVarPopFields_id(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleLocationHisVarPopFields_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleLocationHisVarPopFields_gps_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleLocationHisVarPopFields_speed_limit_threshold(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleLocationHisVarSampFieldsImplementors = []string{"VehicleLocationHisVarSampFields"}

func (ec *executionContext) _VehicleLocationHisVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationHisVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleLocationHisVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleLocationHisVarSampFields")
		case "id":
			out.Values[i] = ec._VehicleLocationHisVarSampFields_id(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleLocationHisVarSampFields_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleLocationHisVarSampFields_gps_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleLocationHisVarSampFields_speed_limit_threshold(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleLocationHisVarianceFieldsImplementors = []string{"VehicleLocationHisVarianceFields"}

func (ec *executionContext) _VehicleLocationHisVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationHisVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleLocationHisVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleLocationHisVarianceFields")
		case "id":
			out.Values[i] = ec._VehicleLocationHisVarianceFields_id(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleLocationHisVarianceFields_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleLocationHisVarianceFields_gps_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleLocationHisVarianceFields_speed_limit_threshold(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleLocationLastImplementors = []string{"VehicleLocationLast"}

func (ec *executionContext) _VehicleLocationLast(ctx context.Context, sel ast.SelectionSet, obj *model1.VehicleLocationLast) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleLocationLastImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleLocationLast")
		case "id":
			out.Values[i] = ec._VehicleLocationLast_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._VehicleLocationLast_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "driver_id":
			out.Values[i] = ec._VehicleLocationLast_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._VehicleLocationLast_enterprise_id(ctx, field, obj)
		case "supervision_photo_id":
			out.Values[i] = ec._VehicleLocationLast_supervision_photo_id(ctx, field, obj)
		case "acceleration":
			out.Values[i] = ec._VehicleLocationLast_acceleration(ctx, field, obj)
		case "alarm_content":
			out.Values[i] = ec._VehicleLocationLast_alarm_content(ctx, field, obj)
		case "alititude":
			out.Values[i] = ec._VehicleLocationLast_alititude(ctx, field, obj)
		case "direction":
			out.Values[i] = ec._VehicleLocationLast_direction(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleLocationLast_tachograph_speed(ctx, field, obj)
		case "is_locate":
			out.Values[i] = ec._VehicleLocationLast_is_locate(ctx, field, obj)
		case "locate_time":
			out.Values[i] = ec._VehicleLocationLast_locate_time(ctx, field, obj)
		case "coordinate":
			out.Values[i] = ec._VehicleLocationLast_coordinate(ctx, field, obj)
		case "location_description":
			out.Values[i] = ec._VehicleLocationLast_location_description(ctx, field, obj)
		case "mileage":
			out.Values[i] = ec._VehicleLocationLast_mileage(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleLocationLast_gps_speed(ctx, field, obj)
		case "star_count":
			out.Values[i] = ec._VehicleLocationLast_star_count(ctx, field, obj)
		case "star_status":
			out.Values[i] = ec._VehicleLocationLast_star_status(ctx, field, obj)
		case "road_name":
			out.Values[i] = ec._VehicleLocationLast_road_name(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleLocationLast_speed_limit_threshold(ctx, field, obj)
		case "correct_coordinate":
			out.Values[i] = ec._VehicleLocationLast_correct_coordinate(ctx, field, obj)
		case "vehicle_status":
			out.Values[i] = ec._VehicleLocationLast_vehicle_status(ctx, field, obj)
		case "imei":
			out.Values[i] = ec._VehicleLocationLast_imei(ctx, field, obj)
		case "sim_number":
			out.Values[i] = ec._VehicleLocationLast_sim_number(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._VehicleLocationLast_district_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleLocationLastAggregateImplementors = []string{"VehicleLocationLastAggregate"}

func (ec *executionContext) _VehicleLocationLastAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationLastAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleLocationLastAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleLocationLastAggregate")
		case "aggregate":
			out.Values[i] = ec._VehicleLocationLastAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleLocationLastAggregateFieldsImplementors = []string{"VehicleLocationLastAggregateFields"}

func (ec *executionContext) _VehicleLocationLastAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationLastAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleLocationLastAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleLocationLastAggregateFields")
		case "avg":
			out.Values[i] = ec._VehicleLocationLastAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._VehicleLocationLastAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._VehicleLocationLastAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._VehicleLocationLastAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._VehicleLocationLastAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._VehicleLocationLastAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._VehicleLocationLastAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._VehicleLocationLastAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._VehicleLocationLastAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._VehicleLocationLastAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._VehicleLocationLastAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleLocationLastAvgFieldsImplementors = []string{"VehicleLocationLastAvgFields"}

func (ec *executionContext) _VehicleLocationLastAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationLastAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleLocationLastAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleLocationLastAvgFields")
		case "id":
			out.Values[i] = ec._VehicleLocationLastAvgFields_id(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleLocationLastAvgFields_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleLocationLastAvgFields_gps_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleLocationLastAvgFields_speed_limit_threshold(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleLocationLastMaxFieldsImplementors = []string{"VehicleLocationLastMaxFields"}

func (ec *executionContext) _VehicleLocationLastMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationLastMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleLocationLastMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleLocationLastMaxFields")
		case "id":
			out.Values[i] = ec._VehicleLocationLastMaxFields_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VehicleLocationLastMaxFields_vehicle_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._VehicleLocationLastMaxFields_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._VehicleLocationLastMaxFields_enterprise_id(ctx, field, obj)
		case "supervision_photo_id":
			out.Values[i] = ec._VehicleLocationLastMaxFields_supervision_photo_id(ctx, field, obj)
		case "acceleration":
			out.Values[i] = ec._VehicleLocationLastMaxFields_acceleration(ctx, field, obj)
		case "alarm_content":
			out.Values[i] = ec._VehicleLocationLastMaxFields_alarm_content(ctx, field, obj)
		case "alititude":
			out.Values[i] = ec._VehicleLocationLastMaxFields_alititude(ctx, field, obj)
		case "direction":
			out.Values[i] = ec._VehicleLocationLastMaxFields_direction(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleLocationLastMaxFields_tachograph_speed(ctx, field, obj)
		case "is_locate":
			out.Values[i] = ec._VehicleLocationLastMaxFields_is_locate(ctx, field, obj)
		case "locate_time":
			out.Values[i] = ec._VehicleLocationLastMaxFields_locate_time(ctx, field, obj)
		case "coordinate":
			out.Values[i] = ec._VehicleLocationLastMaxFields_coordinate(ctx, field, obj)
		case "location_description":
			out.Values[i] = ec._VehicleLocationLastMaxFields_location_description(ctx, field, obj)
		case "mileage":
			out.Values[i] = ec._VehicleLocationLastMaxFields_mileage(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleLocationLastMaxFields_gps_speed(ctx, field, obj)
		case "star_count":
			out.Values[i] = ec._VehicleLocationLastMaxFields_star_count(ctx, field, obj)
		case "star_status":
			out.Values[i] = ec._VehicleLocationLastMaxFields_star_status(ctx, field, obj)
		case "road_name":
			out.Values[i] = ec._VehicleLocationLastMaxFields_road_name(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleLocationLastMaxFields_speed_limit_threshold(ctx, field, obj)
		case "correct_coordinate":
			out.Values[i] = ec._VehicleLocationLastMaxFields_correct_coordinate(ctx, field, obj)
		case "vehicle_status":
			out.Values[i] = ec._VehicleLocationLastMaxFields_vehicle_status(ctx, field, obj)
		case "imei":
			out.Values[i] = ec._VehicleLocationLastMaxFields_imei(ctx, field, obj)
		case "sim_number":
			out.Values[i] = ec._VehicleLocationLastMaxFields_sim_number(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._VehicleLocationLastMaxFields_district_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleLocationLastMinFieldsImplementors = []string{"VehicleLocationLastMinFields"}

func (ec *executionContext) _VehicleLocationLastMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationLastMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleLocationLastMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleLocationLastMinFields")
		case "id":
			out.Values[i] = ec._VehicleLocationLastMinFields_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VehicleLocationLastMinFields_vehicle_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._VehicleLocationLastMinFields_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._VehicleLocationLastMinFields_enterprise_id(ctx, field, obj)
		case "supervision_photo_id":
			out.Values[i] = ec._VehicleLocationLastMinFields_supervision_photo_id(ctx, field, obj)
		case "acceleration":
			out.Values[i] = ec._VehicleLocationLastMinFields_acceleration(ctx, field, obj)
		case "alarm_content":
			out.Values[i] = ec._VehicleLocationLastMinFields_alarm_content(ctx, field, obj)
		case "alititude":
			out.Values[i] = ec._VehicleLocationLastMinFields_alititude(ctx, field, obj)
		case "direction":
			out.Values[i] = ec._VehicleLocationLastMinFields_direction(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleLocationLastMinFields_tachograph_speed(ctx, field, obj)
		case "is_locate":
			out.Values[i] = ec._VehicleLocationLastMinFields_is_locate(ctx, field, obj)
		case "locate_time":
			out.Values[i] = ec._VehicleLocationLastMinFields_locate_time(ctx, field, obj)
		case "coordinate":
			out.Values[i] = ec._VehicleLocationLastMinFields_coordinate(ctx, field, obj)
		case "location_description":
			out.Values[i] = ec._VehicleLocationLastMinFields_location_description(ctx, field, obj)
		case "mileage":
			out.Values[i] = ec._VehicleLocationLastMinFields_mileage(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleLocationLastMinFields_gps_speed(ctx, field, obj)
		case "star_count":
			out.Values[i] = ec._VehicleLocationLastMinFields_star_count(ctx, field, obj)
		case "star_status":
			out.Values[i] = ec._VehicleLocationLastMinFields_star_status(ctx, field, obj)
		case "road_name":
			out.Values[i] = ec._VehicleLocationLastMinFields_road_name(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleLocationLastMinFields_speed_limit_threshold(ctx, field, obj)
		case "correct_coordinate":
			out.Values[i] = ec._VehicleLocationLastMinFields_correct_coordinate(ctx, field, obj)
		case "vehicle_status":
			out.Values[i] = ec._VehicleLocationLastMinFields_vehicle_status(ctx, field, obj)
		case "imei":
			out.Values[i] = ec._VehicleLocationLastMinFields_imei(ctx, field, obj)
		case "sim_number":
			out.Values[i] = ec._VehicleLocationLastMinFields_sim_number(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._VehicleLocationLastMinFields_district_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleLocationLastMutationResponseImplementors = []string{"VehicleLocationLastMutationResponse"}

func (ec *executionContext) _VehicleLocationLastMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationLastMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleLocationLastMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleLocationLastMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._VehicleLocationLastMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._VehicleLocationLastMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleLocationLastStddevFieldsImplementors = []string{"VehicleLocationLastStddevFields"}

func (ec *executionContext) _VehicleLocationLastStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationLastStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleLocationLastStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleLocationLastStddevFields")
		case "id":
			out.Values[i] = ec._VehicleLocationLastStddevFields_id(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleLocationLastStddevFields_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleLocationLastStddevFields_gps_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleLocationLastStddevFields_speed_limit_threshold(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleLocationLastStddevPopFieldsImplementors = []string{"VehicleLocationLastStddevPopFields"}

func (ec *executionContext) _VehicleLocationLastStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationLastStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleLocationLastStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleLocationLastStddevPopFields")
		case "id":
			out.Values[i] = ec._VehicleLocationLastStddevPopFields_id(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleLocationLastStddevPopFields_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleLocationLastStddevPopFields_gps_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleLocationLastStddevPopFields_speed_limit_threshold(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleLocationLastStddevSampFieldsImplementors = []string{"VehicleLocationLastStddevSampFields"}

func (ec *executionContext) _VehicleLocationLastStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationLastStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleLocationLastStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleLocationLastStddevSampFields")
		case "id":
			out.Values[i] = ec._VehicleLocationLastStddevSampFields_id(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleLocationLastStddevSampFields_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleLocationLastStddevSampFields_gps_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleLocationLastStddevSampFields_speed_limit_threshold(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleLocationLastSumFieldsImplementors = []string{"VehicleLocationLastSumFields"}

func (ec *executionContext) _VehicleLocationLastSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationLastSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleLocationLastSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleLocationLastSumFields")
		case "id":
			out.Values[i] = ec._VehicleLocationLastSumFields_id(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleLocationLastSumFields_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleLocationLastSumFields_gps_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleLocationLastSumFields_speed_limit_threshold(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleLocationLastVarPopFieldsImplementors = []string{"VehicleLocationLastVarPopFields"}

func (ec *executionContext) _VehicleLocationLastVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationLastVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleLocationLastVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleLocationLastVarPopFields")
		case "id":
			out.Values[i] = ec._VehicleLocationLastVarPopFields_id(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleLocationLastVarPopFields_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleLocationLastVarPopFields_gps_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleLocationLastVarPopFields_speed_limit_threshold(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleLocationLastVarSampFieldsImplementors = []string{"VehicleLocationLastVarSampFields"}

func (ec *executionContext) _VehicleLocationLastVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationLastVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleLocationLastVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleLocationLastVarSampFields")
		case "id":
			out.Values[i] = ec._VehicleLocationLastVarSampFields_id(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleLocationLastVarSampFields_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleLocationLastVarSampFields_gps_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleLocationLastVarSampFields_speed_limit_threshold(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleLocationLastVarianceFieldsImplementors = []string{"VehicleLocationLastVarianceFields"}

func (ec *executionContext) _VehicleLocationLastVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationLastVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleLocationLastVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleLocationLastVarianceFields")
		case "id":
			out.Values[i] = ec._VehicleLocationLastVarianceFields_id(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._VehicleLocationLastVarianceFields_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._VehicleLocationLastVarianceFields_gps_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._VehicleLocationLastVarianceFields_speed_limit_threshold(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNJsonb2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJsonb2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNNumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNPoint2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPoint2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNVehicleLocationHis2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋmodelᚐVehicleLocationHis(ctx context.Context, sel ast.SelectionSet, v model1.VehicleLocationHis) graphql.Marshaler {
	return ec._VehicleLocationHis(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleLocationHis2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋmodelᚐVehicleLocationHisᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.VehicleLocationHis) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleLocationHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋmodelᚐVehicleLocationHis(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNVehicleLocationHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋmodelᚐVehicleLocationHis(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleLocationHis) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleLocationHis(ctx, sel, v)
}

func (ec *executionContext) marshalNVehicleLocationHisAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisAggregate(ctx context.Context, sel ast.SelectionSet, v model.VehicleLocationHisAggregate) graphql.Marshaler {
	return ec._VehicleLocationHisAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleLocationHisAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationHisAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleLocationHisAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVehicleLocationHisBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisBoolExp(ctx context.Context, v interface{}) (model.VehicleLocationHisBoolExp, error) {
	res, err := ec.unmarshalInputVehicleLocationHisBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleLocationHisInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisInsertInput(ctx context.Context, v interface{}) (model.VehicleLocationHisInsertInput, error) {
	res, err := ec.unmarshalInputVehicleLocationHisInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleLocationHisInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VehicleLocationHisInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleLocationHisInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleLocationHisInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNVehicleLocationHisInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisInsertInput(ctx context.Context, v interface{}) (*model.VehicleLocationHisInsertInput, error) {
	res, err := ec.unmarshalInputVehicleLocationHisInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleLocationHisOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisOrderBy(ctx context.Context, v interface{}) (*model.VehicleLocationHisOrderBy, error) {
	res, err := ec.unmarshalInputVehicleLocationHisOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleLocationHisSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisSelectColumn(ctx context.Context, v interface{}) (model.VehicleLocationHisSelectColumn, error) {
	var res model.VehicleLocationHisSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVehicleLocationHisSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleLocationHisSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNVehicleLocationLast2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋmodelᚐVehicleLocationLast(ctx context.Context, sel ast.SelectionSet, v model1.VehicleLocationLast) graphql.Marshaler {
	return ec._VehicleLocationLast(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleLocationLast2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋmodelᚐVehicleLocationLastᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.VehicleLocationLast) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleLocationLast2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋmodelᚐVehicleLocationLast(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNVehicleLocationLast2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋmodelᚐVehicleLocationLast(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleLocationLast) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleLocationLast(ctx, sel, v)
}

func (ec *executionContext) marshalNVehicleLocationLastAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastAggregate(ctx context.Context, sel ast.SelectionSet, v model.VehicleLocationLastAggregate) graphql.Marshaler {
	return ec._VehicleLocationLastAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleLocationLastAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationLastAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleLocationLastAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVehicleLocationLastBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastBoolExp(ctx context.Context, v interface{}) (model.VehicleLocationLastBoolExp, error) {
	res, err := ec.unmarshalInputVehicleLocationLastBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleLocationLastInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastInsertInput(ctx context.Context, v interface{}) (model.VehicleLocationLastInsertInput, error) {
	res, err := ec.unmarshalInputVehicleLocationLastInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleLocationLastInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VehicleLocationLastInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleLocationLastInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleLocationLastInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNVehicleLocationLastInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastInsertInput(ctx context.Context, v interface{}) (*model.VehicleLocationLastInsertInput, error) {
	res, err := ec.unmarshalInputVehicleLocationLastInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleLocationLastOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastOrderBy(ctx context.Context, v interface{}) (*model.VehicleLocationLastOrderBy, error) {
	res, err := ec.unmarshalInputVehicleLocationLastOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleLocationLastSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastSelectColumn(ctx context.Context, v interface{}) (model.VehicleLocationLastSelectColumn, error) {
	var res model.VehicleLocationLastSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVehicleLocationLastSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleLocationLastSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model2.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBigintComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model2.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBooleanComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFloat2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNFloat2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOJsonb2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNJsonb2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOJsonb2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNJsonb2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOJsonb2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJsonb2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalONumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalONumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNNumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalONumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx context.Context, v interface{}) (*model2.NumericComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNumericComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model2.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model2.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model2.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPoint2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPoint2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPoint2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNPoint2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOPoint2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPoint2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOPointComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx context.Context, v interface{}) (*model2.PointComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPointComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model2.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNTimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model2.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTimestamptzComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleLocationHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋmodelᚐVehicleLocationHis(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleLocationHis) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleLocationHis(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleLocationHisAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationHisAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleLocationHisAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleLocationHisAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationHisAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleLocationHisAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleLocationHisBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisBoolExp(ctx context.Context, v interface{}) ([]*model.VehicleLocationHisBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleLocationHisBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOVehicleLocationHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleLocationHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisBoolExp(ctx context.Context, v interface{}) (*model.VehicleLocationHisBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleLocationHisBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVehicleLocationHisIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisIncInput(ctx context.Context, v interface{}) (*model.VehicleLocationHisIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleLocationHisIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleLocationHisMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationHisMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleLocationHisMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleLocationHisMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationHisMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleLocationHisMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleLocationHisMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationHisMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleLocationHisMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleLocationHisOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VehicleLocationHisOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleLocationHisOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleLocationHisOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleLocationHisSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleLocationHisSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleLocationHisSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleLocationHisSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOVehicleLocationHisSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleLocationHisSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleLocationHisSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOVehicleLocationHisSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisSetInput(ctx context.Context, v interface{}) (*model.VehicleLocationHisSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleLocationHisSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleLocationHisStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationHisStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleLocationHisStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleLocationHisStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationHisStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleLocationHisStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleLocationHisStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationHisStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleLocationHisStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleLocationHisSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationHisSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleLocationHisSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleLocationHisVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationHisVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleLocationHisVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleLocationHisVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationHisVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleLocationHisVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleLocationHisVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationHisVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationHisVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleLocationHisVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleLocationLast2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋmodelᚐVehicleLocationLast(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleLocationLast) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleLocationLast(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleLocationLastAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationLastAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleLocationLastAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleLocationLastAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationLastAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleLocationLastAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleLocationLastBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastBoolExp(ctx context.Context, v interface{}) ([]*model.VehicleLocationLastBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleLocationLastBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOVehicleLocationLastBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleLocationLastBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastBoolExp(ctx context.Context, v interface{}) (*model.VehicleLocationLastBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleLocationLastBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVehicleLocationLastIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastIncInput(ctx context.Context, v interface{}) (*model.VehicleLocationLastIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleLocationLastIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleLocationLastMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationLastMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleLocationLastMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleLocationLastMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationLastMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleLocationLastMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleLocationLastMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationLastMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleLocationLastMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleLocationLastOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VehicleLocationLastOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleLocationLastOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleLocationLastOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleLocationLastSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleLocationLastSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleLocationLastSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleLocationLastSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOVehicleLocationLastSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleLocationLastSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleLocationLastSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOVehicleLocationLastSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastSetInput(ctx context.Context, v interface{}) (*model.VehicleLocationLastSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleLocationLastSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleLocationLastStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationLastStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleLocationLastStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleLocationLastStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationLastStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleLocationLastStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleLocationLastStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationLastStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleLocationLastStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleLocationLastSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationLastSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleLocationLastSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleLocationLastVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationLastVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleLocationLastVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleLocationLastVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationLastVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleLocationLastVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleLocationLastVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋgraphᚋmodelᚐVehicleLocationLastVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationLastVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleLocationLastVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
