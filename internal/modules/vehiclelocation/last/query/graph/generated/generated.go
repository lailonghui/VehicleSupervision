// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	model1 "VehicleSupervision/internal/modules/vehiclelocation/last/model"
	"VehicleSupervision/internal/modules/vehiclelocation/last/query/graph/model"
	model2 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Query struct {
		VehicleLocationLast          func(childComplexity int, distinctOn []model.VehicleLocationLastSelectColumn, limit *int, offset *int, orderBy []*model.VehicleLocationLastOrderBy, where *model.VehicleLocationLastBoolExp) int
		VehicleLocationLastAggregate func(childComplexity int, distinctOn []model.VehicleLocationLastSelectColumn, limit *int, offset *int, orderBy []*model.VehicleLocationLastOrderBy, where *model.VehicleLocationLastBoolExp) int
		VehicleLocationLastByPk      func(childComplexity int, id int64) int
	}

	MutationRoot struct {
		DeleteVehicleLocationLast     func(childComplexity int, where model.VehicleLocationLastBoolExp) int
		DeleteVehicleLocationLastByPk func(childComplexity int, id int64) int
		InsertVehicleLocationLast     func(childComplexity int, objects []*model.VehicleLocationLastInsertInput, onConflict *model.VehicleLocationLastOnConflict) int
		InsertVehicleLocationLastOne  func(childComplexity int, object model.VehicleLocationLastInsertInput, onConflict *model.VehicleLocationLastOnConflict) int
		UpdateVehicleLocationLast     func(childComplexity int, inc *model.VehicleLocationLastIncInput, set *model.VehicleLocationLastSetInput, where model.VehicleLocationLastBoolExp) int
		UpdateVehicleLocationLastByPk func(childComplexity int, inc *model.VehicleLocationLastIncInput, set *model.VehicleLocationLastSetInput, pkColumns model.VehicleLocationLastPkColumnsInput) int
	}

	SubscriptionRoot struct {
		VehicleLocationLast          func(childComplexity int, distinctOn []model.VehicleLocationLastSelectColumn, limit *int, offset *int, orderBy []*model.VehicleLocationLastOrderBy, where *model.VehicleLocationLastBoolExp) int
		VehicleLocationLastAggregate func(childComplexity int, distinctOn []model.VehicleLocationLastSelectColumn, limit *int, offset *int, orderBy []*model.VehicleLocationLastOrderBy, where *model.VehicleLocationLastBoolExp) int
		VehicleLocationLastByPk      func(childComplexity int, id int64) int
	}

	VehicleLocationLast struct {
		Acceleration        func(childComplexity int) int
		AlarmContent        func(childComplexity int) int
		Alititude           func(childComplexity int) int
		Coordinate          func(childComplexity int) int
		CorrectCoordinate   func(childComplexity int) int
		Direction           func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		DriverID            func(childComplexity int) int
		EnterpriseID        func(childComplexity int) int
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		Imei                func(childComplexity int) int
		IsLocate            func(childComplexity int) int
		LocateTime          func(childComplexity int) int
		LocationDescription func(childComplexity int) int
		Mileage             func(childComplexity int) int
		RoadName            func(childComplexity int) int
		SimNumber           func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		StarCount           func(childComplexity int) int
		StarStatus          func(childComplexity int) int
		SupervisionPhotoID  func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
		VehicleID           func(childComplexity int) int
		VehicleStatus       func(childComplexity int) int
	}

	VehicleLocationLastAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	VehicleLocationLastAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.VehicleLocationLastSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VehicleLocationLastAvgFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationLastMaxFields struct {
		Acceleration        func(childComplexity int) int
		AlarmContent        func(childComplexity int) int
		Alititude           func(childComplexity int) int
		Direction           func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		DriverID            func(childComplexity int) int
		EnterpriseID        func(childComplexity int) int
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		Imei                func(childComplexity int) int
		LocateTime          func(childComplexity int) int
		LocationDescription func(childComplexity int) int
		Mileage             func(childComplexity int) int
		RoadName            func(childComplexity int) int
		SimNumber           func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		StarCount           func(childComplexity int) int
		StarStatus          func(childComplexity int) int
		SupervisionPhotoID  func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
		VehicleID           func(childComplexity int) int
		VehicleStatus       func(childComplexity int) int
	}

	VehicleLocationLastMinFields struct {
		Acceleration        func(childComplexity int) int
		AlarmContent        func(childComplexity int) int
		Alititude           func(childComplexity int) int
		Direction           func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		DriverID            func(childComplexity int) int
		EnterpriseID        func(childComplexity int) int
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		Imei                func(childComplexity int) int
		LocateTime          func(childComplexity int) int
		LocationDescription func(childComplexity int) int
		Mileage             func(childComplexity int) int
		RoadName            func(childComplexity int) int
		SimNumber           func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		StarCount           func(childComplexity int) int
		StarStatus          func(childComplexity int) int
		SupervisionPhotoID  func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
		VehicleID           func(childComplexity int) int
		VehicleStatus       func(childComplexity int) int
	}

	VehicleLocationLastMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VehicleLocationLastStddevFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationLastStddevPopFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationLastStddevSampFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationLastSumFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationLastVarPopFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationLastVarSampFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationLastVarianceFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}
}

type QueryResolver interface {
	VehicleLocationLast(ctx context.Context, distinctOn []model.VehicleLocationLastSelectColumn, limit *int, offset *int, orderBy []*model.VehicleLocationLastOrderBy, where *model.VehicleLocationLastBoolExp) ([]*model1.VehicleLocationLast, error)
	VehicleLocationLastAggregate(ctx context.Context, distinctOn []model.VehicleLocationLastSelectColumn, limit *int, offset *int, orderBy []*model.VehicleLocationLastOrderBy, where *model.VehicleLocationLastBoolExp) (*model.VehicleLocationLastAggregate, error)
	VehicleLocationLastByPk(ctx context.Context, id int64) (*model1.VehicleLocationLast, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Query.vehicle_location_last":
		if e.complexity.Query.VehicleLocationLast == nil {
			break
		}

		args, err := ec.field_Query_vehicle_location_last_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleLocationLast(childComplexity, args["distinct_on"].([]model.VehicleLocationLastSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleLocationLastOrderBy), args["where"].(*model.VehicleLocationLastBoolExp)), true

	case "Query.vehicle_location_last_aggregate":
		if e.complexity.Query.VehicleLocationLastAggregate == nil {
			break
		}

		args, err := ec.field_Query_vehicle_location_last_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleLocationLastAggregate(childComplexity, args["distinct_on"].([]model.VehicleLocationLastSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleLocationLastOrderBy), args["where"].(*model.VehicleLocationLastBoolExp)), true

	case "Query.vehicle_location_last_by_pk":
		if e.complexity.Query.VehicleLocationLastByPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_location_last_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleLocationLastByPk(childComplexity, args["id"].(int64)), true

	case "mutation_root.delete_vehicle_location_last":
		if e.complexity.MutationRoot.DeleteVehicleLocationLast == nil {
			break
		}

		args, err := ec.field_mutation_root_delete_vehicle_location_last_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.DeleteVehicleLocationLast(childComplexity, args["where"].(model.VehicleLocationLastBoolExp)), true

	case "mutation_root.delete_vehicle_location_last_by_pk":
		if e.complexity.MutationRoot.DeleteVehicleLocationLastByPk == nil {
			break
		}

		args, err := ec.field_mutation_root_delete_vehicle_location_last_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.DeleteVehicleLocationLastByPk(childComplexity, args["id"].(int64)), true

	case "mutation_root.insert_vehicle_location_last":
		if e.complexity.MutationRoot.InsertVehicleLocationLast == nil {
			break
		}

		args, err := ec.field_mutation_root_insert_vehicle_location_last_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.InsertVehicleLocationLast(childComplexity, args["objects"].([]*model.VehicleLocationLastInsertInput), args["on_conflict"].(*model.VehicleLocationLastOnConflict)), true

	case "mutation_root.insert_vehicle_location_last_one":
		if e.complexity.MutationRoot.InsertVehicleLocationLastOne == nil {
			break
		}

		args, err := ec.field_mutation_root_insert_vehicle_location_last_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.InsertVehicleLocationLastOne(childComplexity, args["object"].(model.VehicleLocationLastInsertInput), args["on_conflict"].(*model.VehicleLocationLastOnConflict)), true

	case "mutation_root.update_vehicle_location_last":
		if e.complexity.MutationRoot.UpdateVehicleLocationLast == nil {
			break
		}

		args, err := ec.field_mutation_root_update_vehicle_location_last_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.UpdateVehicleLocationLast(childComplexity, args["_inc"].(*model.VehicleLocationLastIncInput), args["_set"].(*model.VehicleLocationLastSetInput), args["where"].(model.VehicleLocationLastBoolExp)), true

	case "mutation_root.update_vehicle_location_last_by_pk":
		if e.complexity.MutationRoot.UpdateVehicleLocationLastByPk == nil {
			break
		}

		args, err := ec.field_mutation_root_update_vehicle_location_last_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.UpdateVehicleLocationLastByPk(childComplexity, args["_inc"].(*model.VehicleLocationLastIncInput), args["_set"].(*model.VehicleLocationLastSetInput), args["pk_columns"].(model.VehicleLocationLastPkColumnsInput)), true

	case "subscription_root.vehicle_location_last":
		if e.complexity.SubscriptionRoot.VehicleLocationLast == nil {
			break
		}

		args, err := ec.field_subscription_root_vehicle_location_last_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SubscriptionRoot.VehicleLocationLast(childComplexity, args["distinct_on"].([]model.VehicleLocationLastSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleLocationLastOrderBy), args["where"].(*model.VehicleLocationLastBoolExp)), true

	case "subscription_root.vehicle_location_last_aggregate":
		if e.complexity.SubscriptionRoot.VehicleLocationLastAggregate == nil {
			break
		}

		args, err := ec.field_subscription_root_vehicle_location_last_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SubscriptionRoot.VehicleLocationLastAggregate(childComplexity, args["distinct_on"].([]model.VehicleLocationLastSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleLocationLastOrderBy), args["where"].(*model.VehicleLocationLastBoolExp)), true

	case "subscription_root.vehicle_location_last_by_pk":
		if e.complexity.SubscriptionRoot.VehicleLocationLastByPk == nil {
			break
		}

		args, err := ec.field_subscription_root_vehicle_location_last_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SubscriptionRoot.VehicleLocationLastByPk(childComplexity, args["id"].(int64)), true

	case "vehicle_location_last.acceleration":
		if e.complexity.VehicleLocationLast.Acceleration == nil {
			break
		}

		return e.complexity.VehicleLocationLast.Acceleration(childComplexity), true

	case "vehicle_location_last.alarm_content":
		if e.complexity.VehicleLocationLast.AlarmContent == nil {
			break
		}

		return e.complexity.VehicleLocationLast.AlarmContent(childComplexity), true

	case "vehicle_location_last.alititude":
		if e.complexity.VehicleLocationLast.Alititude == nil {
			break
		}

		return e.complexity.VehicleLocationLast.Alititude(childComplexity), true

	case "vehicle_location_last.coordinate":
		if e.complexity.VehicleLocationLast.Coordinate == nil {
			break
		}

		return e.complexity.VehicleLocationLast.Coordinate(childComplexity), true

	case "vehicle_location_last.correct_coordinate":
		if e.complexity.VehicleLocationLast.CorrectCoordinate == nil {
			break
		}

		return e.complexity.VehicleLocationLast.CorrectCoordinate(childComplexity), true

	case "vehicle_location_last.direction":
		if e.complexity.VehicleLocationLast.Direction == nil {
			break
		}

		return e.complexity.VehicleLocationLast.Direction(childComplexity), true

	case "vehicle_location_last.district_id":
		if e.complexity.VehicleLocationLast.DistrictID == nil {
			break
		}

		return e.complexity.VehicleLocationLast.DistrictID(childComplexity), true

	case "vehicle_location_last.driver_id":
		if e.complexity.VehicleLocationLast.DriverID == nil {
			break
		}

		return e.complexity.VehicleLocationLast.DriverID(childComplexity), true

	case "vehicle_location_last.enterprise_id":
		if e.complexity.VehicleLocationLast.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleLocationLast.EnterpriseID(childComplexity), true

	case "vehicle_location_last.gps_speed":
		if e.complexity.VehicleLocationLast.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLast.GpsSpeed(childComplexity), true

	case "vehicle_location_last.id":
		if e.complexity.VehicleLocationLast.ID == nil {
			break
		}

		return e.complexity.VehicleLocationLast.ID(childComplexity), true

	case "vehicle_location_last.imei":
		if e.complexity.VehicleLocationLast.Imei == nil {
			break
		}

		return e.complexity.VehicleLocationLast.Imei(childComplexity), true

	case "vehicle_location_last.is_locate":
		if e.complexity.VehicleLocationLast.IsLocate == nil {
			break
		}

		return e.complexity.VehicleLocationLast.IsLocate(childComplexity), true

	case "vehicle_location_last.locate_time":
		if e.complexity.VehicleLocationLast.LocateTime == nil {
			break
		}

		return e.complexity.VehicleLocationLast.LocateTime(childComplexity), true

	case "vehicle_location_last.location_description":
		if e.complexity.VehicleLocationLast.LocationDescription == nil {
			break
		}

		return e.complexity.VehicleLocationLast.LocationDescription(childComplexity), true

	case "vehicle_location_last.mileage":
		if e.complexity.VehicleLocationLast.Mileage == nil {
			break
		}

		return e.complexity.VehicleLocationLast.Mileage(childComplexity), true

	case "vehicle_location_last.road_name":
		if e.complexity.VehicleLocationLast.RoadName == nil {
			break
		}

		return e.complexity.VehicleLocationLast.RoadName(childComplexity), true

	case "vehicle_location_last.sim_number":
		if e.complexity.VehicleLocationLast.SimNumber == nil {
			break
		}

		return e.complexity.VehicleLocationLast.SimNumber(childComplexity), true

	case "vehicle_location_last.speed_limit_threshold":
		if e.complexity.VehicleLocationLast.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationLast.SpeedLimitThreshold(childComplexity), true

	case "vehicle_location_last.star_count":
		if e.complexity.VehicleLocationLast.StarCount == nil {
			break
		}

		return e.complexity.VehicleLocationLast.StarCount(childComplexity), true

	case "vehicle_location_last.star_status":
		if e.complexity.VehicleLocationLast.StarStatus == nil {
			break
		}

		return e.complexity.VehicleLocationLast.StarStatus(childComplexity), true

	case "vehicle_location_last.supervision_photo_id":
		if e.complexity.VehicleLocationLast.SupervisionPhotoID == nil {
			break
		}

		return e.complexity.VehicleLocationLast.SupervisionPhotoID(childComplexity), true

	case "vehicle_location_last.tachograph_speed":
		if e.complexity.VehicleLocationLast.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLast.TachographSpeed(childComplexity), true

	case "vehicle_location_last.vehicle_id":
		if e.complexity.VehicleLocationLast.VehicleID == nil {
			break
		}

		return e.complexity.VehicleLocationLast.VehicleID(childComplexity), true

	case "vehicle_location_last.vehicle_status":
		if e.complexity.VehicleLocationLast.VehicleStatus == nil {
			break
		}

		return e.complexity.VehicleLocationLast.VehicleStatus(childComplexity), true

	case "vehicle_location_last_aggregate.aggregate":
		if e.complexity.VehicleLocationLastAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VehicleLocationLastAggregate.Aggregate(childComplexity), true

	case "vehicle_location_last_aggregate.nodes":
		if e.complexity.VehicleLocationLastAggregate.Nodes == nil {
			break
		}

		return e.complexity.VehicleLocationLastAggregate.Nodes(childComplexity), true

	case "vehicle_location_last_aggregate_fields.avg":
		if e.complexity.VehicleLocationLastAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VehicleLocationLastAggregateFields.Avg(childComplexity), true

	case "vehicle_location_last_aggregate_fields.count":
		if e.complexity.VehicleLocationLastAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_vehicle_location_last_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.VehicleLocationLastAggregateFields.Count(childComplexity, args["columns"].([]model.VehicleLocationLastSelectColumn), args["distinct"].(*bool)), true

	case "vehicle_location_last_aggregate_fields.max":
		if e.complexity.VehicleLocationLastAggregateFields.Max == nil {
			break
		}

		return e.complexity.VehicleLocationLastAggregateFields.Max(childComplexity), true

	case "vehicle_location_last_aggregate_fields.min":
		if e.complexity.VehicleLocationLastAggregateFields.Min == nil {
			break
		}

		return e.complexity.VehicleLocationLastAggregateFields.Min(childComplexity), true

	case "vehicle_location_last_aggregate_fields.stddev":
		if e.complexity.VehicleLocationLastAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VehicleLocationLastAggregateFields.Stddev(childComplexity), true

	case "vehicle_location_last_aggregate_fields.stddev_pop":
		if e.complexity.VehicleLocationLastAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VehicleLocationLastAggregateFields.StddevPop(childComplexity), true

	case "vehicle_location_last_aggregate_fields.stddev_samp":
		if e.complexity.VehicleLocationLastAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VehicleLocationLastAggregateFields.StddevSamp(childComplexity), true

	case "vehicle_location_last_aggregate_fields.sum":
		if e.complexity.VehicleLocationLastAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VehicleLocationLastAggregateFields.Sum(childComplexity), true

	case "vehicle_location_last_aggregate_fields.var_pop":
		if e.complexity.VehicleLocationLastAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VehicleLocationLastAggregateFields.VarPop(childComplexity), true

	case "vehicle_location_last_aggregate_fields.var_samp":
		if e.complexity.VehicleLocationLastAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VehicleLocationLastAggregateFields.VarSamp(childComplexity), true

	case "vehicle_location_last_aggregate_fields.variance":
		if e.complexity.VehicleLocationLastAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VehicleLocationLastAggregateFields.Variance(childComplexity), true

	case "vehicle_location_last_avg_fields.gps_speed":
		if e.complexity.VehicleLocationLastAvgFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastAvgFields.GpsSpeed(childComplexity), true

	case "vehicle_location_last_avg_fields.id":
		if e.complexity.VehicleLocationLastAvgFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationLastAvgFields.ID(childComplexity), true

	case "vehicle_location_last_avg_fields.speed_limit_threshold":
		if e.complexity.VehicleLocationLastAvgFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationLastAvgFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_location_last_avg_fields.tachograph_speed":
		if e.complexity.VehicleLocationLastAvgFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastAvgFields.TachographSpeed(childComplexity), true

	case "vehicle_location_last_max_fields.acceleration":
		if e.complexity.VehicleLocationLastMaxFields.Acceleration == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.Acceleration(childComplexity), true

	case "vehicle_location_last_max_fields.alarm_content":
		if e.complexity.VehicleLocationLastMaxFields.AlarmContent == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.AlarmContent(childComplexity), true

	case "vehicle_location_last_max_fields.alititude":
		if e.complexity.VehicleLocationLastMaxFields.Alititude == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.Alititude(childComplexity), true

	case "vehicle_location_last_max_fields.direction":
		if e.complexity.VehicleLocationLastMaxFields.Direction == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.Direction(childComplexity), true

	case "vehicle_location_last_max_fields.district_id":
		if e.complexity.VehicleLocationLastMaxFields.DistrictID == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.DistrictID(childComplexity), true

	case "vehicle_location_last_max_fields.driver_id":
		if e.complexity.VehicleLocationLastMaxFields.DriverID == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.DriverID(childComplexity), true

	case "vehicle_location_last_max_fields.enterprise_id":
		if e.complexity.VehicleLocationLastMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.EnterpriseID(childComplexity), true

	case "vehicle_location_last_max_fields.gps_speed":
		if e.complexity.VehicleLocationLastMaxFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.GpsSpeed(childComplexity), true

	case "vehicle_location_last_max_fields.id":
		if e.complexity.VehicleLocationLastMaxFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.ID(childComplexity), true

	case "vehicle_location_last_max_fields.imei":
		if e.complexity.VehicleLocationLastMaxFields.Imei == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.Imei(childComplexity), true

	case "vehicle_location_last_max_fields.locate_time":
		if e.complexity.VehicleLocationLastMaxFields.LocateTime == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.LocateTime(childComplexity), true

	case "vehicle_location_last_max_fields.location_description":
		if e.complexity.VehicleLocationLastMaxFields.LocationDescription == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.LocationDescription(childComplexity), true

	case "vehicle_location_last_max_fields.mileage":
		if e.complexity.VehicleLocationLastMaxFields.Mileage == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.Mileage(childComplexity), true

	case "vehicle_location_last_max_fields.road_name":
		if e.complexity.VehicleLocationLastMaxFields.RoadName == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.RoadName(childComplexity), true

	case "vehicle_location_last_max_fields.sim_number":
		if e.complexity.VehicleLocationLastMaxFields.SimNumber == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.SimNumber(childComplexity), true

	case "vehicle_location_last_max_fields.speed_limit_threshold":
		if e.complexity.VehicleLocationLastMaxFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_location_last_max_fields.star_count":
		if e.complexity.VehicleLocationLastMaxFields.StarCount == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.StarCount(childComplexity), true

	case "vehicle_location_last_max_fields.star_status":
		if e.complexity.VehicleLocationLastMaxFields.StarStatus == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.StarStatus(childComplexity), true

	case "vehicle_location_last_max_fields.supervision_photo_id":
		if e.complexity.VehicleLocationLastMaxFields.SupervisionPhotoID == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.SupervisionPhotoID(childComplexity), true

	case "vehicle_location_last_max_fields.tachograph_speed":
		if e.complexity.VehicleLocationLastMaxFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.TachographSpeed(childComplexity), true

	case "vehicle_location_last_max_fields.vehicle_id":
		if e.complexity.VehicleLocationLastMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.VehicleID(childComplexity), true

	case "vehicle_location_last_max_fields.vehicle_status":
		if e.complexity.VehicleLocationLastMaxFields.VehicleStatus == nil {
			break
		}

		return e.complexity.VehicleLocationLastMaxFields.VehicleStatus(childComplexity), true

	case "vehicle_location_last_min_fields.acceleration":
		if e.complexity.VehicleLocationLastMinFields.Acceleration == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.Acceleration(childComplexity), true

	case "vehicle_location_last_min_fields.alarm_content":
		if e.complexity.VehicleLocationLastMinFields.AlarmContent == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.AlarmContent(childComplexity), true

	case "vehicle_location_last_min_fields.alititude":
		if e.complexity.VehicleLocationLastMinFields.Alititude == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.Alititude(childComplexity), true

	case "vehicle_location_last_min_fields.direction":
		if e.complexity.VehicleLocationLastMinFields.Direction == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.Direction(childComplexity), true

	case "vehicle_location_last_min_fields.district_id":
		if e.complexity.VehicleLocationLastMinFields.DistrictID == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.DistrictID(childComplexity), true

	case "vehicle_location_last_min_fields.driver_id":
		if e.complexity.VehicleLocationLastMinFields.DriverID == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.DriverID(childComplexity), true

	case "vehicle_location_last_min_fields.enterprise_id":
		if e.complexity.VehicleLocationLastMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.EnterpriseID(childComplexity), true

	case "vehicle_location_last_min_fields.gps_speed":
		if e.complexity.VehicleLocationLastMinFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.GpsSpeed(childComplexity), true

	case "vehicle_location_last_min_fields.id":
		if e.complexity.VehicleLocationLastMinFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.ID(childComplexity), true

	case "vehicle_location_last_min_fields.imei":
		if e.complexity.VehicleLocationLastMinFields.Imei == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.Imei(childComplexity), true

	case "vehicle_location_last_min_fields.locate_time":
		if e.complexity.VehicleLocationLastMinFields.LocateTime == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.LocateTime(childComplexity), true

	case "vehicle_location_last_min_fields.location_description":
		if e.complexity.VehicleLocationLastMinFields.LocationDescription == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.LocationDescription(childComplexity), true

	case "vehicle_location_last_min_fields.mileage":
		if e.complexity.VehicleLocationLastMinFields.Mileage == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.Mileage(childComplexity), true

	case "vehicle_location_last_min_fields.road_name":
		if e.complexity.VehicleLocationLastMinFields.RoadName == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.RoadName(childComplexity), true

	case "vehicle_location_last_min_fields.sim_number":
		if e.complexity.VehicleLocationLastMinFields.SimNumber == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.SimNumber(childComplexity), true

	case "vehicle_location_last_min_fields.speed_limit_threshold":
		if e.complexity.VehicleLocationLastMinFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_location_last_min_fields.star_count":
		if e.complexity.VehicleLocationLastMinFields.StarCount == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.StarCount(childComplexity), true

	case "vehicle_location_last_min_fields.star_status":
		if e.complexity.VehicleLocationLastMinFields.StarStatus == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.StarStatus(childComplexity), true

	case "vehicle_location_last_min_fields.supervision_photo_id":
		if e.complexity.VehicleLocationLastMinFields.SupervisionPhotoID == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.SupervisionPhotoID(childComplexity), true

	case "vehicle_location_last_min_fields.tachograph_speed":
		if e.complexity.VehicleLocationLastMinFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.TachographSpeed(childComplexity), true

	case "vehicle_location_last_min_fields.vehicle_id":
		if e.complexity.VehicleLocationLastMinFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.VehicleID(childComplexity), true

	case "vehicle_location_last_min_fields.vehicle_status":
		if e.complexity.VehicleLocationLastMinFields.VehicleStatus == nil {
			break
		}

		return e.complexity.VehicleLocationLastMinFields.VehicleStatus(childComplexity), true

	case "vehicle_location_last_mutation_response.affected_rows":
		if e.complexity.VehicleLocationLastMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VehicleLocationLastMutationResponse.AffectedRows(childComplexity), true

	case "vehicle_location_last_mutation_response.returning":
		if e.complexity.VehicleLocationLastMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VehicleLocationLastMutationResponse.Returning(childComplexity), true

	case "vehicle_location_last_stddev_fields.gps_speed":
		if e.complexity.VehicleLocationLastStddevFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastStddevFields.GpsSpeed(childComplexity), true

	case "vehicle_location_last_stddev_fields.id":
		if e.complexity.VehicleLocationLastStddevFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationLastStddevFields.ID(childComplexity), true

	case "vehicle_location_last_stddev_fields.speed_limit_threshold":
		if e.complexity.VehicleLocationLastStddevFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationLastStddevFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_location_last_stddev_fields.tachograph_speed":
		if e.complexity.VehicleLocationLastStddevFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastStddevFields.TachographSpeed(childComplexity), true

	case "vehicle_location_last_stddev_pop_fields.gps_speed":
		if e.complexity.VehicleLocationLastStddevPopFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastStddevPopFields.GpsSpeed(childComplexity), true

	case "vehicle_location_last_stddev_pop_fields.id":
		if e.complexity.VehicleLocationLastStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationLastStddevPopFields.ID(childComplexity), true

	case "vehicle_location_last_stddev_pop_fields.speed_limit_threshold":
		if e.complexity.VehicleLocationLastStddevPopFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationLastStddevPopFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_location_last_stddev_pop_fields.tachograph_speed":
		if e.complexity.VehicleLocationLastStddevPopFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastStddevPopFields.TachographSpeed(childComplexity), true

	case "vehicle_location_last_stddev_samp_fields.gps_speed":
		if e.complexity.VehicleLocationLastStddevSampFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastStddevSampFields.GpsSpeed(childComplexity), true

	case "vehicle_location_last_stddev_samp_fields.id":
		if e.complexity.VehicleLocationLastStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationLastStddevSampFields.ID(childComplexity), true

	case "vehicle_location_last_stddev_samp_fields.speed_limit_threshold":
		if e.complexity.VehicleLocationLastStddevSampFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationLastStddevSampFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_location_last_stddev_samp_fields.tachograph_speed":
		if e.complexity.VehicleLocationLastStddevSampFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastStddevSampFields.TachographSpeed(childComplexity), true

	case "vehicle_location_last_sum_fields.gps_speed":
		if e.complexity.VehicleLocationLastSumFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastSumFields.GpsSpeed(childComplexity), true

	case "vehicle_location_last_sum_fields.id":
		if e.complexity.VehicleLocationLastSumFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationLastSumFields.ID(childComplexity), true

	case "vehicle_location_last_sum_fields.speed_limit_threshold":
		if e.complexity.VehicleLocationLastSumFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationLastSumFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_location_last_sum_fields.tachograph_speed":
		if e.complexity.VehicleLocationLastSumFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastSumFields.TachographSpeed(childComplexity), true

	case "vehicle_location_last_var_pop_fields.gps_speed":
		if e.complexity.VehicleLocationLastVarPopFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastVarPopFields.GpsSpeed(childComplexity), true

	case "vehicle_location_last_var_pop_fields.id":
		if e.complexity.VehicleLocationLastVarPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationLastVarPopFields.ID(childComplexity), true

	case "vehicle_location_last_var_pop_fields.speed_limit_threshold":
		if e.complexity.VehicleLocationLastVarPopFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationLastVarPopFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_location_last_var_pop_fields.tachograph_speed":
		if e.complexity.VehicleLocationLastVarPopFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastVarPopFields.TachographSpeed(childComplexity), true

	case "vehicle_location_last_var_samp_fields.gps_speed":
		if e.complexity.VehicleLocationLastVarSampFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastVarSampFields.GpsSpeed(childComplexity), true

	case "vehicle_location_last_var_samp_fields.id":
		if e.complexity.VehicleLocationLastVarSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationLastVarSampFields.ID(childComplexity), true

	case "vehicle_location_last_var_samp_fields.speed_limit_threshold":
		if e.complexity.VehicleLocationLastVarSampFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationLastVarSampFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_location_last_var_samp_fields.tachograph_speed":
		if e.complexity.VehicleLocationLastVarSampFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastVarSampFields.TachographSpeed(childComplexity), true

	case "vehicle_location_last_variance_fields.gps_speed":
		if e.complexity.VehicleLocationLastVarianceFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastVarianceFields.GpsSpeed(childComplexity), true

	case "vehicle_location_last_variance_fields.id":
		if e.complexity.VehicleLocationLastVarianceFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationLastVarianceFields.ID(childComplexity), true

	case "vehicle_location_last_variance_fields.speed_limit_threshold":
		if e.complexity.VehicleLocationLastVarianceFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationLastVarianceFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_location_last_variance_fields.tachograph_speed":
		if e.complexity.VehicleLocationLastVarianceFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationLastVarianceFields.TachographSpeed(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/generate.graphqls", Input: `

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "vehicle_location_last"
  """
  delete_vehicle_location_last(
    """filter the rows which have to be deleted"""
    where: vehicle_location_last_bool_exp!
  ): vehicle_location_last_mutation_response

  """
  delete single row from the table: "vehicle_location_last"
  """
  delete_vehicle_location_last_by_pk(
    """ID"""
    id: bigint!
  ): vehicle_location_last

  """
  insert data into the table: "vehicle_location_last"
  """
  insert_vehicle_location_last(
    """the rows to be inserted"""
    objects: [vehicle_location_last_insert_input!]!

    """on conflict condition"""
    on_conflict: vehicle_location_last_on_conflict
  ): vehicle_location_last_mutation_response

  """
  insert a single row into the table: "vehicle_location_last"
  """
  insert_vehicle_location_last_one(
    """the row to be inserted"""
    object: vehicle_location_last_insert_input!

    """on conflict condition"""
    on_conflict: vehicle_location_last_on_conflict
  ): vehicle_location_last

  """
  update data of the table: "vehicle_location_last"
  """
  update_vehicle_location_last(
    """increments the integer columns with given value of the filtered values"""
    _inc: vehicle_location_last_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: vehicle_location_last_set_input

    """filter the rows which have to be updated"""
    where: vehicle_location_last_bool_exp!
  ): vehicle_location_last_mutation_response

  """
  update single row of the table: "vehicle_location_last"
  """
  update_vehicle_location_last_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: vehicle_location_last_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: vehicle_location_last_set_input
    pk_columns: vehicle_location_last_pk_columns_input!
  ): vehicle_location_last
}

scalar numeric

"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

scalar point

"""
expression to compare columns of type point. All fields are combined with logical 'AND'.
"""
input point_comparison_exp {
  _eq: point
  _gt: point
  _gte: point
  _in: [point!]
  _is_null: Boolean
  _lt: point
  _lte: point
  _neq: point
  _nin: [point!]
}

"""query root"""
type Query {
  """
  fetch data from the table: "vehicle_location_last"
  """
  vehicle_location_last(
    """distinct select on columns"""
    distinct_on: [vehicle_location_last_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vehicle_location_last_order_by!]

    """filter the rows returned"""
    where: vehicle_location_last_bool_exp
  ): [vehicle_location_last!]!

  """
  fetch aggregated fields from the table: "vehicle_location_last"
  """
  vehicle_location_last_aggregate(
    """distinct select on columns"""
    distinct_on: [vehicle_location_last_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vehicle_location_last_order_by!]

    """filter the rows returned"""
    where: vehicle_location_last_bool_exp
  ): vehicle_location_last_aggregate!

  """
  fetch data from the table: "vehicle_location_last" using primary key columns
  """
  vehicle_location_last_by_pk(
    """ID"""
    id: bigint!
  ): vehicle_location_last
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "vehicle_location_last"
  """
  vehicle_location_last(
    """distinct select on columns"""
    distinct_on: [vehicle_location_last_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vehicle_location_last_order_by!]

    """filter the rows returned"""
    where: vehicle_location_last_bool_exp
  ): [vehicle_location_last!]!

  """
  fetch aggregated fields from the table: "vehicle_location_last"
  """
  vehicle_location_last_aggregate(
    """distinct select on columns"""
    distinct_on: [vehicle_location_last_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vehicle_location_last_order_by!]

    """filter the rows returned"""
    where: vehicle_location_last_bool_exp
  ): vehicle_location_last_aggregate!

  """
  fetch data from the table: "vehicle_location_last" using primary key columns
  """
  vehicle_location_last_by_pk(
    """ID"""
    id: bigint!
  ): vehicle_location_last
}

scalar timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
车辆最新位置表


columns and relationships of "vehicle_location_last"

"""
type vehicle_location_last {
  """加速度"""
  acceleration: String

  """报警内容"""
  alarm_content: String

  """海拔"""
  alititude: String

  """坐标"""
  coordinate: point

  """纠偏后坐标"""
  correct_coordinate: point

  """方向"""
  direction: String

  """区域ID"""
  district_id: String

  """驾驶员ID"""
  driver_id: String

  """企业ID"""
  enterprise_id: String

  """GPS速度"""
  gps_speed: numeric

  """ID"""
  id: bigint!

  """终端IMEI"""
  imei: String

  """是否定位"""
  is_locate: Boolean

  """定位时间"""
  locate_time: timestamptz

  """位置描述"""
  location_description: String

  """里程"""
  mileage: String

  """道路名称"""
  road_name: String

  """SIM卡号"""
  sim_number: String

  """限速阀值"""
  speed_limit_threshold: numeric

  """星数"""
  star_count: String

  """星况"""
  star_status: String

  """监控图片ID"""
  supervision_photo_id: String

  """行驶记录仪速度"""
  tachograph_speed: numeric

  """车辆ID"""
  vehicle_id: String!

  """车辆状态"""
  vehicle_status: String
}

"""
aggregated selection of "vehicle_location_last"
"""
type vehicle_location_last_aggregate {
  aggregate: vehicle_location_last_aggregate_fields
  nodes: [vehicle_location_last!]!
}

"""
aggregate fields of "vehicle_location_last"
"""
type vehicle_location_last_aggregate_fields {
  avg: vehicle_location_last_avg_fields
  count(columns: [vehicle_location_last_select_column!], distinct: Boolean): Int
  max: vehicle_location_last_max_fields
  min: vehicle_location_last_min_fields
  stddev: vehicle_location_last_stddev_fields
  stddev_pop: vehicle_location_last_stddev_pop_fields
  stddev_samp: vehicle_location_last_stddev_samp_fields
  sum: vehicle_location_last_sum_fields
  var_pop: vehicle_location_last_var_pop_fields
  var_samp: vehicle_location_last_var_samp_fields
  variance: vehicle_location_last_variance_fields
}

"""
order by aggregate values of table "vehicle_location_last"
"""
input vehicle_location_last_aggregate_order_by {
  avg: vehicle_location_last_avg_order_by
  count: order_by
  max: vehicle_location_last_max_order_by
  min: vehicle_location_last_min_order_by
  stddev: vehicle_location_last_stddev_order_by
  stddev_pop: vehicle_location_last_stddev_pop_order_by
  stddev_samp: vehicle_location_last_stddev_samp_order_by
  sum: vehicle_location_last_sum_order_by
  var_pop: vehicle_location_last_var_pop_order_by
  var_samp: vehicle_location_last_var_samp_order_by
  variance: vehicle_location_last_variance_order_by
}

"""
input type for inserting array relation for remote table "vehicle_location_last"
"""
input vehicle_location_last_arr_rel_insert_input {
  data: [vehicle_location_last_insert_input!]!
  on_conflict: vehicle_location_last_on_conflict
}

"""aggregate avg on columns"""
type vehicle_location_last_avg_fields {
  gps_speed: Float
  id: Float
  speed_limit_threshold: Float
  tachograph_speed: Float
}

"""
order by avg() on columns of table "vehicle_location_last"
"""
input vehicle_location_last_avg_order_by {
  gps_speed: order_by
  id: order_by
  speed_limit_threshold: order_by
  tachograph_speed: order_by
}

"""
Boolean expression to filter rows from the table "vehicle_location_last". All fields are combined with a logical 'AND'.
"""
input vehicle_location_last_bool_exp {
  _and: [vehicle_location_last_bool_exp]
  _not: vehicle_location_last_bool_exp
  _or: [vehicle_location_last_bool_exp]
  acceleration: String_comparison_exp
  alarm_content: String_comparison_exp
  alititude: String_comparison_exp
  coordinate: point_comparison_exp
  correct_coordinate: point_comparison_exp
  direction: String_comparison_exp
  district_id: String_comparison_exp
  driver_id: String_comparison_exp
  enterprise_id: String_comparison_exp
  gps_speed: numeric_comparison_exp
  id: bigint_comparison_exp
  imei: String_comparison_exp
  is_locate: Boolean_comparison_exp
  locate_time: timestamptz_comparison_exp
  location_description: String_comparison_exp
  mileage: String_comparison_exp
  road_name: String_comparison_exp
  sim_number: String_comparison_exp
  speed_limit_threshold: numeric_comparison_exp
  star_count: String_comparison_exp
  star_status: String_comparison_exp
  supervision_photo_id: String_comparison_exp
  tachograph_speed: numeric_comparison_exp
  vehicle_id: String_comparison_exp
  vehicle_status: String_comparison_exp
}

"""
unique or primary key constraints on table "vehicle_location_last"
"""
enum vehicle_location_last_constraint {
  """unique or primary key constraint"""
  vehicle_location_last_pkey
}

"""
input type for incrementing integer column in table "vehicle_location_last"
"""
input vehicle_location_last_inc_input {
  gps_speed: numeric
  id: bigint
  speed_limit_threshold: numeric
  tachograph_speed: numeric
}

"""
input type for inserting data into table "vehicle_location_last"
"""
input vehicle_location_last_insert_input {
  acceleration: String
  alarm_content: String
  alititude: String
  coordinate: point
  correct_coordinate: point
  direction: String
  district_id: String
  driver_id: String
  enterprise_id: String
  gps_speed: numeric
  id: bigint
  imei: String
  is_locate: Boolean
  locate_time: timestamptz
  location_description: String
  mileage: String
  road_name: String
  sim_number: String
  speed_limit_threshold: numeric
  star_count: String
  star_status: String
  supervision_photo_id: String
  tachograph_speed: numeric
  vehicle_id: String
  vehicle_status: String
}

"""aggregate max on columns"""
type vehicle_location_last_max_fields {
  acceleration: String
  alarm_content: String
  alititude: String
  direction: String
  district_id: String
  driver_id: String
  enterprise_id: String
  gps_speed: numeric
  id: bigint
  imei: String
  locate_time: timestamptz
  location_description: String
  mileage: String
  road_name: String
  sim_number: String
  speed_limit_threshold: numeric
  star_count: String
  star_status: String
  supervision_photo_id: String
  tachograph_speed: numeric
  vehicle_id: String
  vehicle_status: String
}

"""
order by max() on columns of table "vehicle_location_last"
"""
input vehicle_location_last_max_order_by {
  acceleration: order_by
  alarm_content: order_by
  alititude: order_by
  direction: order_by
  district_id: order_by
  driver_id: order_by
  enterprise_id: order_by
  gps_speed: order_by
  id: order_by
  imei: order_by
  locate_time: order_by
  location_description: order_by
  mileage: order_by
  road_name: order_by
  sim_number: order_by
  speed_limit_threshold: order_by
  star_count: order_by
  star_status: order_by
  supervision_photo_id: order_by
  tachograph_speed: order_by
  vehicle_id: order_by
  vehicle_status: order_by
}

"""aggregate min on columns"""
type vehicle_location_last_min_fields {
  acceleration: String
  alarm_content: String
  alititude: String
  direction: String
  district_id: String
  driver_id: String
  enterprise_id: String
  gps_speed: numeric
  id: bigint
  imei: String
  locate_time: timestamptz
  location_description: String
  mileage: String
  road_name: String
  sim_number: String
  speed_limit_threshold: numeric
  star_count: String
  star_status: String
  supervision_photo_id: String
  tachograph_speed: numeric
  vehicle_id: String
  vehicle_status: String
}

"""
order by min() on columns of table "vehicle_location_last"
"""
input vehicle_location_last_min_order_by {
  acceleration: order_by
  alarm_content: order_by
  alititude: order_by
  direction: order_by
  district_id: order_by
  driver_id: order_by
  enterprise_id: order_by
  gps_speed: order_by
  id: order_by
  imei: order_by
  locate_time: order_by
  location_description: order_by
  mileage: order_by
  road_name: order_by
  sim_number: order_by
  speed_limit_threshold: order_by
  star_count: order_by
  star_status: order_by
  supervision_photo_id: order_by
  tachograph_speed: order_by
  vehicle_id: order_by
  vehicle_status: order_by
}

"""
response of any mutation on the table "vehicle_location_last"
"""
type vehicle_location_last_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [vehicle_location_last!]!
}

"""
input type for inserting object relation for remote table "vehicle_location_last"
"""
input vehicle_location_last_obj_rel_insert_input {
  data: vehicle_location_last_insert_input!
  on_conflict: vehicle_location_last_on_conflict
}

"""
on conflict condition type for table "vehicle_location_last"
"""
input vehicle_location_last_on_conflict {
  constraint: vehicle_location_last_constraint!
  update_columns: [vehicle_location_last_update_column!]!
  where: vehicle_location_last_bool_exp
}

"""
ordering options when selecting data from "vehicle_location_last"
"""
input vehicle_location_last_order_by {
  acceleration: order_by
  alarm_content: order_by
  alititude: order_by
  coordinate: order_by
  correct_coordinate: order_by
  direction: order_by
  district_id: order_by
  driver_id: order_by
  enterprise_id: order_by
  gps_speed: order_by
  id: order_by
  imei: order_by
  is_locate: order_by
  locate_time: order_by
  location_description: order_by
  mileage: order_by
  road_name: order_by
  sim_number: order_by
  speed_limit_threshold: order_by
  star_count: order_by
  star_status: order_by
  supervision_photo_id: order_by
  tachograph_speed: order_by
  vehicle_id: order_by
  vehicle_status: order_by
}

"""
primary key columns input for table: "vehicle_location_last"
"""
input vehicle_location_last_pk_columns_input {
  """ID"""
  id: bigint!
}

"""
select columns of table "vehicle_location_last"
"""
enum vehicle_location_last_select_column {
  """column name"""
  acceleration

  """column name"""
  alarm_content

  """column name"""
  alititude

  """column name"""
  coordinate

  """column name"""
  correct_coordinate

  """column name"""
  direction

  """column name"""
  district_id

  """column name"""
  driver_id

  """column name"""
  enterprise_id

  """column name"""
  gps_speed

  """column name"""
  id

  """column name"""
  imei

  """column name"""
  is_locate

  """column name"""
  locate_time

  """column name"""
  location_description

  """column name"""
  mileage

  """column name"""
  road_name

  """column name"""
  sim_number

  """column name"""
  speed_limit_threshold

  """column name"""
  star_count

  """column name"""
  star_status

  """column name"""
  supervision_photo_id

  """column name"""
  tachograph_speed

  """column name"""
  vehicle_id

  """column name"""
  vehicle_status
}

"""
input type for updating data in table "vehicle_location_last"
"""
input vehicle_location_last_set_input {
  acceleration: String
  alarm_content: String
  alititude: String
  coordinate: point
  correct_coordinate: point
  direction: String
  district_id: String
  driver_id: String
  enterprise_id: String
  gps_speed: numeric
  id: bigint
  imei: String
  is_locate: Boolean
  locate_time: timestamptz
  location_description: String
  mileage: String
  road_name: String
  sim_number: String
  speed_limit_threshold: numeric
  star_count: String
  star_status: String
  supervision_photo_id: String
  tachograph_speed: numeric
  vehicle_id: String
  vehicle_status: String
}

"""aggregate stddev on columns"""
type vehicle_location_last_stddev_fields {
  gps_speed: Float
  id: Float
  speed_limit_threshold: Float
  tachograph_speed: Float
}

"""
order by stddev() on columns of table "vehicle_location_last"
"""
input vehicle_location_last_stddev_order_by {
  gps_speed: order_by
  id: order_by
  speed_limit_threshold: order_by
  tachograph_speed: order_by
}

"""aggregate stddev_pop on columns"""
type vehicle_location_last_stddev_pop_fields {
  gps_speed: Float
  id: Float
  speed_limit_threshold: Float
  tachograph_speed: Float
}

"""
order by stddev_pop() on columns of table "vehicle_location_last"
"""
input vehicle_location_last_stddev_pop_order_by {
  gps_speed: order_by
  id: order_by
  speed_limit_threshold: order_by
  tachograph_speed: order_by
}

"""aggregate stddev_samp on columns"""
type vehicle_location_last_stddev_samp_fields {
  gps_speed: Float
  id: Float
  speed_limit_threshold: Float
  tachograph_speed: Float
}

"""
order by stddev_samp() on columns of table "vehicle_location_last"
"""
input vehicle_location_last_stddev_samp_order_by {
  gps_speed: order_by
  id: order_by
  speed_limit_threshold: order_by
  tachograph_speed: order_by
}

"""aggregate sum on columns"""
type vehicle_location_last_sum_fields {
  gps_speed: numeric
  id: bigint
  speed_limit_threshold: numeric
  tachograph_speed: numeric
}

"""
order by sum() on columns of table "vehicle_location_last"
"""
input vehicle_location_last_sum_order_by {
  gps_speed: order_by
  id: order_by
  speed_limit_threshold: order_by
  tachograph_speed: order_by
}

"""
update columns of table "vehicle_location_last"
"""
enum vehicle_location_last_update_column {
  """column name"""
  acceleration

  """column name"""
  alarm_content

  """column name"""
  alititude

  """column name"""
  coordinate

  """column name"""
  correct_coordinate

  """column name"""
  direction

  """column name"""
  district_id

  """column name"""
  driver_id

  """column name"""
  enterprise_id

  """column name"""
  gps_speed

  """column name"""
  id

  """column name"""
  imei

  """column name"""
  is_locate

  """column name"""
  locate_time

  """column name"""
  location_description

  """column name"""
  mileage

  """column name"""
  road_name

  """column name"""
  sim_number

  """column name"""
  speed_limit_threshold

  """column name"""
  star_count

  """column name"""
  star_status

  """column name"""
  supervision_photo_id

  """column name"""
  tachograph_speed

  """column name"""
  vehicle_id

  """column name"""
  vehicle_status
}

"""aggregate var_pop on columns"""
type vehicle_location_last_var_pop_fields {
  gps_speed: Float
  id: Float
  speed_limit_threshold: Float
  tachograph_speed: Float
}

"""
order by var_pop() on columns of table "vehicle_location_last"
"""
input vehicle_location_last_var_pop_order_by {
  gps_speed: order_by
  id: order_by
  speed_limit_threshold: order_by
  tachograph_speed: order_by
}

"""aggregate var_samp on columns"""
type vehicle_location_last_var_samp_fields {
  gps_speed: Float
  id: Float
  speed_limit_threshold: Float
  tachograph_speed: Float
}

"""
order by var_samp() on columns of table "vehicle_location_last"
"""
input vehicle_location_last_var_samp_order_by {
  gps_speed: order_by
  id: order_by
  speed_limit_threshold: order_by
  tachograph_speed: order_by
}

"""aggregate variance on columns"""
type vehicle_location_last_variance_fields {
  gps_speed: Float
  id: Float
  speed_limit_threshold: Float
  tachograph_speed: Float
}

"""
order by variance() on columns of table "vehicle_location_last"
"""
input vehicle_location_last_variance_order_by {
  gps_speed: order_by
  id: order_by
  speed_limit_threshold: order_by
  tachograph_speed: order_by
}

`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_location_last_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleLocationLastSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_location_last_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleLocationLastOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_location_last_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleLocationLastBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_location_last_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_location_last_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleLocationLastSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_location_last_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleLocationLastOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_location_last_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleLocationLastBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_location_last_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_location_last_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field_mutation_root_delete_vehicle_location_last_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleLocationLastBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNvehicle_location_last_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_mutation_root_delete_vehicle_location_last_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_mutation_root_insert_vehicle_location_last_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VehicleLocationLastInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNvehicle_location_last_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.VehicleLocationLastOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOvehicle_location_last_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_mutation_root_insert_vehicle_location_last_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleLocationLastInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNvehicle_location_last_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.VehicleLocationLastOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOvehicle_location_last_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_mutation_root_update_vehicle_location_last_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleLocationLastIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOvehicle_location_last_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleLocationLastSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOvehicle_location_last_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleLocationLastBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNvehicle_location_last_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_mutation_root_update_vehicle_location_last_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleLocationLastIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOvehicle_location_last_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleLocationLastSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOvehicle_location_last_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleLocationLastPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNvehicle_location_last_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_subscription_root_vehicle_location_last_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleLocationLastSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_location_last_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleLocationLastOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_location_last_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleLocationLastBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_location_last_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_subscription_root_vehicle_location_last_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleLocationLastSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_location_last_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleLocationLastOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_location_last_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleLocationLastBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_location_last_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_subscription_root_vehicle_location_last_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_vehicle_location_last_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleLocationLastSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOvehicle_location_last_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Query_vehicle_location_last(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_location_last_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleLocationLast(rctx, args["distinct_on"].([]model.VehicleLocationLastSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleLocationLastOrderBy), args["where"].(*model.VehicleLocationLastBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleLocationLast)
	fc.Result = res
	return ec.marshalNvehicle_location_last2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋmodelᚐVehicleLocationLastᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_location_last_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_location_last_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleLocationLastAggregate(rctx, args["distinct_on"].([]model.VehicleLocationLastSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleLocationLastOrderBy), args["where"].(*model.VehicleLocationLastBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastAggregate)
	fc.Result = res
	return ec.marshalNvehicle_location_last_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_location_last_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_location_last_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleLocationLastByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleLocationLast)
	fc.Result = res
	return ec.marshalOvehicle_location_last2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋmodelᚐVehicleLocationLast(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _mutation_root_delete_vehicle_location_last(ctx context.Context, field graphql.CollectedField, obj *model.MutationRoot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "mutation_root",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_mutation_root_delete_vehicle_location_last_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteVehicleLocationLast, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_location_last_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _mutation_root_delete_vehicle_location_last_by_pk(ctx context.Context, field graphql.CollectedField, obj *model.MutationRoot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "mutation_root",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_mutation_root_delete_vehicle_location_last_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteVehicleLocationLastByPk, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleLocationLast)
	fc.Result = res
	return ec.marshalOvehicle_location_last2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋmodelᚐVehicleLocationLast(ctx, field.Selections, res)
}

func (ec *executionContext) _mutation_root_insert_vehicle_location_last(ctx context.Context, field graphql.CollectedField, obj *model.MutationRoot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "mutation_root",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_mutation_root_insert_vehicle_location_last_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsertVehicleLocationLast, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_location_last_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _mutation_root_insert_vehicle_location_last_one(ctx context.Context, field graphql.CollectedField, obj *model.MutationRoot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "mutation_root",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_mutation_root_insert_vehicle_location_last_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsertVehicleLocationLastOne, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleLocationLast)
	fc.Result = res
	return ec.marshalOvehicle_location_last2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋmodelᚐVehicleLocationLast(ctx, field.Selections, res)
}

func (ec *executionContext) _mutation_root_update_vehicle_location_last(ctx context.Context, field graphql.CollectedField, obj *model.MutationRoot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "mutation_root",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_mutation_root_update_vehicle_location_last_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateVehicleLocationLast, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_location_last_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _mutation_root_update_vehicle_location_last_by_pk(ctx context.Context, field graphql.CollectedField, obj *model.MutationRoot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "mutation_root",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_mutation_root_update_vehicle_location_last_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateVehicleLocationLastByPk, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleLocationLast)
	fc.Result = res
	return ec.marshalOvehicle_location_last2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋmodelᚐVehicleLocationLast(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_root_vehicle_location_last(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionRoot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription_root",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_subscription_root_vehicle_location_last_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleLocationLast, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleLocationLast)
	fc.Result = res
	return ec.marshalNvehicle_location_last2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋmodelᚐVehicleLocationLastᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_root_vehicle_location_last_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionRoot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription_root",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_subscription_root_vehicle_location_last_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleLocationLastAggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastAggregate)
	fc.Result = res
	return ec.marshalNvehicle_location_last_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_root_vehicle_location_last_by_pk(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionRoot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription_root",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_subscription_root_vehicle_location_last_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleLocationLastByPk, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleLocationLast)
	fc.Result = res
	return ec.marshalOvehicle_location_last2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋmodelᚐVehicleLocationLast(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_acceleration(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Acceleration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_alarm_content(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_alititude(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alititude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_coordinate(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOpoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_correct_coordinate(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CorrectCoordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOpoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_direction(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_district_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_driver_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_imei(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imei, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_is_locate(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsLocate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_locate_time(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_location_description(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_mileage(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mileage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_road_name(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_sim_number(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_star_count(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StarCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_star_status(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StarStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_supervision_photo_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_vehicle_status(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationLast) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastAggregateFields)
	fc.Result = res
	return ec.marshalOvehicle_location_last_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleLocationLast)
	fc.Result = res
	return ec.marshalNvehicle_location_last2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋmodelᚐVehicleLocationLastᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastAvgFields)
	fc.Result = res
	return ec.marshalOvehicle_location_last_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_vehicle_location_last_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastMaxFields)
	fc.Result = res
	return ec.marshalOvehicle_location_last_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastMinFields)
	fc.Result = res
	return ec.marshalOvehicle_location_last_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastStddevFields)
	fc.Result = res
	return ec.marshalOvehicle_location_last_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastStddevPopFields)
	fc.Result = res
	return ec.marshalOvehicle_location_last_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastStddevSampFields)
	fc.Result = res
	return ec.marshalOvehicle_location_last_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastSumFields)
	fc.Result = res
	return ec.marshalOvehicle_location_last_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastVarPopFields)
	fc.Result = res
	return ec.marshalOvehicle_location_last_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastVarSampFields)
	fc.Result = res
	return ec.marshalOvehicle_location_last_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationLastVarianceFields)
	fc.Result = res
	return ec.marshalOvehicle_location_last_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_avg_fields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_avg_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_avg_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_max_fields_acceleration(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Acceleration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_max_fields_alarm_content(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_max_fields_alititude(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alititude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_max_fields_direction(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_max_fields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_max_fields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_max_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_max_fields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_max_fields_imei(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imei, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_max_fields_locate_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_max_fields_location_description(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_max_fields_mileage(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mileage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_max_fields_road_name(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_max_fields_sim_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_max_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_max_fields_star_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StarCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_max_fields_star_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StarStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_max_fields_supervision_photo_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_max_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_max_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_max_fields_vehicle_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_min_fields_acceleration(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Acceleration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_min_fields_alarm_content(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_min_fields_alititude(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alititude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_min_fields_direction(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_min_fields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_min_fields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_min_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_min_fields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_min_fields_imei(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imei, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_min_fields_locate_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_min_fields_location_description(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_min_fields_mileage(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mileage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_min_fields_road_name(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_min_fields_sim_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_min_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_min_fields_star_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StarCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_min_fields_star_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StarStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_min_fields_supervision_photo_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_min_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_min_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_min_fields_vehicle_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleLocationLast)
	fc.Result = res
	return ec.marshalNvehicle_location_last2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋmodelᚐVehicleLocationLastᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_stddev_fields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_stddev_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_stddev_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_stddev_pop_fields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_stddev_pop_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_stddev_pop_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_stddev_samp_fields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_stddev_samp_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_stddev_samp_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_sum_fields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_sum_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_sum_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_var_pop_fields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_var_pop_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_var_pop_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_var_samp_fields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_var_samp_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_var_samp_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_variance_fields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_variance_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_last_variance_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationLastVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_last_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBoolean_comparison_exp(ctx context.Context, obj interface{}) (model2.BooleanComparisonExp, error) {
	var it model2.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputString_comparison_exp(ctx context.Context, obj interface{}) (model2.StringComparisonExp, error) {
	var it model2.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputbigint_comparison_exp(ctx context.Context, obj interface{}) (model2.BigintComparisonExp, error) {
	var it model2.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnumeric_comparison_exp(ctx context.Context, obj interface{}) (model2.NumericComparisonExp, error) {
	var it model2.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOnumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOnumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputpoint_comparison_exp(ctx context.Context, obj interface{}) (model2.PointComparisonExp, error) {
	var it model2.PointComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOpoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOpoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtimestamptz_comparison_exp(ctx context.Context, obj interface{}) (model2.TimestamptzComparisonExp, error) {
	var it model2.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_last_aggregate_order_by(ctx context.Context, obj interface{}) (model.VehicleLocationLastAggregateOrderBy, error) {
	var it model.VehicleLocationLastAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOvehicle_location_last_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOvehicle_location_last_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOvehicle_location_last_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOvehicle_location_last_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOvehicle_location_last_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOvehicle_location_last_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOvehicle_location_last_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOvehicle_location_last_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOvehicle_location_last_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOvehicle_location_last_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_last_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.VehicleLocationLastArrRelInsertInput, error) {
	var it model.VehicleLocationLastArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNvehicle_location_last_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOvehicle_location_last_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_last_avg_order_by(ctx context.Context, obj interface{}) (model.VehicleLocationLastAvgOrderBy, error) {
	var it model.VehicleLocationLastAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_last_bool_exp(ctx context.Context, obj interface{}) (model.VehicleLocationLastBoolExp, error) {
	var it model.VehicleLocationLastBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOvehicle_location_last_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOvehicle_location_last_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOvehicle_location_last_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "acceleration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceleration"))
			it.Acceleration, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alititude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alititude"))
			it.Alititude, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOpoint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "correct_coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("correct_coordinate"))
			it.CorrectCoordinate, err = ec.unmarshalOpoint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "imei":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imei"))
			it.Imei, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_locate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_locate"))
			it.IsLocate, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "locate_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locate_time"))
			it.LocateTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "mileage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mileage"))
			it.Mileage, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_count"))
			it.StarCount, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_status"))
			it.StarStatus, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
			it.SupervisionPhotoID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_status"))
			it.VehicleStatus, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_last_inc_input(ctx context.Context, obj interface{}) (model.VehicleLocationLastIncInput, error) {
	var it model.VehicleLocationLastIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_last_insert_input(ctx context.Context, obj interface{}) (model.VehicleLocationLastInsertInput, error) {
	var it model.VehicleLocationLastInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "acceleration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceleration"))
			it.Acceleration, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alititude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alititude"))
			it.Alititude, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "correct_coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("correct_coordinate"))
			it.CorrectCoordinate, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "imei":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imei"))
			it.Imei, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_locate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_locate"))
			it.IsLocate, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "locate_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locate_time"))
			it.LocateTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mileage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mileage"))
			it.Mileage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_count"))
			it.StarCount, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_status"))
			it.StarStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
			it.SupervisionPhotoID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_status"))
			it.VehicleStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_last_max_order_by(ctx context.Context, obj interface{}) (model.VehicleLocationLastMaxOrderBy, error) {
	var it model.VehicleLocationLastMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "acceleration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceleration"))
			it.Acceleration, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alititude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alititude"))
			it.Alititude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "imei":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imei"))
			it.Imei, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "locate_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locate_time"))
			it.LocateTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mileage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mileage"))
			it.Mileage, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_count"))
			it.StarCount, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_status"))
			it.StarStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
			it.SupervisionPhotoID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_status"))
			it.VehicleStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_last_min_order_by(ctx context.Context, obj interface{}) (model.VehicleLocationLastMinOrderBy, error) {
	var it model.VehicleLocationLastMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "acceleration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceleration"))
			it.Acceleration, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alititude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alititude"))
			it.Alititude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "imei":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imei"))
			it.Imei, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "locate_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locate_time"))
			it.LocateTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mileage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mileage"))
			it.Mileage, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_count"))
			it.StarCount, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_status"))
			it.StarStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
			it.SupervisionPhotoID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_status"))
			it.VehicleStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_last_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.VehicleLocationLastObjRelInsertInput, error) {
	var it model.VehicleLocationLastObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNvehicle_location_last_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOvehicle_location_last_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_last_on_conflict(ctx context.Context, obj interface{}) (model.VehicleLocationLastOnConflict, error) {
	var it model.VehicleLocationLastOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNvehicle_location_last_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNvehicle_location_last_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOvehicle_location_last_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_last_order_by(ctx context.Context, obj interface{}) (model.VehicleLocationLastOrderBy, error) {
	var it model.VehicleLocationLastOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "acceleration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceleration"))
			it.Acceleration, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alititude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alititude"))
			it.Alititude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "correct_coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("correct_coordinate"))
			it.CorrectCoordinate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "imei":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imei"))
			it.Imei, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_locate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_locate"))
			it.IsLocate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "locate_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locate_time"))
			it.LocateTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mileage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mileage"))
			it.Mileage, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_count"))
			it.StarCount, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_status"))
			it.StarStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
			it.SupervisionPhotoID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_status"))
			it.VehicleStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_last_pk_columns_input(ctx context.Context, obj interface{}) (model.VehicleLocationLastPkColumnsInput, error) {
	var it model.VehicleLocationLastPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_last_set_input(ctx context.Context, obj interface{}) (model.VehicleLocationLastSetInput, error) {
	var it model.VehicleLocationLastSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "acceleration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceleration"))
			it.Acceleration, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alititude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alititude"))
			it.Alititude, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "correct_coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("correct_coordinate"))
			it.CorrectCoordinate, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "imei":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imei"))
			it.Imei, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_locate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_locate"))
			it.IsLocate, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "locate_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locate_time"))
			it.LocateTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mileage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mileage"))
			it.Mileage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_count"))
			it.StarCount, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_status"))
			it.StarStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
			it.SupervisionPhotoID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_status"))
			it.VehicleStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_last_stddev_order_by(ctx context.Context, obj interface{}) (model.VehicleLocationLastStddevOrderBy, error) {
	var it model.VehicleLocationLastStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_last_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.VehicleLocationLastStddevPopOrderBy, error) {
	var it model.VehicleLocationLastStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_last_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.VehicleLocationLastStddevSampOrderBy, error) {
	var it model.VehicleLocationLastStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_last_sum_order_by(ctx context.Context, obj interface{}) (model.VehicleLocationLastSumOrderBy, error) {
	var it model.VehicleLocationLastSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_last_var_pop_order_by(ctx context.Context, obj interface{}) (model.VehicleLocationLastVarPopOrderBy, error) {
	var it model.VehicleLocationLastVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_last_var_samp_order_by(ctx context.Context, obj interface{}) (model.VehicleLocationLastVarSampOrderBy, error) {
	var it model.VehicleLocationLastVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_last_variance_order_by(ctx context.Context, obj interface{}) (model.VehicleLocationLastVarianceOrderBy, error) {
	var it model.VehicleLocationLastVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "vehicle_location_last":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_location_last(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_location_last_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_location_last_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_location_last_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_location_last_by_pk(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutation_rootImplementors = []string{"mutation_root"}

func (ec *executionContext) _mutation_root(ctx context.Context, sel ast.SelectionSet, obj *model.MutationRoot) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutation_rootImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("mutation_root")
		case "delete_vehicle_location_last":
			out.Values[i] = ec._mutation_root_delete_vehicle_location_last(ctx, field, obj)
		case "delete_vehicle_location_last_by_pk":
			out.Values[i] = ec._mutation_root_delete_vehicle_location_last_by_pk(ctx, field, obj)
		case "insert_vehicle_location_last":
			out.Values[i] = ec._mutation_root_insert_vehicle_location_last(ctx, field, obj)
		case "insert_vehicle_location_last_one":
			out.Values[i] = ec._mutation_root_insert_vehicle_location_last_one(ctx, field, obj)
		case "update_vehicle_location_last":
			out.Values[i] = ec._mutation_root_update_vehicle_location_last(ctx, field, obj)
		case "update_vehicle_location_last_by_pk":
			out.Values[i] = ec._mutation_root_update_vehicle_location_last_by_pk(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscription_rootImplementors = []string{"subscription_root"}

func (ec *executionContext) _subscription_root(ctx context.Context, sel ast.SelectionSet, obj *model.SubscriptionRoot) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscription_rootImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("subscription_root")
		case "vehicle_location_last":
			out.Values[i] = ec._subscription_root_vehicle_location_last(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_location_last_aggregate":
			out.Values[i] = ec._subscription_root_vehicle_location_last_aggregate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_location_last_by_pk":
			out.Values[i] = ec._subscription_root_vehicle_location_last_by_pk(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_location_lastImplementors = []string{"vehicle_location_last"}

func (ec *executionContext) _vehicle_location_last(ctx context.Context, sel ast.SelectionSet, obj *model1.VehicleLocationLast) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_location_lastImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_location_last")
		case "acceleration":
			out.Values[i] = ec._vehicle_location_last_acceleration(ctx, field, obj)
		case "alarm_content":
			out.Values[i] = ec._vehicle_location_last_alarm_content(ctx, field, obj)
		case "alititude":
			out.Values[i] = ec._vehicle_location_last_alititude(ctx, field, obj)
		case "coordinate":
			out.Values[i] = ec._vehicle_location_last_coordinate(ctx, field, obj)
		case "correct_coordinate":
			out.Values[i] = ec._vehicle_location_last_correct_coordinate(ctx, field, obj)
		case "direction":
			out.Values[i] = ec._vehicle_location_last_direction(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._vehicle_location_last_district_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._vehicle_location_last_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._vehicle_location_last_enterprise_id(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._vehicle_location_last_gps_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_location_last_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "imei":
			out.Values[i] = ec._vehicle_location_last_imei(ctx, field, obj)
		case "is_locate":
			out.Values[i] = ec._vehicle_location_last_is_locate(ctx, field, obj)
		case "locate_time":
			out.Values[i] = ec._vehicle_location_last_locate_time(ctx, field, obj)
		case "location_description":
			out.Values[i] = ec._vehicle_location_last_location_description(ctx, field, obj)
		case "mileage":
			out.Values[i] = ec._vehicle_location_last_mileage(ctx, field, obj)
		case "road_name":
			out.Values[i] = ec._vehicle_location_last_road_name(ctx, field, obj)
		case "sim_number":
			out.Values[i] = ec._vehicle_location_last_sim_number(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_location_last_speed_limit_threshold(ctx, field, obj)
		case "star_count":
			out.Values[i] = ec._vehicle_location_last_star_count(ctx, field, obj)
		case "star_status":
			out.Values[i] = ec._vehicle_location_last_star_status(ctx, field, obj)
		case "supervision_photo_id":
			out.Values[i] = ec._vehicle_location_last_supervision_photo_id(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_location_last_tachograph_speed(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._vehicle_location_last_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_status":
			out.Values[i] = ec._vehicle_location_last_vehicle_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_location_last_aggregateImplementors = []string{"vehicle_location_last_aggregate"}

func (ec *executionContext) _vehicle_location_last_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationLastAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_location_last_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_location_last_aggregate")
		case "aggregate":
			out.Values[i] = ec._vehicle_location_last_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._vehicle_location_last_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_location_last_aggregate_fieldsImplementors = []string{"vehicle_location_last_aggregate_fields"}

func (ec *executionContext) _vehicle_location_last_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationLastAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_location_last_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_location_last_aggregate_fields")
		case "avg":
			out.Values[i] = ec._vehicle_location_last_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._vehicle_location_last_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._vehicle_location_last_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._vehicle_location_last_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._vehicle_location_last_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._vehicle_location_last_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._vehicle_location_last_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._vehicle_location_last_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._vehicle_location_last_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._vehicle_location_last_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._vehicle_location_last_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_location_last_avg_fieldsImplementors = []string{"vehicle_location_last_avg_fields"}

func (ec *executionContext) _vehicle_location_last_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationLastAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_location_last_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_location_last_avg_fields")
		case "gps_speed":
			out.Values[i] = ec._vehicle_location_last_avg_fields_gps_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_location_last_avg_fields_id(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_location_last_avg_fields_speed_limit_threshold(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_location_last_avg_fields_tachograph_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_location_last_max_fieldsImplementors = []string{"vehicle_location_last_max_fields"}

func (ec *executionContext) _vehicle_location_last_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationLastMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_location_last_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_location_last_max_fields")
		case "acceleration":
			out.Values[i] = ec._vehicle_location_last_max_fields_acceleration(ctx, field, obj)
		case "alarm_content":
			out.Values[i] = ec._vehicle_location_last_max_fields_alarm_content(ctx, field, obj)
		case "alititude":
			out.Values[i] = ec._vehicle_location_last_max_fields_alititude(ctx, field, obj)
		case "direction":
			out.Values[i] = ec._vehicle_location_last_max_fields_direction(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._vehicle_location_last_max_fields_district_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._vehicle_location_last_max_fields_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._vehicle_location_last_max_fields_enterprise_id(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._vehicle_location_last_max_fields_gps_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_location_last_max_fields_id(ctx, field, obj)
		case "imei":
			out.Values[i] = ec._vehicle_location_last_max_fields_imei(ctx, field, obj)
		case "locate_time":
			out.Values[i] = ec._vehicle_location_last_max_fields_locate_time(ctx, field, obj)
		case "location_description":
			out.Values[i] = ec._vehicle_location_last_max_fields_location_description(ctx, field, obj)
		case "mileage":
			out.Values[i] = ec._vehicle_location_last_max_fields_mileage(ctx, field, obj)
		case "road_name":
			out.Values[i] = ec._vehicle_location_last_max_fields_road_name(ctx, field, obj)
		case "sim_number":
			out.Values[i] = ec._vehicle_location_last_max_fields_sim_number(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_location_last_max_fields_speed_limit_threshold(ctx, field, obj)
		case "star_count":
			out.Values[i] = ec._vehicle_location_last_max_fields_star_count(ctx, field, obj)
		case "star_status":
			out.Values[i] = ec._vehicle_location_last_max_fields_star_status(ctx, field, obj)
		case "supervision_photo_id":
			out.Values[i] = ec._vehicle_location_last_max_fields_supervision_photo_id(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_location_last_max_fields_tachograph_speed(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._vehicle_location_last_max_fields_vehicle_id(ctx, field, obj)
		case "vehicle_status":
			out.Values[i] = ec._vehicle_location_last_max_fields_vehicle_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_location_last_min_fieldsImplementors = []string{"vehicle_location_last_min_fields"}

func (ec *executionContext) _vehicle_location_last_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationLastMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_location_last_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_location_last_min_fields")
		case "acceleration":
			out.Values[i] = ec._vehicle_location_last_min_fields_acceleration(ctx, field, obj)
		case "alarm_content":
			out.Values[i] = ec._vehicle_location_last_min_fields_alarm_content(ctx, field, obj)
		case "alititude":
			out.Values[i] = ec._vehicle_location_last_min_fields_alititude(ctx, field, obj)
		case "direction":
			out.Values[i] = ec._vehicle_location_last_min_fields_direction(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._vehicle_location_last_min_fields_district_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._vehicle_location_last_min_fields_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._vehicle_location_last_min_fields_enterprise_id(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._vehicle_location_last_min_fields_gps_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_location_last_min_fields_id(ctx, field, obj)
		case "imei":
			out.Values[i] = ec._vehicle_location_last_min_fields_imei(ctx, field, obj)
		case "locate_time":
			out.Values[i] = ec._vehicle_location_last_min_fields_locate_time(ctx, field, obj)
		case "location_description":
			out.Values[i] = ec._vehicle_location_last_min_fields_location_description(ctx, field, obj)
		case "mileage":
			out.Values[i] = ec._vehicle_location_last_min_fields_mileage(ctx, field, obj)
		case "road_name":
			out.Values[i] = ec._vehicle_location_last_min_fields_road_name(ctx, field, obj)
		case "sim_number":
			out.Values[i] = ec._vehicle_location_last_min_fields_sim_number(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_location_last_min_fields_speed_limit_threshold(ctx, field, obj)
		case "star_count":
			out.Values[i] = ec._vehicle_location_last_min_fields_star_count(ctx, field, obj)
		case "star_status":
			out.Values[i] = ec._vehicle_location_last_min_fields_star_status(ctx, field, obj)
		case "supervision_photo_id":
			out.Values[i] = ec._vehicle_location_last_min_fields_supervision_photo_id(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_location_last_min_fields_tachograph_speed(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._vehicle_location_last_min_fields_vehicle_id(ctx, field, obj)
		case "vehicle_status":
			out.Values[i] = ec._vehicle_location_last_min_fields_vehicle_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_location_last_mutation_responseImplementors = []string{"vehicle_location_last_mutation_response"}

func (ec *executionContext) _vehicle_location_last_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationLastMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_location_last_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_location_last_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._vehicle_location_last_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._vehicle_location_last_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_location_last_stddev_fieldsImplementors = []string{"vehicle_location_last_stddev_fields"}

func (ec *executionContext) _vehicle_location_last_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationLastStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_location_last_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_location_last_stddev_fields")
		case "gps_speed":
			out.Values[i] = ec._vehicle_location_last_stddev_fields_gps_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_location_last_stddev_fields_id(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_location_last_stddev_fields_speed_limit_threshold(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_location_last_stddev_fields_tachograph_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_location_last_stddev_pop_fieldsImplementors = []string{"vehicle_location_last_stddev_pop_fields"}

func (ec *executionContext) _vehicle_location_last_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationLastStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_location_last_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_location_last_stddev_pop_fields")
		case "gps_speed":
			out.Values[i] = ec._vehicle_location_last_stddev_pop_fields_gps_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_location_last_stddev_pop_fields_id(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_location_last_stddev_pop_fields_speed_limit_threshold(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_location_last_stddev_pop_fields_tachograph_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_location_last_stddev_samp_fieldsImplementors = []string{"vehicle_location_last_stddev_samp_fields"}

func (ec *executionContext) _vehicle_location_last_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationLastStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_location_last_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_location_last_stddev_samp_fields")
		case "gps_speed":
			out.Values[i] = ec._vehicle_location_last_stddev_samp_fields_gps_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_location_last_stddev_samp_fields_id(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_location_last_stddev_samp_fields_speed_limit_threshold(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_location_last_stddev_samp_fields_tachograph_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_location_last_sum_fieldsImplementors = []string{"vehicle_location_last_sum_fields"}

func (ec *executionContext) _vehicle_location_last_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationLastSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_location_last_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_location_last_sum_fields")
		case "gps_speed":
			out.Values[i] = ec._vehicle_location_last_sum_fields_gps_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_location_last_sum_fields_id(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_location_last_sum_fields_speed_limit_threshold(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_location_last_sum_fields_tachograph_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_location_last_var_pop_fieldsImplementors = []string{"vehicle_location_last_var_pop_fields"}

func (ec *executionContext) _vehicle_location_last_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationLastVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_location_last_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_location_last_var_pop_fields")
		case "gps_speed":
			out.Values[i] = ec._vehicle_location_last_var_pop_fields_gps_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_location_last_var_pop_fields_id(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_location_last_var_pop_fields_speed_limit_threshold(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_location_last_var_pop_fields_tachograph_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_location_last_var_samp_fieldsImplementors = []string{"vehicle_location_last_var_samp_fields"}

func (ec *executionContext) _vehicle_location_last_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationLastVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_location_last_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_location_last_var_samp_fields")
		case "gps_speed":
			out.Values[i] = ec._vehicle_location_last_var_samp_fields_gps_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_location_last_var_samp_fields_id(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_location_last_var_samp_fields_speed_limit_threshold(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_location_last_var_samp_fields_tachograph_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_location_last_variance_fieldsImplementors = []string{"vehicle_location_last_variance_fields"}

func (ec *executionContext) _vehicle_location_last_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationLastVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_location_last_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_location_last_variance_fields")
		case "gps_speed":
			out.Values[i] = ec._vehicle_location_last_variance_fields_gps_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_location_last_variance_fields_id(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_location_last_variance_fields_speed_limit_threshold(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_location_last_variance_fields_tachograph_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNbigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNbigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNnumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNnumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNpoint2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNpoint2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNvehicle_location_last2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋmodelᚐVehicleLocationLastᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.VehicleLocationLast) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_location_last2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋmodelᚐVehicleLocationLast(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNvehicle_location_last2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋmodelᚐVehicleLocationLast(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleLocationLast) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._vehicle_location_last(ctx, sel, v)
}

func (ec *executionContext) marshalNvehicle_location_last_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastAggregate(ctx context.Context, sel ast.SelectionSet, v model.VehicleLocationLastAggregate) graphql.Marshaler {
	return ec._vehicle_location_last_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNvehicle_location_last_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationLastAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._vehicle_location_last_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNvehicle_location_last_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastBoolExp(ctx context.Context, v interface{}) (model.VehicleLocationLastBoolExp, error) {
	res, err := ec.unmarshalInputvehicle_location_last_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_location_last_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastConstraint(ctx context.Context, v interface{}) (model.VehicleLocationLastConstraint, error) {
	var res model.VehicleLocationLastConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_location_last_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastConstraint(ctx context.Context, sel ast.SelectionSet, v model.VehicleLocationLastConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_location_last_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastInsertInput(ctx context.Context, v interface{}) (model.VehicleLocationLastInsertInput, error) {
	res, err := ec.unmarshalInputvehicle_location_last_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_location_last_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VehicleLocationLastInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleLocationLastInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_location_last_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNvehicle_location_last_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastInsertInput(ctx context.Context, v interface{}) (*model.VehicleLocationLastInsertInput, error) {
	res, err := ec.unmarshalInputvehicle_location_last_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_location_last_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastOrderBy(ctx context.Context, v interface{}) (*model.VehicleLocationLastOrderBy, error) {
	res, err := ec.unmarshalInputvehicle_location_last_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_location_last_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastPkColumnsInput(ctx context.Context, v interface{}) (model.VehicleLocationLastPkColumnsInput, error) {
	res, err := ec.unmarshalInputvehicle_location_last_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_location_last_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastSelectColumn(ctx context.Context, v interface{}) (model.VehicleLocationLastSelectColumn, error) {
	var res model.VehicleLocationLastSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_location_last_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleLocationLastSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_location_last_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastUpdateColumn(ctx context.Context, v interface{}) (model.VehicleLocationLastUpdateColumn, error) {
	var res model.VehicleLocationLastUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_location_last_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleLocationLastUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_location_last_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleLocationLastUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleLocationLastUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_location_last_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNvehicle_location_last_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleLocationLastUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_location_last_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model2.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBoolean_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model2.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputString_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalObigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNbigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalObigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNbigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalObigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalObigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model2.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputbigint_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOnumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNnumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOnumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNnumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOnumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOnumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx context.Context, v interface{}) (*model2.NumericComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputnumeric_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model2.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model2.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model2.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOpoint2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNpoint2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOpoint2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNpoint2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOpoint2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOpoint2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOpoint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx context.Context, v interface{}) (*model2.PointComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputpoint_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNtimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNtimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model2.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtimestamptz_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_location_last2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋmodelᚐVehicleLocationLast(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleLocationLast) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_location_last(ctx, sel, v)
}

func (ec *executionContext) marshalOvehicle_location_last_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationLastAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_location_last_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOvehicle_location_last_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationLastAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_location_last_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_location_last_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastAvgOrderBy(ctx context.Context, v interface{}) (*model.VehicleLocationLastAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_location_last_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_location_last_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastBoolExp(ctx context.Context, v interface{}) ([]*model.VehicleLocationLastBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleLocationLastBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOvehicle_location_last_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOvehicle_location_last_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastBoolExp(ctx context.Context, v interface{}) (*model.VehicleLocationLastBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_location_last_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_location_last_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastIncInput(ctx context.Context, v interface{}) (*model.VehicleLocationLastIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_location_last_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_location_last_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationLastMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_location_last_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_location_last_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastMaxOrderBy(ctx context.Context, v interface{}) (*model.VehicleLocationLastMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_location_last_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_location_last_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationLastMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_location_last_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_location_last_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastMinOrderBy(ctx context.Context, v interface{}) (*model.VehicleLocationLastMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_location_last_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_location_last_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationLastMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_location_last_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_location_last_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastOnConflict(ctx context.Context, v interface{}) (*model.VehicleLocationLastOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_location_last_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_location_last_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VehicleLocationLastOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleLocationLastOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_location_last_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOvehicle_location_last_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleLocationLastSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleLocationLastSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_location_last_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOvehicle_location_last_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleLocationLastSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_location_last_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOvehicle_location_last_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastSetInput(ctx context.Context, v interface{}) (*model.VehicleLocationLastSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_location_last_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_location_last_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationLastStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_location_last_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_location_last_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastStddevOrderBy(ctx context.Context, v interface{}) (*model.VehicleLocationLastStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_location_last_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_location_last_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationLastStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_location_last_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_location_last_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastStddevPopOrderBy(ctx context.Context, v interface{}) (*model.VehicleLocationLastStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_location_last_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_location_last_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationLastStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_location_last_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_location_last_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastStddevSampOrderBy(ctx context.Context, v interface{}) (*model.VehicleLocationLastStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_location_last_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_location_last_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationLastSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_location_last_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_location_last_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastSumOrderBy(ctx context.Context, v interface{}) (*model.VehicleLocationLastSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_location_last_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_location_last_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationLastVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_location_last_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_location_last_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastVarPopOrderBy(ctx context.Context, v interface{}) (*model.VehicleLocationLastVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_location_last_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_location_last_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationLastVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_location_last_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_location_last_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastVarSampOrderBy(ctx context.Context, v interface{}) (*model.VehicleLocationLastVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_location_last_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_location_last_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationLastVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_location_last_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_location_last_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋlastᚋqueryᚋgraphᚋmodelᚐVehicleLocationLastVarianceOrderBy(ctx context.Context, v interface{}) (*model.VehicleLocationLastVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_location_last_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
