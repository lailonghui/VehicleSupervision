// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	model1 "VehicleSupervision/internal/modules/vehiclelocation/his/model"
	"VehicleSupervision/internal/modules/vehiclelocation/his/mutation/graph/model"
	model2 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Mutation struct {
		DeleteVehicleLocationHis     func(childComplexity int, where model.VehicleLocationHisBoolExp) int
		DeleteVehicleLocationHisByPk func(childComplexity int, id int64) int
		InsertVehicleLocationHis     func(childComplexity int, objects []*model.VehicleLocationHisInsertInput, onConflict *model.VehicleLocationHisOnConflict) int
		InsertVehicleLocationHisOne  func(childComplexity int, object model.VehicleLocationHisInsertInput, onConflict *model.VehicleLocationHisOnConflict) int
		UpdateVehicleLocationHis     func(childComplexity int, inc *model.VehicleLocationHisIncInput, set *model.VehicleLocationHisSetInput, where model.VehicleLocationHisBoolExp) int
		UpdateVehicleLocationHisByPk func(childComplexity int, inc *model.VehicleLocationHisIncInput, set *model.VehicleLocationHisSetInput, pkColumns model.VehicleLocationHisPkColumnsInput) int
	}

	Query struct {
		T func(childComplexity int) int
	}

	SubscriptionRoot struct {
		VehicleLocationHis          func(childComplexity int, distinctOn []model.VehicleLocationHisSelectColumn, limit *int, offset *int, orderBy []*model.VehicleLocationHisOrderBy, where *model.VehicleLocationHisBoolExp) int
		VehicleLocationHisAggregate func(childComplexity int, distinctOn []model.VehicleLocationHisSelectColumn, limit *int, offset *int, orderBy []*model.VehicleLocationHisOrderBy, where *model.VehicleLocationHisBoolExp) int
		VehicleLocationHisByPk      func(childComplexity int, id int64) int
	}

	VehicleLocationHis struct {
		Acceleration        func(childComplexity int) int
		AlarmContent        func(childComplexity int) int
		Alititude           func(childComplexity int) int
		Coordinate          func(childComplexity int) int
		CorrectCoordinate   func(childComplexity int) int
		Direction           func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		DriverID            func(childComplexity int) int
		EnterpriseID        func(childComplexity int) int
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		Imei                func(childComplexity int) int
		IsLocate            func(childComplexity int) int
		LocateTime          func(childComplexity int) int
		LocationDescription func(childComplexity int) int
		Mileage             func(childComplexity int) int
		RoadName            func(childComplexity int) int
		SimNumber           func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		StarCount           func(childComplexity int) int
		StarStatus          func(childComplexity int) int
		SupervisionPhotoID  func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
		VehicleID           func(childComplexity int) int
		VehicleStatus       func(childComplexity int) int
	}

	VehicleLocationHisAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	VehicleLocationHisAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.VehicleLocationHisSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VehicleLocationHisAvgFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationHisMaxFields struct {
		Acceleration        func(childComplexity int) int
		AlarmContent        func(childComplexity int) int
		Alititude           func(childComplexity int) int
		Direction           func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		DriverID            func(childComplexity int) int
		EnterpriseID        func(childComplexity int) int
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		Imei                func(childComplexity int) int
		LocateTime          func(childComplexity int) int
		LocationDescription func(childComplexity int) int
		Mileage             func(childComplexity int) int
		RoadName            func(childComplexity int) int
		SimNumber           func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		StarCount           func(childComplexity int) int
		StarStatus          func(childComplexity int) int
		SupervisionPhotoID  func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
		VehicleID           func(childComplexity int) int
		VehicleStatus       func(childComplexity int) int
	}

	VehicleLocationHisMinFields struct {
		Acceleration        func(childComplexity int) int
		AlarmContent        func(childComplexity int) int
		Alititude           func(childComplexity int) int
		Direction           func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		DriverID            func(childComplexity int) int
		EnterpriseID        func(childComplexity int) int
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		Imei                func(childComplexity int) int
		LocateTime          func(childComplexity int) int
		LocationDescription func(childComplexity int) int
		Mileage             func(childComplexity int) int
		RoadName            func(childComplexity int) int
		SimNumber           func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		StarCount           func(childComplexity int) int
		StarStatus          func(childComplexity int) int
		SupervisionPhotoID  func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
		VehicleID           func(childComplexity int) int
		VehicleStatus       func(childComplexity int) int
	}

	VehicleLocationHisMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VehicleLocationHisStddevFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationHisStddevPopFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationHisStddevSampFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationHisSumFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationHisVarPopFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationHisVarSampFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleLocationHisVarianceFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}
}

type MutationResolver interface {
	DeleteVehicleLocationHis(ctx context.Context, where model.VehicleLocationHisBoolExp) (*model.VehicleLocationHisMutationResponse, error)
	DeleteVehicleLocationHisByPk(ctx context.Context, id int64) (*model1.VehicleLocationHis, error)
	InsertVehicleLocationHis(ctx context.Context, objects []*model.VehicleLocationHisInsertInput, onConflict *model.VehicleLocationHisOnConflict) (*model.VehicleLocationHisMutationResponse, error)
	InsertVehicleLocationHisOne(ctx context.Context, object model.VehicleLocationHisInsertInput, onConflict *model.VehicleLocationHisOnConflict) (*model1.VehicleLocationHis, error)
	UpdateVehicleLocationHis(ctx context.Context, inc *model.VehicleLocationHisIncInput, set *model.VehicleLocationHisSetInput, where model.VehicleLocationHisBoolExp) (*model.VehicleLocationHisMutationResponse, error)
	UpdateVehicleLocationHisByPk(ctx context.Context, inc *model.VehicleLocationHisIncInput, set *model.VehicleLocationHisSetInput, pkColumns model.VehicleLocationHisPkColumnsInput) (*model1.VehicleLocationHis, error)
}
type QueryResolver interface {
	T(ctx context.Context) (*int, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Mutation.delete_vehicle_location_his":
		if e.complexity.Mutation.DeleteVehicleLocationHis == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_location_his_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleLocationHis(childComplexity, args["where"].(model.VehicleLocationHisBoolExp)), true

	case "Mutation.delete_vehicle_location_his_by_pk":
		if e.complexity.Mutation.DeleteVehicleLocationHisByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_location_his_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleLocationHisByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.insert_vehicle_location_his":
		if e.complexity.Mutation.InsertVehicleLocationHis == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_location_his_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleLocationHis(childComplexity, args["objects"].([]*model.VehicleLocationHisInsertInput), args["on_conflict"].(*model.VehicleLocationHisOnConflict)), true

	case "Mutation.insert_vehicle_location_his_one":
		if e.complexity.Mutation.InsertVehicleLocationHisOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_location_his_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleLocationHisOne(childComplexity, args["object"].(model.VehicleLocationHisInsertInput), args["on_conflict"].(*model.VehicleLocationHisOnConflict)), true

	case "Mutation.update_vehicle_location_his":
		if e.complexity.Mutation.UpdateVehicleLocationHis == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_location_his_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleLocationHis(childComplexity, args["_inc"].(*model.VehicleLocationHisIncInput), args["_set"].(*model.VehicleLocationHisSetInput), args["where"].(model.VehicleLocationHisBoolExp)), true

	case "Mutation.update_vehicle_location_his_by_pk":
		if e.complexity.Mutation.UpdateVehicleLocationHisByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_location_his_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleLocationHisByPk(childComplexity, args["_inc"].(*model.VehicleLocationHisIncInput), args["_set"].(*model.VehicleLocationHisSetInput), args["pk_columns"].(model.VehicleLocationHisPkColumnsInput)), true

	case "Query.t":
		if e.complexity.Query.T == nil {
			break
		}

		return e.complexity.Query.T(childComplexity), true

	case "subscription_root.vehicle_location_his":
		if e.complexity.SubscriptionRoot.VehicleLocationHis == nil {
			break
		}

		args, err := ec.field_subscription_root_vehicle_location_his_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SubscriptionRoot.VehicleLocationHis(childComplexity, args["distinct_on"].([]model.VehicleLocationHisSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleLocationHisOrderBy), args["where"].(*model.VehicleLocationHisBoolExp)), true

	case "subscription_root.vehicle_location_his_aggregate":
		if e.complexity.SubscriptionRoot.VehicleLocationHisAggregate == nil {
			break
		}

		args, err := ec.field_subscription_root_vehicle_location_his_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SubscriptionRoot.VehicleLocationHisAggregate(childComplexity, args["distinct_on"].([]model.VehicleLocationHisSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleLocationHisOrderBy), args["where"].(*model.VehicleLocationHisBoolExp)), true

	case "subscription_root.vehicle_location_his_by_pk":
		if e.complexity.SubscriptionRoot.VehicleLocationHisByPk == nil {
			break
		}

		args, err := ec.field_subscription_root_vehicle_location_his_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SubscriptionRoot.VehicleLocationHisByPk(childComplexity, args["id"].(int64)), true

	case "vehicle_location_his.acceleration":
		if e.complexity.VehicleLocationHis.Acceleration == nil {
			break
		}

		return e.complexity.VehicleLocationHis.Acceleration(childComplexity), true

	case "vehicle_location_his.alarm_content":
		if e.complexity.VehicleLocationHis.AlarmContent == nil {
			break
		}

		return e.complexity.VehicleLocationHis.AlarmContent(childComplexity), true

	case "vehicle_location_his.alititude":
		if e.complexity.VehicleLocationHis.Alititude == nil {
			break
		}

		return e.complexity.VehicleLocationHis.Alititude(childComplexity), true

	case "vehicle_location_his.coordinate":
		if e.complexity.VehicleLocationHis.Coordinate == nil {
			break
		}

		return e.complexity.VehicleLocationHis.Coordinate(childComplexity), true

	case "vehicle_location_his.correct_coordinate":
		if e.complexity.VehicleLocationHis.CorrectCoordinate == nil {
			break
		}

		return e.complexity.VehicleLocationHis.CorrectCoordinate(childComplexity), true

	case "vehicle_location_his.direction":
		if e.complexity.VehicleLocationHis.Direction == nil {
			break
		}

		return e.complexity.VehicleLocationHis.Direction(childComplexity), true

	case "vehicle_location_his.district_id":
		if e.complexity.VehicleLocationHis.DistrictID == nil {
			break
		}

		return e.complexity.VehicleLocationHis.DistrictID(childComplexity), true

	case "vehicle_location_his.driver_id":
		if e.complexity.VehicleLocationHis.DriverID == nil {
			break
		}

		return e.complexity.VehicleLocationHis.DriverID(childComplexity), true

	case "vehicle_location_his.enterprise_id":
		if e.complexity.VehicleLocationHis.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleLocationHis.EnterpriseID(childComplexity), true

	case "vehicle_location_his.gps_speed":
		if e.complexity.VehicleLocationHis.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHis.GpsSpeed(childComplexity), true

	case "vehicle_location_his.id":
		if e.complexity.VehicleLocationHis.ID == nil {
			break
		}

		return e.complexity.VehicleLocationHis.ID(childComplexity), true

	case "vehicle_location_his.imei":
		if e.complexity.VehicleLocationHis.Imei == nil {
			break
		}

		return e.complexity.VehicleLocationHis.Imei(childComplexity), true

	case "vehicle_location_his.is_locate":
		if e.complexity.VehicleLocationHis.IsLocate == nil {
			break
		}

		return e.complexity.VehicleLocationHis.IsLocate(childComplexity), true

	case "vehicle_location_his.locate_time":
		if e.complexity.VehicleLocationHis.LocateTime == nil {
			break
		}

		return e.complexity.VehicleLocationHis.LocateTime(childComplexity), true

	case "vehicle_location_his.location_description":
		if e.complexity.VehicleLocationHis.LocationDescription == nil {
			break
		}

		return e.complexity.VehicleLocationHis.LocationDescription(childComplexity), true

	case "vehicle_location_his.mileage":
		if e.complexity.VehicleLocationHis.Mileage == nil {
			break
		}

		return e.complexity.VehicleLocationHis.Mileage(childComplexity), true

	case "vehicle_location_his.road_name":
		if e.complexity.VehicleLocationHis.RoadName == nil {
			break
		}

		return e.complexity.VehicleLocationHis.RoadName(childComplexity), true

	case "vehicle_location_his.sim_number":
		if e.complexity.VehicleLocationHis.SimNumber == nil {
			break
		}

		return e.complexity.VehicleLocationHis.SimNumber(childComplexity), true

	case "vehicle_location_his.speed_limit_threshold":
		if e.complexity.VehicleLocationHis.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationHis.SpeedLimitThreshold(childComplexity), true

	case "vehicle_location_his.star_count":
		if e.complexity.VehicleLocationHis.StarCount == nil {
			break
		}

		return e.complexity.VehicleLocationHis.StarCount(childComplexity), true

	case "vehicle_location_his.star_status":
		if e.complexity.VehicleLocationHis.StarStatus == nil {
			break
		}

		return e.complexity.VehicleLocationHis.StarStatus(childComplexity), true

	case "vehicle_location_his.supervision_photo_id":
		if e.complexity.VehicleLocationHis.SupervisionPhotoID == nil {
			break
		}

		return e.complexity.VehicleLocationHis.SupervisionPhotoID(childComplexity), true

	case "vehicle_location_his.tachograph_speed":
		if e.complexity.VehicleLocationHis.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHis.TachographSpeed(childComplexity), true

	case "vehicle_location_his.vehicle_id":
		if e.complexity.VehicleLocationHis.VehicleID == nil {
			break
		}

		return e.complexity.VehicleLocationHis.VehicleID(childComplexity), true

	case "vehicle_location_his.vehicle_status":
		if e.complexity.VehicleLocationHis.VehicleStatus == nil {
			break
		}

		return e.complexity.VehicleLocationHis.VehicleStatus(childComplexity), true

	case "vehicle_location_his_aggregate.aggregate":
		if e.complexity.VehicleLocationHisAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VehicleLocationHisAggregate.Aggregate(childComplexity), true

	case "vehicle_location_his_aggregate.nodes":
		if e.complexity.VehicleLocationHisAggregate.Nodes == nil {
			break
		}

		return e.complexity.VehicleLocationHisAggregate.Nodes(childComplexity), true

	case "vehicle_location_his_aggregate_fields.avg":
		if e.complexity.VehicleLocationHisAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VehicleLocationHisAggregateFields.Avg(childComplexity), true

	case "vehicle_location_his_aggregate_fields.count":
		if e.complexity.VehicleLocationHisAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_vehicle_location_his_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.VehicleLocationHisAggregateFields.Count(childComplexity, args["columns"].([]model.VehicleLocationHisSelectColumn), args["distinct"].(*bool)), true

	case "vehicle_location_his_aggregate_fields.max":
		if e.complexity.VehicleLocationHisAggregateFields.Max == nil {
			break
		}

		return e.complexity.VehicleLocationHisAggregateFields.Max(childComplexity), true

	case "vehicle_location_his_aggregate_fields.min":
		if e.complexity.VehicleLocationHisAggregateFields.Min == nil {
			break
		}

		return e.complexity.VehicleLocationHisAggregateFields.Min(childComplexity), true

	case "vehicle_location_his_aggregate_fields.stddev":
		if e.complexity.VehicleLocationHisAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VehicleLocationHisAggregateFields.Stddev(childComplexity), true

	case "vehicle_location_his_aggregate_fields.stddev_pop":
		if e.complexity.VehicleLocationHisAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VehicleLocationHisAggregateFields.StddevPop(childComplexity), true

	case "vehicle_location_his_aggregate_fields.stddev_samp":
		if e.complexity.VehicleLocationHisAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VehicleLocationHisAggregateFields.StddevSamp(childComplexity), true

	case "vehicle_location_his_aggregate_fields.sum":
		if e.complexity.VehicleLocationHisAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VehicleLocationHisAggregateFields.Sum(childComplexity), true

	case "vehicle_location_his_aggregate_fields.var_pop":
		if e.complexity.VehicleLocationHisAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VehicleLocationHisAggregateFields.VarPop(childComplexity), true

	case "vehicle_location_his_aggregate_fields.var_samp":
		if e.complexity.VehicleLocationHisAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VehicleLocationHisAggregateFields.VarSamp(childComplexity), true

	case "vehicle_location_his_aggregate_fields.variance":
		if e.complexity.VehicleLocationHisAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VehicleLocationHisAggregateFields.Variance(childComplexity), true

	case "vehicle_location_his_avg_fields.gps_speed":
		if e.complexity.VehicleLocationHisAvgFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisAvgFields.GpsSpeed(childComplexity), true

	case "vehicle_location_his_avg_fields.id":
		if e.complexity.VehicleLocationHisAvgFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationHisAvgFields.ID(childComplexity), true

	case "vehicle_location_his_avg_fields.speed_limit_threshold":
		if e.complexity.VehicleLocationHisAvgFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationHisAvgFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_location_his_avg_fields.tachograph_speed":
		if e.complexity.VehicleLocationHisAvgFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisAvgFields.TachographSpeed(childComplexity), true

	case "vehicle_location_his_max_fields.acceleration":
		if e.complexity.VehicleLocationHisMaxFields.Acceleration == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.Acceleration(childComplexity), true

	case "vehicle_location_his_max_fields.alarm_content":
		if e.complexity.VehicleLocationHisMaxFields.AlarmContent == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.AlarmContent(childComplexity), true

	case "vehicle_location_his_max_fields.alititude":
		if e.complexity.VehicleLocationHisMaxFields.Alititude == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.Alititude(childComplexity), true

	case "vehicle_location_his_max_fields.direction":
		if e.complexity.VehicleLocationHisMaxFields.Direction == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.Direction(childComplexity), true

	case "vehicle_location_his_max_fields.district_id":
		if e.complexity.VehicleLocationHisMaxFields.DistrictID == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.DistrictID(childComplexity), true

	case "vehicle_location_his_max_fields.driver_id":
		if e.complexity.VehicleLocationHisMaxFields.DriverID == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.DriverID(childComplexity), true

	case "vehicle_location_his_max_fields.enterprise_id":
		if e.complexity.VehicleLocationHisMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.EnterpriseID(childComplexity), true

	case "vehicle_location_his_max_fields.gps_speed":
		if e.complexity.VehicleLocationHisMaxFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.GpsSpeed(childComplexity), true

	case "vehicle_location_his_max_fields.id":
		if e.complexity.VehicleLocationHisMaxFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.ID(childComplexity), true

	case "vehicle_location_his_max_fields.imei":
		if e.complexity.VehicleLocationHisMaxFields.Imei == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.Imei(childComplexity), true

	case "vehicle_location_his_max_fields.locate_time":
		if e.complexity.VehicleLocationHisMaxFields.LocateTime == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.LocateTime(childComplexity), true

	case "vehicle_location_his_max_fields.location_description":
		if e.complexity.VehicleLocationHisMaxFields.LocationDescription == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.LocationDescription(childComplexity), true

	case "vehicle_location_his_max_fields.mileage":
		if e.complexity.VehicleLocationHisMaxFields.Mileage == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.Mileage(childComplexity), true

	case "vehicle_location_his_max_fields.road_name":
		if e.complexity.VehicleLocationHisMaxFields.RoadName == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.RoadName(childComplexity), true

	case "vehicle_location_his_max_fields.sim_number":
		if e.complexity.VehicleLocationHisMaxFields.SimNumber == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.SimNumber(childComplexity), true

	case "vehicle_location_his_max_fields.speed_limit_threshold":
		if e.complexity.VehicleLocationHisMaxFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_location_his_max_fields.star_count":
		if e.complexity.VehicleLocationHisMaxFields.StarCount == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.StarCount(childComplexity), true

	case "vehicle_location_his_max_fields.star_status":
		if e.complexity.VehicleLocationHisMaxFields.StarStatus == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.StarStatus(childComplexity), true

	case "vehicle_location_his_max_fields.supervision_photo_id":
		if e.complexity.VehicleLocationHisMaxFields.SupervisionPhotoID == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.SupervisionPhotoID(childComplexity), true

	case "vehicle_location_his_max_fields.tachograph_speed":
		if e.complexity.VehicleLocationHisMaxFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.TachographSpeed(childComplexity), true

	case "vehicle_location_his_max_fields.vehicle_id":
		if e.complexity.VehicleLocationHisMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.VehicleID(childComplexity), true

	case "vehicle_location_his_max_fields.vehicle_status":
		if e.complexity.VehicleLocationHisMaxFields.VehicleStatus == nil {
			break
		}

		return e.complexity.VehicleLocationHisMaxFields.VehicleStatus(childComplexity), true

	case "vehicle_location_his_min_fields.acceleration":
		if e.complexity.VehicleLocationHisMinFields.Acceleration == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.Acceleration(childComplexity), true

	case "vehicle_location_his_min_fields.alarm_content":
		if e.complexity.VehicleLocationHisMinFields.AlarmContent == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.AlarmContent(childComplexity), true

	case "vehicle_location_his_min_fields.alititude":
		if e.complexity.VehicleLocationHisMinFields.Alititude == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.Alititude(childComplexity), true

	case "vehicle_location_his_min_fields.direction":
		if e.complexity.VehicleLocationHisMinFields.Direction == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.Direction(childComplexity), true

	case "vehicle_location_his_min_fields.district_id":
		if e.complexity.VehicleLocationHisMinFields.DistrictID == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.DistrictID(childComplexity), true

	case "vehicle_location_his_min_fields.driver_id":
		if e.complexity.VehicleLocationHisMinFields.DriverID == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.DriverID(childComplexity), true

	case "vehicle_location_his_min_fields.enterprise_id":
		if e.complexity.VehicleLocationHisMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.EnterpriseID(childComplexity), true

	case "vehicle_location_his_min_fields.gps_speed":
		if e.complexity.VehicleLocationHisMinFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.GpsSpeed(childComplexity), true

	case "vehicle_location_his_min_fields.id":
		if e.complexity.VehicleLocationHisMinFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.ID(childComplexity), true

	case "vehicle_location_his_min_fields.imei":
		if e.complexity.VehicleLocationHisMinFields.Imei == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.Imei(childComplexity), true

	case "vehicle_location_his_min_fields.locate_time":
		if e.complexity.VehicleLocationHisMinFields.LocateTime == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.LocateTime(childComplexity), true

	case "vehicle_location_his_min_fields.location_description":
		if e.complexity.VehicleLocationHisMinFields.LocationDescription == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.LocationDescription(childComplexity), true

	case "vehicle_location_his_min_fields.mileage":
		if e.complexity.VehicleLocationHisMinFields.Mileage == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.Mileage(childComplexity), true

	case "vehicle_location_his_min_fields.road_name":
		if e.complexity.VehicleLocationHisMinFields.RoadName == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.RoadName(childComplexity), true

	case "vehicle_location_his_min_fields.sim_number":
		if e.complexity.VehicleLocationHisMinFields.SimNumber == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.SimNumber(childComplexity), true

	case "vehicle_location_his_min_fields.speed_limit_threshold":
		if e.complexity.VehicleLocationHisMinFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_location_his_min_fields.star_count":
		if e.complexity.VehicleLocationHisMinFields.StarCount == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.StarCount(childComplexity), true

	case "vehicle_location_his_min_fields.star_status":
		if e.complexity.VehicleLocationHisMinFields.StarStatus == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.StarStatus(childComplexity), true

	case "vehicle_location_his_min_fields.supervision_photo_id":
		if e.complexity.VehicleLocationHisMinFields.SupervisionPhotoID == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.SupervisionPhotoID(childComplexity), true

	case "vehicle_location_his_min_fields.tachograph_speed":
		if e.complexity.VehicleLocationHisMinFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.TachographSpeed(childComplexity), true

	case "vehicle_location_his_min_fields.vehicle_id":
		if e.complexity.VehicleLocationHisMinFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.VehicleID(childComplexity), true

	case "vehicle_location_his_min_fields.vehicle_status":
		if e.complexity.VehicleLocationHisMinFields.VehicleStatus == nil {
			break
		}

		return e.complexity.VehicleLocationHisMinFields.VehicleStatus(childComplexity), true

	case "vehicle_location_his_mutation_response.affected_rows":
		if e.complexity.VehicleLocationHisMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VehicleLocationHisMutationResponse.AffectedRows(childComplexity), true

	case "vehicle_location_his_mutation_response.returning":
		if e.complexity.VehicleLocationHisMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VehicleLocationHisMutationResponse.Returning(childComplexity), true

	case "vehicle_location_his_stddev_fields.gps_speed":
		if e.complexity.VehicleLocationHisStddevFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisStddevFields.GpsSpeed(childComplexity), true

	case "vehicle_location_his_stddev_fields.id":
		if e.complexity.VehicleLocationHisStddevFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationHisStddevFields.ID(childComplexity), true

	case "vehicle_location_his_stddev_fields.speed_limit_threshold":
		if e.complexity.VehicleLocationHisStddevFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationHisStddevFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_location_his_stddev_fields.tachograph_speed":
		if e.complexity.VehicleLocationHisStddevFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisStddevFields.TachographSpeed(childComplexity), true

	case "vehicle_location_his_stddev_pop_fields.gps_speed":
		if e.complexity.VehicleLocationHisStddevPopFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisStddevPopFields.GpsSpeed(childComplexity), true

	case "vehicle_location_his_stddev_pop_fields.id":
		if e.complexity.VehicleLocationHisStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationHisStddevPopFields.ID(childComplexity), true

	case "vehicle_location_his_stddev_pop_fields.speed_limit_threshold":
		if e.complexity.VehicleLocationHisStddevPopFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationHisStddevPopFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_location_his_stddev_pop_fields.tachograph_speed":
		if e.complexity.VehicleLocationHisStddevPopFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisStddevPopFields.TachographSpeed(childComplexity), true

	case "vehicle_location_his_stddev_samp_fields.gps_speed":
		if e.complexity.VehicleLocationHisStddevSampFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisStddevSampFields.GpsSpeed(childComplexity), true

	case "vehicle_location_his_stddev_samp_fields.id":
		if e.complexity.VehicleLocationHisStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationHisStddevSampFields.ID(childComplexity), true

	case "vehicle_location_his_stddev_samp_fields.speed_limit_threshold":
		if e.complexity.VehicleLocationHisStddevSampFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationHisStddevSampFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_location_his_stddev_samp_fields.tachograph_speed":
		if e.complexity.VehicleLocationHisStddevSampFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisStddevSampFields.TachographSpeed(childComplexity), true

	case "vehicle_location_his_sum_fields.gps_speed":
		if e.complexity.VehicleLocationHisSumFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisSumFields.GpsSpeed(childComplexity), true

	case "vehicle_location_his_sum_fields.id":
		if e.complexity.VehicleLocationHisSumFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationHisSumFields.ID(childComplexity), true

	case "vehicle_location_his_sum_fields.speed_limit_threshold":
		if e.complexity.VehicleLocationHisSumFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationHisSumFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_location_his_sum_fields.tachograph_speed":
		if e.complexity.VehicleLocationHisSumFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisSumFields.TachographSpeed(childComplexity), true

	case "vehicle_location_his_var_pop_fields.gps_speed":
		if e.complexity.VehicleLocationHisVarPopFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisVarPopFields.GpsSpeed(childComplexity), true

	case "vehicle_location_his_var_pop_fields.id":
		if e.complexity.VehicleLocationHisVarPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationHisVarPopFields.ID(childComplexity), true

	case "vehicle_location_his_var_pop_fields.speed_limit_threshold":
		if e.complexity.VehicleLocationHisVarPopFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationHisVarPopFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_location_his_var_pop_fields.tachograph_speed":
		if e.complexity.VehicleLocationHisVarPopFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisVarPopFields.TachographSpeed(childComplexity), true

	case "vehicle_location_his_var_samp_fields.gps_speed":
		if e.complexity.VehicleLocationHisVarSampFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisVarSampFields.GpsSpeed(childComplexity), true

	case "vehicle_location_his_var_samp_fields.id":
		if e.complexity.VehicleLocationHisVarSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationHisVarSampFields.ID(childComplexity), true

	case "vehicle_location_his_var_samp_fields.speed_limit_threshold":
		if e.complexity.VehicleLocationHisVarSampFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationHisVarSampFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_location_his_var_samp_fields.tachograph_speed":
		if e.complexity.VehicleLocationHisVarSampFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisVarSampFields.TachographSpeed(childComplexity), true

	case "vehicle_location_his_variance_fields.gps_speed":
		if e.complexity.VehicleLocationHisVarianceFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisVarianceFields.GpsSpeed(childComplexity), true

	case "vehicle_location_his_variance_fields.id":
		if e.complexity.VehicleLocationHisVarianceFields.ID == nil {
			break
		}

		return e.complexity.VehicleLocationHisVarianceFields.ID(childComplexity), true

	case "vehicle_location_his_variance_fields.speed_limit_threshold":
		if e.complexity.VehicleLocationHisVarianceFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleLocationHisVarianceFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_location_his_variance_fields.tachograph_speed":
		if e.complexity.VehicleLocationHisVarianceFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleLocationHisVarianceFields.TachographSpeed(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/generate.graphqls", Input: `
scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""mutation root"""
type Mutation {
  """
  delete data from the table: "vehicle_location_his"
  """
  delete_vehicle_location_his(
    """filter the rows which have to be deleted"""
    where: vehicle_location_his_bool_exp!
  ): vehicle_location_his_mutation_response

  """
  delete single row from the table: "vehicle_location_his"
  """
  delete_vehicle_location_his_by_pk(
    """ID"""
    id: bigint!
  ): vehicle_location_his

  """
  insert data into the table: "vehicle_location_his"
  """
  insert_vehicle_location_his(
    """the rows to be inserted"""
    objects: [vehicle_location_his_insert_input!]!

    """on conflict condition"""
    on_conflict: vehicle_location_his_on_conflict
  ): vehicle_location_his_mutation_response

  """
  insert a single row into the table: "vehicle_location_his"
  """
  insert_vehicle_location_his_one(
    """the row to be inserted"""
    object: vehicle_location_his_insert_input!

    """on conflict condition"""
    on_conflict: vehicle_location_his_on_conflict
  ): vehicle_location_his

  """
  update data of the table: "vehicle_location_his"
  """
  update_vehicle_location_his(
    """increments the integer columns with given value of the filtered values"""
    _inc: vehicle_location_his_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: vehicle_location_his_set_input

    """filter the rows which have to be updated"""
    where: vehicle_location_his_bool_exp!
  ): vehicle_location_his_mutation_response

  """
  update single row of the table: "vehicle_location_his"
  """
  update_vehicle_location_his_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: vehicle_location_his_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: vehicle_location_his_set_input
    pk_columns: vehicle_location_his_pk_columns_input!
  ): vehicle_location_his
}

scalar numeric

"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

scalar point

"""
expression to compare columns of type point. All fields are combined with logical 'AND'.
"""
input point_comparison_exp {
  _eq: point
  _gt: point
  _gte: point
  _in: [point!]
  _is_null: Boolean
  _lt: point
  _lte: point
  _neq: point
  _nin: [point!]
}

"""query root"""
type Query {
 t: Int
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "vehicle_location_his"
  """
  vehicle_location_his(
    """distinct select on columns"""
    distinct_on: [vehicle_location_his_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vehicle_location_his_order_by!]

    """filter the rows returned"""
    where: vehicle_location_his_bool_exp
  ): [vehicle_location_his!]!

  """
  fetch aggregated fields from the table: "vehicle_location_his"
  """
  vehicle_location_his_aggregate(
    """distinct select on columns"""
    distinct_on: [vehicle_location_his_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vehicle_location_his_order_by!]

    """filter the rows returned"""
    where: vehicle_location_his_bool_exp
  ): vehicle_location_his_aggregate!

  """
  fetch data from the table: "vehicle_location_his" using primary key columns
  """
  vehicle_location_his_by_pk(
    """ID"""
    id: bigint!
  ): vehicle_location_his
}

scalar timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
车辆位置历史表


columns and relationships of "vehicle_location_his"

"""
type vehicle_location_his {
  """加速度"""
  acceleration: String

  """报警内容"""
  alarm_content: String

  """海拔"""
  alititude: String

  """坐标"""
  coordinate: point

  """纠偏后坐标"""
  correct_coordinate: point

  """方向"""
  direction: String

  """区域ID"""
  district_id: String

  """驾驶员ID"""
  driver_id: String

  """企业ID"""
  enterprise_id: String

  """GPS速度"""
  gps_speed: numeric

  """ID"""
  id: bigint!

  """终端IMEI"""
  imei: String

  """是否定位"""
  is_locate: Boolean

  """定位时间"""
  locate_time: timestamptz

  """位置描述"""
  location_description: String

  """里程"""
  mileage: String

  """道路名称"""
  road_name: String

  """SIM卡号"""
  sim_number: String

  """限速阀值"""
  speed_limit_threshold: numeric

  """星数"""
  star_count: String

  """星况"""
  star_status: String

  """监控图片ID"""
  supervision_photo_id: String

  """行驶记录仪速度"""
  tachograph_speed: numeric

  """车辆ID"""
  vehicle_id: String!

  """车辆状态"""
  vehicle_status: String
}

"""
aggregated selection of "vehicle_location_his"
"""
type vehicle_location_his_aggregate {
  aggregate: vehicle_location_his_aggregate_fields
  nodes: [vehicle_location_his!]!
}

"""
aggregate fields of "vehicle_location_his"
"""
type vehicle_location_his_aggregate_fields {
  avg: vehicle_location_his_avg_fields
  count(columns: [vehicle_location_his_select_column!], distinct: Boolean): Int
  max: vehicle_location_his_max_fields
  min: vehicle_location_his_min_fields
  stddev: vehicle_location_his_stddev_fields
  stddev_pop: vehicle_location_his_stddev_pop_fields
  stddev_samp: vehicle_location_his_stddev_samp_fields
  sum: vehicle_location_his_sum_fields
  var_pop: vehicle_location_his_var_pop_fields
  var_samp: vehicle_location_his_var_samp_fields
  variance: vehicle_location_his_variance_fields
}

"""
order by aggregate values of table "vehicle_location_his"
"""
input vehicle_location_his_aggregate_order_by {
  avg: vehicle_location_his_avg_order_by
  count: order_by
  max: vehicle_location_his_max_order_by
  min: vehicle_location_his_min_order_by
  stddev: vehicle_location_his_stddev_order_by
  stddev_pop: vehicle_location_his_stddev_pop_order_by
  stddev_samp: vehicle_location_his_stddev_samp_order_by
  sum: vehicle_location_his_sum_order_by
  var_pop: vehicle_location_his_var_pop_order_by
  var_samp: vehicle_location_his_var_samp_order_by
  variance: vehicle_location_his_variance_order_by
}

"""
input type for inserting array relation for remote table "vehicle_location_his"
"""
input vehicle_location_his_arr_rel_insert_input {
  data: [vehicle_location_his_insert_input!]!
  on_conflict: vehicle_location_his_on_conflict
}

"""aggregate avg on columns"""
type vehicle_location_his_avg_fields {
  gps_speed: Float
  id: Float
  speed_limit_threshold: Float
  tachograph_speed: Float
}

"""
order by avg() on columns of table "vehicle_location_his"
"""
input vehicle_location_his_avg_order_by {
  gps_speed: order_by
  id: order_by
  speed_limit_threshold: order_by
  tachograph_speed: order_by
}

"""
Boolean expression to filter rows from the table "vehicle_location_his". All fields are combined with a logical 'AND'.
"""
input vehicle_location_his_bool_exp {
  _and: [vehicle_location_his_bool_exp]
  _not: vehicle_location_his_bool_exp
  _or: [vehicle_location_his_bool_exp]
  acceleration: String_comparison_exp
  alarm_content: String_comparison_exp
  alititude: String_comparison_exp
  coordinate: point_comparison_exp
  correct_coordinate: point_comparison_exp
  direction: String_comparison_exp
  district_id: String_comparison_exp
  driver_id: String_comparison_exp
  enterprise_id: String_comparison_exp
  gps_speed: numeric_comparison_exp
  id: bigint_comparison_exp
  imei: String_comparison_exp
  is_locate: Boolean_comparison_exp
  locate_time: timestamptz_comparison_exp
  location_description: String_comparison_exp
  mileage: String_comparison_exp
  road_name: String_comparison_exp
  sim_number: String_comparison_exp
  speed_limit_threshold: numeric_comparison_exp
  star_count: String_comparison_exp
  star_status: String_comparison_exp
  supervision_photo_id: String_comparison_exp
  tachograph_speed: numeric_comparison_exp
  vehicle_id: String_comparison_exp
  vehicle_status: String_comparison_exp
}

"""
unique or primary key constraints on table "vehicle_location_his"
"""
enum vehicle_location_his_constraint {
  """unique or primary key constraint"""
  vehicle_location_his_pkey
}

"""
input type for incrementing integer column in table "vehicle_location_his"
"""
input vehicle_location_his_inc_input {
  gps_speed: numeric
  id: bigint
  speed_limit_threshold: numeric
  tachograph_speed: numeric
}

"""
input type for inserting data into table "vehicle_location_his"
"""
input vehicle_location_his_insert_input {
  acceleration: String
  alarm_content: String
  alititude: String
  coordinate: point
  correct_coordinate: point
  direction: String
  district_id: String
  driver_id: String
  enterprise_id: String
  gps_speed: numeric
  id: bigint
  imei: String
  is_locate: Boolean
  locate_time: timestamptz
  location_description: String
  mileage: String
  road_name: String
  sim_number: String
  speed_limit_threshold: numeric
  star_count: String
  star_status: String
  supervision_photo_id: String
  tachograph_speed: numeric
  vehicle_id: String
  vehicle_status: String
}

"""aggregate max on columns"""
type vehicle_location_his_max_fields {
  acceleration: String
  alarm_content: String
  alititude: String
  direction: String
  district_id: String
  driver_id: String
  enterprise_id: String
  gps_speed: numeric
  id: bigint
  imei: String
  locate_time: timestamptz
  location_description: String
  mileage: String
  road_name: String
  sim_number: String
  speed_limit_threshold: numeric
  star_count: String
  star_status: String
  supervision_photo_id: String
  tachograph_speed: numeric
  vehicle_id: String
  vehicle_status: String
}

"""
order by max() on columns of table "vehicle_location_his"
"""
input vehicle_location_his_max_order_by {
  acceleration: order_by
  alarm_content: order_by
  alititude: order_by
  direction: order_by
  district_id: order_by
  driver_id: order_by
  enterprise_id: order_by
  gps_speed: order_by
  id: order_by
  imei: order_by
  locate_time: order_by
  location_description: order_by
  mileage: order_by
  road_name: order_by
  sim_number: order_by
  speed_limit_threshold: order_by
  star_count: order_by
  star_status: order_by
  supervision_photo_id: order_by
  tachograph_speed: order_by
  vehicle_id: order_by
  vehicle_status: order_by
}

"""aggregate min on columns"""
type vehicle_location_his_min_fields {
  acceleration: String
  alarm_content: String
  alititude: String
  direction: String
  district_id: String
  driver_id: String
  enterprise_id: String
  gps_speed: numeric
  id: bigint
  imei: String
  locate_time: timestamptz
  location_description: String
  mileage: String
  road_name: String
  sim_number: String
  speed_limit_threshold: numeric
  star_count: String
  star_status: String
  supervision_photo_id: String
  tachograph_speed: numeric
  vehicle_id: String
  vehicle_status: String
}

"""
order by min() on columns of table "vehicle_location_his"
"""
input vehicle_location_his_min_order_by {
  acceleration: order_by
  alarm_content: order_by
  alititude: order_by
  direction: order_by
  district_id: order_by
  driver_id: order_by
  enterprise_id: order_by
  gps_speed: order_by
  id: order_by
  imei: order_by
  locate_time: order_by
  location_description: order_by
  mileage: order_by
  road_name: order_by
  sim_number: order_by
  speed_limit_threshold: order_by
  star_count: order_by
  star_status: order_by
  supervision_photo_id: order_by
  tachograph_speed: order_by
  vehicle_id: order_by
  vehicle_status: order_by
}

"""
response of any mutation on the table "vehicle_location_his"
"""
type vehicle_location_his_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [vehicle_location_his!]!
}

"""
input type for inserting object relation for remote table "vehicle_location_his"
"""
input vehicle_location_his_obj_rel_insert_input {
  data: vehicle_location_his_insert_input!
  on_conflict: vehicle_location_his_on_conflict
}

"""
on conflict condition type for table "vehicle_location_his"
"""
input vehicle_location_his_on_conflict {
  constraint: vehicle_location_his_constraint!
  update_columns: [vehicle_location_his_update_column!]!
  where: vehicle_location_his_bool_exp
}

"""
ordering options when selecting data from "vehicle_location_his"
"""
input vehicle_location_his_order_by {
  acceleration: order_by
  alarm_content: order_by
  alititude: order_by
  coordinate: order_by
  correct_coordinate: order_by
  direction: order_by
  district_id: order_by
  driver_id: order_by
  enterprise_id: order_by
  gps_speed: order_by
  id: order_by
  imei: order_by
  is_locate: order_by
  locate_time: order_by
  location_description: order_by
  mileage: order_by
  road_name: order_by
  sim_number: order_by
  speed_limit_threshold: order_by
  star_count: order_by
  star_status: order_by
  supervision_photo_id: order_by
  tachograph_speed: order_by
  vehicle_id: order_by
  vehicle_status: order_by
}

"""
primary key columns input for table: "vehicle_location_his"
"""
input vehicle_location_his_pk_columns_input {
  """ID"""
  id: bigint!
}

"""
select columns of table "vehicle_location_his"
"""
enum vehicle_location_his_select_column {
  """column name"""
  acceleration

  """column name"""
  alarm_content

  """column name"""
  alititude

  """column name"""
  coordinate

  """column name"""
  correct_coordinate

  """column name"""
  direction

  """column name"""
  district_id

  """column name"""
  driver_id

  """column name"""
  enterprise_id

  """column name"""
  gps_speed

  """column name"""
  id

  """column name"""
  imei

  """column name"""
  is_locate

  """column name"""
  locate_time

  """column name"""
  location_description

  """column name"""
  mileage

  """column name"""
  road_name

  """column name"""
  sim_number

  """column name"""
  speed_limit_threshold

  """column name"""
  star_count

  """column name"""
  star_status

  """column name"""
  supervision_photo_id

  """column name"""
  tachograph_speed

  """column name"""
  vehicle_id

  """column name"""
  vehicle_status
}

"""
input type for updating data in table "vehicle_location_his"
"""
input vehicle_location_his_set_input {
  acceleration: String
  alarm_content: String
  alititude: String
  coordinate: point
  correct_coordinate: point
  direction: String
  district_id: String
  driver_id: String
  enterprise_id: String
  gps_speed: numeric
  id: bigint
  imei: String
  is_locate: Boolean
  locate_time: timestamptz
  location_description: String
  mileage: String
  road_name: String
  sim_number: String
  speed_limit_threshold: numeric
  star_count: String
  star_status: String
  supervision_photo_id: String
  tachograph_speed: numeric
  vehicle_id: String
  vehicle_status: String
}

"""aggregate stddev on columns"""
type vehicle_location_his_stddev_fields {
  gps_speed: Float
  id: Float
  speed_limit_threshold: Float
  tachograph_speed: Float
}

"""
order by stddev() on columns of table "vehicle_location_his"
"""
input vehicle_location_his_stddev_order_by {
  gps_speed: order_by
  id: order_by
  speed_limit_threshold: order_by
  tachograph_speed: order_by
}

"""aggregate stddev_pop on columns"""
type vehicle_location_his_stddev_pop_fields {
  gps_speed: Float
  id: Float
  speed_limit_threshold: Float
  tachograph_speed: Float
}

"""
order by stddev_pop() on columns of table "vehicle_location_his"
"""
input vehicle_location_his_stddev_pop_order_by {
  gps_speed: order_by
  id: order_by
  speed_limit_threshold: order_by
  tachograph_speed: order_by
}

"""aggregate stddev_samp on columns"""
type vehicle_location_his_stddev_samp_fields {
  gps_speed: Float
  id: Float
  speed_limit_threshold: Float
  tachograph_speed: Float
}

"""
order by stddev_samp() on columns of table "vehicle_location_his"
"""
input vehicle_location_his_stddev_samp_order_by {
  gps_speed: order_by
  id: order_by
  speed_limit_threshold: order_by
  tachograph_speed: order_by
}

"""aggregate sum on columns"""
type vehicle_location_his_sum_fields {
  gps_speed: numeric
  id: bigint
  speed_limit_threshold: numeric
  tachograph_speed: numeric
}

"""
order by sum() on columns of table "vehicle_location_his"
"""
input vehicle_location_his_sum_order_by {
  gps_speed: order_by
  id: order_by
  speed_limit_threshold: order_by
  tachograph_speed: order_by
}

"""
update columns of table "vehicle_location_his"
"""
enum vehicle_location_his_update_column {
  """column name"""
  acceleration

  """column name"""
  alarm_content

  """column name"""
  alititude

  """column name"""
  coordinate

  """column name"""
  correct_coordinate

  """column name"""
  direction

  """column name"""
  district_id

  """column name"""
  driver_id

  """column name"""
  enterprise_id

  """column name"""
  gps_speed

  """column name"""
  id

  """column name"""
  imei

  """column name"""
  is_locate

  """column name"""
  locate_time

  """column name"""
  location_description

  """column name"""
  mileage

  """column name"""
  road_name

  """column name"""
  sim_number

  """column name"""
  speed_limit_threshold

  """column name"""
  star_count

  """column name"""
  star_status

  """column name"""
  supervision_photo_id

  """column name"""
  tachograph_speed

  """column name"""
  vehicle_id

  """column name"""
  vehicle_status
}

"""aggregate var_pop on columns"""
type vehicle_location_his_var_pop_fields {
  gps_speed: Float
  id: Float
  speed_limit_threshold: Float
  tachograph_speed: Float
}

"""
order by var_pop() on columns of table "vehicle_location_his"
"""
input vehicle_location_his_var_pop_order_by {
  gps_speed: order_by
  id: order_by
  speed_limit_threshold: order_by
  tachograph_speed: order_by
}

"""aggregate var_samp on columns"""
type vehicle_location_his_var_samp_fields {
  gps_speed: Float
  id: Float
  speed_limit_threshold: Float
  tachograph_speed: Float
}

"""
order by var_samp() on columns of table "vehicle_location_his"
"""
input vehicle_location_his_var_samp_order_by {
  gps_speed: order_by
  id: order_by
  speed_limit_threshold: order_by
  tachograph_speed: order_by
}

"""aggregate variance on columns"""
type vehicle_location_his_variance_fields {
  gps_speed: Float
  id: Float
  speed_limit_threshold: Float
  tachograph_speed: Float
}

"""
order by variance() on columns of table "vehicle_location_his"
"""
input vehicle_location_his_variance_order_by {
  gps_speed: order_by
  id: order_by
  speed_limit_threshold: order_by
  tachograph_speed: order_by
}

`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_delete_vehicle_location_his_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleLocationHisBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNvehicle_location_his_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_location_his_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_location_his_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VehicleLocationHisInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNvehicle_location_his_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.VehicleLocationHisOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOvehicle_location_his_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_location_his_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleLocationHisInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNvehicle_location_his_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.VehicleLocationHisOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOvehicle_location_his_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_location_his_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleLocationHisIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOvehicle_location_his_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleLocationHisSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOvehicle_location_his_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleLocationHisBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNvehicle_location_his_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_location_his_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleLocationHisIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOvehicle_location_his_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleLocationHisSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOvehicle_location_his_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleLocationHisPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNvehicle_location_his_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field_subscription_root_vehicle_location_his_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleLocationHisSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_location_his_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleLocationHisOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_location_his_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleLocationHisBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_location_his_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_subscription_root_vehicle_location_his_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleLocationHisSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_location_his_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleLocationHisOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_location_his_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleLocationHisBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_location_his_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_subscription_root_vehicle_location_his_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_vehicle_location_his_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleLocationHisSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOvehicle_location_his_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Mutation_delete_vehicle_location_his(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_location_his_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleLocationHis(rctx, args["where"].(model.VehicleLocationHisBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_location_his_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_location_his_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_location_his_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleLocationHisByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleLocationHis)
	fc.Result = res
	return ec.marshalOvehicle_location_his2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmodelᚐVehicleLocationHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_location_his(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_location_his_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleLocationHis(rctx, args["objects"].([]*model.VehicleLocationHisInsertInput), args["on_conflict"].(*model.VehicleLocationHisOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_location_his_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_location_his_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_location_his_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleLocationHisOne(rctx, args["object"].(model.VehicleLocationHisInsertInput), args["on_conflict"].(*model.VehicleLocationHisOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleLocationHis)
	fc.Result = res
	return ec.marshalOvehicle_location_his2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmodelᚐVehicleLocationHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_location_his(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_location_his_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleLocationHis(rctx, args["_inc"].(*model.VehicleLocationHisIncInput), args["_set"].(*model.VehicleLocationHisSetInput), args["where"].(model.VehicleLocationHisBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_location_his_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_location_his_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_location_his_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleLocationHisByPk(rctx, args["_inc"].(*model.VehicleLocationHisIncInput), args["_set"].(*model.VehicleLocationHisSetInput), args["pk_columns"].(model.VehicleLocationHisPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleLocationHis)
	fc.Result = res
	return ec.marshalOvehicle_location_his2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmodelᚐVehicleLocationHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_t(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().T(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_root_vehicle_location_his(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionRoot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription_root",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_subscription_root_vehicle_location_his_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleLocationHis, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleLocationHis)
	fc.Result = res
	return ec.marshalNvehicle_location_his2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmodelᚐVehicleLocationHisᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_root_vehicle_location_his_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionRoot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription_root",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_subscription_root_vehicle_location_his_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleLocationHisAggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisAggregate)
	fc.Result = res
	return ec.marshalNvehicle_location_his_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_root_vehicle_location_his_by_pk(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionRoot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription_root",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_subscription_root_vehicle_location_his_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleLocationHisByPk, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleLocationHis)
	fc.Result = res
	return ec.marshalOvehicle_location_his2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmodelᚐVehicleLocationHis(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_acceleration(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Acceleration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_alarm_content(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_alititude(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alititude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_coordinate(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOpoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_correct_coordinate(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CorrectCoordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOpoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_direction(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_district_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_driver_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_imei(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imei, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_is_locate(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsLocate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_locate_time(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_location_description(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_mileage(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mileage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_road_name(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_sim_number(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_star_count(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StarCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_star_status(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StarStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_supervision_photo_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_vehicle_status(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleLocationHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisAggregateFields)
	fc.Result = res
	return ec.marshalOvehicle_location_his_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleLocationHis)
	fc.Result = res
	return ec.marshalNvehicle_location_his2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmodelᚐVehicleLocationHisᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisAvgFields)
	fc.Result = res
	return ec.marshalOvehicle_location_his_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_vehicle_location_his_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisMaxFields)
	fc.Result = res
	return ec.marshalOvehicle_location_his_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisMinFields)
	fc.Result = res
	return ec.marshalOvehicle_location_his_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisStddevFields)
	fc.Result = res
	return ec.marshalOvehicle_location_his_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisStddevPopFields)
	fc.Result = res
	return ec.marshalOvehicle_location_his_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisStddevSampFields)
	fc.Result = res
	return ec.marshalOvehicle_location_his_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisSumFields)
	fc.Result = res
	return ec.marshalOvehicle_location_his_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisVarPopFields)
	fc.Result = res
	return ec.marshalOvehicle_location_his_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisVarSampFields)
	fc.Result = res
	return ec.marshalOvehicle_location_his_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleLocationHisVarianceFields)
	fc.Result = res
	return ec.marshalOvehicle_location_his_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_avg_fields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_avg_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_avg_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_max_fields_acceleration(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Acceleration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_max_fields_alarm_content(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_max_fields_alititude(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alititude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_max_fields_direction(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_max_fields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_max_fields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_max_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_max_fields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_max_fields_imei(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imei, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_max_fields_locate_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_max_fields_location_description(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_max_fields_mileage(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mileage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_max_fields_road_name(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_max_fields_sim_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_max_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_max_fields_star_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StarCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_max_fields_star_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StarStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_max_fields_supervision_photo_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_max_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_max_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_max_fields_vehicle_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_min_fields_acceleration(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Acceleration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_min_fields_alarm_content(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_min_fields_alititude(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alititude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_min_fields_direction(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_min_fields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_min_fields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_min_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_min_fields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_min_fields_imei(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imei, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_min_fields_locate_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_min_fields_location_description(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_min_fields_mileage(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mileage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_min_fields_road_name(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_min_fields_sim_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_min_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_min_fields_star_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StarCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_min_fields_star_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StarStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_min_fields_supervision_photo_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_min_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_min_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_min_fields_vehicle_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleLocationHis)
	fc.Result = res
	return ec.marshalNvehicle_location_his2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmodelᚐVehicleLocationHisᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_stddev_fields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_stddev_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_stddev_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_stddev_pop_fields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_stddev_pop_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_stddev_pop_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_stddev_samp_fields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_stddev_samp_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_stddev_samp_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_sum_fields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_sum_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_sum_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_var_pop_fields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_var_pop_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_var_pop_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_var_samp_fields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_var_samp_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_var_samp_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_variance_fields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_variance_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_location_his_variance_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleLocationHisVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_location_his_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBoolean_comparison_exp(ctx context.Context, obj interface{}) (model2.BooleanComparisonExp, error) {
	var it model2.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputString_comparison_exp(ctx context.Context, obj interface{}) (model2.StringComparisonExp, error) {
	var it model2.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputbigint_comparison_exp(ctx context.Context, obj interface{}) (model2.BigintComparisonExp, error) {
	var it model2.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnumeric_comparison_exp(ctx context.Context, obj interface{}) (model2.NumericComparisonExp, error) {
	var it model2.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOnumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOnumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputpoint_comparison_exp(ctx context.Context, obj interface{}) (model2.PointComparisonExp, error) {
	var it model2.PointComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOpoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOpoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtimestamptz_comparison_exp(ctx context.Context, obj interface{}) (model2.TimestamptzComparisonExp, error) {
	var it model2.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_his_aggregate_order_by(ctx context.Context, obj interface{}) (model.VehicleLocationHisAggregateOrderBy, error) {
	var it model.VehicleLocationHisAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOvehicle_location_his_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOvehicle_location_his_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOvehicle_location_his_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOvehicle_location_his_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOvehicle_location_his_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOvehicle_location_his_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOvehicle_location_his_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOvehicle_location_his_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOvehicle_location_his_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOvehicle_location_his_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_his_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.VehicleLocationHisArrRelInsertInput, error) {
	var it model.VehicleLocationHisArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNvehicle_location_his_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOvehicle_location_his_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_his_avg_order_by(ctx context.Context, obj interface{}) (model.VehicleLocationHisAvgOrderBy, error) {
	var it model.VehicleLocationHisAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_his_bool_exp(ctx context.Context, obj interface{}) (model.VehicleLocationHisBoolExp, error) {
	var it model.VehicleLocationHisBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOvehicle_location_his_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOvehicle_location_his_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOvehicle_location_his_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "acceleration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceleration"))
			it.Acceleration, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alititude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alititude"))
			it.Alititude, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOpoint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "correct_coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("correct_coordinate"))
			it.CorrectCoordinate, err = ec.unmarshalOpoint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "imei":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imei"))
			it.Imei, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_locate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_locate"))
			it.IsLocate, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "locate_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locate_time"))
			it.LocateTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "mileage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mileage"))
			it.Mileage, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_count"))
			it.StarCount, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_status"))
			it.StarStatus, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
			it.SupervisionPhotoID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_status"))
			it.VehicleStatus, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_his_inc_input(ctx context.Context, obj interface{}) (model.VehicleLocationHisIncInput, error) {
	var it model.VehicleLocationHisIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_his_insert_input(ctx context.Context, obj interface{}) (model.VehicleLocationHisInsertInput, error) {
	var it model.VehicleLocationHisInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "acceleration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceleration"))
			it.Acceleration, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alititude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alititude"))
			it.Alititude, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "correct_coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("correct_coordinate"))
			it.CorrectCoordinate, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "imei":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imei"))
			it.Imei, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_locate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_locate"))
			it.IsLocate, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "locate_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locate_time"))
			it.LocateTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mileage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mileage"))
			it.Mileage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_count"))
			it.StarCount, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_status"))
			it.StarStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
			it.SupervisionPhotoID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_status"))
			it.VehicleStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_his_max_order_by(ctx context.Context, obj interface{}) (model.VehicleLocationHisMaxOrderBy, error) {
	var it model.VehicleLocationHisMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "acceleration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceleration"))
			it.Acceleration, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alititude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alititude"))
			it.Alititude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "imei":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imei"))
			it.Imei, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "locate_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locate_time"))
			it.LocateTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mileage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mileage"))
			it.Mileage, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_count"))
			it.StarCount, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_status"))
			it.StarStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
			it.SupervisionPhotoID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_status"))
			it.VehicleStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_his_min_order_by(ctx context.Context, obj interface{}) (model.VehicleLocationHisMinOrderBy, error) {
	var it model.VehicleLocationHisMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "acceleration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceleration"))
			it.Acceleration, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alititude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alititude"))
			it.Alititude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "imei":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imei"))
			it.Imei, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "locate_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locate_time"))
			it.LocateTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mileage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mileage"))
			it.Mileage, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_count"))
			it.StarCount, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_status"))
			it.StarStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
			it.SupervisionPhotoID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_status"))
			it.VehicleStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_his_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.VehicleLocationHisObjRelInsertInput, error) {
	var it model.VehicleLocationHisObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNvehicle_location_his_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOvehicle_location_his_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_his_on_conflict(ctx context.Context, obj interface{}) (model.VehicleLocationHisOnConflict, error) {
	var it model.VehicleLocationHisOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNvehicle_location_his_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNvehicle_location_his_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOvehicle_location_his_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_his_order_by(ctx context.Context, obj interface{}) (model.VehicleLocationHisOrderBy, error) {
	var it model.VehicleLocationHisOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "acceleration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceleration"))
			it.Acceleration, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alititude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alititude"))
			it.Alititude, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "correct_coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("correct_coordinate"))
			it.CorrectCoordinate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "imei":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imei"))
			it.Imei, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_locate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_locate"))
			it.IsLocate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "locate_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locate_time"))
			it.LocateTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mileage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mileage"))
			it.Mileage, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_count"))
			it.StarCount, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_status"))
			it.StarStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
			it.SupervisionPhotoID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_status"))
			it.VehicleStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_his_pk_columns_input(ctx context.Context, obj interface{}) (model.VehicleLocationHisPkColumnsInput, error) {
	var it model.VehicleLocationHisPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_his_set_input(ctx context.Context, obj interface{}) (model.VehicleLocationHisSetInput, error) {
	var it model.VehicleLocationHisSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "acceleration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceleration"))
			it.Acceleration, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alititude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alititude"))
			it.Alititude, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "correct_coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("correct_coordinate"))
			it.CorrectCoordinate, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "imei":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imei"))
			it.Imei, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_locate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_locate"))
			it.IsLocate, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "locate_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locate_time"))
			it.LocateTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mileage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mileage"))
			it.Mileage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_count"))
			it.StarCount, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "star_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("star_status"))
			it.StarStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_photo_id"))
			it.SupervisionPhotoID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_status"))
			it.VehicleStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_his_stddev_order_by(ctx context.Context, obj interface{}) (model.VehicleLocationHisStddevOrderBy, error) {
	var it model.VehicleLocationHisStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_his_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.VehicleLocationHisStddevPopOrderBy, error) {
	var it model.VehicleLocationHisStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_his_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.VehicleLocationHisStddevSampOrderBy, error) {
	var it model.VehicleLocationHisStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_his_sum_order_by(ctx context.Context, obj interface{}) (model.VehicleLocationHisSumOrderBy, error) {
	var it model.VehicleLocationHisSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_his_var_pop_order_by(ctx context.Context, obj interface{}) (model.VehicleLocationHisVarPopOrderBy, error) {
	var it model.VehicleLocationHisVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_his_var_samp_order_by(ctx context.Context, obj interface{}) (model.VehicleLocationHisVarSampOrderBy, error) {
	var it model.VehicleLocationHisVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_location_his_variance_order_by(ctx context.Context, obj interface{}) (model.VehicleLocationHisVarianceOrderBy, error) {
	var it model.VehicleLocationHisVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "delete_vehicle_location_his":
			out.Values[i] = ec._Mutation_delete_vehicle_location_his(ctx, field)
		case "delete_vehicle_location_his_by_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_location_his_by_pk(ctx, field)
		case "insert_vehicle_location_his":
			out.Values[i] = ec._Mutation_insert_vehicle_location_his(ctx, field)
		case "insert_vehicle_location_his_one":
			out.Values[i] = ec._Mutation_insert_vehicle_location_his_one(ctx, field)
		case "update_vehicle_location_his":
			out.Values[i] = ec._Mutation_update_vehicle_location_his(ctx, field)
		case "update_vehicle_location_his_by_pk":
			out.Values[i] = ec._Mutation_update_vehicle_location_his_by_pk(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "t":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_t(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscription_rootImplementors = []string{"subscription_root"}

func (ec *executionContext) _subscription_root(ctx context.Context, sel ast.SelectionSet, obj *model.SubscriptionRoot) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscription_rootImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("subscription_root")
		case "vehicle_location_his":
			out.Values[i] = ec._subscription_root_vehicle_location_his(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_location_his_aggregate":
			out.Values[i] = ec._subscription_root_vehicle_location_his_aggregate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_location_his_by_pk":
			out.Values[i] = ec._subscription_root_vehicle_location_his_by_pk(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_location_hisImplementors = []string{"vehicle_location_his"}

func (ec *executionContext) _vehicle_location_his(ctx context.Context, sel ast.SelectionSet, obj *model1.VehicleLocationHis) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_location_hisImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_location_his")
		case "acceleration":
			out.Values[i] = ec._vehicle_location_his_acceleration(ctx, field, obj)
		case "alarm_content":
			out.Values[i] = ec._vehicle_location_his_alarm_content(ctx, field, obj)
		case "alititude":
			out.Values[i] = ec._vehicle_location_his_alititude(ctx, field, obj)
		case "coordinate":
			out.Values[i] = ec._vehicle_location_his_coordinate(ctx, field, obj)
		case "correct_coordinate":
			out.Values[i] = ec._vehicle_location_his_correct_coordinate(ctx, field, obj)
		case "direction":
			out.Values[i] = ec._vehicle_location_his_direction(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._vehicle_location_his_district_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._vehicle_location_his_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._vehicle_location_his_enterprise_id(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._vehicle_location_his_gps_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_location_his_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "imei":
			out.Values[i] = ec._vehicle_location_his_imei(ctx, field, obj)
		case "is_locate":
			out.Values[i] = ec._vehicle_location_his_is_locate(ctx, field, obj)
		case "locate_time":
			out.Values[i] = ec._vehicle_location_his_locate_time(ctx, field, obj)
		case "location_description":
			out.Values[i] = ec._vehicle_location_his_location_description(ctx, field, obj)
		case "mileage":
			out.Values[i] = ec._vehicle_location_his_mileage(ctx, field, obj)
		case "road_name":
			out.Values[i] = ec._vehicle_location_his_road_name(ctx, field, obj)
		case "sim_number":
			out.Values[i] = ec._vehicle_location_his_sim_number(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_location_his_speed_limit_threshold(ctx, field, obj)
		case "star_count":
			out.Values[i] = ec._vehicle_location_his_star_count(ctx, field, obj)
		case "star_status":
			out.Values[i] = ec._vehicle_location_his_star_status(ctx, field, obj)
		case "supervision_photo_id":
			out.Values[i] = ec._vehicle_location_his_supervision_photo_id(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_location_his_tachograph_speed(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._vehicle_location_his_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_status":
			out.Values[i] = ec._vehicle_location_his_vehicle_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_location_his_aggregateImplementors = []string{"vehicle_location_his_aggregate"}

func (ec *executionContext) _vehicle_location_his_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationHisAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_location_his_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_location_his_aggregate")
		case "aggregate":
			out.Values[i] = ec._vehicle_location_his_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._vehicle_location_his_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_location_his_aggregate_fieldsImplementors = []string{"vehicle_location_his_aggregate_fields"}

func (ec *executionContext) _vehicle_location_his_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationHisAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_location_his_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_location_his_aggregate_fields")
		case "avg":
			out.Values[i] = ec._vehicle_location_his_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._vehicle_location_his_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._vehicle_location_his_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._vehicle_location_his_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._vehicle_location_his_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._vehicle_location_his_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._vehicle_location_his_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._vehicle_location_his_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._vehicle_location_his_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._vehicle_location_his_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._vehicle_location_his_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_location_his_avg_fieldsImplementors = []string{"vehicle_location_his_avg_fields"}

func (ec *executionContext) _vehicle_location_his_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationHisAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_location_his_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_location_his_avg_fields")
		case "gps_speed":
			out.Values[i] = ec._vehicle_location_his_avg_fields_gps_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_location_his_avg_fields_id(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_location_his_avg_fields_speed_limit_threshold(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_location_his_avg_fields_tachograph_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_location_his_max_fieldsImplementors = []string{"vehicle_location_his_max_fields"}

func (ec *executionContext) _vehicle_location_his_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationHisMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_location_his_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_location_his_max_fields")
		case "acceleration":
			out.Values[i] = ec._vehicle_location_his_max_fields_acceleration(ctx, field, obj)
		case "alarm_content":
			out.Values[i] = ec._vehicle_location_his_max_fields_alarm_content(ctx, field, obj)
		case "alititude":
			out.Values[i] = ec._vehicle_location_his_max_fields_alititude(ctx, field, obj)
		case "direction":
			out.Values[i] = ec._vehicle_location_his_max_fields_direction(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._vehicle_location_his_max_fields_district_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._vehicle_location_his_max_fields_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._vehicle_location_his_max_fields_enterprise_id(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._vehicle_location_his_max_fields_gps_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_location_his_max_fields_id(ctx, field, obj)
		case "imei":
			out.Values[i] = ec._vehicle_location_his_max_fields_imei(ctx, field, obj)
		case "locate_time":
			out.Values[i] = ec._vehicle_location_his_max_fields_locate_time(ctx, field, obj)
		case "location_description":
			out.Values[i] = ec._vehicle_location_his_max_fields_location_description(ctx, field, obj)
		case "mileage":
			out.Values[i] = ec._vehicle_location_his_max_fields_mileage(ctx, field, obj)
		case "road_name":
			out.Values[i] = ec._vehicle_location_his_max_fields_road_name(ctx, field, obj)
		case "sim_number":
			out.Values[i] = ec._vehicle_location_his_max_fields_sim_number(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_location_his_max_fields_speed_limit_threshold(ctx, field, obj)
		case "star_count":
			out.Values[i] = ec._vehicle_location_his_max_fields_star_count(ctx, field, obj)
		case "star_status":
			out.Values[i] = ec._vehicle_location_his_max_fields_star_status(ctx, field, obj)
		case "supervision_photo_id":
			out.Values[i] = ec._vehicle_location_his_max_fields_supervision_photo_id(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_location_his_max_fields_tachograph_speed(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._vehicle_location_his_max_fields_vehicle_id(ctx, field, obj)
		case "vehicle_status":
			out.Values[i] = ec._vehicle_location_his_max_fields_vehicle_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_location_his_min_fieldsImplementors = []string{"vehicle_location_his_min_fields"}

func (ec *executionContext) _vehicle_location_his_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationHisMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_location_his_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_location_his_min_fields")
		case "acceleration":
			out.Values[i] = ec._vehicle_location_his_min_fields_acceleration(ctx, field, obj)
		case "alarm_content":
			out.Values[i] = ec._vehicle_location_his_min_fields_alarm_content(ctx, field, obj)
		case "alititude":
			out.Values[i] = ec._vehicle_location_his_min_fields_alititude(ctx, field, obj)
		case "direction":
			out.Values[i] = ec._vehicle_location_his_min_fields_direction(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._vehicle_location_his_min_fields_district_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._vehicle_location_his_min_fields_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._vehicle_location_his_min_fields_enterprise_id(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._vehicle_location_his_min_fields_gps_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_location_his_min_fields_id(ctx, field, obj)
		case "imei":
			out.Values[i] = ec._vehicle_location_his_min_fields_imei(ctx, field, obj)
		case "locate_time":
			out.Values[i] = ec._vehicle_location_his_min_fields_locate_time(ctx, field, obj)
		case "location_description":
			out.Values[i] = ec._vehicle_location_his_min_fields_location_description(ctx, field, obj)
		case "mileage":
			out.Values[i] = ec._vehicle_location_his_min_fields_mileage(ctx, field, obj)
		case "road_name":
			out.Values[i] = ec._vehicle_location_his_min_fields_road_name(ctx, field, obj)
		case "sim_number":
			out.Values[i] = ec._vehicle_location_his_min_fields_sim_number(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_location_his_min_fields_speed_limit_threshold(ctx, field, obj)
		case "star_count":
			out.Values[i] = ec._vehicle_location_his_min_fields_star_count(ctx, field, obj)
		case "star_status":
			out.Values[i] = ec._vehicle_location_his_min_fields_star_status(ctx, field, obj)
		case "supervision_photo_id":
			out.Values[i] = ec._vehicle_location_his_min_fields_supervision_photo_id(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_location_his_min_fields_tachograph_speed(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._vehicle_location_his_min_fields_vehicle_id(ctx, field, obj)
		case "vehicle_status":
			out.Values[i] = ec._vehicle_location_his_min_fields_vehicle_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_location_his_mutation_responseImplementors = []string{"vehicle_location_his_mutation_response"}

func (ec *executionContext) _vehicle_location_his_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationHisMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_location_his_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_location_his_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._vehicle_location_his_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._vehicle_location_his_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_location_his_stddev_fieldsImplementors = []string{"vehicle_location_his_stddev_fields"}

func (ec *executionContext) _vehicle_location_his_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationHisStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_location_his_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_location_his_stddev_fields")
		case "gps_speed":
			out.Values[i] = ec._vehicle_location_his_stddev_fields_gps_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_location_his_stddev_fields_id(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_location_his_stddev_fields_speed_limit_threshold(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_location_his_stddev_fields_tachograph_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_location_his_stddev_pop_fieldsImplementors = []string{"vehicle_location_his_stddev_pop_fields"}

func (ec *executionContext) _vehicle_location_his_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationHisStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_location_his_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_location_his_stddev_pop_fields")
		case "gps_speed":
			out.Values[i] = ec._vehicle_location_his_stddev_pop_fields_gps_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_location_his_stddev_pop_fields_id(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_location_his_stddev_pop_fields_speed_limit_threshold(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_location_his_stddev_pop_fields_tachograph_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_location_his_stddev_samp_fieldsImplementors = []string{"vehicle_location_his_stddev_samp_fields"}

func (ec *executionContext) _vehicle_location_his_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationHisStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_location_his_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_location_his_stddev_samp_fields")
		case "gps_speed":
			out.Values[i] = ec._vehicle_location_his_stddev_samp_fields_gps_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_location_his_stddev_samp_fields_id(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_location_his_stddev_samp_fields_speed_limit_threshold(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_location_his_stddev_samp_fields_tachograph_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_location_his_sum_fieldsImplementors = []string{"vehicle_location_his_sum_fields"}

func (ec *executionContext) _vehicle_location_his_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationHisSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_location_his_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_location_his_sum_fields")
		case "gps_speed":
			out.Values[i] = ec._vehicle_location_his_sum_fields_gps_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_location_his_sum_fields_id(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_location_his_sum_fields_speed_limit_threshold(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_location_his_sum_fields_tachograph_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_location_his_var_pop_fieldsImplementors = []string{"vehicle_location_his_var_pop_fields"}

func (ec *executionContext) _vehicle_location_his_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationHisVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_location_his_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_location_his_var_pop_fields")
		case "gps_speed":
			out.Values[i] = ec._vehicle_location_his_var_pop_fields_gps_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_location_his_var_pop_fields_id(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_location_his_var_pop_fields_speed_limit_threshold(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_location_his_var_pop_fields_tachograph_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_location_his_var_samp_fieldsImplementors = []string{"vehicle_location_his_var_samp_fields"}

func (ec *executionContext) _vehicle_location_his_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationHisVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_location_his_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_location_his_var_samp_fields")
		case "gps_speed":
			out.Values[i] = ec._vehicle_location_his_var_samp_fields_gps_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_location_his_var_samp_fields_id(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_location_his_var_samp_fields_speed_limit_threshold(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_location_his_var_samp_fields_tachograph_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_location_his_variance_fieldsImplementors = []string{"vehicle_location_his_variance_fields"}

func (ec *executionContext) _vehicle_location_his_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleLocationHisVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_location_his_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_location_his_variance_fields")
		case "gps_speed":
			out.Values[i] = ec._vehicle_location_his_variance_fields_gps_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_location_his_variance_fields_id(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_location_his_variance_fields_speed_limit_threshold(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_location_his_variance_fields_tachograph_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNbigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNbigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNnumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNnumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNpoint2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNpoint2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNvehicle_location_his2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmodelᚐVehicleLocationHisᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.VehicleLocationHis) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_location_his2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmodelᚐVehicleLocationHis(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNvehicle_location_his2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmodelᚐVehicleLocationHis(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleLocationHis) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._vehicle_location_his(ctx, sel, v)
}

func (ec *executionContext) marshalNvehicle_location_his_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationHisAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._vehicle_location_his_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNvehicle_location_his_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisBoolExp(ctx context.Context, v interface{}) (model.VehicleLocationHisBoolExp, error) {
	res, err := ec.unmarshalInputvehicle_location_his_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_location_his_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisConstraint(ctx context.Context, v interface{}) (model.VehicleLocationHisConstraint, error) {
	var res model.VehicleLocationHisConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_location_his_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisConstraint(ctx context.Context, sel ast.SelectionSet, v model.VehicleLocationHisConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_location_his_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisInsertInput(ctx context.Context, v interface{}) (model.VehicleLocationHisInsertInput, error) {
	res, err := ec.unmarshalInputvehicle_location_his_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_location_his_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VehicleLocationHisInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleLocationHisInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_location_his_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNvehicle_location_his_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisInsertInput(ctx context.Context, v interface{}) (*model.VehicleLocationHisInsertInput, error) {
	res, err := ec.unmarshalInputvehicle_location_his_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_location_his_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisOrderBy(ctx context.Context, v interface{}) (*model.VehicleLocationHisOrderBy, error) {
	res, err := ec.unmarshalInputvehicle_location_his_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_location_his_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisPkColumnsInput(ctx context.Context, v interface{}) (model.VehicleLocationHisPkColumnsInput, error) {
	res, err := ec.unmarshalInputvehicle_location_his_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_location_his_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisSelectColumn(ctx context.Context, v interface{}) (model.VehicleLocationHisSelectColumn, error) {
	var res model.VehicleLocationHisSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_location_his_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleLocationHisSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_location_his_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisUpdateColumn(ctx context.Context, v interface{}) (model.VehicleLocationHisUpdateColumn, error) {
	var res model.VehicleLocationHisUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_location_his_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleLocationHisUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_location_his_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleLocationHisUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleLocationHisUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_location_his_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNvehicle_location_his_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleLocationHisUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_location_his_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model2.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBoolean_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model2.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputString_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalObigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNbigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalObigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNbigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalObigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalObigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model2.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputbigint_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOnumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNnumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOnumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNnumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOnumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOnumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx context.Context, v interface{}) (*model2.NumericComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputnumeric_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model2.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model2.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model2.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOpoint2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNpoint2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOpoint2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNpoint2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOpoint2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOpoint2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOpoint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx context.Context, v interface{}) (*model2.PointComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputpoint_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNtimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNtimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model2.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtimestamptz_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_location_his2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmodelᚐVehicleLocationHis(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleLocationHis) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_location_his(ctx, sel, v)
}

func (ec *executionContext) marshalOvehicle_location_his_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationHisAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_location_his_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOvehicle_location_his_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationHisAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_location_his_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_location_his_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisAvgOrderBy(ctx context.Context, v interface{}) (*model.VehicleLocationHisAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_location_his_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_location_his_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisBoolExp(ctx context.Context, v interface{}) ([]*model.VehicleLocationHisBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleLocationHisBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOvehicle_location_his_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOvehicle_location_his_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisBoolExp(ctx context.Context, v interface{}) (*model.VehicleLocationHisBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_location_his_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_location_his_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisIncInput(ctx context.Context, v interface{}) (*model.VehicleLocationHisIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_location_his_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_location_his_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationHisMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_location_his_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_location_his_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisMaxOrderBy(ctx context.Context, v interface{}) (*model.VehicleLocationHisMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_location_his_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_location_his_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationHisMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_location_his_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_location_his_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisMinOrderBy(ctx context.Context, v interface{}) (*model.VehicleLocationHisMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_location_his_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_location_his_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationHisMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_location_his_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_location_his_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisOnConflict(ctx context.Context, v interface{}) (*model.VehicleLocationHisOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_location_his_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_location_his_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VehicleLocationHisOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleLocationHisOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_location_his_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOvehicle_location_his_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleLocationHisSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleLocationHisSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_location_his_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOvehicle_location_his_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleLocationHisSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_location_his_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOvehicle_location_his_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisSetInput(ctx context.Context, v interface{}) (*model.VehicleLocationHisSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_location_his_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_location_his_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationHisStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_location_his_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_location_his_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisStddevOrderBy(ctx context.Context, v interface{}) (*model.VehicleLocationHisStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_location_his_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_location_his_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationHisStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_location_his_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_location_his_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisStddevPopOrderBy(ctx context.Context, v interface{}) (*model.VehicleLocationHisStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_location_his_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_location_his_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationHisStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_location_his_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_location_his_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisStddevSampOrderBy(ctx context.Context, v interface{}) (*model.VehicleLocationHisStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_location_his_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_location_his_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationHisSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_location_his_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_location_his_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisSumOrderBy(ctx context.Context, v interface{}) (*model.VehicleLocationHisSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_location_his_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_location_his_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationHisVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_location_his_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_location_his_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisVarPopOrderBy(ctx context.Context, v interface{}) (*model.VehicleLocationHisVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_location_his_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_location_his_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationHisVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_location_his_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_location_his_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisVarSampOrderBy(ctx context.Context, v interface{}) (*model.VehicleLocationHisVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_location_his_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_location_his_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleLocationHisVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_location_his_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_location_his_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehiclelocationᚋhisᚋmutationᚋgraphᚋmodelᚐVehicleLocationHisVarianceOrderBy(ctx context.Context, v interface{}) (*model.VehicleLocationHisVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_location_his_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
