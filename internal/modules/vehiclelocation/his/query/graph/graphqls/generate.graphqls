
scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "vehicle_location_his"
  """
  delete_vehicle_location_his(
    """filter the rows which have to be deleted"""
    where: vehicle_location_his_bool_exp!
  ): vehicle_location_his_mutation_response

  """
  delete single row from the table: "vehicle_location_his"
  """
  delete_vehicle_location_his_by_pk(
    """ID"""
    id: bigint!
  ): vehicle_location_his

  """
  insert data into the table: "vehicle_location_his"
  """
  insert_vehicle_location_his(
    """the rows to be inserted"""
    objects: [vehicle_location_his_insert_input!]!

    """on conflict condition"""
    on_conflict: vehicle_location_his_on_conflict
  ): vehicle_location_his_mutation_response

  """
  insert a single row into the table: "vehicle_location_his"
  """
  insert_vehicle_location_his_one(
    """the row to be inserted"""
    object: vehicle_location_his_insert_input!

    """on conflict condition"""
    on_conflict: vehicle_location_his_on_conflict
  ): vehicle_location_his

  """
  update data of the table: "vehicle_location_his"
  """
  update_vehicle_location_his(
    """increments the integer columns with given value of the filtered values"""
    _inc: vehicle_location_his_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: vehicle_location_his_set_input

    """filter the rows which have to be updated"""
    where: vehicle_location_his_bool_exp!
  ): vehicle_location_his_mutation_response

  """
  update single row of the table: "vehicle_location_his"
  """
  update_vehicle_location_his_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: vehicle_location_his_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: vehicle_location_his_set_input
    pk_columns: vehicle_location_his_pk_columns_input!
  ): vehicle_location_his
}

scalar numeric

"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

scalar point

"""
expression to compare columns of type point. All fields are combined with logical 'AND'.
"""
input point_comparison_exp {
  _eq: point
  _gt: point
  _gte: point
  _in: [point!]
  _is_null: Boolean
  _lt: point
  _lte: point
  _neq: point
  _nin: [point!]
}

"""query root"""
type Query {
  """
  fetch data from the table: "vehicle_location_his"
  """
  vehicle_location_his(
    """distinct select on columns"""
    distinct_on: [vehicle_location_his_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vehicle_location_his_order_by!]

    """filter the rows returned"""
    where: vehicle_location_his_bool_exp
  ): [vehicle_location_his!]!

  """
  fetch aggregated fields from the table: "vehicle_location_his"
  """
  vehicle_location_his_aggregate(
    """distinct select on columns"""
    distinct_on: [vehicle_location_his_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vehicle_location_his_order_by!]

    """filter the rows returned"""
    where: vehicle_location_his_bool_exp
  ): vehicle_location_his_aggregate!

  """
  fetch data from the table: "vehicle_location_his" using primary key columns
  """
  vehicle_location_his_by_pk(
    """ID"""
    id: bigint!
  ): vehicle_location_his
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "vehicle_location_his"
  """
  vehicle_location_his(
    """distinct select on columns"""
    distinct_on: [vehicle_location_his_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vehicle_location_his_order_by!]

    """filter the rows returned"""
    where: vehicle_location_his_bool_exp
  ): [vehicle_location_his!]!

  """
  fetch aggregated fields from the table: "vehicle_location_his"
  """
  vehicle_location_his_aggregate(
    """distinct select on columns"""
    distinct_on: [vehicle_location_his_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vehicle_location_his_order_by!]

    """filter the rows returned"""
    where: vehicle_location_his_bool_exp
  ): vehicle_location_his_aggregate!

  """
  fetch data from the table: "vehicle_location_his" using primary key columns
  """
  vehicle_location_his_by_pk(
    """ID"""
    id: bigint!
  ): vehicle_location_his
}

scalar timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
车辆位置历史表


columns and relationships of "vehicle_location_his"

"""
type vehicle_location_his {
  """加速度"""
  acceleration: String

  """报警内容"""
  alarm_content: String

  """海拔"""
  alititude: String

  """坐标"""
  coordinate: point

  """纠偏后坐标"""
  correct_coordinate: point

  """方向"""
  direction: String

  """区域ID"""
  district_id: String

  """驾驶员ID"""
  driver_id: String

  """企业ID"""
  enterprise_id: String

  """GPS速度"""
  gps_speed: numeric

  """ID"""
  id: bigint!

  """终端IMEI"""
  imei: String

  """是否定位"""
  is_locate: Boolean

  """定位时间"""
  locate_time: timestamptz

  """位置描述"""
  location_description: String

  """里程"""
  mileage: String

  """道路名称"""
  road_name: String

  """SIM卡号"""
  sim_number: String

  """限速阀值"""
  speed_limit_threshold: numeric

  """星数"""
  star_count: String

  """星况"""
  star_status: String

  """监控图片ID"""
  supervision_photo_id: String

  """行驶记录仪速度"""
  tachograph_speed: numeric

  """车辆ID"""
  vehicle_id: String!

  """车辆状态"""
  vehicle_status: String
}

"""
aggregated selection of "vehicle_location_his"
"""
type vehicle_location_his_aggregate {
  aggregate: vehicle_location_his_aggregate_fields
  nodes: [vehicle_location_his!]!
}

"""
aggregate fields of "vehicle_location_his"
"""
type vehicle_location_his_aggregate_fields {
  avg: vehicle_location_his_avg_fields
  count(columns: [vehicle_location_his_select_column!], distinct: Boolean): Int
  max: vehicle_location_his_max_fields
  min: vehicle_location_his_min_fields
  stddev: vehicle_location_his_stddev_fields
  stddev_pop: vehicle_location_his_stddev_pop_fields
  stddev_samp: vehicle_location_his_stddev_samp_fields
  sum: vehicle_location_his_sum_fields
  var_pop: vehicle_location_his_var_pop_fields
  var_samp: vehicle_location_his_var_samp_fields
  variance: vehicle_location_his_variance_fields
}

"""
order by aggregate values of table "vehicle_location_his"
"""
input vehicle_location_his_aggregate_order_by {
  avg: vehicle_location_his_avg_order_by
  count: order_by
  max: vehicle_location_his_max_order_by
  min: vehicle_location_his_min_order_by
  stddev: vehicle_location_his_stddev_order_by
  stddev_pop: vehicle_location_his_stddev_pop_order_by
  stddev_samp: vehicle_location_his_stddev_samp_order_by
  sum: vehicle_location_his_sum_order_by
  var_pop: vehicle_location_his_var_pop_order_by
  var_samp: vehicle_location_his_var_samp_order_by
  variance: vehicle_location_his_variance_order_by
}

"""
input type for inserting array relation for remote table "vehicle_location_his"
"""
input vehicle_location_his_arr_rel_insert_input {
  data: [vehicle_location_his_insert_input!]!
  on_conflict: vehicle_location_his_on_conflict
}

"""aggregate avg on columns"""
type vehicle_location_his_avg_fields {
  gps_speed: Float
  id: Float
  speed_limit_threshold: Float
  tachograph_speed: Float
}

"""
order by avg() on columns of table "vehicle_location_his"
"""
input vehicle_location_his_avg_order_by {
  gps_speed: order_by
  id: order_by
  speed_limit_threshold: order_by
  tachograph_speed: order_by
}

"""
Boolean expression to filter rows from the table "vehicle_location_his". All fields are combined with a logical 'AND'.
"""
input vehicle_location_his_bool_exp {
  _and: [vehicle_location_his_bool_exp]
  _not: vehicle_location_his_bool_exp
  _or: [vehicle_location_his_bool_exp]
  acceleration: String_comparison_exp
  alarm_content: String_comparison_exp
  alititude: String_comparison_exp
  coordinate: point_comparison_exp
  correct_coordinate: point_comparison_exp
  direction: String_comparison_exp
  district_id: String_comparison_exp
  driver_id: String_comparison_exp
  enterprise_id: String_comparison_exp
  gps_speed: numeric_comparison_exp
  id: bigint_comparison_exp
  imei: String_comparison_exp
  is_locate: Boolean_comparison_exp
  locate_time: timestamptz_comparison_exp
  location_description: String_comparison_exp
  mileage: String_comparison_exp
  road_name: String_comparison_exp
  sim_number: String_comparison_exp
  speed_limit_threshold: numeric_comparison_exp
  star_count: String_comparison_exp
  star_status: String_comparison_exp
  supervision_photo_id: String_comparison_exp
  tachograph_speed: numeric_comparison_exp
  vehicle_id: String_comparison_exp
  vehicle_status: String_comparison_exp
}

"""
unique or primary key constraints on table "vehicle_location_his"
"""
enum vehicle_location_his_constraint {
  """unique or primary key constraint"""
  vehicle_location_his_pkey
}

"""
input type for incrementing integer column in table "vehicle_location_his"
"""
input vehicle_location_his_inc_input {
  gps_speed: numeric
  id: bigint
  speed_limit_threshold: numeric
  tachograph_speed: numeric
}

"""
input type for inserting data into table "vehicle_location_his"
"""
input vehicle_location_his_insert_input {
  acceleration: String
  alarm_content: String
  alititude: String
  coordinate: point
  correct_coordinate: point
  direction: String
  district_id: String
  driver_id: String
  enterprise_id: String
  gps_speed: numeric
  id: bigint
  imei: String
  is_locate: Boolean
  locate_time: timestamptz
  location_description: String
  mileage: String
  road_name: String
  sim_number: String
  speed_limit_threshold: numeric
  star_count: String
  star_status: String
  supervision_photo_id: String
  tachograph_speed: numeric
  vehicle_id: String
  vehicle_status: String
}

"""aggregate max on columns"""
type vehicle_location_his_max_fields {
  acceleration: String
  alarm_content: String
  alititude: String
  direction: String
  district_id: String
  driver_id: String
  enterprise_id: String
  gps_speed: numeric
  id: bigint
  imei: String
  locate_time: timestamptz
  location_description: String
  mileage: String
  road_name: String
  sim_number: String
  speed_limit_threshold: numeric
  star_count: String
  star_status: String
  supervision_photo_id: String
  tachograph_speed: numeric
  vehicle_id: String
  vehicle_status: String
}

"""
order by max() on columns of table "vehicle_location_his"
"""
input vehicle_location_his_max_order_by {
  acceleration: order_by
  alarm_content: order_by
  alititude: order_by
  direction: order_by
  district_id: order_by
  driver_id: order_by
  enterprise_id: order_by
  gps_speed: order_by
  id: order_by
  imei: order_by
  locate_time: order_by
  location_description: order_by
  mileage: order_by
  road_name: order_by
  sim_number: order_by
  speed_limit_threshold: order_by
  star_count: order_by
  star_status: order_by
  supervision_photo_id: order_by
  tachograph_speed: order_by
  vehicle_id: order_by
  vehicle_status: order_by
}

"""aggregate min on columns"""
type vehicle_location_his_min_fields {
  acceleration: String
  alarm_content: String
  alititude: String
  direction: String
  district_id: String
  driver_id: String
  enterprise_id: String
  gps_speed: numeric
  id: bigint
  imei: String
  locate_time: timestamptz
  location_description: String
  mileage: String
  road_name: String
  sim_number: String
  speed_limit_threshold: numeric
  star_count: String
  star_status: String
  supervision_photo_id: String
  tachograph_speed: numeric
  vehicle_id: String
  vehicle_status: String
}

"""
order by min() on columns of table "vehicle_location_his"
"""
input vehicle_location_his_min_order_by {
  acceleration: order_by
  alarm_content: order_by
  alititude: order_by
  direction: order_by
  district_id: order_by
  driver_id: order_by
  enterprise_id: order_by
  gps_speed: order_by
  id: order_by
  imei: order_by
  locate_time: order_by
  location_description: order_by
  mileage: order_by
  road_name: order_by
  sim_number: order_by
  speed_limit_threshold: order_by
  star_count: order_by
  star_status: order_by
  supervision_photo_id: order_by
  tachograph_speed: order_by
  vehicle_id: order_by
  vehicle_status: order_by
}

"""
response of any mutation on the table "vehicle_location_his"
"""
type vehicle_location_his_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [vehicle_location_his!]!
}

"""
input type for inserting object relation for remote table "vehicle_location_his"
"""
input vehicle_location_his_obj_rel_insert_input {
  data: vehicle_location_his_insert_input!
  on_conflict: vehicle_location_his_on_conflict
}

"""
on conflict condition type for table "vehicle_location_his"
"""
input vehicle_location_his_on_conflict {
  constraint: vehicle_location_his_constraint!
  update_columns: [vehicle_location_his_update_column!]!
  where: vehicle_location_his_bool_exp
}

"""
ordering options when selecting data from "vehicle_location_his"
"""
input vehicle_location_his_order_by {
  acceleration: order_by
  alarm_content: order_by
  alititude: order_by
  coordinate: order_by
  correct_coordinate: order_by
  direction: order_by
  district_id: order_by
  driver_id: order_by
  enterprise_id: order_by
  gps_speed: order_by
  id: order_by
  imei: order_by
  is_locate: order_by
  locate_time: order_by
  location_description: order_by
  mileage: order_by
  road_name: order_by
  sim_number: order_by
  speed_limit_threshold: order_by
  star_count: order_by
  star_status: order_by
  supervision_photo_id: order_by
  tachograph_speed: order_by
  vehicle_id: order_by
  vehicle_status: order_by
}

"""
primary key columns input for table: "vehicle_location_his"
"""
input vehicle_location_his_pk_columns_input {
  """ID"""
  id: bigint!
}

"""
select columns of table "vehicle_location_his"
"""
enum vehicle_location_his_select_column {
  """column name"""
  acceleration

  """column name"""
  alarm_content

  """column name"""
  alititude

  """column name"""
  coordinate

  """column name"""
  correct_coordinate

  """column name"""
  direction

  """column name"""
  district_id

  """column name"""
  driver_id

  """column name"""
  enterprise_id

  """column name"""
  gps_speed

  """column name"""
  id

  """column name"""
  imei

  """column name"""
  is_locate

  """column name"""
  locate_time

  """column name"""
  location_description

  """column name"""
  mileage

  """column name"""
  road_name

  """column name"""
  sim_number

  """column name"""
  speed_limit_threshold

  """column name"""
  star_count

  """column name"""
  star_status

  """column name"""
  supervision_photo_id

  """column name"""
  tachograph_speed

  """column name"""
  vehicle_id

  """column name"""
  vehicle_status
}

"""
input type for updating data in table "vehicle_location_his"
"""
input vehicle_location_his_set_input {
  acceleration: String
  alarm_content: String
  alititude: String
  coordinate: point
  correct_coordinate: point
  direction: String
  district_id: String
  driver_id: String
  enterprise_id: String
  gps_speed: numeric
  id: bigint
  imei: String
  is_locate: Boolean
  locate_time: timestamptz
  location_description: String
  mileage: String
  road_name: String
  sim_number: String
  speed_limit_threshold: numeric
  star_count: String
  star_status: String
  supervision_photo_id: String
  tachograph_speed: numeric
  vehicle_id: String
  vehicle_status: String
}

"""aggregate stddev on columns"""
type vehicle_location_his_stddev_fields {
  gps_speed: Float
  id: Float
  speed_limit_threshold: Float
  tachograph_speed: Float
}

"""
order by stddev() on columns of table "vehicle_location_his"
"""
input vehicle_location_his_stddev_order_by {
  gps_speed: order_by
  id: order_by
  speed_limit_threshold: order_by
  tachograph_speed: order_by
}

"""aggregate stddev_pop on columns"""
type vehicle_location_his_stddev_pop_fields {
  gps_speed: Float
  id: Float
  speed_limit_threshold: Float
  tachograph_speed: Float
}

"""
order by stddev_pop() on columns of table "vehicle_location_his"
"""
input vehicle_location_his_stddev_pop_order_by {
  gps_speed: order_by
  id: order_by
  speed_limit_threshold: order_by
  tachograph_speed: order_by
}

"""aggregate stddev_samp on columns"""
type vehicle_location_his_stddev_samp_fields {
  gps_speed: Float
  id: Float
  speed_limit_threshold: Float
  tachograph_speed: Float
}

"""
order by stddev_samp() on columns of table "vehicle_location_his"
"""
input vehicle_location_his_stddev_samp_order_by {
  gps_speed: order_by
  id: order_by
  speed_limit_threshold: order_by
  tachograph_speed: order_by
}

"""aggregate sum on columns"""
type vehicle_location_his_sum_fields {
  gps_speed: numeric
  id: bigint
  speed_limit_threshold: numeric
  tachograph_speed: numeric
}

"""
order by sum() on columns of table "vehicle_location_his"
"""
input vehicle_location_his_sum_order_by {
  gps_speed: order_by
  id: order_by
  speed_limit_threshold: order_by
  tachograph_speed: order_by
}

"""
update columns of table "vehicle_location_his"
"""
enum vehicle_location_his_update_column {
  """column name"""
  acceleration

  """column name"""
  alarm_content

  """column name"""
  alititude

  """column name"""
  coordinate

  """column name"""
  correct_coordinate

  """column name"""
  direction

  """column name"""
  district_id

  """column name"""
  driver_id

  """column name"""
  enterprise_id

  """column name"""
  gps_speed

  """column name"""
  id

  """column name"""
  imei

  """column name"""
  is_locate

  """column name"""
  locate_time

  """column name"""
  location_description

  """column name"""
  mileage

  """column name"""
  road_name

  """column name"""
  sim_number

  """column name"""
  speed_limit_threshold

  """column name"""
  star_count

  """column name"""
  star_status

  """column name"""
  supervision_photo_id

  """column name"""
  tachograph_speed

  """column name"""
  vehicle_id

  """column name"""
  vehicle_status
}

"""aggregate var_pop on columns"""
type vehicle_location_his_var_pop_fields {
  gps_speed: Float
  id: Float
  speed_limit_threshold: Float
  tachograph_speed: Float
}

"""
order by var_pop() on columns of table "vehicle_location_his"
"""
input vehicle_location_his_var_pop_order_by {
  gps_speed: order_by
  id: order_by
  speed_limit_threshold: order_by
  tachograph_speed: order_by
}

"""aggregate var_samp on columns"""
type vehicle_location_his_var_samp_fields {
  gps_speed: Float
  id: Float
  speed_limit_threshold: Float
  tachograph_speed: Float
}

"""
order by var_samp() on columns of table "vehicle_location_his"
"""
input vehicle_location_his_var_samp_order_by {
  gps_speed: order_by
  id: order_by
  speed_limit_threshold: order_by
  tachograph_speed: order_by
}

"""aggregate variance on columns"""
type vehicle_location_his_variance_fields {
  gps_speed: Float
  id: Float
  speed_limit_threshold: Float
  tachograph_speed: Float
}

"""
order by variance() on columns of table "vehicle_location_his"
"""
input vehicle_location_his_variance_order_by {
  gps_speed: order_by
  id: order_by
  speed_limit_threshold: order_by
  tachograph_speed: order_by
}

