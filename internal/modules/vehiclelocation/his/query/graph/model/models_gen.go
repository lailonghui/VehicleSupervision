// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"VehicleSupervision/internal/modules/vehiclelocation/his/model"
	model1 "VehicleSupervision/pkg/graphql/model"
	"fmt"
	"io"
	"strconv"
	"time"
)

// mutation root
type MutationRoot struct {
	// delete data from the table: "vehicle_location_his"
	DeleteVehicleLocationHis *VehicleLocationHisMutationResponse `json:"delete_vehicle_location_his"`
	// delete single row from the table: "vehicle_location_his"
	DeleteVehicleLocationHisByPk *model.VehicleLocationHis `json:"delete_vehicle_location_his_by_pk"`
	// insert data into the table: "vehicle_location_his"
	InsertVehicleLocationHis *VehicleLocationHisMutationResponse `json:"insert_vehicle_location_his"`
	// insert a single row into the table: "vehicle_location_his"
	InsertVehicleLocationHisOne *model.VehicleLocationHis `json:"insert_vehicle_location_his_one"`
	// update data of the table: "vehicle_location_his"
	UpdateVehicleLocationHis *VehicleLocationHisMutationResponse `json:"update_vehicle_location_his"`
	// update single row of the table: "vehicle_location_his"
	UpdateVehicleLocationHisByPk *model.VehicleLocationHis `json:"update_vehicle_location_his_by_pk"`
}

// subscription root
type SubscriptionRoot struct {
	// fetch data from the table: "vehicle_location_his"
	VehicleLocationHis []*model.VehicleLocationHis `json:"vehicle_location_his"`
	// fetch aggregated fields from the table: "vehicle_location_his"
	VehicleLocationHisAggregate *VehicleLocationHisAggregate `json:"vehicle_location_his_aggregate"`
	// fetch data from the table: "vehicle_location_his" using primary key columns
	VehicleLocationHisByPk *model.VehicleLocationHis `json:"vehicle_location_his_by_pk"`
}

// aggregated selection of "vehicle_location_his"
type VehicleLocationHisAggregate struct {
	Aggregate *VehicleLocationHisAggregateFields `json:"aggregate"`
	Nodes     []*model.VehicleLocationHis        `json:"nodes"`
}

// aggregate fields of "vehicle_location_his"
type VehicleLocationHisAggregateFields struct {
	Avg        *VehicleLocationHisAvgFields        `json:"avg"`
	Count      *int                                `json:"count"`
	Max        *VehicleLocationHisMaxFields        `json:"max"`
	Min        *VehicleLocationHisMinFields        `json:"min"`
	Stddev     *VehicleLocationHisStddevFields     `json:"stddev"`
	StddevPop  *VehicleLocationHisStddevPopFields  `json:"stddev_pop"`
	StddevSamp *VehicleLocationHisStddevSampFields `json:"stddev_samp"`
	Sum        *VehicleLocationHisSumFields        `json:"sum"`
	VarPop     *VehicleLocationHisVarPopFields     `json:"var_pop"`
	VarSamp    *VehicleLocationHisVarSampFields    `json:"var_samp"`
	Variance   *VehicleLocationHisVarianceFields   `json:"variance"`
}

// order by aggregate values of table "vehicle_location_his"
type VehicleLocationHisAggregateOrderBy struct {
	Avg        *VehicleLocationHisAvgOrderBy        `json:"avg"`
	Count      *model1.OrderBy                      `json:"count"`
	Max        *VehicleLocationHisMaxOrderBy        `json:"max"`
	Min        *VehicleLocationHisMinOrderBy        `json:"min"`
	Stddev     *VehicleLocationHisStddevOrderBy     `json:"stddev"`
	StddevPop  *VehicleLocationHisStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *VehicleLocationHisStddevSampOrderBy `json:"stddev_samp"`
	Sum        *VehicleLocationHisSumOrderBy        `json:"sum"`
	VarPop     *VehicleLocationHisVarPopOrderBy     `json:"var_pop"`
	VarSamp    *VehicleLocationHisVarSampOrderBy    `json:"var_samp"`
	Variance   *VehicleLocationHisVarianceOrderBy   `json:"variance"`
}

// input type for inserting array relation for remote table "vehicle_location_his"
type VehicleLocationHisArrRelInsertInput struct {
	Data       []*VehicleLocationHisInsertInput `json:"data"`
	OnConflict *VehicleLocationHisOnConflict    `json:"on_conflict"`
}

// aggregate avg on columns
type VehicleLocationHisAvgFields struct {
	GpsSpeed            *float64 `json:"gps_speed"`
	ID                  *float64 `json:"id"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
}

// order by avg() on columns of table "vehicle_location_his"
type VehicleLocationHisAvgOrderBy struct {
	GpsSpeed            *model1.OrderBy `json:"gps_speed"`
	ID                  *model1.OrderBy `json:"id"`
	SpeedLimitThreshold *model1.OrderBy `json:"speed_limit_threshold"`
	TachographSpeed     *model1.OrderBy `json:"tachograph_speed"`
}

// Boolean expression to filter rows from the table "vehicle_location_his". All fields are combined with a logical 'AND'.
type VehicleLocationHisBoolExp struct {
	And                 []*VehicleLocationHisBoolExp     `json:"_and"`
	Not                 *VehicleLocationHisBoolExp       `json:"_not"`
	Or                  []*VehicleLocationHisBoolExp     `json:"_or"`
	Acceleration        *model1.StringComparisonExp      `json:"acceleration"`
	AlarmContent        *model1.StringComparisonExp      `json:"alarm_content"`
	Alititude           *model1.StringComparisonExp      `json:"alititude"`
	Coordinate          *model1.PointComparisonExp       `json:"coordinate"`
	CorrectCoordinate   *model1.PointComparisonExp       `json:"correct_coordinate"`
	Direction           *model1.StringComparisonExp      `json:"direction"`
	DistrictID          *model1.StringComparisonExp      `json:"district_id"`
	DriverID            *model1.StringComparisonExp      `json:"driver_id"`
	EnterpriseID        *model1.StringComparisonExp      `json:"enterprise_id"`
	GpsSpeed            *model1.NumericComparisonExp     `json:"gps_speed"`
	ID                  *model1.BigintComparisonExp      `json:"id"`
	Imei                *model1.StringComparisonExp      `json:"imei"`
	IsLocate            *model1.BooleanComparisonExp     `json:"is_locate"`
	LocateTime          *model1.TimestamptzComparisonExp `json:"locate_time"`
	LocationDescription *model1.StringComparisonExp      `json:"location_description"`
	Mileage             *model1.StringComparisonExp      `json:"mileage"`
	RoadName            *model1.StringComparisonExp      `json:"road_name"`
	SimNumber           *model1.StringComparisonExp      `json:"sim_number"`
	SpeedLimitThreshold *model1.NumericComparisonExp     `json:"speed_limit_threshold"`
	StarCount           *model1.StringComparisonExp      `json:"star_count"`
	StarStatus          *model1.StringComparisonExp      `json:"star_status"`
	SupervisionPhotoID  *model1.StringComparisonExp      `json:"supervision_photo_id"`
	TachographSpeed     *model1.NumericComparisonExp     `json:"tachograph_speed"`
	VehicleID           *model1.StringComparisonExp      `json:"vehicle_id"`
	VehicleStatus       *model1.StringComparisonExp      `json:"vehicle_status"`
}

// input type for incrementing integer column in table "vehicle_location_his"
type VehicleLocationHisIncInput struct {
	GpsSpeed            *float64 `json:"gps_speed"`
	ID                  *int64   `json:"id"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
}

// input type for inserting data into table "vehicle_location_his"
type VehicleLocationHisInsertInput struct {
	Acceleration        *string    `json:"acceleration"`
	AlarmContent        *string    `json:"alarm_content"`
	Alititude           *string    `json:"alititude"`
	Coordinate          *string    `json:"coordinate"`
	CorrectCoordinate   *string    `json:"correct_coordinate"`
	Direction           *string    `json:"direction"`
	DistrictID          *string    `json:"district_id"`
	DriverID            *string    `json:"driver_id"`
	EnterpriseID        *string    `json:"enterprise_id"`
	GpsSpeed            *float64   `json:"gps_speed"`
	ID                  *int64     `json:"id"`
	Imei                *string    `json:"imei"`
	IsLocate            *bool      `json:"is_locate"`
	LocateTime          *time.Time `json:"locate_time"`
	LocationDescription *string    `json:"location_description"`
	Mileage             *string    `json:"mileage"`
	RoadName            *string    `json:"road_name"`
	SimNumber           *string    `json:"sim_number"`
	SpeedLimitThreshold *float64   `json:"speed_limit_threshold"`
	StarCount           *string    `json:"star_count"`
	StarStatus          *string    `json:"star_status"`
	SupervisionPhotoID  *string    `json:"supervision_photo_id"`
	TachographSpeed     *float64   `json:"tachograph_speed"`
	VehicleID           *string    `json:"vehicle_id"`
	VehicleStatus       *string    `json:"vehicle_status"`
}

// aggregate max on columns
type VehicleLocationHisMaxFields struct {
	Acceleration        *string    `json:"acceleration"`
	AlarmContent        *string    `json:"alarm_content"`
	Alititude           *string    `json:"alititude"`
	Direction           *string    `json:"direction"`
	DistrictID          *string    `json:"district_id"`
	DriverID            *string    `json:"driver_id"`
	EnterpriseID        *string    `json:"enterprise_id"`
	GpsSpeed            *float64   `json:"gps_speed"`
	ID                  *int64     `json:"id"`
	Imei                *string    `json:"imei"`
	LocateTime          *time.Time `json:"locate_time"`
	LocationDescription *string    `json:"location_description"`
	Mileage             *string    `json:"mileage"`
	RoadName            *string    `json:"road_name"`
	SimNumber           *string    `json:"sim_number"`
	SpeedLimitThreshold *float64   `json:"speed_limit_threshold"`
	StarCount           *string    `json:"star_count"`
	StarStatus          *string    `json:"star_status"`
	SupervisionPhotoID  *string    `json:"supervision_photo_id"`
	TachographSpeed     *float64   `json:"tachograph_speed"`
	VehicleID           *string    `json:"vehicle_id"`
	VehicleStatus       *string    `json:"vehicle_status"`
}

// order by max() on columns of table "vehicle_location_his"
type VehicleLocationHisMaxOrderBy struct {
	Acceleration        *model1.OrderBy `json:"acceleration"`
	AlarmContent        *model1.OrderBy `json:"alarm_content"`
	Alititude           *model1.OrderBy `json:"alititude"`
	Direction           *model1.OrderBy `json:"direction"`
	DistrictID          *model1.OrderBy `json:"district_id"`
	DriverID            *model1.OrderBy `json:"driver_id"`
	EnterpriseID        *model1.OrderBy `json:"enterprise_id"`
	GpsSpeed            *model1.OrderBy `json:"gps_speed"`
	ID                  *model1.OrderBy `json:"id"`
	Imei                *model1.OrderBy `json:"imei"`
	LocateTime          *model1.OrderBy `json:"locate_time"`
	LocationDescription *model1.OrderBy `json:"location_description"`
	Mileage             *model1.OrderBy `json:"mileage"`
	RoadName            *model1.OrderBy `json:"road_name"`
	SimNumber           *model1.OrderBy `json:"sim_number"`
	SpeedLimitThreshold *model1.OrderBy `json:"speed_limit_threshold"`
	StarCount           *model1.OrderBy `json:"star_count"`
	StarStatus          *model1.OrderBy `json:"star_status"`
	SupervisionPhotoID  *model1.OrderBy `json:"supervision_photo_id"`
	TachographSpeed     *model1.OrderBy `json:"tachograph_speed"`
	VehicleID           *model1.OrderBy `json:"vehicle_id"`
	VehicleStatus       *model1.OrderBy `json:"vehicle_status"`
}

// aggregate min on columns
type VehicleLocationHisMinFields struct {
	Acceleration        *string    `json:"acceleration"`
	AlarmContent        *string    `json:"alarm_content"`
	Alititude           *string    `json:"alititude"`
	Direction           *string    `json:"direction"`
	DistrictID          *string    `json:"district_id"`
	DriverID            *string    `json:"driver_id"`
	EnterpriseID        *string    `json:"enterprise_id"`
	GpsSpeed            *float64   `json:"gps_speed"`
	ID                  *int64     `json:"id"`
	Imei                *string    `json:"imei"`
	LocateTime          *time.Time `json:"locate_time"`
	LocationDescription *string    `json:"location_description"`
	Mileage             *string    `json:"mileage"`
	RoadName            *string    `json:"road_name"`
	SimNumber           *string    `json:"sim_number"`
	SpeedLimitThreshold *float64   `json:"speed_limit_threshold"`
	StarCount           *string    `json:"star_count"`
	StarStatus          *string    `json:"star_status"`
	SupervisionPhotoID  *string    `json:"supervision_photo_id"`
	TachographSpeed     *float64   `json:"tachograph_speed"`
	VehicleID           *string    `json:"vehicle_id"`
	VehicleStatus       *string    `json:"vehicle_status"`
}

// order by min() on columns of table "vehicle_location_his"
type VehicleLocationHisMinOrderBy struct {
	Acceleration        *model1.OrderBy `json:"acceleration"`
	AlarmContent        *model1.OrderBy `json:"alarm_content"`
	Alititude           *model1.OrderBy `json:"alititude"`
	Direction           *model1.OrderBy `json:"direction"`
	DistrictID          *model1.OrderBy `json:"district_id"`
	DriverID            *model1.OrderBy `json:"driver_id"`
	EnterpriseID        *model1.OrderBy `json:"enterprise_id"`
	GpsSpeed            *model1.OrderBy `json:"gps_speed"`
	ID                  *model1.OrderBy `json:"id"`
	Imei                *model1.OrderBy `json:"imei"`
	LocateTime          *model1.OrderBy `json:"locate_time"`
	LocationDescription *model1.OrderBy `json:"location_description"`
	Mileage             *model1.OrderBy `json:"mileage"`
	RoadName            *model1.OrderBy `json:"road_name"`
	SimNumber           *model1.OrderBy `json:"sim_number"`
	SpeedLimitThreshold *model1.OrderBy `json:"speed_limit_threshold"`
	StarCount           *model1.OrderBy `json:"star_count"`
	StarStatus          *model1.OrderBy `json:"star_status"`
	SupervisionPhotoID  *model1.OrderBy `json:"supervision_photo_id"`
	TachographSpeed     *model1.OrderBy `json:"tachograph_speed"`
	VehicleID           *model1.OrderBy `json:"vehicle_id"`
	VehicleStatus       *model1.OrderBy `json:"vehicle_status"`
}

// response of any mutation on the table "vehicle_location_his"
type VehicleLocationHisMutationResponse struct {
	// number of affected rows by the mutation
	AffectedRows int `json:"affected_rows"`
	// data of the affected rows by the mutation
	Returning []*model.VehicleLocationHis `json:"returning"`
}

// input type for inserting object relation for remote table "vehicle_location_his"
type VehicleLocationHisObjRelInsertInput struct {
	Data       *VehicleLocationHisInsertInput `json:"data"`
	OnConflict *VehicleLocationHisOnConflict  `json:"on_conflict"`
}

// on conflict condition type for table "vehicle_location_his"
type VehicleLocationHisOnConflict struct {
	Constraint    VehicleLocationHisConstraint     `json:"constraint"`
	UpdateColumns []VehicleLocationHisUpdateColumn `json:"update_columns"`
	Where         *VehicleLocationHisBoolExp       `json:"where"`
}

// ordering options when selecting data from "vehicle_location_his"
type VehicleLocationHisOrderBy struct {
	Acceleration        *model1.OrderBy `json:"acceleration"`
	AlarmContent        *model1.OrderBy `json:"alarm_content"`
	Alititude           *model1.OrderBy `json:"alititude"`
	Coordinate          *model1.OrderBy `json:"coordinate"`
	CorrectCoordinate   *model1.OrderBy `json:"correct_coordinate"`
	Direction           *model1.OrderBy `json:"direction"`
	DistrictID          *model1.OrderBy `json:"district_id"`
	DriverID            *model1.OrderBy `json:"driver_id"`
	EnterpriseID        *model1.OrderBy `json:"enterprise_id"`
	GpsSpeed            *model1.OrderBy `json:"gps_speed"`
	ID                  *model1.OrderBy `json:"id"`
	Imei                *model1.OrderBy `json:"imei"`
	IsLocate            *model1.OrderBy `json:"is_locate"`
	LocateTime          *model1.OrderBy `json:"locate_time"`
	LocationDescription *model1.OrderBy `json:"location_description"`
	Mileage             *model1.OrderBy `json:"mileage"`
	RoadName            *model1.OrderBy `json:"road_name"`
	SimNumber           *model1.OrderBy `json:"sim_number"`
	SpeedLimitThreshold *model1.OrderBy `json:"speed_limit_threshold"`
	StarCount           *model1.OrderBy `json:"star_count"`
	StarStatus          *model1.OrderBy `json:"star_status"`
	SupervisionPhotoID  *model1.OrderBy `json:"supervision_photo_id"`
	TachographSpeed     *model1.OrderBy `json:"tachograph_speed"`
	VehicleID           *model1.OrderBy `json:"vehicle_id"`
	VehicleStatus       *model1.OrderBy `json:"vehicle_status"`
}

// primary key columns input for table: "vehicle_location_his"
type VehicleLocationHisPkColumnsInput struct {
	// ID
	ID int64 `json:"id"`
}

// input type for updating data in table "vehicle_location_his"
type VehicleLocationHisSetInput struct {
	Acceleration        *string    `json:"acceleration"`
	AlarmContent        *string    `json:"alarm_content"`
	Alititude           *string    `json:"alititude"`
	Coordinate          *string    `json:"coordinate"`
	CorrectCoordinate   *string    `json:"correct_coordinate"`
	Direction           *string    `json:"direction"`
	DistrictID          *string    `json:"district_id"`
	DriverID            *string    `json:"driver_id"`
	EnterpriseID        *string    `json:"enterprise_id"`
	GpsSpeed            *float64   `json:"gps_speed"`
	ID                  *int64     `json:"id"`
	Imei                *string    `json:"imei"`
	IsLocate            *bool      `json:"is_locate"`
	LocateTime          *time.Time `json:"locate_time"`
	LocationDescription *string    `json:"location_description"`
	Mileage             *string    `json:"mileage"`
	RoadName            *string    `json:"road_name"`
	SimNumber           *string    `json:"sim_number"`
	SpeedLimitThreshold *float64   `json:"speed_limit_threshold"`
	StarCount           *string    `json:"star_count"`
	StarStatus          *string    `json:"star_status"`
	SupervisionPhotoID  *string    `json:"supervision_photo_id"`
	TachographSpeed     *float64   `json:"tachograph_speed"`
	VehicleID           *string    `json:"vehicle_id"`
	VehicleStatus       *string    `json:"vehicle_status"`
}

// aggregate stddev on columns
type VehicleLocationHisStddevFields struct {
	GpsSpeed            *float64 `json:"gps_speed"`
	ID                  *float64 `json:"id"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
}

// order by stddev() on columns of table "vehicle_location_his"
type VehicleLocationHisStddevOrderBy struct {
	GpsSpeed            *model1.OrderBy `json:"gps_speed"`
	ID                  *model1.OrderBy `json:"id"`
	SpeedLimitThreshold *model1.OrderBy `json:"speed_limit_threshold"`
	TachographSpeed     *model1.OrderBy `json:"tachograph_speed"`
}

// aggregate stddev_pop on columns
type VehicleLocationHisStddevPopFields struct {
	GpsSpeed            *float64 `json:"gps_speed"`
	ID                  *float64 `json:"id"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
}

// order by stddev_pop() on columns of table "vehicle_location_his"
type VehicleLocationHisStddevPopOrderBy struct {
	GpsSpeed            *model1.OrderBy `json:"gps_speed"`
	ID                  *model1.OrderBy `json:"id"`
	SpeedLimitThreshold *model1.OrderBy `json:"speed_limit_threshold"`
	TachographSpeed     *model1.OrderBy `json:"tachograph_speed"`
}

// aggregate stddev_samp on columns
type VehicleLocationHisStddevSampFields struct {
	GpsSpeed            *float64 `json:"gps_speed"`
	ID                  *float64 `json:"id"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
}

// order by stddev_samp() on columns of table "vehicle_location_his"
type VehicleLocationHisStddevSampOrderBy struct {
	GpsSpeed            *model1.OrderBy `json:"gps_speed"`
	ID                  *model1.OrderBy `json:"id"`
	SpeedLimitThreshold *model1.OrderBy `json:"speed_limit_threshold"`
	TachographSpeed     *model1.OrderBy `json:"tachograph_speed"`
}

// aggregate sum on columns
type VehicleLocationHisSumFields struct {
	GpsSpeed            *float64 `json:"gps_speed"`
	ID                  *int64   `json:"id"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
}

// order by sum() on columns of table "vehicle_location_his"
type VehicleLocationHisSumOrderBy struct {
	GpsSpeed            *model1.OrderBy `json:"gps_speed"`
	ID                  *model1.OrderBy `json:"id"`
	SpeedLimitThreshold *model1.OrderBy `json:"speed_limit_threshold"`
	TachographSpeed     *model1.OrderBy `json:"tachograph_speed"`
}

// aggregate var_pop on columns
type VehicleLocationHisVarPopFields struct {
	GpsSpeed            *float64 `json:"gps_speed"`
	ID                  *float64 `json:"id"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
}

// order by var_pop() on columns of table "vehicle_location_his"
type VehicleLocationHisVarPopOrderBy struct {
	GpsSpeed            *model1.OrderBy `json:"gps_speed"`
	ID                  *model1.OrderBy `json:"id"`
	SpeedLimitThreshold *model1.OrderBy `json:"speed_limit_threshold"`
	TachographSpeed     *model1.OrderBy `json:"tachograph_speed"`
}

// aggregate var_samp on columns
type VehicleLocationHisVarSampFields struct {
	GpsSpeed            *float64 `json:"gps_speed"`
	ID                  *float64 `json:"id"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
}

// order by var_samp() on columns of table "vehicle_location_his"
type VehicleLocationHisVarSampOrderBy struct {
	GpsSpeed            *model1.OrderBy `json:"gps_speed"`
	ID                  *model1.OrderBy `json:"id"`
	SpeedLimitThreshold *model1.OrderBy `json:"speed_limit_threshold"`
	TachographSpeed     *model1.OrderBy `json:"tachograph_speed"`
}

// aggregate variance on columns
type VehicleLocationHisVarianceFields struct {
	GpsSpeed            *float64 `json:"gps_speed"`
	ID                  *float64 `json:"id"`
	SpeedLimitThreshold *float64 `json:"speed_limit_threshold"`
	TachographSpeed     *float64 `json:"tachograph_speed"`
}

// order by variance() on columns of table "vehicle_location_his"
type VehicleLocationHisVarianceOrderBy struct {
	GpsSpeed            *model1.OrderBy `json:"gps_speed"`
	ID                  *model1.OrderBy `json:"id"`
	SpeedLimitThreshold *model1.OrderBy `json:"speed_limit_threshold"`
	TachographSpeed     *model1.OrderBy `json:"tachograph_speed"`
}

// unique or primary key constraints on table "vehicle_location_his"
type VehicleLocationHisConstraint string

const (
	// unique or primary key constraint
	VehicleLocationHisConstraintVehicleLocationHisPkey VehicleLocationHisConstraint = "vehicle_location_his_pkey"
)

var AllVehicleLocationHisConstraint = []VehicleLocationHisConstraint{
	VehicleLocationHisConstraintVehicleLocationHisPkey,
}

func (e VehicleLocationHisConstraint) IsValid() bool {
	switch e {
	case VehicleLocationHisConstraintVehicleLocationHisPkey:
		return true
	}
	return false
}

func (e VehicleLocationHisConstraint) String() string {
	return string(e)
}

func (e *VehicleLocationHisConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleLocationHisConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid vehicle_location_his_constraint", str)
	}
	return nil
}

func (e VehicleLocationHisConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// select columns of table "vehicle_location_his"
type VehicleLocationHisSelectColumn string

const (
	// column name
	VehicleLocationHisSelectColumnAcceleration VehicleLocationHisSelectColumn = "acceleration"
	// column name
	VehicleLocationHisSelectColumnAlarmContent VehicleLocationHisSelectColumn = "alarm_content"
	// column name
	VehicleLocationHisSelectColumnAlititude VehicleLocationHisSelectColumn = "alititude"
	// column name
	VehicleLocationHisSelectColumnCoordinate VehicleLocationHisSelectColumn = "coordinate"
	// column name
	VehicleLocationHisSelectColumnCorrectCoordinate VehicleLocationHisSelectColumn = "correct_coordinate"
	// column name
	VehicleLocationHisSelectColumnDirection VehicleLocationHisSelectColumn = "direction"
	// column name
	VehicleLocationHisSelectColumnDistrictID VehicleLocationHisSelectColumn = "district_id"
	// column name
	VehicleLocationHisSelectColumnDriverID VehicleLocationHisSelectColumn = "driver_id"
	// column name
	VehicleLocationHisSelectColumnEnterpriseID VehicleLocationHisSelectColumn = "enterprise_id"
	// column name
	VehicleLocationHisSelectColumnGpsSpeed VehicleLocationHisSelectColumn = "gps_speed"
	// column name
	VehicleLocationHisSelectColumnID VehicleLocationHisSelectColumn = "id"
	// column name
	VehicleLocationHisSelectColumnImei VehicleLocationHisSelectColumn = "imei"
	// column name
	VehicleLocationHisSelectColumnIsLocate VehicleLocationHisSelectColumn = "is_locate"
	// column name
	VehicleLocationHisSelectColumnLocateTime VehicleLocationHisSelectColumn = "locate_time"
	// column name
	VehicleLocationHisSelectColumnLocationDescription VehicleLocationHisSelectColumn = "location_description"
	// column name
	VehicleLocationHisSelectColumnMileage VehicleLocationHisSelectColumn = "mileage"
	// column name
	VehicleLocationHisSelectColumnRoadName VehicleLocationHisSelectColumn = "road_name"
	// column name
	VehicleLocationHisSelectColumnSimNumber VehicleLocationHisSelectColumn = "sim_number"
	// column name
	VehicleLocationHisSelectColumnSpeedLimitThreshold VehicleLocationHisSelectColumn = "speed_limit_threshold"
	// column name
	VehicleLocationHisSelectColumnStarCount VehicleLocationHisSelectColumn = "star_count"
	// column name
	VehicleLocationHisSelectColumnStarStatus VehicleLocationHisSelectColumn = "star_status"
	// column name
	VehicleLocationHisSelectColumnSupervisionPhotoID VehicleLocationHisSelectColumn = "supervision_photo_id"
	// column name
	VehicleLocationHisSelectColumnTachographSpeed VehicleLocationHisSelectColumn = "tachograph_speed"
	// column name
	VehicleLocationHisSelectColumnVehicleID VehicleLocationHisSelectColumn = "vehicle_id"
	// column name
	VehicleLocationHisSelectColumnVehicleStatus VehicleLocationHisSelectColumn = "vehicle_status"
)

var AllVehicleLocationHisSelectColumn = []VehicleLocationHisSelectColumn{
	VehicleLocationHisSelectColumnAcceleration,
	VehicleLocationHisSelectColumnAlarmContent,
	VehicleLocationHisSelectColumnAlititude,
	VehicleLocationHisSelectColumnCoordinate,
	VehicleLocationHisSelectColumnCorrectCoordinate,
	VehicleLocationHisSelectColumnDirection,
	VehicleLocationHisSelectColumnDistrictID,
	VehicleLocationHisSelectColumnDriverID,
	VehicleLocationHisSelectColumnEnterpriseID,
	VehicleLocationHisSelectColumnGpsSpeed,
	VehicleLocationHisSelectColumnID,
	VehicleLocationHisSelectColumnImei,
	VehicleLocationHisSelectColumnIsLocate,
	VehicleLocationHisSelectColumnLocateTime,
	VehicleLocationHisSelectColumnLocationDescription,
	VehicleLocationHisSelectColumnMileage,
	VehicleLocationHisSelectColumnRoadName,
	VehicleLocationHisSelectColumnSimNumber,
	VehicleLocationHisSelectColumnSpeedLimitThreshold,
	VehicleLocationHisSelectColumnStarCount,
	VehicleLocationHisSelectColumnStarStatus,
	VehicleLocationHisSelectColumnSupervisionPhotoID,
	VehicleLocationHisSelectColumnTachographSpeed,
	VehicleLocationHisSelectColumnVehicleID,
	VehicleLocationHisSelectColumnVehicleStatus,
}

func (e VehicleLocationHisSelectColumn) IsValid() bool {
	switch e {
	case VehicleLocationHisSelectColumnAcceleration, VehicleLocationHisSelectColumnAlarmContent, VehicleLocationHisSelectColumnAlititude, VehicleLocationHisSelectColumnCoordinate, VehicleLocationHisSelectColumnCorrectCoordinate, VehicleLocationHisSelectColumnDirection, VehicleLocationHisSelectColumnDistrictID, VehicleLocationHisSelectColumnDriverID, VehicleLocationHisSelectColumnEnterpriseID, VehicleLocationHisSelectColumnGpsSpeed, VehicleLocationHisSelectColumnID, VehicleLocationHisSelectColumnImei, VehicleLocationHisSelectColumnIsLocate, VehicleLocationHisSelectColumnLocateTime, VehicleLocationHisSelectColumnLocationDescription, VehicleLocationHisSelectColumnMileage, VehicleLocationHisSelectColumnRoadName, VehicleLocationHisSelectColumnSimNumber, VehicleLocationHisSelectColumnSpeedLimitThreshold, VehicleLocationHisSelectColumnStarCount, VehicleLocationHisSelectColumnStarStatus, VehicleLocationHisSelectColumnSupervisionPhotoID, VehicleLocationHisSelectColumnTachographSpeed, VehicleLocationHisSelectColumnVehicleID, VehicleLocationHisSelectColumnVehicleStatus:
		return true
	}
	return false
}

func (e VehicleLocationHisSelectColumn) String() string {
	return string(e)
}

func (e *VehicleLocationHisSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleLocationHisSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid vehicle_location_his_select_column", str)
	}
	return nil
}

func (e VehicleLocationHisSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// update columns of table "vehicle_location_his"
type VehicleLocationHisUpdateColumn string

const (
	// column name
	VehicleLocationHisUpdateColumnAcceleration VehicleLocationHisUpdateColumn = "acceleration"
	// column name
	VehicleLocationHisUpdateColumnAlarmContent VehicleLocationHisUpdateColumn = "alarm_content"
	// column name
	VehicleLocationHisUpdateColumnAlititude VehicleLocationHisUpdateColumn = "alititude"
	// column name
	VehicleLocationHisUpdateColumnCoordinate VehicleLocationHisUpdateColumn = "coordinate"
	// column name
	VehicleLocationHisUpdateColumnCorrectCoordinate VehicleLocationHisUpdateColumn = "correct_coordinate"
	// column name
	VehicleLocationHisUpdateColumnDirection VehicleLocationHisUpdateColumn = "direction"
	// column name
	VehicleLocationHisUpdateColumnDistrictID VehicleLocationHisUpdateColumn = "district_id"
	// column name
	VehicleLocationHisUpdateColumnDriverID VehicleLocationHisUpdateColumn = "driver_id"
	// column name
	VehicleLocationHisUpdateColumnEnterpriseID VehicleLocationHisUpdateColumn = "enterprise_id"
	// column name
	VehicleLocationHisUpdateColumnGpsSpeed VehicleLocationHisUpdateColumn = "gps_speed"
	// column name
	VehicleLocationHisUpdateColumnID VehicleLocationHisUpdateColumn = "id"
	// column name
	VehicleLocationHisUpdateColumnImei VehicleLocationHisUpdateColumn = "imei"
	// column name
	VehicleLocationHisUpdateColumnIsLocate VehicleLocationHisUpdateColumn = "is_locate"
	// column name
	VehicleLocationHisUpdateColumnLocateTime VehicleLocationHisUpdateColumn = "locate_time"
	// column name
	VehicleLocationHisUpdateColumnLocationDescription VehicleLocationHisUpdateColumn = "location_description"
	// column name
	VehicleLocationHisUpdateColumnMileage VehicleLocationHisUpdateColumn = "mileage"
	// column name
	VehicleLocationHisUpdateColumnRoadName VehicleLocationHisUpdateColumn = "road_name"
	// column name
	VehicleLocationHisUpdateColumnSimNumber VehicleLocationHisUpdateColumn = "sim_number"
	// column name
	VehicleLocationHisUpdateColumnSpeedLimitThreshold VehicleLocationHisUpdateColumn = "speed_limit_threshold"
	// column name
	VehicleLocationHisUpdateColumnStarCount VehicleLocationHisUpdateColumn = "star_count"
	// column name
	VehicleLocationHisUpdateColumnStarStatus VehicleLocationHisUpdateColumn = "star_status"
	// column name
	VehicleLocationHisUpdateColumnSupervisionPhotoID VehicleLocationHisUpdateColumn = "supervision_photo_id"
	// column name
	VehicleLocationHisUpdateColumnTachographSpeed VehicleLocationHisUpdateColumn = "tachograph_speed"
	// column name
	VehicleLocationHisUpdateColumnVehicleID VehicleLocationHisUpdateColumn = "vehicle_id"
	// column name
	VehicleLocationHisUpdateColumnVehicleStatus VehicleLocationHisUpdateColumn = "vehicle_status"
)

var AllVehicleLocationHisUpdateColumn = []VehicleLocationHisUpdateColumn{
	VehicleLocationHisUpdateColumnAcceleration,
	VehicleLocationHisUpdateColumnAlarmContent,
	VehicleLocationHisUpdateColumnAlititude,
	VehicleLocationHisUpdateColumnCoordinate,
	VehicleLocationHisUpdateColumnCorrectCoordinate,
	VehicleLocationHisUpdateColumnDirection,
	VehicleLocationHisUpdateColumnDistrictID,
	VehicleLocationHisUpdateColumnDriverID,
	VehicleLocationHisUpdateColumnEnterpriseID,
	VehicleLocationHisUpdateColumnGpsSpeed,
	VehicleLocationHisUpdateColumnID,
	VehicleLocationHisUpdateColumnImei,
	VehicleLocationHisUpdateColumnIsLocate,
	VehicleLocationHisUpdateColumnLocateTime,
	VehicleLocationHisUpdateColumnLocationDescription,
	VehicleLocationHisUpdateColumnMileage,
	VehicleLocationHisUpdateColumnRoadName,
	VehicleLocationHisUpdateColumnSimNumber,
	VehicleLocationHisUpdateColumnSpeedLimitThreshold,
	VehicleLocationHisUpdateColumnStarCount,
	VehicleLocationHisUpdateColumnStarStatus,
	VehicleLocationHisUpdateColumnSupervisionPhotoID,
	VehicleLocationHisUpdateColumnTachographSpeed,
	VehicleLocationHisUpdateColumnVehicleID,
	VehicleLocationHisUpdateColumnVehicleStatus,
}

func (e VehicleLocationHisUpdateColumn) IsValid() bool {
	switch e {
	case VehicleLocationHisUpdateColumnAcceleration, VehicleLocationHisUpdateColumnAlarmContent, VehicleLocationHisUpdateColumnAlititude, VehicleLocationHisUpdateColumnCoordinate, VehicleLocationHisUpdateColumnCorrectCoordinate, VehicleLocationHisUpdateColumnDirection, VehicleLocationHisUpdateColumnDistrictID, VehicleLocationHisUpdateColumnDriverID, VehicleLocationHisUpdateColumnEnterpriseID, VehicleLocationHisUpdateColumnGpsSpeed, VehicleLocationHisUpdateColumnID, VehicleLocationHisUpdateColumnImei, VehicleLocationHisUpdateColumnIsLocate, VehicleLocationHisUpdateColumnLocateTime, VehicleLocationHisUpdateColumnLocationDescription, VehicleLocationHisUpdateColumnMileage, VehicleLocationHisUpdateColumnRoadName, VehicleLocationHisUpdateColumnSimNumber, VehicleLocationHisUpdateColumnSpeedLimitThreshold, VehicleLocationHisUpdateColumnStarCount, VehicleLocationHisUpdateColumnStarStatus, VehicleLocationHisUpdateColumnSupervisionPhotoID, VehicleLocationHisUpdateColumnTachographSpeed, VehicleLocationHisUpdateColumnVehicleID, VehicleLocationHisUpdateColumnVehicleStatus:
		return true
	}
	return false
}

func (e VehicleLocationHisUpdateColumn) String() string {
	return string(e)
}

func (e *VehicleLocationHisUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleLocationHisUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid vehicle_location_his_update_column", str)
	}
	return nil
}

func (e VehicleLocationHisUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
