// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"VehicleSupervision/internal/modules/admin/systemuser/model"
	model1 "VehicleSupervision/pkg/graphql/model"
	"fmt"
	"io"
	"strconv"
	"time"
)

// aggregated selection of "system_user"
type SystemUserAggregate struct {
	Aggregate *SystemUserAggregateFields `json:"aggregate"`
	Nodes     []*model.SystemUser        `json:"nodes"`
}

// aggregate fields of "system_user"
type SystemUserAggregateFields struct {
	Avg        *SystemUserAvgFields        `json:"avg"`
	Count      *int                        `json:"count"`
	Max        *SystemUserMaxFields        `json:"max"`
	Min        *SystemUserMinFields        `json:"min"`
	Stddev     *SystemUserStddevFields     `json:"stddev"`
	StddevPop  *SystemUserStddevPopFields  `json:"stddev_pop"`
	StddevSamp *SystemUserStddevSampFields `json:"stddev_samp"`
	Sum        *SystemUserSumFields        `json:"sum"`
	VarPop     *SystemUserVarPopFields     `json:"var_pop"`
	VarSamp    *SystemUserVarSampFields    `json:"var_samp"`
	Variance   *SystemUserVarianceFields   `json:"variance"`
}

// order by aggregate values of table "system_user"
type SystemUserAggregateOrderBy struct {
	Avg        *SystemUserAvgOrderBy        `json:"avg"`
	Count      *model1.OrderBy              `json:"count"`
	Max        *SystemUserMaxOrderBy        `json:"max"`
	Min        *SystemUserMinOrderBy        `json:"min"`
	Stddev     *SystemUserStddevOrderBy     `json:"stddev"`
	StddevPop  *SystemUserStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *SystemUserStddevSampOrderBy `json:"stddev_samp"`
	Sum        *SystemUserSumOrderBy        `json:"sum"`
	VarPop     *SystemUserVarPopOrderBy     `json:"var_pop"`
	VarSamp    *SystemUserVarSampOrderBy    `json:"var_samp"`
	Variance   *SystemUserVarianceOrderBy   `json:"variance"`
}

// input type for inserting array relation for remote table "system_user"
type SystemUserArrRelInsertInput struct {
	Data       []*SystemUserInsertInput `json:"data"`
	OnConflict *SystemUserOnConflict    `json:"on_conflict"`
}

// aggregate avg on columns
type SystemUserAvgFields struct {
	AuditLevel *float64 `json:"audit_level"`
	Grade      *float64 `json:"grade"`
	ID         *float64 `json:"id"`
	UserState  *float64 `json:"user_state"`
	UserType   *float64 `json:"user_type"`
}

// order by avg() on columns of table "system_user"
type SystemUserAvgOrderBy struct {
	AuditLevel *model1.OrderBy `json:"audit_level"`
	Grade      *model1.OrderBy `json:"grade"`
	ID         *model1.OrderBy `json:"id"`
	UserState  *model1.OrderBy `json:"user_state"`
	UserType   *model1.OrderBy `json:"user_type"`
}

// Boolean expression to filter rows from the table "system_user". All fields are combined with a logical 'AND'.
type SystemUserBoolExp struct {
	IsBindIP     *model1.BooleanComparisonExp     `json:"Is_bind_ip"`
	And          []*SystemUserBoolExp             `json:"_and"`
	Not          *SystemUserBoolExp               `json:"_not"`
	Or           []*SystemUserBoolExp             `json:"_or"`
	AppVersion   *model1.StringComparisonExp      `json:"app_version"`
	AuditLevel   *model1.IntComparisonExp         `json:"audit_level"`
	CreateBy     *model1.StringComparisonExp      `json:"create_by"`
	CreatedAt    *model1.TimestamptzComparisonExp `json:"created_at"`
	DeleteAt     *model1.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy     *model1.StringComparisonExp      `json:"delete_by"`
	DepartmentID *model1.StringComparisonExp      `json:"department_id"`
	Email        *model1.StringComparisonExp      `json:"email"`
	EnterpriseID *model1.StringComparisonExp      `json:"enterprise_id"`
	Grade        *model1.IntComparisonExp         `json:"grade"`
	ID           *model1.BigintComparisonExp      `json:"id"`
	IPAddress    *model1.StringComparisonExp      `json:"ip_address"`
	IsDelete     *model1.BooleanComparisonExp     `json:"is_delete"`
	IsValid      *model1.BooleanComparisonExp     `json:"is_valid"`
	Mkey         *model1.StringComparisonExp      `json:"mkey"`
	Mobile       *model1.StringComparisonExp      `json:"mobile"`
	Password     *model1.StringComparisonExp      `json:"password"`
	ProxyUser    *model1.StringComparisonExp      `json:"proxy_user"`
	Remarks      *model1.StringComparisonExp      `json:"remarks"`
	Telephone    *model1.StringComparisonExp      `json:"telephone"`
	Username     *model1.StringComparisonExp      `json:"username"`
	Ukey         *model1.StringComparisonExp      `json:"ukey"`
	UpdateAt     *model1.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy     *model1.StringComparisonExp      `json:"update_by"`
	UserID       *model1.StringComparisonExp      `json:"user_id"`
	UserState    *model1.IntComparisonExp         `json:"user_state"`
	UserType     *model1.IntComparisonExp         `json:"user_type"`
}

// input type for incrementing integer column in table "system_user"
type SystemUserIncInput struct {
	AuditLevel *int   `json:"audit_level"`
	Grade      *int   `json:"grade"`
	ID         *int64 `json:"id"`
	UserState  *int   `json:"user_state"`
	UserType   *int   `json:"user_type"`
}

// input type for inserting data into table "system_user"
type SystemUserInsertInput struct {
	IsBindIP     *bool      `json:"Is_bind_ip"`
	AppVersion   *string    `json:"app_version"`
	AuditLevel   *int       `json:"audit_level"`
	CreateBy     *string    `json:"create_by"`
	CreatedAt    *time.Time `json:"created_at"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	DepartmentID *string    `json:"department_id"`
	Email        *string    `json:"email"`
	EnterpriseID *string    `json:"enterprise_id"`
	Grade        *int       `json:"grade"`
	ID           *int64     `json:"id"`
	IPAddress    *string    `json:"ip_address"`
	IsDelete     *bool      `json:"is_delete"`
	IsValid      *bool      `json:"is_valid"`
	Mkey         *string    `json:"mkey"`
	Mobile       *string    `json:"mobile"`
	Password     *string    `json:"password"`
	ProxyUser    *string    `json:"proxy_user"`
	Remarks      *string    `json:"remarks"`
	Telephone    *string    `json:"telephone"`
	Username     *string    `json:"username"`
	Ukey         *string    `json:"ukey"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	UserID       *string    `json:"user_id"`
	UserState    *int       `json:"user_state"`
	UserType     *int       `json:"user_type"`
}

// aggregate max on columns
type SystemUserMaxFields struct {
	AppVersion   *string    `json:"app_version"`
	AuditLevel   *int       `json:"audit_level"`
	CreateBy     *string    `json:"create_by"`
	CreatedAt    *time.Time `json:"created_at"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	DepartmentID *string    `json:"department_id"`
	Email        *string    `json:"email"`
	EnterpriseID *string    `json:"enterprise_id"`
	Grade        *int       `json:"grade"`
	ID           *int64     `json:"id"`
	IPAddress    *string    `json:"ip_address"`
	Mkey         *string    `json:"mkey"`
	Mobile       *string    `json:"mobile"`
	Password     *string    `json:"password"`
	ProxyUser    *string    `json:"proxy_user"`
	Remarks      *string    `json:"remarks"`
	Telephone    *string    `json:"telephone"`
	Username     *string    `json:"username"`
	Ukey         *string    `json:"ukey"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	UserID       *string    `json:"user_id"`
	UserState    *int       `json:"user_state"`
	UserType     *int       `json:"user_type"`
}

// order by max() on columns of table "system_user"
type SystemUserMaxOrderBy struct {
	AppVersion   *model1.OrderBy `json:"app_version"`
	AuditLevel   *model1.OrderBy `json:"audit_level"`
	CreateBy     *model1.OrderBy `json:"create_by"`
	CreatedAt    *model1.OrderBy `json:"created_at"`
	DeleteAt     *model1.OrderBy `json:"delete_at"`
	DeleteBy     *model1.OrderBy `json:"delete_by"`
	DepartmentID *model1.OrderBy `json:"department_id"`
	Email        *model1.OrderBy `json:"email"`
	EnterpriseID *model1.OrderBy `json:"enterprise_id"`
	Grade        *model1.OrderBy `json:"grade"`
	ID           *model1.OrderBy `json:"id"`
	IPAddress    *model1.OrderBy `json:"ip_address"`
	Mkey         *model1.OrderBy `json:"mkey"`
	Mobile       *model1.OrderBy `json:"mobile"`
	Password     *model1.OrderBy `json:"password"`
	ProxyUser    *model1.OrderBy `json:"proxy_user"`
	Remarks      *model1.OrderBy `json:"remarks"`
	Telephone    *model1.OrderBy `json:"telephone"`
	Username     *model1.OrderBy `json:"username"`
	Ukey         *model1.OrderBy `json:"ukey"`
	UpdateAt     *model1.OrderBy `json:"update_at"`
	UpdateBy     *model1.OrderBy `json:"update_by"`
	UserID       *model1.OrderBy `json:"user_id"`
	UserState    *model1.OrderBy `json:"user_state"`
	UserType     *model1.OrderBy `json:"user_type"`
}

// aggregate min on columns
type SystemUserMinFields struct {
	AppVersion   *string    `json:"app_version"`
	AuditLevel   *int       `json:"audit_level"`
	CreateBy     *string    `json:"create_by"`
	CreatedAt    *time.Time `json:"created_at"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	DepartmentID *string    `json:"department_id"`
	Email        *string    `json:"email"`
	EnterpriseID *string    `json:"enterprise_id"`
	Grade        *int       `json:"grade"`
	ID           *int64     `json:"id"`
	IPAddress    *string    `json:"ip_address"`
	Mkey         *string    `json:"mkey"`
	Mobile       *string    `json:"mobile"`
	Password     *string    `json:"password"`
	ProxyUser    *string    `json:"proxy_user"`
	Remarks      *string    `json:"remarks"`
	Telephone    *string    `json:"telephone"`
	Username     *string    `json:"username"`
	Ukey         *string    `json:"ukey"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	UserID       *string    `json:"user_id"`
	UserState    *int       `json:"user_state"`
	UserType     *int       `json:"user_type"`
}

// order by min() on columns of table "system_user"
type SystemUserMinOrderBy struct {
	AppVersion   *model1.OrderBy `json:"app_version"`
	AuditLevel   *model1.OrderBy `json:"audit_level"`
	CreateBy     *model1.OrderBy `json:"create_by"`
	CreatedAt    *model1.OrderBy `json:"created_at"`
	DeleteAt     *model1.OrderBy `json:"delete_at"`
	DeleteBy     *model1.OrderBy `json:"delete_by"`
	DepartmentID *model1.OrderBy `json:"department_id"`
	Email        *model1.OrderBy `json:"email"`
	EnterpriseID *model1.OrderBy `json:"enterprise_id"`
	Grade        *model1.OrderBy `json:"grade"`
	ID           *model1.OrderBy `json:"id"`
	IPAddress    *model1.OrderBy `json:"ip_address"`
	Mkey         *model1.OrderBy `json:"mkey"`
	Mobile       *model1.OrderBy `json:"mobile"`
	Password     *model1.OrderBy `json:"password"`
	ProxyUser    *model1.OrderBy `json:"proxy_user"`
	Remarks      *model1.OrderBy `json:"remarks"`
	Telephone    *model1.OrderBy `json:"telephone"`
	Username     *model1.OrderBy `json:"username"`
	Ukey         *model1.OrderBy `json:"ukey"`
	UpdateAt     *model1.OrderBy `json:"update_at"`
	UpdateBy     *model1.OrderBy `json:"update_by"`
	UserID       *model1.OrderBy `json:"user_id"`
	UserState    *model1.OrderBy `json:"user_state"`
	UserType     *model1.OrderBy `json:"user_type"`
}

// response of any mutation on the table "system_user"
type SystemUserMutationResponse struct {
	// number of affected rows by the mutation
	AffectedRows int `json:"affected_rows"`
	// data of the affected rows by the mutation
	Returning []*model.SystemUser `json:"returning"`
}

// input type for inserting object relation for remote table "system_user"
type SystemUserObjRelInsertInput struct {
	Data       *SystemUserInsertInput `json:"data"`
	OnConflict *SystemUserOnConflict  `json:"on_conflict"`
}

// on conflict condition type for table "system_user"
type SystemUserOnConflict struct {
	Constraint    SystemUserConstraint     `json:"constraint"`
	UpdateColumns []SystemUserUpdateColumn `json:"update_columns"`
	Where         *SystemUserBoolExp       `json:"where"`
}

// ordering options when selecting data from "system_user"
type SystemUserOrderBy struct {
	IsBindIP     *model1.OrderBy `json:"Is_bind_ip"`
	AppVersion   *model1.OrderBy `json:"app_version"`
	AuditLevel   *model1.OrderBy `json:"audit_level"`
	CreateBy     *model1.OrderBy `json:"create_by"`
	CreatedAt    *model1.OrderBy `json:"created_at"`
	DeleteAt     *model1.OrderBy `json:"delete_at"`
	DeleteBy     *model1.OrderBy `json:"delete_by"`
	DepartmentID *model1.OrderBy `json:"department_id"`
	Email        *model1.OrderBy `json:"email"`
	EnterpriseID *model1.OrderBy `json:"enterprise_id"`
	Grade        *model1.OrderBy `json:"grade"`
	ID           *model1.OrderBy `json:"id"`
	IPAddress    *model1.OrderBy `json:"ip_address"`
	IsDelete     *model1.OrderBy `json:"is_delete"`
	IsValid      *model1.OrderBy `json:"is_valid"`
	Mkey         *model1.OrderBy `json:"mkey"`
	Mobile       *model1.OrderBy `json:"mobile"`
	Password     *model1.OrderBy `json:"password"`
	ProxyUser    *model1.OrderBy `json:"proxy_user"`
	Remarks      *model1.OrderBy `json:"remarks"`
	Telephone    *model1.OrderBy `json:"telephone"`
	Username     *model1.OrderBy `json:"username"`
	Ukey         *model1.OrderBy `json:"ukey"`
	UpdateAt     *model1.OrderBy `json:"update_at"`
	UpdateBy     *model1.OrderBy `json:"update_by"`
	UserID       *model1.OrderBy `json:"user_id"`
	UserState    *model1.OrderBy `json:"user_state"`
	UserType     *model1.OrderBy `json:"user_type"`
}

// primary key columns input for table: "system_user"
type SystemUserPkColumnsInput struct {
	// ID
	ID int64 `json:"id"`
}

// input type for updating data in table "system_user"
type SystemUserSetInput struct {
	IsBindIP     *bool      `json:"Is_bind_ip"`
	AppVersion   *string    `json:"app_version"`
	AuditLevel   *int       `json:"audit_level"`
	CreateBy     *string    `json:"create_by"`
	CreatedAt    *time.Time `json:"created_at"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	DepartmentID *string    `json:"department_id"`
	Email        *string    `json:"email"`
	EnterpriseID *string    `json:"enterprise_id"`
	Grade        *int       `json:"grade"`
	ID           *int64     `json:"id"`
	IPAddress    *string    `json:"ip_address"`
	IsDelete     *bool      `json:"is_delete"`
	IsValid      *bool      `json:"is_valid"`
	Mkey         *string    `json:"mkey"`
	Mobile       *string    `json:"mobile"`
	Password     *string    `json:"password"`
	ProxyUser    *string    `json:"proxy_user"`
	Remarks      *string    `json:"remarks"`
	Telephone    *string    `json:"telephone"`
	Username     *string    `json:"username"`
	Ukey         *string    `json:"ukey"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	UserID       *string    `json:"user_id"`
	UserState    *int       `json:"user_state"`
	UserType     *int       `json:"user_type"`
}

// aggregate stddev on columns
type SystemUserStddevFields struct {
	AuditLevel *float64 `json:"audit_level"`
	Grade      *float64 `json:"grade"`
	ID         *float64 `json:"id"`
	UserState  *float64 `json:"user_state"`
	UserType   *float64 `json:"user_type"`
}

// order by stddev() on columns of table "system_user"
type SystemUserStddevOrderBy struct {
	AuditLevel *model1.OrderBy `json:"audit_level"`
	Grade      *model1.OrderBy `json:"grade"`
	ID         *model1.OrderBy `json:"id"`
	UserState  *model1.OrderBy `json:"user_state"`
	UserType   *model1.OrderBy `json:"user_type"`
}

// aggregate stddev_pop on columns
type SystemUserStddevPopFields struct {
	AuditLevel *float64 `json:"audit_level"`
	Grade      *float64 `json:"grade"`
	ID         *float64 `json:"id"`
	UserState  *float64 `json:"user_state"`
	UserType   *float64 `json:"user_type"`
}

// order by stddev_pop() on columns of table "system_user"
type SystemUserStddevPopOrderBy struct {
	AuditLevel *model1.OrderBy `json:"audit_level"`
	Grade      *model1.OrderBy `json:"grade"`
	ID         *model1.OrderBy `json:"id"`
	UserState  *model1.OrderBy `json:"user_state"`
	UserType   *model1.OrderBy `json:"user_type"`
}

// aggregate stddev_samp on columns
type SystemUserStddevSampFields struct {
	AuditLevel *float64 `json:"audit_level"`
	Grade      *float64 `json:"grade"`
	ID         *float64 `json:"id"`
	UserState  *float64 `json:"user_state"`
	UserType   *float64 `json:"user_type"`
}

// order by stddev_samp() on columns of table "system_user"
type SystemUserStddevSampOrderBy struct {
	AuditLevel *model1.OrderBy `json:"audit_level"`
	Grade      *model1.OrderBy `json:"grade"`
	ID         *model1.OrderBy `json:"id"`
	UserState  *model1.OrderBy `json:"user_state"`
	UserType   *model1.OrderBy `json:"user_type"`
}

// aggregate sum on columns
type SystemUserSumFields struct {
	AuditLevel *int   `json:"audit_level"`
	Grade      *int   `json:"grade"`
	ID         *int64 `json:"id"`
	UserState  *int   `json:"user_state"`
	UserType   *int   `json:"user_type"`
}

// order by sum() on columns of table "system_user"
type SystemUserSumOrderBy struct {
	AuditLevel *model1.OrderBy `json:"audit_level"`
	Grade      *model1.OrderBy `json:"grade"`
	ID         *model1.OrderBy `json:"id"`
	UserState  *model1.OrderBy `json:"user_state"`
	UserType   *model1.OrderBy `json:"user_type"`
}

// aggregate var_pop on columns
type SystemUserVarPopFields struct {
	AuditLevel *float64 `json:"audit_level"`
	Grade      *float64 `json:"grade"`
	ID         *float64 `json:"id"`
	UserState  *float64 `json:"user_state"`
	UserType   *float64 `json:"user_type"`
}

// order by var_pop() on columns of table "system_user"
type SystemUserVarPopOrderBy struct {
	AuditLevel *model1.OrderBy `json:"audit_level"`
	Grade      *model1.OrderBy `json:"grade"`
	ID         *model1.OrderBy `json:"id"`
	UserState  *model1.OrderBy `json:"user_state"`
	UserType   *model1.OrderBy `json:"user_type"`
}

// aggregate var_samp on columns
type SystemUserVarSampFields struct {
	AuditLevel *float64 `json:"audit_level"`
	Grade      *float64 `json:"grade"`
	ID         *float64 `json:"id"`
	UserState  *float64 `json:"user_state"`
	UserType   *float64 `json:"user_type"`
}

// order by var_samp() on columns of table "system_user"
type SystemUserVarSampOrderBy struct {
	AuditLevel *model1.OrderBy `json:"audit_level"`
	Grade      *model1.OrderBy `json:"grade"`
	ID         *model1.OrderBy `json:"id"`
	UserState  *model1.OrderBy `json:"user_state"`
	UserType   *model1.OrderBy `json:"user_type"`
}

// aggregate variance on columns
type SystemUserVarianceFields struct {
	AuditLevel *float64 `json:"audit_level"`
	Grade      *float64 `json:"grade"`
	ID         *float64 `json:"id"`
	UserState  *float64 `json:"user_state"`
	UserType   *float64 `json:"user_type"`
}

// order by variance() on columns of table "system_user"
type SystemUserVarianceOrderBy struct {
	AuditLevel *model1.OrderBy `json:"audit_level"`
	Grade      *model1.OrderBy `json:"grade"`
	ID         *model1.OrderBy `json:"id"`
	UserState  *model1.OrderBy `json:"user_state"`
	UserType   *model1.OrderBy `json:"user_type"`
}

// unique or primary key constraints on table "system_user"
type SystemUserConstraint string

const (
	// unique or primary key constraint
	SystemUserConstraintSystemUserPkey SystemUserConstraint = "system_user_pkey"
)

var AllSystemUserConstraint = []SystemUserConstraint{
	SystemUserConstraintSystemUserPkey,
}

func (e SystemUserConstraint) IsValid() bool {
	switch e {
	case SystemUserConstraintSystemUserPkey:
		return true
	}
	return false
}

func (e SystemUserConstraint) String() string {
	return string(e)
}

func (e *SystemUserConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SystemUserConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid system_user_constraint", str)
	}
	return nil
}

func (e SystemUserConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// select columns of table "system_user"
type SystemUserSelectColumn string

const (
	// column name
	SystemUserSelectColumnIsBindIP SystemUserSelectColumn = "Is_bind_ip"
	// column name
	SystemUserSelectColumnAppVersion SystemUserSelectColumn = "app_version"
	// column name
	SystemUserSelectColumnAuditLevel SystemUserSelectColumn = "audit_level"
	// column name
	SystemUserSelectColumnCreateBy SystemUserSelectColumn = "create_by"
	// column name
	SystemUserSelectColumnCreatedAt SystemUserSelectColumn = "created_at"
	// column name
	SystemUserSelectColumnDeleteAt SystemUserSelectColumn = "delete_at"
	// column name
	SystemUserSelectColumnDeleteBy SystemUserSelectColumn = "delete_by"
	// column name
	SystemUserSelectColumnDepartmentID SystemUserSelectColumn = "department_id"
	// column name
	SystemUserSelectColumnEmail SystemUserSelectColumn = "email"
	// column name
	SystemUserSelectColumnEnterpriseID SystemUserSelectColumn = "enterprise_id"
	// column name
	SystemUserSelectColumnGrade SystemUserSelectColumn = "grade"
	// column name
	SystemUserSelectColumnID SystemUserSelectColumn = "id"
	// column name
	SystemUserSelectColumnIPAddress SystemUserSelectColumn = "ip_address"
	// column name
	SystemUserSelectColumnIsDelete SystemUserSelectColumn = "is_delete"
	// column name
	SystemUserSelectColumnIsValid SystemUserSelectColumn = "is_valid"
	// column name
	SystemUserSelectColumnMkey SystemUserSelectColumn = "mkey"
	// column name
	SystemUserSelectColumnMobile SystemUserSelectColumn = "mobile"
	// column name
	SystemUserSelectColumnPassword SystemUserSelectColumn = "password"
	// column name
	SystemUserSelectColumnProxyUser SystemUserSelectColumn = "proxy_user"
	// column name
	SystemUserSelectColumnRemarks SystemUserSelectColumn = "remarks"
	// column name
	SystemUserSelectColumnTelephone SystemUserSelectColumn = "telephone"
	// column name
	SystemUserSelectColumnUsername SystemUserSelectColumn = "username"
	// column name
	SystemUserSelectColumnUkey SystemUserSelectColumn = "ukey"
	// column name
	SystemUserSelectColumnUpdateAt SystemUserSelectColumn = "update_at"
	// column name
	SystemUserSelectColumnUpdateBy SystemUserSelectColumn = "update_by"
	// column name
	SystemUserSelectColumnUserID SystemUserSelectColumn = "user_id"
	// column name
	SystemUserSelectColumnUserState SystemUserSelectColumn = "user_state"
	// column name
	SystemUserSelectColumnUserType SystemUserSelectColumn = "user_type"
)

var AllSystemUserSelectColumn = []SystemUserSelectColumn{
	SystemUserSelectColumnIsBindIP,
	SystemUserSelectColumnAppVersion,
	SystemUserSelectColumnAuditLevel,
	SystemUserSelectColumnCreateBy,
	SystemUserSelectColumnCreatedAt,
	SystemUserSelectColumnDeleteAt,
	SystemUserSelectColumnDeleteBy,
	SystemUserSelectColumnDepartmentID,
	SystemUserSelectColumnEmail,
	SystemUserSelectColumnEnterpriseID,
	SystemUserSelectColumnGrade,
	SystemUserSelectColumnID,
	SystemUserSelectColumnIPAddress,
	SystemUserSelectColumnIsDelete,
	SystemUserSelectColumnIsValid,
	SystemUserSelectColumnMkey,
	SystemUserSelectColumnMobile,
	SystemUserSelectColumnPassword,
	SystemUserSelectColumnProxyUser,
	SystemUserSelectColumnRemarks,
	SystemUserSelectColumnTelephone,
	SystemUserSelectColumnUsername,
	SystemUserSelectColumnUkey,
	SystemUserSelectColumnUpdateAt,
	SystemUserSelectColumnUpdateBy,
	SystemUserSelectColumnUserID,
	SystemUserSelectColumnUserState,
	SystemUserSelectColumnUserType,
}

func (e SystemUserSelectColumn) IsValid() bool {
	switch e {
	case SystemUserSelectColumnIsBindIP, SystemUserSelectColumnAppVersion, SystemUserSelectColumnAuditLevel, SystemUserSelectColumnCreateBy, SystemUserSelectColumnCreatedAt, SystemUserSelectColumnDeleteAt, SystemUserSelectColumnDeleteBy, SystemUserSelectColumnDepartmentID, SystemUserSelectColumnEmail, SystemUserSelectColumnEnterpriseID, SystemUserSelectColumnGrade, SystemUserSelectColumnID, SystemUserSelectColumnIPAddress, SystemUserSelectColumnIsDelete, SystemUserSelectColumnIsValid, SystemUserSelectColumnMkey, SystemUserSelectColumnMobile, SystemUserSelectColumnPassword, SystemUserSelectColumnProxyUser, SystemUserSelectColumnRemarks, SystemUserSelectColumnTelephone, SystemUserSelectColumnUsername, SystemUserSelectColumnUkey, SystemUserSelectColumnUpdateAt, SystemUserSelectColumnUpdateBy, SystemUserSelectColumnUserID, SystemUserSelectColumnUserState, SystemUserSelectColumnUserType:
		return true
	}
	return false
}

func (e SystemUserSelectColumn) String() string {
	return string(e)
}

func (e *SystemUserSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SystemUserSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid system_user_select_column", str)
	}
	return nil
}

func (e SystemUserSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// update columns of table "system_user"
type SystemUserUpdateColumn string

const (
	// column name
	SystemUserUpdateColumnIsBindIP SystemUserUpdateColumn = "Is_bind_ip"
	// column name
	SystemUserUpdateColumnAppVersion SystemUserUpdateColumn = "app_version"
	// column name
	SystemUserUpdateColumnAuditLevel SystemUserUpdateColumn = "audit_level"
	// column name
	SystemUserUpdateColumnCreateBy SystemUserUpdateColumn = "create_by"
	// column name
	SystemUserUpdateColumnCreatedAt SystemUserUpdateColumn = "created_at"
	// column name
	SystemUserUpdateColumnDeleteAt SystemUserUpdateColumn = "delete_at"
	// column name
	SystemUserUpdateColumnDeleteBy SystemUserUpdateColumn = "delete_by"
	// column name
	SystemUserUpdateColumnDepartmentID SystemUserUpdateColumn = "department_id"
	// column name
	SystemUserUpdateColumnEmail SystemUserUpdateColumn = "email"
	// column name
	SystemUserUpdateColumnEnterpriseID SystemUserUpdateColumn = "enterprise_id"
	// column name
	SystemUserUpdateColumnGrade SystemUserUpdateColumn = "grade"
	// column name
	SystemUserUpdateColumnID SystemUserUpdateColumn = "id"
	// column name
	SystemUserUpdateColumnIPAddress SystemUserUpdateColumn = "ip_address"
	// column name
	SystemUserUpdateColumnIsDelete SystemUserUpdateColumn = "is_delete"
	// column name
	SystemUserUpdateColumnIsValid SystemUserUpdateColumn = "is_valid"
	// column name
	SystemUserUpdateColumnMkey SystemUserUpdateColumn = "mkey"
	// column name
	SystemUserUpdateColumnMobile SystemUserUpdateColumn = "mobile"
	// column name
	SystemUserUpdateColumnPassword SystemUserUpdateColumn = "password"
	// column name
	SystemUserUpdateColumnProxyUser SystemUserUpdateColumn = "proxy_user"
	// column name
	SystemUserUpdateColumnRemarks SystemUserUpdateColumn = "remarks"
	// column name
	SystemUserUpdateColumnTelephone SystemUserUpdateColumn = "telephone"
	// column name
	SystemUserUpdateColumnUsername SystemUserUpdateColumn = "username"
	// column name
	SystemUserUpdateColumnUkey SystemUserUpdateColumn = "ukey"
	// column name
	SystemUserUpdateColumnUpdateAt SystemUserUpdateColumn = "update_at"
	// column name
	SystemUserUpdateColumnUpdateBy SystemUserUpdateColumn = "update_by"
	// column name
	SystemUserUpdateColumnUserID SystemUserUpdateColumn = "user_id"
	// column name
	SystemUserUpdateColumnUserState SystemUserUpdateColumn = "user_state"
	// column name
	SystemUserUpdateColumnUserType SystemUserUpdateColumn = "user_type"
)

var AllSystemUserUpdateColumn = []SystemUserUpdateColumn{
	SystemUserUpdateColumnIsBindIP,
	SystemUserUpdateColumnAppVersion,
	SystemUserUpdateColumnAuditLevel,
	SystemUserUpdateColumnCreateBy,
	SystemUserUpdateColumnCreatedAt,
	SystemUserUpdateColumnDeleteAt,
	SystemUserUpdateColumnDeleteBy,
	SystemUserUpdateColumnDepartmentID,
	SystemUserUpdateColumnEmail,
	SystemUserUpdateColumnEnterpriseID,
	SystemUserUpdateColumnGrade,
	SystemUserUpdateColumnID,
	SystemUserUpdateColumnIPAddress,
	SystemUserUpdateColumnIsDelete,
	SystemUserUpdateColumnIsValid,
	SystemUserUpdateColumnMkey,
	SystemUserUpdateColumnMobile,
	SystemUserUpdateColumnPassword,
	SystemUserUpdateColumnProxyUser,
	SystemUserUpdateColumnRemarks,
	SystemUserUpdateColumnTelephone,
	SystemUserUpdateColumnUsername,
	SystemUserUpdateColumnUkey,
	SystemUserUpdateColumnUpdateAt,
	SystemUserUpdateColumnUpdateBy,
	SystemUserUpdateColumnUserID,
	SystemUserUpdateColumnUserState,
	SystemUserUpdateColumnUserType,
}

func (e SystemUserUpdateColumn) IsValid() bool {
	switch e {
	case SystemUserUpdateColumnIsBindIP, SystemUserUpdateColumnAppVersion, SystemUserUpdateColumnAuditLevel, SystemUserUpdateColumnCreateBy, SystemUserUpdateColumnCreatedAt, SystemUserUpdateColumnDeleteAt, SystemUserUpdateColumnDeleteBy, SystemUserUpdateColumnDepartmentID, SystemUserUpdateColumnEmail, SystemUserUpdateColumnEnterpriseID, SystemUserUpdateColumnGrade, SystemUserUpdateColumnID, SystemUserUpdateColumnIPAddress, SystemUserUpdateColumnIsDelete, SystemUserUpdateColumnIsValid, SystemUserUpdateColumnMkey, SystemUserUpdateColumnMobile, SystemUserUpdateColumnPassword, SystemUserUpdateColumnProxyUser, SystemUserUpdateColumnRemarks, SystemUserUpdateColumnTelephone, SystemUserUpdateColumnUsername, SystemUserUpdateColumnUkey, SystemUserUpdateColumnUpdateAt, SystemUserUpdateColumnUpdateBy, SystemUserUpdateColumnUserID, SystemUserUpdateColumnUserState, SystemUserUpdateColumnUserType:
		return true
	}
	return false
}

func (e SystemUserUpdateColumn) String() string {
	return string(e)
}

func (e *SystemUserUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SystemUserUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid system_user_update_column", str)
	}
	return nil
}

func (e SystemUserUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
