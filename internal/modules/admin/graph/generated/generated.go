// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"VehicleSupervision/internal/modules/admin/graph/model"
	model1 "VehicleSupervision/internal/modules/admin/model"
	model2 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Department() DepartmentResolver
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Department struct {
		CreateAt           func(childComplexity int) int
		CreateBy           func(childComplexity int) int
		DeleteAt           func(childComplexity int) int
		DeleteBy           func(childComplexity int) int
		DepartmentCategory func(childComplexity int) int
		DepartmentCode     func(childComplexity int) int
		DepartmentID       func(childComplexity int) int
		DepartmentName     func(childComplexity int) int
		Enterprise         func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalNumber     func(childComplexity int) int
		IsDelete           func(childComplexity int) int
		Remarks            func(childComplexity int) int
		SuperiorDepartment func(childComplexity int) int
		UpdateAt           func(childComplexity int) int
		UpdateBy           func(childComplexity int) int
	}

	DepartmentAggregate struct {
		Aggregate func(childComplexity int) int
	}

	DepartmentAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DepartmentAvgFields struct {
		DepartmentCategory func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalNumber     func(childComplexity int) int
	}

	DepartmentMaxFields struct {
		CreateAt             func(childComplexity int) int
		CreateBy             func(childComplexity int) int
		DeleteAt             func(childComplexity int) int
		DeleteBy             func(childComplexity int) int
		DepartmentCategory   func(childComplexity int) int
		DepartmentCode       func(childComplexity int) int
		DepartmentID         func(childComplexity int) int
		DepartmentName       func(childComplexity int) int
		EnterpriseID         func(childComplexity int) int
		ID                   func(childComplexity int) int
		InternalNumber       func(childComplexity int) int
		IsDelete             func(childComplexity int) int
		Remarks              func(childComplexity int) int
		SuperiorDepartmentID func(childComplexity int) int
		UpdateAt             func(childComplexity int) int
		UpdateBy             func(childComplexity int) int
	}

	DepartmentMinFields struct {
		CreateAt             func(childComplexity int) int
		CreateBy             func(childComplexity int) int
		DeleteAt             func(childComplexity int) int
		DeleteBy             func(childComplexity int) int
		DepartmentCategory   func(childComplexity int) int
		DepartmentCode       func(childComplexity int) int
		DepartmentID         func(childComplexity int) int
		DepartmentName       func(childComplexity int) int
		EnterpriseID         func(childComplexity int) int
		ID                   func(childComplexity int) int
		InternalNumber       func(childComplexity int) int
		IsDelete             func(childComplexity int) int
		Remarks              func(childComplexity int) int
		SuperiorDepartmentID func(childComplexity int) int
		UpdateAt             func(childComplexity int) int
		UpdateBy             func(childComplexity int) int
	}

	DepartmentMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DepartmentStddevFields struct {
		DepartmentCategory func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalNumber     func(childComplexity int) int
	}

	DepartmentStddevPopFields struct {
		DepartmentCategory func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalNumber     func(childComplexity int) int
	}

	DepartmentStddevSampFields struct {
		DepartmentCategory func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalNumber     func(childComplexity int) int
	}

	DepartmentSumFields struct {
		DepartmentCategory func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalNumber     func(childComplexity int) int
	}

	DepartmentVarPopFields struct {
		DepartmentCategory func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalNumber     func(childComplexity int) int
	}

	DepartmentVarSampFields struct {
		DepartmentCategory func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalNumber     func(childComplexity int) int
	}

	DepartmentVarianceFields struct {
		DepartmentCategory func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalNumber     func(childComplexity int) int
	}

	Enterprise struct {
		AssociationReviewBy              func(childComplexity int) int
		AssociationReviewOpinion         func(childComplexity int) int
		AssociationReviewTime            func(childComplexity int) int
		BrigadeID                        func(childComplexity int) int
		BrigadeReviewBy                  func(childComplexity int) int
		BrigadeReviewOpinion             func(childComplexity int) int
		BrigadeReviewTime                func(childComplexity int) int
		BusinessLicenseExpiryDate        func(childComplexity int) int
		BusinessLicenseIssuanceDate      func(childComplexity int) int
		BusinessLicensePhoto             func(childComplexity int) int
		BusinessPhoto                    func(childComplexity int) int
		BusinessScope                    func(childComplexity int) int
		CheckStatus                      func(childComplexity int) int
		CityID                           func(childComplexity int) int
		CreateAt                         func(childComplexity int) int
		CreateBy                         func(childComplexity int) int
		CreditLevel                      func(childComplexity int) int
		CreditLevelRemark                func(childComplexity int) int
		DeleteAt                         func(childComplexity int) int
		DeleteBy                         func(childComplexity int) int
		DisplayNumber                    func(childComplexity int) int
		DistrictID                       func(childComplexity int) int
		EnterpriseAddress                func(childComplexity int) int
		EnterpriseCode                   func(childComplexity int) int
		EnterpriseID                     func(childComplexity int) int
		EnterpriseLevel                  func(childComplexity int) int
		EnterpriseName                   func(childComplexity int) int
		EnterpriseNature                 func(childComplexity int) int
		EnterpriseType                   func(childComplexity int) int
		EntrustedAgent                   func(childComplexity int) int
		EntrustedAgentIDCard             func(childComplexity int) int
		EntrustedAgentIDCardPhoto        func(childComplexity int) int
		EntrustedAgentPhone              func(childComplexity int) int
		FaxNumber                        func(childComplexity int) int
		ID                               func(childComplexity int) int
		InstitutionCategory              func(childComplexity int) int
		IsBlack                          func(childComplexity int) int
		IsCatalog                        func(childComplexity int) int
		IsDeleted                        func(childComplexity int) int
		IsExpire                         func(childComplexity int) int
		IsInput                          func(childComplexity int) int
		IsInstall                        func(childComplexity int) int
		IsKeyPoint                       func(childComplexity int) int
		IsUploadProvince                 func(childComplexity int) int
		LegalRepresentative              func(childComplexity int) int
		LegalRepresentativeIDCard        func(childComplexity int) int
		LegalRepresentativeIDCardPhoto   func(childComplexity int) int
		LegalRepresentativePhone         func(childComplexity int) int
		OperatingLicensePhoto            func(childComplexity int) int
		OrganizationCode                 func(childComplexity int) int
		OrganizationCodeCertificatePhoto func(childComplexity int) int
		PoliceStationID                  func(childComplexity int) int
		ProvinceID                       func(childComplexity int) int
		ProxyEnterpriseID                func(childComplexity int) int
		Remarks                          func(childComplexity int) int
		Score                            func(childComplexity int) int
		State                            func(childComplexity int) int
		SuperiorEnterpriseID             func(childComplexity int) int
		UpdateAt                         func(childComplexity int) int
		UpdateBy                         func(childComplexity int) int
		UpdateTimeIn                     func(childComplexity int) int
	}

	EnterpriseAggregate struct {
		Aggregate func(childComplexity int) int
	}

	EnterpriseAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	EnterpriseAlarmSendPolice struct {
		CreatedAt                   func(childComplexity int) int
		CreatedBy                   func(childComplexity int) int
		DeletedAt                   func(childComplexity int) int
		DeletedBy                   func(childComplexity int) int
		EnterpriseAlarmSendPoliceID func(childComplexity int) int
		EnterpriseContact           func(childComplexity int) int
		EnterpriseID                func(childComplexity int) int
		EnterpriseName              func(childComplexity int) int
		EnterprisePhone             func(childComplexity int) int
		ID                          func(childComplexity int) int
		PhliceDepartment            func(childComplexity int) int
		Police                      func(childComplexity int) int
		PolicePhone                 func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UpdatedBy                   func(childComplexity int) int
	}

	EnterpriseAlarmSendPoliceAggregate struct {
		Aggregate func(childComplexity int) int
	}

	EnterpriseAlarmSendPoliceAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	EnterpriseAlarmSendPoliceAvgFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseAlarmSendPoliceMaxFields struct {
		CreatedAt                   func(childComplexity int) int
		CreatedBy                   func(childComplexity int) int
		DeletedAt                   func(childComplexity int) int
		DeletedBy                   func(childComplexity int) int
		EnterpriseAlarmSendPoliceID func(childComplexity int) int
		EnterpriseContact           func(childComplexity int) int
		EnterpriseID                func(childComplexity int) int
		EnterpriseName              func(childComplexity int) int
		EnterprisePhone             func(childComplexity int) int
		ID                          func(childComplexity int) int
		PhliceDepartment            func(childComplexity int) int
		Police                      func(childComplexity int) int
		PolicePhone                 func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UpdatedBy                   func(childComplexity int) int
	}

	EnterpriseAlarmSendPoliceMinFields struct {
		CreatedAt                   func(childComplexity int) int
		CreatedBy                   func(childComplexity int) int
		DeletedAt                   func(childComplexity int) int
		DeletedBy                   func(childComplexity int) int
		EnterpriseAlarmSendPoliceID func(childComplexity int) int
		EnterpriseContact           func(childComplexity int) int
		EnterpriseID                func(childComplexity int) int
		EnterpriseName              func(childComplexity int) int
		EnterprisePhone             func(childComplexity int) int
		ID                          func(childComplexity int) int
		PhliceDepartment            func(childComplexity int) int
		Police                      func(childComplexity int) int
		PolicePhone                 func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UpdatedBy                   func(childComplexity int) int
	}

	EnterpriseAlarmSendPoliceMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	EnterpriseAlarmSendPoliceStddevFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseAlarmSendPoliceStddevPopFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseAlarmSendPoliceStddevSampFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseAlarmSendPoliceSumFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseAlarmSendPoliceVarPopFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseAlarmSendPoliceVarSampFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseAlarmSendPoliceVarianceFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseAvgFields struct {
		BusinessScope       func(childComplexity int) int
		CheckStatus         func(childComplexity int) int
		CityID              func(childComplexity int) int
		CreditLevel         func(childComplexity int) int
		DisplayNumber       func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		EnterpriseLevel     func(childComplexity int) int
		EnterpriseNature    func(childComplexity int) int
		EnterpriseType      func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstitutionCategory func(childComplexity int) int
		ProvinceID          func(childComplexity int) int
		Score               func(childComplexity int) int
		State               func(childComplexity int) int
	}

	EnterpriseContact struct {
		ContactID    func(childComplexity int) int
		CreateAt     func(childComplexity int) int
		CreateBy     func(childComplexity int) int
		DeleteAt     func(childComplexity int) int
		DeleteBy     func(childComplexity int) int
		Email        func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		ID           func(childComplexity int) int
		IsDelete     func(childComplexity int) int
		Mobile       func(childComplexity int) int
		Name         func(childComplexity int) int
		Phone        func(childComplexity int) int
		SortNum      func(childComplexity int) int
		UpdateAt     func(childComplexity int) int
		UpdateBy     func(childComplexity int) int
	}

	EnterpriseContactAggregate struct {
		Aggregate func(childComplexity int) int
	}

	EnterpriseContactAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	EnterpriseContactAvgFields struct {
		ID      func(childComplexity int) int
		SortNum func(childComplexity int) int
	}

	EnterpriseContactMaxFields struct {
		ContactID    func(childComplexity int) int
		CreateAt     func(childComplexity int) int
		CreateBy     func(childComplexity int) int
		DeleteAt     func(childComplexity int) int
		DeleteBy     func(childComplexity int) int
		Email        func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		ID           func(childComplexity int) int
		IsDelete     func(childComplexity int) int
		Mobile       func(childComplexity int) int
		Name         func(childComplexity int) int
		Phone        func(childComplexity int) int
		SortNum      func(childComplexity int) int
		UpdateAt     func(childComplexity int) int
		UpdateBy     func(childComplexity int) int
	}

	EnterpriseContactMinFields struct {
		ContactID    func(childComplexity int) int
		CreateAt     func(childComplexity int) int
		CreateBy     func(childComplexity int) int
		DeleteAt     func(childComplexity int) int
		DeleteBy     func(childComplexity int) int
		Email        func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		ID           func(childComplexity int) int
		IsDelete     func(childComplexity int) int
		Mobile       func(childComplexity int) int
		Name         func(childComplexity int) int
		Phone        func(childComplexity int) int
		SortNum      func(childComplexity int) int
		UpdateAt     func(childComplexity int) int
		UpdateBy     func(childComplexity int) int
	}

	EnterpriseContactMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	EnterpriseContactStddevFields struct {
		ID      func(childComplexity int) int
		SortNum func(childComplexity int) int
	}

	EnterpriseContactStddevPopFields struct {
		ID      func(childComplexity int) int
		SortNum func(childComplexity int) int
	}

	EnterpriseContactStddevSampFields struct {
		ID      func(childComplexity int) int
		SortNum func(childComplexity int) int
	}

	EnterpriseContactSumFields struct {
		ID      func(childComplexity int) int
		SortNum func(childComplexity int) int
	}

	EnterpriseContactVarPopFields struct {
		ID      func(childComplexity int) int
		SortNum func(childComplexity int) int
	}

	EnterpriseContactVarSampFields struct {
		ID      func(childComplexity int) int
		SortNum func(childComplexity int) int
	}

	EnterpriseContactVarianceFields struct {
		ID      func(childComplexity int) int
		SortNum func(childComplexity int) int
	}

	EnterpriseMaxFields struct {
		AssociationReviewBy              func(childComplexity int) int
		AssociationReviewOpinion         func(childComplexity int) int
		AssociationReviewTime            func(childComplexity int) int
		BrigadeID                        func(childComplexity int) int
		BrigadeReviewBy                  func(childComplexity int) int
		BrigadeReviewOpinion             func(childComplexity int) int
		BrigadeReviewTime                func(childComplexity int) int
		BusinessLicenseExpiryDate        func(childComplexity int) int
		BusinessLicenseIssuanceDate      func(childComplexity int) int
		BusinessLicensePhoto             func(childComplexity int) int
		BusinessPhoto                    func(childComplexity int) int
		BusinessScope                    func(childComplexity int) int
		CheckStatus                      func(childComplexity int) int
		CityID                           func(childComplexity int) int
		CreateAt                         func(childComplexity int) int
		CreateBy                         func(childComplexity int) int
		CreditLevel                      func(childComplexity int) int
		CreditLevelRemark                func(childComplexity int) int
		DeleteAt                         func(childComplexity int) int
		DeleteBy                         func(childComplexity int) int
		DisplayNumber                    func(childComplexity int) int
		DistrictID                       func(childComplexity int) int
		EnterpriseAddress                func(childComplexity int) int
		EnterpriseCode                   func(childComplexity int) int
		EnterpriseID                     func(childComplexity int) int
		EnterpriseLevel                  func(childComplexity int) int
		EnterpriseName                   func(childComplexity int) int
		EnterpriseNature                 func(childComplexity int) int
		EnterpriseType                   func(childComplexity int) int
		EntrustedAgent                   func(childComplexity int) int
		EntrustedAgentIDCard             func(childComplexity int) int
		EntrustedAgentIDCardPhoto        func(childComplexity int) int
		EntrustedAgentPhone              func(childComplexity int) int
		FaxNumber                        func(childComplexity int) int
		ID                               func(childComplexity int) int
		InstitutionCategory              func(childComplexity int) int
		IsBlack                          func(childComplexity int) int
		IsCatalog                        func(childComplexity int) int
		IsDeleted                        func(childComplexity int) int
		IsExpire                         func(childComplexity int) int
		IsInput                          func(childComplexity int) int
		IsInstall                        func(childComplexity int) int
		IsKeyPoint                       func(childComplexity int) int
		IsUploadProvince                 func(childComplexity int) int
		LegalRepresentative              func(childComplexity int) int
		LegalRepresentativeIDCard        func(childComplexity int) int
		LegalRepresentativeIDCardPhoto   func(childComplexity int) int
		LegalRepresentativePhone         func(childComplexity int) int
		OperatingLicensePhoto            func(childComplexity int) int
		OrganizationCode                 func(childComplexity int) int
		OrganizationCodeCertificatePhoto func(childComplexity int) int
		PoliceStationID                  func(childComplexity int) int
		ProvinceID                       func(childComplexity int) int
		ProxyEnterpriseID                func(childComplexity int) int
		Remarks                          func(childComplexity int) int
		Score                            func(childComplexity int) int
		State                            func(childComplexity int) int
		SuperiorEnterpriseID             func(childComplexity int) int
		UpdateAt                         func(childComplexity int) int
		UpdateBy                         func(childComplexity int) int
		UpdateTimeIn                     func(childComplexity int) int
	}

	EnterpriseMinFields struct {
		AssociationReviewBy              func(childComplexity int) int
		AssociationReviewOpinion         func(childComplexity int) int
		AssociationReviewTime            func(childComplexity int) int
		BrigadeID                        func(childComplexity int) int
		BrigadeReviewBy                  func(childComplexity int) int
		BrigadeReviewOpinion             func(childComplexity int) int
		BrigadeReviewTime                func(childComplexity int) int
		BusinessLicenseExpiryDate        func(childComplexity int) int
		BusinessLicenseIssuanceDate      func(childComplexity int) int
		BusinessLicensePhoto             func(childComplexity int) int
		BusinessPhoto                    func(childComplexity int) int
		BusinessScope                    func(childComplexity int) int
		CheckStatus                      func(childComplexity int) int
		CityID                           func(childComplexity int) int
		CreateAt                         func(childComplexity int) int
		CreateBy                         func(childComplexity int) int
		CreditLevel                      func(childComplexity int) int
		CreditLevelRemark                func(childComplexity int) int
		DeleteAt                         func(childComplexity int) int
		DeleteBy                         func(childComplexity int) int
		DisplayNumber                    func(childComplexity int) int
		DistrictID                       func(childComplexity int) int
		EnterpriseAddress                func(childComplexity int) int
		EnterpriseCode                   func(childComplexity int) int
		EnterpriseID                     func(childComplexity int) int
		EnterpriseLevel                  func(childComplexity int) int
		EnterpriseName                   func(childComplexity int) int
		EnterpriseNature                 func(childComplexity int) int
		EnterpriseType                   func(childComplexity int) int
		EntrustedAgent                   func(childComplexity int) int
		EntrustedAgentIDCard             func(childComplexity int) int
		EntrustedAgentIDCardPhoto        func(childComplexity int) int
		EntrustedAgentPhone              func(childComplexity int) int
		FaxNumber                        func(childComplexity int) int
		ID                               func(childComplexity int) int
		InstitutionCategory              func(childComplexity int) int
		IsBlack                          func(childComplexity int) int
		IsCatalog                        func(childComplexity int) int
		IsDeleted                        func(childComplexity int) int
		IsExpire                         func(childComplexity int) int
		IsInput                          func(childComplexity int) int
		IsInstall                        func(childComplexity int) int
		IsKeyPoint                       func(childComplexity int) int
		IsUploadProvince                 func(childComplexity int) int
		LegalRepresentative              func(childComplexity int) int
		LegalRepresentativeIDCard        func(childComplexity int) int
		LegalRepresentativeIDCardPhoto   func(childComplexity int) int
		LegalRepresentativePhone         func(childComplexity int) int
		OperatingLicensePhoto            func(childComplexity int) int
		OrganizationCode                 func(childComplexity int) int
		OrganizationCodeCertificatePhoto func(childComplexity int) int
		PoliceStationID                  func(childComplexity int) int
		ProvinceID                       func(childComplexity int) int
		ProxyEnterpriseID                func(childComplexity int) int
		Remarks                          func(childComplexity int) int
		Score                            func(childComplexity int) int
		State                            func(childComplexity int) int
		SuperiorEnterpriseID             func(childComplexity int) int
		UpdateAt                         func(childComplexity int) int
		UpdateBy                         func(childComplexity int) int
		UpdateTimeIn                     func(childComplexity int) int
	}

	EnterpriseMuckTrunk struct {
		AllowGeneratePreviewNum     func(childComplexity int) int
		CityCheckState              func(childComplexity int) int
		CompanyManager              func(childComplexity int) int
		CompanyManagerIDCard        func(childComplexity int) int
		CompanyManagerPhone         func(childComplexity int) int
		CompanySafeManager          func(childComplexity int) int
		CompanySafeManagerIDCard    func(childComplexity int) int
		CompanySafeMangerPhone      func(childComplexity int) int
		CountyCheckState            func(childComplexity int) int
		CreateAt                    func(childComplexity int) int
		CreateBy                    func(childComplexity int) int
		DeleteAt                    func(childComplexity int) int
		DeleteBy                    func(childComplexity int) int
		EnterpriseID                func(childComplexity int) int
		EnterpriseMuckTrunkID       func(childComplexity int) int
		ID                          func(childComplexity int) int
		IsDelete                    func(childComplexity int) int
		IsTransportAdd              func(childComplexity int) int
		IsTypeA                     func(childComplexity int) int
		IsTypeB                     func(childComplexity int) int
		IsTypeC                     func(childComplexity int) int
		IsTypeD                     func(childComplexity int) int
		IsTypeE                     func(childComplexity int) int
		OfficeAddress               func(childComplexity int) int
		OfficeArea                  func(childComplexity int) int
		OfficePhoto                 func(childComplexity int) int
		ParkingAddress              func(childComplexity int) int
		ParkingArea                 func(childComplexity int) int
		ParkingSingleArea           func(childComplexity int) int
		PromiseBookURL              func(childComplexity int) int
		PromiseRemark               func(childComplexity int) int
		RoadLicense                 func(childComplexity int) int
		RoadLicensePhoto            func(childComplexity int) int
		RoutelineCardPromisePhoto   func(childComplexity int) int
		SmartCarCount               func(childComplexity int) int
		TransportLiablePromisePhoto func(childComplexity int) int
		TransportType               func(childComplexity int) int
		UpdateAt                    func(childComplexity int) int
		UpdateBy                    func(childComplexity int) int
	}

	EnterpriseMuckTrunkAggregate struct {
		Aggregate func(childComplexity int) int
	}

	EnterpriseMuckTrunkAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	EnterpriseMuckTrunkAvgFields struct {
		ID            func(childComplexity int) int
		SmartCarCount func(childComplexity int) int
		TransportType func(childComplexity int) int
	}

	EnterpriseMuckTrunkMaxFields struct {
		AllowGeneratePreviewNum     func(childComplexity int) int
		CityCheckState              func(childComplexity int) int
		CompanyManager              func(childComplexity int) int
		CompanyManagerIDCard        func(childComplexity int) int
		CompanyManagerPhone         func(childComplexity int) int
		CompanySafeManager          func(childComplexity int) int
		CompanySafeManagerIDCard    func(childComplexity int) int
		CompanySafeMangerPhone      func(childComplexity int) int
		CountyCheckState            func(childComplexity int) int
		CreateAt                    func(childComplexity int) int
		CreateBy                    func(childComplexity int) int
		DeleteAt                    func(childComplexity int) int
		DeleteBy                    func(childComplexity int) int
		EnterpriseID                func(childComplexity int) int
		EnterpriseMuckTrunkID       func(childComplexity int) int
		ID                          func(childComplexity int) int
		IsDelete                    func(childComplexity int) int
		IsTransportAdd              func(childComplexity int) int
		IsTypeA                     func(childComplexity int) int
		IsTypeB                     func(childComplexity int) int
		IsTypeC                     func(childComplexity int) int
		IsTypeD                     func(childComplexity int) int
		IsTypeE                     func(childComplexity int) int
		OfficeAddress               func(childComplexity int) int
		OfficeArea                  func(childComplexity int) int
		OfficePhoto                 func(childComplexity int) int
		ParkingAddress              func(childComplexity int) int
		ParkingArea                 func(childComplexity int) int
		ParkingSingleArea           func(childComplexity int) int
		PromiseBookURL              func(childComplexity int) int
		PromiseRemark               func(childComplexity int) int
		RoadLicense                 func(childComplexity int) int
		RoadLicensePhoto            func(childComplexity int) int
		RoutelineCardPromisePhoto   func(childComplexity int) int
		SmartCarCount               func(childComplexity int) int
		TransportLiablePromisePhoto func(childComplexity int) int
		TransportType               func(childComplexity int) int
		UpdateAt                    func(childComplexity int) int
		UpdateBy                    func(childComplexity int) int
	}

	EnterpriseMuckTrunkMinFields struct {
		AllowGeneratePreviewNum     func(childComplexity int) int
		CityCheckState              func(childComplexity int) int
		CompanyManager              func(childComplexity int) int
		CompanyManagerIDCard        func(childComplexity int) int
		CompanyManagerPhone         func(childComplexity int) int
		CompanySafeManager          func(childComplexity int) int
		CompanySafeManagerIDCard    func(childComplexity int) int
		CompanySafeMangerPhone      func(childComplexity int) int
		CountyCheckState            func(childComplexity int) int
		CreateAt                    func(childComplexity int) int
		CreateBy                    func(childComplexity int) int
		DeleteAt                    func(childComplexity int) int
		DeleteBy                    func(childComplexity int) int
		EnterpriseID                func(childComplexity int) int
		EnterpriseMuckTrunkID       func(childComplexity int) int
		ID                          func(childComplexity int) int
		IsDelete                    func(childComplexity int) int
		IsTransportAdd              func(childComplexity int) int
		IsTypeA                     func(childComplexity int) int
		IsTypeB                     func(childComplexity int) int
		IsTypeC                     func(childComplexity int) int
		IsTypeD                     func(childComplexity int) int
		IsTypeE                     func(childComplexity int) int
		OfficeAddress               func(childComplexity int) int
		OfficeArea                  func(childComplexity int) int
		OfficePhoto                 func(childComplexity int) int
		ParkingAddress              func(childComplexity int) int
		ParkingArea                 func(childComplexity int) int
		ParkingSingleArea           func(childComplexity int) int
		PromiseBookURL              func(childComplexity int) int
		PromiseRemark               func(childComplexity int) int
		RoadLicense                 func(childComplexity int) int
		RoadLicensePhoto            func(childComplexity int) int
		RoutelineCardPromisePhoto   func(childComplexity int) int
		SmartCarCount               func(childComplexity int) int
		TransportLiablePromisePhoto func(childComplexity int) int
		TransportType               func(childComplexity int) int
		UpdateAt                    func(childComplexity int) int
		UpdateBy                    func(childComplexity int) int
	}

	EnterpriseMuckTrunkMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	EnterpriseMuckTrunkStddevFields struct {
		ID            func(childComplexity int) int
		SmartCarCount func(childComplexity int) int
		TransportType func(childComplexity int) int
	}

	EnterpriseMuckTrunkStddevPopFields struct {
		ID            func(childComplexity int) int
		SmartCarCount func(childComplexity int) int
		TransportType func(childComplexity int) int
	}

	EnterpriseMuckTrunkStddevSampFields struct {
		ID            func(childComplexity int) int
		SmartCarCount func(childComplexity int) int
		TransportType func(childComplexity int) int
	}

	EnterpriseMuckTrunkSumFields struct {
		ID            func(childComplexity int) int
		SmartCarCount func(childComplexity int) int
		TransportType func(childComplexity int) int
	}

	EnterpriseMuckTrunkVarPopFields struct {
		ID            func(childComplexity int) int
		SmartCarCount func(childComplexity int) int
		TransportType func(childComplexity int) int
	}

	EnterpriseMuckTrunkVarSampFields struct {
		ID            func(childComplexity int) int
		SmartCarCount func(childComplexity int) int
		TransportType func(childComplexity int) int
	}

	EnterpriseMuckTrunkVarianceFields struct {
		ID            func(childComplexity int) int
		SmartCarCount func(childComplexity int) int
		TransportType func(childComplexity int) int
	}

	EnterpriseMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	EnterpriseScoreLog struct {
		AddScore     func(childComplexity int) int
		Content      func(childComplexity int) int
		CreateAt     func(childComplexity int) int
		CreateBy     func(childComplexity int) int
		CurrentScore func(childComplexity int) int
		DeleteAt     func(childComplexity int) int
		DeleteBy     func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		FileURL      func(childComplexity int) int
		ID           func(childComplexity int) int
		IsDelete     func(childComplexity int) int
		LogID        func(childComplexity int) int
		ScoreSetID   func(childComplexity int) int
		UpdateAt     func(childComplexity int) int
		UpdateBy     func(childComplexity int) int
	}

	EnterpriseScoreLogAggregate struct {
		Aggregate func(childComplexity int) int
	}

	EnterpriseScoreLogAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	EnterpriseScoreLogAvgFields struct {
		AddScore     func(childComplexity int) int
		CurrentScore func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	EnterpriseScoreLogMaxFields struct {
		AddScore     func(childComplexity int) int
		Content      func(childComplexity int) int
		CreateAt     func(childComplexity int) int
		CreateBy     func(childComplexity int) int
		CurrentScore func(childComplexity int) int
		DeleteAt     func(childComplexity int) int
		DeleteBy     func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		FileURL      func(childComplexity int) int
		ID           func(childComplexity int) int
		IsDelete     func(childComplexity int) int
		LogID        func(childComplexity int) int
		ScoreSetID   func(childComplexity int) int
		UpdateAt     func(childComplexity int) int
		UpdateBy     func(childComplexity int) int
	}

	EnterpriseScoreLogMinFields struct {
		AddScore     func(childComplexity int) int
		Content      func(childComplexity int) int
		CreateAt     func(childComplexity int) int
		CreateBy     func(childComplexity int) int
		CurrentScore func(childComplexity int) int
		DeleteAt     func(childComplexity int) int
		DeleteBy     func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		FileURL      func(childComplexity int) int
		ID           func(childComplexity int) int
		IsDelete     func(childComplexity int) int
		LogID        func(childComplexity int) int
		ScoreSetID   func(childComplexity int) int
		UpdateAt     func(childComplexity int) int
		UpdateBy     func(childComplexity int) int
	}

	EnterpriseScoreLogMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	EnterpriseScoreLogStddevFields struct {
		AddScore     func(childComplexity int) int
		CurrentScore func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	EnterpriseScoreLogStddevPopFields struct {
		AddScore     func(childComplexity int) int
		CurrentScore func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	EnterpriseScoreLogStddevSampFields struct {
		AddScore     func(childComplexity int) int
		CurrentScore func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	EnterpriseScoreLogSumFields struct {
		AddScore     func(childComplexity int) int
		CurrentScore func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	EnterpriseScoreLogVarPopFields struct {
		AddScore     func(childComplexity int) int
		CurrentScore func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	EnterpriseScoreLogVarSampFields struct {
		AddScore     func(childComplexity int) int
		CurrentScore func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	EnterpriseScoreLogVarianceFields struct {
		AddScore     func(childComplexity int) int
		CurrentScore func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	EnterpriseScoreSet struct {
		Content    func(childComplexity int) int
		CreateAt   func(childComplexity int) int
		CreateBy   func(childComplexity int) int
		DeleteAt   func(childComplexity int) int
		DeleteBy   func(childComplexity int) int
		ID         func(childComplexity int) int
		IsDelete   func(childComplexity int) int
		Score      func(childComplexity int) int
		ScoreSetID func(childComplexity int) int
		Type       func(childComplexity int) int
		UpdateAt   func(childComplexity int) int
		UpdateBy   func(childComplexity int) int
	}

	EnterpriseScoreSetAggregate struct {
		Aggregate func(childComplexity int) int
	}

	EnterpriseScoreSetAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	EnterpriseScoreSetAvgFields struct {
		ID    func(childComplexity int) int
		Score func(childComplexity int) int
		Type  func(childComplexity int) int
	}

	EnterpriseScoreSetMaxFields struct {
		Content    func(childComplexity int) int
		CreateAt   func(childComplexity int) int
		CreateBy   func(childComplexity int) int
		DeleteAt   func(childComplexity int) int
		DeleteBy   func(childComplexity int) int
		ID         func(childComplexity int) int
		IsDelete   func(childComplexity int) int
		Score      func(childComplexity int) int
		ScoreSetID func(childComplexity int) int
		Type       func(childComplexity int) int
		UpdateAt   func(childComplexity int) int
		UpdateBy   func(childComplexity int) int
	}

	EnterpriseScoreSetMinFields struct {
		Content    func(childComplexity int) int
		CreateAt   func(childComplexity int) int
		CreateBy   func(childComplexity int) int
		DeleteAt   func(childComplexity int) int
		DeleteBy   func(childComplexity int) int
		ID         func(childComplexity int) int
		IsDelete   func(childComplexity int) int
		Score      func(childComplexity int) int
		ScoreSetID func(childComplexity int) int
		Type       func(childComplexity int) int
		UpdateAt   func(childComplexity int) int
		UpdateBy   func(childComplexity int) int
	}

	EnterpriseScoreSetMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	EnterpriseScoreSetStddevFields struct {
		ID    func(childComplexity int) int
		Score func(childComplexity int) int
		Type  func(childComplexity int) int
	}

	EnterpriseScoreSetStddevPopFields struct {
		ID    func(childComplexity int) int
		Score func(childComplexity int) int
		Type  func(childComplexity int) int
	}

	EnterpriseScoreSetStddevSampFields struct {
		ID    func(childComplexity int) int
		Score func(childComplexity int) int
		Type  func(childComplexity int) int
	}

	EnterpriseScoreSetSumFields struct {
		ID    func(childComplexity int) int
		Score func(childComplexity int) int
		Type  func(childComplexity int) int
	}

	EnterpriseScoreSetVarPopFields struct {
		ID    func(childComplexity int) int
		Score func(childComplexity int) int
		Type  func(childComplexity int) int
	}

	EnterpriseScoreSetVarSampFields struct {
		ID    func(childComplexity int) int
		Score func(childComplexity int) int
		Type  func(childComplexity int) int
	}

	EnterpriseScoreSetVarianceFields struct {
		ID    func(childComplexity int) int
		Score func(childComplexity int) int
		Type  func(childComplexity int) int
	}

	EnterpriseStateHis struct {
		CreateAt     func(childComplexity int) int
		CreateBy     func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		FileURL      func(childComplexity int) int
		ID           func(childComplexity int) int
		Reason       func(childComplexity int) int
		State        func(childComplexity int) int
		StateHisID   func(childComplexity int) int
	}

	EnterpriseStateHisAggregate struct {
		Aggregate func(childComplexity int) int
	}

	EnterpriseStateHisAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	EnterpriseStateHisAvgFields struct {
		ID    func(childComplexity int) int
		State func(childComplexity int) int
	}

	EnterpriseStateHisMaxFields struct {
		CreateAt     func(childComplexity int) int
		CreateBy     func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		FileURL      func(childComplexity int) int
		ID           func(childComplexity int) int
		Reason       func(childComplexity int) int
		State        func(childComplexity int) int
		StateHisID   func(childComplexity int) int
	}

	EnterpriseStateHisMinFields struct {
		CreateAt     func(childComplexity int) int
		CreateBy     func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		FileURL      func(childComplexity int) int
		ID           func(childComplexity int) int
		Reason       func(childComplexity int) int
		State        func(childComplexity int) int
		StateHisID   func(childComplexity int) int
	}

	EnterpriseStateHisMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	EnterpriseStateHisStddevFields struct {
		ID    func(childComplexity int) int
		State func(childComplexity int) int
	}

	EnterpriseStateHisStddevPopFields struct {
		ID    func(childComplexity int) int
		State func(childComplexity int) int
	}

	EnterpriseStateHisStddevSampFields struct {
		ID    func(childComplexity int) int
		State func(childComplexity int) int
	}

	EnterpriseStateHisSumFields struct {
		ID    func(childComplexity int) int
		State func(childComplexity int) int
	}

	EnterpriseStateHisVarPopFields struct {
		ID    func(childComplexity int) int
		State func(childComplexity int) int
	}

	EnterpriseStateHisVarSampFields struct {
		ID    func(childComplexity int) int
		State func(childComplexity int) int
	}

	EnterpriseStateHisVarianceFields struct {
		ID    func(childComplexity int) int
		State func(childComplexity int) int
	}

	EnterpriseStddevFields struct {
		BusinessScope       func(childComplexity int) int
		CheckStatus         func(childComplexity int) int
		CityID              func(childComplexity int) int
		CreditLevel         func(childComplexity int) int
		DisplayNumber       func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		EnterpriseLevel     func(childComplexity int) int
		EnterpriseNature    func(childComplexity int) int
		EnterpriseType      func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstitutionCategory func(childComplexity int) int
		ProvinceID          func(childComplexity int) int
		Score               func(childComplexity int) int
		State               func(childComplexity int) int
	}

	EnterpriseStddevPopFields struct {
		BusinessScope       func(childComplexity int) int
		CheckStatus         func(childComplexity int) int
		CityID              func(childComplexity int) int
		CreditLevel         func(childComplexity int) int
		DisplayNumber       func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		EnterpriseLevel     func(childComplexity int) int
		EnterpriseNature    func(childComplexity int) int
		EnterpriseType      func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstitutionCategory func(childComplexity int) int
		ProvinceID          func(childComplexity int) int
		Score               func(childComplexity int) int
		State               func(childComplexity int) int
	}

	EnterpriseStddevSampFields struct {
		BusinessScope       func(childComplexity int) int
		CheckStatus         func(childComplexity int) int
		CityID              func(childComplexity int) int
		CreditLevel         func(childComplexity int) int
		DisplayNumber       func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		EnterpriseLevel     func(childComplexity int) int
		EnterpriseNature    func(childComplexity int) int
		EnterpriseType      func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstitutionCategory func(childComplexity int) int
		ProvinceID          func(childComplexity int) int
		Score               func(childComplexity int) int
		State               func(childComplexity int) int
	}

	EnterpriseSumFields struct {
		BusinessScope       func(childComplexity int) int
		CheckStatus         func(childComplexity int) int
		CityID              func(childComplexity int) int
		CreditLevel         func(childComplexity int) int
		DisplayNumber       func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		EnterpriseLevel     func(childComplexity int) int
		EnterpriseNature    func(childComplexity int) int
		EnterpriseType      func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstitutionCategory func(childComplexity int) int
		ProvinceID          func(childComplexity int) int
		Score               func(childComplexity int) int
		State               func(childComplexity int) int
	}

	EnterpriseUkey struct {
		CreateAt     func(childComplexity int) int
		CreateBy     func(childComplexity int) int
		DeleteAt     func(childComplexity int) int
		DeleteBy     func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		ID           func(childComplexity int) int
		IsDelete     func(childComplexity int) int
		UkeyID       func(childComplexity int) int
		UpdateAt     func(childComplexity int) int
		UpdateBy     func(childComplexity int) int
	}

	EnterpriseUkeyAggregate struct {
		Aggregate func(childComplexity int) int
	}

	EnterpriseUkeyAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	EnterpriseUkeyAvgFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseUkeyMaxFields struct {
		CreateAt     func(childComplexity int) int
		CreateBy     func(childComplexity int) int
		DeleteAt     func(childComplexity int) int
		DeleteBy     func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		ID           func(childComplexity int) int
		IsDelete     func(childComplexity int) int
		UkeyID       func(childComplexity int) int
		UpdateAt     func(childComplexity int) int
		UpdateBy     func(childComplexity int) int
	}

	EnterpriseUkeyMinFields struct {
		CreateAt     func(childComplexity int) int
		CreateBy     func(childComplexity int) int
		DeleteAt     func(childComplexity int) int
		DeleteBy     func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		ID           func(childComplexity int) int
		IsDelete     func(childComplexity int) int
		UkeyID       func(childComplexity int) int
		UpdateAt     func(childComplexity int) int
		UpdateBy     func(childComplexity int) int
	}

	EnterpriseUkeyMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	EnterpriseUkeyStddevFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseUkeyStddevPopFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseUkeyStddevSampFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseUkeySumFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseUkeyVarPopFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseUkeyVarSampFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseUkeyVarianceFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseVarPopFields struct {
		BusinessScope       func(childComplexity int) int
		CheckStatus         func(childComplexity int) int
		CityID              func(childComplexity int) int
		CreditLevel         func(childComplexity int) int
		DisplayNumber       func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		EnterpriseLevel     func(childComplexity int) int
		EnterpriseNature    func(childComplexity int) int
		EnterpriseType      func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstitutionCategory func(childComplexity int) int
		ProvinceID          func(childComplexity int) int
		Score               func(childComplexity int) int
		State               func(childComplexity int) int
	}

	EnterpriseVarSampFields struct {
		BusinessScope       func(childComplexity int) int
		CheckStatus         func(childComplexity int) int
		CityID              func(childComplexity int) int
		CreditLevel         func(childComplexity int) int
		DisplayNumber       func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		EnterpriseLevel     func(childComplexity int) int
		EnterpriseNature    func(childComplexity int) int
		EnterpriseType      func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstitutionCategory func(childComplexity int) int
		ProvinceID          func(childComplexity int) int
		Score               func(childComplexity int) int
		State               func(childComplexity int) int
	}

	EnterpriseVarianceFields struct {
		BusinessScope       func(childComplexity int) int
		CheckStatus         func(childComplexity int) int
		CityID              func(childComplexity int) int
		CreditLevel         func(childComplexity int) int
		DisplayNumber       func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		EnterpriseLevel     func(childComplexity int) int
		EnterpriseNature    func(childComplexity int) int
		EnterpriseType      func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstitutionCategory func(childComplexity int) int
		ProvinceID          func(childComplexity int) int
		Score               func(childComplexity int) int
		State               func(childComplexity int) int
	}

	Mutation struct {
		DeleteDepartment                         func(childComplexity int, where model.DepartmentBoolExp) int
		DeleteDepartmentByPk                     func(childComplexity int, id int64) int
		DeleteDepartmentByUnionPk                func(childComplexity int, departmentID string) int
		DeleteEnterprise                         func(childComplexity int, where model.EnterpriseBoolExp) int
		DeleteEnterpriseAlarmSendPolice          func(childComplexity int, where model.EnterpriseAlarmSendPoliceBoolExp) int
		DeleteEnterpriseAlarmSendPoliceByPk      func(childComplexity int, id int64) int
		DeleteEnterpriseAlarmSendPoliceByUnionPk func(childComplexity int, enterpriseAlarmSendPoliceID string) int
		DeleteEnterpriseByPk                     func(childComplexity int, id int64) int
		DeleteEnterpriseByUnionPk                func(childComplexity int, enterpriseID string) int
		DeleteEnterpriseContact                  func(childComplexity int, where model.EnterpriseContactBoolExp) int
		DeleteEnterpriseContactByPk              func(childComplexity int, id int64) int
		DeleteEnterpriseContactByUnionPk         func(childComplexity int, contactID string) int
		DeleteEnterpriseMuckTrunk                func(childComplexity int, where model.EnterpriseMuckTrunkBoolExp) int
		DeleteEnterpriseMuckTrunkByPk            func(childComplexity int, id int64) int
		DeleteEnterpriseMuckTrunkByUnionPk       func(childComplexity int, enterpriseMuckTrunkID string) int
		DeleteEnterpriseScoreLog                 func(childComplexity int, where model.EnterpriseScoreLogBoolExp) int
		DeleteEnterpriseScoreLogByPk             func(childComplexity int, id int64) int
		DeleteEnterpriseScoreLogByUnionPk        func(childComplexity int, logID string) int
		DeleteEnterpriseScoreSet                 func(childComplexity int, where model.EnterpriseScoreSetBoolExp) int
		DeleteEnterpriseScoreSetByPk             func(childComplexity int, id int64) int
		DeleteEnterpriseScoreSetByUnionPk        func(childComplexity int, scoreSetID string) int
		DeleteEnterpriseStateHis                 func(childComplexity int, where model.EnterpriseStateHisBoolExp) int
		DeleteEnterpriseStateHisByPk             func(childComplexity int, id int64) int
		DeleteEnterpriseStateHisByUnionPk        func(childComplexity int, stateHisID string) int
		DeleteEnterpriseUkey                     func(childComplexity int, where model.EnterpriseUkeyBoolExp) int
		DeleteEnterpriseUkeyByPk                 func(childComplexity int, id int64) int
		DeleteEnterpriseUkeyByUnionPk            func(childComplexity int, ukeyID string) int
		DeleteSystemUser                         func(childComplexity int, where model.SystemUserBoolExp) int
		DeleteSystemUserByPk                     func(childComplexity int, id int64) int
		DeleteSystemUserByUnionPk                func(childComplexity int, userID string) int
		InsertDepartment                         func(childComplexity int, objects []*model.DepartmentInsertInput) int
		InsertDepartmentOne                      func(childComplexity int, objects model.DepartmentInsertInput) int
		InsertEnterprise                         func(childComplexity int, objects []*model.EnterpriseInsertInput) int
		InsertEnterpriseAlarmSendPolice          func(childComplexity int, objects []*model.EnterpriseAlarmSendPoliceInsertInput) int
		InsertEnterpriseAlarmSendPoliceOne       func(childComplexity int, objects model.EnterpriseAlarmSendPoliceInsertInput) int
		InsertEnterpriseContact                  func(childComplexity int, objects []*model.EnterpriseContactInsertInput) int
		InsertEnterpriseContactOne               func(childComplexity int, objects model.EnterpriseContactInsertInput) int
		InsertEnterpriseMuckTrunk                func(childComplexity int, objects []*model.EnterpriseMuckTrunkInsertInput) int
		InsertEnterpriseMuckTrunkOne             func(childComplexity int, objects model.EnterpriseMuckTrunkInsertInput) int
		InsertEnterpriseOne                      func(childComplexity int, objects model.EnterpriseInsertInput) int
		InsertEnterpriseScoreLog                 func(childComplexity int, objects []*model.EnterpriseScoreLogInsertInput) int
		InsertEnterpriseScoreLogOne              func(childComplexity int, objects model.EnterpriseScoreLogInsertInput) int
		InsertEnterpriseScoreSet                 func(childComplexity int, objects []*model.EnterpriseScoreSetInsertInput) int
		InsertEnterpriseScoreSetOne              func(childComplexity int, objects model.EnterpriseScoreSetInsertInput) int
		InsertEnterpriseStateHis                 func(childComplexity int, objects []*model.EnterpriseStateHisInsertInput) int
		InsertEnterpriseStateHisOne              func(childComplexity int, objects model.EnterpriseStateHisInsertInput) int
		InsertEnterpriseUkey                     func(childComplexity int, objects []*model.EnterpriseUkeyInsertInput) int
		InsertEnterpriseUkeyOne                  func(childComplexity int, objects model.EnterpriseUkeyInsertInput) int
		InsertSystemUser                         func(childComplexity int, objects []*model.SystemUserInsertInput) int
		InsertSystemUserOne                      func(childComplexity int, objects model.SystemUserInsertInput) int
		UpdateDepartment                         func(childComplexity int, inc *model.DepartmentIncInput, set *model.DepartmentSetInput, where model.DepartmentBoolExp) int
		UpdateDepartmentByPk                     func(childComplexity int, inc *model.DepartmentIncInput, set *model.DepartmentSetInput, id int64) int
		UpdateDepartmentByUnionPk                func(childComplexity int, inc *model.DepartmentIncInput, set *model.DepartmentSetInput, departmentID string) int
		UpdateEnterprise                         func(childComplexity int, inc *model.EnterpriseIncInput, set *model.EnterpriseSetInput, where model.EnterpriseBoolExp) int
		UpdateEnterpriseAlarmSendPolice          func(childComplexity int, inc *model.EnterpriseAlarmSendPoliceIncInput, set *model.EnterpriseAlarmSendPoliceSetInput, where model.EnterpriseAlarmSendPoliceBoolExp) int
		UpdateEnterpriseAlarmSendPoliceByPk      func(childComplexity int, inc *model.EnterpriseAlarmSendPoliceIncInput, set *model.EnterpriseAlarmSendPoliceSetInput, id int64) int
		UpdateEnterpriseAlarmSendPoliceByUnionPk func(childComplexity int, inc *model.EnterpriseAlarmSendPoliceIncInput, set *model.EnterpriseAlarmSendPoliceSetInput, enterpriseAlarmSendPoliceID string) int
		UpdateEnterpriseByPk                     func(childComplexity int, inc *model.EnterpriseIncInput, set *model.EnterpriseSetInput, id int64) int
		UpdateEnterpriseByUnionPk                func(childComplexity int, inc *model.EnterpriseIncInput, set *model.EnterpriseSetInput, enterpriseID string) int
		UpdateEnterpriseContact                  func(childComplexity int, inc *model.EnterpriseContactIncInput, set *model.EnterpriseContactSetInput, where model.EnterpriseContactBoolExp) int
		UpdateEnterpriseContactByPk              func(childComplexity int, inc *model.EnterpriseContactIncInput, set *model.EnterpriseContactSetInput, id int64) int
		UpdateEnterpriseContactByUnionPk         func(childComplexity int, inc *model.EnterpriseContactIncInput, set *model.EnterpriseContactSetInput, contactID string) int
		UpdateEnterpriseMuckTrunk                func(childComplexity int, inc *model.EnterpriseMuckTrunkIncInput, set *model.EnterpriseMuckTrunkSetInput, where model.EnterpriseMuckTrunkBoolExp) int
		UpdateEnterpriseMuckTrunkByPk            func(childComplexity int, inc *model.EnterpriseMuckTrunkIncInput, set *model.EnterpriseMuckTrunkSetInput, id int64) int
		UpdateEnterpriseMuckTrunkByUnionPk       func(childComplexity int, inc *model.EnterpriseMuckTrunkIncInput, set *model.EnterpriseMuckTrunkSetInput, enterpriseMuckTrunkID string) int
		UpdateEnterpriseScoreLog                 func(childComplexity int, inc *model.EnterpriseScoreLogIncInput, set *model.EnterpriseScoreLogSetInput, where model.EnterpriseScoreLogBoolExp) int
		UpdateEnterpriseScoreLogByPk             func(childComplexity int, inc *model.EnterpriseScoreLogIncInput, set *model.EnterpriseScoreLogSetInput, id int64) int
		UpdateEnterpriseScoreLogByUnionPk        func(childComplexity int, inc *model.EnterpriseScoreLogIncInput, set *model.EnterpriseScoreLogSetInput, logID string) int
		UpdateEnterpriseScoreSet                 func(childComplexity int, inc *model.EnterpriseScoreSetIncInput, set *model.EnterpriseScoreSetSetInput, where model.EnterpriseScoreSetBoolExp) int
		UpdateEnterpriseScoreSetByPk             func(childComplexity int, inc *model.EnterpriseScoreSetIncInput, set *model.EnterpriseScoreSetSetInput, id int64) int
		UpdateEnterpriseScoreSetByUnionPk        func(childComplexity int, inc *model.EnterpriseScoreSetIncInput, set *model.EnterpriseScoreSetSetInput, scoreSetID string) int
		UpdateEnterpriseStateHis                 func(childComplexity int, inc *model.EnterpriseStateHisIncInput, set *model.EnterpriseStateHisSetInput, where model.EnterpriseStateHisBoolExp) int
		UpdateEnterpriseStateHisByPk             func(childComplexity int, inc *model.EnterpriseStateHisIncInput, set *model.EnterpriseStateHisSetInput, id int64) int
		UpdateEnterpriseStateHisByUnionPk        func(childComplexity int, inc *model.EnterpriseStateHisIncInput, set *model.EnterpriseStateHisSetInput, stateHisID string) int
		UpdateEnterpriseUkey                     func(childComplexity int, inc *model.EnterpriseUkeyIncInput, set *model.EnterpriseUkeySetInput, where model.EnterpriseUkeyBoolExp) int
		UpdateEnterpriseUkeyByPk                 func(childComplexity int, inc *model.EnterpriseUkeyIncInput, set *model.EnterpriseUkeySetInput, id int64) int
		UpdateEnterpriseUkeyByUnionPk            func(childComplexity int, inc *model.EnterpriseUkeyIncInput, set *model.EnterpriseUkeySetInput, ukeyID string) int
		UpdateSystemUser                         func(childComplexity int, inc *model.SystemUserIncInput, set *model.SystemUserSetInput, where model.SystemUserBoolExp) int
		UpdateSystemUserByPk                     func(childComplexity int, inc *model.SystemUserIncInput, set *model.SystemUserSetInput, id int64) int
		UpdateSystemUserByUnionPk                func(childComplexity int, inc *model.SystemUserIncInput, set *model.SystemUserSetInput, userID string) int
	}

	Query struct {
		Department                         func(childComplexity int, distinctOn []model.DepartmentSelectColumn, limit *int, offset *int, orderBy []*model.DepartmentOrderBy, where *model.DepartmentBoolExp) int
		DepartmentAggregate                func(childComplexity int, distinctOn []model.DepartmentSelectColumn, limit *int, offset *int, orderBy []*model.DepartmentOrderBy, where *model.DepartmentBoolExp) int
		DepartmentByPk                     func(childComplexity int, id int64) int
		DepartmentByUnionPk                func(childComplexity int, departmentID string) int
		Enterprise                         func(childComplexity int, distinctOn []model.EnterpriseSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseOrderBy, where *model.EnterpriseBoolExp) int
		EnterpriseAggregate                func(childComplexity int, distinctOn []model.EnterpriseSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseOrderBy, where *model.EnterpriseBoolExp) int
		EnterpriseAlarmSendPolice          func(childComplexity int, distinctOn []model.EnterpriseAlarmSendPoliceSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseAlarmSendPoliceOrderBy, where *model.EnterpriseAlarmSendPoliceBoolExp) int
		EnterpriseAlarmSendPoliceAggregate func(childComplexity int, distinctOn []model.EnterpriseAlarmSendPoliceSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseAlarmSendPoliceOrderBy, where *model.EnterpriseAlarmSendPoliceBoolExp) int
		EnterpriseAlarmSendPoliceByPk      func(childComplexity int, id int64) int
		EnterpriseAlarmSendPoliceByUnionPk func(childComplexity int, enterpriseAlarmSendPoliceID string) int
		EnterpriseByPk                     func(childComplexity int, id int64) int
		EnterpriseByUnionPk                func(childComplexity int, enterpriseID string) int
		EnterpriseContact                  func(childComplexity int, distinctOn []model.EnterpriseContactSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseContactOrderBy, where *model.EnterpriseContactBoolExp) int
		EnterpriseContactAggregate         func(childComplexity int, distinctOn []model.EnterpriseContactSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseContactOrderBy, where *model.EnterpriseContactBoolExp) int
		EnterpriseContactByPk              func(childComplexity int, id int64) int
		EnterpriseContactByUnionPk         func(childComplexity int, contactID string) int
		EnterpriseMuckTrunk                func(childComplexity int, distinctOn []model.EnterpriseMuckTrunkSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseMuckTrunkOrderBy, where *model.EnterpriseMuckTrunkBoolExp) int
		EnterpriseMuckTrunkAggregate       func(childComplexity int, distinctOn []model.EnterpriseMuckTrunkSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseMuckTrunkOrderBy, where *model.EnterpriseMuckTrunkBoolExp) int
		EnterpriseMuckTrunkByPk            func(childComplexity int, id int64) int
		EnterpriseMuckTrunkByUnionPk       func(childComplexity int, enterpriseMuckTrunkID string) int
		EnterpriseScoreLog                 func(childComplexity int, distinctOn []model.EnterpriseScoreLogSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseScoreLogOrderBy, where *model.EnterpriseScoreLogBoolExp) int
		EnterpriseScoreLogAggregate        func(childComplexity int, distinctOn []model.EnterpriseScoreLogSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseScoreLogOrderBy, where *model.EnterpriseScoreLogBoolExp) int
		EnterpriseScoreLogByPk             func(childComplexity int, id int64) int
		EnterpriseScoreLogByUnionPk        func(childComplexity int, logID string) int
		EnterpriseScoreSet                 func(childComplexity int, distinctOn []model.EnterpriseScoreSetSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseScoreSetOrderBy, where *model.EnterpriseScoreSetBoolExp) int
		EnterpriseScoreSetAggregate        func(childComplexity int, distinctOn []model.EnterpriseScoreSetSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseScoreSetOrderBy, where *model.EnterpriseScoreSetBoolExp) int
		EnterpriseScoreSetByPk             func(childComplexity int, id int64) int
		EnterpriseScoreSetByUnionPk        func(childComplexity int, scoreSetID string) int
		EnterpriseStateHis                 func(childComplexity int, distinctOn []model.EnterpriseStateHisSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseStateHisOrderBy, where *model.EnterpriseStateHisBoolExp) int
		EnterpriseStateHisAggregate        func(childComplexity int, distinctOn []model.EnterpriseStateHisSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseStateHisOrderBy, where *model.EnterpriseStateHisBoolExp) int
		EnterpriseStateHisByPk             func(childComplexity int, id int64) int
		EnterpriseStateHisByUnionPk        func(childComplexity int, stateHisID string) int
		EnterpriseUkey                     func(childComplexity int, distinctOn []model.EnterpriseUkeySelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseUkeyOrderBy, where *model.EnterpriseUkeyBoolExp) int
		EnterpriseUkeyAggregate            func(childComplexity int, distinctOn []model.EnterpriseUkeySelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseUkeyOrderBy, where *model.EnterpriseUkeyBoolExp) int
		EnterpriseUkeyByPk                 func(childComplexity int, id int64) int
		EnterpriseUkeyByUnionPk            func(childComplexity int, ukeyID string) int
		SystemUser                         func(childComplexity int, distinctOn []model.SystemUserSelectColumn, limit *int, offset *int, orderBy []*model.SystemUserOrderBy, where *model.SystemUserBoolExp) int
		SystemUserAggregate                func(childComplexity int, distinctOn []model.SystemUserSelectColumn, limit *int, offset *int, orderBy []*model.SystemUserOrderBy, where *model.SystemUserBoolExp) int
		SystemUserByPk                     func(childComplexity int, id int64) int
		SystemUserByUnionPk                func(childComplexity int, userID string) int
	}

	SystemUser struct {
		AppVersion   func(childComplexity int) int
		AuditLevel   func(childComplexity int) int
		CreateBy     func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		DeleteAt     func(childComplexity int) int
		DeleteBy     func(childComplexity int) int
		DepartmentID func(childComplexity int) int
		Email        func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		Grade        func(childComplexity int) int
		ID           func(childComplexity int) int
		IPAddress    func(childComplexity int) int
		IsBindIP     func(childComplexity int) int
		IsDelete     func(childComplexity int) int
		IsValid      func(childComplexity int) int
		Mkey         func(childComplexity int) int
		Mobile       func(childComplexity int) int
		Password     func(childComplexity int) int
		Remarks      func(childComplexity int) int
		Telephone    func(childComplexity int) int
		Uername      func(childComplexity int) int
		Ukey         func(childComplexity int) int
		UpdateAt     func(childComplexity int) int
		UpdateBy     func(childComplexity int) int
		UserID       func(childComplexity int) int
		UserState    func(childComplexity int) int
		UserType     func(childComplexity int) int
	}

	SystemUserAggregate struct {
		Aggregate func(childComplexity int) int
	}

	SystemUserAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	SystemUserAvgFields struct {
		AuditLevel func(childComplexity int) int
		Grade      func(childComplexity int) int
		ID         func(childComplexity int) int
		UserState  func(childComplexity int) int
		UserType   func(childComplexity int) int
	}

	SystemUserMaxFields struct {
		AppVersion   func(childComplexity int) int
		AuditLevel   func(childComplexity int) int
		CreateBy     func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		DeleteAt     func(childComplexity int) int
		DeleteBy     func(childComplexity int) int
		DepartmentID func(childComplexity int) int
		Email        func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		Grade        func(childComplexity int) int
		ID           func(childComplexity int) int
		IPAddress    func(childComplexity int) int
		IsBindIP     func(childComplexity int) int
		IsDelete     func(childComplexity int) int
		IsValid      func(childComplexity int) int
		Mkey         func(childComplexity int) int
		Mobile       func(childComplexity int) int
		Password     func(childComplexity int) int
		Remarks      func(childComplexity int) int
		Telephone    func(childComplexity int) int
		Uername      func(childComplexity int) int
		Ukey         func(childComplexity int) int
		UpdateAt     func(childComplexity int) int
		UpdateBy     func(childComplexity int) int
		UserID       func(childComplexity int) int
		UserState    func(childComplexity int) int
		UserType     func(childComplexity int) int
	}

	SystemUserMinFields struct {
		AppVersion   func(childComplexity int) int
		AuditLevel   func(childComplexity int) int
		CreateBy     func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		DeleteAt     func(childComplexity int) int
		DeleteBy     func(childComplexity int) int
		DepartmentID func(childComplexity int) int
		Email        func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		Grade        func(childComplexity int) int
		ID           func(childComplexity int) int
		IPAddress    func(childComplexity int) int
		IsBindIP     func(childComplexity int) int
		IsDelete     func(childComplexity int) int
		IsValid      func(childComplexity int) int
		Mkey         func(childComplexity int) int
		Mobile       func(childComplexity int) int
		Password     func(childComplexity int) int
		Remarks      func(childComplexity int) int
		Telephone    func(childComplexity int) int
		Uername      func(childComplexity int) int
		Ukey         func(childComplexity int) int
		UpdateAt     func(childComplexity int) int
		UpdateBy     func(childComplexity int) int
		UserID       func(childComplexity int) int
		UserState    func(childComplexity int) int
		UserType     func(childComplexity int) int
	}

	SystemUserMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	SystemUserStddevFields struct {
		AuditLevel func(childComplexity int) int
		Grade      func(childComplexity int) int
		ID         func(childComplexity int) int
		UserState  func(childComplexity int) int
		UserType   func(childComplexity int) int
	}

	SystemUserStddevPopFields struct {
		AuditLevel func(childComplexity int) int
		Grade      func(childComplexity int) int
		ID         func(childComplexity int) int
		UserState  func(childComplexity int) int
		UserType   func(childComplexity int) int
	}

	SystemUserStddevSampFields struct {
		AuditLevel func(childComplexity int) int
		Grade      func(childComplexity int) int
		ID         func(childComplexity int) int
		UserState  func(childComplexity int) int
		UserType   func(childComplexity int) int
	}

	SystemUserSumFields struct {
		AuditLevel func(childComplexity int) int
		Grade      func(childComplexity int) int
		ID         func(childComplexity int) int
		UserState  func(childComplexity int) int
		UserType   func(childComplexity int) int
	}

	SystemUserVarPopFields struct {
		AuditLevel func(childComplexity int) int
		Grade      func(childComplexity int) int
		ID         func(childComplexity int) int
		UserState  func(childComplexity int) int
		UserType   func(childComplexity int) int
	}

	SystemUserVarSampFields struct {
		AuditLevel func(childComplexity int) int
		Grade      func(childComplexity int) int
		ID         func(childComplexity int) int
		UserState  func(childComplexity int) int
		UserType   func(childComplexity int) int
	}

	SystemUserVarianceFields struct {
		AuditLevel func(childComplexity int) int
		Grade      func(childComplexity int) int
		ID         func(childComplexity int) int
		UserState  func(childComplexity int) int
		UserType   func(childComplexity int) int
	}
}

type DepartmentResolver interface {
	Enterprise(ctx context.Context, obj *model1.Department) (*model1.Enterprise, error)
	SuperiorDepartment(ctx context.Context, obj *model1.Department) (*model1.Department, error)
}
type MutationResolver interface {
	DeleteDepartment(ctx context.Context, where model.DepartmentBoolExp) (*model.DepartmentMutationResponse, error)
	DeleteDepartmentByPk(ctx context.Context, id int64) (*model1.Department, error)
	InsertDepartment(ctx context.Context, objects []*model.DepartmentInsertInput) (*model.DepartmentMutationResponse, error)
	InsertDepartmentOne(ctx context.Context, objects model.DepartmentInsertInput) (*model1.Department, error)
	UpdateDepartment(ctx context.Context, inc *model.DepartmentIncInput, set *model.DepartmentSetInput, where model.DepartmentBoolExp) (*model.DepartmentMutationResponse, error)
	UpdateDepartmentByPk(ctx context.Context, inc *model.DepartmentIncInput, set *model.DepartmentSetInput, id int64) (*model1.Department, error)
	UpdateDepartmentByUnionPk(ctx context.Context, inc *model.DepartmentIncInput, set *model.DepartmentSetInput, departmentID string) (*model1.Department, error)
	DeleteDepartmentByUnionPk(ctx context.Context, departmentID string) (*model1.Department, error)
	DeleteEnterprise(ctx context.Context, where model.EnterpriseBoolExp) (*model.EnterpriseMutationResponse, error)
	DeleteEnterpriseByPk(ctx context.Context, id int64) (*model1.Enterprise, error)
	InsertEnterprise(ctx context.Context, objects []*model.EnterpriseInsertInput) (*model.EnterpriseMutationResponse, error)
	InsertEnterpriseOne(ctx context.Context, objects model.EnterpriseInsertInput) (*model1.Enterprise, error)
	UpdateEnterprise(ctx context.Context, inc *model.EnterpriseIncInput, set *model.EnterpriseSetInput, where model.EnterpriseBoolExp) (*model.EnterpriseMutationResponse, error)
	UpdateEnterpriseByPk(ctx context.Context, inc *model.EnterpriseIncInput, set *model.EnterpriseSetInput, id int64) (*model1.Enterprise, error)
	UpdateEnterpriseByUnionPk(ctx context.Context, inc *model.EnterpriseIncInput, set *model.EnterpriseSetInput, enterpriseID string) (*model1.Enterprise, error)
	DeleteEnterpriseByUnionPk(ctx context.Context, enterpriseID string) (*model1.Enterprise, error)
	DeleteEnterpriseAlarmSendPolice(ctx context.Context, where model.EnterpriseAlarmSendPoliceBoolExp) (*model.EnterpriseAlarmSendPoliceMutationResponse, error)
	DeleteEnterpriseAlarmSendPoliceByPk(ctx context.Context, id int64) (*model1.EnterpriseAlarmSendPolice, error)
	InsertEnterpriseAlarmSendPolice(ctx context.Context, objects []*model.EnterpriseAlarmSendPoliceInsertInput) (*model.EnterpriseAlarmSendPoliceMutationResponse, error)
	InsertEnterpriseAlarmSendPoliceOne(ctx context.Context, objects model.EnterpriseAlarmSendPoliceInsertInput) (*model1.EnterpriseAlarmSendPolice, error)
	UpdateEnterpriseAlarmSendPolice(ctx context.Context, inc *model.EnterpriseAlarmSendPoliceIncInput, set *model.EnterpriseAlarmSendPoliceSetInput, where model.EnterpriseAlarmSendPoliceBoolExp) (*model.EnterpriseAlarmSendPoliceMutationResponse, error)
	UpdateEnterpriseAlarmSendPoliceByPk(ctx context.Context, inc *model.EnterpriseAlarmSendPoliceIncInput, set *model.EnterpriseAlarmSendPoliceSetInput, id int64) (*model1.EnterpriseAlarmSendPolice, error)
	UpdateEnterpriseAlarmSendPoliceByUnionPk(ctx context.Context, inc *model.EnterpriseAlarmSendPoliceIncInput, set *model.EnterpriseAlarmSendPoliceSetInput, enterpriseAlarmSendPoliceID string) (*model1.EnterpriseAlarmSendPolice, error)
	DeleteEnterpriseAlarmSendPoliceByUnionPk(ctx context.Context, enterpriseAlarmSendPoliceID string) (*model1.EnterpriseAlarmSendPolice, error)
	DeleteEnterpriseContact(ctx context.Context, where model.EnterpriseContactBoolExp) (*model.EnterpriseContactMutationResponse, error)
	DeleteEnterpriseContactByPk(ctx context.Context, id int64) (*model1.EnterpriseContact, error)
	InsertEnterpriseContact(ctx context.Context, objects []*model.EnterpriseContactInsertInput) (*model.EnterpriseContactMutationResponse, error)
	InsertEnterpriseContactOne(ctx context.Context, objects model.EnterpriseContactInsertInput) (*model1.EnterpriseContact, error)
	UpdateEnterpriseContact(ctx context.Context, inc *model.EnterpriseContactIncInput, set *model.EnterpriseContactSetInput, where model.EnterpriseContactBoolExp) (*model.EnterpriseContactMutationResponse, error)
	UpdateEnterpriseContactByPk(ctx context.Context, inc *model.EnterpriseContactIncInput, set *model.EnterpriseContactSetInput, id int64) (*model1.EnterpriseContact, error)
	UpdateEnterpriseContactByUnionPk(ctx context.Context, inc *model.EnterpriseContactIncInput, set *model.EnterpriseContactSetInput, contactID string) (*model1.EnterpriseContact, error)
	DeleteEnterpriseContactByUnionPk(ctx context.Context, contactID string) (*model1.EnterpriseContact, error)
	DeleteEnterpriseMuckTrunk(ctx context.Context, where model.EnterpriseMuckTrunkBoolExp) (*model.EnterpriseMuckTrunkMutationResponse, error)
	DeleteEnterpriseMuckTrunkByPk(ctx context.Context, id int64) (*model1.EnterpriseMuckTrunk, error)
	InsertEnterpriseMuckTrunk(ctx context.Context, objects []*model.EnterpriseMuckTrunkInsertInput) (*model.EnterpriseMuckTrunkMutationResponse, error)
	InsertEnterpriseMuckTrunkOne(ctx context.Context, objects model.EnterpriseMuckTrunkInsertInput) (*model1.EnterpriseMuckTrunk, error)
	UpdateEnterpriseMuckTrunk(ctx context.Context, inc *model.EnterpriseMuckTrunkIncInput, set *model.EnterpriseMuckTrunkSetInput, where model.EnterpriseMuckTrunkBoolExp) (*model.EnterpriseMuckTrunkMutationResponse, error)
	UpdateEnterpriseMuckTrunkByPk(ctx context.Context, inc *model.EnterpriseMuckTrunkIncInput, set *model.EnterpriseMuckTrunkSetInput, id int64) (*model1.EnterpriseMuckTrunk, error)
	UpdateEnterpriseMuckTrunkByUnionPk(ctx context.Context, inc *model.EnterpriseMuckTrunkIncInput, set *model.EnterpriseMuckTrunkSetInput, enterpriseMuckTrunkID string) (*model1.EnterpriseMuckTrunk, error)
	DeleteEnterpriseMuckTrunkByUnionPk(ctx context.Context, enterpriseMuckTrunkID string) (*model1.EnterpriseMuckTrunk, error)
	DeleteEnterpriseScoreLog(ctx context.Context, where model.EnterpriseScoreLogBoolExp) (*model.EnterpriseScoreLogMutationResponse, error)
	DeleteEnterpriseScoreLogByPk(ctx context.Context, id int64) (*model1.EnterpriseScoreLog, error)
	InsertEnterpriseScoreLog(ctx context.Context, objects []*model.EnterpriseScoreLogInsertInput) (*model.EnterpriseScoreLogMutationResponse, error)
	InsertEnterpriseScoreLogOne(ctx context.Context, objects model.EnterpriseScoreLogInsertInput) (*model1.EnterpriseScoreLog, error)
	UpdateEnterpriseScoreLog(ctx context.Context, inc *model.EnterpriseScoreLogIncInput, set *model.EnterpriseScoreLogSetInput, where model.EnterpriseScoreLogBoolExp) (*model.EnterpriseScoreLogMutationResponse, error)
	UpdateEnterpriseScoreLogByPk(ctx context.Context, inc *model.EnterpriseScoreLogIncInput, set *model.EnterpriseScoreLogSetInput, id int64) (*model1.EnterpriseScoreLog, error)
	UpdateEnterpriseScoreLogByUnionPk(ctx context.Context, inc *model.EnterpriseScoreLogIncInput, set *model.EnterpriseScoreLogSetInput, logID string) (*model1.EnterpriseScoreLog, error)
	DeleteEnterpriseScoreLogByUnionPk(ctx context.Context, logID string) (*model1.EnterpriseScoreLog, error)
	DeleteEnterpriseScoreSet(ctx context.Context, where model.EnterpriseScoreSetBoolExp) (*model.EnterpriseScoreSetMutationResponse, error)
	DeleteEnterpriseScoreSetByPk(ctx context.Context, id int64) (*model1.EnterpriseScoreSet, error)
	InsertEnterpriseScoreSet(ctx context.Context, objects []*model.EnterpriseScoreSetInsertInput) (*model.EnterpriseScoreSetMutationResponse, error)
	InsertEnterpriseScoreSetOne(ctx context.Context, objects model.EnterpriseScoreSetInsertInput) (*model1.EnterpriseScoreSet, error)
	UpdateEnterpriseScoreSet(ctx context.Context, inc *model.EnterpriseScoreSetIncInput, set *model.EnterpriseScoreSetSetInput, where model.EnterpriseScoreSetBoolExp) (*model.EnterpriseScoreSetMutationResponse, error)
	UpdateEnterpriseScoreSetByPk(ctx context.Context, inc *model.EnterpriseScoreSetIncInput, set *model.EnterpriseScoreSetSetInput, id int64) (*model1.EnterpriseScoreSet, error)
	UpdateEnterpriseScoreSetByUnionPk(ctx context.Context, inc *model.EnterpriseScoreSetIncInput, set *model.EnterpriseScoreSetSetInput, scoreSetID string) (*model1.EnterpriseScoreSet, error)
	DeleteEnterpriseScoreSetByUnionPk(ctx context.Context, scoreSetID string) (*model1.EnterpriseScoreSet, error)
	DeleteEnterpriseStateHis(ctx context.Context, where model.EnterpriseStateHisBoolExp) (*model.EnterpriseStateHisMutationResponse, error)
	DeleteEnterpriseStateHisByPk(ctx context.Context, id int64) (*model1.EnterpriseStateHis, error)
	InsertEnterpriseStateHis(ctx context.Context, objects []*model.EnterpriseStateHisInsertInput) (*model.EnterpriseStateHisMutationResponse, error)
	InsertEnterpriseStateHisOne(ctx context.Context, objects model.EnterpriseStateHisInsertInput) (*model1.EnterpriseStateHis, error)
	UpdateEnterpriseStateHis(ctx context.Context, inc *model.EnterpriseStateHisIncInput, set *model.EnterpriseStateHisSetInput, where model.EnterpriseStateHisBoolExp) (*model.EnterpriseStateHisMutationResponse, error)
	UpdateEnterpriseStateHisByPk(ctx context.Context, inc *model.EnterpriseStateHisIncInput, set *model.EnterpriseStateHisSetInput, id int64) (*model1.EnterpriseStateHis, error)
	UpdateEnterpriseStateHisByUnionPk(ctx context.Context, inc *model.EnterpriseStateHisIncInput, set *model.EnterpriseStateHisSetInput, stateHisID string) (*model1.EnterpriseStateHis, error)
	DeleteEnterpriseStateHisByUnionPk(ctx context.Context, stateHisID string) (*model1.EnterpriseStateHis, error)
	DeleteEnterpriseUkey(ctx context.Context, where model.EnterpriseUkeyBoolExp) (*model.EnterpriseUkeyMutationResponse, error)
	DeleteEnterpriseUkeyByPk(ctx context.Context, id int64) (*model1.EnterpriseUkey, error)
	InsertEnterpriseUkey(ctx context.Context, objects []*model.EnterpriseUkeyInsertInput) (*model.EnterpriseUkeyMutationResponse, error)
	InsertEnterpriseUkeyOne(ctx context.Context, objects model.EnterpriseUkeyInsertInput) (*model1.EnterpriseUkey, error)
	UpdateEnterpriseUkey(ctx context.Context, inc *model.EnterpriseUkeyIncInput, set *model.EnterpriseUkeySetInput, where model.EnterpriseUkeyBoolExp) (*model.EnterpriseUkeyMutationResponse, error)
	UpdateEnterpriseUkeyByPk(ctx context.Context, inc *model.EnterpriseUkeyIncInput, set *model.EnterpriseUkeySetInput, id int64) (*model1.EnterpriseUkey, error)
	UpdateEnterpriseUkeyByUnionPk(ctx context.Context, inc *model.EnterpriseUkeyIncInput, set *model.EnterpriseUkeySetInput, ukeyID string) (*model1.EnterpriseUkey, error)
	DeleteEnterpriseUkeyByUnionPk(ctx context.Context, ukeyID string) (*model1.EnterpriseUkey, error)
	DeleteSystemUser(ctx context.Context, where model.SystemUserBoolExp) (*model.SystemUserMutationResponse, error)
	DeleteSystemUserByPk(ctx context.Context, id int64) (*model1.SystemUser, error)
	InsertSystemUser(ctx context.Context, objects []*model.SystemUserInsertInput) (*model.SystemUserMutationResponse, error)
	InsertSystemUserOne(ctx context.Context, objects model.SystemUserInsertInput) (*model1.SystemUser, error)
	UpdateSystemUser(ctx context.Context, inc *model.SystemUserIncInput, set *model.SystemUserSetInput, where model.SystemUserBoolExp) (*model.SystemUserMutationResponse, error)
	UpdateSystemUserByPk(ctx context.Context, inc *model.SystemUserIncInput, set *model.SystemUserSetInput, id int64) (*model1.SystemUser, error)
	UpdateSystemUserByUnionPk(ctx context.Context, inc *model.SystemUserIncInput, set *model.SystemUserSetInput, userID string) (*model1.SystemUser, error)
	DeleteSystemUserByUnionPk(ctx context.Context, userID string) (*model1.SystemUser, error)
}
type QueryResolver interface {
	Department(ctx context.Context, distinctOn []model.DepartmentSelectColumn, limit *int, offset *int, orderBy []*model.DepartmentOrderBy, where *model.DepartmentBoolExp) ([]*model1.Department, error)
	DepartmentAggregate(ctx context.Context, distinctOn []model.DepartmentSelectColumn, limit *int, offset *int, orderBy []*model.DepartmentOrderBy, where *model.DepartmentBoolExp) (*model.DepartmentAggregate, error)
	DepartmentByPk(ctx context.Context, id int64) (*model1.Department, error)
	DepartmentByUnionPk(ctx context.Context, departmentID string) (*model1.Department, error)
	Enterprise(ctx context.Context, distinctOn []model.EnterpriseSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseOrderBy, where *model.EnterpriseBoolExp) ([]*model1.Enterprise, error)
	EnterpriseAggregate(ctx context.Context, distinctOn []model.EnterpriseSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseOrderBy, where *model.EnterpriseBoolExp) (*model.EnterpriseAggregate, error)
	EnterpriseByPk(ctx context.Context, id int64) (*model1.Enterprise, error)
	EnterpriseByUnionPk(ctx context.Context, enterpriseID string) (*model1.Enterprise, error)
	EnterpriseAlarmSendPolice(ctx context.Context, distinctOn []model.EnterpriseAlarmSendPoliceSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseAlarmSendPoliceOrderBy, where *model.EnterpriseAlarmSendPoliceBoolExp) ([]*model1.EnterpriseAlarmSendPolice, error)
	EnterpriseAlarmSendPoliceAggregate(ctx context.Context, distinctOn []model.EnterpriseAlarmSendPoliceSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseAlarmSendPoliceOrderBy, where *model.EnterpriseAlarmSendPoliceBoolExp) (*model.EnterpriseAlarmSendPoliceAggregate, error)
	EnterpriseAlarmSendPoliceByPk(ctx context.Context, id int64) (*model1.EnterpriseAlarmSendPolice, error)
	EnterpriseAlarmSendPoliceByUnionPk(ctx context.Context, enterpriseAlarmSendPoliceID string) (*model1.EnterpriseAlarmSendPolice, error)
	EnterpriseContact(ctx context.Context, distinctOn []model.EnterpriseContactSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseContactOrderBy, where *model.EnterpriseContactBoolExp) ([]*model1.EnterpriseContact, error)
	EnterpriseContactAggregate(ctx context.Context, distinctOn []model.EnterpriseContactSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseContactOrderBy, where *model.EnterpriseContactBoolExp) (*model.EnterpriseContactAggregate, error)
	EnterpriseContactByPk(ctx context.Context, id int64) (*model1.EnterpriseContact, error)
	EnterpriseContactByUnionPk(ctx context.Context, contactID string) (*model1.EnterpriseContact, error)
	EnterpriseMuckTrunk(ctx context.Context, distinctOn []model.EnterpriseMuckTrunkSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseMuckTrunkOrderBy, where *model.EnterpriseMuckTrunkBoolExp) ([]*model1.EnterpriseMuckTrunk, error)
	EnterpriseMuckTrunkAggregate(ctx context.Context, distinctOn []model.EnterpriseMuckTrunkSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseMuckTrunkOrderBy, where *model.EnterpriseMuckTrunkBoolExp) (*model.EnterpriseMuckTrunkAggregate, error)
	EnterpriseMuckTrunkByPk(ctx context.Context, id int64) (*model1.EnterpriseMuckTrunk, error)
	EnterpriseMuckTrunkByUnionPk(ctx context.Context, enterpriseMuckTrunkID string) (*model1.EnterpriseMuckTrunk, error)
	EnterpriseScoreLog(ctx context.Context, distinctOn []model.EnterpriseScoreLogSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseScoreLogOrderBy, where *model.EnterpriseScoreLogBoolExp) ([]*model1.EnterpriseScoreLog, error)
	EnterpriseScoreLogAggregate(ctx context.Context, distinctOn []model.EnterpriseScoreLogSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseScoreLogOrderBy, where *model.EnterpriseScoreLogBoolExp) (*model.EnterpriseScoreLogAggregate, error)
	EnterpriseScoreLogByPk(ctx context.Context, id int64) (*model1.EnterpriseScoreLog, error)
	EnterpriseScoreLogByUnionPk(ctx context.Context, logID string) (*model1.EnterpriseScoreLog, error)
	EnterpriseScoreSet(ctx context.Context, distinctOn []model.EnterpriseScoreSetSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseScoreSetOrderBy, where *model.EnterpriseScoreSetBoolExp) ([]*model1.EnterpriseScoreSet, error)
	EnterpriseScoreSetAggregate(ctx context.Context, distinctOn []model.EnterpriseScoreSetSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseScoreSetOrderBy, where *model.EnterpriseScoreSetBoolExp) (*model.EnterpriseScoreSetAggregate, error)
	EnterpriseScoreSetByPk(ctx context.Context, id int64) (*model1.EnterpriseScoreSet, error)
	EnterpriseScoreSetByUnionPk(ctx context.Context, scoreSetID string) (*model1.EnterpriseScoreSet, error)
	EnterpriseStateHis(ctx context.Context, distinctOn []model.EnterpriseStateHisSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseStateHisOrderBy, where *model.EnterpriseStateHisBoolExp) ([]*model1.EnterpriseStateHis, error)
	EnterpriseStateHisAggregate(ctx context.Context, distinctOn []model.EnterpriseStateHisSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseStateHisOrderBy, where *model.EnterpriseStateHisBoolExp) (*model.EnterpriseStateHisAggregate, error)
	EnterpriseStateHisByPk(ctx context.Context, id int64) (*model1.EnterpriseStateHis, error)
	EnterpriseStateHisByUnionPk(ctx context.Context, stateHisID string) (*model1.EnterpriseStateHis, error)
	EnterpriseUkey(ctx context.Context, distinctOn []model.EnterpriseUkeySelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseUkeyOrderBy, where *model.EnterpriseUkeyBoolExp) ([]*model1.EnterpriseUkey, error)
	EnterpriseUkeyAggregate(ctx context.Context, distinctOn []model.EnterpriseUkeySelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseUkeyOrderBy, where *model.EnterpriseUkeyBoolExp) (*model.EnterpriseUkeyAggregate, error)
	EnterpriseUkeyByPk(ctx context.Context, id int64) (*model1.EnterpriseUkey, error)
	EnterpriseUkeyByUnionPk(ctx context.Context, ukeyID string) (*model1.EnterpriseUkey, error)
	SystemUser(ctx context.Context, distinctOn []model.SystemUserSelectColumn, limit *int, offset *int, orderBy []*model.SystemUserOrderBy, where *model.SystemUserBoolExp) ([]*model1.SystemUser, error)
	SystemUserAggregate(ctx context.Context, distinctOn []model.SystemUserSelectColumn, limit *int, offset *int, orderBy []*model.SystemUserOrderBy, where *model.SystemUserBoolExp) (*model.SystemUserAggregate, error)
	SystemUserByPk(ctx context.Context, id int64) (*model1.SystemUser, error)
	SystemUserByUnionPk(ctx context.Context, userID string) (*model1.SystemUser, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Department.create_at":
		if e.complexity.Department.CreateAt == nil {
			break
		}

		return e.complexity.Department.CreateAt(childComplexity), true

	case "Department.create_by":
		if e.complexity.Department.CreateBy == nil {
			break
		}

		return e.complexity.Department.CreateBy(childComplexity), true

	case "Department.delete_at":
		if e.complexity.Department.DeleteAt == nil {
			break
		}

		return e.complexity.Department.DeleteAt(childComplexity), true

	case "Department.delete_by":
		if e.complexity.Department.DeleteBy == nil {
			break
		}

		return e.complexity.Department.DeleteBy(childComplexity), true

	case "Department.department_category":
		if e.complexity.Department.DepartmentCategory == nil {
			break
		}

		return e.complexity.Department.DepartmentCategory(childComplexity), true

	case "Department.department_code":
		if e.complexity.Department.DepartmentCode == nil {
			break
		}

		return e.complexity.Department.DepartmentCode(childComplexity), true

	case "Department.department_id":
		if e.complexity.Department.DepartmentID == nil {
			break
		}

		return e.complexity.Department.DepartmentID(childComplexity), true

	case "Department.department_name":
		if e.complexity.Department.DepartmentName == nil {
			break
		}

		return e.complexity.Department.DepartmentName(childComplexity), true

	case "Department.enterprise":
		if e.complexity.Department.Enterprise == nil {
			break
		}

		return e.complexity.Department.Enterprise(childComplexity), true

	case "Department.id":
		if e.complexity.Department.ID == nil {
			break
		}

		return e.complexity.Department.ID(childComplexity), true

	case "Department.internal_number":
		if e.complexity.Department.InternalNumber == nil {
			break
		}

		return e.complexity.Department.InternalNumber(childComplexity), true

	case "Department.is_delete":
		if e.complexity.Department.IsDelete == nil {
			break
		}

		return e.complexity.Department.IsDelete(childComplexity), true

	case "Department.remarks":
		if e.complexity.Department.Remarks == nil {
			break
		}

		return e.complexity.Department.Remarks(childComplexity), true

	case "Department.superior_department":
		if e.complexity.Department.SuperiorDepartment == nil {
			break
		}

		return e.complexity.Department.SuperiorDepartment(childComplexity), true

	case "Department.update_at":
		if e.complexity.Department.UpdateAt == nil {
			break
		}

		return e.complexity.Department.UpdateAt(childComplexity), true

	case "Department.update_by":
		if e.complexity.Department.UpdateBy == nil {
			break
		}

		return e.complexity.Department.UpdateBy(childComplexity), true

	case "DepartmentAggregate.aggregate":
		if e.complexity.DepartmentAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DepartmentAggregate.Aggregate(childComplexity), true

	case "DepartmentAggregateFields.avg":
		if e.complexity.DepartmentAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.Avg(childComplexity), true

	case "DepartmentAggregateFields.count":
		if e.complexity.DepartmentAggregateFields.Count == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.Count(childComplexity), true

	case "DepartmentAggregateFields.max":
		if e.complexity.DepartmentAggregateFields.Max == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.Max(childComplexity), true

	case "DepartmentAggregateFields.min":
		if e.complexity.DepartmentAggregateFields.Min == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.Min(childComplexity), true

	case "DepartmentAggregateFields.stddev":
		if e.complexity.DepartmentAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.Stddev(childComplexity), true

	case "DepartmentAggregateFields.stddev_pop":
		if e.complexity.DepartmentAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.StddevPop(childComplexity), true

	case "DepartmentAggregateFields.stddev_samp":
		if e.complexity.DepartmentAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.StddevSamp(childComplexity), true

	case "DepartmentAggregateFields.sum":
		if e.complexity.DepartmentAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.Sum(childComplexity), true

	case "DepartmentAggregateFields.var_pop":
		if e.complexity.DepartmentAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.VarPop(childComplexity), true

	case "DepartmentAggregateFields.var_samp":
		if e.complexity.DepartmentAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.VarSamp(childComplexity), true

	case "DepartmentAggregateFields.variance":
		if e.complexity.DepartmentAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.Variance(childComplexity), true

	case "DepartmentAvgFields.department_category":
		if e.complexity.DepartmentAvgFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentAvgFields.DepartmentCategory(childComplexity), true

	case "DepartmentAvgFields.id":
		if e.complexity.DepartmentAvgFields.ID == nil {
			break
		}

		return e.complexity.DepartmentAvgFields.ID(childComplexity), true

	case "DepartmentAvgFields.internal_number":
		if e.complexity.DepartmentAvgFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentAvgFields.InternalNumber(childComplexity), true

	case "DepartmentMaxFields.create_at":
		if e.complexity.DepartmentMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.CreateAt(childComplexity), true

	case "DepartmentMaxFields.create_by":
		if e.complexity.DepartmentMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.CreateBy(childComplexity), true

	case "DepartmentMaxFields.delete_at":
		if e.complexity.DepartmentMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.DeleteAt(childComplexity), true

	case "DepartmentMaxFields.delete_by":
		if e.complexity.DepartmentMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.DeleteBy(childComplexity), true

	case "DepartmentMaxFields.department_category":
		if e.complexity.DepartmentMaxFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.DepartmentCategory(childComplexity), true

	case "DepartmentMaxFields.department_code":
		if e.complexity.DepartmentMaxFields.DepartmentCode == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.DepartmentCode(childComplexity), true

	case "DepartmentMaxFields.department_id":
		if e.complexity.DepartmentMaxFields.DepartmentID == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.DepartmentID(childComplexity), true

	case "DepartmentMaxFields.department_name":
		if e.complexity.DepartmentMaxFields.DepartmentName == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.DepartmentName(childComplexity), true

	case "DepartmentMaxFields.enterprise_id":
		if e.complexity.DepartmentMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.EnterpriseID(childComplexity), true

	case "DepartmentMaxFields.id":
		if e.complexity.DepartmentMaxFields.ID == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.ID(childComplexity), true

	case "DepartmentMaxFields.internal_number":
		if e.complexity.DepartmentMaxFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.InternalNumber(childComplexity), true

	case "DepartmentMaxFields.is_delete":
		if e.complexity.DepartmentMaxFields.IsDelete == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.IsDelete(childComplexity), true

	case "DepartmentMaxFields.remarks":
		if e.complexity.DepartmentMaxFields.Remarks == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.Remarks(childComplexity), true

	case "DepartmentMaxFields.superior_department_id":
		if e.complexity.DepartmentMaxFields.SuperiorDepartmentID == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.SuperiorDepartmentID(childComplexity), true

	case "DepartmentMaxFields.update_at":
		if e.complexity.DepartmentMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.UpdateAt(childComplexity), true

	case "DepartmentMaxFields.update_by":
		if e.complexity.DepartmentMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.UpdateBy(childComplexity), true

	case "DepartmentMinFields.create_at":
		if e.complexity.DepartmentMinFields.CreateAt == nil {
			break
		}

		return e.complexity.DepartmentMinFields.CreateAt(childComplexity), true

	case "DepartmentMinFields.create_by":
		if e.complexity.DepartmentMinFields.CreateBy == nil {
			break
		}

		return e.complexity.DepartmentMinFields.CreateBy(childComplexity), true

	case "DepartmentMinFields.delete_at":
		if e.complexity.DepartmentMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.DepartmentMinFields.DeleteAt(childComplexity), true

	case "DepartmentMinFields.delete_by":
		if e.complexity.DepartmentMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.DepartmentMinFields.DeleteBy(childComplexity), true

	case "DepartmentMinFields.department_category":
		if e.complexity.DepartmentMinFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentMinFields.DepartmentCategory(childComplexity), true

	case "DepartmentMinFields.department_code":
		if e.complexity.DepartmentMinFields.DepartmentCode == nil {
			break
		}

		return e.complexity.DepartmentMinFields.DepartmentCode(childComplexity), true

	case "DepartmentMinFields.department_id":
		if e.complexity.DepartmentMinFields.DepartmentID == nil {
			break
		}

		return e.complexity.DepartmentMinFields.DepartmentID(childComplexity), true

	case "DepartmentMinFields.department_name":
		if e.complexity.DepartmentMinFields.DepartmentName == nil {
			break
		}

		return e.complexity.DepartmentMinFields.DepartmentName(childComplexity), true

	case "DepartmentMinFields.enterprise_id":
		if e.complexity.DepartmentMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.DepartmentMinFields.EnterpriseID(childComplexity), true

	case "DepartmentMinFields.id":
		if e.complexity.DepartmentMinFields.ID == nil {
			break
		}

		return e.complexity.DepartmentMinFields.ID(childComplexity), true

	case "DepartmentMinFields.internal_number":
		if e.complexity.DepartmentMinFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentMinFields.InternalNumber(childComplexity), true

	case "DepartmentMinFields.is_delete":
		if e.complexity.DepartmentMinFields.IsDelete == nil {
			break
		}

		return e.complexity.DepartmentMinFields.IsDelete(childComplexity), true

	case "DepartmentMinFields.remarks":
		if e.complexity.DepartmentMinFields.Remarks == nil {
			break
		}

		return e.complexity.DepartmentMinFields.Remarks(childComplexity), true

	case "DepartmentMinFields.superior_department_id":
		if e.complexity.DepartmentMinFields.SuperiorDepartmentID == nil {
			break
		}

		return e.complexity.DepartmentMinFields.SuperiorDepartmentID(childComplexity), true

	case "DepartmentMinFields.update_at":
		if e.complexity.DepartmentMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.DepartmentMinFields.UpdateAt(childComplexity), true

	case "DepartmentMinFields.update_by":
		if e.complexity.DepartmentMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.DepartmentMinFields.UpdateBy(childComplexity), true

	case "DepartmentMutationResponse.affected_rows":
		if e.complexity.DepartmentMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DepartmentMutationResponse.AffectedRows(childComplexity), true

	case "DepartmentMutationResponse.returning":
		if e.complexity.DepartmentMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DepartmentMutationResponse.Returning(childComplexity), true

	case "DepartmentStddevFields.department_category":
		if e.complexity.DepartmentStddevFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentStddevFields.DepartmentCategory(childComplexity), true

	case "DepartmentStddevFields.id":
		if e.complexity.DepartmentStddevFields.ID == nil {
			break
		}

		return e.complexity.DepartmentStddevFields.ID(childComplexity), true

	case "DepartmentStddevFields.internal_number":
		if e.complexity.DepartmentStddevFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentStddevFields.InternalNumber(childComplexity), true

	case "DepartmentStddevPopFields.department_category":
		if e.complexity.DepartmentStddevPopFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentStddevPopFields.DepartmentCategory(childComplexity), true

	case "DepartmentStddevPopFields.id":
		if e.complexity.DepartmentStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DepartmentStddevPopFields.ID(childComplexity), true

	case "DepartmentStddevPopFields.internal_number":
		if e.complexity.DepartmentStddevPopFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentStddevPopFields.InternalNumber(childComplexity), true

	case "DepartmentStddevSampFields.department_category":
		if e.complexity.DepartmentStddevSampFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentStddevSampFields.DepartmentCategory(childComplexity), true

	case "DepartmentStddevSampFields.id":
		if e.complexity.DepartmentStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DepartmentStddevSampFields.ID(childComplexity), true

	case "DepartmentStddevSampFields.internal_number":
		if e.complexity.DepartmentStddevSampFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentStddevSampFields.InternalNumber(childComplexity), true

	case "DepartmentSumFields.department_category":
		if e.complexity.DepartmentSumFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentSumFields.DepartmentCategory(childComplexity), true

	case "DepartmentSumFields.id":
		if e.complexity.DepartmentSumFields.ID == nil {
			break
		}

		return e.complexity.DepartmentSumFields.ID(childComplexity), true

	case "DepartmentSumFields.internal_number":
		if e.complexity.DepartmentSumFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentSumFields.InternalNumber(childComplexity), true

	case "DepartmentVarPopFields.department_category":
		if e.complexity.DepartmentVarPopFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentVarPopFields.DepartmentCategory(childComplexity), true

	case "DepartmentVarPopFields.id":
		if e.complexity.DepartmentVarPopFields.ID == nil {
			break
		}

		return e.complexity.DepartmentVarPopFields.ID(childComplexity), true

	case "DepartmentVarPopFields.internal_number":
		if e.complexity.DepartmentVarPopFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentVarPopFields.InternalNumber(childComplexity), true

	case "DepartmentVarSampFields.department_category":
		if e.complexity.DepartmentVarSampFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentVarSampFields.DepartmentCategory(childComplexity), true

	case "DepartmentVarSampFields.id":
		if e.complexity.DepartmentVarSampFields.ID == nil {
			break
		}

		return e.complexity.DepartmentVarSampFields.ID(childComplexity), true

	case "DepartmentVarSampFields.internal_number":
		if e.complexity.DepartmentVarSampFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentVarSampFields.InternalNumber(childComplexity), true

	case "DepartmentVarianceFields.department_category":
		if e.complexity.DepartmentVarianceFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentVarianceFields.DepartmentCategory(childComplexity), true

	case "DepartmentVarianceFields.id":
		if e.complexity.DepartmentVarianceFields.ID == nil {
			break
		}

		return e.complexity.DepartmentVarianceFields.ID(childComplexity), true

	case "DepartmentVarianceFields.internal_number":
		if e.complexity.DepartmentVarianceFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentVarianceFields.InternalNumber(childComplexity), true

	case "Enterprise.association_review_by":
		if e.complexity.Enterprise.AssociationReviewBy == nil {
			break
		}

		return e.complexity.Enterprise.AssociationReviewBy(childComplexity), true

	case "Enterprise.association_review_opinion":
		if e.complexity.Enterprise.AssociationReviewOpinion == nil {
			break
		}

		return e.complexity.Enterprise.AssociationReviewOpinion(childComplexity), true

	case "Enterprise.association_review_time":
		if e.complexity.Enterprise.AssociationReviewTime == nil {
			break
		}

		return e.complexity.Enterprise.AssociationReviewTime(childComplexity), true

	case "Enterprise.brigade_id":
		if e.complexity.Enterprise.BrigadeID == nil {
			break
		}

		return e.complexity.Enterprise.BrigadeID(childComplexity), true

	case "Enterprise.brigade_review_by":
		if e.complexity.Enterprise.BrigadeReviewBy == nil {
			break
		}

		return e.complexity.Enterprise.BrigadeReviewBy(childComplexity), true

	case "Enterprise.brigade_review_opinion":
		if e.complexity.Enterprise.BrigadeReviewOpinion == nil {
			break
		}

		return e.complexity.Enterprise.BrigadeReviewOpinion(childComplexity), true

	case "Enterprise.brigade_review_time":
		if e.complexity.Enterprise.BrigadeReviewTime == nil {
			break
		}

		return e.complexity.Enterprise.BrigadeReviewTime(childComplexity), true

	case "Enterprise.business_license_expiry_date":
		if e.complexity.Enterprise.BusinessLicenseExpiryDate == nil {
			break
		}

		return e.complexity.Enterprise.BusinessLicenseExpiryDate(childComplexity), true

	case "Enterprise.business_license_issuance_date":
		if e.complexity.Enterprise.BusinessLicenseIssuanceDate == nil {
			break
		}

		return e.complexity.Enterprise.BusinessLicenseIssuanceDate(childComplexity), true

	case "Enterprise.business_license_photo":
		if e.complexity.Enterprise.BusinessLicensePhoto == nil {
			break
		}

		return e.complexity.Enterprise.BusinessLicensePhoto(childComplexity), true

	case "Enterprise.business_photo":
		if e.complexity.Enterprise.BusinessPhoto == nil {
			break
		}

		return e.complexity.Enterprise.BusinessPhoto(childComplexity), true

	case "Enterprise.business_scope":
		if e.complexity.Enterprise.BusinessScope == nil {
			break
		}

		return e.complexity.Enterprise.BusinessScope(childComplexity), true

	case "Enterprise.check_status":
		if e.complexity.Enterprise.CheckStatus == nil {
			break
		}

		return e.complexity.Enterprise.CheckStatus(childComplexity), true

	case "Enterprise.city_id":
		if e.complexity.Enterprise.CityID == nil {
			break
		}

		return e.complexity.Enterprise.CityID(childComplexity), true

	case "Enterprise.create_at":
		if e.complexity.Enterprise.CreateAt == nil {
			break
		}

		return e.complexity.Enterprise.CreateAt(childComplexity), true

	case "Enterprise.create_by":
		if e.complexity.Enterprise.CreateBy == nil {
			break
		}

		return e.complexity.Enterprise.CreateBy(childComplexity), true

	case "Enterprise.credit_level":
		if e.complexity.Enterprise.CreditLevel == nil {
			break
		}

		return e.complexity.Enterprise.CreditLevel(childComplexity), true

	case "Enterprise.credit_level_remark":
		if e.complexity.Enterprise.CreditLevelRemark == nil {
			break
		}

		return e.complexity.Enterprise.CreditLevelRemark(childComplexity), true

	case "Enterprise.delete_at":
		if e.complexity.Enterprise.DeleteAt == nil {
			break
		}

		return e.complexity.Enterprise.DeleteAt(childComplexity), true

	case "Enterprise.delete_by":
		if e.complexity.Enterprise.DeleteBy == nil {
			break
		}

		return e.complexity.Enterprise.DeleteBy(childComplexity), true

	case "Enterprise.display_number":
		if e.complexity.Enterprise.DisplayNumber == nil {
			break
		}

		return e.complexity.Enterprise.DisplayNumber(childComplexity), true

	case "Enterprise.district_id":
		if e.complexity.Enterprise.DistrictID == nil {
			break
		}

		return e.complexity.Enterprise.DistrictID(childComplexity), true

	case "Enterprise.enterprise_address":
		if e.complexity.Enterprise.EnterpriseAddress == nil {
			break
		}

		return e.complexity.Enterprise.EnterpriseAddress(childComplexity), true

	case "Enterprise.enterprise_code":
		if e.complexity.Enterprise.EnterpriseCode == nil {
			break
		}

		return e.complexity.Enterprise.EnterpriseCode(childComplexity), true

	case "Enterprise.enterprise_id":
		if e.complexity.Enterprise.EnterpriseID == nil {
			break
		}

		return e.complexity.Enterprise.EnterpriseID(childComplexity), true

	case "Enterprise.enterprise_level":
		if e.complexity.Enterprise.EnterpriseLevel == nil {
			break
		}

		return e.complexity.Enterprise.EnterpriseLevel(childComplexity), true

	case "Enterprise.enterprise_name":
		if e.complexity.Enterprise.EnterpriseName == nil {
			break
		}

		return e.complexity.Enterprise.EnterpriseName(childComplexity), true

	case "Enterprise.enterprise_nature":
		if e.complexity.Enterprise.EnterpriseNature == nil {
			break
		}

		return e.complexity.Enterprise.EnterpriseNature(childComplexity), true

	case "Enterprise.enterprise_type":
		if e.complexity.Enterprise.EnterpriseType == nil {
			break
		}

		return e.complexity.Enterprise.EnterpriseType(childComplexity), true

	case "Enterprise.entrusted_agent":
		if e.complexity.Enterprise.EntrustedAgent == nil {
			break
		}

		return e.complexity.Enterprise.EntrustedAgent(childComplexity), true

	case "Enterprise.entrusted_agent_id_card":
		if e.complexity.Enterprise.EntrustedAgentIDCard == nil {
			break
		}

		return e.complexity.Enterprise.EntrustedAgentIDCard(childComplexity), true

	case "Enterprise.entrusted_agent_id_card_photo":
		if e.complexity.Enterprise.EntrustedAgentIDCardPhoto == nil {
			break
		}

		return e.complexity.Enterprise.EntrustedAgentIDCardPhoto(childComplexity), true

	case "Enterprise.entrusted_agent_phone":
		if e.complexity.Enterprise.EntrustedAgentPhone == nil {
			break
		}

		return e.complexity.Enterprise.EntrustedAgentPhone(childComplexity), true

	case "Enterprise.fax_number":
		if e.complexity.Enterprise.FaxNumber == nil {
			break
		}

		return e.complexity.Enterprise.FaxNumber(childComplexity), true

	case "Enterprise.id":
		if e.complexity.Enterprise.ID == nil {
			break
		}

		return e.complexity.Enterprise.ID(childComplexity), true

	case "Enterprise.institution_category":
		if e.complexity.Enterprise.InstitutionCategory == nil {
			break
		}

		return e.complexity.Enterprise.InstitutionCategory(childComplexity), true

	case "Enterprise.is_black":
		if e.complexity.Enterprise.IsBlack == nil {
			break
		}

		return e.complexity.Enterprise.IsBlack(childComplexity), true

	case "Enterprise.is_catalog":
		if e.complexity.Enterprise.IsCatalog == nil {
			break
		}

		return e.complexity.Enterprise.IsCatalog(childComplexity), true

	case "Enterprise.is_deleted":
		if e.complexity.Enterprise.IsDeleted == nil {
			break
		}

		return e.complexity.Enterprise.IsDeleted(childComplexity), true

	case "Enterprise.is_expire":
		if e.complexity.Enterprise.IsExpire == nil {
			break
		}

		return e.complexity.Enterprise.IsExpire(childComplexity), true

	case "Enterprise.is_input":
		if e.complexity.Enterprise.IsInput == nil {
			break
		}

		return e.complexity.Enterprise.IsInput(childComplexity), true

	case "Enterprise.is_install":
		if e.complexity.Enterprise.IsInstall == nil {
			break
		}

		return e.complexity.Enterprise.IsInstall(childComplexity), true

	case "Enterprise.is_key_point":
		if e.complexity.Enterprise.IsKeyPoint == nil {
			break
		}

		return e.complexity.Enterprise.IsKeyPoint(childComplexity), true

	case "Enterprise.is_upload_province":
		if e.complexity.Enterprise.IsUploadProvince == nil {
			break
		}

		return e.complexity.Enterprise.IsUploadProvince(childComplexity), true

	case "Enterprise.legal_representative":
		if e.complexity.Enterprise.LegalRepresentative == nil {
			break
		}

		return e.complexity.Enterprise.LegalRepresentative(childComplexity), true

	case "Enterprise.legal_representative_id_card":
		if e.complexity.Enterprise.LegalRepresentativeIDCard == nil {
			break
		}

		return e.complexity.Enterprise.LegalRepresentativeIDCard(childComplexity), true

	case "Enterprise.legal_representative_id_card_photo":
		if e.complexity.Enterprise.LegalRepresentativeIDCardPhoto == nil {
			break
		}

		return e.complexity.Enterprise.LegalRepresentativeIDCardPhoto(childComplexity), true

	case "Enterprise.legal_representative_phone":
		if e.complexity.Enterprise.LegalRepresentativePhone == nil {
			break
		}

		return e.complexity.Enterprise.LegalRepresentativePhone(childComplexity), true

	case "Enterprise.operating_license_photo":
		if e.complexity.Enterprise.OperatingLicensePhoto == nil {
			break
		}

		return e.complexity.Enterprise.OperatingLicensePhoto(childComplexity), true

	case "Enterprise.organization_code":
		if e.complexity.Enterprise.OrganizationCode == nil {
			break
		}

		return e.complexity.Enterprise.OrganizationCode(childComplexity), true

	case "Enterprise.organization_code_certificate_photo":
		if e.complexity.Enterprise.OrganizationCodeCertificatePhoto == nil {
			break
		}

		return e.complexity.Enterprise.OrganizationCodeCertificatePhoto(childComplexity), true

	case "Enterprise.police_station_id":
		if e.complexity.Enterprise.PoliceStationID == nil {
			break
		}

		return e.complexity.Enterprise.PoliceStationID(childComplexity), true

	case "Enterprise.province_id":
		if e.complexity.Enterprise.ProvinceID == nil {
			break
		}

		return e.complexity.Enterprise.ProvinceID(childComplexity), true

	case "Enterprise.proxy_enterprise_id":
		if e.complexity.Enterprise.ProxyEnterpriseID == nil {
			break
		}

		return e.complexity.Enterprise.ProxyEnterpriseID(childComplexity), true

	case "Enterprise.remarks":
		if e.complexity.Enterprise.Remarks == nil {
			break
		}

		return e.complexity.Enterprise.Remarks(childComplexity), true

	case "Enterprise.score":
		if e.complexity.Enterprise.Score == nil {
			break
		}

		return e.complexity.Enterprise.Score(childComplexity), true

	case "Enterprise.state":
		if e.complexity.Enterprise.State == nil {
			break
		}

		return e.complexity.Enterprise.State(childComplexity), true

	case "Enterprise.superior_enterprise_id":
		if e.complexity.Enterprise.SuperiorEnterpriseID == nil {
			break
		}

		return e.complexity.Enterprise.SuperiorEnterpriseID(childComplexity), true

	case "Enterprise.update_at":
		if e.complexity.Enterprise.UpdateAt == nil {
			break
		}

		return e.complexity.Enterprise.UpdateAt(childComplexity), true

	case "Enterprise.update_by":
		if e.complexity.Enterprise.UpdateBy == nil {
			break
		}

		return e.complexity.Enterprise.UpdateBy(childComplexity), true

	case "Enterprise.update_time_in":
		if e.complexity.Enterprise.UpdateTimeIn == nil {
			break
		}

		return e.complexity.Enterprise.UpdateTimeIn(childComplexity), true

	case "EnterpriseAggregate.aggregate":
		if e.complexity.EnterpriseAggregate.Aggregate == nil {
			break
		}

		return e.complexity.EnterpriseAggregate.Aggregate(childComplexity), true

	case "EnterpriseAggregateFields.avg":
		if e.complexity.EnterpriseAggregateFields.Avg == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.Avg(childComplexity), true

	case "EnterpriseAggregateFields.count":
		if e.complexity.EnterpriseAggregateFields.Count == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.Count(childComplexity), true

	case "EnterpriseAggregateFields.max":
		if e.complexity.EnterpriseAggregateFields.Max == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.Max(childComplexity), true

	case "EnterpriseAggregateFields.min":
		if e.complexity.EnterpriseAggregateFields.Min == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.Min(childComplexity), true

	case "EnterpriseAggregateFields.stddev":
		if e.complexity.EnterpriseAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.Stddev(childComplexity), true

	case "EnterpriseAggregateFields.stddev_pop":
		if e.complexity.EnterpriseAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.StddevPop(childComplexity), true

	case "EnterpriseAggregateFields.stddev_samp":
		if e.complexity.EnterpriseAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.StddevSamp(childComplexity), true

	case "EnterpriseAggregateFields.sum":
		if e.complexity.EnterpriseAggregateFields.Sum == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.Sum(childComplexity), true

	case "EnterpriseAggregateFields.var_pop":
		if e.complexity.EnterpriseAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.VarPop(childComplexity), true

	case "EnterpriseAggregateFields.var_samp":
		if e.complexity.EnterpriseAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.VarSamp(childComplexity), true

	case "EnterpriseAggregateFields.variance":
		if e.complexity.EnterpriseAggregateFields.Variance == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.Variance(childComplexity), true

	case "EnterpriseAlarmSendPolice.created_at":
		if e.complexity.EnterpriseAlarmSendPolice.CreatedAt == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.CreatedAt(childComplexity), true

	case "EnterpriseAlarmSendPolice.created_by":
		if e.complexity.EnterpriseAlarmSendPolice.CreatedBy == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.CreatedBy(childComplexity), true

	case "EnterpriseAlarmSendPolice.deleted_at":
		if e.complexity.EnterpriseAlarmSendPolice.DeletedAt == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.DeletedAt(childComplexity), true

	case "EnterpriseAlarmSendPolice.deleted_by":
		if e.complexity.EnterpriseAlarmSendPolice.DeletedBy == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.DeletedBy(childComplexity), true

	case "EnterpriseAlarmSendPolice.enterprise_alarm_send_police_id":
		if e.complexity.EnterpriseAlarmSendPolice.EnterpriseAlarmSendPoliceID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.EnterpriseAlarmSendPoliceID(childComplexity), true

	case "EnterpriseAlarmSendPolice.enterprise_contact":
		if e.complexity.EnterpriseAlarmSendPolice.EnterpriseContact == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.EnterpriseContact(childComplexity), true

	case "EnterpriseAlarmSendPolice.enterprise_id":
		if e.complexity.EnterpriseAlarmSendPolice.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.EnterpriseID(childComplexity), true

	case "EnterpriseAlarmSendPolice.enterprise_name":
		if e.complexity.EnterpriseAlarmSendPolice.EnterpriseName == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.EnterpriseName(childComplexity), true

	case "EnterpriseAlarmSendPolice.enterprise_phone":
		if e.complexity.EnterpriseAlarmSendPolice.EnterprisePhone == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.EnterprisePhone(childComplexity), true

	case "EnterpriseAlarmSendPolice.id":
		if e.complexity.EnterpriseAlarmSendPolice.ID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.ID(childComplexity), true

	case "EnterpriseAlarmSendPolice.phlice_department":
		if e.complexity.EnterpriseAlarmSendPolice.PhliceDepartment == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.PhliceDepartment(childComplexity), true

	case "EnterpriseAlarmSendPolice.police":
		if e.complexity.EnterpriseAlarmSendPolice.Police == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.Police(childComplexity), true

	case "EnterpriseAlarmSendPolice.police_phone":
		if e.complexity.EnterpriseAlarmSendPolice.PolicePhone == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.PolicePhone(childComplexity), true

	case "EnterpriseAlarmSendPolice.updated_at":
		if e.complexity.EnterpriseAlarmSendPolice.UpdatedAt == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.UpdatedAt(childComplexity), true

	case "EnterpriseAlarmSendPolice.updated_by":
		if e.complexity.EnterpriseAlarmSendPolice.UpdatedBy == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPolice.UpdatedBy(childComplexity), true

	case "EnterpriseAlarmSendPoliceAggregate.aggregate":
		if e.complexity.EnterpriseAlarmSendPoliceAggregate.Aggregate == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceAggregate.Aggregate(childComplexity), true

	case "EnterpriseAlarmSendPoliceAggregateFields.avg":
		if e.complexity.EnterpriseAlarmSendPoliceAggregateFields.Avg == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceAggregateFields.Avg(childComplexity), true

	case "EnterpriseAlarmSendPoliceAggregateFields.count":
		if e.complexity.EnterpriseAlarmSendPoliceAggregateFields.Count == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceAggregateFields.Count(childComplexity), true

	case "EnterpriseAlarmSendPoliceAggregateFields.max":
		if e.complexity.EnterpriseAlarmSendPoliceAggregateFields.Max == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceAggregateFields.Max(childComplexity), true

	case "EnterpriseAlarmSendPoliceAggregateFields.min":
		if e.complexity.EnterpriseAlarmSendPoliceAggregateFields.Min == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceAggregateFields.Min(childComplexity), true

	case "EnterpriseAlarmSendPoliceAggregateFields.stddev":
		if e.complexity.EnterpriseAlarmSendPoliceAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceAggregateFields.Stddev(childComplexity), true

	case "EnterpriseAlarmSendPoliceAggregateFields.stddev_pop":
		if e.complexity.EnterpriseAlarmSendPoliceAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceAggregateFields.StddevPop(childComplexity), true

	case "EnterpriseAlarmSendPoliceAggregateFields.stddev_samp":
		if e.complexity.EnterpriseAlarmSendPoliceAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceAggregateFields.StddevSamp(childComplexity), true

	case "EnterpriseAlarmSendPoliceAggregateFields.sum":
		if e.complexity.EnterpriseAlarmSendPoliceAggregateFields.Sum == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceAggregateFields.Sum(childComplexity), true

	case "EnterpriseAlarmSendPoliceAggregateFields.var_pop":
		if e.complexity.EnterpriseAlarmSendPoliceAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceAggregateFields.VarPop(childComplexity), true

	case "EnterpriseAlarmSendPoliceAggregateFields.var_samp":
		if e.complexity.EnterpriseAlarmSendPoliceAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceAggregateFields.VarSamp(childComplexity), true

	case "EnterpriseAlarmSendPoliceAggregateFields.variance":
		if e.complexity.EnterpriseAlarmSendPoliceAggregateFields.Variance == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceAggregateFields.Variance(childComplexity), true

	case "EnterpriseAlarmSendPoliceAvgFields.id":
		if e.complexity.EnterpriseAlarmSendPoliceAvgFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceAvgFields.ID(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.created_at":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.CreatedAt(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.created_by":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.CreatedBy(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.deleted_at":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.DeletedAt(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.deleted_by":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.DeletedBy(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.enterprise_alarm_send_police_id":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.EnterpriseAlarmSendPoliceID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.EnterpriseAlarmSendPoliceID(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.enterprise_contact":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.EnterpriseContact == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.EnterpriseContact(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.enterprise_id":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.EnterpriseID(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.enterprise_name":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.EnterpriseName == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.EnterpriseName(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.enterprise_phone":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.EnterprisePhone == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.EnterprisePhone(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.id":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.ID(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.phlice_department":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.PhliceDepartment == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.PhliceDepartment(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.police":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.Police == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.Police(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.police_phone":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.PolicePhone == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.PolicePhone(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.updated_at":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.UpdatedAt(childComplexity), true

	case "EnterpriseAlarmSendPoliceMaxFields.updated_by":
		if e.complexity.EnterpriseAlarmSendPoliceMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMaxFields.UpdatedBy(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.created_at":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.CreatedAt(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.created_by":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.CreatedBy(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.deleted_at":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.DeletedAt(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.deleted_by":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.DeletedBy(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.enterprise_alarm_send_police_id":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.EnterpriseAlarmSendPoliceID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.EnterpriseAlarmSendPoliceID(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.enterprise_contact":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.EnterpriseContact == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.EnterpriseContact(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.enterprise_id":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.EnterpriseID(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.enterprise_name":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.EnterpriseName == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.EnterpriseName(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.enterprise_phone":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.EnterprisePhone == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.EnterprisePhone(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.id":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.ID(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.phlice_department":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.PhliceDepartment == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.PhliceDepartment(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.police":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.Police == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.Police(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.police_phone":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.PolicePhone == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.PolicePhone(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.updated_at":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.UpdatedAt(childComplexity), true

	case "EnterpriseAlarmSendPoliceMinFields.updated_by":
		if e.complexity.EnterpriseAlarmSendPoliceMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMinFields.UpdatedBy(childComplexity), true

	case "EnterpriseAlarmSendPoliceMutationResponse.affected_rows":
		if e.complexity.EnterpriseAlarmSendPoliceMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMutationResponse.AffectedRows(childComplexity), true

	case "EnterpriseAlarmSendPoliceMutationResponse.returning":
		if e.complexity.EnterpriseAlarmSendPoliceMutationResponse.Returning == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceMutationResponse.Returning(childComplexity), true

	case "EnterpriseAlarmSendPoliceStddevFields.id":
		if e.complexity.EnterpriseAlarmSendPoliceStddevFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceStddevFields.ID(childComplexity), true

	case "EnterpriseAlarmSendPoliceStddevPopFields.id":
		if e.complexity.EnterpriseAlarmSendPoliceStddevPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceStddevPopFields.ID(childComplexity), true

	case "EnterpriseAlarmSendPoliceStddevSampFields.id":
		if e.complexity.EnterpriseAlarmSendPoliceStddevSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceStddevSampFields.ID(childComplexity), true

	case "EnterpriseAlarmSendPoliceSumFields.id":
		if e.complexity.EnterpriseAlarmSendPoliceSumFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceSumFields.ID(childComplexity), true

	case "EnterpriseAlarmSendPoliceVarPopFields.id":
		if e.complexity.EnterpriseAlarmSendPoliceVarPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceVarPopFields.ID(childComplexity), true

	case "EnterpriseAlarmSendPoliceVarSampFields.id":
		if e.complexity.EnterpriseAlarmSendPoliceVarSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceVarSampFields.ID(childComplexity), true

	case "EnterpriseAlarmSendPoliceVarianceFields.id":
		if e.complexity.EnterpriseAlarmSendPoliceVarianceFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseAlarmSendPoliceVarianceFields.ID(childComplexity), true

	case "EnterpriseAvgFields.business_scope":
		if e.complexity.EnterpriseAvgFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.BusinessScope(childComplexity), true

	case "EnterpriseAvgFields.check_status":
		if e.complexity.EnterpriseAvgFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.CheckStatus(childComplexity), true

	case "EnterpriseAvgFields.city_id":
		if e.complexity.EnterpriseAvgFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.CityID(childComplexity), true

	case "EnterpriseAvgFields.credit_level":
		if e.complexity.EnterpriseAvgFields.CreditLevel == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.CreditLevel(childComplexity), true

	case "EnterpriseAvgFields.display_number":
		if e.complexity.EnterpriseAvgFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.DisplayNumber(childComplexity), true

	case "EnterpriseAvgFields.district_id":
		if e.complexity.EnterpriseAvgFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.DistrictID(childComplexity), true

	case "EnterpriseAvgFields.enterprise_level":
		if e.complexity.EnterpriseAvgFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.EnterpriseLevel(childComplexity), true

	case "EnterpriseAvgFields.enterprise_nature":
		if e.complexity.EnterpriseAvgFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.EnterpriseNature(childComplexity), true

	case "EnterpriseAvgFields.enterprise_type":
		if e.complexity.EnterpriseAvgFields.EnterpriseType == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.EnterpriseType(childComplexity), true

	case "EnterpriseAvgFields.id":
		if e.complexity.EnterpriseAvgFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.ID(childComplexity), true

	case "EnterpriseAvgFields.institution_category":
		if e.complexity.EnterpriseAvgFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.InstitutionCategory(childComplexity), true

	case "EnterpriseAvgFields.province_id":
		if e.complexity.EnterpriseAvgFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.ProvinceID(childComplexity), true

	case "EnterpriseAvgFields.score":
		if e.complexity.EnterpriseAvgFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.Score(childComplexity), true

	case "EnterpriseAvgFields.state":
		if e.complexity.EnterpriseAvgFields.State == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.State(childComplexity), true

	case "EnterpriseContact.contact_id":
		if e.complexity.EnterpriseContact.ContactID == nil {
			break
		}

		return e.complexity.EnterpriseContact.ContactID(childComplexity), true

	case "EnterpriseContact.create_at":
		if e.complexity.EnterpriseContact.CreateAt == nil {
			break
		}

		return e.complexity.EnterpriseContact.CreateAt(childComplexity), true

	case "EnterpriseContact.create_by":
		if e.complexity.EnterpriseContact.CreateBy == nil {
			break
		}

		return e.complexity.EnterpriseContact.CreateBy(childComplexity), true

	case "EnterpriseContact.delete_at":
		if e.complexity.EnterpriseContact.DeleteAt == nil {
			break
		}

		return e.complexity.EnterpriseContact.DeleteAt(childComplexity), true

	case "EnterpriseContact.delete_by":
		if e.complexity.EnterpriseContact.DeleteBy == nil {
			break
		}

		return e.complexity.EnterpriseContact.DeleteBy(childComplexity), true

	case "EnterpriseContact.email":
		if e.complexity.EnterpriseContact.Email == nil {
			break
		}

		return e.complexity.EnterpriseContact.Email(childComplexity), true

	case "EnterpriseContact.enterprise_id":
		if e.complexity.EnterpriseContact.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseContact.EnterpriseID(childComplexity), true

	case "EnterpriseContact.id":
		if e.complexity.EnterpriseContact.ID == nil {
			break
		}

		return e.complexity.EnterpriseContact.ID(childComplexity), true

	case "EnterpriseContact.is_delete":
		if e.complexity.EnterpriseContact.IsDelete == nil {
			break
		}

		return e.complexity.EnterpriseContact.IsDelete(childComplexity), true

	case "EnterpriseContact.mobile":
		if e.complexity.EnterpriseContact.Mobile == nil {
			break
		}

		return e.complexity.EnterpriseContact.Mobile(childComplexity), true

	case "EnterpriseContact.name":
		if e.complexity.EnterpriseContact.Name == nil {
			break
		}

		return e.complexity.EnterpriseContact.Name(childComplexity), true

	case "EnterpriseContact.phone":
		if e.complexity.EnterpriseContact.Phone == nil {
			break
		}

		return e.complexity.EnterpriseContact.Phone(childComplexity), true

	case "EnterpriseContact.sort_num":
		if e.complexity.EnterpriseContact.SortNum == nil {
			break
		}

		return e.complexity.EnterpriseContact.SortNum(childComplexity), true

	case "EnterpriseContact.update_at":
		if e.complexity.EnterpriseContact.UpdateAt == nil {
			break
		}

		return e.complexity.EnterpriseContact.UpdateAt(childComplexity), true

	case "EnterpriseContact.update_by":
		if e.complexity.EnterpriseContact.UpdateBy == nil {
			break
		}

		return e.complexity.EnterpriseContact.UpdateBy(childComplexity), true

	case "EnterpriseContactAggregate.aggregate":
		if e.complexity.EnterpriseContactAggregate.Aggregate == nil {
			break
		}

		return e.complexity.EnterpriseContactAggregate.Aggregate(childComplexity), true

	case "EnterpriseContactAggregateFields.avg":
		if e.complexity.EnterpriseContactAggregateFields.Avg == nil {
			break
		}

		return e.complexity.EnterpriseContactAggregateFields.Avg(childComplexity), true

	case "EnterpriseContactAggregateFields.count":
		if e.complexity.EnterpriseContactAggregateFields.Count == nil {
			break
		}

		return e.complexity.EnterpriseContactAggregateFields.Count(childComplexity), true

	case "EnterpriseContactAggregateFields.max":
		if e.complexity.EnterpriseContactAggregateFields.Max == nil {
			break
		}

		return e.complexity.EnterpriseContactAggregateFields.Max(childComplexity), true

	case "EnterpriseContactAggregateFields.min":
		if e.complexity.EnterpriseContactAggregateFields.Min == nil {
			break
		}

		return e.complexity.EnterpriseContactAggregateFields.Min(childComplexity), true

	case "EnterpriseContactAggregateFields.stddev":
		if e.complexity.EnterpriseContactAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.EnterpriseContactAggregateFields.Stddev(childComplexity), true

	case "EnterpriseContactAggregateFields.stddev_pop":
		if e.complexity.EnterpriseContactAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.EnterpriseContactAggregateFields.StddevPop(childComplexity), true

	case "EnterpriseContactAggregateFields.stddev_samp":
		if e.complexity.EnterpriseContactAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.EnterpriseContactAggregateFields.StddevSamp(childComplexity), true

	case "EnterpriseContactAggregateFields.sum":
		if e.complexity.EnterpriseContactAggregateFields.Sum == nil {
			break
		}

		return e.complexity.EnterpriseContactAggregateFields.Sum(childComplexity), true

	case "EnterpriseContactAggregateFields.var_pop":
		if e.complexity.EnterpriseContactAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.EnterpriseContactAggregateFields.VarPop(childComplexity), true

	case "EnterpriseContactAggregateFields.var_samp":
		if e.complexity.EnterpriseContactAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.EnterpriseContactAggregateFields.VarSamp(childComplexity), true

	case "EnterpriseContactAggregateFields.variance":
		if e.complexity.EnterpriseContactAggregateFields.Variance == nil {
			break
		}

		return e.complexity.EnterpriseContactAggregateFields.Variance(childComplexity), true

	case "EnterpriseContactAvgFields.id":
		if e.complexity.EnterpriseContactAvgFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseContactAvgFields.ID(childComplexity), true

	case "EnterpriseContactAvgFields.sort_num":
		if e.complexity.EnterpriseContactAvgFields.SortNum == nil {
			break
		}

		return e.complexity.EnterpriseContactAvgFields.SortNum(childComplexity), true

	case "EnterpriseContactMaxFields.contact_id":
		if e.complexity.EnterpriseContactMaxFields.ContactID == nil {
			break
		}

		return e.complexity.EnterpriseContactMaxFields.ContactID(childComplexity), true

	case "EnterpriseContactMaxFields.create_at":
		if e.complexity.EnterpriseContactMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.EnterpriseContactMaxFields.CreateAt(childComplexity), true

	case "EnterpriseContactMaxFields.create_by":
		if e.complexity.EnterpriseContactMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.EnterpriseContactMaxFields.CreateBy(childComplexity), true

	case "EnterpriseContactMaxFields.delete_at":
		if e.complexity.EnterpriseContactMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.EnterpriseContactMaxFields.DeleteAt(childComplexity), true

	case "EnterpriseContactMaxFields.delete_by":
		if e.complexity.EnterpriseContactMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.EnterpriseContactMaxFields.DeleteBy(childComplexity), true

	case "EnterpriseContactMaxFields.email":
		if e.complexity.EnterpriseContactMaxFields.Email == nil {
			break
		}

		return e.complexity.EnterpriseContactMaxFields.Email(childComplexity), true

	case "EnterpriseContactMaxFields.enterprise_id":
		if e.complexity.EnterpriseContactMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseContactMaxFields.EnterpriseID(childComplexity), true

	case "EnterpriseContactMaxFields.id":
		if e.complexity.EnterpriseContactMaxFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseContactMaxFields.ID(childComplexity), true

	case "EnterpriseContactMaxFields.is_delete":
		if e.complexity.EnterpriseContactMaxFields.IsDelete == nil {
			break
		}

		return e.complexity.EnterpriseContactMaxFields.IsDelete(childComplexity), true

	case "EnterpriseContactMaxFields.mobile":
		if e.complexity.EnterpriseContactMaxFields.Mobile == nil {
			break
		}

		return e.complexity.EnterpriseContactMaxFields.Mobile(childComplexity), true

	case "EnterpriseContactMaxFields.name":
		if e.complexity.EnterpriseContactMaxFields.Name == nil {
			break
		}

		return e.complexity.EnterpriseContactMaxFields.Name(childComplexity), true

	case "EnterpriseContactMaxFields.phone":
		if e.complexity.EnterpriseContactMaxFields.Phone == nil {
			break
		}

		return e.complexity.EnterpriseContactMaxFields.Phone(childComplexity), true

	case "EnterpriseContactMaxFields.sort_num":
		if e.complexity.EnterpriseContactMaxFields.SortNum == nil {
			break
		}

		return e.complexity.EnterpriseContactMaxFields.SortNum(childComplexity), true

	case "EnterpriseContactMaxFields.update_at":
		if e.complexity.EnterpriseContactMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.EnterpriseContactMaxFields.UpdateAt(childComplexity), true

	case "EnterpriseContactMaxFields.update_by":
		if e.complexity.EnterpriseContactMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.EnterpriseContactMaxFields.UpdateBy(childComplexity), true

	case "EnterpriseContactMinFields.contact_id":
		if e.complexity.EnterpriseContactMinFields.ContactID == nil {
			break
		}

		return e.complexity.EnterpriseContactMinFields.ContactID(childComplexity), true

	case "EnterpriseContactMinFields.create_at":
		if e.complexity.EnterpriseContactMinFields.CreateAt == nil {
			break
		}

		return e.complexity.EnterpriseContactMinFields.CreateAt(childComplexity), true

	case "EnterpriseContactMinFields.create_by":
		if e.complexity.EnterpriseContactMinFields.CreateBy == nil {
			break
		}

		return e.complexity.EnterpriseContactMinFields.CreateBy(childComplexity), true

	case "EnterpriseContactMinFields.delete_at":
		if e.complexity.EnterpriseContactMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.EnterpriseContactMinFields.DeleteAt(childComplexity), true

	case "EnterpriseContactMinFields.delete_by":
		if e.complexity.EnterpriseContactMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.EnterpriseContactMinFields.DeleteBy(childComplexity), true

	case "EnterpriseContactMinFields.email":
		if e.complexity.EnterpriseContactMinFields.Email == nil {
			break
		}

		return e.complexity.EnterpriseContactMinFields.Email(childComplexity), true

	case "EnterpriseContactMinFields.enterprise_id":
		if e.complexity.EnterpriseContactMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseContactMinFields.EnterpriseID(childComplexity), true

	case "EnterpriseContactMinFields.id":
		if e.complexity.EnterpriseContactMinFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseContactMinFields.ID(childComplexity), true

	case "EnterpriseContactMinFields.is_delete":
		if e.complexity.EnterpriseContactMinFields.IsDelete == nil {
			break
		}

		return e.complexity.EnterpriseContactMinFields.IsDelete(childComplexity), true

	case "EnterpriseContactMinFields.mobile":
		if e.complexity.EnterpriseContactMinFields.Mobile == nil {
			break
		}

		return e.complexity.EnterpriseContactMinFields.Mobile(childComplexity), true

	case "EnterpriseContactMinFields.name":
		if e.complexity.EnterpriseContactMinFields.Name == nil {
			break
		}

		return e.complexity.EnterpriseContactMinFields.Name(childComplexity), true

	case "EnterpriseContactMinFields.phone":
		if e.complexity.EnterpriseContactMinFields.Phone == nil {
			break
		}

		return e.complexity.EnterpriseContactMinFields.Phone(childComplexity), true

	case "EnterpriseContactMinFields.sort_num":
		if e.complexity.EnterpriseContactMinFields.SortNum == nil {
			break
		}

		return e.complexity.EnterpriseContactMinFields.SortNum(childComplexity), true

	case "EnterpriseContactMinFields.update_at":
		if e.complexity.EnterpriseContactMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.EnterpriseContactMinFields.UpdateAt(childComplexity), true

	case "EnterpriseContactMinFields.update_by":
		if e.complexity.EnterpriseContactMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.EnterpriseContactMinFields.UpdateBy(childComplexity), true

	case "EnterpriseContactMutationResponse.affected_rows":
		if e.complexity.EnterpriseContactMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.EnterpriseContactMutationResponse.AffectedRows(childComplexity), true

	case "EnterpriseContactMutationResponse.returning":
		if e.complexity.EnterpriseContactMutationResponse.Returning == nil {
			break
		}

		return e.complexity.EnterpriseContactMutationResponse.Returning(childComplexity), true

	case "EnterpriseContactStddevFields.id":
		if e.complexity.EnterpriseContactStddevFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseContactStddevFields.ID(childComplexity), true

	case "EnterpriseContactStddevFields.sort_num":
		if e.complexity.EnterpriseContactStddevFields.SortNum == nil {
			break
		}

		return e.complexity.EnterpriseContactStddevFields.SortNum(childComplexity), true

	case "EnterpriseContactStddevPopFields.id":
		if e.complexity.EnterpriseContactStddevPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseContactStddevPopFields.ID(childComplexity), true

	case "EnterpriseContactStddevPopFields.sort_num":
		if e.complexity.EnterpriseContactStddevPopFields.SortNum == nil {
			break
		}

		return e.complexity.EnterpriseContactStddevPopFields.SortNum(childComplexity), true

	case "EnterpriseContactStddevSampFields.id":
		if e.complexity.EnterpriseContactStddevSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseContactStddevSampFields.ID(childComplexity), true

	case "EnterpriseContactStddevSampFields.sort_num":
		if e.complexity.EnterpriseContactStddevSampFields.SortNum == nil {
			break
		}

		return e.complexity.EnterpriseContactStddevSampFields.SortNum(childComplexity), true

	case "EnterpriseContactSumFields.id":
		if e.complexity.EnterpriseContactSumFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseContactSumFields.ID(childComplexity), true

	case "EnterpriseContactSumFields.sort_num":
		if e.complexity.EnterpriseContactSumFields.SortNum == nil {
			break
		}

		return e.complexity.EnterpriseContactSumFields.SortNum(childComplexity), true

	case "EnterpriseContactVarPopFields.id":
		if e.complexity.EnterpriseContactVarPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseContactVarPopFields.ID(childComplexity), true

	case "EnterpriseContactVarPopFields.sort_num":
		if e.complexity.EnterpriseContactVarPopFields.SortNum == nil {
			break
		}

		return e.complexity.EnterpriseContactVarPopFields.SortNum(childComplexity), true

	case "EnterpriseContactVarSampFields.id":
		if e.complexity.EnterpriseContactVarSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseContactVarSampFields.ID(childComplexity), true

	case "EnterpriseContactVarSampFields.sort_num":
		if e.complexity.EnterpriseContactVarSampFields.SortNum == nil {
			break
		}

		return e.complexity.EnterpriseContactVarSampFields.SortNum(childComplexity), true

	case "EnterpriseContactVarianceFields.id":
		if e.complexity.EnterpriseContactVarianceFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseContactVarianceFields.ID(childComplexity), true

	case "EnterpriseContactVarianceFields.sort_num":
		if e.complexity.EnterpriseContactVarianceFields.SortNum == nil {
			break
		}

		return e.complexity.EnterpriseContactVarianceFields.SortNum(childComplexity), true

	case "EnterpriseMaxFields.association_review_by":
		if e.complexity.EnterpriseMaxFields.AssociationReviewBy == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.AssociationReviewBy(childComplexity), true

	case "EnterpriseMaxFields.association_review_opinion":
		if e.complexity.EnterpriseMaxFields.AssociationReviewOpinion == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.AssociationReviewOpinion(childComplexity), true

	case "EnterpriseMaxFields.association_review_time":
		if e.complexity.EnterpriseMaxFields.AssociationReviewTime == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.AssociationReviewTime(childComplexity), true

	case "EnterpriseMaxFields.brigade_id":
		if e.complexity.EnterpriseMaxFields.BrigadeID == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.BrigadeID(childComplexity), true

	case "EnterpriseMaxFields.brigade_review_by":
		if e.complexity.EnterpriseMaxFields.BrigadeReviewBy == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.BrigadeReviewBy(childComplexity), true

	case "EnterpriseMaxFields.brigade_review_opinion":
		if e.complexity.EnterpriseMaxFields.BrigadeReviewOpinion == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.BrigadeReviewOpinion(childComplexity), true

	case "EnterpriseMaxFields.brigade_review_time":
		if e.complexity.EnterpriseMaxFields.BrigadeReviewTime == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.BrigadeReviewTime(childComplexity), true

	case "EnterpriseMaxFields.business_license_expiry_date":
		if e.complexity.EnterpriseMaxFields.BusinessLicenseExpiryDate == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.BusinessLicenseExpiryDate(childComplexity), true

	case "EnterpriseMaxFields.business_license_issuance_date":
		if e.complexity.EnterpriseMaxFields.BusinessLicenseIssuanceDate == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.BusinessLicenseIssuanceDate(childComplexity), true

	case "EnterpriseMaxFields.business_license_photo":
		if e.complexity.EnterpriseMaxFields.BusinessLicensePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.BusinessLicensePhoto(childComplexity), true

	case "EnterpriseMaxFields.business_photo":
		if e.complexity.EnterpriseMaxFields.BusinessPhoto == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.BusinessPhoto(childComplexity), true

	case "EnterpriseMaxFields.business_scope":
		if e.complexity.EnterpriseMaxFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.BusinessScope(childComplexity), true

	case "EnterpriseMaxFields.check_status":
		if e.complexity.EnterpriseMaxFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.CheckStatus(childComplexity), true

	case "EnterpriseMaxFields.city_id":
		if e.complexity.EnterpriseMaxFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.CityID(childComplexity), true

	case "EnterpriseMaxFields.create_at":
		if e.complexity.EnterpriseMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.CreateAt(childComplexity), true

	case "EnterpriseMaxFields.create_by":
		if e.complexity.EnterpriseMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.CreateBy(childComplexity), true

	case "EnterpriseMaxFields.credit_level":
		if e.complexity.EnterpriseMaxFields.CreditLevel == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.CreditLevel(childComplexity), true

	case "EnterpriseMaxFields.credit_level_remark":
		if e.complexity.EnterpriseMaxFields.CreditLevelRemark == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.CreditLevelRemark(childComplexity), true

	case "EnterpriseMaxFields.delete_at":
		if e.complexity.EnterpriseMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.DeleteAt(childComplexity), true

	case "EnterpriseMaxFields.delete_by":
		if e.complexity.EnterpriseMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.DeleteBy(childComplexity), true

	case "EnterpriseMaxFields.display_number":
		if e.complexity.EnterpriseMaxFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.DisplayNumber(childComplexity), true

	case "EnterpriseMaxFields.district_id":
		if e.complexity.EnterpriseMaxFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.DistrictID(childComplexity), true

	case "EnterpriseMaxFields.enterprise_address":
		if e.complexity.EnterpriseMaxFields.EnterpriseAddress == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EnterpriseAddress(childComplexity), true

	case "EnterpriseMaxFields.enterprise_code":
		if e.complexity.EnterpriseMaxFields.EnterpriseCode == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EnterpriseCode(childComplexity), true

	case "EnterpriseMaxFields.enterprise_id":
		if e.complexity.EnterpriseMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EnterpriseID(childComplexity), true

	case "EnterpriseMaxFields.enterprise_level":
		if e.complexity.EnterpriseMaxFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EnterpriseLevel(childComplexity), true

	case "EnterpriseMaxFields.enterprise_name":
		if e.complexity.EnterpriseMaxFields.EnterpriseName == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EnterpriseName(childComplexity), true

	case "EnterpriseMaxFields.enterprise_nature":
		if e.complexity.EnterpriseMaxFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EnterpriseNature(childComplexity), true

	case "EnterpriseMaxFields.enterprise_type":
		if e.complexity.EnterpriseMaxFields.EnterpriseType == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EnterpriseType(childComplexity), true

	case "EnterpriseMaxFields.entrusted_agent":
		if e.complexity.EnterpriseMaxFields.EntrustedAgent == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EntrustedAgent(childComplexity), true

	case "EnterpriseMaxFields.entrusted_agent_id_card":
		if e.complexity.EnterpriseMaxFields.EntrustedAgentIDCard == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EntrustedAgentIDCard(childComplexity), true

	case "EnterpriseMaxFields.entrusted_agent_id_card_photo":
		if e.complexity.EnterpriseMaxFields.EntrustedAgentIDCardPhoto == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EntrustedAgentIDCardPhoto(childComplexity), true

	case "EnterpriseMaxFields.entrusted_agent_phone":
		if e.complexity.EnterpriseMaxFields.EntrustedAgentPhone == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EntrustedAgentPhone(childComplexity), true

	case "EnterpriseMaxFields.fax_number":
		if e.complexity.EnterpriseMaxFields.FaxNumber == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.FaxNumber(childComplexity), true

	case "EnterpriseMaxFields.id":
		if e.complexity.EnterpriseMaxFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.ID(childComplexity), true

	case "EnterpriseMaxFields.institution_category":
		if e.complexity.EnterpriseMaxFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.InstitutionCategory(childComplexity), true

	case "EnterpriseMaxFields.is_black":
		if e.complexity.EnterpriseMaxFields.IsBlack == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.IsBlack(childComplexity), true

	case "EnterpriseMaxFields.is_catalog":
		if e.complexity.EnterpriseMaxFields.IsCatalog == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.IsCatalog(childComplexity), true

	case "EnterpriseMaxFields.is_deleted":
		if e.complexity.EnterpriseMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.IsDeleted(childComplexity), true

	case "EnterpriseMaxFields.is_expire":
		if e.complexity.EnterpriseMaxFields.IsExpire == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.IsExpire(childComplexity), true

	case "EnterpriseMaxFields.is_input":
		if e.complexity.EnterpriseMaxFields.IsInput == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.IsInput(childComplexity), true

	case "EnterpriseMaxFields.is_install":
		if e.complexity.EnterpriseMaxFields.IsInstall == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.IsInstall(childComplexity), true

	case "EnterpriseMaxFields.is_key_point":
		if e.complexity.EnterpriseMaxFields.IsKeyPoint == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.IsKeyPoint(childComplexity), true

	case "EnterpriseMaxFields.is_upload_province":
		if e.complexity.EnterpriseMaxFields.IsUploadProvince == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.IsUploadProvince(childComplexity), true

	case "EnterpriseMaxFields.legal_representative":
		if e.complexity.EnterpriseMaxFields.LegalRepresentative == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.LegalRepresentative(childComplexity), true

	case "EnterpriseMaxFields.legal_representative_id_card":
		if e.complexity.EnterpriseMaxFields.LegalRepresentativeIDCard == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.LegalRepresentativeIDCard(childComplexity), true

	case "EnterpriseMaxFields.legal_representative_id_card_photo":
		if e.complexity.EnterpriseMaxFields.LegalRepresentativeIDCardPhoto == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.LegalRepresentativeIDCardPhoto(childComplexity), true

	case "EnterpriseMaxFields.legal_representative_phone":
		if e.complexity.EnterpriseMaxFields.LegalRepresentativePhone == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.LegalRepresentativePhone(childComplexity), true

	case "EnterpriseMaxFields.operating_license_photo":
		if e.complexity.EnterpriseMaxFields.OperatingLicensePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.OperatingLicensePhoto(childComplexity), true

	case "EnterpriseMaxFields.organization_code":
		if e.complexity.EnterpriseMaxFields.OrganizationCode == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.OrganizationCode(childComplexity), true

	case "EnterpriseMaxFields.organization_code_certificate_photo":
		if e.complexity.EnterpriseMaxFields.OrganizationCodeCertificatePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.OrganizationCodeCertificatePhoto(childComplexity), true

	case "EnterpriseMaxFields.police_station_id":
		if e.complexity.EnterpriseMaxFields.PoliceStationID == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.PoliceStationID(childComplexity), true

	case "EnterpriseMaxFields.province_id":
		if e.complexity.EnterpriseMaxFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.ProvinceID(childComplexity), true

	case "EnterpriseMaxFields.proxy_enterprise_id":
		if e.complexity.EnterpriseMaxFields.ProxyEnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.ProxyEnterpriseID(childComplexity), true

	case "EnterpriseMaxFields.remarks":
		if e.complexity.EnterpriseMaxFields.Remarks == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.Remarks(childComplexity), true

	case "EnterpriseMaxFields.score":
		if e.complexity.EnterpriseMaxFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.Score(childComplexity), true

	case "EnterpriseMaxFields.state":
		if e.complexity.EnterpriseMaxFields.State == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.State(childComplexity), true

	case "EnterpriseMaxFields.superior_enterprise_id":
		if e.complexity.EnterpriseMaxFields.SuperiorEnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.SuperiorEnterpriseID(childComplexity), true

	case "EnterpriseMaxFields.update_at":
		if e.complexity.EnterpriseMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.UpdateAt(childComplexity), true

	case "EnterpriseMaxFields.update_by":
		if e.complexity.EnterpriseMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.UpdateBy(childComplexity), true

	case "EnterpriseMaxFields.update_time_in":
		if e.complexity.EnterpriseMaxFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.UpdateTimeIn(childComplexity), true

	case "EnterpriseMinFields.association_review_by":
		if e.complexity.EnterpriseMinFields.AssociationReviewBy == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.AssociationReviewBy(childComplexity), true

	case "EnterpriseMinFields.association_review_opinion":
		if e.complexity.EnterpriseMinFields.AssociationReviewOpinion == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.AssociationReviewOpinion(childComplexity), true

	case "EnterpriseMinFields.association_review_time":
		if e.complexity.EnterpriseMinFields.AssociationReviewTime == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.AssociationReviewTime(childComplexity), true

	case "EnterpriseMinFields.brigade_id":
		if e.complexity.EnterpriseMinFields.BrigadeID == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.BrigadeID(childComplexity), true

	case "EnterpriseMinFields.brigade_review_by":
		if e.complexity.EnterpriseMinFields.BrigadeReviewBy == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.BrigadeReviewBy(childComplexity), true

	case "EnterpriseMinFields.brigade_review_opinion":
		if e.complexity.EnterpriseMinFields.BrigadeReviewOpinion == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.BrigadeReviewOpinion(childComplexity), true

	case "EnterpriseMinFields.brigade_review_time":
		if e.complexity.EnterpriseMinFields.BrigadeReviewTime == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.BrigadeReviewTime(childComplexity), true

	case "EnterpriseMinFields.business_license_expiry_date":
		if e.complexity.EnterpriseMinFields.BusinessLicenseExpiryDate == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.BusinessLicenseExpiryDate(childComplexity), true

	case "EnterpriseMinFields.business_license_issuance_date":
		if e.complexity.EnterpriseMinFields.BusinessLicenseIssuanceDate == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.BusinessLicenseIssuanceDate(childComplexity), true

	case "EnterpriseMinFields.business_license_photo":
		if e.complexity.EnterpriseMinFields.BusinessLicensePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.BusinessLicensePhoto(childComplexity), true

	case "EnterpriseMinFields.business_photo":
		if e.complexity.EnterpriseMinFields.BusinessPhoto == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.BusinessPhoto(childComplexity), true

	case "EnterpriseMinFields.business_scope":
		if e.complexity.EnterpriseMinFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.BusinessScope(childComplexity), true

	case "EnterpriseMinFields.check_status":
		if e.complexity.EnterpriseMinFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.CheckStatus(childComplexity), true

	case "EnterpriseMinFields.city_id":
		if e.complexity.EnterpriseMinFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.CityID(childComplexity), true

	case "EnterpriseMinFields.create_at":
		if e.complexity.EnterpriseMinFields.CreateAt == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.CreateAt(childComplexity), true

	case "EnterpriseMinFields.create_by":
		if e.complexity.EnterpriseMinFields.CreateBy == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.CreateBy(childComplexity), true

	case "EnterpriseMinFields.credit_level":
		if e.complexity.EnterpriseMinFields.CreditLevel == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.CreditLevel(childComplexity), true

	case "EnterpriseMinFields.credit_level_remark":
		if e.complexity.EnterpriseMinFields.CreditLevelRemark == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.CreditLevelRemark(childComplexity), true

	case "EnterpriseMinFields.delete_at":
		if e.complexity.EnterpriseMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.DeleteAt(childComplexity), true

	case "EnterpriseMinFields.delete_by":
		if e.complexity.EnterpriseMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.DeleteBy(childComplexity), true

	case "EnterpriseMinFields.display_number":
		if e.complexity.EnterpriseMinFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.DisplayNumber(childComplexity), true

	case "EnterpriseMinFields.district_id":
		if e.complexity.EnterpriseMinFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.DistrictID(childComplexity), true

	case "EnterpriseMinFields.enterprise_address":
		if e.complexity.EnterpriseMinFields.EnterpriseAddress == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EnterpriseAddress(childComplexity), true

	case "EnterpriseMinFields.enterprise_code":
		if e.complexity.EnterpriseMinFields.EnterpriseCode == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EnterpriseCode(childComplexity), true

	case "EnterpriseMinFields.enterprise_id":
		if e.complexity.EnterpriseMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EnterpriseID(childComplexity), true

	case "EnterpriseMinFields.enterprise_level":
		if e.complexity.EnterpriseMinFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EnterpriseLevel(childComplexity), true

	case "EnterpriseMinFields.enterprise_name":
		if e.complexity.EnterpriseMinFields.EnterpriseName == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EnterpriseName(childComplexity), true

	case "EnterpriseMinFields.enterprise_nature":
		if e.complexity.EnterpriseMinFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EnterpriseNature(childComplexity), true

	case "EnterpriseMinFields.enterprise_type":
		if e.complexity.EnterpriseMinFields.EnterpriseType == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EnterpriseType(childComplexity), true

	case "EnterpriseMinFields.entrusted_agent":
		if e.complexity.EnterpriseMinFields.EntrustedAgent == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EntrustedAgent(childComplexity), true

	case "EnterpriseMinFields.entrusted_agent_id_card":
		if e.complexity.EnterpriseMinFields.EntrustedAgentIDCard == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EntrustedAgentIDCard(childComplexity), true

	case "EnterpriseMinFields.entrusted_agent_id_card_photo":
		if e.complexity.EnterpriseMinFields.EntrustedAgentIDCardPhoto == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EntrustedAgentIDCardPhoto(childComplexity), true

	case "EnterpriseMinFields.entrusted_agent_phone":
		if e.complexity.EnterpriseMinFields.EntrustedAgentPhone == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EntrustedAgentPhone(childComplexity), true

	case "EnterpriseMinFields.fax_number":
		if e.complexity.EnterpriseMinFields.FaxNumber == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.FaxNumber(childComplexity), true

	case "EnterpriseMinFields.id":
		if e.complexity.EnterpriseMinFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.ID(childComplexity), true

	case "EnterpriseMinFields.institution_category":
		if e.complexity.EnterpriseMinFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.InstitutionCategory(childComplexity), true

	case "EnterpriseMinFields.is_black":
		if e.complexity.EnterpriseMinFields.IsBlack == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.IsBlack(childComplexity), true

	case "EnterpriseMinFields.is_catalog":
		if e.complexity.EnterpriseMinFields.IsCatalog == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.IsCatalog(childComplexity), true

	case "EnterpriseMinFields.is_deleted":
		if e.complexity.EnterpriseMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.IsDeleted(childComplexity), true

	case "EnterpriseMinFields.is_expire":
		if e.complexity.EnterpriseMinFields.IsExpire == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.IsExpire(childComplexity), true

	case "EnterpriseMinFields.is_input":
		if e.complexity.EnterpriseMinFields.IsInput == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.IsInput(childComplexity), true

	case "EnterpriseMinFields.is_install":
		if e.complexity.EnterpriseMinFields.IsInstall == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.IsInstall(childComplexity), true

	case "EnterpriseMinFields.is_key_point":
		if e.complexity.EnterpriseMinFields.IsKeyPoint == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.IsKeyPoint(childComplexity), true

	case "EnterpriseMinFields.is_upload_province":
		if e.complexity.EnterpriseMinFields.IsUploadProvince == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.IsUploadProvince(childComplexity), true

	case "EnterpriseMinFields.legal_representative":
		if e.complexity.EnterpriseMinFields.LegalRepresentative == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.LegalRepresentative(childComplexity), true

	case "EnterpriseMinFields.legal_representative_id_card":
		if e.complexity.EnterpriseMinFields.LegalRepresentativeIDCard == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.LegalRepresentativeIDCard(childComplexity), true

	case "EnterpriseMinFields.legal_representative_id_card_photo":
		if e.complexity.EnterpriseMinFields.LegalRepresentativeIDCardPhoto == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.LegalRepresentativeIDCardPhoto(childComplexity), true

	case "EnterpriseMinFields.legal_representative_phone":
		if e.complexity.EnterpriseMinFields.LegalRepresentativePhone == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.LegalRepresentativePhone(childComplexity), true

	case "EnterpriseMinFields.operating_license_photo":
		if e.complexity.EnterpriseMinFields.OperatingLicensePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.OperatingLicensePhoto(childComplexity), true

	case "EnterpriseMinFields.organization_code":
		if e.complexity.EnterpriseMinFields.OrganizationCode == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.OrganizationCode(childComplexity), true

	case "EnterpriseMinFields.organization_code_certificate_photo":
		if e.complexity.EnterpriseMinFields.OrganizationCodeCertificatePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.OrganizationCodeCertificatePhoto(childComplexity), true

	case "EnterpriseMinFields.police_station_id":
		if e.complexity.EnterpriseMinFields.PoliceStationID == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.PoliceStationID(childComplexity), true

	case "EnterpriseMinFields.province_id":
		if e.complexity.EnterpriseMinFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.ProvinceID(childComplexity), true

	case "EnterpriseMinFields.proxy_enterprise_id":
		if e.complexity.EnterpriseMinFields.ProxyEnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.ProxyEnterpriseID(childComplexity), true

	case "EnterpriseMinFields.remarks":
		if e.complexity.EnterpriseMinFields.Remarks == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.Remarks(childComplexity), true

	case "EnterpriseMinFields.score":
		if e.complexity.EnterpriseMinFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.Score(childComplexity), true

	case "EnterpriseMinFields.state":
		if e.complexity.EnterpriseMinFields.State == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.State(childComplexity), true

	case "EnterpriseMinFields.superior_enterprise_id":
		if e.complexity.EnterpriseMinFields.SuperiorEnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.SuperiorEnterpriseID(childComplexity), true

	case "EnterpriseMinFields.update_at":
		if e.complexity.EnterpriseMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.UpdateAt(childComplexity), true

	case "EnterpriseMinFields.update_by":
		if e.complexity.EnterpriseMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.UpdateBy(childComplexity), true

	case "EnterpriseMinFields.update_time_in":
		if e.complexity.EnterpriseMinFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.UpdateTimeIn(childComplexity), true

	case "EnterpriseMuckTrunk.allow_generate_preview_num":
		if e.complexity.EnterpriseMuckTrunk.AllowGeneratePreviewNum == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.AllowGeneratePreviewNum(childComplexity), true

	case "EnterpriseMuckTrunk.city_check_state":
		if e.complexity.EnterpriseMuckTrunk.CityCheckState == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.CityCheckState(childComplexity), true

	case "EnterpriseMuckTrunk.company_manager":
		if e.complexity.EnterpriseMuckTrunk.CompanyManager == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.CompanyManager(childComplexity), true

	case "EnterpriseMuckTrunk.company_manager_id_card":
		if e.complexity.EnterpriseMuckTrunk.CompanyManagerIDCard == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.CompanyManagerIDCard(childComplexity), true

	case "EnterpriseMuckTrunk.company_manager_phone":
		if e.complexity.EnterpriseMuckTrunk.CompanyManagerPhone == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.CompanyManagerPhone(childComplexity), true

	case "EnterpriseMuckTrunk.company_safe_manager":
		if e.complexity.EnterpriseMuckTrunk.CompanySafeManager == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.CompanySafeManager(childComplexity), true

	case "EnterpriseMuckTrunk.company_safe_manager_id_card":
		if e.complexity.EnterpriseMuckTrunk.CompanySafeManagerIDCard == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.CompanySafeManagerIDCard(childComplexity), true

	case "EnterpriseMuckTrunk.company_safe_manger_phone":
		if e.complexity.EnterpriseMuckTrunk.CompanySafeMangerPhone == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.CompanySafeMangerPhone(childComplexity), true

	case "EnterpriseMuckTrunk.county_check_state":
		if e.complexity.EnterpriseMuckTrunk.CountyCheckState == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.CountyCheckState(childComplexity), true

	case "EnterpriseMuckTrunk.create_at":
		if e.complexity.EnterpriseMuckTrunk.CreateAt == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.CreateAt(childComplexity), true

	case "EnterpriseMuckTrunk.create_by":
		if e.complexity.EnterpriseMuckTrunk.CreateBy == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.CreateBy(childComplexity), true

	case "EnterpriseMuckTrunk.delete_at":
		if e.complexity.EnterpriseMuckTrunk.DeleteAt == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.DeleteAt(childComplexity), true

	case "EnterpriseMuckTrunk.delete_by":
		if e.complexity.EnterpriseMuckTrunk.DeleteBy == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.DeleteBy(childComplexity), true

	case "EnterpriseMuckTrunk.enterprise_id":
		if e.complexity.EnterpriseMuckTrunk.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.EnterpriseID(childComplexity), true

	case "EnterpriseMuckTrunk.enterprise_muck_trunk_id":
		if e.complexity.EnterpriseMuckTrunk.EnterpriseMuckTrunkID == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.EnterpriseMuckTrunkID(childComplexity), true

	case "EnterpriseMuckTrunk.id":
		if e.complexity.EnterpriseMuckTrunk.ID == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.ID(childComplexity), true

	case "EnterpriseMuckTrunk.is_delete":
		if e.complexity.EnterpriseMuckTrunk.IsDelete == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.IsDelete(childComplexity), true

	case "EnterpriseMuckTrunk.is_transport_add":
		if e.complexity.EnterpriseMuckTrunk.IsTransportAdd == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.IsTransportAdd(childComplexity), true

	case "EnterpriseMuckTrunk.is_type_a":
		if e.complexity.EnterpriseMuckTrunk.IsTypeA == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.IsTypeA(childComplexity), true

	case "EnterpriseMuckTrunk.is_type_b":
		if e.complexity.EnterpriseMuckTrunk.IsTypeB == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.IsTypeB(childComplexity), true

	case "EnterpriseMuckTrunk.is_type_c":
		if e.complexity.EnterpriseMuckTrunk.IsTypeC == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.IsTypeC(childComplexity), true

	case "EnterpriseMuckTrunk.is_type_d":
		if e.complexity.EnterpriseMuckTrunk.IsTypeD == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.IsTypeD(childComplexity), true

	case "EnterpriseMuckTrunk.is_type_e":
		if e.complexity.EnterpriseMuckTrunk.IsTypeE == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.IsTypeE(childComplexity), true

	case "EnterpriseMuckTrunk.office_address":
		if e.complexity.EnterpriseMuckTrunk.OfficeAddress == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.OfficeAddress(childComplexity), true

	case "EnterpriseMuckTrunk.office_area":
		if e.complexity.EnterpriseMuckTrunk.OfficeArea == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.OfficeArea(childComplexity), true

	case "EnterpriseMuckTrunk.office_photo":
		if e.complexity.EnterpriseMuckTrunk.OfficePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.OfficePhoto(childComplexity), true

	case "EnterpriseMuckTrunk.parking_address":
		if e.complexity.EnterpriseMuckTrunk.ParkingAddress == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.ParkingAddress(childComplexity), true

	case "EnterpriseMuckTrunk.parking_area":
		if e.complexity.EnterpriseMuckTrunk.ParkingArea == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.ParkingArea(childComplexity), true

	case "EnterpriseMuckTrunk.parking_single_area":
		if e.complexity.EnterpriseMuckTrunk.ParkingSingleArea == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.ParkingSingleArea(childComplexity), true

	case "EnterpriseMuckTrunk.promise_book_url":
		if e.complexity.EnterpriseMuckTrunk.PromiseBookURL == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.PromiseBookURL(childComplexity), true

	case "EnterpriseMuckTrunk.promise_remark":
		if e.complexity.EnterpriseMuckTrunk.PromiseRemark == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.PromiseRemark(childComplexity), true

	case "EnterpriseMuckTrunk.road_license":
		if e.complexity.EnterpriseMuckTrunk.RoadLicense == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.RoadLicense(childComplexity), true

	case "EnterpriseMuckTrunk.road_license_photo":
		if e.complexity.EnterpriseMuckTrunk.RoadLicensePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.RoadLicensePhoto(childComplexity), true

	case "EnterpriseMuckTrunk.routeline_card_promise_photo":
		if e.complexity.EnterpriseMuckTrunk.RoutelineCardPromisePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.RoutelineCardPromisePhoto(childComplexity), true

	case "EnterpriseMuckTrunk.smart_car_count":
		if e.complexity.EnterpriseMuckTrunk.SmartCarCount == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.SmartCarCount(childComplexity), true

	case "EnterpriseMuckTrunk.transport_liable_promise_photo":
		if e.complexity.EnterpriseMuckTrunk.TransportLiablePromisePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.TransportLiablePromisePhoto(childComplexity), true

	case "EnterpriseMuckTrunk.transport_type":
		if e.complexity.EnterpriseMuckTrunk.TransportType == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.TransportType(childComplexity), true

	case "EnterpriseMuckTrunk.update_at":
		if e.complexity.EnterpriseMuckTrunk.UpdateAt == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.UpdateAt(childComplexity), true

	case "EnterpriseMuckTrunk.update_by":
		if e.complexity.EnterpriseMuckTrunk.UpdateBy == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunk.UpdateBy(childComplexity), true

	case "EnterpriseMuckTrunkAggregate.aggregate":
		if e.complexity.EnterpriseMuckTrunkAggregate.Aggregate == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkAggregate.Aggregate(childComplexity), true

	case "EnterpriseMuckTrunkAggregateFields.avg":
		if e.complexity.EnterpriseMuckTrunkAggregateFields.Avg == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkAggregateFields.Avg(childComplexity), true

	case "EnterpriseMuckTrunkAggregateFields.count":
		if e.complexity.EnterpriseMuckTrunkAggregateFields.Count == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkAggregateFields.Count(childComplexity), true

	case "EnterpriseMuckTrunkAggregateFields.max":
		if e.complexity.EnterpriseMuckTrunkAggregateFields.Max == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkAggregateFields.Max(childComplexity), true

	case "EnterpriseMuckTrunkAggregateFields.min":
		if e.complexity.EnterpriseMuckTrunkAggregateFields.Min == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkAggregateFields.Min(childComplexity), true

	case "EnterpriseMuckTrunkAggregateFields.stddev":
		if e.complexity.EnterpriseMuckTrunkAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkAggregateFields.Stddev(childComplexity), true

	case "EnterpriseMuckTrunkAggregateFields.stddev_pop":
		if e.complexity.EnterpriseMuckTrunkAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkAggregateFields.StddevPop(childComplexity), true

	case "EnterpriseMuckTrunkAggregateFields.stddev_samp":
		if e.complexity.EnterpriseMuckTrunkAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkAggregateFields.StddevSamp(childComplexity), true

	case "EnterpriseMuckTrunkAggregateFields.sum":
		if e.complexity.EnterpriseMuckTrunkAggregateFields.Sum == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkAggregateFields.Sum(childComplexity), true

	case "EnterpriseMuckTrunkAggregateFields.var_pop":
		if e.complexity.EnterpriseMuckTrunkAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkAggregateFields.VarPop(childComplexity), true

	case "EnterpriseMuckTrunkAggregateFields.var_samp":
		if e.complexity.EnterpriseMuckTrunkAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkAggregateFields.VarSamp(childComplexity), true

	case "EnterpriseMuckTrunkAggregateFields.variance":
		if e.complexity.EnterpriseMuckTrunkAggregateFields.Variance == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkAggregateFields.Variance(childComplexity), true

	case "EnterpriseMuckTrunkAvgFields.id":
		if e.complexity.EnterpriseMuckTrunkAvgFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkAvgFields.ID(childComplexity), true

	case "EnterpriseMuckTrunkAvgFields.smart_car_count":
		if e.complexity.EnterpriseMuckTrunkAvgFields.SmartCarCount == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkAvgFields.SmartCarCount(childComplexity), true

	case "EnterpriseMuckTrunkAvgFields.transport_type":
		if e.complexity.EnterpriseMuckTrunkAvgFields.TransportType == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkAvgFields.TransportType(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.allow_generate_preview_num":
		if e.complexity.EnterpriseMuckTrunkMaxFields.AllowGeneratePreviewNum == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.AllowGeneratePreviewNum(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.city_check_state":
		if e.complexity.EnterpriseMuckTrunkMaxFields.CityCheckState == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.CityCheckState(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.company_manager":
		if e.complexity.EnterpriseMuckTrunkMaxFields.CompanyManager == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.CompanyManager(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.company_manager_id_card":
		if e.complexity.EnterpriseMuckTrunkMaxFields.CompanyManagerIDCard == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.CompanyManagerIDCard(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.company_manager_phone":
		if e.complexity.EnterpriseMuckTrunkMaxFields.CompanyManagerPhone == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.CompanyManagerPhone(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.company_safe_manager":
		if e.complexity.EnterpriseMuckTrunkMaxFields.CompanySafeManager == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.CompanySafeManager(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.company_safe_manager_id_card":
		if e.complexity.EnterpriseMuckTrunkMaxFields.CompanySafeManagerIDCard == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.CompanySafeManagerIDCard(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.company_safe_manger_phone":
		if e.complexity.EnterpriseMuckTrunkMaxFields.CompanySafeMangerPhone == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.CompanySafeMangerPhone(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.county_check_state":
		if e.complexity.EnterpriseMuckTrunkMaxFields.CountyCheckState == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.CountyCheckState(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.create_at":
		if e.complexity.EnterpriseMuckTrunkMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.CreateAt(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.create_by":
		if e.complexity.EnterpriseMuckTrunkMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.CreateBy(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.delete_at":
		if e.complexity.EnterpriseMuckTrunkMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.DeleteAt(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.delete_by":
		if e.complexity.EnterpriseMuckTrunkMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.DeleteBy(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.enterprise_id":
		if e.complexity.EnterpriseMuckTrunkMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.EnterpriseID(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.enterprise_muck_trunk_id":
		if e.complexity.EnterpriseMuckTrunkMaxFields.EnterpriseMuckTrunkID == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.EnterpriseMuckTrunkID(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.id":
		if e.complexity.EnterpriseMuckTrunkMaxFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.ID(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.is_delete":
		if e.complexity.EnterpriseMuckTrunkMaxFields.IsDelete == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.IsDelete(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.is_transport_add":
		if e.complexity.EnterpriseMuckTrunkMaxFields.IsTransportAdd == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.IsTransportAdd(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.is_type_a":
		if e.complexity.EnterpriseMuckTrunkMaxFields.IsTypeA == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.IsTypeA(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.is_type_b":
		if e.complexity.EnterpriseMuckTrunkMaxFields.IsTypeB == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.IsTypeB(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.is_type_c":
		if e.complexity.EnterpriseMuckTrunkMaxFields.IsTypeC == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.IsTypeC(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.is_type_d":
		if e.complexity.EnterpriseMuckTrunkMaxFields.IsTypeD == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.IsTypeD(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.is_type_e":
		if e.complexity.EnterpriseMuckTrunkMaxFields.IsTypeE == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.IsTypeE(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.office_address":
		if e.complexity.EnterpriseMuckTrunkMaxFields.OfficeAddress == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.OfficeAddress(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.office_area":
		if e.complexity.EnterpriseMuckTrunkMaxFields.OfficeArea == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.OfficeArea(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.office_photo":
		if e.complexity.EnterpriseMuckTrunkMaxFields.OfficePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.OfficePhoto(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.parking_address":
		if e.complexity.EnterpriseMuckTrunkMaxFields.ParkingAddress == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.ParkingAddress(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.parking_area":
		if e.complexity.EnterpriseMuckTrunkMaxFields.ParkingArea == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.ParkingArea(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.parking_single_area":
		if e.complexity.EnterpriseMuckTrunkMaxFields.ParkingSingleArea == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.ParkingSingleArea(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.promise_book_url":
		if e.complexity.EnterpriseMuckTrunkMaxFields.PromiseBookURL == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.PromiseBookURL(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.promise_remark":
		if e.complexity.EnterpriseMuckTrunkMaxFields.PromiseRemark == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.PromiseRemark(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.road_license":
		if e.complexity.EnterpriseMuckTrunkMaxFields.RoadLicense == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.RoadLicense(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.road_license_photo":
		if e.complexity.EnterpriseMuckTrunkMaxFields.RoadLicensePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.RoadLicensePhoto(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.routeline_card_promise_photo":
		if e.complexity.EnterpriseMuckTrunkMaxFields.RoutelineCardPromisePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.RoutelineCardPromisePhoto(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.smart_car_count":
		if e.complexity.EnterpriseMuckTrunkMaxFields.SmartCarCount == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.SmartCarCount(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.transport_liable_promise_photo":
		if e.complexity.EnterpriseMuckTrunkMaxFields.TransportLiablePromisePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.TransportLiablePromisePhoto(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.transport_type":
		if e.complexity.EnterpriseMuckTrunkMaxFields.TransportType == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.TransportType(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.update_at":
		if e.complexity.EnterpriseMuckTrunkMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.UpdateAt(childComplexity), true

	case "EnterpriseMuckTrunkMaxFields.update_by":
		if e.complexity.EnterpriseMuckTrunkMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMaxFields.UpdateBy(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.allow_generate_preview_num":
		if e.complexity.EnterpriseMuckTrunkMinFields.AllowGeneratePreviewNum == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.AllowGeneratePreviewNum(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.city_check_state":
		if e.complexity.EnterpriseMuckTrunkMinFields.CityCheckState == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.CityCheckState(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.company_manager":
		if e.complexity.EnterpriseMuckTrunkMinFields.CompanyManager == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.CompanyManager(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.company_manager_id_card":
		if e.complexity.EnterpriseMuckTrunkMinFields.CompanyManagerIDCard == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.CompanyManagerIDCard(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.company_manager_phone":
		if e.complexity.EnterpriseMuckTrunkMinFields.CompanyManagerPhone == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.CompanyManagerPhone(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.company_safe_manager":
		if e.complexity.EnterpriseMuckTrunkMinFields.CompanySafeManager == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.CompanySafeManager(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.company_safe_manager_id_card":
		if e.complexity.EnterpriseMuckTrunkMinFields.CompanySafeManagerIDCard == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.CompanySafeManagerIDCard(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.company_safe_manger_phone":
		if e.complexity.EnterpriseMuckTrunkMinFields.CompanySafeMangerPhone == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.CompanySafeMangerPhone(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.county_check_state":
		if e.complexity.EnterpriseMuckTrunkMinFields.CountyCheckState == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.CountyCheckState(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.create_at":
		if e.complexity.EnterpriseMuckTrunkMinFields.CreateAt == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.CreateAt(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.create_by":
		if e.complexity.EnterpriseMuckTrunkMinFields.CreateBy == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.CreateBy(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.delete_at":
		if e.complexity.EnterpriseMuckTrunkMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.DeleteAt(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.delete_by":
		if e.complexity.EnterpriseMuckTrunkMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.DeleteBy(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.enterprise_id":
		if e.complexity.EnterpriseMuckTrunkMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.EnterpriseID(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.enterprise_muck_trunk_id":
		if e.complexity.EnterpriseMuckTrunkMinFields.EnterpriseMuckTrunkID == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.EnterpriseMuckTrunkID(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.id":
		if e.complexity.EnterpriseMuckTrunkMinFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.ID(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.is_delete":
		if e.complexity.EnterpriseMuckTrunkMinFields.IsDelete == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.IsDelete(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.is_transport_add":
		if e.complexity.EnterpriseMuckTrunkMinFields.IsTransportAdd == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.IsTransportAdd(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.is_type_a":
		if e.complexity.EnterpriseMuckTrunkMinFields.IsTypeA == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.IsTypeA(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.is_type_b":
		if e.complexity.EnterpriseMuckTrunkMinFields.IsTypeB == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.IsTypeB(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.is_type_c":
		if e.complexity.EnterpriseMuckTrunkMinFields.IsTypeC == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.IsTypeC(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.is_type_d":
		if e.complexity.EnterpriseMuckTrunkMinFields.IsTypeD == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.IsTypeD(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.is_type_e":
		if e.complexity.EnterpriseMuckTrunkMinFields.IsTypeE == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.IsTypeE(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.office_address":
		if e.complexity.EnterpriseMuckTrunkMinFields.OfficeAddress == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.OfficeAddress(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.office_area":
		if e.complexity.EnterpriseMuckTrunkMinFields.OfficeArea == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.OfficeArea(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.office_photo":
		if e.complexity.EnterpriseMuckTrunkMinFields.OfficePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.OfficePhoto(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.parking_address":
		if e.complexity.EnterpriseMuckTrunkMinFields.ParkingAddress == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.ParkingAddress(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.parking_area":
		if e.complexity.EnterpriseMuckTrunkMinFields.ParkingArea == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.ParkingArea(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.parking_single_area":
		if e.complexity.EnterpriseMuckTrunkMinFields.ParkingSingleArea == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.ParkingSingleArea(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.promise_book_url":
		if e.complexity.EnterpriseMuckTrunkMinFields.PromiseBookURL == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.PromiseBookURL(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.promise_remark":
		if e.complexity.EnterpriseMuckTrunkMinFields.PromiseRemark == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.PromiseRemark(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.road_license":
		if e.complexity.EnterpriseMuckTrunkMinFields.RoadLicense == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.RoadLicense(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.road_license_photo":
		if e.complexity.EnterpriseMuckTrunkMinFields.RoadLicensePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.RoadLicensePhoto(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.routeline_card_promise_photo":
		if e.complexity.EnterpriseMuckTrunkMinFields.RoutelineCardPromisePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.RoutelineCardPromisePhoto(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.smart_car_count":
		if e.complexity.EnterpriseMuckTrunkMinFields.SmartCarCount == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.SmartCarCount(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.transport_liable_promise_photo":
		if e.complexity.EnterpriseMuckTrunkMinFields.TransportLiablePromisePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.TransportLiablePromisePhoto(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.transport_type":
		if e.complexity.EnterpriseMuckTrunkMinFields.TransportType == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.TransportType(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.update_at":
		if e.complexity.EnterpriseMuckTrunkMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.UpdateAt(childComplexity), true

	case "EnterpriseMuckTrunkMinFields.update_by":
		if e.complexity.EnterpriseMuckTrunkMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMinFields.UpdateBy(childComplexity), true

	case "EnterpriseMuckTrunkMutationResponse.affected_rows":
		if e.complexity.EnterpriseMuckTrunkMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMutationResponse.AffectedRows(childComplexity), true

	case "EnterpriseMuckTrunkMutationResponse.returning":
		if e.complexity.EnterpriseMuckTrunkMutationResponse.Returning == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkMutationResponse.Returning(childComplexity), true

	case "EnterpriseMuckTrunkStddevFields.id":
		if e.complexity.EnterpriseMuckTrunkStddevFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkStddevFields.ID(childComplexity), true

	case "EnterpriseMuckTrunkStddevFields.smart_car_count":
		if e.complexity.EnterpriseMuckTrunkStddevFields.SmartCarCount == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkStddevFields.SmartCarCount(childComplexity), true

	case "EnterpriseMuckTrunkStddevFields.transport_type":
		if e.complexity.EnterpriseMuckTrunkStddevFields.TransportType == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkStddevFields.TransportType(childComplexity), true

	case "EnterpriseMuckTrunkStddevPopFields.id":
		if e.complexity.EnterpriseMuckTrunkStddevPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkStddevPopFields.ID(childComplexity), true

	case "EnterpriseMuckTrunkStddevPopFields.smart_car_count":
		if e.complexity.EnterpriseMuckTrunkStddevPopFields.SmartCarCount == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkStddevPopFields.SmartCarCount(childComplexity), true

	case "EnterpriseMuckTrunkStddevPopFields.transport_type":
		if e.complexity.EnterpriseMuckTrunkStddevPopFields.TransportType == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkStddevPopFields.TransportType(childComplexity), true

	case "EnterpriseMuckTrunkStddevSampFields.id":
		if e.complexity.EnterpriseMuckTrunkStddevSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkStddevSampFields.ID(childComplexity), true

	case "EnterpriseMuckTrunkStddevSampFields.smart_car_count":
		if e.complexity.EnterpriseMuckTrunkStddevSampFields.SmartCarCount == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkStddevSampFields.SmartCarCount(childComplexity), true

	case "EnterpriseMuckTrunkStddevSampFields.transport_type":
		if e.complexity.EnterpriseMuckTrunkStddevSampFields.TransportType == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkStddevSampFields.TransportType(childComplexity), true

	case "EnterpriseMuckTrunkSumFields.id":
		if e.complexity.EnterpriseMuckTrunkSumFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkSumFields.ID(childComplexity), true

	case "EnterpriseMuckTrunkSumFields.smart_car_count":
		if e.complexity.EnterpriseMuckTrunkSumFields.SmartCarCount == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkSumFields.SmartCarCount(childComplexity), true

	case "EnterpriseMuckTrunkSumFields.transport_type":
		if e.complexity.EnterpriseMuckTrunkSumFields.TransportType == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkSumFields.TransportType(childComplexity), true

	case "EnterpriseMuckTrunkVarPopFields.id":
		if e.complexity.EnterpriseMuckTrunkVarPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkVarPopFields.ID(childComplexity), true

	case "EnterpriseMuckTrunkVarPopFields.smart_car_count":
		if e.complexity.EnterpriseMuckTrunkVarPopFields.SmartCarCount == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkVarPopFields.SmartCarCount(childComplexity), true

	case "EnterpriseMuckTrunkVarPopFields.transport_type":
		if e.complexity.EnterpriseMuckTrunkVarPopFields.TransportType == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkVarPopFields.TransportType(childComplexity), true

	case "EnterpriseMuckTrunkVarSampFields.id":
		if e.complexity.EnterpriseMuckTrunkVarSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkVarSampFields.ID(childComplexity), true

	case "EnterpriseMuckTrunkVarSampFields.smart_car_count":
		if e.complexity.EnterpriseMuckTrunkVarSampFields.SmartCarCount == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkVarSampFields.SmartCarCount(childComplexity), true

	case "EnterpriseMuckTrunkVarSampFields.transport_type":
		if e.complexity.EnterpriseMuckTrunkVarSampFields.TransportType == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkVarSampFields.TransportType(childComplexity), true

	case "EnterpriseMuckTrunkVarianceFields.id":
		if e.complexity.EnterpriseMuckTrunkVarianceFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkVarianceFields.ID(childComplexity), true

	case "EnterpriseMuckTrunkVarianceFields.smart_car_count":
		if e.complexity.EnterpriseMuckTrunkVarianceFields.SmartCarCount == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkVarianceFields.SmartCarCount(childComplexity), true

	case "EnterpriseMuckTrunkVarianceFields.transport_type":
		if e.complexity.EnterpriseMuckTrunkVarianceFields.TransportType == nil {
			break
		}

		return e.complexity.EnterpriseMuckTrunkVarianceFields.TransportType(childComplexity), true

	case "EnterpriseMutationResponse.affected_rows":
		if e.complexity.EnterpriseMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.EnterpriseMutationResponse.AffectedRows(childComplexity), true

	case "EnterpriseMutationResponse.returning":
		if e.complexity.EnterpriseMutationResponse.Returning == nil {
			break
		}

		return e.complexity.EnterpriseMutationResponse.Returning(childComplexity), true

	case "EnterpriseScoreLog.add_score":
		if e.complexity.EnterpriseScoreLog.AddScore == nil {
			break
		}

		return e.complexity.EnterpriseScoreLog.AddScore(childComplexity), true

	case "EnterpriseScoreLog.content":
		if e.complexity.EnterpriseScoreLog.Content == nil {
			break
		}

		return e.complexity.EnterpriseScoreLog.Content(childComplexity), true

	case "EnterpriseScoreLog.create_at":
		if e.complexity.EnterpriseScoreLog.CreateAt == nil {
			break
		}

		return e.complexity.EnterpriseScoreLog.CreateAt(childComplexity), true

	case "EnterpriseScoreLog.create_by":
		if e.complexity.EnterpriseScoreLog.CreateBy == nil {
			break
		}

		return e.complexity.EnterpriseScoreLog.CreateBy(childComplexity), true

	case "EnterpriseScoreLog.current_score":
		if e.complexity.EnterpriseScoreLog.CurrentScore == nil {
			break
		}

		return e.complexity.EnterpriseScoreLog.CurrentScore(childComplexity), true

	case "EnterpriseScoreLog.delete_at":
		if e.complexity.EnterpriseScoreLog.DeleteAt == nil {
			break
		}

		return e.complexity.EnterpriseScoreLog.DeleteAt(childComplexity), true

	case "EnterpriseScoreLog.delete_by":
		if e.complexity.EnterpriseScoreLog.DeleteBy == nil {
			break
		}

		return e.complexity.EnterpriseScoreLog.DeleteBy(childComplexity), true

	case "EnterpriseScoreLog.enterprise_id":
		if e.complexity.EnterpriseScoreLog.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseScoreLog.EnterpriseID(childComplexity), true

	case "EnterpriseScoreLog.file_url":
		if e.complexity.EnterpriseScoreLog.FileURL == nil {
			break
		}

		return e.complexity.EnterpriseScoreLog.FileURL(childComplexity), true

	case "EnterpriseScoreLog.id":
		if e.complexity.EnterpriseScoreLog.ID == nil {
			break
		}

		return e.complexity.EnterpriseScoreLog.ID(childComplexity), true

	case "EnterpriseScoreLog.is_delete":
		if e.complexity.EnterpriseScoreLog.IsDelete == nil {
			break
		}

		return e.complexity.EnterpriseScoreLog.IsDelete(childComplexity), true

	case "EnterpriseScoreLog.log_id":
		if e.complexity.EnterpriseScoreLog.LogID == nil {
			break
		}

		return e.complexity.EnterpriseScoreLog.LogID(childComplexity), true

	case "EnterpriseScoreLog.score_set_id":
		if e.complexity.EnterpriseScoreLog.ScoreSetID == nil {
			break
		}

		return e.complexity.EnterpriseScoreLog.ScoreSetID(childComplexity), true

	case "EnterpriseScoreLog.update_at":
		if e.complexity.EnterpriseScoreLog.UpdateAt == nil {
			break
		}

		return e.complexity.EnterpriseScoreLog.UpdateAt(childComplexity), true

	case "EnterpriseScoreLog.update_by":
		if e.complexity.EnterpriseScoreLog.UpdateBy == nil {
			break
		}

		return e.complexity.EnterpriseScoreLog.UpdateBy(childComplexity), true

	case "EnterpriseScoreLogAggregate.aggregate":
		if e.complexity.EnterpriseScoreLogAggregate.Aggregate == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogAggregate.Aggregate(childComplexity), true

	case "EnterpriseScoreLogAggregateFields.avg":
		if e.complexity.EnterpriseScoreLogAggregateFields.Avg == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogAggregateFields.Avg(childComplexity), true

	case "EnterpriseScoreLogAggregateFields.count":
		if e.complexity.EnterpriseScoreLogAggregateFields.Count == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogAggregateFields.Count(childComplexity), true

	case "EnterpriseScoreLogAggregateFields.max":
		if e.complexity.EnterpriseScoreLogAggregateFields.Max == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogAggregateFields.Max(childComplexity), true

	case "EnterpriseScoreLogAggregateFields.min":
		if e.complexity.EnterpriseScoreLogAggregateFields.Min == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogAggregateFields.Min(childComplexity), true

	case "EnterpriseScoreLogAggregateFields.stddev":
		if e.complexity.EnterpriseScoreLogAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogAggregateFields.Stddev(childComplexity), true

	case "EnterpriseScoreLogAggregateFields.stddev_pop":
		if e.complexity.EnterpriseScoreLogAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogAggregateFields.StddevPop(childComplexity), true

	case "EnterpriseScoreLogAggregateFields.stddev_samp":
		if e.complexity.EnterpriseScoreLogAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogAggregateFields.StddevSamp(childComplexity), true

	case "EnterpriseScoreLogAggregateFields.sum":
		if e.complexity.EnterpriseScoreLogAggregateFields.Sum == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogAggregateFields.Sum(childComplexity), true

	case "EnterpriseScoreLogAggregateFields.var_pop":
		if e.complexity.EnterpriseScoreLogAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogAggregateFields.VarPop(childComplexity), true

	case "EnterpriseScoreLogAggregateFields.var_samp":
		if e.complexity.EnterpriseScoreLogAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogAggregateFields.VarSamp(childComplexity), true

	case "EnterpriseScoreLogAggregateFields.variance":
		if e.complexity.EnterpriseScoreLogAggregateFields.Variance == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogAggregateFields.Variance(childComplexity), true

	case "EnterpriseScoreLogAvgFields.add_score":
		if e.complexity.EnterpriseScoreLogAvgFields.AddScore == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogAvgFields.AddScore(childComplexity), true

	case "EnterpriseScoreLogAvgFields.current_score":
		if e.complexity.EnterpriseScoreLogAvgFields.CurrentScore == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogAvgFields.CurrentScore(childComplexity), true

	case "EnterpriseScoreLogAvgFields.id":
		if e.complexity.EnterpriseScoreLogAvgFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogAvgFields.ID(childComplexity), true

	case "EnterpriseScoreLogMaxFields.add_score":
		if e.complexity.EnterpriseScoreLogMaxFields.AddScore == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMaxFields.AddScore(childComplexity), true

	case "EnterpriseScoreLogMaxFields.content":
		if e.complexity.EnterpriseScoreLogMaxFields.Content == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMaxFields.Content(childComplexity), true

	case "EnterpriseScoreLogMaxFields.create_at":
		if e.complexity.EnterpriseScoreLogMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMaxFields.CreateAt(childComplexity), true

	case "EnterpriseScoreLogMaxFields.create_by":
		if e.complexity.EnterpriseScoreLogMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMaxFields.CreateBy(childComplexity), true

	case "EnterpriseScoreLogMaxFields.current_score":
		if e.complexity.EnterpriseScoreLogMaxFields.CurrentScore == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMaxFields.CurrentScore(childComplexity), true

	case "EnterpriseScoreLogMaxFields.delete_at":
		if e.complexity.EnterpriseScoreLogMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMaxFields.DeleteAt(childComplexity), true

	case "EnterpriseScoreLogMaxFields.delete_by":
		if e.complexity.EnterpriseScoreLogMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMaxFields.DeleteBy(childComplexity), true

	case "EnterpriseScoreLogMaxFields.enterprise_id":
		if e.complexity.EnterpriseScoreLogMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMaxFields.EnterpriseID(childComplexity), true

	case "EnterpriseScoreLogMaxFields.file_url":
		if e.complexity.EnterpriseScoreLogMaxFields.FileURL == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMaxFields.FileURL(childComplexity), true

	case "EnterpriseScoreLogMaxFields.id":
		if e.complexity.EnterpriseScoreLogMaxFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMaxFields.ID(childComplexity), true

	case "EnterpriseScoreLogMaxFields.is_delete":
		if e.complexity.EnterpriseScoreLogMaxFields.IsDelete == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMaxFields.IsDelete(childComplexity), true

	case "EnterpriseScoreLogMaxFields.log_id":
		if e.complexity.EnterpriseScoreLogMaxFields.LogID == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMaxFields.LogID(childComplexity), true

	case "EnterpriseScoreLogMaxFields.score_set_id":
		if e.complexity.EnterpriseScoreLogMaxFields.ScoreSetID == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMaxFields.ScoreSetID(childComplexity), true

	case "EnterpriseScoreLogMaxFields.update_at":
		if e.complexity.EnterpriseScoreLogMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMaxFields.UpdateAt(childComplexity), true

	case "EnterpriseScoreLogMaxFields.update_by":
		if e.complexity.EnterpriseScoreLogMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMaxFields.UpdateBy(childComplexity), true

	case "EnterpriseScoreLogMinFields.add_score":
		if e.complexity.EnterpriseScoreLogMinFields.AddScore == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMinFields.AddScore(childComplexity), true

	case "EnterpriseScoreLogMinFields.content":
		if e.complexity.EnterpriseScoreLogMinFields.Content == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMinFields.Content(childComplexity), true

	case "EnterpriseScoreLogMinFields.create_at":
		if e.complexity.EnterpriseScoreLogMinFields.CreateAt == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMinFields.CreateAt(childComplexity), true

	case "EnterpriseScoreLogMinFields.create_by":
		if e.complexity.EnterpriseScoreLogMinFields.CreateBy == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMinFields.CreateBy(childComplexity), true

	case "EnterpriseScoreLogMinFields.current_score":
		if e.complexity.EnterpriseScoreLogMinFields.CurrentScore == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMinFields.CurrentScore(childComplexity), true

	case "EnterpriseScoreLogMinFields.delete_at":
		if e.complexity.EnterpriseScoreLogMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMinFields.DeleteAt(childComplexity), true

	case "EnterpriseScoreLogMinFields.delete_by":
		if e.complexity.EnterpriseScoreLogMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMinFields.DeleteBy(childComplexity), true

	case "EnterpriseScoreLogMinFields.enterprise_id":
		if e.complexity.EnterpriseScoreLogMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMinFields.EnterpriseID(childComplexity), true

	case "EnterpriseScoreLogMinFields.file_url":
		if e.complexity.EnterpriseScoreLogMinFields.FileURL == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMinFields.FileURL(childComplexity), true

	case "EnterpriseScoreLogMinFields.id":
		if e.complexity.EnterpriseScoreLogMinFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMinFields.ID(childComplexity), true

	case "EnterpriseScoreLogMinFields.is_delete":
		if e.complexity.EnterpriseScoreLogMinFields.IsDelete == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMinFields.IsDelete(childComplexity), true

	case "EnterpriseScoreLogMinFields.log_id":
		if e.complexity.EnterpriseScoreLogMinFields.LogID == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMinFields.LogID(childComplexity), true

	case "EnterpriseScoreLogMinFields.score_set_id":
		if e.complexity.EnterpriseScoreLogMinFields.ScoreSetID == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMinFields.ScoreSetID(childComplexity), true

	case "EnterpriseScoreLogMinFields.update_at":
		if e.complexity.EnterpriseScoreLogMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMinFields.UpdateAt(childComplexity), true

	case "EnterpriseScoreLogMinFields.update_by":
		if e.complexity.EnterpriseScoreLogMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMinFields.UpdateBy(childComplexity), true

	case "EnterpriseScoreLogMutationResponse.affected_rows":
		if e.complexity.EnterpriseScoreLogMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMutationResponse.AffectedRows(childComplexity), true

	case "EnterpriseScoreLogMutationResponse.returning":
		if e.complexity.EnterpriseScoreLogMutationResponse.Returning == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogMutationResponse.Returning(childComplexity), true

	case "EnterpriseScoreLogStddevFields.add_score":
		if e.complexity.EnterpriseScoreLogStddevFields.AddScore == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogStddevFields.AddScore(childComplexity), true

	case "EnterpriseScoreLogStddevFields.current_score":
		if e.complexity.EnterpriseScoreLogStddevFields.CurrentScore == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogStddevFields.CurrentScore(childComplexity), true

	case "EnterpriseScoreLogStddevFields.id":
		if e.complexity.EnterpriseScoreLogStddevFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogStddevFields.ID(childComplexity), true

	case "EnterpriseScoreLogStddevPopFields.add_score":
		if e.complexity.EnterpriseScoreLogStddevPopFields.AddScore == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogStddevPopFields.AddScore(childComplexity), true

	case "EnterpriseScoreLogStddevPopFields.current_score":
		if e.complexity.EnterpriseScoreLogStddevPopFields.CurrentScore == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogStddevPopFields.CurrentScore(childComplexity), true

	case "EnterpriseScoreLogStddevPopFields.id":
		if e.complexity.EnterpriseScoreLogStddevPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogStddevPopFields.ID(childComplexity), true

	case "EnterpriseScoreLogStddevSampFields.add_score":
		if e.complexity.EnterpriseScoreLogStddevSampFields.AddScore == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogStddevSampFields.AddScore(childComplexity), true

	case "EnterpriseScoreLogStddevSampFields.current_score":
		if e.complexity.EnterpriseScoreLogStddevSampFields.CurrentScore == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogStddevSampFields.CurrentScore(childComplexity), true

	case "EnterpriseScoreLogStddevSampFields.id":
		if e.complexity.EnterpriseScoreLogStddevSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogStddevSampFields.ID(childComplexity), true

	case "EnterpriseScoreLogSumFields.add_score":
		if e.complexity.EnterpriseScoreLogSumFields.AddScore == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogSumFields.AddScore(childComplexity), true

	case "EnterpriseScoreLogSumFields.current_score":
		if e.complexity.EnterpriseScoreLogSumFields.CurrentScore == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogSumFields.CurrentScore(childComplexity), true

	case "EnterpriseScoreLogSumFields.id":
		if e.complexity.EnterpriseScoreLogSumFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogSumFields.ID(childComplexity), true

	case "EnterpriseScoreLogVarPopFields.add_score":
		if e.complexity.EnterpriseScoreLogVarPopFields.AddScore == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogVarPopFields.AddScore(childComplexity), true

	case "EnterpriseScoreLogVarPopFields.current_score":
		if e.complexity.EnterpriseScoreLogVarPopFields.CurrentScore == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogVarPopFields.CurrentScore(childComplexity), true

	case "EnterpriseScoreLogVarPopFields.id":
		if e.complexity.EnterpriseScoreLogVarPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogVarPopFields.ID(childComplexity), true

	case "EnterpriseScoreLogVarSampFields.add_score":
		if e.complexity.EnterpriseScoreLogVarSampFields.AddScore == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogVarSampFields.AddScore(childComplexity), true

	case "EnterpriseScoreLogVarSampFields.current_score":
		if e.complexity.EnterpriseScoreLogVarSampFields.CurrentScore == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogVarSampFields.CurrentScore(childComplexity), true

	case "EnterpriseScoreLogVarSampFields.id":
		if e.complexity.EnterpriseScoreLogVarSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogVarSampFields.ID(childComplexity), true

	case "EnterpriseScoreLogVarianceFields.add_score":
		if e.complexity.EnterpriseScoreLogVarianceFields.AddScore == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogVarianceFields.AddScore(childComplexity), true

	case "EnterpriseScoreLogVarianceFields.current_score":
		if e.complexity.EnterpriseScoreLogVarianceFields.CurrentScore == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogVarianceFields.CurrentScore(childComplexity), true

	case "EnterpriseScoreLogVarianceFields.id":
		if e.complexity.EnterpriseScoreLogVarianceFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseScoreLogVarianceFields.ID(childComplexity), true

	case "EnterpriseScoreSet.content":
		if e.complexity.EnterpriseScoreSet.Content == nil {
			break
		}

		return e.complexity.EnterpriseScoreSet.Content(childComplexity), true

	case "EnterpriseScoreSet.create_at":
		if e.complexity.EnterpriseScoreSet.CreateAt == nil {
			break
		}

		return e.complexity.EnterpriseScoreSet.CreateAt(childComplexity), true

	case "EnterpriseScoreSet.create_by":
		if e.complexity.EnterpriseScoreSet.CreateBy == nil {
			break
		}

		return e.complexity.EnterpriseScoreSet.CreateBy(childComplexity), true

	case "EnterpriseScoreSet.delete_at":
		if e.complexity.EnterpriseScoreSet.DeleteAt == nil {
			break
		}

		return e.complexity.EnterpriseScoreSet.DeleteAt(childComplexity), true

	case "EnterpriseScoreSet.delete_by":
		if e.complexity.EnterpriseScoreSet.DeleteBy == nil {
			break
		}

		return e.complexity.EnterpriseScoreSet.DeleteBy(childComplexity), true

	case "EnterpriseScoreSet.id":
		if e.complexity.EnterpriseScoreSet.ID == nil {
			break
		}

		return e.complexity.EnterpriseScoreSet.ID(childComplexity), true

	case "EnterpriseScoreSet.is_delete":
		if e.complexity.EnterpriseScoreSet.IsDelete == nil {
			break
		}

		return e.complexity.EnterpriseScoreSet.IsDelete(childComplexity), true

	case "EnterpriseScoreSet.score":
		if e.complexity.EnterpriseScoreSet.Score == nil {
			break
		}

		return e.complexity.EnterpriseScoreSet.Score(childComplexity), true

	case "EnterpriseScoreSet.score_set_id":
		if e.complexity.EnterpriseScoreSet.ScoreSetID == nil {
			break
		}

		return e.complexity.EnterpriseScoreSet.ScoreSetID(childComplexity), true

	case "EnterpriseScoreSet.type":
		if e.complexity.EnterpriseScoreSet.Type == nil {
			break
		}

		return e.complexity.EnterpriseScoreSet.Type(childComplexity), true

	case "EnterpriseScoreSet.update_at":
		if e.complexity.EnterpriseScoreSet.UpdateAt == nil {
			break
		}

		return e.complexity.EnterpriseScoreSet.UpdateAt(childComplexity), true

	case "EnterpriseScoreSet.update_by":
		if e.complexity.EnterpriseScoreSet.UpdateBy == nil {
			break
		}

		return e.complexity.EnterpriseScoreSet.UpdateBy(childComplexity), true

	case "EnterpriseScoreSetAggregate.aggregate":
		if e.complexity.EnterpriseScoreSetAggregate.Aggregate == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetAggregate.Aggregate(childComplexity), true

	case "EnterpriseScoreSetAggregateFields.avg":
		if e.complexity.EnterpriseScoreSetAggregateFields.Avg == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetAggregateFields.Avg(childComplexity), true

	case "EnterpriseScoreSetAggregateFields.count":
		if e.complexity.EnterpriseScoreSetAggregateFields.Count == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetAggregateFields.Count(childComplexity), true

	case "EnterpriseScoreSetAggregateFields.max":
		if e.complexity.EnterpriseScoreSetAggregateFields.Max == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetAggregateFields.Max(childComplexity), true

	case "EnterpriseScoreSetAggregateFields.min":
		if e.complexity.EnterpriseScoreSetAggregateFields.Min == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetAggregateFields.Min(childComplexity), true

	case "EnterpriseScoreSetAggregateFields.stddev":
		if e.complexity.EnterpriseScoreSetAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetAggregateFields.Stddev(childComplexity), true

	case "EnterpriseScoreSetAggregateFields.stddev_pop":
		if e.complexity.EnterpriseScoreSetAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetAggregateFields.StddevPop(childComplexity), true

	case "EnterpriseScoreSetAggregateFields.stddev_samp":
		if e.complexity.EnterpriseScoreSetAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetAggregateFields.StddevSamp(childComplexity), true

	case "EnterpriseScoreSetAggregateFields.sum":
		if e.complexity.EnterpriseScoreSetAggregateFields.Sum == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetAggregateFields.Sum(childComplexity), true

	case "EnterpriseScoreSetAggregateFields.var_pop":
		if e.complexity.EnterpriseScoreSetAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetAggregateFields.VarPop(childComplexity), true

	case "EnterpriseScoreSetAggregateFields.var_samp":
		if e.complexity.EnterpriseScoreSetAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetAggregateFields.VarSamp(childComplexity), true

	case "EnterpriseScoreSetAggregateFields.variance":
		if e.complexity.EnterpriseScoreSetAggregateFields.Variance == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetAggregateFields.Variance(childComplexity), true

	case "EnterpriseScoreSetAvgFields.id":
		if e.complexity.EnterpriseScoreSetAvgFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetAvgFields.ID(childComplexity), true

	case "EnterpriseScoreSetAvgFields.score":
		if e.complexity.EnterpriseScoreSetAvgFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetAvgFields.Score(childComplexity), true

	case "EnterpriseScoreSetAvgFields.type":
		if e.complexity.EnterpriseScoreSetAvgFields.Type == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetAvgFields.Type(childComplexity), true

	case "EnterpriseScoreSetMaxFields.content":
		if e.complexity.EnterpriseScoreSetMaxFields.Content == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetMaxFields.Content(childComplexity), true

	case "EnterpriseScoreSetMaxFields.create_at":
		if e.complexity.EnterpriseScoreSetMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetMaxFields.CreateAt(childComplexity), true

	case "EnterpriseScoreSetMaxFields.create_by":
		if e.complexity.EnterpriseScoreSetMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetMaxFields.CreateBy(childComplexity), true

	case "EnterpriseScoreSetMaxFields.delete_at":
		if e.complexity.EnterpriseScoreSetMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetMaxFields.DeleteAt(childComplexity), true

	case "EnterpriseScoreSetMaxFields.delete_by":
		if e.complexity.EnterpriseScoreSetMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetMaxFields.DeleteBy(childComplexity), true

	case "EnterpriseScoreSetMaxFields.id":
		if e.complexity.EnterpriseScoreSetMaxFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetMaxFields.ID(childComplexity), true

	case "EnterpriseScoreSetMaxFields.is_delete":
		if e.complexity.EnterpriseScoreSetMaxFields.IsDelete == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetMaxFields.IsDelete(childComplexity), true

	case "EnterpriseScoreSetMaxFields.score":
		if e.complexity.EnterpriseScoreSetMaxFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetMaxFields.Score(childComplexity), true

	case "EnterpriseScoreSetMaxFields.score_set_id":
		if e.complexity.EnterpriseScoreSetMaxFields.ScoreSetID == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetMaxFields.ScoreSetID(childComplexity), true

	case "EnterpriseScoreSetMaxFields.type":
		if e.complexity.EnterpriseScoreSetMaxFields.Type == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetMaxFields.Type(childComplexity), true

	case "EnterpriseScoreSetMaxFields.update_at":
		if e.complexity.EnterpriseScoreSetMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetMaxFields.UpdateAt(childComplexity), true

	case "EnterpriseScoreSetMaxFields.update_by":
		if e.complexity.EnterpriseScoreSetMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetMaxFields.UpdateBy(childComplexity), true

	case "EnterpriseScoreSetMinFields.content":
		if e.complexity.EnterpriseScoreSetMinFields.Content == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetMinFields.Content(childComplexity), true

	case "EnterpriseScoreSetMinFields.create_at":
		if e.complexity.EnterpriseScoreSetMinFields.CreateAt == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetMinFields.CreateAt(childComplexity), true

	case "EnterpriseScoreSetMinFields.create_by":
		if e.complexity.EnterpriseScoreSetMinFields.CreateBy == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetMinFields.CreateBy(childComplexity), true

	case "EnterpriseScoreSetMinFields.delete_at":
		if e.complexity.EnterpriseScoreSetMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetMinFields.DeleteAt(childComplexity), true

	case "EnterpriseScoreSetMinFields.delete_by":
		if e.complexity.EnterpriseScoreSetMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetMinFields.DeleteBy(childComplexity), true

	case "EnterpriseScoreSetMinFields.id":
		if e.complexity.EnterpriseScoreSetMinFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetMinFields.ID(childComplexity), true

	case "EnterpriseScoreSetMinFields.is_delete":
		if e.complexity.EnterpriseScoreSetMinFields.IsDelete == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetMinFields.IsDelete(childComplexity), true

	case "EnterpriseScoreSetMinFields.score":
		if e.complexity.EnterpriseScoreSetMinFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetMinFields.Score(childComplexity), true

	case "EnterpriseScoreSetMinFields.score_set_id":
		if e.complexity.EnterpriseScoreSetMinFields.ScoreSetID == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetMinFields.ScoreSetID(childComplexity), true

	case "EnterpriseScoreSetMinFields.type":
		if e.complexity.EnterpriseScoreSetMinFields.Type == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetMinFields.Type(childComplexity), true

	case "EnterpriseScoreSetMinFields.update_at":
		if e.complexity.EnterpriseScoreSetMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetMinFields.UpdateAt(childComplexity), true

	case "EnterpriseScoreSetMinFields.update_by":
		if e.complexity.EnterpriseScoreSetMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetMinFields.UpdateBy(childComplexity), true

	case "EnterpriseScoreSetMutationResponse.affected_rows":
		if e.complexity.EnterpriseScoreSetMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetMutationResponse.AffectedRows(childComplexity), true

	case "EnterpriseScoreSetMutationResponse.returning":
		if e.complexity.EnterpriseScoreSetMutationResponse.Returning == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetMutationResponse.Returning(childComplexity), true

	case "EnterpriseScoreSetStddevFields.id":
		if e.complexity.EnterpriseScoreSetStddevFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetStddevFields.ID(childComplexity), true

	case "EnterpriseScoreSetStddevFields.score":
		if e.complexity.EnterpriseScoreSetStddevFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetStddevFields.Score(childComplexity), true

	case "EnterpriseScoreSetStddevFields.type":
		if e.complexity.EnterpriseScoreSetStddevFields.Type == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetStddevFields.Type(childComplexity), true

	case "EnterpriseScoreSetStddevPopFields.id":
		if e.complexity.EnterpriseScoreSetStddevPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetStddevPopFields.ID(childComplexity), true

	case "EnterpriseScoreSetStddevPopFields.score":
		if e.complexity.EnterpriseScoreSetStddevPopFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetStddevPopFields.Score(childComplexity), true

	case "EnterpriseScoreSetStddevPopFields.type":
		if e.complexity.EnterpriseScoreSetStddevPopFields.Type == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetStddevPopFields.Type(childComplexity), true

	case "EnterpriseScoreSetStddevSampFields.id":
		if e.complexity.EnterpriseScoreSetStddevSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetStddevSampFields.ID(childComplexity), true

	case "EnterpriseScoreSetStddevSampFields.score":
		if e.complexity.EnterpriseScoreSetStddevSampFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetStddevSampFields.Score(childComplexity), true

	case "EnterpriseScoreSetStddevSampFields.type":
		if e.complexity.EnterpriseScoreSetStddevSampFields.Type == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetStddevSampFields.Type(childComplexity), true

	case "EnterpriseScoreSetSumFields.id":
		if e.complexity.EnterpriseScoreSetSumFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetSumFields.ID(childComplexity), true

	case "EnterpriseScoreSetSumFields.score":
		if e.complexity.EnterpriseScoreSetSumFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetSumFields.Score(childComplexity), true

	case "EnterpriseScoreSetSumFields.type":
		if e.complexity.EnterpriseScoreSetSumFields.Type == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetSumFields.Type(childComplexity), true

	case "EnterpriseScoreSetVarPopFields.id":
		if e.complexity.EnterpriseScoreSetVarPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetVarPopFields.ID(childComplexity), true

	case "EnterpriseScoreSetVarPopFields.score":
		if e.complexity.EnterpriseScoreSetVarPopFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetVarPopFields.Score(childComplexity), true

	case "EnterpriseScoreSetVarPopFields.type":
		if e.complexity.EnterpriseScoreSetVarPopFields.Type == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetVarPopFields.Type(childComplexity), true

	case "EnterpriseScoreSetVarSampFields.id":
		if e.complexity.EnterpriseScoreSetVarSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetVarSampFields.ID(childComplexity), true

	case "EnterpriseScoreSetVarSampFields.score":
		if e.complexity.EnterpriseScoreSetVarSampFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetVarSampFields.Score(childComplexity), true

	case "EnterpriseScoreSetVarSampFields.type":
		if e.complexity.EnterpriseScoreSetVarSampFields.Type == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetVarSampFields.Type(childComplexity), true

	case "EnterpriseScoreSetVarianceFields.id":
		if e.complexity.EnterpriseScoreSetVarianceFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetVarianceFields.ID(childComplexity), true

	case "EnterpriseScoreSetVarianceFields.score":
		if e.complexity.EnterpriseScoreSetVarianceFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetVarianceFields.Score(childComplexity), true

	case "EnterpriseScoreSetVarianceFields.type":
		if e.complexity.EnterpriseScoreSetVarianceFields.Type == nil {
			break
		}

		return e.complexity.EnterpriseScoreSetVarianceFields.Type(childComplexity), true

	case "EnterpriseStateHis.create_at":
		if e.complexity.EnterpriseStateHis.CreateAt == nil {
			break
		}

		return e.complexity.EnterpriseStateHis.CreateAt(childComplexity), true

	case "EnterpriseStateHis.create_by":
		if e.complexity.EnterpriseStateHis.CreateBy == nil {
			break
		}

		return e.complexity.EnterpriseStateHis.CreateBy(childComplexity), true

	case "EnterpriseStateHis.enterprise_id":
		if e.complexity.EnterpriseStateHis.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseStateHis.EnterpriseID(childComplexity), true

	case "EnterpriseStateHis.file_url":
		if e.complexity.EnterpriseStateHis.FileURL == nil {
			break
		}

		return e.complexity.EnterpriseStateHis.FileURL(childComplexity), true

	case "EnterpriseStateHis.id":
		if e.complexity.EnterpriseStateHis.ID == nil {
			break
		}

		return e.complexity.EnterpriseStateHis.ID(childComplexity), true

	case "EnterpriseStateHis.reason":
		if e.complexity.EnterpriseStateHis.Reason == nil {
			break
		}

		return e.complexity.EnterpriseStateHis.Reason(childComplexity), true

	case "EnterpriseStateHis.state":
		if e.complexity.EnterpriseStateHis.State == nil {
			break
		}

		return e.complexity.EnterpriseStateHis.State(childComplexity), true

	case "EnterpriseStateHis.state_his_id":
		if e.complexity.EnterpriseStateHis.StateHisID == nil {
			break
		}

		return e.complexity.EnterpriseStateHis.StateHisID(childComplexity), true

	case "EnterpriseStateHisAggregate.aggregate":
		if e.complexity.EnterpriseStateHisAggregate.Aggregate == nil {
			break
		}

		return e.complexity.EnterpriseStateHisAggregate.Aggregate(childComplexity), true

	case "EnterpriseStateHisAggregateFields.avg":
		if e.complexity.EnterpriseStateHisAggregateFields.Avg == nil {
			break
		}

		return e.complexity.EnterpriseStateHisAggregateFields.Avg(childComplexity), true

	case "EnterpriseStateHisAggregateFields.count":
		if e.complexity.EnterpriseStateHisAggregateFields.Count == nil {
			break
		}

		return e.complexity.EnterpriseStateHisAggregateFields.Count(childComplexity), true

	case "EnterpriseStateHisAggregateFields.max":
		if e.complexity.EnterpriseStateHisAggregateFields.Max == nil {
			break
		}

		return e.complexity.EnterpriseStateHisAggregateFields.Max(childComplexity), true

	case "EnterpriseStateHisAggregateFields.min":
		if e.complexity.EnterpriseStateHisAggregateFields.Min == nil {
			break
		}

		return e.complexity.EnterpriseStateHisAggregateFields.Min(childComplexity), true

	case "EnterpriseStateHisAggregateFields.stddev":
		if e.complexity.EnterpriseStateHisAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.EnterpriseStateHisAggregateFields.Stddev(childComplexity), true

	case "EnterpriseStateHisAggregateFields.stddev_pop":
		if e.complexity.EnterpriseStateHisAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.EnterpriseStateHisAggregateFields.StddevPop(childComplexity), true

	case "EnterpriseStateHisAggregateFields.stddev_samp":
		if e.complexity.EnterpriseStateHisAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.EnterpriseStateHisAggregateFields.StddevSamp(childComplexity), true

	case "EnterpriseStateHisAggregateFields.sum":
		if e.complexity.EnterpriseStateHisAggregateFields.Sum == nil {
			break
		}

		return e.complexity.EnterpriseStateHisAggregateFields.Sum(childComplexity), true

	case "EnterpriseStateHisAggregateFields.var_pop":
		if e.complexity.EnterpriseStateHisAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.EnterpriseStateHisAggregateFields.VarPop(childComplexity), true

	case "EnterpriseStateHisAggregateFields.var_samp":
		if e.complexity.EnterpriseStateHisAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.EnterpriseStateHisAggregateFields.VarSamp(childComplexity), true

	case "EnterpriseStateHisAggregateFields.variance":
		if e.complexity.EnterpriseStateHisAggregateFields.Variance == nil {
			break
		}

		return e.complexity.EnterpriseStateHisAggregateFields.Variance(childComplexity), true

	case "EnterpriseStateHisAvgFields.id":
		if e.complexity.EnterpriseStateHisAvgFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseStateHisAvgFields.ID(childComplexity), true

	case "EnterpriseStateHisAvgFields.state":
		if e.complexity.EnterpriseStateHisAvgFields.State == nil {
			break
		}

		return e.complexity.EnterpriseStateHisAvgFields.State(childComplexity), true

	case "EnterpriseStateHisMaxFields.create_at":
		if e.complexity.EnterpriseStateHisMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.EnterpriseStateHisMaxFields.CreateAt(childComplexity), true

	case "EnterpriseStateHisMaxFields.create_by":
		if e.complexity.EnterpriseStateHisMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.EnterpriseStateHisMaxFields.CreateBy(childComplexity), true

	case "EnterpriseStateHisMaxFields.enterprise_id":
		if e.complexity.EnterpriseStateHisMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseStateHisMaxFields.EnterpriseID(childComplexity), true

	case "EnterpriseStateHisMaxFields.file_url":
		if e.complexity.EnterpriseStateHisMaxFields.FileURL == nil {
			break
		}

		return e.complexity.EnterpriseStateHisMaxFields.FileURL(childComplexity), true

	case "EnterpriseStateHisMaxFields.id":
		if e.complexity.EnterpriseStateHisMaxFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseStateHisMaxFields.ID(childComplexity), true

	case "EnterpriseStateHisMaxFields.reason":
		if e.complexity.EnterpriseStateHisMaxFields.Reason == nil {
			break
		}

		return e.complexity.EnterpriseStateHisMaxFields.Reason(childComplexity), true

	case "EnterpriseStateHisMaxFields.state":
		if e.complexity.EnterpriseStateHisMaxFields.State == nil {
			break
		}

		return e.complexity.EnterpriseStateHisMaxFields.State(childComplexity), true

	case "EnterpriseStateHisMaxFields.state_his_id":
		if e.complexity.EnterpriseStateHisMaxFields.StateHisID == nil {
			break
		}

		return e.complexity.EnterpriseStateHisMaxFields.StateHisID(childComplexity), true

	case "EnterpriseStateHisMinFields.create_at":
		if e.complexity.EnterpriseStateHisMinFields.CreateAt == nil {
			break
		}

		return e.complexity.EnterpriseStateHisMinFields.CreateAt(childComplexity), true

	case "EnterpriseStateHisMinFields.create_by":
		if e.complexity.EnterpriseStateHisMinFields.CreateBy == nil {
			break
		}

		return e.complexity.EnterpriseStateHisMinFields.CreateBy(childComplexity), true

	case "EnterpriseStateHisMinFields.enterprise_id":
		if e.complexity.EnterpriseStateHisMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseStateHisMinFields.EnterpriseID(childComplexity), true

	case "EnterpriseStateHisMinFields.file_url":
		if e.complexity.EnterpriseStateHisMinFields.FileURL == nil {
			break
		}

		return e.complexity.EnterpriseStateHisMinFields.FileURL(childComplexity), true

	case "EnterpriseStateHisMinFields.id":
		if e.complexity.EnterpriseStateHisMinFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseStateHisMinFields.ID(childComplexity), true

	case "EnterpriseStateHisMinFields.reason":
		if e.complexity.EnterpriseStateHisMinFields.Reason == nil {
			break
		}

		return e.complexity.EnterpriseStateHisMinFields.Reason(childComplexity), true

	case "EnterpriseStateHisMinFields.state":
		if e.complexity.EnterpriseStateHisMinFields.State == nil {
			break
		}

		return e.complexity.EnterpriseStateHisMinFields.State(childComplexity), true

	case "EnterpriseStateHisMinFields.state_his_id":
		if e.complexity.EnterpriseStateHisMinFields.StateHisID == nil {
			break
		}

		return e.complexity.EnterpriseStateHisMinFields.StateHisID(childComplexity), true

	case "EnterpriseStateHisMutationResponse.affected_rows":
		if e.complexity.EnterpriseStateHisMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.EnterpriseStateHisMutationResponse.AffectedRows(childComplexity), true

	case "EnterpriseStateHisMutationResponse.returning":
		if e.complexity.EnterpriseStateHisMutationResponse.Returning == nil {
			break
		}

		return e.complexity.EnterpriseStateHisMutationResponse.Returning(childComplexity), true

	case "EnterpriseStateHisStddevFields.id":
		if e.complexity.EnterpriseStateHisStddevFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseStateHisStddevFields.ID(childComplexity), true

	case "EnterpriseStateHisStddevFields.state":
		if e.complexity.EnterpriseStateHisStddevFields.State == nil {
			break
		}

		return e.complexity.EnterpriseStateHisStddevFields.State(childComplexity), true

	case "EnterpriseStateHisStddevPopFields.id":
		if e.complexity.EnterpriseStateHisStddevPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseStateHisStddevPopFields.ID(childComplexity), true

	case "EnterpriseStateHisStddevPopFields.state":
		if e.complexity.EnterpriseStateHisStddevPopFields.State == nil {
			break
		}

		return e.complexity.EnterpriseStateHisStddevPopFields.State(childComplexity), true

	case "EnterpriseStateHisStddevSampFields.id":
		if e.complexity.EnterpriseStateHisStddevSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseStateHisStddevSampFields.ID(childComplexity), true

	case "EnterpriseStateHisStddevSampFields.state":
		if e.complexity.EnterpriseStateHisStddevSampFields.State == nil {
			break
		}

		return e.complexity.EnterpriseStateHisStddevSampFields.State(childComplexity), true

	case "EnterpriseStateHisSumFields.id":
		if e.complexity.EnterpriseStateHisSumFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseStateHisSumFields.ID(childComplexity), true

	case "EnterpriseStateHisSumFields.state":
		if e.complexity.EnterpriseStateHisSumFields.State == nil {
			break
		}

		return e.complexity.EnterpriseStateHisSumFields.State(childComplexity), true

	case "EnterpriseStateHisVarPopFields.id":
		if e.complexity.EnterpriseStateHisVarPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseStateHisVarPopFields.ID(childComplexity), true

	case "EnterpriseStateHisVarPopFields.state":
		if e.complexity.EnterpriseStateHisVarPopFields.State == nil {
			break
		}

		return e.complexity.EnterpriseStateHisVarPopFields.State(childComplexity), true

	case "EnterpriseStateHisVarSampFields.id":
		if e.complexity.EnterpriseStateHisVarSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseStateHisVarSampFields.ID(childComplexity), true

	case "EnterpriseStateHisVarSampFields.state":
		if e.complexity.EnterpriseStateHisVarSampFields.State == nil {
			break
		}

		return e.complexity.EnterpriseStateHisVarSampFields.State(childComplexity), true

	case "EnterpriseStateHisVarianceFields.id":
		if e.complexity.EnterpriseStateHisVarianceFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseStateHisVarianceFields.ID(childComplexity), true

	case "EnterpriseStateHisVarianceFields.state":
		if e.complexity.EnterpriseStateHisVarianceFields.State == nil {
			break
		}

		return e.complexity.EnterpriseStateHisVarianceFields.State(childComplexity), true

	case "EnterpriseStddevFields.business_scope":
		if e.complexity.EnterpriseStddevFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.BusinessScope(childComplexity), true

	case "EnterpriseStddevFields.check_status":
		if e.complexity.EnterpriseStddevFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.CheckStatus(childComplexity), true

	case "EnterpriseStddevFields.city_id":
		if e.complexity.EnterpriseStddevFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.CityID(childComplexity), true

	case "EnterpriseStddevFields.credit_level":
		if e.complexity.EnterpriseStddevFields.CreditLevel == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.CreditLevel(childComplexity), true

	case "EnterpriseStddevFields.display_number":
		if e.complexity.EnterpriseStddevFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.DisplayNumber(childComplexity), true

	case "EnterpriseStddevFields.district_id":
		if e.complexity.EnterpriseStddevFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.DistrictID(childComplexity), true

	case "EnterpriseStddevFields.enterprise_level":
		if e.complexity.EnterpriseStddevFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.EnterpriseLevel(childComplexity), true

	case "EnterpriseStddevFields.enterprise_nature":
		if e.complexity.EnterpriseStddevFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.EnterpriseNature(childComplexity), true

	case "EnterpriseStddevFields.enterprise_type":
		if e.complexity.EnterpriseStddevFields.EnterpriseType == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.EnterpriseType(childComplexity), true

	case "EnterpriseStddevFields.id":
		if e.complexity.EnterpriseStddevFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.ID(childComplexity), true

	case "EnterpriseStddevFields.institution_category":
		if e.complexity.EnterpriseStddevFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.InstitutionCategory(childComplexity), true

	case "EnterpriseStddevFields.province_id":
		if e.complexity.EnterpriseStddevFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.ProvinceID(childComplexity), true

	case "EnterpriseStddevFields.score":
		if e.complexity.EnterpriseStddevFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.Score(childComplexity), true

	case "EnterpriseStddevFields.state":
		if e.complexity.EnterpriseStddevFields.State == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.State(childComplexity), true

	case "EnterpriseStddevPopFields.business_scope":
		if e.complexity.EnterpriseStddevPopFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.BusinessScope(childComplexity), true

	case "EnterpriseStddevPopFields.check_status":
		if e.complexity.EnterpriseStddevPopFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.CheckStatus(childComplexity), true

	case "EnterpriseStddevPopFields.city_id":
		if e.complexity.EnterpriseStddevPopFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.CityID(childComplexity), true

	case "EnterpriseStddevPopFields.credit_level":
		if e.complexity.EnterpriseStddevPopFields.CreditLevel == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.CreditLevel(childComplexity), true

	case "EnterpriseStddevPopFields.display_number":
		if e.complexity.EnterpriseStddevPopFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.DisplayNumber(childComplexity), true

	case "EnterpriseStddevPopFields.district_id":
		if e.complexity.EnterpriseStddevPopFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.DistrictID(childComplexity), true

	case "EnterpriseStddevPopFields.enterprise_level":
		if e.complexity.EnterpriseStddevPopFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.EnterpriseLevel(childComplexity), true

	case "EnterpriseStddevPopFields.enterprise_nature":
		if e.complexity.EnterpriseStddevPopFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.EnterpriseNature(childComplexity), true

	case "EnterpriseStddevPopFields.enterprise_type":
		if e.complexity.EnterpriseStddevPopFields.EnterpriseType == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.EnterpriseType(childComplexity), true

	case "EnterpriseStddevPopFields.id":
		if e.complexity.EnterpriseStddevPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.ID(childComplexity), true

	case "EnterpriseStddevPopFields.institution_category":
		if e.complexity.EnterpriseStddevPopFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.InstitutionCategory(childComplexity), true

	case "EnterpriseStddevPopFields.province_id":
		if e.complexity.EnterpriseStddevPopFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.ProvinceID(childComplexity), true

	case "EnterpriseStddevPopFields.score":
		if e.complexity.EnterpriseStddevPopFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.Score(childComplexity), true

	case "EnterpriseStddevPopFields.state":
		if e.complexity.EnterpriseStddevPopFields.State == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.State(childComplexity), true

	case "EnterpriseStddevSampFields.business_scope":
		if e.complexity.EnterpriseStddevSampFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.BusinessScope(childComplexity), true

	case "EnterpriseStddevSampFields.check_status":
		if e.complexity.EnterpriseStddevSampFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.CheckStatus(childComplexity), true

	case "EnterpriseStddevSampFields.city_id":
		if e.complexity.EnterpriseStddevSampFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.CityID(childComplexity), true

	case "EnterpriseStddevSampFields.credit_level":
		if e.complexity.EnterpriseStddevSampFields.CreditLevel == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.CreditLevel(childComplexity), true

	case "EnterpriseStddevSampFields.display_number":
		if e.complexity.EnterpriseStddevSampFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.DisplayNumber(childComplexity), true

	case "EnterpriseStddevSampFields.district_id":
		if e.complexity.EnterpriseStddevSampFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.DistrictID(childComplexity), true

	case "EnterpriseStddevSampFields.enterprise_level":
		if e.complexity.EnterpriseStddevSampFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.EnterpriseLevel(childComplexity), true

	case "EnterpriseStddevSampFields.enterprise_nature":
		if e.complexity.EnterpriseStddevSampFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.EnterpriseNature(childComplexity), true

	case "EnterpriseStddevSampFields.enterprise_type":
		if e.complexity.EnterpriseStddevSampFields.EnterpriseType == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.EnterpriseType(childComplexity), true

	case "EnterpriseStddevSampFields.id":
		if e.complexity.EnterpriseStddevSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.ID(childComplexity), true

	case "EnterpriseStddevSampFields.institution_category":
		if e.complexity.EnterpriseStddevSampFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.InstitutionCategory(childComplexity), true

	case "EnterpriseStddevSampFields.province_id":
		if e.complexity.EnterpriseStddevSampFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.ProvinceID(childComplexity), true

	case "EnterpriseStddevSampFields.score":
		if e.complexity.EnterpriseStddevSampFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.Score(childComplexity), true

	case "EnterpriseStddevSampFields.state":
		if e.complexity.EnterpriseStddevSampFields.State == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.State(childComplexity), true

	case "EnterpriseSumFields.business_scope":
		if e.complexity.EnterpriseSumFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.BusinessScope(childComplexity), true

	case "EnterpriseSumFields.check_status":
		if e.complexity.EnterpriseSumFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.CheckStatus(childComplexity), true

	case "EnterpriseSumFields.city_id":
		if e.complexity.EnterpriseSumFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.CityID(childComplexity), true

	case "EnterpriseSumFields.credit_level":
		if e.complexity.EnterpriseSumFields.CreditLevel == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.CreditLevel(childComplexity), true

	case "EnterpriseSumFields.display_number":
		if e.complexity.EnterpriseSumFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.DisplayNumber(childComplexity), true

	case "EnterpriseSumFields.district_id":
		if e.complexity.EnterpriseSumFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.DistrictID(childComplexity), true

	case "EnterpriseSumFields.enterprise_level":
		if e.complexity.EnterpriseSumFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.EnterpriseLevel(childComplexity), true

	case "EnterpriseSumFields.enterprise_nature":
		if e.complexity.EnterpriseSumFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.EnterpriseNature(childComplexity), true

	case "EnterpriseSumFields.enterprise_type":
		if e.complexity.EnterpriseSumFields.EnterpriseType == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.EnterpriseType(childComplexity), true

	case "EnterpriseSumFields.id":
		if e.complexity.EnterpriseSumFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.ID(childComplexity), true

	case "EnterpriseSumFields.institution_category":
		if e.complexity.EnterpriseSumFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.InstitutionCategory(childComplexity), true

	case "EnterpriseSumFields.province_id":
		if e.complexity.EnterpriseSumFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.ProvinceID(childComplexity), true

	case "EnterpriseSumFields.score":
		if e.complexity.EnterpriseSumFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.Score(childComplexity), true

	case "EnterpriseSumFields.state":
		if e.complexity.EnterpriseSumFields.State == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.State(childComplexity), true

	case "EnterpriseUkey.create_at":
		if e.complexity.EnterpriseUkey.CreateAt == nil {
			break
		}

		return e.complexity.EnterpriseUkey.CreateAt(childComplexity), true

	case "EnterpriseUkey.create_by":
		if e.complexity.EnterpriseUkey.CreateBy == nil {
			break
		}

		return e.complexity.EnterpriseUkey.CreateBy(childComplexity), true

	case "EnterpriseUkey.delete_at":
		if e.complexity.EnterpriseUkey.DeleteAt == nil {
			break
		}

		return e.complexity.EnterpriseUkey.DeleteAt(childComplexity), true

	case "EnterpriseUkey.delete_by":
		if e.complexity.EnterpriseUkey.DeleteBy == nil {
			break
		}

		return e.complexity.EnterpriseUkey.DeleteBy(childComplexity), true

	case "EnterpriseUkey.enterprise_id":
		if e.complexity.EnterpriseUkey.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseUkey.EnterpriseID(childComplexity), true

	case "EnterpriseUkey.id":
		if e.complexity.EnterpriseUkey.ID == nil {
			break
		}

		return e.complexity.EnterpriseUkey.ID(childComplexity), true

	case "EnterpriseUkey.is_delete":
		if e.complexity.EnterpriseUkey.IsDelete == nil {
			break
		}

		return e.complexity.EnterpriseUkey.IsDelete(childComplexity), true

	case "EnterpriseUkey.ukey_id":
		if e.complexity.EnterpriseUkey.UkeyID == nil {
			break
		}

		return e.complexity.EnterpriseUkey.UkeyID(childComplexity), true

	case "EnterpriseUkey.update_at":
		if e.complexity.EnterpriseUkey.UpdateAt == nil {
			break
		}

		return e.complexity.EnterpriseUkey.UpdateAt(childComplexity), true

	case "EnterpriseUkey.update_by":
		if e.complexity.EnterpriseUkey.UpdateBy == nil {
			break
		}

		return e.complexity.EnterpriseUkey.UpdateBy(childComplexity), true

	case "EnterpriseUkeyAggregate.aggregate":
		if e.complexity.EnterpriseUkeyAggregate.Aggregate == nil {
			break
		}

		return e.complexity.EnterpriseUkeyAggregate.Aggregate(childComplexity), true

	case "EnterpriseUkeyAggregateFields.avg":
		if e.complexity.EnterpriseUkeyAggregateFields.Avg == nil {
			break
		}

		return e.complexity.EnterpriseUkeyAggregateFields.Avg(childComplexity), true

	case "EnterpriseUkeyAggregateFields.count":
		if e.complexity.EnterpriseUkeyAggregateFields.Count == nil {
			break
		}

		return e.complexity.EnterpriseUkeyAggregateFields.Count(childComplexity), true

	case "EnterpriseUkeyAggregateFields.max":
		if e.complexity.EnterpriseUkeyAggregateFields.Max == nil {
			break
		}

		return e.complexity.EnterpriseUkeyAggregateFields.Max(childComplexity), true

	case "EnterpriseUkeyAggregateFields.min":
		if e.complexity.EnterpriseUkeyAggregateFields.Min == nil {
			break
		}

		return e.complexity.EnterpriseUkeyAggregateFields.Min(childComplexity), true

	case "EnterpriseUkeyAggregateFields.stddev":
		if e.complexity.EnterpriseUkeyAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.EnterpriseUkeyAggregateFields.Stddev(childComplexity), true

	case "EnterpriseUkeyAggregateFields.stddev_pop":
		if e.complexity.EnterpriseUkeyAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.EnterpriseUkeyAggregateFields.StddevPop(childComplexity), true

	case "EnterpriseUkeyAggregateFields.stddev_samp":
		if e.complexity.EnterpriseUkeyAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.EnterpriseUkeyAggregateFields.StddevSamp(childComplexity), true

	case "EnterpriseUkeyAggregateFields.sum":
		if e.complexity.EnterpriseUkeyAggregateFields.Sum == nil {
			break
		}

		return e.complexity.EnterpriseUkeyAggregateFields.Sum(childComplexity), true

	case "EnterpriseUkeyAggregateFields.var_pop":
		if e.complexity.EnterpriseUkeyAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.EnterpriseUkeyAggregateFields.VarPop(childComplexity), true

	case "EnterpriseUkeyAggregateFields.var_samp":
		if e.complexity.EnterpriseUkeyAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.EnterpriseUkeyAggregateFields.VarSamp(childComplexity), true

	case "EnterpriseUkeyAggregateFields.variance":
		if e.complexity.EnterpriseUkeyAggregateFields.Variance == nil {
			break
		}

		return e.complexity.EnterpriseUkeyAggregateFields.Variance(childComplexity), true

	case "EnterpriseUkeyAvgFields.id":
		if e.complexity.EnterpriseUkeyAvgFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseUkeyAvgFields.ID(childComplexity), true

	case "EnterpriseUkeyMaxFields.create_at":
		if e.complexity.EnterpriseUkeyMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.EnterpriseUkeyMaxFields.CreateAt(childComplexity), true

	case "EnterpriseUkeyMaxFields.create_by":
		if e.complexity.EnterpriseUkeyMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.EnterpriseUkeyMaxFields.CreateBy(childComplexity), true

	case "EnterpriseUkeyMaxFields.delete_at":
		if e.complexity.EnterpriseUkeyMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.EnterpriseUkeyMaxFields.DeleteAt(childComplexity), true

	case "EnterpriseUkeyMaxFields.delete_by":
		if e.complexity.EnterpriseUkeyMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.EnterpriseUkeyMaxFields.DeleteBy(childComplexity), true

	case "EnterpriseUkeyMaxFields.enterprise_id":
		if e.complexity.EnterpriseUkeyMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseUkeyMaxFields.EnterpriseID(childComplexity), true

	case "EnterpriseUkeyMaxFields.id":
		if e.complexity.EnterpriseUkeyMaxFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseUkeyMaxFields.ID(childComplexity), true

	case "EnterpriseUkeyMaxFields.is_delete":
		if e.complexity.EnterpriseUkeyMaxFields.IsDelete == nil {
			break
		}

		return e.complexity.EnterpriseUkeyMaxFields.IsDelete(childComplexity), true

	case "EnterpriseUkeyMaxFields.ukey_id":
		if e.complexity.EnterpriseUkeyMaxFields.UkeyID == nil {
			break
		}

		return e.complexity.EnterpriseUkeyMaxFields.UkeyID(childComplexity), true

	case "EnterpriseUkeyMaxFields.update_at":
		if e.complexity.EnterpriseUkeyMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.EnterpriseUkeyMaxFields.UpdateAt(childComplexity), true

	case "EnterpriseUkeyMaxFields.update_by":
		if e.complexity.EnterpriseUkeyMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.EnterpriseUkeyMaxFields.UpdateBy(childComplexity), true

	case "EnterpriseUkeyMinFields.create_at":
		if e.complexity.EnterpriseUkeyMinFields.CreateAt == nil {
			break
		}

		return e.complexity.EnterpriseUkeyMinFields.CreateAt(childComplexity), true

	case "EnterpriseUkeyMinFields.create_by":
		if e.complexity.EnterpriseUkeyMinFields.CreateBy == nil {
			break
		}

		return e.complexity.EnterpriseUkeyMinFields.CreateBy(childComplexity), true

	case "EnterpriseUkeyMinFields.delete_at":
		if e.complexity.EnterpriseUkeyMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.EnterpriseUkeyMinFields.DeleteAt(childComplexity), true

	case "EnterpriseUkeyMinFields.delete_by":
		if e.complexity.EnterpriseUkeyMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.EnterpriseUkeyMinFields.DeleteBy(childComplexity), true

	case "EnterpriseUkeyMinFields.enterprise_id":
		if e.complexity.EnterpriseUkeyMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseUkeyMinFields.EnterpriseID(childComplexity), true

	case "EnterpriseUkeyMinFields.id":
		if e.complexity.EnterpriseUkeyMinFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseUkeyMinFields.ID(childComplexity), true

	case "EnterpriseUkeyMinFields.is_delete":
		if e.complexity.EnterpriseUkeyMinFields.IsDelete == nil {
			break
		}

		return e.complexity.EnterpriseUkeyMinFields.IsDelete(childComplexity), true

	case "EnterpriseUkeyMinFields.ukey_id":
		if e.complexity.EnterpriseUkeyMinFields.UkeyID == nil {
			break
		}

		return e.complexity.EnterpriseUkeyMinFields.UkeyID(childComplexity), true

	case "EnterpriseUkeyMinFields.update_at":
		if e.complexity.EnterpriseUkeyMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.EnterpriseUkeyMinFields.UpdateAt(childComplexity), true

	case "EnterpriseUkeyMinFields.update_by":
		if e.complexity.EnterpriseUkeyMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.EnterpriseUkeyMinFields.UpdateBy(childComplexity), true

	case "EnterpriseUkeyMutationResponse.affected_rows":
		if e.complexity.EnterpriseUkeyMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.EnterpriseUkeyMutationResponse.AffectedRows(childComplexity), true

	case "EnterpriseUkeyMutationResponse.returning":
		if e.complexity.EnterpriseUkeyMutationResponse.Returning == nil {
			break
		}

		return e.complexity.EnterpriseUkeyMutationResponse.Returning(childComplexity), true

	case "EnterpriseUkeyStddevFields.id":
		if e.complexity.EnterpriseUkeyStddevFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseUkeyStddevFields.ID(childComplexity), true

	case "EnterpriseUkeyStddevPopFields.id":
		if e.complexity.EnterpriseUkeyStddevPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseUkeyStddevPopFields.ID(childComplexity), true

	case "EnterpriseUkeyStddevSampFields.id":
		if e.complexity.EnterpriseUkeyStddevSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseUkeyStddevSampFields.ID(childComplexity), true

	case "EnterpriseUkeySumFields.id":
		if e.complexity.EnterpriseUkeySumFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseUkeySumFields.ID(childComplexity), true

	case "EnterpriseUkeyVarPopFields.id":
		if e.complexity.EnterpriseUkeyVarPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseUkeyVarPopFields.ID(childComplexity), true

	case "EnterpriseUkeyVarSampFields.id":
		if e.complexity.EnterpriseUkeyVarSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseUkeyVarSampFields.ID(childComplexity), true

	case "EnterpriseUkeyVarianceFields.id":
		if e.complexity.EnterpriseUkeyVarianceFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseUkeyVarianceFields.ID(childComplexity), true

	case "EnterpriseVarPopFields.business_scope":
		if e.complexity.EnterpriseVarPopFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.BusinessScope(childComplexity), true

	case "EnterpriseVarPopFields.check_status":
		if e.complexity.EnterpriseVarPopFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.CheckStatus(childComplexity), true

	case "EnterpriseVarPopFields.city_id":
		if e.complexity.EnterpriseVarPopFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.CityID(childComplexity), true

	case "EnterpriseVarPopFields.credit_level":
		if e.complexity.EnterpriseVarPopFields.CreditLevel == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.CreditLevel(childComplexity), true

	case "EnterpriseVarPopFields.display_number":
		if e.complexity.EnterpriseVarPopFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.DisplayNumber(childComplexity), true

	case "EnterpriseVarPopFields.district_id":
		if e.complexity.EnterpriseVarPopFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.DistrictID(childComplexity), true

	case "EnterpriseVarPopFields.enterprise_level":
		if e.complexity.EnterpriseVarPopFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.EnterpriseLevel(childComplexity), true

	case "EnterpriseVarPopFields.enterprise_nature":
		if e.complexity.EnterpriseVarPopFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.EnterpriseNature(childComplexity), true

	case "EnterpriseVarPopFields.enterprise_type":
		if e.complexity.EnterpriseVarPopFields.EnterpriseType == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.EnterpriseType(childComplexity), true

	case "EnterpriseVarPopFields.id":
		if e.complexity.EnterpriseVarPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.ID(childComplexity), true

	case "EnterpriseVarPopFields.institution_category":
		if e.complexity.EnterpriseVarPopFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.InstitutionCategory(childComplexity), true

	case "EnterpriseVarPopFields.province_id":
		if e.complexity.EnterpriseVarPopFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.ProvinceID(childComplexity), true

	case "EnterpriseVarPopFields.score":
		if e.complexity.EnterpriseVarPopFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.Score(childComplexity), true

	case "EnterpriseVarPopFields.state":
		if e.complexity.EnterpriseVarPopFields.State == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.State(childComplexity), true

	case "EnterpriseVarSampFields.business_scope":
		if e.complexity.EnterpriseVarSampFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.BusinessScope(childComplexity), true

	case "EnterpriseVarSampFields.check_status":
		if e.complexity.EnterpriseVarSampFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.CheckStatus(childComplexity), true

	case "EnterpriseVarSampFields.city_id":
		if e.complexity.EnterpriseVarSampFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.CityID(childComplexity), true

	case "EnterpriseVarSampFields.credit_level":
		if e.complexity.EnterpriseVarSampFields.CreditLevel == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.CreditLevel(childComplexity), true

	case "EnterpriseVarSampFields.display_number":
		if e.complexity.EnterpriseVarSampFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.DisplayNumber(childComplexity), true

	case "EnterpriseVarSampFields.district_id":
		if e.complexity.EnterpriseVarSampFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.DistrictID(childComplexity), true

	case "EnterpriseVarSampFields.enterprise_level":
		if e.complexity.EnterpriseVarSampFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.EnterpriseLevel(childComplexity), true

	case "EnterpriseVarSampFields.enterprise_nature":
		if e.complexity.EnterpriseVarSampFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.EnterpriseNature(childComplexity), true

	case "EnterpriseVarSampFields.enterprise_type":
		if e.complexity.EnterpriseVarSampFields.EnterpriseType == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.EnterpriseType(childComplexity), true

	case "EnterpriseVarSampFields.id":
		if e.complexity.EnterpriseVarSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.ID(childComplexity), true

	case "EnterpriseVarSampFields.institution_category":
		if e.complexity.EnterpriseVarSampFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.InstitutionCategory(childComplexity), true

	case "EnterpriseVarSampFields.province_id":
		if e.complexity.EnterpriseVarSampFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.ProvinceID(childComplexity), true

	case "EnterpriseVarSampFields.score":
		if e.complexity.EnterpriseVarSampFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.Score(childComplexity), true

	case "EnterpriseVarSampFields.state":
		if e.complexity.EnterpriseVarSampFields.State == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.State(childComplexity), true

	case "EnterpriseVarianceFields.business_scope":
		if e.complexity.EnterpriseVarianceFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.BusinessScope(childComplexity), true

	case "EnterpriseVarianceFields.check_status":
		if e.complexity.EnterpriseVarianceFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.CheckStatus(childComplexity), true

	case "EnterpriseVarianceFields.city_id":
		if e.complexity.EnterpriseVarianceFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.CityID(childComplexity), true

	case "EnterpriseVarianceFields.credit_level":
		if e.complexity.EnterpriseVarianceFields.CreditLevel == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.CreditLevel(childComplexity), true

	case "EnterpriseVarianceFields.display_number":
		if e.complexity.EnterpriseVarianceFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.DisplayNumber(childComplexity), true

	case "EnterpriseVarianceFields.district_id":
		if e.complexity.EnterpriseVarianceFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.DistrictID(childComplexity), true

	case "EnterpriseVarianceFields.enterprise_level":
		if e.complexity.EnterpriseVarianceFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.EnterpriseLevel(childComplexity), true

	case "EnterpriseVarianceFields.enterprise_nature":
		if e.complexity.EnterpriseVarianceFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.EnterpriseNature(childComplexity), true

	case "EnterpriseVarianceFields.enterprise_type":
		if e.complexity.EnterpriseVarianceFields.EnterpriseType == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.EnterpriseType(childComplexity), true

	case "EnterpriseVarianceFields.id":
		if e.complexity.EnterpriseVarianceFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.ID(childComplexity), true

	case "EnterpriseVarianceFields.institution_category":
		if e.complexity.EnterpriseVarianceFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.InstitutionCategory(childComplexity), true

	case "EnterpriseVarianceFields.province_id":
		if e.complexity.EnterpriseVarianceFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.ProvinceID(childComplexity), true

	case "EnterpriseVarianceFields.score":
		if e.complexity.EnterpriseVarianceFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.Score(childComplexity), true

	case "EnterpriseVarianceFields.state":
		if e.complexity.EnterpriseVarianceFields.State == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.State(childComplexity), true

	case "Mutation.delete_department":
		if e.complexity.Mutation.DeleteDepartment == nil {
			break
		}

		args, err := ec.field_Mutation_delete_department_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDepartment(childComplexity, args["where"].(model.DepartmentBoolExp)), true

	case "Mutation.delete_department_by_pk":
		if e.complexity.Mutation.DeleteDepartmentByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_department_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDepartmentByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_department_by_union_pk":
		if e.complexity.Mutation.DeleteDepartmentByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_department_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDepartmentByUnionPk(childComplexity, args["department_id"].(string)), true

	case "Mutation.delete_enterprise":
		if e.complexity.Mutation.DeleteEnterprise == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterprise(childComplexity, args["where"].(model.EnterpriseBoolExp)), true

	case "Mutation.delete_enterprise_alarm_send_police":
		if e.complexity.Mutation.DeleteEnterpriseAlarmSendPolice == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_alarm_send_police_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseAlarmSendPolice(childComplexity, args["where"].(model.EnterpriseAlarmSendPoliceBoolExp)), true

	case "Mutation.delete_enterprise_alarm_send_police_by_pk":
		if e.complexity.Mutation.DeleteEnterpriseAlarmSendPoliceByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_alarm_send_police_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseAlarmSendPoliceByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_enterprise_alarm_send_police_by_union_pk":
		if e.complexity.Mutation.DeleteEnterpriseAlarmSendPoliceByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_alarm_send_police_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseAlarmSendPoliceByUnionPk(childComplexity, args["enterprise_alarm_send_police_id"].(string)), true

	case "Mutation.delete_enterprise_by_pk":
		if e.complexity.Mutation.DeleteEnterpriseByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_enterprise_by_union_pk":
		if e.complexity.Mutation.DeleteEnterpriseByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseByUnionPk(childComplexity, args["enterprise_id"].(string)), true

	case "Mutation.delete_enterprise_contact":
		if e.complexity.Mutation.DeleteEnterpriseContact == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_contact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseContact(childComplexity, args["where"].(model.EnterpriseContactBoolExp)), true

	case "Mutation.delete_enterprise_contact_by_pk":
		if e.complexity.Mutation.DeleteEnterpriseContactByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_contact_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseContactByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_enterprise_contact_by_union_pk":
		if e.complexity.Mutation.DeleteEnterpriseContactByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_contact_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseContactByUnionPk(childComplexity, args["contact_id"].(string)), true

	case "Mutation.delete_enterprise_muck_trunk":
		if e.complexity.Mutation.DeleteEnterpriseMuckTrunk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_muck_trunk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseMuckTrunk(childComplexity, args["where"].(model.EnterpriseMuckTrunkBoolExp)), true

	case "Mutation.delete_enterprise_muck_trunk_by_pk":
		if e.complexity.Mutation.DeleteEnterpriseMuckTrunkByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_muck_trunk_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseMuckTrunkByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_enterprise_muck_trunk_by_union_pk":
		if e.complexity.Mutation.DeleteEnterpriseMuckTrunkByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_muck_trunk_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseMuckTrunkByUnionPk(childComplexity, args["enterprise_muck_trunk_id"].(string)), true

	case "Mutation.delete_enterprise_score_log":
		if e.complexity.Mutation.DeleteEnterpriseScoreLog == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_score_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseScoreLog(childComplexity, args["where"].(model.EnterpriseScoreLogBoolExp)), true

	case "Mutation.delete_enterprise_score_log_by_pk":
		if e.complexity.Mutation.DeleteEnterpriseScoreLogByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_score_log_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseScoreLogByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_enterprise_score_log_by_union_pk":
		if e.complexity.Mutation.DeleteEnterpriseScoreLogByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_score_log_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseScoreLogByUnionPk(childComplexity, args["log_id"].(string)), true

	case "Mutation.delete_enterprise_score_set":
		if e.complexity.Mutation.DeleteEnterpriseScoreSet == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_score_set_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseScoreSet(childComplexity, args["where"].(model.EnterpriseScoreSetBoolExp)), true

	case "Mutation.delete_enterprise_score_set_by_pk":
		if e.complexity.Mutation.DeleteEnterpriseScoreSetByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_score_set_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseScoreSetByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_enterprise_score_set_by_union_pk":
		if e.complexity.Mutation.DeleteEnterpriseScoreSetByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_score_set_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseScoreSetByUnionPk(childComplexity, args["score_set_id"].(string)), true

	case "Mutation.delete_enterprise_state_his":
		if e.complexity.Mutation.DeleteEnterpriseStateHis == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_state_his_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseStateHis(childComplexity, args["where"].(model.EnterpriseStateHisBoolExp)), true

	case "Mutation.delete_enterprise_state_his_by_pk":
		if e.complexity.Mutation.DeleteEnterpriseStateHisByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_state_his_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseStateHisByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_enterprise_state_his_by_union_pk":
		if e.complexity.Mutation.DeleteEnterpriseStateHisByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_state_his_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseStateHisByUnionPk(childComplexity, args["state_his_id"].(string)), true

	case "Mutation.delete_enterprise_ukey":
		if e.complexity.Mutation.DeleteEnterpriseUkey == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_ukey_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseUkey(childComplexity, args["where"].(model.EnterpriseUkeyBoolExp)), true

	case "Mutation.delete_enterprise_ukey_by_pk":
		if e.complexity.Mutation.DeleteEnterpriseUkeyByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_ukey_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseUkeyByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_enterprise_ukey_by_union_pk":
		if e.complexity.Mutation.DeleteEnterpriseUkeyByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_ukey_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseUkeyByUnionPk(childComplexity, args["ukey_id"].(string)), true

	case "Mutation.delete_system_user":
		if e.complexity.Mutation.DeleteSystemUser == nil {
			break
		}

		args, err := ec.field_Mutation_delete_system_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSystemUser(childComplexity, args["where"].(model.SystemUserBoolExp)), true

	case "Mutation.delete_system_user_by_pk":
		if e.complexity.Mutation.DeleteSystemUserByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_system_user_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSystemUserByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_system_user_by_union_pk":
		if e.complexity.Mutation.DeleteSystemUserByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_system_user_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSystemUserByUnionPk(childComplexity, args["user_id"].(string)), true

	case "Mutation.insert_department":
		if e.complexity.Mutation.InsertDepartment == nil {
			break
		}

		args, err := ec.field_Mutation_insert_department_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDepartment(childComplexity, args["objects"].([]*model.DepartmentInsertInput)), true

	case "Mutation.insert_department_one":
		if e.complexity.Mutation.InsertDepartmentOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_department_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDepartmentOne(childComplexity, args["objects"].(model.DepartmentInsertInput)), true

	case "Mutation.insert_enterprise":
		if e.complexity.Mutation.InsertEnterprise == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterprise(childComplexity, args["objects"].([]*model.EnterpriseInsertInput)), true

	case "Mutation.insert_enterprise_alarm_send_police":
		if e.complexity.Mutation.InsertEnterpriseAlarmSendPolice == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_alarm_send_police_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterpriseAlarmSendPolice(childComplexity, args["objects"].([]*model.EnterpriseAlarmSendPoliceInsertInput)), true

	case "Mutation.insert_enterprise_alarm_send_police_one":
		if e.complexity.Mutation.InsertEnterpriseAlarmSendPoliceOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_alarm_send_police_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterpriseAlarmSendPoliceOne(childComplexity, args["objects"].(model.EnterpriseAlarmSendPoliceInsertInput)), true

	case "Mutation.insert_enterprise_contact":
		if e.complexity.Mutation.InsertEnterpriseContact == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_contact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterpriseContact(childComplexity, args["objects"].([]*model.EnterpriseContactInsertInput)), true

	case "Mutation.insert_enterprise_contact_one":
		if e.complexity.Mutation.InsertEnterpriseContactOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_contact_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterpriseContactOne(childComplexity, args["objects"].(model.EnterpriseContactInsertInput)), true

	case "Mutation.insert_enterprise_muck_trunk":
		if e.complexity.Mutation.InsertEnterpriseMuckTrunk == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_muck_trunk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterpriseMuckTrunk(childComplexity, args["objects"].([]*model.EnterpriseMuckTrunkInsertInput)), true

	case "Mutation.insert_enterprise_muck_trunk_one":
		if e.complexity.Mutation.InsertEnterpriseMuckTrunkOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_muck_trunk_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterpriseMuckTrunkOne(childComplexity, args["objects"].(model.EnterpriseMuckTrunkInsertInput)), true

	case "Mutation.insert_enterprise_one":
		if e.complexity.Mutation.InsertEnterpriseOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterpriseOne(childComplexity, args["objects"].(model.EnterpriseInsertInput)), true

	case "Mutation.insert_enterprise_score_log":
		if e.complexity.Mutation.InsertEnterpriseScoreLog == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_score_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterpriseScoreLog(childComplexity, args["objects"].([]*model.EnterpriseScoreLogInsertInput)), true

	case "Mutation.insert_enterprise_score_log_one":
		if e.complexity.Mutation.InsertEnterpriseScoreLogOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_score_log_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterpriseScoreLogOne(childComplexity, args["objects"].(model.EnterpriseScoreLogInsertInput)), true

	case "Mutation.insert_enterprise_score_set":
		if e.complexity.Mutation.InsertEnterpriseScoreSet == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_score_set_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterpriseScoreSet(childComplexity, args["objects"].([]*model.EnterpriseScoreSetInsertInput)), true

	case "Mutation.insert_enterprise_score_set_one":
		if e.complexity.Mutation.InsertEnterpriseScoreSetOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_score_set_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterpriseScoreSetOne(childComplexity, args["objects"].(model.EnterpriseScoreSetInsertInput)), true

	case "Mutation.insert_enterprise_state_his":
		if e.complexity.Mutation.InsertEnterpriseStateHis == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_state_his_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterpriseStateHis(childComplexity, args["objects"].([]*model.EnterpriseStateHisInsertInput)), true

	case "Mutation.insert_enterprise_state_his_one":
		if e.complexity.Mutation.InsertEnterpriseStateHisOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_state_his_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterpriseStateHisOne(childComplexity, args["objects"].(model.EnterpriseStateHisInsertInput)), true

	case "Mutation.insert_enterprise_ukey":
		if e.complexity.Mutation.InsertEnterpriseUkey == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_ukey_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterpriseUkey(childComplexity, args["objects"].([]*model.EnterpriseUkeyInsertInput)), true

	case "Mutation.insert_enterprise_ukey_one":
		if e.complexity.Mutation.InsertEnterpriseUkeyOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_ukey_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterpriseUkeyOne(childComplexity, args["objects"].(model.EnterpriseUkeyInsertInput)), true

	case "Mutation.insert_system_user":
		if e.complexity.Mutation.InsertSystemUser == nil {
			break
		}

		args, err := ec.field_Mutation_insert_system_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertSystemUser(childComplexity, args["objects"].([]*model.SystemUserInsertInput)), true

	case "Mutation.insert_system_user_one":
		if e.complexity.Mutation.InsertSystemUserOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_system_user_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertSystemUserOne(childComplexity, args["objects"].(model.SystemUserInsertInput)), true

	case "Mutation.update_department":
		if e.complexity.Mutation.UpdateDepartment == nil {
			break
		}

		args, err := ec.field_Mutation_update_department_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDepartment(childComplexity, args["_inc"].(*model.DepartmentIncInput), args["_set"].(*model.DepartmentSetInput), args["where"].(model.DepartmentBoolExp)), true

	case "Mutation.update_department_by_pk":
		if e.complexity.Mutation.UpdateDepartmentByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_department_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDepartmentByPk(childComplexity, args["_inc"].(*model.DepartmentIncInput), args["_set"].(*model.DepartmentSetInput), args["id"].(int64)), true

	case "Mutation.update_department_by_union_pk":
		if e.complexity.Mutation.UpdateDepartmentByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_department_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDepartmentByUnionPk(childComplexity, args["_inc"].(*model.DepartmentIncInput), args["_set"].(*model.DepartmentSetInput), args["department_id"].(string)), true

	case "Mutation.update_enterprise":
		if e.complexity.Mutation.UpdateEnterprise == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterprise(childComplexity, args["_inc"].(*model.EnterpriseIncInput), args["_set"].(*model.EnterpriseSetInput), args["where"].(model.EnterpriseBoolExp)), true

	case "Mutation.update_enterprise_alarm_send_police":
		if e.complexity.Mutation.UpdateEnterpriseAlarmSendPolice == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_alarm_send_police_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseAlarmSendPolice(childComplexity, args["_inc"].(*model.EnterpriseAlarmSendPoliceIncInput), args["_set"].(*model.EnterpriseAlarmSendPoliceSetInput), args["where"].(model.EnterpriseAlarmSendPoliceBoolExp)), true

	case "Mutation.update_enterprise_alarm_send_police_by_pk":
		if e.complexity.Mutation.UpdateEnterpriseAlarmSendPoliceByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_alarm_send_police_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseAlarmSendPoliceByPk(childComplexity, args["_inc"].(*model.EnterpriseAlarmSendPoliceIncInput), args["_set"].(*model.EnterpriseAlarmSendPoliceSetInput), args["id"].(int64)), true

	case "Mutation.update_enterprise_alarm_send_police_by_union_pk":
		if e.complexity.Mutation.UpdateEnterpriseAlarmSendPoliceByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_alarm_send_police_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseAlarmSendPoliceByUnionPk(childComplexity, args["_inc"].(*model.EnterpriseAlarmSendPoliceIncInput), args["_set"].(*model.EnterpriseAlarmSendPoliceSetInput), args["enterprise_alarm_send_police_id"].(string)), true

	case "Mutation.update_enterprise_by_pk":
		if e.complexity.Mutation.UpdateEnterpriseByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseByPk(childComplexity, args["_inc"].(*model.EnterpriseIncInput), args["_set"].(*model.EnterpriseSetInput), args["id"].(int64)), true

	case "Mutation.update_enterprise_by_union_pk":
		if e.complexity.Mutation.UpdateEnterpriseByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseByUnionPk(childComplexity, args["_inc"].(*model.EnterpriseIncInput), args["_set"].(*model.EnterpriseSetInput), args["enterprise_id"].(string)), true

	case "Mutation.update_enterprise_contact":
		if e.complexity.Mutation.UpdateEnterpriseContact == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_contact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseContact(childComplexity, args["_inc"].(*model.EnterpriseContactIncInput), args["_set"].(*model.EnterpriseContactSetInput), args["where"].(model.EnterpriseContactBoolExp)), true

	case "Mutation.update_enterprise_contact_by_pk":
		if e.complexity.Mutation.UpdateEnterpriseContactByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_contact_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseContactByPk(childComplexity, args["_inc"].(*model.EnterpriseContactIncInput), args["_set"].(*model.EnterpriseContactSetInput), args["id"].(int64)), true

	case "Mutation.update_enterprise_contact_by_union_pk":
		if e.complexity.Mutation.UpdateEnterpriseContactByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_contact_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseContactByUnionPk(childComplexity, args["_inc"].(*model.EnterpriseContactIncInput), args["_set"].(*model.EnterpriseContactSetInput), args["contact_id"].(string)), true

	case "Mutation.update_enterprise_muck_trunk":
		if e.complexity.Mutation.UpdateEnterpriseMuckTrunk == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_muck_trunk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseMuckTrunk(childComplexity, args["_inc"].(*model.EnterpriseMuckTrunkIncInput), args["_set"].(*model.EnterpriseMuckTrunkSetInput), args["where"].(model.EnterpriseMuckTrunkBoolExp)), true

	case "Mutation.update_enterprise_muck_trunk_by_pk":
		if e.complexity.Mutation.UpdateEnterpriseMuckTrunkByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_muck_trunk_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseMuckTrunkByPk(childComplexity, args["_inc"].(*model.EnterpriseMuckTrunkIncInput), args["_set"].(*model.EnterpriseMuckTrunkSetInput), args["id"].(int64)), true

	case "Mutation.update_enterprise_muck_trunk_by_union_pk":
		if e.complexity.Mutation.UpdateEnterpriseMuckTrunkByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_muck_trunk_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseMuckTrunkByUnionPk(childComplexity, args["_inc"].(*model.EnterpriseMuckTrunkIncInput), args["_set"].(*model.EnterpriseMuckTrunkSetInput), args["enterprise_muck_trunk_id"].(string)), true

	case "Mutation.update_enterprise_score_log":
		if e.complexity.Mutation.UpdateEnterpriseScoreLog == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_score_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseScoreLog(childComplexity, args["_inc"].(*model.EnterpriseScoreLogIncInput), args["_set"].(*model.EnterpriseScoreLogSetInput), args["where"].(model.EnterpriseScoreLogBoolExp)), true

	case "Mutation.update_enterprise_score_log_by_pk":
		if e.complexity.Mutation.UpdateEnterpriseScoreLogByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_score_log_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseScoreLogByPk(childComplexity, args["_inc"].(*model.EnterpriseScoreLogIncInput), args["_set"].(*model.EnterpriseScoreLogSetInput), args["id"].(int64)), true

	case "Mutation.update_enterprise_score_log_by_union_pk":
		if e.complexity.Mutation.UpdateEnterpriseScoreLogByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_score_log_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseScoreLogByUnionPk(childComplexity, args["_inc"].(*model.EnterpriseScoreLogIncInput), args["_set"].(*model.EnterpriseScoreLogSetInput), args["log_id"].(string)), true

	case "Mutation.update_enterprise_score_set":
		if e.complexity.Mutation.UpdateEnterpriseScoreSet == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_score_set_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseScoreSet(childComplexity, args["_inc"].(*model.EnterpriseScoreSetIncInput), args["_set"].(*model.EnterpriseScoreSetSetInput), args["where"].(model.EnterpriseScoreSetBoolExp)), true

	case "Mutation.update_enterprise_score_set_by_pk":
		if e.complexity.Mutation.UpdateEnterpriseScoreSetByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_score_set_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseScoreSetByPk(childComplexity, args["_inc"].(*model.EnterpriseScoreSetIncInput), args["_set"].(*model.EnterpriseScoreSetSetInput), args["id"].(int64)), true

	case "Mutation.update_enterprise_score_set_by_union_pk":
		if e.complexity.Mutation.UpdateEnterpriseScoreSetByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_score_set_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseScoreSetByUnionPk(childComplexity, args["_inc"].(*model.EnterpriseScoreSetIncInput), args["_set"].(*model.EnterpriseScoreSetSetInput), args["score_set_id"].(string)), true

	case "Mutation.update_enterprise_state_his":
		if e.complexity.Mutation.UpdateEnterpriseStateHis == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_state_his_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseStateHis(childComplexity, args["_inc"].(*model.EnterpriseStateHisIncInput), args["_set"].(*model.EnterpriseStateHisSetInput), args["where"].(model.EnterpriseStateHisBoolExp)), true

	case "Mutation.update_enterprise_state_his_by_pk":
		if e.complexity.Mutation.UpdateEnterpriseStateHisByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_state_his_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseStateHisByPk(childComplexity, args["_inc"].(*model.EnterpriseStateHisIncInput), args["_set"].(*model.EnterpriseStateHisSetInput), args["id"].(int64)), true

	case "Mutation.update_enterprise_state_his_by_union_pk":
		if e.complexity.Mutation.UpdateEnterpriseStateHisByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_state_his_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseStateHisByUnionPk(childComplexity, args["_inc"].(*model.EnterpriseStateHisIncInput), args["_set"].(*model.EnterpriseStateHisSetInput), args["state_his_id"].(string)), true

	case "Mutation.update_enterprise_ukey":
		if e.complexity.Mutation.UpdateEnterpriseUkey == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_ukey_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseUkey(childComplexity, args["_inc"].(*model.EnterpriseUkeyIncInput), args["_set"].(*model.EnterpriseUkeySetInput), args["where"].(model.EnterpriseUkeyBoolExp)), true

	case "Mutation.update_enterprise_ukey_by_pk":
		if e.complexity.Mutation.UpdateEnterpriseUkeyByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_ukey_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseUkeyByPk(childComplexity, args["_inc"].(*model.EnterpriseUkeyIncInput), args["_set"].(*model.EnterpriseUkeySetInput), args["id"].(int64)), true

	case "Mutation.update_enterprise_ukey_by_union_pk":
		if e.complexity.Mutation.UpdateEnterpriseUkeyByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_ukey_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseUkeyByUnionPk(childComplexity, args["_inc"].(*model.EnterpriseUkeyIncInput), args["_set"].(*model.EnterpriseUkeySetInput), args["ukey_id"].(string)), true

	case "Mutation.update_system_user":
		if e.complexity.Mutation.UpdateSystemUser == nil {
			break
		}

		args, err := ec.field_Mutation_update_system_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSystemUser(childComplexity, args["_inc"].(*model.SystemUserIncInput), args["_set"].(*model.SystemUserSetInput), args["where"].(model.SystemUserBoolExp)), true

	case "Mutation.update_system_user_by_pk":
		if e.complexity.Mutation.UpdateSystemUserByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_system_user_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSystemUserByPk(childComplexity, args["_inc"].(*model.SystemUserIncInput), args["_set"].(*model.SystemUserSetInput), args["id"].(int64)), true

	case "Mutation.update_system_user_by_union_pk":
		if e.complexity.Mutation.UpdateSystemUserByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_system_user_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSystemUserByUnionPk(childComplexity, args["_inc"].(*model.SystemUserIncInput), args["_set"].(*model.SystemUserSetInput), args["user_id"].(string)), true

	case "Query.department":
		if e.complexity.Query.Department == nil {
			break
		}

		args, err := ec.field_Query_department_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Department(childComplexity, args["distinct_on"].([]model.DepartmentSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DepartmentOrderBy), args["where"].(*model.DepartmentBoolExp)), true

	case "Query.department_aggregate":
		if e.complexity.Query.DepartmentAggregate == nil {
			break
		}

		args, err := ec.field_Query_department_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DepartmentAggregate(childComplexity, args["distinct_on"].([]model.DepartmentSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DepartmentOrderBy), args["where"].(*model.DepartmentBoolExp)), true

	case "Query.department_by_pk":
		if e.complexity.Query.DepartmentByPk == nil {
			break
		}

		args, err := ec.field_Query_department_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DepartmentByPk(childComplexity, args["id"].(int64)), true

	case "Query.department_by_union_pk":
		if e.complexity.Query.DepartmentByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_department_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DepartmentByUnionPk(childComplexity, args["department_id"].(string)), true

	case "Query.enterprise":
		if e.complexity.Query.Enterprise == nil {
			break
		}

		args, err := ec.field_Query_enterprise_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Enterprise(childComplexity, args["distinct_on"].([]model.EnterpriseSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseOrderBy), args["where"].(*model.EnterpriseBoolExp)), true

	case "Query.enterprise_aggregate":
		if e.complexity.Query.EnterpriseAggregate == nil {
			break
		}

		args, err := ec.field_Query_enterprise_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseAggregate(childComplexity, args["distinct_on"].([]model.EnterpriseSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseOrderBy), args["where"].(*model.EnterpriseBoolExp)), true

	case "Query.enterprise_alarm_send_police":
		if e.complexity.Query.EnterpriseAlarmSendPolice == nil {
			break
		}

		args, err := ec.field_Query_enterprise_alarm_send_police_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseAlarmSendPolice(childComplexity, args["distinct_on"].([]model.EnterpriseAlarmSendPoliceSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseAlarmSendPoliceOrderBy), args["where"].(*model.EnterpriseAlarmSendPoliceBoolExp)), true

	case "Query.enterprise_alarm_send_police_aggregate":
		if e.complexity.Query.EnterpriseAlarmSendPoliceAggregate == nil {
			break
		}

		args, err := ec.field_Query_enterprise_alarm_send_police_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseAlarmSendPoliceAggregate(childComplexity, args["distinct_on"].([]model.EnterpriseAlarmSendPoliceSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseAlarmSendPoliceOrderBy), args["where"].(*model.EnterpriseAlarmSendPoliceBoolExp)), true

	case "Query.enterprise_alarm_send_police_by_pk":
		if e.complexity.Query.EnterpriseAlarmSendPoliceByPk == nil {
			break
		}

		args, err := ec.field_Query_enterprise_alarm_send_police_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseAlarmSendPoliceByPk(childComplexity, args["id"].(int64)), true

	case "Query.enterprise_alarm_send_police_by_union_pk":
		if e.complexity.Query.EnterpriseAlarmSendPoliceByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_enterprise_alarm_send_police_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseAlarmSendPoliceByUnionPk(childComplexity, args["enterprise_alarm_send_police_id"].(string)), true

	case "Query.enterprise_by_pk":
		if e.complexity.Query.EnterpriseByPk == nil {
			break
		}

		args, err := ec.field_Query_enterprise_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseByPk(childComplexity, args["id"].(int64)), true

	case "Query.enterprise_by_union_pk":
		if e.complexity.Query.EnterpriseByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_enterprise_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseByUnionPk(childComplexity, args["enterprise_id"].(string)), true

	case "Query.enterprise_contact":
		if e.complexity.Query.EnterpriseContact == nil {
			break
		}

		args, err := ec.field_Query_enterprise_contact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseContact(childComplexity, args["distinct_on"].([]model.EnterpriseContactSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseContactOrderBy), args["where"].(*model.EnterpriseContactBoolExp)), true

	case "Query.enterprise_contact_aggregate":
		if e.complexity.Query.EnterpriseContactAggregate == nil {
			break
		}

		args, err := ec.field_Query_enterprise_contact_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseContactAggregate(childComplexity, args["distinct_on"].([]model.EnterpriseContactSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseContactOrderBy), args["where"].(*model.EnterpriseContactBoolExp)), true

	case "Query.enterprise_contact_by_pk":
		if e.complexity.Query.EnterpriseContactByPk == nil {
			break
		}

		args, err := ec.field_Query_enterprise_contact_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseContactByPk(childComplexity, args["id"].(int64)), true

	case "Query.enterprise_contact_by_union_pk":
		if e.complexity.Query.EnterpriseContactByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_enterprise_contact_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseContactByUnionPk(childComplexity, args["contact_id"].(string)), true

	case "Query.enterprise_muck_trunk":
		if e.complexity.Query.EnterpriseMuckTrunk == nil {
			break
		}

		args, err := ec.field_Query_enterprise_muck_trunk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseMuckTrunk(childComplexity, args["distinct_on"].([]model.EnterpriseMuckTrunkSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseMuckTrunkOrderBy), args["where"].(*model.EnterpriseMuckTrunkBoolExp)), true

	case "Query.enterprise_muck_trunk_aggregate":
		if e.complexity.Query.EnterpriseMuckTrunkAggregate == nil {
			break
		}

		args, err := ec.field_Query_enterprise_muck_trunk_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseMuckTrunkAggregate(childComplexity, args["distinct_on"].([]model.EnterpriseMuckTrunkSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseMuckTrunkOrderBy), args["where"].(*model.EnterpriseMuckTrunkBoolExp)), true

	case "Query.enterprise_muck_trunk_by_pk":
		if e.complexity.Query.EnterpriseMuckTrunkByPk == nil {
			break
		}

		args, err := ec.field_Query_enterprise_muck_trunk_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseMuckTrunkByPk(childComplexity, args["id"].(int64)), true

	case "Query.enterprise_muck_trunk_by_union_pk":
		if e.complexity.Query.EnterpriseMuckTrunkByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_enterprise_muck_trunk_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseMuckTrunkByUnionPk(childComplexity, args["enterprise_muck_trunk_id"].(string)), true

	case "Query.enterprise_score_log":
		if e.complexity.Query.EnterpriseScoreLog == nil {
			break
		}

		args, err := ec.field_Query_enterprise_score_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseScoreLog(childComplexity, args["distinct_on"].([]model.EnterpriseScoreLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseScoreLogOrderBy), args["where"].(*model.EnterpriseScoreLogBoolExp)), true

	case "Query.enterprise_score_log_aggregate":
		if e.complexity.Query.EnterpriseScoreLogAggregate == nil {
			break
		}

		args, err := ec.field_Query_enterprise_score_log_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseScoreLogAggregate(childComplexity, args["distinct_on"].([]model.EnterpriseScoreLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseScoreLogOrderBy), args["where"].(*model.EnterpriseScoreLogBoolExp)), true

	case "Query.enterprise_score_log_by_pk":
		if e.complexity.Query.EnterpriseScoreLogByPk == nil {
			break
		}

		args, err := ec.field_Query_enterprise_score_log_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseScoreLogByPk(childComplexity, args["id"].(int64)), true

	case "Query.enterprise_score_log_by_union_pk":
		if e.complexity.Query.EnterpriseScoreLogByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_enterprise_score_log_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseScoreLogByUnionPk(childComplexity, args["log_id"].(string)), true

	case "Query.enterprise_score_set":
		if e.complexity.Query.EnterpriseScoreSet == nil {
			break
		}

		args, err := ec.field_Query_enterprise_score_set_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseScoreSet(childComplexity, args["distinct_on"].([]model.EnterpriseScoreSetSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseScoreSetOrderBy), args["where"].(*model.EnterpriseScoreSetBoolExp)), true

	case "Query.enterprise_score_set_aggregate":
		if e.complexity.Query.EnterpriseScoreSetAggregate == nil {
			break
		}

		args, err := ec.field_Query_enterprise_score_set_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseScoreSetAggregate(childComplexity, args["distinct_on"].([]model.EnterpriseScoreSetSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseScoreSetOrderBy), args["where"].(*model.EnterpriseScoreSetBoolExp)), true

	case "Query.enterprise_score_set_by_pk":
		if e.complexity.Query.EnterpriseScoreSetByPk == nil {
			break
		}

		args, err := ec.field_Query_enterprise_score_set_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseScoreSetByPk(childComplexity, args["id"].(int64)), true

	case "Query.enterprise_score_set_by_union_pk":
		if e.complexity.Query.EnterpriseScoreSetByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_enterprise_score_set_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseScoreSetByUnionPk(childComplexity, args["score_set_id"].(string)), true

	case "Query.enterprise_state_his":
		if e.complexity.Query.EnterpriseStateHis == nil {
			break
		}

		args, err := ec.field_Query_enterprise_state_his_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseStateHis(childComplexity, args["distinct_on"].([]model.EnterpriseStateHisSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseStateHisOrderBy), args["where"].(*model.EnterpriseStateHisBoolExp)), true

	case "Query.enterprise_state_his_aggregate":
		if e.complexity.Query.EnterpriseStateHisAggregate == nil {
			break
		}

		args, err := ec.field_Query_enterprise_state_his_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseStateHisAggregate(childComplexity, args["distinct_on"].([]model.EnterpriseStateHisSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseStateHisOrderBy), args["where"].(*model.EnterpriseStateHisBoolExp)), true

	case "Query.enterprise_state_his_by_pk":
		if e.complexity.Query.EnterpriseStateHisByPk == nil {
			break
		}

		args, err := ec.field_Query_enterprise_state_his_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseStateHisByPk(childComplexity, args["id"].(int64)), true

	case "Query.enterprise_state_his_by_union_pk":
		if e.complexity.Query.EnterpriseStateHisByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_enterprise_state_his_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseStateHisByUnionPk(childComplexity, args["state_his_id"].(string)), true

	case "Query.enterprise_ukey":
		if e.complexity.Query.EnterpriseUkey == nil {
			break
		}

		args, err := ec.field_Query_enterprise_ukey_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseUkey(childComplexity, args["distinct_on"].([]model.EnterpriseUkeySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseUkeyOrderBy), args["where"].(*model.EnterpriseUkeyBoolExp)), true

	case "Query.enterprise_ukey_aggregate":
		if e.complexity.Query.EnterpriseUkeyAggregate == nil {
			break
		}

		args, err := ec.field_Query_enterprise_ukey_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseUkeyAggregate(childComplexity, args["distinct_on"].([]model.EnterpriseUkeySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseUkeyOrderBy), args["where"].(*model.EnterpriseUkeyBoolExp)), true

	case "Query.enterprise_ukey_by_pk":
		if e.complexity.Query.EnterpriseUkeyByPk == nil {
			break
		}

		args, err := ec.field_Query_enterprise_ukey_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseUkeyByPk(childComplexity, args["id"].(int64)), true

	case "Query.enterprise_ukey_by_union_pk":
		if e.complexity.Query.EnterpriseUkeyByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_enterprise_ukey_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseUkeyByUnionPk(childComplexity, args["ukey_id"].(string)), true

	case "Query.system_user":
		if e.complexity.Query.SystemUser == nil {
			break
		}

		args, err := ec.field_Query_system_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SystemUser(childComplexity, args["distinct_on"].([]model.SystemUserSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SystemUserOrderBy), args["where"].(*model.SystemUserBoolExp)), true

	case "Query.system_user_aggregate":
		if e.complexity.Query.SystemUserAggregate == nil {
			break
		}

		args, err := ec.field_Query_system_user_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SystemUserAggregate(childComplexity, args["distinct_on"].([]model.SystemUserSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SystemUserOrderBy), args["where"].(*model.SystemUserBoolExp)), true

	case "Query.system_user_by_pk":
		if e.complexity.Query.SystemUserByPk == nil {
			break
		}

		args, err := ec.field_Query_system_user_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SystemUserByPk(childComplexity, args["id"].(int64)), true

	case "Query.system_user_by_union_pk":
		if e.complexity.Query.SystemUserByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_system_user_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SystemUserByUnionPk(childComplexity, args["user_id"].(string)), true

	case "SystemUser.app_version":
		if e.complexity.SystemUser.AppVersion == nil {
			break
		}

		return e.complexity.SystemUser.AppVersion(childComplexity), true

	case "SystemUser.audit_level":
		if e.complexity.SystemUser.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUser.AuditLevel(childComplexity), true

	case "SystemUser.create_by":
		if e.complexity.SystemUser.CreateBy == nil {
			break
		}

		return e.complexity.SystemUser.CreateBy(childComplexity), true

	case "SystemUser.created_at":
		if e.complexity.SystemUser.CreatedAt == nil {
			break
		}

		return e.complexity.SystemUser.CreatedAt(childComplexity), true

	case "SystemUser.delete_at":
		if e.complexity.SystemUser.DeleteAt == nil {
			break
		}

		return e.complexity.SystemUser.DeleteAt(childComplexity), true

	case "SystemUser.delete_by":
		if e.complexity.SystemUser.DeleteBy == nil {
			break
		}

		return e.complexity.SystemUser.DeleteBy(childComplexity), true

	case "SystemUser.department_id":
		if e.complexity.SystemUser.DepartmentID == nil {
			break
		}

		return e.complexity.SystemUser.DepartmentID(childComplexity), true

	case "SystemUser.email":
		if e.complexity.SystemUser.Email == nil {
			break
		}

		return e.complexity.SystemUser.Email(childComplexity), true

	case "SystemUser.enterprise_id":
		if e.complexity.SystemUser.EnterpriseID == nil {
			break
		}

		return e.complexity.SystemUser.EnterpriseID(childComplexity), true

	case "SystemUser.grade":
		if e.complexity.SystemUser.Grade == nil {
			break
		}

		return e.complexity.SystemUser.Grade(childComplexity), true

	case "SystemUser.id":
		if e.complexity.SystemUser.ID == nil {
			break
		}

		return e.complexity.SystemUser.ID(childComplexity), true

	case "SystemUser.ip_address":
		if e.complexity.SystemUser.IPAddress == nil {
			break
		}

		return e.complexity.SystemUser.IPAddress(childComplexity), true

	case "SystemUser.is_bind_ip":
		if e.complexity.SystemUser.IsBindIP == nil {
			break
		}

		return e.complexity.SystemUser.IsBindIP(childComplexity), true

	case "SystemUser.is_delete":
		if e.complexity.SystemUser.IsDelete == nil {
			break
		}

		return e.complexity.SystemUser.IsDelete(childComplexity), true

	case "SystemUser.is_valid":
		if e.complexity.SystemUser.IsValid == nil {
			break
		}

		return e.complexity.SystemUser.IsValid(childComplexity), true

	case "SystemUser.mkey":
		if e.complexity.SystemUser.Mkey == nil {
			break
		}

		return e.complexity.SystemUser.Mkey(childComplexity), true

	case "SystemUser.mobile":
		if e.complexity.SystemUser.Mobile == nil {
			break
		}

		return e.complexity.SystemUser.Mobile(childComplexity), true

	case "SystemUser.password":
		if e.complexity.SystemUser.Password == nil {
			break
		}

		return e.complexity.SystemUser.Password(childComplexity), true

	case "SystemUser.remarks":
		if e.complexity.SystemUser.Remarks == nil {
			break
		}

		return e.complexity.SystemUser.Remarks(childComplexity), true

	case "SystemUser.telephone":
		if e.complexity.SystemUser.Telephone == nil {
			break
		}

		return e.complexity.SystemUser.Telephone(childComplexity), true

	case "SystemUser.uername":
		if e.complexity.SystemUser.Uername == nil {
			break
		}

		return e.complexity.SystemUser.Uername(childComplexity), true

	case "SystemUser.ukey":
		if e.complexity.SystemUser.Ukey == nil {
			break
		}

		return e.complexity.SystemUser.Ukey(childComplexity), true

	case "SystemUser.update_at":
		if e.complexity.SystemUser.UpdateAt == nil {
			break
		}

		return e.complexity.SystemUser.UpdateAt(childComplexity), true

	case "SystemUser.update_by":
		if e.complexity.SystemUser.UpdateBy == nil {
			break
		}

		return e.complexity.SystemUser.UpdateBy(childComplexity), true

	case "SystemUser.user_id":
		if e.complexity.SystemUser.UserID == nil {
			break
		}

		return e.complexity.SystemUser.UserID(childComplexity), true

	case "SystemUser.user_state":
		if e.complexity.SystemUser.UserState == nil {
			break
		}

		return e.complexity.SystemUser.UserState(childComplexity), true

	case "SystemUser.user_type":
		if e.complexity.SystemUser.UserType == nil {
			break
		}

		return e.complexity.SystemUser.UserType(childComplexity), true

	case "SystemUserAggregate.aggregate":
		if e.complexity.SystemUserAggregate.Aggregate == nil {
			break
		}

		return e.complexity.SystemUserAggregate.Aggregate(childComplexity), true

	case "SystemUserAggregateFields.avg":
		if e.complexity.SystemUserAggregateFields.Avg == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.Avg(childComplexity), true

	case "SystemUserAggregateFields.count":
		if e.complexity.SystemUserAggregateFields.Count == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.Count(childComplexity), true

	case "SystemUserAggregateFields.max":
		if e.complexity.SystemUserAggregateFields.Max == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.Max(childComplexity), true

	case "SystemUserAggregateFields.min":
		if e.complexity.SystemUserAggregateFields.Min == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.Min(childComplexity), true

	case "SystemUserAggregateFields.stddev":
		if e.complexity.SystemUserAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.Stddev(childComplexity), true

	case "SystemUserAggregateFields.stddev_pop":
		if e.complexity.SystemUserAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.StddevPop(childComplexity), true

	case "SystemUserAggregateFields.stddev_samp":
		if e.complexity.SystemUserAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.StddevSamp(childComplexity), true

	case "SystemUserAggregateFields.sum":
		if e.complexity.SystemUserAggregateFields.Sum == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.Sum(childComplexity), true

	case "SystemUserAggregateFields.var_pop":
		if e.complexity.SystemUserAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.VarPop(childComplexity), true

	case "SystemUserAggregateFields.var_samp":
		if e.complexity.SystemUserAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.VarSamp(childComplexity), true

	case "SystemUserAggregateFields.variance":
		if e.complexity.SystemUserAggregateFields.Variance == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.Variance(childComplexity), true

	case "SystemUserAvgFields.audit_level":
		if e.complexity.SystemUserAvgFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserAvgFields.AuditLevel(childComplexity), true

	case "SystemUserAvgFields.grade":
		if e.complexity.SystemUserAvgFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserAvgFields.Grade(childComplexity), true

	case "SystemUserAvgFields.id":
		if e.complexity.SystemUserAvgFields.ID == nil {
			break
		}

		return e.complexity.SystemUserAvgFields.ID(childComplexity), true

	case "SystemUserAvgFields.user_state":
		if e.complexity.SystemUserAvgFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserAvgFields.UserState(childComplexity), true

	case "SystemUserAvgFields.user_type":
		if e.complexity.SystemUserAvgFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserAvgFields.UserType(childComplexity), true

	case "SystemUserMaxFields.app_version":
		if e.complexity.SystemUserMaxFields.AppVersion == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.AppVersion(childComplexity), true

	case "SystemUserMaxFields.audit_level":
		if e.complexity.SystemUserMaxFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.AuditLevel(childComplexity), true

	case "SystemUserMaxFields.create_by":
		if e.complexity.SystemUserMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.CreateBy(childComplexity), true

	case "SystemUserMaxFields.created_at":
		if e.complexity.SystemUserMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.CreatedAt(childComplexity), true

	case "SystemUserMaxFields.delete_at":
		if e.complexity.SystemUserMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.DeleteAt(childComplexity), true

	case "SystemUserMaxFields.delete_by":
		if e.complexity.SystemUserMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.DeleteBy(childComplexity), true

	case "SystemUserMaxFields.department_id":
		if e.complexity.SystemUserMaxFields.DepartmentID == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.DepartmentID(childComplexity), true

	case "SystemUserMaxFields.email":
		if e.complexity.SystemUserMaxFields.Email == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.Email(childComplexity), true

	case "SystemUserMaxFields.enterprise_id":
		if e.complexity.SystemUserMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.EnterpriseID(childComplexity), true

	case "SystemUserMaxFields.grade":
		if e.complexity.SystemUserMaxFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.Grade(childComplexity), true

	case "SystemUserMaxFields.id":
		if e.complexity.SystemUserMaxFields.ID == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.ID(childComplexity), true

	case "SystemUserMaxFields.ip_address":
		if e.complexity.SystemUserMaxFields.IPAddress == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.IPAddress(childComplexity), true

	case "SystemUserMaxFields.is_bind_ip":
		if e.complexity.SystemUserMaxFields.IsBindIP == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.IsBindIP(childComplexity), true

	case "SystemUserMaxFields.is_delete":
		if e.complexity.SystemUserMaxFields.IsDelete == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.IsDelete(childComplexity), true

	case "SystemUserMaxFields.is_valid":
		if e.complexity.SystemUserMaxFields.IsValid == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.IsValid(childComplexity), true

	case "SystemUserMaxFields.mkey":
		if e.complexity.SystemUserMaxFields.Mkey == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.Mkey(childComplexity), true

	case "SystemUserMaxFields.mobile":
		if e.complexity.SystemUserMaxFields.Mobile == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.Mobile(childComplexity), true

	case "SystemUserMaxFields.password":
		if e.complexity.SystemUserMaxFields.Password == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.Password(childComplexity), true

	case "SystemUserMaxFields.remarks":
		if e.complexity.SystemUserMaxFields.Remarks == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.Remarks(childComplexity), true

	case "SystemUserMaxFields.telephone":
		if e.complexity.SystemUserMaxFields.Telephone == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.Telephone(childComplexity), true

	case "SystemUserMaxFields.uername":
		if e.complexity.SystemUserMaxFields.Uername == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.Uername(childComplexity), true

	case "SystemUserMaxFields.ukey":
		if e.complexity.SystemUserMaxFields.Ukey == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.Ukey(childComplexity), true

	case "SystemUserMaxFields.update_at":
		if e.complexity.SystemUserMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.UpdateAt(childComplexity), true

	case "SystemUserMaxFields.update_by":
		if e.complexity.SystemUserMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.UpdateBy(childComplexity), true

	case "SystemUserMaxFields.user_id":
		if e.complexity.SystemUserMaxFields.UserID == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.UserID(childComplexity), true

	case "SystemUserMaxFields.user_state":
		if e.complexity.SystemUserMaxFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.UserState(childComplexity), true

	case "SystemUserMaxFields.user_type":
		if e.complexity.SystemUserMaxFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.UserType(childComplexity), true

	case "SystemUserMinFields.app_version":
		if e.complexity.SystemUserMinFields.AppVersion == nil {
			break
		}

		return e.complexity.SystemUserMinFields.AppVersion(childComplexity), true

	case "SystemUserMinFields.audit_level":
		if e.complexity.SystemUserMinFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserMinFields.AuditLevel(childComplexity), true

	case "SystemUserMinFields.create_by":
		if e.complexity.SystemUserMinFields.CreateBy == nil {
			break
		}

		return e.complexity.SystemUserMinFields.CreateBy(childComplexity), true

	case "SystemUserMinFields.created_at":
		if e.complexity.SystemUserMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.SystemUserMinFields.CreatedAt(childComplexity), true

	case "SystemUserMinFields.delete_at":
		if e.complexity.SystemUserMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.SystemUserMinFields.DeleteAt(childComplexity), true

	case "SystemUserMinFields.delete_by":
		if e.complexity.SystemUserMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.SystemUserMinFields.DeleteBy(childComplexity), true

	case "SystemUserMinFields.department_id":
		if e.complexity.SystemUserMinFields.DepartmentID == nil {
			break
		}

		return e.complexity.SystemUserMinFields.DepartmentID(childComplexity), true

	case "SystemUserMinFields.email":
		if e.complexity.SystemUserMinFields.Email == nil {
			break
		}

		return e.complexity.SystemUserMinFields.Email(childComplexity), true

	case "SystemUserMinFields.enterprise_id":
		if e.complexity.SystemUserMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.SystemUserMinFields.EnterpriseID(childComplexity), true

	case "SystemUserMinFields.grade":
		if e.complexity.SystemUserMinFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserMinFields.Grade(childComplexity), true

	case "SystemUserMinFields.id":
		if e.complexity.SystemUserMinFields.ID == nil {
			break
		}

		return e.complexity.SystemUserMinFields.ID(childComplexity), true

	case "SystemUserMinFields.ip_address":
		if e.complexity.SystemUserMinFields.IPAddress == nil {
			break
		}

		return e.complexity.SystemUserMinFields.IPAddress(childComplexity), true

	case "SystemUserMinFields.is_bind_ip":
		if e.complexity.SystemUserMinFields.IsBindIP == nil {
			break
		}

		return e.complexity.SystemUserMinFields.IsBindIP(childComplexity), true

	case "SystemUserMinFields.is_delete":
		if e.complexity.SystemUserMinFields.IsDelete == nil {
			break
		}

		return e.complexity.SystemUserMinFields.IsDelete(childComplexity), true

	case "SystemUserMinFields.is_valid":
		if e.complexity.SystemUserMinFields.IsValid == nil {
			break
		}

		return e.complexity.SystemUserMinFields.IsValid(childComplexity), true

	case "SystemUserMinFields.mkey":
		if e.complexity.SystemUserMinFields.Mkey == nil {
			break
		}

		return e.complexity.SystemUserMinFields.Mkey(childComplexity), true

	case "SystemUserMinFields.mobile":
		if e.complexity.SystemUserMinFields.Mobile == nil {
			break
		}

		return e.complexity.SystemUserMinFields.Mobile(childComplexity), true

	case "SystemUserMinFields.password":
		if e.complexity.SystemUserMinFields.Password == nil {
			break
		}

		return e.complexity.SystemUserMinFields.Password(childComplexity), true

	case "SystemUserMinFields.remarks":
		if e.complexity.SystemUserMinFields.Remarks == nil {
			break
		}

		return e.complexity.SystemUserMinFields.Remarks(childComplexity), true

	case "SystemUserMinFields.telephone":
		if e.complexity.SystemUserMinFields.Telephone == nil {
			break
		}

		return e.complexity.SystemUserMinFields.Telephone(childComplexity), true

	case "SystemUserMinFields.uername":
		if e.complexity.SystemUserMinFields.Uername == nil {
			break
		}

		return e.complexity.SystemUserMinFields.Uername(childComplexity), true

	case "SystemUserMinFields.ukey":
		if e.complexity.SystemUserMinFields.Ukey == nil {
			break
		}

		return e.complexity.SystemUserMinFields.Ukey(childComplexity), true

	case "SystemUserMinFields.update_at":
		if e.complexity.SystemUserMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.SystemUserMinFields.UpdateAt(childComplexity), true

	case "SystemUserMinFields.update_by":
		if e.complexity.SystemUserMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.SystemUserMinFields.UpdateBy(childComplexity), true

	case "SystemUserMinFields.user_id":
		if e.complexity.SystemUserMinFields.UserID == nil {
			break
		}

		return e.complexity.SystemUserMinFields.UserID(childComplexity), true

	case "SystemUserMinFields.user_state":
		if e.complexity.SystemUserMinFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserMinFields.UserState(childComplexity), true

	case "SystemUserMinFields.user_type":
		if e.complexity.SystemUserMinFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserMinFields.UserType(childComplexity), true

	case "SystemUserMutationResponse.affected_rows":
		if e.complexity.SystemUserMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.SystemUserMutationResponse.AffectedRows(childComplexity), true

	case "SystemUserMutationResponse.returning":
		if e.complexity.SystemUserMutationResponse.Returning == nil {
			break
		}

		return e.complexity.SystemUserMutationResponse.Returning(childComplexity), true

	case "SystemUserStddevFields.audit_level":
		if e.complexity.SystemUserStddevFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserStddevFields.AuditLevel(childComplexity), true

	case "SystemUserStddevFields.grade":
		if e.complexity.SystemUserStddevFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserStddevFields.Grade(childComplexity), true

	case "SystemUserStddevFields.id":
		if e.complexity.SystemUserStddevFields.ID == nil {
			break
		}

		return e.complexity.SystemUserStddevFields.ID(childComplexity), true

	case "SystemUserStddevFields.user_state":
		if e.complexity.SystemUserStddevFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserStddevFields.UserState(childComplexity), true

	case "SystemUserStddevFields.user_type":
		if e.complexity.SystemUserStddevFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserStddevFields.UserType(childComplexity), true

	case "SystemUserStddevPopFields.audit_level":
		if e.complexity.SystemUserStddevPopFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserStddevPopFields.AuditLevel(childComplexity), true

	case "SystemUserStddevPopFields.grade":
		if e.complexity.SystemUserStddevPopFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserStddevPopFields.Grade(childComplexity), true

	case "SystemUserStddevPopFields.id":
		if e.complexity.SystemUserStddevPopFields.ID == nil {
			break
		}

		return e.complexity.SystemUserStddevPopFields.ID(childComplexity), true

	case "SystemUserStddevPopFields.user_state":
		if e.complexity.SystemUserStddevPopFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserStddevPopFields.UserState(childComplexity), true

	case "SystemUserStddevPopFields.user_type":
		if e.complexity.SystemUserStddevPopFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserStddevPopFields.UserType(childComplexity), true

	case "SystemUserStddevSampFields.audit_level":
		if e.complexity.SystemUserStddevSampFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserStddevSampFields.AuditLevel(childComplexity), true

	case "SystemUserStddevSampFields.grade":
		if e.complexity.SystemUserStddevSampFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserStddevSampFields.Grade(childComplexity), true

	case "SystemUserStddevSampFields.id":
		if e.complexity.SystemUserStddevSampFields.ID == nil {
			break
		}

		return e.complexity.SystemUserStddevSampFields.ID(childComplexity), true

	case "SystemUserStddevSampFields.user_state":
		if e.complexity.SystemUserStddevSampFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserStddevSampFields.UserState(childComplexity), true

	case "SystemUserStddevSampFields.user_type":
		if e.complexity.SystemUserStddevSampFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserStddevSampFields.UserType(childComplexity), true

	case "SystemUserSumFields.audit_level":
		if e.complexity.SystemUserSumFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserSumFields.AuditLevel(childComplexity), true

	case "SystemUserSumFields.grade":
		if e.complexity.SystemUserSumFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserSumFields.Grade(childComplexity), true

	case "SystemUserSumFields.id":
		if e.complexity.SystemUserSumFields.ID == nil {
			break
		}

		return e.complexity.SystemUserSumFields.ID(childComplexity), true

	case "SystemUserSumFields.user_state":
		if e.complexity.SystemUserSumFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserSumFields.UserState(childComplexity), true

	case "SystemUserSumFields.user_type":
		if e.complexity.SystemUserSumFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserSumFields.UserType(childComplexity), true

	case "SystemUserVarPopFields.audit_level":
		if e.complexity.SystemUserVarPopFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserVarPopFields.AuditLevel(childComplexity), true

	case "SystemUserVarPopFields.grade":
		if e.complexity.SystemUserVarPopFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserVarPopFields.Grade(childComplexity), true

	case "SystemUserVarPopFields.id":
		if e.complexity.SystemUserVarPopFields.ID == nil {
			break
		}

		return e.complexity.SystemUserVarPopFields.ID(childComplexity), true

	case "SystemUserVarPopFields.user_state":
		if e.complexity.SystemUserVarPopFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserVarPopFields.UserState(childComplexity), true

	case "SystemUserVarPopFields.user_type":
		if e.complexity.SystemUserVarPopFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserVarPopFields.UserType(childComplexity), true

	case "SystemUserVarSampFields.audit_level":
		if e.complexity.SystemUserVarSampFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserVarSampFields.AuditLevel(childComplexity), true

	case "SystemUserVarSampFields.grade":
		if e.complexity.SystemUserVarSampFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserVarSampFields.Grade(childComplexity), true

	case "SystemUserVarSampFields.id":
		if e.complexity.SystemUserVarSampFields.ID == nil {
			break
		}

		return e.complexity.SystemUserVarSampFields.ID(childComplexity), true

	case "SystemUserVarSampFields.user_state":
		if e.complexity.SystemUserVarSampFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserVarSampFields.UserState(childComplexity), true

	case "SystemUserVarSampFields.user_type":
		if e.complexity.SystemUserVarSampFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserVarSampFields.UserType(childComplexity), true

	case "SystemUserVarianceFields.audit_level":
		if e.complexity.SystemUserVarianceFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserVarianceFields.AuditLevel(childComplexity), true

	case "SystemUserVarianceFields.grade":
		if e.complexity.SystemUserVarianceFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserVarianceFields.Grade(childComplexity), true

	case "SystemUserVarianceFields.id":
		if e.complexity.SystemUserVarianceFields.ID == nil {
			break
		}

		return e.complexity.SystemUserVarianceFields.ID(childComplexity), true

	case "SystemUserVarianceFields.user_state":
		if e.complexity.SystemUserVarianceFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserVarianceFields.UserState(childComplexity), true

	case "SystemUserVarianceFields.user_type":
		if e.complexity.SystemUserVarianceFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserVarianceFields.UserType(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/common.graphqls", Input: `
"""
expression to compare columns of type _jsonb. All fields are combined with logical 'AND'.
"""
input JsonbComparisonExp {
	_eq: Jsonb
	_gt: Jsonb
	_gte: Jsonb
	_in: [Jsonb!]
	_is_null: Boolean
	_lt: Jsonb
	_lte: Jsonb
	_neq: Jsonb
	_nin: [Jsonb!]
}
"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input BigintComparisonExp {
	_eq: Bigint
	_gt: Bigint
	_gte: Bigint
	_in: [Bigint!]
	_is_null: Boolean
	_lt: Bigint
	_lte: Bigint
	_neq: Bigint
	_nin: [Bigint!]
}
"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input BooleanComparisonExp {
	_eq: Boolean
	_gt: Boolean
	_gte: Boolean
	_in: [Boolean!]
	_is_null: Boolean
	_lt: Boolean
	_lte: Boolean
	_neq: Boolean
	_nin: [Boolean!]
}
"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input IntComparisonExp {
	_eq: Int
	_gt: Int
	_gte: Int
	_in: [Int!]
	_is_null: Boolean
	_lt: Int
	_lte: Int
	_neq: Int
	_nin: [Int!]
}
"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input FloatComparisonExp{
	_eq: Float
	_gt: Float
	_gte: Float
	_in: [Float!]
	_is_null: Boolean
	_lt: Float
	_lte: Float
	_neq: Float
	_nin: [Float!]
}
"""
column ordering options
"""
enum OrderBy {
	"""
	in the ascending order, nulls last
	"""
	asc
	"""
	in the ascending order, nulls first
	"""
	asc_nulls_first
	"""
	in the ascending order, nulls last
	"""
	asc_nulls_last
	"""
	in the descending order, nulls first
	"""
	desc
	"""
	in the descending order, nulls first
	"""
	desc_nulls_first
	"""
	in the descending order, nulls last
	"""
	desc_nulls_last
}
"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input StringComparisonExp {
	_eq: String
	_gt: String
	_gte: String
	_ilike: String
	_in: [String!]
	_is_null: Boolean
	_like: String
	_lt: String
	_lte: String
	_neq: String
	_nilike: String
	_nin: [String!]
	_nlike: String
	_nsimilar: String
	_similar: String
}
"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input TimestamptzComparisonExp {
	_eq: Timestamptz
	_gt: Timestamptz
	_gte: Timestamptz
	_in: [Timestamptz!]
	_is_null: Boolean
	_lt: Timestamptz
	_lte: Timestamptz
	_neq: Timestamptz
	_nin: [Timestamptz!]
}
"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input NumericComparisonExp {
	_eq: Numeric
	_gt: Numeric
	_gte: Numeric
	_in: [Numeric!]
	_is_null: Boolean
	_lt: Numeric
	_lte: Numeric
	_neq: Numeric
	_nin: [Numeric!]
}
"""
expression to compare columns of type point. All fields are combined with logical 'AND'.
"""
input PointComparisonExp {
	_eq: Point
	_gt: Point
	_gte: Point
	_in: [Point!]
	_is_null: Boolean
	_lt: Point
	_lte: Point
	_neq: Point
	_nin: [Point!]
}
scalar Jsonb
scalar Bigint
scalar Timestamptz
scalar Point
scalar Numeric

`, BuiltIn: false},
	{Name: "graph/graphqls/department.graphqls", Input: `"""
部门
"""
type Department {
	"""
	ID
	"""
	id: Bigint!
	"""
	部门ID
	"""
	department_id: String!
	"""
	企业ID
	"""
	enterprise: Enterprise
	"""
	上级部门ID
	"""
	superior_department: Department
	"""
	部门名称
	"""
	department_name: String
	"""
	部门编号
	"""
	department_code: String
	"""
	部门类型
	"""
	department_category: Int
	"""
	排序
	"""
	internal_number: Int
	"""
	创建时间
	"""
	create_at: Timestamptz
	"""
	创建人
	"""
	create_by: String
	"""
	修改时间
	"""
	update_at: Timestamptz
	"""
	修改人
	"""
	update_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	是否删除
	"""
	is_delete: Boolean!
	"""
	备注
	"""
	remarks: String
}
"""
aggregated selection of "department"
"""
type DepartmentAggregate {
	aggregate: DepartmentAggregateFields
}
"""
aggregate fields of "department"
"""
type DepartmentAggregateFields {
	avg: DepartmentAvgFields
	count: Int
	max: DepartmentMaxFields
	min: DepartmentMinFields
	stddev: DepartmentStddevFields
	stddev_pop: DepartmentStddevPopFields
	stddev_samp: DepartmentStddevSampFields
	sum: DepartmentSumFields
	var_pop: DepartmentVarPopFields
	var_samp: DepartmentVarSampFields
	variance: DepartmentVarianceFields
}
"""
aggregate avg on columns of table "department"
"""
type DepartmentAvgFields {
	id: Bigint
	department_category: Int
	internal_number: Int
}
"""
aggregate max on columns of table "department"
"""
type DepartmentMaxFields {
	id: Bigint
	department_id: String
	enterprise_id: String
	superior_department_id: String
	department_name: String
	department_code: String
	department_category: Int
	internal_number: Int
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
	remarks: String
}
"""
aggregate min on columns of table "department"
"""
type DepartmentMinFields {
	id: Bigint
	department_id: String
	enterprise_id: String
	superior_department_id: String
	department_name: String
	department_code: String
	department_category: Int
	internal_number: Int
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
	remarks: String
}
"""
aggregate stddev on columns of table "department"
"""
type DepartmentStddevFields {
	id: Bigint
	department_category: Int
	internal_number: Int
}
"""
aggregate stddev_pop on columns of table "department"
"""
type DepartmentStddevPopFields {
	id: Bigint
	department_category: Int
	internal_number: Int
}
"""
aggregate stddev_samp on columns of table "department"
"""
type DepartmentStddevSampFields {
	id: Bigint
	department_category: Int
	internal_number: Int
}
"""
aggregate sum on columns of table "department"
"""
type DepartmentSumFields {
	id: Bigint
	department_category: Int
	internal_number: Int
}
"""
aggregate var_pop on columns of table "department"
"""
type DepartmentVarPopFields {
	id: Bigint
	department_category: Int
	internal_number: Int
}
"""
aggregate var_samp on columns of table "department"
"""
type DepartmentVarSampFields {
	id: Bigint
	department_category: Int
	internal_number: Int
}
"""
aggregate variance on columns of table "department"
"""
type DepartmentVarianceFields {
	id: Bigint
	department_category: Int
	internal_number: Int
}
"""
response of any mutation on the table "department"
"""
type DepartmentMutationResponse {
	affected_rows: Int!
	returning: [Department!]!
}
"""
ordering options when selecting data from "department"
"""
input DepartmentOrderBy {
	id: OrderBy
	department_id: OrderBy
	enterprise_id: OrderBy
	superior_department_id: OrderBy
	department_name: OrderBy
	department_code: OrderBy
	department_category: OrderBy
	internal_number: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	is_delete: OrderBy
	remarks: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'department'.
"""
input DepartmentBoolExp {
	_and: [DepartmentBoolExp]
	_not: DepartmentBoolExp
	_or: [DepartmentBoolExp]
	id: BigintComparisonExp
	department_id: StringComparisonExp
	enterprise_id: StringComparisonExp
	superior_department_id: StringComparisonExp
	department_name: StringComparisonExp
	department_code: StringComparisonExp
	department_category: IntComparisonExp
	internal_number: IntComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	is_delete: BooleanComparisonExp
	remarks: StringComparisonExp
}
"""
input type for inserting data into table "department"
"""
input DepartmentInsertInput {
	department_id: String!
	enterprise_id: String!
	superior_department_id: String
	department_name: String
	department_code: String
	department_category: Int
	internal_number: Int
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean!
	remarks: String
}
"""
input type for incrementing integer column in table "department"
"""
input DepartmentIncInput {
	id: Bigint
	department_category: Int
	internal_number: Int
}
"""
input type for updating data in table "department"
"""
input DepartmentSetInput {
	id: Bigint
	department_id: String
	enterprise_id: String
	superior_department_id: String
	department_name: String
	department_code: String
	department_category: Int
	internal_number: Int
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
	remarks: String
}
"""
可选select
"""
enum DepartmentSelectColumn {
	"""
	ID
	"""
	id
	"""
	部门ID
	"""
	department_id
	"""
	企业ID
	"""
	enterprise_id
	"""
	上级部门ID
	"""
	superior_department_id
	"""
	部门名称
	"""
	department_name
	"""
	部门编号
	"""
	department_code
	"""
	部门类型
	"""
	department_category
	"""
	排序
	"""
	internal_number
	"""
	创建时间
	"""
	create_at
	"""
	创建人
	"""
	create_by
	"""
	修改时间
	"""
	update_at
	"""
	修改人
	"""
	update_by
	"""
	删除时间
	"""
	delete_at
	"""
	删除人
	"""
	delete_by
	"""
	是否删除
	"""
	is_delete
	"""
	备注
	"""
	remarks
}
extend type Query {
	"""
	列表查询
	"""
	department(distinct_on: [DepartmentSelectColumn!], limit: Int, offset: Int, order_by: [DepartmentOrderBy!], where: DepartmentBoolExp): [Department!]!
	"""
	聚合查询
	"""
	department_aggregate(distinct_on: [DepartmentSelectColumn!], limit: Int, offset: Int, order_by: [DepartmentOrderBy!], where: DepartmentBoolExp): DepartmentAggregate!
	"""
	主键查询
	"""
	department_by_pk(id: Bigint!): Department!
	"""
	联合主键查询
	"""
	department_by_union_pk(department_id: String!): Department!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_department(where: DepartmentBoolExp!): DepartmentMutationResponse
	"""
	根据主键删除记录
	"""
	delete_department_by_pk(id: Bigint!): Department
	"""
	插入
	"""
	insert_department(objects: [DepartmentInsertInput!]!): DepartmentMutationResponse
	"""
	插入一条记录
	"""
	insert_department_one(objects: DepartmentInsertInput!): Department
	"""
	更新
	"""
	update_department(_inc: DepartmentIncInput, _set: DepartmentSetInput, where: DepartmentBoolExp!): DepartmentMutationResponse
	"""
	根据主键更新
	"""
	update_department_by_pk(_inc: DepartmentIncInput, _set: DepartmentSetInput, id: Bigint!): Department
	"""
	根据联合主键更新
	"""
	update_department_by_union_pk(_inc: DepartmentIncInput, _set: DepartmentSetInput, department_id: String!): Department
	"""
	根据联合主键删除记录
	"""
	delete_department_by_union_pk(department_id: String!): Department
}
`, BuiltIn: false},
	{Name: "graph/graphqls/enterprise.graphqls", Input: `"""
企业
"""
type Enterprise {
	"""
	ID
	"""
	id: Bigint!
	"""
	企业ID
	"""
	enterprise_id: String!
	"""
	上级企业ID
	"""
	superior_enterprise_id: String
	"""
	企业码
	"""
	enterprise_code: String
	"""
	企业名称
	"""
	enterprise_name: String
	"""
	企业级别
	"""
	enterprise_level: Int
	"""
	显示顺序
	"""
	display_number: Int
	"""
	企业地址
	"""
	enterprise_address: String
	"""
	经营范围
	"""
	business_scope: Int
	"""
	传真号码
	"""
	fax_number: String
	"""
	省份ID
	"""
	province_id: Bigint
	"""
	城市ID
	"""
	city_id: Bigint
	"""
	区域ID
	"""
	district_id: Bigint
	"""
	机构类别
	"""
	institution_category: Bigint
	"""
	经营许可证图片
	"""
	operating_license_photo: String
	"""
	营业执照图片
	"""
	business_license_photo: String
	"""
	营业执照发证日期
	"""
	business_license_issuance_date: Timestamptz
	"""
	营业执照到期日期
	"""
	business_license_expiry_date: Timestamptz
	"""
	企业性质
	"""
	enterprise_nature: Int
	"""
	企业法人代表
	"""
	legal_representative: String
	"""
	企业法人代表联系电话
	"""
	legal_representative_phone: String
	"""
	企业法人代表身份证-图片
	"""
	legal_representative_id_card_photo: String
	"""
	企业法人-身份证号码
	"""
	legal_representative_id_card: String
	"""
	委托代理人
	"""
	entrusted_agent: String
	"""
	委托代理人-电话号码
	"""
	entrusted_agent_phone: String
	"""
	委托代理人身份证图片
	"""
	entrusted_agent_id_card_photo: String
	"""
	委托代理人-身份证号码
	"""
	entrusted_agent_id_card: String
	"""
	组织机构代码(企业的营运证)
	"""
	organization_code: String
	"""
	组织机构代码证照片
	"""
	organization_code_certificate_photo: String
	"""
	内网更新时间
	"""
	update_time_in: Timestamptz
	"""
	业务办理扫描件照片
	"""
	business_photo: String
	"""
	是否黑名单
	"""
	is_black: Boolean!
	"""
	审核状态
	"""
	check_status: Int
	"""
	是否安装
	"""
	is_install: Boolean!
	"""
	是否录入完成
	"""
	is_input: Boolean!
	"""
	是否上传省厅
	"""
	is_upload_province: Boolean!
	"""
	记分
	"""
	score: Int
	"""
	所属大队ID
	"""
	brigade_id: String
	"""
	所属派出所ID
	"""
	police_station_id: String
	"""
	大队审核意见
	"""
	brigade_review_opinion: String
	"""
	大队审核时间
	"""
	brigade_review_time: Timestamptz
	"""
	大队审核人
	"""
	brigade_review_by: String
	"""
	协会审核意见
	"""
	association_review_opinion: String
	"""
	协会审核时间
	"""
	association_review_time: Timestamptz
	"""
	协会审核时间
	"""
	association_review_by: Timestamptz
	"""
	创建时间
	"""
	create_at: Timestamptz
	"""
	创建人
	"""
	create_by: String
	"""
	修改时间
	"""
	update_at: Timestamptz
	"""
	修改人
	"""
	update_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	备注
	"""
	remarks: String
	"""
	是否删除
	"""
	is_deleted: Boolean!
	"""
	是否重点企业
	"""
	is_key_point: Boolean!
	"""
	企业类型，1-普通企业，2-中信代理商，3-渣土车企业，4-混凝土企业，5-网约车企业,6-大队
	"""
	enterprise_type: Int
	"""
	是否目录库
	"""
	is_catalog: Boolean!
	"""
	企业状态(0正常，1暂停受理, 2清退)
	"""
	state: Int
	"""
	代理商ID
	"""
	proxy_enterprise_id: String
	"""
	是否试用期结果
	"""
	is_expire: Boolean!
	"""
	信用登记
	"""
	credit_level: Int
	"""
	信用登记备注
	"""
	credit_level_remark: String
}
"""
aggregated selection of "enterprise"
"""
type EnterpriseAggregate {
	aggregate: EnterpriseAggregateFields
}
"""
aggregate fields of "enterprise"
"""
type EnterpriseAggregateFields {
	avg: EnterpriseAvgFields
	count: Int
	max: EnterpriseMaxFields
	min: EnterpriseMinFields
	stddev: EnterpriseStddevFields
	stddev_pop: EnterpriseStddevPopFields
	stddev_samp: EnterpriseStddevSampFields
	sum: EnterpriseSumFields
	var_pop: EnterpriseVarPopFields
	var_samp: EnterpriseVarSampFields
	variance: EnterpriseVarianceFields
}
"""
aggregate avg on columns of table "enterprise"
"""
type EnterpriseAvgFields {
	id: Bigint
	enterprise_level: Int
	display_number: Int
	business_scope: Int
	province_id: Bigint
	city_id: Bigint
	district_id: Bigint
	institution_category: Bigint
	enterprise_nature: Int
	check_status: Int
	score: Int
	enterprise_type: Int
	state: Int
	credit_level: Int
}
"""
aggregate max on columns of table "enterprise"
"""
type EnterpriseMaxFields {
	id: Bigint
	enterprise_id: String
	superior_enterprise_id: String
	enterprise_code: String
	enterprise_name: String
	enterprise_level: Int
	display_number: Int
	enterprise_address: String
	business_scope: Int
	fax_number: String
	province_id: Bigint
	city_id: Bigint
	district_id: Bigint
	institution_category: Bigint
	operating_license_photo: String
	business_license_photo: String
	business_license_issuance_date: Timestamptz
	business_license_expiry_date: Timestamptz
	enterprise_nature: Int
	legal_representative: String
	legal_representative_phone: String
	legal_representative_id_card_photo: String
	legal_representative_id_card: String
	entrusted_agent: String
	entrusted_agent_phone: String
	entrusted_agent_id_card_photo: String
	entrusted_agent_id_card: String
	organization_code: String
	organization_code_certificate_photo: String
	update_time_in: Timestamptz
	business_photo: String
	is_black: Boolean
	check_status: Int
	is_install: Boolean
	is_input: Boolean
	is_upload_province: Boolean
	score: Int
	brigade_id: String
	police_station_id: String
	brigade_review_opinion: String
	brigade_review_time: Timestamptz
	brigade_review_by: String
	association_review_opinion: String
	association_review_time: Timestamptz
	association_review_by: Timestamptz
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	remarks: String
	is_deleted: Boolean
	is_key_point: Boolean
	enterprise_type: Int
	is_catalog: Boolean
	state: Int
	proxy_enterprise_id: String
	is_expire: Boolean
	credit_level: Int
	credit_level_remark: String
}
"""
aggregate min on columns of table "enterprise"
"""
type EnterpriseMinFields {
	id: Bigint
	enterprise_id: String
	superior_enterprise_id: String
	enterprise_code: String
	enterprise_name: String
	enterprise_level: Int
	display_number: Int
	enterprise_address: String
	business_scope: Int
	fax_number: String
	province_id: Bigint
	city_id: Bigint
	district_id: Bigint
	institution_category: Bigint
	operating_license_photo: String
	business_license_photo: String
	business_license_issuance_date: Timestamptz
	business_license_expiry_date: Timestamptz
	enterprise_nature: Int
	legal_representative: String
	legal_representative_phone: String
	legal_representative_id_card_photo: String
	legal_representative_id_card: String
	entrusted_agent: String
	entrusted_agent_phone: String
	entrusted_agent_id_card_photo: String
	entrusted_agent_id_card: String
	organization_code: String
	organization_code_certificate_photo: String
	update_time_in: Timestamptz
	business_photo: String
	is_black: Boolean
	check_status: Int
	is_install: Boolean
	is_input: Boolean
	is_upload_province: Boolean
	score: Int
	brigade_id: String
	police_station_id: String
	brigade_review_opinion: String
	brigade_review_time: Timestamptz
	brigade_review_by: String
	association_review_opinion: String
	association_review_time: Timestamptz
	association_review_by: Timestamptz
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	remarks: String
	is_deleted: Boolean
	is_key_point: Boolean
	enterprise_type: Int
	is_catalog: Boolean
	state: Int
	proxy_enterprise_id: String
	is_expire: Boolean
	credit_level: Int
	credit_level_remark: String
}
"""
aggregate stddev on columns of table "enterprise"
"""
type EnterpriseStddevFields {
	id: Bigint
	enterprise_level: Int
	display_number: Int
	business_scope: Int
	province_id: Bigint
	city_id: Bigint
	district_id: Bigint
	institution_category: Bigint
	enterprise_nature: Int
	check_status: Int
	score: Int
	enterprise_type: Int
	state: Int
	credit_level: Int
}
"""
aggregate stddev_pop on columns of table "enterprise"
"""
type EnterpriseStddevPopFields {
	id: Bigint
	enterprise_level: Int
	display_number: Int
	business_scope: Int
	province_id: Bigint
	city_id: Bigint
	district_id: Bigint
	institution_category: Bigint
	enterprise_nature: Int
	check_status: Int
	score: Int
	enterprise_type: Int
	state: Int
	credit_level: Int
}
"""
aggregate stddev_samp on columns of table "enterprise"
"""
type EnterpriseStddevSampFields {
	id: Bigint
	enterprise_level: Int
	display_number: Int
	business_scope: Int
	province_id: Bigint
	city_id: Bigint
	district_id: Bigint
	institution_category: Bigint
	enterprise_nature: Int
	check_status: Int
	score: Int
	enterprise_type: Int
	state: Int
	credit_level: Int
}
"""
aggregate sum on columns of table "enterprise"
"""
type EnterpriseSumFields {
	id: Bigint
	enterprise_level: Int
	display_number: Int
	business_scope: Int
	province_id: Bigint
	city_id: Bigint
	district_id: Bigint
	institution_category: Bigint
	enterprise_nature: Int
	check_status: Int
	score: Int
	enterprise_type: Int
	state: Int
	credit_level: Int
}
"""
aggregate var_pop on columns of table "enterprise"
"""
type EnterpriseVarPopFields {
	id: Bigint
	enterprise_level: Int
	display_number: Int
	business_scope: Int
	province_id: Bigint
	city_id: Bigint
	district_id: Bigint
	institution_category: Bigint
	enterprise_nature: Int
	check_status: Int
	score: Int
	enterprise_type: Int
	state: Int
	credit_level: Int
}
"""
aggregate var_samp on columns of table "enterprise"
"""
type EnterpriseVarSampFields {
	id: Bigint
	enterprise_level: Int
	display_number: Int
	business_scope: Int
	province_id: Bigint
	city_id: Bigint
	district_id: Bigint
	institution_category: Bigint
	enterprise_nature: Int
	check_status: Int
	score: Int
	enterprise_type: Int
	state: Int
	credit_level: Int
}
"""
aggregate variance on columns of table "enterprise"
"""
type EnterpriseVarianceFields {
	id: Bigint
	enterprise_level: Int
	display_number: Int
	business_scope: Int
	province_id: Bigint
	city_id: Bigint
	district_id: Bigint
	institution_category: Bigint
	enterprise_nature: Int
	check_status: Int
	score: Int
	enterprise_type: Int
	state: Int
	credit_level: Int
}
"""
response of any mutation on the table "enterprise"
"""
type EnterpriseMutationResponse {
	affected_rows: Int!
	returning: [Enterprise!]!
}
"""
ordering options when selecting data from "enterprise"
"""
input EnterpriseOrderBy {
	id: OrderBy
	enterprise_id: OrderBy
	superior_enterprise_id: OrderBy
	enterprise_code: OrderBy
	enterprise_name: OrderBy
	enterprise_level: OrderBy
	display_number: OrderBy
	enterprise_address: OrderBy
	business_scope: OrderBy
	fax_number: OrderBy
	province_id: OrderBy
	city_id: OrderBy
	district_id: OrderBy
	institution_category: OrderBy
	operating_license_photo: OrderBy
	business_license_photo: OrderBy
	business_license_issuance_date: OrderBy
	business_license_expiry_date: OrderBy
	enterprise_nature: OrderBy
	legal_representative: OrderBy
	legal_representative_phone: OrderBy
	legal_representative_id_card_photo: OrderBy
	legal_representative_id_card: OrderBy
	entrusted_agent: OrderBy
	entrusted_agent_phone: OrderBy
	entrusted_agent_id_card_photo: OrderBy
	entrusted_agent_id_card: OrderBy
	organization_code: OrderBy
	organization_code_certificate_photo: OrderBy
	update_time_in: OrderBy
	business_photo: OrderBy
	is_black: OrderBy
	check_status: OrderBy
	is_install: OrderBy
	is_input: OrderBy
	is_upload_province: OrderBy
	score: OrderBy
	brigade_id: OrderBy
	police_station_id: OrderBy
	brigade_review_opinion: OrderBy
	brigade_review_time: OrderBy
	brigade_review_by: OrderBy
	association_review_opinion: OrderBy
	association_review_time: OrderBy
	association_review_by: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	remarks: OrderBy
	is_deleted: OrderBy
	is_key_point: OrderBy
	enterprise_type: OrderBy
	is_catalog: OrderBy
	state: OrderBy
	proxy_enterprise_id: OrderBy
	is_expire: OrderBy
	credit_level: OrderBy
	credit_level_remark: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'enterprise'.
"""
input EnterpriseBoolExp {
	_and: [EnterpriseBoolExp]
	_not: EnterpriseBoolExp
	_or: [EnterpriseBoolExp]
	id: BigintComparisonExp
	enterprise_id: StringComparisonExp
	superior_enterprise_id: StringComparisonExp
	enterprise_code: StringComparisonExp
	enterprise_name: StringComparisonExp
	enterprise_level: IntComparisonExp
	display_number: IntComparisonExp
	enterprise_address: StringComparisonExp
	business_scope: IntComparisonExp
	fax_number: StringComparisonExp
	province_id: BigintComparisonExp
	city_id: BigintComparisonExp
	district_id: BigintComparisonExp
	institution_category: BigintComparisonExp
	operating_license_photo: StringComparisonExp
	business_license_photo: StringComparisonExp
	business_license_issuance_date: TimestamptzComparisonExp
	business_license_expiry_date: TimestamptzComparisonExp
	enterprise_nature: IntComparisonExp
	legal_representative: StringComparisonExp
	legal_representative_phone: StringComparisonExp
	legal_representative_id_card_photo: StringComparisonExp
	legal_representative_id_card: StringComparisonExp
	entrusted_agent: StringComparisonExp
	entrusted_agent_phone: StringComparisonExp
	entrusted_agent_id_card_photo: StringComparisonExp
	entrusted_agent_id_card: StringComparisonExp
	organization_code: StringComparisonExp
	organization_code_certificate_photo: StringComparisonExp
	update_time_in: TimestamptzComparisonExp
	business_photo: StringComparisonExp
	is_black: BooleanComparisonExp
	check_status: IntComparisonExp
	is_install: BooleanComparisonExp
	is_input: BooleanComparisonExp
	is_upload_province: BooleanComparisonExp
	score: IntComparisonExp
	brigade_id: StringComparisonExp
	police_station_id: StringComparisonExp
	brigade_review_opinion: StringComparisonExp
	brigade_review_time: TimestamptzComparisonExp
	brigade_review_by: StringComparisonExp
	association_review_opinion: StringComparisonExp
	association_review_time: TimestamptzComparisonExp
	association_review_by: TimestamptzComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	remarks: StringComparisonExp
	is_deleted: BooleanComparisonExp
	is_key_point: BooleanComparisonExp
	enterprise_type: IntComparisonExp
	is_catalog: BooleanComparisonExp
	state: IntComparisonExp
	proxy_enterprise_id: StringComparisonExp
	is_expire: BooleanComparisonExp
	credit_level: IntComparisonExp
	credit_level_remark: StringComparisonExp
}
"""
input type for inserting data into table "enterprise"
"""
input EnterpriseInsertInput {
	enterprise_id: String!
	superior_enterprise_id: String
	enterprise_code: String
	enterprise_name: String
	enterprise_level: Int
	display_number: Int
	enterprise_address: String
	business_scope: Int
	fax_number: String
	province_id: Bigint
	city_id: Bigint
	district_id: Bigint
	institution_category: Bigint
	operating_license_photo: String
	business_license_photo: String
	business_license_issuance_date: Timestamptz
	business_license_expiry_date: Timestamptz
	enterprise_nature: Int
	legal_representative: String
	legal_representative_phone: String
	legal_representative_id_card_photo: String
	legal_representative_id_card: String
	entrusted_agent: String
	entrusted_agent_phone: String
	entrusted_agent_id_card_photo: String
	entrusted_agent_id_card: String
	organization_code: String
	organization_code_certificate_photo: String
	update_time_in: Timestamptz
	business_photo: String
	is_black: Boolean!
	check_status: Int
	is_install: Boolean!
	is_input: Boolean!
	is_upload_province: Boolean!
	score: Int
	brigade_id: String
	police_station_id: String
	brigade_review_opinion: String
	brigade_review_time: Timestamptz
	brigade_review_by: String
	association_review_opinion: String
	association_review_time: Timestamptz
	association_review_by: Timestamptz
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	remarks: String
	is_deleted: Boolean!
	is_key_point: Boolean!
	enterprise_type: Int
	is_catalog: Boolean!
	state: Int
	proxy_enterprise_id: String
	is_expire: Boolean!
	credit_level: Int
	credit_level_remark: String
}
"""
input type for incrementing integer column in table "enterprise"
"""
input EnterpriseIncInput {
	id: Bigint
	enterprise_level: Int
	display_number: Int
	business_scope: Int
	province_id: Bigint
	city_id: Bigint
	district_id: Bigint
	institution_category: Bigint
	enterprise_nature: Int
	check_status: Int
	score: Int
	enterprise_type: Int
	state: Int
	credit_level: Int
}
"""
input type for updating data in table "enterprise"
"""
input EnterpriseSetInput {
	id: Bigint
	enterprise_id: String
	superior_enterprise_id: String
	enterprise_code: String
	enterprise_name: String
	enterprise_level: Int
	display_number: Int
	enterprise_address: String
	business_scope: Int
	fax_number: String
	province_id: Bigint
	city_id: Bigint
	district_id: Bigint
	institution_category: Bigint
	operating_license_photo: String
	business_license_photo: String
	business_license_issuance_date: Timestamptz
	business_license_expiry_date: Timestamptz
	enterprise_nature: Int
	legal_representative: String
	legal_representative_phone: String
	legal_representative_id_card_photo: String
	legal_representative_id_card: String
	entrusted_agent: String
	entrusted_agent_phone: String
	entrusted_agent_id_card_photo: String
	entrusted_agent_id_card: String
	organization_code: String
	organization_code_certificate_photo: String
	update_time_in: Timestamptz
	business_photo: String
	is_black: Boolean
	check_status: Int
	is_install: Boolean
	is_input: Boolean
	is_upload_province: Boolean
	score: Int
	brigade_id: String
	police_station_id: String
	brigade_review_opinion: String
	brigade_review_time: Timestamptz
	brigade_review_by: String
	association_review_opinion: String
	association_review_time: Timestamptz
	association_review_by: Timestamptz
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	remarks: String
	is_deleted: Boolean
	is_key_point: Boolean
	enterprise_type: Int
	is_catalog: Boolean
	state: Int
	proxy_enterprise_id: String
	is_expire: Boolean
	credit_level: Int
	credit_level_remark: String
}
"""
可选select
"""
enum EnterpriseSelectColumn {
	"""
	ID
	"""
	id
	"""
	企业ID
	"""
	enterprise_id
	"""
	上级企业ID
	"""
	superior_enterprise_id
	"""
	企业码
	"""
	enterprise_code
	"""
	企业名称
	"""
	enterprise_name
	"""
	企业级别
	"""
	enterprise_level
	"""
	显示顺序
	"""
	display_number
	"""
	企业地址
	"""
	enterprise_address
	"""
	经营范围
	"""
	business_scope
	"""
	传真号码
	"""
	fax_number
	"""
	省份ID
	"""
	province_id
	"""
	城市ID
	"""
	city_id
	"""
	区域ID
	"""
	district_id
	"""
	机构类别
	"""
	institution_category
	"""
	经营许可证图片
	"""
	operating_license_photo
	"""
	营业执照图片
	"""
	business_license_photo
	"""
	营业执照发证日期
	"""
	business_license_issuance_date
	"""
	营业执照到期日期
	"""
	business_license_expiry_date
	"""
	企业性质
	"""
	enterprise_nature
	"""
	企业法人代表
	"""
	legal_representative
	"""
	企业法人代表联系电话
	"""
	legal_representative_phone
	"""
	企业法人代表身份证-图片
	"""
	legal_representative_id_card_photo
	"""
	企业法人-身份证号码
	"""
	legal_representative_id_card
	"""
	委托代理人
	"""
	entrusted_agent
	"""
	委托代理人-电话号码
	"""
	entrusted_agent_phone
	"""
	委托代理人身份证图片
	"""
	entrusted_agent_id_card_photo
	"""
	委托代理人-身份证号码
	"""
	entrusted_agent_id_card
	"""
	组织机构代码(企业的营运证)
	"""
	organization_code
	"""
	组织机构代码证照片
	"""
	organization_code_certificate_photo
	"""
	内网更新时间
	"""
	update_time_in
	"""
	业务办理扫描件照片
	"""
	business_photo
	"""
	是否黑名单
	"""
	is_black
	"""
	审核状态
	"""
	check_status
	"""
	是否安装
	"""
	is_install
	"""
	是否录入完成
	"""
	is_input
	"""
	是否上传省厅
	"""
	is_upload_province
	"""
	记分
	"""
	score
	"""
	所属大队ID
	"""
	brigade_id
	"""
	所属派出所ID
	"""
	police_station_id
	"""
	大队审核意见
	"""
	brigade_review_opinion
	"""
	大队审核时间
	"""
	brigade_review_time
	"""
	大队审核人
	"""
	brigade_review_by
	"""
	协会审核意见
	"""
	association_review_opinion
	"""
	协会审核时间
	"""
	association_review_time
	"""
	协会审核时间
	"""
	association_review_by
	"""
	创建时间
	"""
	create_at
	"""
	创建人
	"""
	create_by
	"""
	修改时间
	"""
	update_at
	"""
	修改人
	"""
	update_by
	"""
	删除时间
	"""
	delete_at
	"""
	删除人
	"""
	delete_by
	"""
	备注
	"""
	remarks
	"""
	是否删除
	"""
	is_deleted
	"""
	是否重点企业
	"""
	is_key_point
	"""
	企业类型，1-普通企业，2-中信代理商，3-渣土车企业，4-混凝土企业，5-网约车企业,6-大队
	"""
	enterprise_type
	"""
	是否目录库
	"""
	is_catalog
	"""
	企业状态(0正常，1暂停受理, 2清退)
	"""
	state
	"""
	代理商ID
	"""
	proxy_enterprise_id
	"""
	是否试用期结果
	"""
	is_expire
	"""
	信用登记
	"""
	credit_level
	"""
	信用登记备注
	"""
	credit_level_remark
}
extend type Query {
	"""
	列表查询
	"""
	enterprise(distinct_on: [EnterpriseSelectColumn!], limit: Int, offset: Int, order_by: [EnterpriseOrderBy!], where: EnterpriseBoolExp): [Enterprise!]!
	"""
	聚合查询
	"""
	enterprise_aggregate(distinct_on: [EnterpriseSelectColumn!], limit: Int, offset: Int, order_by: [EnterpriseOrderBy!], where: EnterpriseBoolExp): EnterpriseAggregate!
	"""
	主键查询
	"""
	enterprise_by_pk(id: Bigint!): Enterprise!
	"""
	联合主键查询
	"""
	enterprise_by_union_pk(enterprise_id: String!): Enterprise!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_enterprise(where: EnterpriseBoolExp!): EnterpriseMutationResponse
	"""
	根据主键删除记录
	"""
	delete_enterprise_by_pk(id: Bigint!): Enterprise
	"""
	插入
	"""
	insert_enterprise(objects: [EnterpriseInsertInput!]!): EnterpriseMutationResponse
	"""
	插入一条记录
	"""
	insert_enterprise_one(objects: EnterpriseInsertInput!): Enterprise
	"""
	更新
	"""
	update_enterprise(_inc: EnterpriseIncInput, _set: EnterpriseSetInput, where: EnterpriseBoolExp!): EnterpriseMutationResponse
	"""
	根据主键更新
	"""
	update_enterprise_by_pk(_inc: EnterpriseIncInput, _set: EnterpriseSetInput, id: Bigint!): Enterprise
	"""
	根据联合主键更新
	"""
	update_enterprise_by_union_pk(_inc: EnterpriseIncInput, _set: EnterpriseSetInput, enterprise_id: String!): Enterprise
	"""
	根据联合主键删除记录
	"""
	delete_enterprise_by_union_pk(enterprise_id: String!): Enterprise
}
`, BuiltIn: false},
	{Name: "graph/graphqls/enterprise_alarm_send_police.graphqls", Input: `"""
企业报警发送交警联系人
"""
type EnterpriseAlarmSendPolice {
	"""
	 按指定方法生成                                  ( 主键                                 )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                             )
	"""
	enterprise_alarm_send_police_id: String!
	"""
	 所在企业id                                      ( enterprise_info表的enterprise_id )
	"""
	enterprise_id: String
	"""
	 企业名称                                        
	"""
	enterprise_name: String
	"""
	 企业联系人                                      
	"""
	enterprise_contact: String
	"""
	 企业联系电话                                    
	"""
	enterprise_phone: String
	"""
	 交警                                            
	"""
	police: String
	"""
	 交警联系电话                                    
	"""
	police_phone: String
	"""
	 交警所属部门                                    
	"""
	phlice_department: String
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id           )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id           )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id           )
	"""
	deleted_by: String
}
"""
aggregated selection of "enterprise_alarm_send_police"
"""
type EnterpriseAlarmSendPoliceAggregate {
	aggregate: EnterpriseAlarmSendPoliceAggregateFields
}
"""
aggregate fields of "enterprise_alarm_send_police"
"""
type EnterpriseAlarmSendPoliceAggregateFields {
	avg: EnterpriseAlarmSendPoliceAvgFields
	count: Int
	max: EnterpriseAlarmSendPoliceMaxFields
	min: EnterpriseAlarmSendPoliceMinFields
	stddev: EnterpriseAlarmSendPoliceStddevFields
	stddev_pop: EnterpriseAlarmSendPoliceStddevPopFields
	stddev_samp: EnterpriseAlarmSendPoliceStddevSampFields
	sum: EnterpriseAlarmSendPoliceSumFields
	var_pop: EnterpriseAlarmSendPoliceVarPopFields
	var_samp: EnterpriseAlarmSendPoliceVarSampFields
	variance: EnterpriseAlarmSendPoliceVarianceFields
}
"""
aggregate avg on columns of table "enterprise_alarm_send_police"
"""
type EnterpriseAlarmSendPoliceAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "enterprise_alarm_send_police"
"""
type EnterpriseAlarmSendPoliceMaxFields {
	id: Bigint
	enterprise_alarm_send_police_id: String
	enterprise_id: String
	enterprise_name: String
	enterprise_contact: String
	enterprise_phone: String
	police: String
	police_phone: String
	phlice_department: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "enterprise_alarm_send_police"
"""
type EnterpriseAlarmSendPoliceMinFields {
	id: Bigint
	enterprise_alarm_send_police_id: String
	enterprise_id: String
	enterprise_name: String
	enterprise_contact: String
	enterprise_phone: String
	police: String
	police_phone: String
	phlice_department: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "enterprise_alarm_send_police"
"""
type EnterpriseAlarmSendPoliceStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "enterprise_alarm_send_police"
"""
type EnterpriseAlarmSendPoliceStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "enterprise_alarm_send_police"
"""
type EnterpriseAlarmSendPoliceStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "enterprise_alarm_send_police"
"""
type EnterpriseAlarmSendPoliceSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "enterprise_alarm_send_police"
"""
type EnterpriseAlarmSendPoliceVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "enterprise_alarm_send_police"
"""
type EnterpriseAlarmSendPoliceVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "enterprise_alarm_send_police"
"""
type EnterpriseAlarmSendPoliceVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "enterprise_alarm_send_police"
"""
type EnterpriseAlarmSendPoliceMutationResponse {
	affected_rows: Int!
	returning: [EnterpriseAlarmSendPolice!]!
}
"""
ordering options when selecting data from "enterprise_alarm_send_police"
"""
input EnterpriseAlarmSendPoliceOrderBy {
	id: OrderBy
	enterprise_alarm_send_police_id: OrderBy
	enterprise_id: OrderBy
	enterprise_name: OrderBy
	enterprise_contact: OrderBy
	enterprise_phone: OrderBy
	police: OrderBy
	police_phone: OrderBy
	phlice_department: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'enterprise_alarm_send_police'.
"""
input EnterpriseAlarmSendPoliceBoolExp {
	_and: [EnterpriseAlarmSendPoliceBoolExp]
	_not: EnterpriseAlarmSendPoliceBoolExp
	_or: [EnterpriseAlarmSendPoliceBoolExp]
	id: BigintComparisonExp
	enterprise_alarm_send_police_id: StringComparisonExp
	enterprise_id: StringComparisonExp
	enterprise_name: StringComparisonExp
	enterprise_contact: StringComparisonExp
	enterprise_phone: StringComparisonExp
	police: StringComparisonExp
	police_phone: StringComparisonExp
	phlice_department: StringComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "enterprise_alarm_send_police"
"""
input EnterpriseAlarmSendPoliceInsertInput {
	enterprise_alarm_send_police_id: String!
	enterprise_id: String
	enterprise_name: String
	enterprise_contact: String
	enterprise_phone: String
	police: String
	police_phone: String
	phlice_department: String
	created_at: Timestamptz!
	created_by: String!
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "enterprise_alarm_send_police"
"""
input EnterpriseAlarmSendPoliceIncInput {
	id: Bigint
}
"""
input type for updating data in table "enterprise_alarm_send_police"
"""
input EnterpriseAlarmSendPoliceSetInput {
	id: Bigint
	enterprise_alarm_send_police_id: String
	enterprise_id: String
	enterprise_name: String
	enterprise_contact: String
	enterprise_phone: String
	police: String
	police_phone: String
	phlice_department: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum EnterpriseAlarmSendPoliceSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                                 )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                             )
	"""
	enterprise_alarm_send_police_id
	"""
	 所在企业id                                      ( enterprise_info表的enterprise_id )
	"""
	enterprise_id
	"""
	 企业名称                                        
	"""
	enterprise_name
	"""
	 企业联系人                                      
	"""
	enterprise_contact
	"""
	 企业联系电话                                    
	"""
	enterprise_phone
	"""
	 交警                                            
	"""
	police
	"""
	 交警联系电话                                    
	"""
	police_phone
	"""
	 交警所属部门                                    
	"""
	phlice_department
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id           )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id           )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id           )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	enterprise_alarm_send_police(distinct_on: [EnterpriseAlarmSendPoliceSelectColumn!], limit: Int, offset: Int, order_by: [EnterpriseAlarmSendPoliceOrderBy!], where: EnterpriseAlarmSendPoliceBoolExp): [EnterpriseAlarmSendPolice!]!
	"""
	聚合查询
	"""
	enterprise_alarm_send_police_aggregate(distinct_on: [EnterpriseAlarmSendPoliceSelectColumn!], limit: Int, offset: Int, order_by: [EnterpriseAlarmSendPoliceOrderBy!], where: EnterpriseAlarmSendPoliceBoolExp): EnterpriseAlarmSendPoliceAggregate!
	"""
	主键查询
	"""
	enterprise_alarm_send_police_by_pk(id: Bigint!): EnterpriseAlarmSendPolice!
	"""
	联合主键查询
	"""
	enterprise_alarm_send_police_by_union_pk(enterprise_alarm_send_police_id: String!): EnterpriseAlarmSendPolice!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_enterprise_alarm_send_police(where: EnterpriseAlarmSendPoliceBoolExp!): EnterpriseAlarmSendPoliceMutationResponse
	"""
	根据主键删除记录
	"""
	delete_enterprise_alarm_send_police_by_pk(id: Bigint!): EnterpriseAlarmSendPolice
	"""
	插入
	"""
	insert_enterprise_alarm_send_police(objects: [EnterpriseAlarmSendPoliceInsertInput!]!): EnterpriseAlarmSendPoliceMutationResponse
	"""
	插入一条记录
	"""
	insert_enterprise_alarm_send_police_one(objects: EnterpriseAlarmSendPoliceInsertInput!): EnterpriseAlarmSendPolice
	"""
	更新
	"""
	update_enterprise_alarm_send_police(_inc: EnterpriseAlarmSendPoliceIncInput, _set: EnterpriseAlarmSendPoliceSetInput, where: EnterpriseAlarmSendPoliceBoolExp!): EnterpriseAlarmSendPoliceMutationResponse
	"""
	根据主键更新
	"""
	update_enterprise_alarm_send_police_by_pk(_inc: EnterpriseAlarmSendPoliceIncInput, _set: EnterpriseAlarmSendPoliceSetInput, id: Bigint!): EnterpriseAlarmSendPolice
	"""
	根据联合主键更新
	"""
	update_enterprise_alarm_send_police_by_union_pk(_inc: EnterpriseAlarmSendPoliceIncInput, _set: EnterpriseAlarmSendPoliceSetInput, enterprise_alarm_send_police_id: String!): EnterpriseAlarmSendPolice
	"""
	根据联合主键删除记录
	"""
	delete_enterprise_alarm_send_police_by_union_pk(enterprise_alarm_send_police_id: String!): EnterpriseAlarmSendPolice
}
`, BuiltIn: false},
	{Name: "graph/graphqls/enterprise_contact.graphqls", Input: `"""
企业-联系人
"""
type EnterpriseContact {
	"""
	ID
	"""
	id: Bigint!
	"""
	联系人ID
	"""
	contact_id: String!
	"""
	企业ID
	"""
	enterprise_id: String!
	"""
	姓名
	"""
	name: String
	"""
	手机号码
	"""
	mobile: String
	"""
	固话
	"""
	phone: String
	"""
	邮箱
	"""
	email: String
	"""
	排序
	"""
	sort_num: Int
	"""
	创建时间
	"""
	create_at: Timestamptz!
	"""
	创建人
	"""
	create_by: String
	"""
	更新时间
	"""
	update_at: Timestamptz
	"""
	更新人
	"""
	update_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	是否删除
	"""
	is_delete: Boolean!
}
"""
aggregated selection of "enterprise_contact"
"""
type EnterpriseContactAggregate {
	aggregate: EnterpriseContactAggregateFields
}
"""
aggregate fields of "enterprise_contact"
"""
type EnterpriseContactAggregateFields {
	avg: EnterpriseContactAvgFields
	count: Int
	max: EnterpriseContactMaxFields
	min: EnterpriseContactMinFields
	stddev: EnterpriseContactStddevFields
	stddev_pop: EnterpriseContactStddevPopFields
	stddev_samp: EnterpriseContactStddevSampFields
	sum: EnterpriseContactSumFields
	var_pop: EnterpriseContactVarPopFields
	var_samp: EnterpriseContactVarSampFields
	variance: EnterpriseContactVarianceFields
}
"""
aggregate avg on columns of table "enterprise_contact"
"""
type EnterpriseContactAvgFields {
	id: Bigint
	sort_num: Int
}
"""
aggregate max on columns of table "enterprise_contact"
"""
type EnterpriseContactMaxFields {
	id: Bigint
	contact_id: String
	enterprise_id: String
	name: String
	mobile: String
	phone: String
	email: String
	sort_num: Int
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate min on columns of table "enterprise_contact"
"""
type EnterpriseContactMinFields {
	id: Bigint
	contact_id: String
	enterprise_id: String
	name: String
	mobile: String
	phone: String
	email: String
	sort_num: Int
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate stddev on columns of table "enterprise_contact"
"""
type EnterpriseContactStddevFields {
	id: Bigint
	sort_num: Int
}
"""
aggregate stddev_pop on columns of table "enterprise_contact"
"""
type EnterpriseContactStddevPopFields {
	id: Bigint
	sort_num: Int
}
"""
aggregate stddev_samp on columns of table "enterprise_contact"
"""
type EnterpriseContactStddevSampFields {
	id: Bigint
	sort_num: Int
}
"""
aggregate sum on columns of table "enterprise_contact"
"""
type EnterpriseContactSumFields {
	id: Bigint
	sort_num: Int
}
"""
aggregate var_pop on columns of table "enterprise_contact"
"""
type EnterpriseContactVarPopFields {
	id: Bigint
	sort_num: Int
}
"""
aggregate var_samp on columns of table "enterprise_contact"
"""
type EnterpriseContactVarSampFields {
	id: Bigint
	sort_num: Int
}
"""
aggregate variance on columns of table "enterprise_contact"
"""
type EnterpriseContactVarianceFields {
	id: Bigint
	sort_num: Int
}
"""
response of any mutation on the table "enterprise_contact"
"""
type EnterpriseContactMutationResponse {
	affected_rows: Int!
	returning: [EnterpriseContact!]!
}
"""
ordering options when selecting data from "enterprise_contact"
"""
input EnterpriseContactOrderBy {
	id: OrderBy
	contact_id: OrderBy
	enterprise_id: OrderBy
	name: OrderBy
	mobile: OrderBy
	phone: OrderBy
	email: OrderBy
	sort_num: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	is_delete: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'enterprise_contact'.
"""
input EnterpriseContactBoolExp {
	_and: [EnterpriseContactBoolExp]
	_not: EnterpriseContactBoolExp
	_or: [EnterpriseContactBoolExp]
	id: BigintComparisonExp
	contact_id: StringComparisonExp
	enterprise_id: StringComparisonExp
	name: StringComparisonExp
	mobile: StringComparisonExp
	phone: StringComparisonExp
	email: StringComparisonExp
	sort_num: IntComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	is_delete: BooleanComparisonExp
}
"""
input type for inserting data into table "enterprise_contact"
"""
input EnterpriseContactInsertInput {
	contact_id: String!
	enterprise_id: String!
	name: String
	mobile: String
	phone: String
	email: String
	sort_num: Int
	create_at: Timestamptz!
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean!
}
"""
input type for incrementing integer column in table "enterprise_contact"
"""
input EnterpriseContactIncInput {
	id: Bigint
	sort_num: Int
}
"""
input type for updating data in table "enterprise_contact"
"""
input EnterpriseContactSetInput {
	id: Bigint
	contact_id: String
	enterprise_id: String
	name: String
	mobile: String
	phone: String
	email: String
	sort_num: Int
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
可选select
"""
enum EnterpriseContactSelectColumn {
	"""
	ID
	"""
	id
	"""
	联系人ID
	"""
	contact_id
	"""
	企业ID
	"""
	enterprise_id
	"""
	姓名
	"""
	name
	"""
	手机号码
	"""
	mobile
	"""
	固话
	"""
	phone
	"""
	邮箱
	"""
	email
	"""
	排序
	"""
	sort_num
	"""
	创建时间
	"""
	create_at
	"""
	创建人
	"""
	create_by
	"""
	更新时间
	"""
	update_at
	"""
	更新人
	"""
	update_by
	"""
	删除时间
	"""
	delete_at
	"""
	删除人
	"""
	delete_by
	"""
	是否删除
	"""
	is_delete
}
extend type Query {
	"""
	列表查询
	"""
	enterprise_contact(distinct_on: [EnterpriseContactSelectColumn!], limit: Int, offset: Int, order_by: [EnterpriseContactOrderBy!], where: EnterpriseContactBoolExp): [EnterpriseContact!]!
	"""
	聚合查询
	"""
	enterprise_contact_aggregate(distinct_on: [EnterpriseContactSelectColumn!], limit: Int, offset: Int, order_by: [EnterpriseContactOrderBy!], where: EnterpriseContactBoolExp): EnterpriseContactAggregate!
	"""
	主键查询
	"""
	enterprise_contact_by_pk(id: Bigint!): EnterpriseContact!
	"""
	联合主键查询
	"""
	enterprise_contact_by_union_pk(contact_id: String!): EnterpriseContact!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_enterprise_contact(where: EnterpriseContactBoolExp!): EnterpriseContactMutationResponse
	"""
	根据主键删除记录
	"""
	delete_enterprise_contact_by_pk(id: Bigint!): EnterpriseContact
	"""
	插入
	"""
	insert_enterprise_contact(objects: [EnterpriseContactInsertInput!]!): EnterpriseContactMutationResponse
	"""
	插入一条记录
	"""
	insert_enterprise_contact_one(objects: EnterpriseContactInsertInput!): EnterpriseContact
	"""
	更新
	"""
	update_enterprise_contact(_inc: EnterpriseContactIncInput, _set: EnterpriseContactSetInput, where: EnterpriseContactBoolExp!): EnterpriseContactMutationResponse
	"""
	根据主键更新
	"""
	update_enterprise_contact_by_pk(_inc: EnterpriseContactIncInput, _set: EnterpriseContactSetInput, id: Bigint!): EnterpriseContact
	"""
	根据联合主键更新
	"""
	update_enterprise_contact_by_union_pk(_inc: EnterpriseContactIncInput, _set: EnterpriseContactSetInput, contact_id: String!): EnterpriseContact
	"""
	根据联合主键删除记录
	"""
	delete_enterprise_contact_by_union_pk(contact_id: String!): EnterpriseContact
}
`, BuiltIn: false},
	{Name: "graph/graphqls/enterprise_muck_trunk.graphqls", Input: `"""
渣土车企业
"""
type EnterpriseMuckTrunk {
	"""
	ID
	"""
	id: Bigint!
	"""
	渣土车企业ID
	"""
	enterprise_muck_trunk_id: String!
	"""
	企业ID
	"""
	enterprise_id: String!
	"""
	企业管理人
	"""
	company_manager: String
	"""
	企业管理人联系电话
	"""
	company_manager_phone: String
	"""
	企业管理人身份证
	"""
	company_manager_id_card: String
	"""
	企业安全管理人
	"""
	company_safe_manager: String
	"""
	企业安全管理人联系电话
	"""
	company_safe_manger_phone: String
	"""
	企业安全管理人身份证
	"""
	company_safe_manager_id_card: String
	"""
	道路运输证号
	"""
	road_license: String
	"""
	道路运输证图片地址
	"""
	road_license_photo: String
	"""
	办公场所地址
	"""
	office_address: String
	"""
	办公场所面积
	"""
	office_area: String
	"""
	办公场所照片
	"""
	office_photo: String
	"""
	停车场地址
	"""
	parking_address: String
	"""
	停车场面积
	"""
	parking_area: String
	"""
	单停车位面积
	"""
	parking_single_area: String
	"""
	新型渣土车购置数
	"""
	smart_car_count: Bigint
	"""
	是否继续运力增加
	"""
	is_transport_add: Boolean!
	"""
	县级是否审核
	"""
	county_check_state: Boolean!
	"""
	市级是否审核
	"""
	city_check_state: Boolean!
	"""
	是否允许生成与编号
	"""
	allow_generate_preview_num: Boolean!
	"""
	承诺书地址
	"""
	promise_book_url: String
	"""
	承诺书-备注
	"""
	promise_remark: String
	"""
	企业类型（1.A类 2.B类 3.C类 4.D类 5.E类）
	"""
	transport_type: Int
	"""
	路线牌工作相关规定承诺书照片
	"""
	routeline_card_promise_photo: String
	"""
	运输主题责任人承诺书照片
	"""
	transport_liable_promise_photo: String
	"""
	是否a类企业
	"""
	is_type_a: Boolean!
	"""
	是否b类企业
	"""
	is_type_b: Boolean!
	"""
	是否c类企业
	"""
	is_type_c: Boolean!
	"""
	是否d类企业
	"""
	is_type_d: Boolean!
	"""
	是否e类企业
	"""
	is_type_e: Boolean!
	"""
	创建时间
	"""
	create_at: Timestamptz!
	"""
	创建人
	"""
	create_by: String
	"""
	更新时间
	"""
	update_at: Timestamptz
	"""
	更新人
	"""
	update_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	是否删除
	"""
	is_delete: Boolean!
}
"""
aggregated selection of "enterprise_muck_trunk"
"""
type EnterpriseMuckTrunkAggregate {
	aggregate: EnterpriseMuckTrunkAggregateFields
}
"""
aggregate fields of "enterprise_muck_trunk"
"""
type EnterpriseMuckTrunkAggregateFields {
	avg: EnterpriseMuckTrunkAvgFields
	count: Int
	max: EnterpriseMuckTrunkMaxFields
	min: EnterpriseMuckTrunkMinFields
	stddev: EnterpriseMuckTrunkStddevFields
	stddev_pop: EnterpriseMuckTrunkStddevPopFields
	stddev_samp: EnterpriseMuckTrunkStddevSampFields
	sum: EnterpriseMuckTrunkSumFields
	var_pop: EnterpriseMuckTrunkVarPopFields
	var_samp: EnterpriseMuckTrunkVarSampFields
	variance: EnterpriseMuckTrunkVarianceFields
}
"""
aggregate avg on columns of table "enterprise_muck_trunk"
"""
type EnterpriseMuckTrunkAvgFields {
	id: Bigint
	smart_car_count: Bigint
	transport_type: Int
}
"""
aggregate max on columns of table "enterprise_muck_trunk"
"""
type EnterpriseMuckTrunkMaxFields {
	id: Bigint
	enterprise_muck_trunk_id: String
	enterprise_id: String
	company_manager: String
	company_manager_phone: String
	company_manager_id_card: String
	company_safe_manager: String
	company_safe_manger_phone: String
	company_safe_manager_id_card: String
	road_license: String
	road_license_photo: String
	office_address: String
	office_area: String
	office_photo: String
	parking_address: String
	parking_area: String
	parking_single_area: String
	smart_car_count: Bigint
	is_transport_add: Boolean
	county_check_state: Boolean
	city_check_state: Boolean
	allow_generate_preview_num: Boolean
	promise_book_url: String
	promise_remark: String
	transport_type: Int
	routeline_card_promise_photo: String
	transport_liable_promise_photo: String
	is_type_a: Boolean
	is_type_b: Boolean
	is_type_c: Boolean
	is_type_d: Boolean
	is_type_e: Boolean
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate min on columns of table "enterprise_muck_trunk"
"""
type EnterpriseMuckTrunkMinFields {
	id: Bigint
	enterprise_muck_trunk_id: String
	enterprise_id: String
	company_manager: String
	company_manager_phone: String
	company_manager_id_card: String
	company_safe_manager: String
	company_safe_manger_phone: String
	company_safe_manager_id_card: String
	road_license: String
	road_license_photo: String
	office_address: String
	office_area: String
	office_photo: String
	parking_address: String
	parking_area: String
	parking_single_area: String
	smart_car_count: Bigint
	is_transport_add: Boolean
	county_check_state: Boolean
	city_check_state: Boolean
	allow_generate_preview_num: Boolean
	promise_book_url: String
	promise_remark: String
	transport_type: Int
	routeline_card_promise_photo: String
	transport_liable_promise_photo: String
	is_type_a: Boolean
	is_type_b: Boolean
	is_type_c: Boolean
	is_type_d: Boolean
	is_type_e: Boolean
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate stddev on columns of table "enterprise_muck_trunk"
"""
type EnterpriseMuckTrunkStddevFields {
	id: Bigint
	smart_car_count: Bigint
	transport_type: Int
}
"""
aggregate stddev_pop on columns of table "enterprise_muck_trunk"
"""
type EnterpriseMuckTrunkStddevPopFields {
	id: Bigint
	smart_car_count: Bigint
	transport_type: Int
}
"""
aggregate stddev_samp on columns of table "enterprise_muck_trunk"
"""
type EnterpriseMuckTrunkStddevSampFields {
	id: Bigint
	smart_car_count: Bigint
	transport_type: Int
}
"""
aggregate sum on columns of table "enterprise_muck_trunk"
"""
type EnterpriseMuckTrunkSumFields {
	id: Bigint
	smart_car_count: Bigint
	transport_type: Int
}
"""
aggregate var_pop on columns of table "enterprise_muck_trunk"
"""
type EnterpriseMuckTrunkVarPopFields {
	id: Bigint
	smart_car_count: Bigint
	transport_type: Int
}
"""
aggregate var_samp on columns of table "enterprise_muck_trunk"
"""
type EnterpriseMuckTrunkVarSampFields {
	id: Bigint
	smart_car_count: Bigint
	transport_type: Int
}
"""
aggregate variance on columns of table "enterprise_muck_trunk"
"""
type EnterpriseMuckTrunkVarianceFields {
	id: Bigint
	smart_car_count: Bigint
	transport_type: Int
}
"""
response of any mutation on the table "enterprise_muck_trunk"
"""
type EnterpriseMuckTrunkMutationResponse {
	affected_rows: Int!
	returning: [EnterpriseMuckTrunk!]!
}
"""
ordering options when selecting data from "enterprise_muck_trunk"
"""
input EnterpriseMuckTrunkOrderBy {
	id: OrderBy
	enterprise_muck_trunk_id: OrderBy
	enterprise_id: OrderBy
	company_manager: OrderBy
	company_manager_phone: OrderBy
	company_manager_id_card: OrderBy
	company_safe_manager: OrderBy
	company_safe_manger_phone: OrderBy
	company_safe_manager_id_card: OrderBy
	road_license: OrderBy
	road_license_photo: OrderBy
	office_address: OrderBy
	office_area: OrderBy
	office_photo: OrderBy
	parking_address: OrderBy
	parking_area: OrderBy
	parking_single_area: OrderBy
	smart_car_count: OrderBy
	is_transport_add: OrderBy
	county_check_state: OrderBy
	city_check_state: OrderBy
	allow_generate_preview_num: OrderBy
	promise_book_url: OrderBy
	promise_remark: OrderBy
	transport_type: OrderBy
	routeline_card_promise_photo: OrderBy
	transport_liable_promise_photo: OrderBy
	is_type_a: OrderBy
	is_type_b: OrderBy
	is_type_c: OrderBy
	is_type_d: OrderBy
	is_type_e: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	is_delete: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'enterprise_muck_trunk'.
"""
input EnterpriseMuckTrunkBoolExp {
	_and: [EnterpriseMuckTrunkBoolExp]
	_not: EnterpriseMuckTrunkBoolExp
	_or: [EnterpriseMuckTrunkBoolExp]
	id: BigintComparisonExp
	enterprise_muck_trunk_id: StringComparisonExp
	enterprise_id: StringComparisonExp
	company_manager: StringComparisonExp
	company_manager_phone: StringComparisonExp
	company_manager_id_card: StringComparisonExp
	company_safe_manager: StringComparisonExp
	company_safe_manger_phone: StringComparisonExp
	company_safe_manager_id_card: StringComparisonExp
	road_license: StringComparisonExp
	road_license_photo: StringComparisonExp
	office_address: StringComparisonExp
	office_area: StringComparisonExp
	office_photo: StringComparisonExp
	parking_address: StringComparisonExp
	parking_area: StringComparisonExp
	parking_single_area: StringComparisonExp
	smart_car_count: BigintComparisonExp
	is_transport_add: BooleanComparisonExp
	county_check_state: BooleanComparisonExp
	city_check_state: BooleanComparisonExp
	allow_generate_preview_num: BooleanComparisonExp
	promise_book_url: StringComparisonExp
	promise_remark: StringComparisonExp
	transport_type: IntComparisonExp
	routeline_card_promise_photo: StringComparisonExp
	transport_liable_promise_photo: StringComparisonExp
	is_type_a: BooleanComparisonExp
	is_type_b: BooleanComparisonExp
	is_type_c: BooleanComparisonExp
	is_type_d: BooleanComparisonExp
	is_type_e: BooleanComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	is_delete: BooleanComparisonExp
}
"""
input type for inserting data into table "enterprise_muck_trunk"
"""
input EnterpriseMuckTrunkInsertInput {
	enterprise_muck_trunk_id: String!
	enterprise_id: String!
	company_manager: String
	company_manager_phone: String
	company_manager_id_card: String
	company_safe_manager: String
	company_safe_manger_phone: String
	company_safe_manager_id_card: String
	road_license: String
	road_license_photo: String
	office_address: String
	office_area: String
	office_photo: String
	parking_address: String
	parking_area: String
	parking_single_area: String
	smart_car_count: Bigint
	is_transport_add: Boolean!
	county_check_state: Boolean!
	city_check_state: Boolean!
	allow_generate_preview_num: Boolean!
	promise_book_url: String
	promise_remark: String
	transport_type: Int
	routeline_card_promise_photo: String
	transport_liable_promise_photo: String
	is_type_a: Boolean!
	is_type_b: Boolean!
	is_type_c: Boolean!
	is_type_d: Boolean!
	is_type_e: Boolean!
	create_at: Timestamptz!
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean!
}
"""
input type for incrementing integer column in table "enterprise_muck_trunk"
"""
input EnterpriseMuckTrunkIncInput {
	id: Bigint
	smart_car_count: Bigint
	transport_type: Int
}
"""
input type for updating data in table "enterprise_muck_trunk"
"""
input EnterpriseMuckTrunkSetInput {
	id: Bigint
	enterprise_muck_trunk_id: String
	enterprise_id: String
	company_manager: String
	company_manager_phone: String
	company_manager_id_card: String
	company_safe_manager: String
	company_safe_manger_phone: String
	company_safe_manager_id_card: String
	road_license: String
	road_license_photo: String
	office_address: String
	office_area: String
	office_photo: String
	parking_address: String
	parking_area: String
	parking_single_area: String
	smart_car_count: Bigint
	is_transport_add: Boolean
	county_check_state: Boolean
	city_check_state: Boolean
	allow_generate_preview_num: Boolean
	promise_book_url: String
	promise_remark: String
	transport_type: Int
	routeline_card_promise_photo: String
	transport_liable_promise_photo: String
	is_type_a: Boolean
	is_type_b: Boolean
	is_type_c: Boolean
	is_type_d: Boolean
	is_type_e: Boolean
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
可选select
"""
enum EnterpriseMuckTrunkSelectColumn {
	"""
	ID
	"""
	id
	"""
	渣土车企业ID
	"""
	enterprise_muck_trunk_id
	"""
	企业ID
	"""
	enterprise_id
	"""
	企业管理人
	"""
	company_manager
	"""
	企业管理人联系电话
	"""
	company_manager_phone
	"""
	企业管理人身份证
	"""
	company_manager_id_card
	"""
	企业安全管理人
	"""
	company_safe_manager
	"""
	企业安全管理人联系电话
	"""
	company_safe_manger_phone
	"""
	企业安全管理人身份证
	"""
	company_safe_manager_id_card
	"""
	道路运输证号
	"""
	road_license
	"""
	道路运输证图片地址
	"""
	road_license_photo
	"""
	办公场所地址
	"""
	office_address
	"""
	办公场所面积
	"""
	office_area
	"""
	办公场所照片
	"""
	office_photo
	"""
	停车场地址
	"""
	parking_address
	"""
	停车场面积
	"""
	parking_area
	"""
	单停车位面积
	"""
	parking_single_area
	"""
	新型渣土车购置数
	"""
	smart_car_count
	"""
	是否继续运力增加
	"""
	is_transport_add
	"""
	县级是否审核
	"""
	county_check_state
	"""
	市级是否审核
	"""
	city_check_state
	"""
	是否允许生成与编号
	"""
	allow_generate_preview_num
	"""
	承诺书地址
	"""
	promise_book_url
	"""
	承诺书-备注
	"""
	promise_remark
	"""
	企业类型（1.A类 2.B类 3.C类 4.D类 5.E类）
	"""
	transport_type
	"""
	路线牌工作相关规定承诺书照片
	"""
	routeline_card_promise_photo
	"""
	运输主题责任人承诺书照片
	"""
	transport_liable_promise_photo
	"""
	是否a类企业
	"""
	is_type_a
	"""
	是否b类企业
	"""
	is_type_b
	"""
	是否c类企业
	"""
	is_type_c
	"""
	是否d类企业
	"""
	is_type_d
	"""
	是否e类企业
	"""
	is_type_e
	"""
	创建时间
	"""
	create_at
	"""
	创建人
	"""
	create_by
	"""
	更新时间
	"""
	update_at
	"""
	更新人
	"""
	update_by
	"""
	删除时间
	"""
	delete_at
	"""
	删除人
	"""
	delete_by
	"""
	是否删除
	"""
	is_delete
}
extend type Query {
	"""
	列表查询
	"""
	enterprise_muck_trunk(distinct_on: [EnterpriseMuckTrunkSelectColumn!], limit: Int, offset: Int, order_by: [EnterpriseMuckTrunkOrderBy!], where: EnterpriseMuckTrunkBoolExp): [EnterpriseMuckTrunk!]!
	"""
	聚合查询
	"""
	enterprise_muck_trunk_aggregate(distinct_on: [EnterpriseMuckTrunkSelectColumn!], limit: Int, offset: Int, order_by: [EnterpriseMuckTrunkOrderBy!], where: EnterpriseMuckTrunkBoolExp): EnterpriseMuckTrunkAggregate!
	"""
	主键查询
	"""
	enterprise_muck_trunk_by_pk(id: Bigint!): EnterpriseMuckTrunk!
	"""
	联合主键查询
	"""
	enterprise_muck_trunk_by_union_pk(enterprise_muck_trunk_id: String!): EnterpriseMuckTrunk!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_enterprise_muck_trunk(where: EnterpriseMuckTrunkBoolExp!): EnterpriseMuckTrunkMutationResponse
	"""
	根据主键删除记录
	"""
	delete_enterprise_muck_trunk_by_pk(id: Bigint!): EnterpriseMuckTrunk
	"""
	插入
	"""
	insert_enterprise_muck_trunk(objects: [EnterpriseMuckTrunkInsertInput!]!): EnterpriseMuckTrunkMutationResponse
	"""
	插入一条记录
	"""
	insert_enterprise_muck_trunk_one(objects: EnterpriseMuckTrunkInsertInput!): EnterpriseMuckTrunk
	"""
	更新
	"""
	update_enterprise_muck_trunk(_inc: EnterpriseMuckTrunkIncInput, _set: EnterpriseMuckTrunkSetInput, where: EnterpriseMuckTrunkBoolExp!): EnterpriseMuckTrunkMutationResponse
	"""
	根据主键更新
	"""
	update_enterprise_muck_trunk_by_pk(_inc: EnterpriseMuckTrunkIncInput, _set: EnterpriseMuckTrunkSetInput, id: Bigint!): EnterpriseMuckTrunk
	"""
	根据联合主键更新
	"""
	update_enterprise_muck_trunk_by_union_pk(_inc: EnterpriseMuckTrunkIncInput, _set: EnterpriseMuckTrunkSetInput, enterprise_muck_trunk_id: String!): EnterpriseMuckTrunk
	"""
	根据联合主键删除记录
	"""
	delete_enterprise_muck_trunk_by_union_pk(enterprise_muck_trunk_id: String!): EnterpriseMuckTrunk
}
`, BuiltIn: false},
	{Name: "graph/graphqls/enterprise_score_log.graphqls", Input: `"""
企业扣分日志表
"""
type EnterpriseScoreLog {
	"""
	ID
	"""
	id: Bigint!
	"""
	企业扣分日志表ID
	"""
	log_id: String!
	"""
	企业ID
	"""
	enterprise_id: String!
	"""
	当前分数
	"""
	current_score: Int!
	"""
	扣分分值
	"""
	add_score: Int!
	"""
	扣分内容
	"""
	content: String!
	"""
	相关文件url
	"""
	file_url: String!
	"""
	扣分项ID
	"""
	score_set_id: String!
	"""
	创建时间
	"""
	create_at: Timestamptz!
	"""
	创建人
	"""
	create_by: String
	"""
	更新时间
	"""
	update_at: Timestamptz
	"""
	更新人
	"""
	update_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	是否删除
	"""
	is_delete: Boolean!
}
"""
aggregated selection of "enterprise_score_log"
"""
type EnterpriseScoreLogAggregate {
	aggregate: EnterpriseScoreLogAggregateFields
}
"""
aggregate fields of "enterprise_score_log"
"""
type EnterpriseScoreLogAggregateFields {
	avg: EnterpriseScoreLogAvgFields
	count: Int
	max: EnterpriseScoreLogMaxFields
	min: EnterpriseScoreLogMinFields
	stddev: EnterpriseScoreLogStddevFields
	stddev_pop: EnterpriseScoreLogStddevPopFields
	stddev_samp: EnterpriseScoreLogStddevSampFields
	sum: EnterpriseScoreLogSumFields
	var_pop: EnterpriseScoreLogVarPopFields
	var_samp: EnterpriseScoreLogVarSampFields
	variance: EnterpriseScoreLogVarianceFields
}
"""
aggregate avg on columns of table "enterprise_score_log"
"""
type EnterpriseScoreLogAvgFields {
	id: Bigint
	current_score: Int
	add_score: Int
}
"""
aggregate max on columns of table "enterprise_score_log"
"""
type EnterpriseScoreLogMaxFields {
	id: Bigint
	log_id: String
	enterprise_id: String
	current_score: Int
	add_score: Int
	content: String
	file_url: String
	score_set_id: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate min on columns of table "enterprise_score_log"
"""
type EnterpriseScoreLogMinFields {
	id: Bigint
	log_id: String
	enterprise_id: String
	current_score: Int
	add_score: Int
	content: String
	file_url: String
	score_set_id: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate stddev on columns of table "enterprise_score_log"
"""
type EnterpriseScoreLogStddevFields {
	id: Bigint
	current_score: Int
	add_score: Int
}
"""
aggregate stddev_pop on columns of table "enterprise_score_log"
"""
type EnterpriseScoreLogStddevPopFields {
	id: Bigint
	current_score: Int
	add_score: Int
}
"""
aggregate stddev_samp on columns of table "enterprise_score_log"
"""
type EnterpriseScoreLogStddevSampFields {
	id: Bigint
	current_score: Int
	add_score: Int
}
"""
aggregate sum on columns of table "enterprise_score_log"
"""
type EnterpriseScoreLogSumFields {
	id: Bigint
	current_score: Int
	add_score: Int
}
"""
aggregate var_pop on columns of table "enterprise_score_log"
"""
type EnterpriseScoreLogVarPopFields {
	id: Bigint
	current_score: Int
	add_score: Int
}
"""
aggregate var_samp on columns of table "enterprise_score_log"
"""
type EnterpriseScoreLogVarSampFields {
	id: Bigint
	current_score: Int
	add_score: Int
}
"""
aggregate variance on columns of table "enterprise_score_log"
"""
type EnterpriseScoreLogVarianceFields {
	id: Bigint
	current_score: Int
	add_score: Int
}
"""
response of any mutation on the table "enterprise_score_log"
"""
type EnterpriseScoreLogMutationResponse {
	affected_rows: Int!
	returning: [EnterpriseScoreLog!]!
}
"""
ordering options when selecting data from "enterprise_score_log"
"""
input EnterpriseScoreLogOrderBy {
	id: OrderBy
	log_id: OrderBy
	enterprise_id: OrderBy
	current_score: OrderBy
	add_score: OrderBy
	content: OrderBy
	file_url: OrderBy
	score_set_id: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	is_delete: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'enterprise_score_log'.
"""
input EnterpriseScoreLogBoolExp {
	_and: [EnterpriseScoreLogBoolExp]
	_not: EnterpriseScoreLogBoolExp
	_or: [EnterpriseScoreLogBoolExp]
	id: BigintComparisonExp
	log_id: StringComparisonExp
	enterprise_id: StringComparisonExp
	current_score: IntComparisonExp
	add_score: IntComparisonExp
	content: StringComparisonExp
	file_url: StringComparisonExp
	score_set_id: StringComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	is_delete: BooleanComparisonExp
}
"""
input type for inserting data into table "enterprise_score_log"
"""
input EnterpriseScoreLogInsertInput {
	log_id: String!
	enterprise_id: String!
	current_score: Int!
	add_score: Int!
	content: String!
	file_url: String!
	score_set_id: String!
	create_at: Timestamptz!
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean!
}
"""
input type for incrementing integer column in table "enterprise_score_log"
"""
input EnterpriseScoreLogIncInput {
	id: Bigint
	current_score: Int
	add_score: Int
}
"""
input type for updating data in table "enterprise_score_log"
"""
input EnterpriseScoreLogSetInput {
	id: Bigint
	log_id: String
	enterprise_id: String
	current_score: Int
	add_score: Int
	content: String
	file_url: String
	score_set_id: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
可选select
"""
enum EnterpriseScoreLogSelectColumn {
	"""
	ID
	"""
	id
	"""
	企业扣分日志表ID
	"""
	log_id
	"""
	企业ID
	"""
	enterprise_id
	"""
	当前分数
	"""
	current_score
	"""
	扣分分值
	"""
	add_score
	"""
	扣分内容
	"""
	content
	"""
	相关文件url
	"""
	file_url
	"""
	扣分项ID
	"""
	score_set_id
	"""
	创建时间
	"""
	create_at
	"""
	创建人
	"""
	create_by
	"""
	更新时间
	"""
	update_at
	"""
	更新人
	"""
	update_by
	"""
	删除时间
	"""
	delete_at
	"""
	删除人
	"""
	delete_by
	"""
	是否删除
	"""
	is_delete
}
extend type Query {
	"""
	列表查询
	"""
	enterprise_score_log(distinct_on: [EnterpriseScoreLogSelectColumn!], limit: Int, offset: Int, order_by: [EnterpriseScoreLogOrderBy!], where: EnterpriseScoreLogBoolExp): [EnterpriseScoreLog!]!
	"""
	聚合查询
	"""
	enterprise_score_log_aggregate(distinct_on: [EnterpriseScoreLogSelectColumn!], limit: Int, offset: Int, order_by: [EnterpriseScoreLogOrderBy!], where: EnterpriseScoreLogBoolExp): EnterpriseScoreLogAggregate!
	"""
	主键查询
	"""
	enterprise_score_log_by_pk(id: Bigint!): EnterpriseScoreLog!
	"""
	联合主键查询
	"""
	enterprise_score_log_by_union_pk(log_id: String!): EnterpriseScoreLog!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_enterprise_score_log(where: EnterpriseScoreLogBoolExp!): EnterpriseScoreLogMutationResponse
	"""
	根据主键删除记录
	"""
	delete_enterprise_score_log_by_pk(id: Bigint!): EnterpriseScoreLog
	"""
	插入
	"""
	insert_enterprise_score_log(objects: [EnterpriseScoreLogInsertInput!]!): EnterpriseScoreLogMutationResponse
	"""
	插入一条记录
	"""
	insert_enterprise_score_log_one(objects: EnterpriseScoreLogInsertInput!): EnterpriseScoreLog
	"""
	更新
	"""
	update_enterprise_score_log(_inc: EnterpriseScoreLogIncInput, _set: EnterpriseScoreLogSetInput, where: EnterpriseScoreLogBoolExp!): EnterpriseScoreLogMutationResponse
	"""
	根据主键更新
	"""
	update_enterprise_score_log_by_pk(_inc: EnterpriseScoreLogIncInput, _set: EnterpriseScoreLogSetInput, id: Bigint!): EnterpriseScoreLog
	"""
	根据联合主键更新
	"""
	update_enterprise_score_log_by_union_pk(_inc: EnterpriseScoreLogIncInput, _set: EnterpriseScoreLogSetInput, log_id: String!): EnterpriseScoreLog
	"""
	根据联合主键删除记录
	"""
	delete_enterprise_score_log_by_union_pk(log_id: String!): EnterpriseScoreLog
}
`, BuiltIn: false},
	{Name: "graph/graphqls/enterprise_score_set.graphqls", Input: `"""
企业扣分项
"""
type EnterpriseScoreSet {
	"""
	ID
	"""
	id: Bigint!
	"""
	扣分项ID
	"""
	score_set_id: String!
	"""
	扣分内容
	"""
	content: String!
	"""
	类型
	"""
	type: Int!
	"""
	分值
	"""
	score: Float!
	"""
	创建时间
	"""
	create_at: Timestamptz!
	"""
	创建人
	"""
	create_by: String
	"""
	修改时间
	"""
	update_at: Timestamptz
	"""
	修改人
	"""
	update_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	是否删除
	"""
	is_delete: Boolean!
}
"""
aggregated selection of "enterprise_score_set"
"""
type EnterpriseScoreSetAggregate {
	aggregate: EnterpriseScoreSetAggregateFields
}
"""
aggregate fields of "enterprise_score_set"
"""
type EnterpriseScoreSetAggregateFields {
	avg: EnterpriseScoreSetAvgFields
	count: Int
	max: EnterpriseScoreSetMaxFields
	min: EnterpriseScoreSetMinFields
	stddev: EnterpriseScoreSetStddevFields
	stddev_pop: EnterpriseScoreSetStddevPopFields
	stddev_samp: EnterpriseScoreSetStddevSampFields
	sum: EnterpriseScoreSetSumFields
	var_pop: EnterpriseScoreSetVarPopFields
	var_samp: EnterpriseScoreSetVarSampFields
	variance: EnterpriseScoreSetVarianceFields
}
"""
aggregate avg on columns of table "enterprise_score_set"
"""
type EnterpriseScoreSetAvgFields {
	id: Bigint
	type: Int
	score: Float
}
"""
aggregate max on columns of table "enterprise_score_set"
"""
type EnterpriseScoreSetMaxFields {
	id: Bigint
	score_set_id: String
	content: String
	type: Int
	score: Float
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate min on columns of table "enterprise_score_set"
"""
type EnterpriseScoreSetMinFields {
	id: Bigint
	score_set_id: String
	content: String
	type: Int
	score: Float
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate stddev on columns of table "enterprise_score_set"
"""
type EnterpriseScoreSetStddevFields {
	id: Bigint
	type: Int
	score: Float
}
"""
aggregate stddev_pop on columns of table "enterprise_score_set"
"""
type EnterpriseScoreSetStddevPopFields {
	id: Bigint
	type: Int
	score: Float
}
"""
aggregate stddev_samp on columns of table "enterprise_score_set"
"""
type EnterpriseScoreSetStddevSampFields {
	id: Bigint
	type: Int
	score: Float
}
"""
aggregate sum on columns of table "enterprise_score_set"
"""
type EnterpriseScoreSetSumFields {
	id: Bigint
	type: Int
	score: Float
}
"""
aggregate var_pop on columns of table "enterprise_score_set"
"""
type EnterpriseScoreSetVarPopFields {
	id: Bigint
	type: Int
	score: Float
}
"""
aggregate var_samp on columns of table "enterprise_score_set"
"""
type EnterpriseScoreSetVarSampFields {
	id: Bigint
	type: Int
	score: Float
}
"""
aggregate variance on columns of table "enterprise_score_set"
"""
type EnterpriseScoreSetVarianceFields {
	id: Bigint
	type: Int
	score: Float
}
"""
response of any mutation on the table "enterprise_score_set"
"""
type EnterpriseScoreSetMutationResponse {
	affected_rows: Int!
	returning: [EnterpriseScoreSet!]!
}
"""
ordering options when selecting data from "enterprise_score_set"
"""
input EnterpriseScoreSetOrderBy {
	id: OrderBy
	score_set_id: OrderBy
	content: OrderBy
	type: OrderBy
	score: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	is_delete: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'enterprise_score_set'.
"""
input EnterpriseScoreSetBoolExp {
	_and: [EnterpriseScoreSetBoolExp]
	_not: EnterpriseScoreSetBoolExp
	_or: [EnterpriseScoreSetBoolExp]
	id: BigintComparisonExp
	score_set_id: StringComparisonExp
	content: StringComparisonExp
	type: IntComparisonExp
	score: FloatComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	is_delete: BooleanComparisonExp
}
"""
input type for inserting data into table "enterprise_score_set"
"""
input EnterpriseScoreSetInsertInput {
	score_set_id: String!
	content: String!
	type: Int!
	score: Float!
	create_at: Timestamptz!
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean!
}
"""
input type for incrementing integer column in table "enterprise_score_set"
"""
input EnterpriseScoreSetIncInput {
	id: Bigint
	type: Int
	score: Float
}
"""
input type for updating data in table "enterprise_score_set"
"""
input EnterpriseScoreSetSetInput {
	id: Bigint
	score_set_id: String
	content: String
	type: Int
	score: Float
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
可选select
"""
enum EnterpriseScoreSetSelectColumn {
	"""
	ID
	"""
	id
	"""
	扣分项ID
	"""
	score_set_id
	"""
	扣分内容
	"""
	content
	"""
	类型
	"""
	type
	"""
	分值
	"""
	score
	"""
	创建时间
	"""
	create_at
	"""
	创建人
	"""
	create_by
	"""
	修改时间
	"""
	update_at
	"""
	修改人
	"""
	update_by
	"""
	删除时间
	"""
	delete_at
	"""
	删除人
	"""
	delete_by
	"""
	是否删除
	"""
	is_delete
}
extend type Query {
	"""
	列表查询
	"""
	enterprise_score_set(distinct_on: [EnterpriseScoreSetSelectColumn!], limit: Int, offset: Int, order_by: [EnterpriseScoreSetOrderBy!], where: EnterpriseScoreSetBoolExp): [EnterpriseScoreSet!]!
	"""
	聚合查询
	"""
	enterprise_score_set_aggregate(distinct_on: [EnterpriseScoreSetSelectColumn!], limit: Int, offset: Int, order_by: [EnterpriseScoreSetOrderBy!], where: EnterpriseScoreSetBoolExp): EnterpriseScoreSetAggregate!
	"""
	主键查询
	"""
	enterprise_score_set_by_pk(id: Bigint!): EnterpriseScoreSet!
	"""
	联合主键查询
	"""
	enterprise_score_set_by_union_pk(score_set_id: String!): EnterpriseScoreSet!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_enterprise_score_set(where: EnterpriseScoreSetBoolExp!): EnterpriseScoreSetMutationResponse
	"""
	根据主键删除记录
	"""
	delete_enterprise_score_set_by_pk(id: Bigint!): EnterpriseScoreSet
	"""
	插入
	"""
	insert_enterprise_score_set(objects: [EnterpriseScoreSetInsertInput!]!): EnterpriseScoreSetMutationResponse
	"""
	插入一条记录
	"""
	insert_enterprise_score_set_one(objects: EnterpriseScoreSetInsertInput!): EnterpriseScoreSet
	"""
	更新
	"""
	update_enterprise_score_set(_inc: EnterpriseScoreSetIncInput, _set: EnterpriseScoreSetSetInput, where: EnterpriseScoreSetBoolExp!): EnterpriseScoreSetMutationResponse
	"""
	根据主键更新
	"""
	update_enterprise_score_set_by_pk(_inc: EnterpriseScoreSetIncInput, _set: EnterpriseScoreSetSetInput, id: Bigint!): EnterpriseScoreSet
	"""
	根据联合主键更新
	"""
	update_enterprise_score_set_by_union_pk(_inc: EnterpriseScoreSetIncInput, _set: EnterpriseScoreSetSetInput, score_set_id: String!): EnterpriseScoreSet
	"""
	根据联合主键删除记录
	"""
	delete_enterprise_score_set_by_union_pk(score_set_id: String!): EnterpriseScoreSet
}
`, BuiltIn: false},
	{Name: "graph/graphqls/enterprise_state_his.graphqls", Input: `"""
企业状态变更记录
"""
type EnterpriseStateHis {
	"""
	ID
	"""
	id: Bigint!
	"""
	状态历史ID
	"""
	state_his_id: String!
	"""
	企业ID
	"""
	enterprise_id: String!
	"""
	原因
	"""
	reason: String
	"""
	状态(0.正常 1.暂停受理 2.清退)
	"""
	state: Int!
	"""
	相关文件链接
	"""
	file_url: String
	"""
	创建时间
	"""
	create_at: Timestamptz!
	"""
	创建人
	"""
	create_by: String
}
"""
aggregated selection of "enterprise_state_his"
"""
type EnterpriseStateHisAggregate {
	aggregate: EnterpriseStateHisAggregateFields
}
"""
aggregate fields of "enterprise_state_his"
"""
type EnterpriseStateHisAggregateFields {
	avg: EnterpriseStateHisAvgFields
	count: Int
	max: EnterpriseStateHisMaxFields
	min: EnterpriseStateHisMinFields
	stddev: EnterpriseStateHisStddevFields
	stddev_pop: EnterpriseStateHisStddevPopFields
	stddev_samp: EnterpriseStateHisStddevSampFields
	sum: EnterpriseStateHisSumFields
	var_pop: EnterpriseStateHisVarPopFields
	var_samp: EnterpriseStateHisVarSampFields
	variance: EnterpriseStateHisVarianceFields
}
"""
aggregate avg on columns of table "enterprise_state_his"
"""
type EnterpriseStateHisAvgFields {
	id: Bigint
	state: Int
}
"""
aggregate max on columns of table "enterprise_state_his"
"""
type EnterpriseStateHisMaxFields {
	id: Bigint
	state_his_id: String
	enterprise_id: String
	reason: String
	state: Int
	file_url: String
	create_at: Timestamptz
	create_by: String
}
"""
aggregate min on columns of table "enterprise_state_his"
"""
type EnterpriseStateHisMinFields {
	id: Bigint
	state_his_id: String
	enterprise_id: String
	reason: String
	state: Int
	file_url: String
	create_at: Timestamptz
	create_by: String
}
"""
aggregate stddev on columns of table "enterprise_state_his"
"""
type EnterpriseStateHisStddevFields {
	id: Bigint
	state: Int
}
"""
aggregate stddev_pop on columns of table "enterprise_state_his"
"""
type EnterpriseStateHisStddevPopFields {
	id: Bigint
	state: Int
}
"""
aggregate stddev_samp on columns of table "enterprise_state_his"
"""
type EnterpriseStateHisStddevSampFields {
	id: Bigint
	state: Int
}
"""
aggregate sum on columns of table "enterprise_state_his"
"""
type EnterpriseStateHisSumFields {
	id: Bigint
	state: Int
}
"""
aggregate var_pop on columns of table "enterprise_state_his"
"""
type EnterpriseStateHisVarPopFields {
	id: Bigint
	state: Int
}
"""
aggregate var_samp on columns of table "enterprise_state_his"
"""
type EnterpriseStateHisVarSampFields {
	id: Bigint
	state: Int
}
"""
aggregate variance on columns of table "enterprise_state_his"
"""
type EnterpriseStateHisVarianceFields {
	id: Bigint
	state: Int
}
"""
response of any mutation on the table "enterprise_state_his"
"""
type EnterpriseStateHisMutationResponse {
	affected_rows: Int!
	returning: [EnterpriseStateHis!]!
}
"""
ordering options when selecting data from "enterprise_state_his"
"""
input EnterpriseStateHisOrderBy {
	id: OrderBy
	state_his_id: OrderBy
	enterprise_id: OrderBy
	reason: OrderBy
	state: OrderBy
	file_url: OrderBy
	create_at: OrderBy
	create_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'enterprise_state_his'.
"""
input EnterpriseStateHisBoolExp {
	_and: [EnterpriseStateHisBoolExp]
	_not: EnterpriseStateHisBoolExp
	_or: [EnterpriseStateHisBoolExp]
	id: BigintComparisonExp
	state_his_id: StringComparisonExp
	enterprise_id: StringComparisonExp
	reason: StringComparisonExp
	state: IntComparisonExp
	file_url: StringComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
}
"""
input type for inserting data into table "enterprise_state_his"
"""
input EnterpriseStateHisInsertInput {
	state_his_id: String!
	enterprise_id: String!
	reason: String
	state: Int!
	file_url: String
	create_at: Timestamptz!
	create_by: String
}
"""
input type for incrementing integer column in table "enterprise_state_his"
"""
input EnterpriseStateHisIncInput {
	id: Bigint
	state: Int
}
"""
input type for updating data in table "enterprise_state_his"
"""
input EnterpriseStateHisSetInput {
	id: Bigint
	state_his_id: String
	enterprise_id: String
	reason: String
	state: Int
	file_url: String
	create_at: Timestamptz
	create_by: String
}
"""
可选select
"""
enum EnterpriseStateHisSelectColumn {
	"""
	ID
	"""
	id
	"""
	状态历史ID
	"""
	state_his_id
	"""
	企业ID
	"""
	enterprise_id
	"""
	原因
	"""
	reason
	"""
	状态(0.正常 1.暂停受理 2.清退)
	"""
	state
	"""
	相关文件链接
	"""
	file_url
	"""
	创建时间
	"""
	create_at
	"""
	创建人
	"""
	create_by
}
extend type Query {
	"""
	列表查询
	"""
	enterprise_state_his(distinct_on: [EnterpriseStateHisSelectColumn!], limit: Int, offset: Int, order_by: [EnterpriseStateHisOrderBy!], where: EnterpriseStateHisBoolExp): [EnterpriseStateHis!]!
	"""
	聚合查询
	"""
	enterprise_state_his_aggregate(distinct_on: [EnterpriseStateHisSelectColumn!], limit: Int, offset: Int, order_by: [EnterpriseStateHisOrderBy!], where: EnterpriseStateHisBoolExp): EnterpriseStateHisAggregate!
	"""
	主键查询
	"""
	enterprise_state_his_by_pk(id: Bigint!): EnterpriseStateHis!
	"""
	联合主键查询
	"""
	enterprise_state_his_by_union_pk(state_his_id: String!): EnterpriseStateHis!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_enterprise_state_his(where: EnterpriseStateHisBoolExp!): EnterpriseStateHisMutationResponse
	"""
	根据主键删除记录
	"""
	delete_enterprise_state_his_by_pk(id: Bigint!): EnterpriseStateHis
	"""
	插入
	"""
	insert_enterprise_state_his(objects: [EnterpriseStateHisInsertInput!]!): EnterpriseStateHisMutationResponse
	"""
	插入一条记录
	"""
	insert_enterprise_state_his_one(objects: EnterpriseStateHisInsertInput!): EnterpriseStateHis
	"""
	更新
	"""
	update_enterprise_state_his(_inc: EnterpriseStateHisIncInput, _set: EnterpriseStateHisSetInput, where: EnterpriseStateHisBoolExp!): EnterpriseStateHisMutationResponse
	"""
	根据主键更新
	"""
	update_enterprise_state_his_by_pk(_inc: EnterpriseStateHisIncInput, _set: EnterpriseStateHisSetInput, id: Bigint!): EnterpriseStateHis
	"""
	根据联合主键更新
	"""
	update_enterprise_state_his_by_union_pk(_inc: EnterpriseStateHisIncInput, _set: EnterpriseStateHisSetInput, state_his_id: String!): EnterpriseStateHis
	"""
	根据联合主键删除记录
	"""
	delete_enterprise_state_his_by_union_pk(state_his_id: String!): EnterpriseStateHis
}
`, BuiltIn: false},
	{Name: "graph/graphqls/enterprise_ukey.graphqls", Input: `"""
企业绑定ukey
"""
type EnterpriseUkey {
	"""
	ID
	"""
	id: Bigint!
	"""
	企业ukey ID
	"""
	ukey_id: String!
	"""
	企业ID
	"""
	enterprise_id: String!
	"""
	创建时间
	"""
	create_at: Timestamptz!
	"""
	创建人
	"""
	create_by: String
	"""
	更新时间
	"""
	update_at: Timestamptz
	"""
	更新人
	"""
	update_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	是否删除
	"""
	is_delete: Boolean!
}
"""
aggregated selection of "enterprise_ukey"
"""
type EnterpriseUkeyAggregate {
	aggregate: EnterpriseUkeyAggregateFields
}
"""
aggregate fields of "enterprise_ukey"
"""
type EnterpriseUkeyAggregateFields {
	avg: EnterpriseUkeyAvgFields
	count: Int
	max: EnterpriseUkeyMaxFields
	min: EnterpriseUkeyMinFields
	stddev: EnterpriseUkeyStddevFields
	stddev_pop: EnterpriseUkeyStddevPopFields
	stddev_samp: EnterpriseUkeyStddevSampFields
	sum: EnterpriseUkeySumFields
	var_pop: EnterpriseUkeyVarPopFields
	var_samp: EnterpriseUkeyVarSampFields
	variance: EnterpriseUkeyVarianceFields
}
"""
aggregate avg on columns of table "enterprise_ukey"
"""
type EnterpriseUkeyAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "enterprise_ukey"
"""
type EnterpriseUkeyMaxFields {
	id: Bigint
	ukey_id: String
	enterprise_id: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate min on columns of table "enterprise_ukey"
"""
type EnterpriseUkeyMinFields {
	id: Bigint
	ukey_id: String
	enterprise_id: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate stddev on columns of table "enterprise_ukey"
"""
type EnterpriseUkeyStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "enterprise_ukey"
"""
type EnterpriseUkeyStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "enterprise_ukey"
"""
type EnterpriseUkeyStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "enterprise_ukey"
"""
type EnterpriseUkeySumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "enterprise_ukey"
"""
type EnterpriseUkeyVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "enterprise_ukey"
"""
type EnterpriseUkeyVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "enterprise_ukey"
"""
type EnterpriseUkeyVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "enterprise_ukey"
"""
type EnterpriseUkeyMutationResponse {
	affected_rows: Int!
	returning: [EnterpriseUkey!]!
}
"""
ordering options when selecting data from "enterprise_ukey"
"""
input EnterpriseUkeyOrderBy {
	id: OrderBy
	ukey_id: OrderBy
	enterprise_id: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	is_delete: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'enterprise_ukey'.
"""
input EnterpriseUkeyBoolExp {
	_and: [EnterpriseUkeyBoolExp]
	_not: EnterpriseUkeyBoolExp
	_or: [EnterpriseUkeyBoolExp]
	id: BigintComparisonExp
	ukey_id: StringComparisonExp
	enterprise_id: StringComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	is_delete: BooleanComparisonExp
}
"""
input type for inserting data into table "enterprise_ukey"
"""
input EnterpriseUkeyInsertInput {
	ukey_id: String!
	enterprise_id: String!
	create_at: Timestamptz!
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean!
}
"""
input type for incrementing integer column in table "enterprise_ukey"
"""
input EnterpriseUkeyIncInput {
	id: Bigint
}
"""
input type for updating data in table "enterprise_ukey"
"""
input EnterpriseUkeySetInput {
	id: Bigint
	ukey_id: String
	enterprise_id: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
可选select
"""
enum EnterpriseUkeySelectColumn {
	"""
	ID
	"""
	id
	"""
	企业ukey ID
	"""
	ukey_id
	"""
	企业ID
	"""
	enterprise_id
	"""
	创建时间
	"""
	create_at
	"""
	创建人
	"""
	create_by
	"""
	更新时间
	"""
	update_at
	"""
	更新人
	"""
	update_by
	"""
	删除时间
	"""
	delete_at
	"""
	删除人
	"""
	delete_by
	"""
	是否删除
	"""
	is_delete
}
extend type Query {
	"""
	列表查询
	"""
	enterprise_ukey(distinct_on: [EnterpriseUkeySelectColumn!], limit: Int, offset: Int, order_by: [EnterpriseUkeyOrderBy!], where: EnterpriseUkeyBoolExp): [EnterpriseUkey!]!
	"""
	聚合查询
	"""
	enterprise_ukey_aggregate(distinct_on: [EnterpriseUkeySelectColumn!], limit: Int, offset: Int, order_by: [EnterpriseUkeyOrderBy!], where: EnterpriseUkeyBoolExp): EnterpriseUkeyAggregate!
	"""
	主键查询
	"""
	enterprise_ukey_by_pk(id: Bigint!): EnterpriseUkey!
	"""
	联合主键查询
	"""
	enterprise_ukey_by_union_pk(ukey_id: String!): EnterpriseUkey!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_enterprise_ukey(where: EnterpriseUkeyBoolExp!): EnterpriseUkeyMutationResponse
	"""
	根据主键删除记录
	"""
	delete_enterprise_ukey_by_pk(id: Bigint!): EnterpriseUkey
	"""
	插入
	"""
	insert_enterprise_ukey(objects: [EnterpriseUkeyInsertInput!]!): EnterpriseUkeyMutationResponse
	"""
	插入一条记录
	"""
	insert_enterprise_ukey_one(objects: EnterpriseUkeyInsertInput!): EnterpriseUkey
	"""
	更新
	"""
	update_enterprise_ukey(_inc: EnterpriseUkeyIncInput, _set: EnterpriseUkeySetInput, where: EnterpriseUkeyBoolExp!): EnterpriseUkeyMutationResponse
	"""
	根据主键更新
	"""
	update_enterprise_ukey_by_pk(_inc: EnterpriseUkeyIncInput, _set: EnterpriseUkeySetInput, id: Bigint!): EnterpriseUkey
	"""
	根据联合主键更新
	"""
	update_enterprise_ukey_by_union_pk(_inc: EnterpriseUkeyIncInput, _set: EnterpriseUkeySetInput, ukey_id: String!): EnterpriseUkey
	"""
	根据联合主键删除记录
	"""
	delete_enterprise_ukey_by_union_pk(ukey_id: String!): EnterpriseUkey
}
`, BuiltIn: false},
	{Name: "graph/graphqls/system_user.graphqls", Input: `"""
系统用户
"""
type SystemUser {
	"""
	ID
	"""
	id: Bigint!
	"""
	用户ID
	"""
	user_id: String!
	"""
	密码
	"""
	password: String!
	"""
	用户名
	"""
	uername: String!
	"""
	企业ID
	"""
	enterprise_id: String
	"""
	部门ID
	"""
	department_id: String
	"""
	级别
	"""
	grade: Int
	"""
	审核等级
	"""
	audit_level: Int
	"""
	用户类型
	"""
	user_type: Int
	"""
	是否有效
	"""
	is_valid: Boolean
	"""
	状态
	"""
	user_state: Int
	"""
	ip地址
	"""
	ip_address: String
	"""
	是否绑定IP
	"""
	is_bind_ip: Boolean
	"""
	邮箱
	"""
	email: String
	"""
	电话号码
	"""
	telephone: String
	"""
	手机号码
	"""
	mobile: String
	"""
	加密串码
	"""
	ukey: String
	"""
	手机串号
	"""
	mkey: String
	"""
	客户端版本号
	"""
	app_version: String
	"""
	创建时间
	"""
	created_at: Timestamptz
	"""
	创建人
	"""
	create_by: String
	"""
	修改时间
	"""
	update_at: Timestamptz
	"""
	修改人
	"""
	update_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	是否删除
	"""
	is_delete: Boolean!
	"""
	备注
	"""
	remarks: String
}
"""
aggregated selection of "system_user"
"""
type SystemUserAggregate {
	aggregate: SystemUserAggregateFields
}
"""
aggregate fields of "system_user"
"""
type SystemUserAggregateFields {
	avg: SystemUserAvgFields
	count: Int
	max: SystemUserMaxFields
	min: SystemUserMinFields
	stddev: SystemUserStddevFields
	stddev_pop: SystemUserStddevPopFields
	stddev_samp: SystemUserStddevSampFields
	sum: SystemUserSumFields
	var_pop: SystemUserVarPopFields
	var_samp: SystemUserVarSampFields
	variance: SystemUserVarianceFields
}
"""
aggregate avg on columns of table "system_user"
"""
type SystemUserAvgFields {
	id: Bigint
	grade: Int
	audit_level: Int
	user_type: Int
	user_state: Int
}
"""
aggregate max on columns of table "system_user"
"""
type SystemUserMaxFields {
	id: Bigint
	user_id: String
	password: String
	uername: String
	enterprise_id: String
	department_id: String
	grade: Int
	audit_level: Int
	user_type: Int
	is_valid: Boolean
	user_state: Int
	ip_address: String
	is_bind_ip: Boolean
	email: String
	telephone: String
	mobile: String
	ukey: String
	mkey: String
	app_version: String
	created_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
	remarks: String
}
"""
aggregate min on columns of table "system_user"
"""
type SystemUserMinFields {
	id: Bigint
	user_id: String
	password: String
	uername: String
	enterprise_id: String
	department_id: String
	grade: Int
	audit_level: Int
	user_type: Int
	is_valid: Boolean
	user_state: Int
	ip_address: String
	is_bind_ip: Boolean
	email: String
	telephone: String
	mobile: String
	ukey: String
	mkey: String
	app_version: String
	created_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
	remarks: String
}
"""
aggregate stddev on columns of table "system_user"
"""
type SystemUserStddevFields {
	id: Bigint
	grade: Int
	audit_level: Int
	user_type: Int
	user_state: Int
}
"""
aggregate stddev_pop on columns of table "system_user"
"""
type SystemUserStddevPopFields {
	id: Bigint
	grade: Int
	audit_level: Int
	user_type: Int
	user_state: Int
}
"""
aggregate stddev_samp on columns of table "system_user"
"""
type SystemUserStddevSampFields {
	id: Bigint
	grade: Int
	audit_level: Int
	user_type: Int
	user_state: Int
}
"""
aggregate sum on columns of table "system_user"
"""
type SystemUserSumFields {
	id: Bigint
	grade: Int
	audit_level: Int
	user_type: Int
	user_state: Int
}
"""
aggregate var_pop on columns of table "system_user"
"""
type SystemUserVarPopFields {
	id: Bigint
	grade: Int
	audit_level: Int
	user_type: Int
	user_state: Int
}
"""
aggregate var_samp on columns of table "system_user"
"""
type SystemUserVarSampFields {
	id: Bigint
	grade: Int
	audit_level: Int
	user_type: Int
	user_state: Int
}
"""
aggregate variance on columns of table "system_user"
"""
type SystemUserVarianceFields {
	id: Bigint
	grade: Int
	audit_level: Int
	user_type: Int
	user_state: Int
}
"""
response of any mutation on the table "system_user"
"""
type SystemUserMutationResponse {
	affected_rows: Int!
	returning: [SystemUser!]!
}
"""
ordering options when selecting data from "system_user"
"""
input SystemUserOrderBy {
	id: OrderBy
	user_id: OrderBy
	password: OrderBy
	uername: OrderBy
	enterprise_id: OrderBy
	department_id: OrderBy
	grade: OrderBy
	audit_level: OrderBy
	user_type: OrderBy
	is_valid: OrderBy
	user_state: OrderBy
	ip_address: OrderBy
	is_bind_ip: OrderBy
	email: OrderBy
	telephone: OrderBy
	mobile: OrderBy
	ukey: OrderBy
	mkey: OrderBy
	app_version: OrderBy
	created_at: OrderBy
	create_by: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	is_delete: OrderBy
	remarks: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'system_user'.
"""
input SystemUserBoolExp {
	_and: [SystemUserBoolExp]
	_not: SystemUserBoolExp
	_or: [SystemUserBoolExp]
	id: BigintComparisonExp
	user_id: StringComparisonExp
	password: StringComparisonExp
	uername: StringComparisonExp
	enterprise_id: StringComparisonExp
	department_id: StringComparisonExp
	grade: IntComparisonExp
	audit_level: IntComparisonExp
	user_type: IntComparisonExp
	is_valid: BooleanComparisonExp
	user_state: IntComparisonExp
	ip_address: StringComparisonExp
	is_bind_ip: BooleanComparisonExp
	email: StringComparisonExp
	telephone: StringComparisonExp
	mobile: StringComparisonExp
	ukey: StringComparisonExp
	mkey: StringComparisonExp
	app_version: StringComparisonExp
	created_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	is_delete: BooleanComparisonExp
	remarks: StringComparisonExp
}
"""
input type for inserting data into table "system_user"
"""
input SystemUserInsertInput {
	user_id: String!
	password: String!
	uername: String!
	enterprise_id: String
	department_id: String
	grade: Int
	audit_level: Int
	user_type: Int
	is_valid: Boolean
	user_state: Int
	ip_address: String
	is_bind_ip: Boolean
	email: String
	telephone: String
	mobile: String
	ukey: String
	mkey: String
	app_version: String
	created_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean!
	remarks: String
}
"""
input type for incrementing integer column in table "system_user"
"""
input SystemUserIncInput {
	id: Bigint
	grade: Int
	audit_level: Int
	user_type: Int
	user_state: Int
}
"""
input type for updating data in table "system_user"
"""
input SystemUserSetInput {
	id: Bigint
	user_id: String
	password: String
	uername: String
	enterprise_id: String
	department_id: String
	grade: Int
	audit_level: Int
	user_type: Int
	is_valid: Boolean
	user_state: Int
	ip_address: String
	is_bind_ip: Boolean
	email: String
	telephone: String
	mobile: String
	ukey: String
	mkey: String
	app_version: String
	created_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
	remarks: String
}
"""
可选select
"""
enum SystemUserSelectColumn {
	"""
	ID
	"""
	id
	"""
	用户ID
	"""
	user_id
	"""
	密码
	"""
	password
	"""
	用户名
	"""
	uername
	"""
	企业ID
	"""
	enterprise_id
	"""
	部门ID
	"""
	department_id
	"""
	级别
	"""
	grade
	"""
	审核等级
	"""
	audit_level
	"""
	用户类型
	"""
	user_type
	"""
	是否有效
	"""
	is_valid
	"""
	状态
	"""
	user_state
	"""
	ip地址
	"""
	ip_address
	"""
	是否绑定IP
	"""
	is_bind_ip
	"""
	邮箱
	"""
	email
	"""
	电话号码
	"""
	telephone
	"""
	手机号码
	"""
	mobile
	"""
	加密串码
	"""
	ukey
	"""
	手机串号
	"""
	mkey
	"""
	客户端版本号
	"""
	app_version
	"""
	创建时间
	"""
	created_at
	"""
	创建人
	"""
	create_by
	"""
	修改时间
	"""
	update_at
	"""
	修改人
	"""
	update_by
	"""
	删除时间
	"""
	delete_at
	"""
	删除人
	"""
	delete_by
	"""
	是否删除
	"""
	is_delete
	"""
	备注
	"""
	remarks
}
extend type Query {
	"""
	列表查询
	"""
	system_user(distinct_on: [SystemUserSelectColumn!], limit: Int, offset: Int, order_by: [SystemUserOrderBy!], where: SystemUserBoolExp): [SystemUser!]!
	"""
	聚合查询
	"""
	system_user_aggregate(distinct_on: [SystemUserSelectColumn!], limit: Int, offset: Int, order_by: [SystemUserOrderBy!], where: SystemUserBoolExp): SystemUserAggregate!
	"""
	主键查询
	"""
	system_user_by_pk(id: Bigint!): SystemUser!
	"""
	联合主键查询
	"""
	system_user_by_union_pk(user_id: String!): SystemUser!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_system_user(where: SystemUserBoolExp!): SystemUserMutationResponse
	"""
	根据主键删除记录
	"""
	delete_system_user_by_pk(id: Bigint!): SystemUser
	"""
	插入
	"""
	insert_system_user(objects: [SystemUserInsertInput!]!): SystemUserMutationResponse
	"""
	插入一条记录
	"""
	insert_system_user_one(objects: SystemUserInsertInput!): SystemUser
	"""
	更新
	"""
	update_system_user(_inc: SystemUserIncInput, _set: SystemUserSetInput, where: SystemUserBoolExp!): SystemUserMutationResponse
	"""
	根据主键更新
	"""
	update_system_user_by_pk(_inc: SystemUserIncInput, _set: SystemUserSetInput, id: Bigint!): SystemUser
	"""
	根据联合主键更新
	"""
	update_system_user_by_union_pk(_inc: SystemUserIncInput, _set: SystemUserSetInput, user_id: String!): SystemUser
	"""
	根据联合主键删除记录
	"""
	delete_system_user_by_union_pk(user_id: String!): SystemUser
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_delete_department_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DepartmentBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNDepartmentBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_department_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_department_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["department_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["department_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_alarm_send_police_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseAlarmSendPoliceBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNEnterpriseAlarmSendPoliceBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_alarm_send_police_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_alarm_send_police_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterprise_alarm_send_police_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_alarm_send_police_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterprise_alarm_send_police_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNEnterpriseBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterprise_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterprise_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_contact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseContactBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNEnterpriseContactBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_contact_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_contact_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contact_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contact_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_muck_trunk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseMuckTrunkBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNEnterpriseMuckTrunkBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_muck_trunk_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_muck_trunk_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterprise_muck_trunk_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_muck_trunk_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterprise_muck_trunk_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_score_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseScoreLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNEnterpriseScoreLogBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_score_log_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_score_log_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["log_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("log_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["log_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_score_set_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseScoreSetBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNEnterpriseScoreSetBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_score_set_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_score_set_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["score_set_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score_set_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["score_set_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_state_his_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseStateHisBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNEnterpriseStateHisBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_state_his_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_state_his_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["state_his_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state_his_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["state_his_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_ukey_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseUkeyBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNEnterpriseUkeyBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_ukey_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_ukey_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["ukey_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ukey_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ukey_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_system_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SystemUserBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNSystemUserBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_system_user_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_system_user_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["user_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_department_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DepartmentInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDepartmentInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_department_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DepartmentInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDepartmentInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_alarm_send_police_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.EnterpriseAlarmSendPoliceInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEnterpriseAlarmSendPoliceInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_alarm_send_police_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseAlarmSendPoliceInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEnterpriseAlarmSendPoliceInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.EnterpriseInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEnterpriseInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_contact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.EnterpriseContactInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEnterpriseContactInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_contact_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseContactInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEnterpriseContactInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_muck_trunk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.EnterpriseMuckTrunkInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEnterpriseMuckTrunkInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_muck_trunk_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseMuckTrunkInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEnterpriseMuckTrunkInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEnterpriseInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_score_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.EnterpriseScoreLogInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEnterpriseScoreLogInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_score_log_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseScoreLogInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEnterpriseScoreLogInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_score_set_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.EnterpriseScoreSetInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEnterpriseScoreSetInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_score_set_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseScoreSetInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEnterpriseScoreSetInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_state_his_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.EnterpriseStateHisInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEnterpriseStateHisInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_state_his_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseStateHisInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEnterpriseStateHisInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_ukey_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.EnterpriseUkeyInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEnterpriseUkeyInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_ukey_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseUkeyInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEnterpriseUkeyInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_system_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.SystemUserInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNSystemUserInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_system_user_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SystemUserInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNSystemUserInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_update_department_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DepartmentIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODepartmentIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DepartmentSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODepartmentSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DepartmentBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNDepartmentBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_department_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DepartmentIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODepartmentIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DepartmentSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODepartmentSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_department_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DepartmentIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODepartmentIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DepartmentSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODepartmentSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["department_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["department_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_alarm_send_police_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseAlarmSendPoliceIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseAlarmSendPoliceIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseAlarmSendPoliceSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseAlarmSendPoliceSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.EnterpriseAlarmSendPoliceBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNEnterpriseAlarmSendPoliceBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_alarm_send_police_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseAlarmSendPoliceIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseAlarmSendPoliceIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseAlarmSendPoliceSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseAlarmSendPoliceSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_alarm_send_police_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseAlarmSendPoliceIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseAlarmSendPoliceIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseAlarmSendPoliceSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseAlarmSendPoliceSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["enterprise_alarm_send_police_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_alarm_send_police_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterprise_alarm_send_police_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.EnterpriseBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNEnterpriseBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["enterprise_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterprise_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_contact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseContactIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseContactIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseContactSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseContactSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.EnterpriseContactBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNEnterpriseContactBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_contact_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseContactIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseContactIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseContactSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseContactSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_contact_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseContactIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseContactIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseContactSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseContactSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["contact_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contact_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_muck_trunk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseMuckTrunkIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseMuckTrunkIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseMuckTrunkSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseMuckTrunkSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.EnterpriseMuckTrunkBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNEnterpriseMuckTrunkBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_muck_trunk_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseMuckTrunkIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseMuckTrunkIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseMuckTrunkSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseMuckTrunkSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_muck_trunk_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseMuckTrunkIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseMuckTrunkIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseMuckTrunkSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseMuckTrunkSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["enterprise_muck_trunk_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_muck_trunk_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterprise_muck_trunk_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_score_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseScoreLogIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseScoreLogIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseScoreLogSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseScoreLogSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.EnterpriseScoreLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNEnterpriseScoreLogBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_score_log_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseScoreLogIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseScoreLogIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseScoreLogSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseScoreLogSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_score_log_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseScoreLogIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseScoreLogIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseScoreLogSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseScoreLogSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["log_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("log_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["log_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_score_set_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseScoreSetIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseScoreSetIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseScoreSetSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseScoreSetSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.EnterpriseScoreSetBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNEnterpriseScoreSetBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_score_set_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseScoreSetIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseScoreSetIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseScoreSetSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseScoreSetSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_score_set_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseScoreSetIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseScoreSetIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseScoreSetSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseScoreSetSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["score_set_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score_set_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["score_set_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_state_his_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseStateHisIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseStateHisIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseStateHisSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseStateHisSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.EnterpriseStateHisBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNEnterpriseStateHisBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_state_his_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseStateHisIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseStateHisIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseStateHisSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseStateHisSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_state_his_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseStateHisIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseStateHisIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseStateHisSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseStateHisSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["state_his_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state_his_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["state_his_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_ukey_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseUkeyIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseUkeyIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseUkeySetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseUkeySetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeySetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.EnterpriseUkeyBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNEnterpriseUkeyBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_ukey_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseUkeyIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseUkeyIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseUkeySetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseUkeySetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeySetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_ukey_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseUkeyIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseUkeyIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseUkeySetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseUkeySetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeySetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["ukey_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ukey_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ukey_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_system_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SystemUserIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOSystemUserIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.SystemUserSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOSystemUserSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.SystemUserBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNSystemUserBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_system_user_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SystemUserIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOSystemUserIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.SystemUserSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOSystemUserSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_system_user_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SystemUserIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOSystemUserIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.SystemUserSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOSystemUserSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["user_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_department_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DepartmentSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODepartmentSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DepartmentOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODepartmentOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DepartmentBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODepartmentBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_department_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DepartmentSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODepartmentSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DepartmentOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODepartmentOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DepartmentBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODepartmentBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_department_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_department_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["department_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["department_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEnterpriseSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEnterpriseOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEnterpriseBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_alarm_send_police_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseAlarmSendPoliceSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEnterpriseAlarmSendPoliceSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseAlarmSendPoliceOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEnterpriseAlarmSendPoliceOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseAlarmSendPoliceBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEnterpriseAlarmSendPoliceBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_alarm_send_police_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseAlarmSendPoliceSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEnterpriseAlarmSendPoliceSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseAlarmSendPoliceOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEnterpriseAlarmSendPoliceOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseAlarmSendPoliceBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEnterpriseAlarmSendPoliceBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_alarm_send_police_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_alarm_send_police_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterprise_alarm_send_police_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_alarm_send_police_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterprise_alarm_send_police_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEnterpriseSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEnterpriseOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEnterpriseBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterprise_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterprise_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_contact_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseContactSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEnterpriseContactSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseContactOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEnterpriseContactOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseContactBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEnterpriseContactBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_contact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseContactSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEnterpriseContactSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseContactOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEnterpriseContactOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseContactBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEnterpriseContactBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_contact_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_contact_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contact_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contact_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_muck_trunk_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseMuckTrunkSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEnterpriseMuckTrunkSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseMuckTrunkOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEnterpriseMuckTrunkOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseMuckTrunkBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEnterpriseMuckTrunkBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_muck_trunk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseMuckTrunkSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEnterpriseMuckTrunkSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseMuckTrunkOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEnterpriseMuckTrunkOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseMuckTrunkBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEnterpriseMuckTrunkBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_muck_trunk_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_muck_trunk_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["enterprise_muck_trunk_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_muck_trunk_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enterprise_muck_trunk_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_score_log_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseScoreLogSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEnterpriseScoreLogSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseScoreLogOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEnterpriseScoreLogOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseScoreLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEnterpriseScoreLogBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_score_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseScoreLogSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEnterpriseScoreLogSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseScoreLogOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEnterpriseScoreLogOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseScoreLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEnterpriseScoreLogBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_score_log_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_score_log_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["log_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("log_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["log_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_score_set_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseScoreSetSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEnterpriseScoreSetSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseScoreSetOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEnterpriseScoreSetOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseScoreSetBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEnterpriseScoreSetBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_score_set_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseScoreSetSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEnterpriseScoreSetSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseScoreSetOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEnterpriseScoreSetOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseScoreSetBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEnterpriseScoreSetBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_score_set_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_score_set_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["score_set_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score_set_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["score_set_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_state_his_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseStateHisSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEnterpriseStateHisSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseStateHisOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEnterpriseStateHisOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseStateHisBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEnterpriseStateHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_state_his_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseStateHisSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEnterpriseStateHisSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseStateHisOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEnterpriseStateHisOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseStateHisBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEnterpriseStateHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_state_his_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_state_his_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["state_his_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state_his_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["state_his_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_ukey_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseUkeySelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEnterpriseUkeySelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeySelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseUkeyOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEnterpriseUkeyOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseUkeyBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEnterpriseUkeyBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_ukey_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseUkeySelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEnterpriseUkeySelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeySelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseUkeyOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEnterpriseUkeyOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseUkeyBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEnterpriseUkeyBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_ukey_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_ukey_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["ukey_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ukey_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ukey_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_system_user_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.SystemUserSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOSystemUserSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.SystemUserOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOSystemUserOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.SystemUserBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOSystemUserBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_system_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.SystemUserSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOSystemUserSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.SystemUserOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOSystemUserOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.SystemUserBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOSystemUserBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_system_user_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_system_user_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["user_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Department_id(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_department_id(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_enterprise(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Department().Enterprise(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Enterprise)
	fc.Result = res
	return ec.marshalOEnterprise2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_superior_department(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Department().SuperiorDepartment(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Department)
	fc.Result = res
	return ec.marshalODepartment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_department_name(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_department_code(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_department_category(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_internal_number(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentAggregateFields)
	fc.Result = res
	return ec.marshalODepartmentAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentAvgFields)
	fc.Result = res
	return ec.marshalODepartmentAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentMaxFields)
	fc.Result = res
	return ec.marshalODepartmentMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentMinFields)
	fc.Result = res
	return ec.marshalODepartmentMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentStddevFields)
	fc.Result = res
	return ec.marshalODepartmentStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentStddevPopFields)
	fc.Result = res
	return ec.marshalODepartmentStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentStddevSampFields)
	fc.Result = res
	return ec.marshalODepartmentStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentSumFields)
	fc.Result = res
	return ec.marshalODepartmentSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentVarPopFields)
	fc.Result = res
	return ec.marshalODepartmentVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentVarSampFields)
	fc.Result = res
	return ec.marshalODepartmentVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentVarianceFields)
	fc.Result = res
	return ec.marshalODepartmentVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAvgFields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAvgFields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_department_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_superior_department_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperiorDepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_department_name(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_department_code(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_department_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_superior_department_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperiorDepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_department_name(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_department_code(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.Department)
	fc.Result = res
	return ec.marshalNDepartment2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentStddevFields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentStddevFields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentStddevPopFields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentStddevPopFields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentStddevSampFields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentStddevSampFields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentSumFields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentSumFields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentVarPopFields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentVarPopFields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentVarSampFields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentVarSampFields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentVarianceFields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentVarianceFields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_superior_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperiorEnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_enterprise_code(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_enterprise_name(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_display_number(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_enterprise_address(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_business_scope(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_fax_number(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FaxNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_province_id(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_city_id(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_district_id(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_institution_category(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_operating_license_photo(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingLicensePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_business_license_photo(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicensePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_business_license_issuance_date(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicenseIssuanceDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_business_license_expiry_date(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicenseExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_legal_representative(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentative, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_legal_representative_phone(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativePhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_legal_representative_id_card_photo(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativeIDCardPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_legal_representative_id_card(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativeIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_entrusted_agent(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_entrusted_agent_phone(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_entrusted_agent_id_card_photo(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentIDCardPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_entrusted_agent_id_card(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_organization_code(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_organization_code_certificate_photo(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCodeCertificatePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_business_photo(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_is_black(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBlack, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_check_status(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_is_install(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInstall, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_is_input(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInput, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_is_upload_province(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsUploadProvince, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_score(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_brigade_id(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_police_station_id(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoliceStationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_brigade_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_brigade_review_time(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_brigade_review_by(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_association_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_association_review_time(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_association_review_by(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_is_key_point(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsKeyPoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_enterprise_type(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_is_catalog(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCatalog, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_state(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_proxy_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProxyEnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_is_expire(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsExpire, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_credit_level(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_credit_level_remark(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreditLevelRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAggregateFields)
	fc.Result = res
	return ec.marshalOEnterpriseAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAvgFields)
	fc.Result = res
	return ec.marshalOEnterpriseAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMaxFields)
	fc.Result = res
	return ec.marshalOEnterpriseMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMinFields)
	fc.Result = res
	return ec.marshalOEnterpriseMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseStddevFields)
	fc.Result = res
	return ec.marshalOEnterpriseStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseStddevPopFields)
	fc.Result = res
	return ec.marshalOEnterpriseStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseStddevSampFields)
	fc.Result = res
	return ec.marshalOEnterpriseStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseSumFields)
	fc.Result = res
	return ec.marshalOEnterpriseSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseVarPopFields)
	fc.Result = res
	return ec.marshalOEnterpriseVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseVarSampFields)
	fc.Result = res
	return ec.marshalOEnterpriseVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseVarianceFields)
	fc.Result = res
	return ec.marshalOEnterpriseVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_enterprise_alarm_send_police_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseAlarmSendPoliceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_enterprise_name(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_enterprise_contact(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseContact, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_enterprise_phone(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterprisePhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_police(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Police, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_police_phone(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PolicePhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_phlice_department(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhliceDepartment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPolice_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseAlarmSendPolice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPolice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceAggregateFields)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPoliceAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceAvgFields)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPoliceAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceMaxFields)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPoliceMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceMinFields)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPoliceMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceStddevFields)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPoliceStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceStddevPopFields)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPoliceStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceStddevSampFields)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPoliceStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceSumFields)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPoliceSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceVarPopFields)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPoliceVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceVarSampFields)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPoliceVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceVarianceFields)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPoliceVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_enterprise_alarm_send_police_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseAlarmSendPoliceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_enterprise_name(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_enterprise_contact(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseContact, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_enterprise_phone(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterprisePhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_police(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Police, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_police_phone(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PolicePhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_phlice_department(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhliceDepartment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_enterprise_alarm_send_police_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseAlarmSendPoliceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_enterprise_name(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_enterprise_contact(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseContact, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_enterprise_phone(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterprisePhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_police(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Police, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_police_phone(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PolicePhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_phlice_department(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhliceDepartment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EnterpriseAlarmSendPolice)
	fc.Result = res
	return ec.marshalNEnterpriseAlarmSendPolice2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseAlarmSendPoliceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAlarmSendPoliceVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAlarmSendPoliceVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAlarmSendPoliceVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAvgFields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAvgFields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAvgFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAvgFields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAvgFields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAvgFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAvgFields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAvgFields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAvgFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAvgFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAvgFields_enterprise_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAvgFields_state(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAvgFields_credit_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContact_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContact_contact_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContact_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContact_name(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContact_mobile(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mobile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContact_phone(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContact_email(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContact_sort_num(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContact_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContact_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContact_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContact_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContact_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContact_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContact_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseContactAggregateFields)
	fc.Result = res
	return ec.marshalOEnterpriseContactAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseContactAvgFields)
	fc.Result = res
	return ec.marshalOEnterpriseContactAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseContactMaxFields)
	fc.Result = res
	return ec.marshalOEnterpriseContactMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseContactMinFields)
	fc.Result = res
	return ec.marshalOEnterpriseContactMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseContactStddevFields)
	fc.Result = res
	return ec.marshalOEnterpriseContactStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseContactStddevPopFields)
	fc.Result = res
	return ec.marshalOEnterpriseContactStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseContactStddevSampFields)
	fc.Result = res
	return ec.marshalOEnterpriseContactStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseContactSumFields)
	fc.Result = res
	return ec.marshalOEnterpriseContactSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseContactVarPopFields)
	fc.Result = res
	return ec.marshalOEnterpriseContactVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseContactVarSampFields)
	fc.Result = res
	return ec.marshalOEnterpriseContactVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseContactVarianceFields)
	fc.Result = res
	return ec.marshalOEnterpriseContactVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactAvgFields_sort_num(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMaxFields_contact_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMaxFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMaxFields_name(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMaxFields_mobile(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mobile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMaxFields_phone(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMaxFields_email(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMaxFields_sort_num(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMaxFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMinFields_contact_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMinFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMinFields_name(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMinFields_mobile(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mobile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMinFields_phone(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMinFields_email(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMinFields_sort_num(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMinFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EnterpriseContact)
	fc.Result = res
	return ec.marshalNEnterpriseContact2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseContactᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactStddevFields_sort_num(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactStddevPopFields_sort_num(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactStddevSampFields_sort_num(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactSumFields_sort_num(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactVarPopFields_sort_num(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactVarSampFields_sort_num(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseContactVarianceFields_sort_num(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseContactVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseContactVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_superior_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperiorEnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_enterprise_code(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_enterprise_name(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_enterprise_address(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_fax_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FaxNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_operating_license_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingLicensePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_business_license_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicensePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_business_license_issuance_date(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicenseIssuanceDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_business_license_expiry_date(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicenseExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_legal_representative(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentative, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_legal_representative_phone(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativePhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_legal_representative_id_card_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativeIDCardPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_legal_representative_id_card(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativeIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_entrusted_agent(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_entrusted_agent_phone(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_entrusted_agent_id_card_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentIDCardPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_entrusted_agent_id_card(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_organization_code(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_organization_code_certificate_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCodeCertificatePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_business_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_is_black(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBlack, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_is_install(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInstall, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_is_input(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInput, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_is_upload_province(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsUploadProvince, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_brigade_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_police_station_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoliceStationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_brigade_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_brigade_review_time(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_brigade_review_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_association_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_association_review_time(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_association_review_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_is_key_point(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsKeyPoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_enterprise_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_is_catalog(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCatalog, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_state(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_proxy_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProxyEnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_is_expire(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsExpire, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_credit_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_credit_level_remark(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreditLevelRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_superior_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperiorEnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_enterprise_code(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_enterprise_name(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_enterprise_address(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_fax_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FaxNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_operating_license_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingLicensePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_business_license_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicensePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_business_license_issuance_date(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicenseIssuanceDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_business_license_expiry_date(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicenseExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_legal_representative(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentative, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_legal_representative_phone(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativePhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_legal_representative_id_card_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativeIDCardPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_legal_representative_id_card(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativeIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_entrusted_agent(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_entrusted_agent_phone(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_entrusted_agent_id_card_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentIDCardPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_entrusted_agent_id_card(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_organization_code(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_organization_code_certificate_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCodeCertificatePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_business_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_is_black(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBlack, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_is_install(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInstall, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_is_input(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInput, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_is_upload_province(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsUploadProvince, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_brigade_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_police_station_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoliceStationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_brigade_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_brigade_review_time(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_brigade_review_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_association_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_association_review_time(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_association_review_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_is_key_point(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsKeyPoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_enterprise_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_is_catalog(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCatalog, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_state(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_proxy_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProxyEnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_is_expire(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsExpire, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_credit_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_credit_level_remark(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreditLevelRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_enterprise_muck_trunk_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseMuckTrunkID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_company_manager(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyManager, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_company_manager_phone(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyManagerPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_company_manager_id_card(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyManagerIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_company_safe_manager(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanySafeManager, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_company_safe_manger_phone(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanySafeMangerPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_company_safe_manager_id_card(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanySafeManagerIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_road_license(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_road_license_photo(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadLicensePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_office_address(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfficeAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_office_area(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfficeArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_office_photo(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfficePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_parking_address(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParkingAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_parking_area(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParkingArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_parking_single_area(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParkingSingleArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_smart_car_count(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SmartCarCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_is_transport_add(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTransportAdd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_county_check_state(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountyCheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_city_check_state(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityCheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_allow_generate_preview_num(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowGeneratePreviewNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_promise_book_url(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PromiseBookURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_promise_remark(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PromiseRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_transport_type(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransportType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_routeline_card_promise_photo(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoutelineCardPromisePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_transport_liable_promise_photo(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransportLiablePromisePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_is_type_a(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTypeA, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_is_type_b(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTypeB, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_is_type_c(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTypeC, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_is_type_d(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTypeD, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_is_type_e(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTypeE, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunk_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseMuckTrunk) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunk",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMuckTrunkAggregateFields)
	fc.Result = res
	return ec.marshalOEnterpriseMuckTrunkAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMuckTrunkAvgFields)
	fc.Result = res
	return ec.marshalOEnterpriseMuckTrunkAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMuckTrunkMaxFields)
	fc.Result = res
	return ec.marshalOEnterpriseMuckTrunkMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMuckTrunkMinFields)
	fc.Result = res
	return ec.marshalOEnterpriseMuckTrunkMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMuckTrunkStddevFields)
	fc.Result = res
	return ec.marshalOEnterpriseMuckTrunkStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMuckTrunkStddevPopFields)
	fc.Result = res
	return ec.marshalOEnterpriseMuckTrunkStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMuckTrunkStddevSampFields)
	fc.Result = res
	return ec.marshalOEnterpriseMuckTrunkStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMuckTrunkSumFields)
	fc.Result = res
	return ec.marshalOEnterpriseMuckTrunkSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMuckTrunkVarPopFields)
	fc.Result = res
	return ec.marshalOEnterpriseMuckTrunkVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMuckTrunkVarSampFields)
	fc.Result = res
	return ec.marshalOEnterpriseMuckTrunkVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMuckTrunkVarianceFields)
	fc.Result = res
	return ec.marshalOEnterpriseMuckTrunkVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkAvgFields_smart_car_count(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SmartCarCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkAvgFields_transport_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransportType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_enterprise_muck_trunk_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseMuckTrunkID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_company_manager(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyManager, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_company_manager_phone(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyManagerPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_company_manager_id_card(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyManagerIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_company_safe_manager(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanySafeManager, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_company_safe_manger_phone(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanySafeMangerPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_company_safe_manager_id_card(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanySafeManagerIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_road_license(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_road_license_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadLicensePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_office_address(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfficeAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_office_area(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfficeArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_office_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfficePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_parking_address(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParkingAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_parking_area(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParkingArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_parking_single_area(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParkingSingleArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_smart_car_count(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SmartCarCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_is_transport_add(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTransportAdd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_county_check_state(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountyCheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_city_check_state(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityCheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_allow_generate_preview_num(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowGeneratePreviewNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_promise_book_url(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PromiseBookURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_promise_remark(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PromiseRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_transport_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransportType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_routeline_card_promise_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoutelineCardPromisePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_transport_liable_promise_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransportLiablePromisePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_is_type_a(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTypeA, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_is_type_b(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTypeB, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_is_type_c(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTypeC, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_is_type_d(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTypeD, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_is_type_e(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTypeE, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_enterprise_muck_trunk_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseMuckTrunkID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_company_manager(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyManager, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_company_manager_phone(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyManagerPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_company_manager_id_card(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyManagerIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_company_safe_manager(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanySafeManager, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_company_safe_manger_phone(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanySafeMangerPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_company_safe_manager_id_card(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanySafeManagerIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_road_license(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_road_license_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadLicensePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_office_address(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfficeAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_office_area(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfficeArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_office_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfficePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_parking_address(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParkingAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_parking_area(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParkingArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_parking_single_area(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParkingSingleArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_smart_car_count(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SmartCarCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_is_transport_add(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTransportAdd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_county_check_state(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountyCheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_city_check_state(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityCheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_allow_generate_preview_num(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowGeneratePreviewNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_promise_book_url(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PromiseBookURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_promise_remark(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PromiseRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_transport_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransportType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_routeline_card_promise_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoutelineCardPromisePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_transport_liable_promise_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransportLiablePromisePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_is_type_a(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTypeA, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_is_type_b(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTypeB, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_is_type_c(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTypeC, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_is_type_d(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTypeD, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_is_type_e(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTypeE, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EnterpriseMuckTrunk)
	fc.Result = res
	return ec.marshalNEnterpriseMuckTrunk2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseMuckTrunkᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkStddevFields_smart_car_count(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SmartCarCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkStddevFields_transport_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransportType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkStddevPopFields_smart_car_count(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SmartCarCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkStddevPopFields_transport_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransportType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkStddevSampFields_smart_car_count(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SmartCarCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkStddevSampFields_transport_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransportType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkSumFields_smart_car_count(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SmartCarCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkSumFields_transport_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransportType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkVarPopFields_smart_car_count(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SmartCarCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkVarPopFields_transport_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransportType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkVarSampFields_smart_car_count(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SmartCarCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkVarSampFields_transport_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransportType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkVarianceFields_smart_car_count(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SmartCarCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMuckTrunkVarianceFields_transport_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMuckTrunkVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMuckTrunkVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransportType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.Enterprise)
	fc.Result = res
	return ec.marshalNEnterprise2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLog_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseScoreLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLog_log_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseScoreLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLog_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseScoreLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLog_current_score(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseScoreLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLog_add_score(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseScoreLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLog_content(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseScoreLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLog_file_url(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseScoreLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLog_score_set_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseScoreLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreSetID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLog_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseScoreLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLog_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseScoreLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLog_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseScoreLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLog_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseScoreLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLog_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseScoreLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLog_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseScoreLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLog_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseScoreLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreLogAggregateFields)
	fc.Result = res
	return ec.marshalOEnterpriseScoreLogAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreLogAvgFields)
	fc.Result = res
	return ec.marshalOEnterpriseScoreLogAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreLogMaxFields)
	fc.Result = res
	return ec.marshalOEnterpriseScoreLogMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreLogMinFields)
	fc.Result = res
	return ec.marshalOEnterpriseScoreLogMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreLogStddevFields)
	fc.Result = res
	return ec.marshalOEnterpriseScoreLogStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreLogStddevPopFields)
	fc.Result = res
	return ec.marshalOEnterpriseScoreLogStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreLogStddevSampFields)
	fc.Result = res
	return ec.marshalOEnterpriseScoreLogStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreLogSumFields)
	fc.Result = res
	return ec.marshalOEnterpriseScoreLogSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreLogVarPopFields)
	fc.Result = res
	return ec.marshalOEnterpriseScoreLogVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreLogVarSampFields)
	fc.Result = res
	return ec.marshalOEnterpriseScoreLogVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreLogVarianceFields)
	fc.Result = res
	return ec.marshalOEnterpriseScoreLogVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogAvgFields_current_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogAvgFields_add_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMaxFields_log_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMaxFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMaxFields_current_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMaxFields_add_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMaxFields_content(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMaxFields_file_url(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMaxFields_score_set_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreSetID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMaxFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMinFields_log_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMinFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMinFields_current_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMinFields_add_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMinFields_content(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMinFields_file_url(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMinFields_score_set_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreSetID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMinFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EnterpriseScoreLog)
	fc.Result = res
	return ec.marshalNEnterpriseScoreLog2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseScoreLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogStddevFields_current_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogStddevFields_add_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogStddevPopFields_current_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogStddevPopFields_add_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogStddevSampFields_current_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogStddevSampFields_add_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogSumFields_current_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogSumFields_add_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogVarPopFields_current_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogVarPopFields_add_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogVarSampFields_current_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogVarSampFields_add_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogVarianceFields_current_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreLogVarianceFields_add_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreLogVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSet_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseScoreSet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSet",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSet_score_set_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseScoreSet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSet",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreSetID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSet_content(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseScoreSet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSet",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSet_type(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseScoreSet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSet",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSet_score(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseScoreSet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSet",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSet_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseScoreSet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSet",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSet_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseScoreSet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSet",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSet_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseScoreSet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSet",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSet_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseScoreSet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSet",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSet_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseScoreSet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSet",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSet_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseScoreSet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSet",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSet_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseScoreSet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSet",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreSetAggregateFields)
	fc.Result = res
	return ec.marshalOEnterpriseScoreSetAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreSetAvgFields)
	fc.Result = res
	return ec.marshalOEnterpriseScoreSetAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreSetMaxFields)
	fc.Result = res
	return ec.marshalOEnterpriseScoreSetMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreSetMinFields)
	fc.Result = res
	return ec.marshalOEnterpriseScoreSetMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreSetStddevFields)
	fc.Result = res
	return ec.marshalOEnterpriseScoreSetStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreSetStddevPopFields)
	fc.Result = res
	return ec.marshalOEnterpriseScoreSetStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreSetStddevSampFields)
	fc.Result = res
	return ec.marshalOEnterpriseScoreSetStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreSetSumFields)
	fc.Result = res
	return ec.marshalOEnterpriseScoreSetSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreSetVarPopFields)
	fc.Result = res
	return ec.marshalOEnterpriseScoreSetVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreSetVarSampFields)
	fc.Result = res
	return ec.marshalOEnterpriseScoreSetVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreSetVarianceFields)
	fc.Result = res
	return ec.marshalOEnterpriseScoreSetVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetAvgFields_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetAvgFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetMaxFields_score_set_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreSetID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetMaxFields_content(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetMaxFields_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetMaxFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetMaxFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetMinFields_score_set_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreSetID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetMinFields_content(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetMinFields_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetMinFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetMinFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EnterpriseScoreSet)
	fc.Result = res
	return ec.marshalNEnterpriseScoreSet2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseScoreSetᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetStddevFields_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetStddevFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetStddevPopFields_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetStddevPopFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetStddevSampFields_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetStddevSampFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetSumFields_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetSumFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetVarPopFields_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetVarPopFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetVarSampFields_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetVarSampFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetVarianceFields_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseScoreSetVarianceFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseScoreSetVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseScoreSetVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHis_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseStateHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHis_state_his_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseStateHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StateHisID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHis_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseStateHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHis_reason(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseStateHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHis_state(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseStateHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHis_file_url(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseStateHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHis_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseStateHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHis_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseStateHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseStateHisAggregateFields)
	fc.Result = res
	return ec.marshalOEnterpriseStateHisAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseStateHisAvgFields)
	fc.Result = res
	return ec.marshalOEnterpriseStateHisAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseStateHisMaxFields)
	fc.Result = res
	return ec.marshalOEnterpriseStateHisMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseStateHisMinFields)
	fc.Result = res
	return ec.marshalOEnterpriseStateHisMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseStateHisStddevFields)
	fc.Result = res
	return ec.marshalOEnterpriseStateHisStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseStateHisStddevPopFields)
	fc.Result = res
	return ec.marshalOEnterpriseStateHisStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseStateHisStddevSampFields)
	fc.Result = res
	return ec.marshalOEnterpriseStateHisStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseStateHisSumFields)
	fc.Result = res
	return ec.marshalOEnterpriseStateHisSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseStateHisVarPopFields)
	fc.Result = res
	return ec.marshalOEnterpriseStateHisVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseStateHisVarSampFields)
	fc.Result = res
	return ec.marshalOEnterpriseStateHisVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseStateHisVarianceFields)
	fc.Result = res
	return ec.marshalOEnterpriseStateHisVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisAvgFields_state(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisMaxFields_state_his_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StateHisID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisMaxFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisMaxFields_reason(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisMaxFields_state(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisMaxFields_file_url(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisMinFields_state_his_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StateHisID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisMinFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisMinFields_reason(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisMinFields_state(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisMinFields_file_url(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EnterpriseStateHis)
	fc.Result = res
	return ec.marshalNEnterpriseStateHis2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseStateHisᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisStddevFields_state(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisStddevPopFields_state(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisStddevSampFields_state(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisSumFields_state(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisVarPopFields_state(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisVarSampFields_state(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStateHisVarianceFields_state(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStateHisVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStateHisVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevFields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevFields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevFields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevFields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevFields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevFields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevFields_enterprise_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevFields_state(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevFields_credit_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevPopFields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevPopFields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevPopFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevPopFields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevPopFields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevPopFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevPopFields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevPopFields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevPopFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevPopFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevPopFields_enterprise_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevPopFields_state(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevPopFields_credit_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevSampFields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevSampFields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevSampFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevSampFields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevSampFields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevSampFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevSampFields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevSampFields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevSampFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevSampFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevSampFields_enterprise_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevSampFields_state(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevSampFields_credit_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseSumFields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseSumFields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseSumFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseSumFields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseSumFields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseSumFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseSumFields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseSumFields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseSumFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseSumFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseSumFields_enterprise_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseSumFields_state(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseSumFields_credit_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkey_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseUkey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkey",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkey_ukey_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseUkey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkey",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UkeyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkey_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseUkey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkey",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkey_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseUkey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkey",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkey_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseUkey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkey",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkey_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseUkey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkey",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkey_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseUkey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkey",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkey_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseUkey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkey",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkey_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseUkey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkey",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkey_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseUkey) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkey",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseUkeyAggregateFields)
	fc.Result = res
	return ec.marshalOEnterpriseUkeyAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseUkeyAvgFields)
	fc.Result = res
	return ec.marshalOEnterpriseUkeyAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseUkeyMaxFields)
	fc.Result = res
	return ec.marshalOEnterpriseUkeyMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseUkeyMinFields)
	fc.Result = res
	return ec.marshalOEnterpriseUkeyMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseUkeyStddevFields)
	fc.Result = res
	return ec.marshalOEnterpriseUkeyStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseUkeyStddevPopFields)
	fc.Result = res
	return ec.marshalOEnterpriseUkeyStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseUkeyStddevSampFields)
	fc.Result = res
	return ec.marshalOEnterpriseUkeyStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseUkeySumFields)
	fc.Result = res
	return ec.marshalOEnterpriseUkeySumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeySumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseUkeyVarPopFields)
	fc.Result = res
	return ec.marshalOEnterpriseUkeyVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseUkeyVarSampFields)
	fc.Result = res
	return ec.marshalOEnterpriseUkeyVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseUkeyVarianceFields)
	fc.Result = res
	return ec.marshalOEnterpriseUkeyVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyMaxFields_ukey_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UkeyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyMaxFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyMaxFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyMinFields_ukey_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UkeyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyMinFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyMinFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EnterpriseUkey)
	fc.Result = res
	return ec.marshalNEnterpriseUkey2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseUkeyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeySumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeySumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeySumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseUkeyVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseUkeyVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseUkeyVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarPopFields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarPopFields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarPopFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarPopFields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarPopFields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarPopFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarPopFields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarPopFields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarPopFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarPopFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarPopFields_enterprise_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarPopFields_state(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarPopFields_credit_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarSampFields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarSampFields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarSampFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarSampFields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarSampFields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarSampFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarSampFields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarSampFields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarSampFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarSampFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarSampFields_enterprise_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarSampFields_state(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarSampFields_credit_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarianceFields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarianceFields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarianceFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarianceFields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarianceFields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarianceFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarianceFields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarianceFields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarianceFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarianceFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarianceFields_enterprise_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarianceFields_state(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarianceFields_credit_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_department(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_department_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDepartment(rctx, args["where"].(model.DepartmentBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentMutationResponse)
	fc.Result = res
	return ec.marshalODepartmentMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_department_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_department_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDepartmentByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Department)
	fc.Result = res
	return ec.marshalODepartment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_department(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_department_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDepartment(rctx, args["objects"].([]*model.DepartmentInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentMutationResponse)
	fc.Result = res
	return ec.marshalODepartmentMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_department_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_department_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDepartmentOne(rctx, args["objects"].(model.DepartmentInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Department)
	fc.Result = res
	return ec.marshalODepartment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_department(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_department_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDepartment(rctx, args["_inc"].(*model.DepartmentIncInput), args["_set"].(*model.DepartmentSetInput), args["where"].(model.DepartmentBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentMutationResponse)
	fc.Result = res
	return ec.marshalODepartmentMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_department_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_department_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDepartmentByPk(rctx, args["_inc"].(*model.DepartmentIncInput), args["_set"].(*model.DepartmentSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Department)
	fc.Result = res
	return ec.marshalODepartment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_department_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_department_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDepartmentByUnionPk(rctx, args["_inc"].(*model.DepartmentIncInput), args["_set"].(*model.DepartmentSetInput), args["department_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Department)
	fc.Result = res
	return ec.marshalODepartment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_department_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_department_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDepartmentByUnionPk(rctx, args["department_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Department)
	fc.Result = res
	return ec.marshalODepartment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterprise(rctx, args["where"].(model.EnterpriseBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Enterprise)
	fc.Result = res
	return ec.marshalOEnterprise2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterprise(rctx, args["objects"].([]*model.EnterpriseInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterpriseOne(rctx, args["objects"].(model.EnterpriseInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Enterprise)
	fc.Result = res
	return ec.marshalOEnterprise2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterprise(rctx, args["_inc"].(*model.EnterpriseIncInput), args["_set"].(*model.EnterpriseSetInput), args["where"].(model.EnterpriseBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseByPk(rctx, args["_inc"].(*model.EnterpriseIncInput), args["_set"].(*model.EnterpriseSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Enterprise)
	fc.Result = res
	return ec.marshalOEnterprise2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseByUnionPk(rctx, args["_inc"].(*model.EnterpriseIncInput), args["_set"].(*model.EnterpriseSetInput), args["enterprise_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Enterprise)
	fc.Result = res
	return ec.marshalOEnterprise2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseByUnionPk(rctx, args["enterprise_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Enterprise)
	fc.Result = res
	return ec.marshalOEnterprise2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_alarm_send_police(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_alarm_send_police_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseAlarmSendPolice(rctx, args["where"].(model.EnterpriseAlarmSendPoliceBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPoliceMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_alarm_send_police_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_alarm_send_police_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseAlarmSendPoliceByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseAlarmSendPolice)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPolice2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseAlarmSendPolice(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise_alarm_send_police(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_alarm_send_police_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterpriseAlarmSendPolice(rctx, args["objects"].([]*model.EnterpriseAlarmSendPoliceInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPoliceMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise_alarm_send_police_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_alarm_send_police_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterpriseAlarmSendPoliceOne(rctx, args["objects"].(model.EnterpriseAlarmSendPoliceInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseAlarmSendPolice)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPolice2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseAlarmSendPolice(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_alarm_send_police(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_alarm_send_police_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseAlarmSendPolice(rctx, args["_inc"].(*model.EnterpriseAlarmSendPoliceIncInput), args["_set"].(*model.EnterpriseAlarmSendPoliceSetInput), args["where"].(model.EnterpriseAlarmSendPoliceBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPoliceMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_alarm_send_police_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_alarm_send_police_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseAlarmSendPoliceByPk(rctx, args["_inc"].(*model.EnterpriseAlarmSendPoliceIncInput), args["_set"].(*model.EnterpriseAlarmSendPoliceSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseAlarmSendPolice)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPolice2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseAlarmSendPolice(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_alarm_send_police_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_alarm_send_police_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseAlarmSendPoliceByUnionPk(rctx, args["_inc"].(*model.EnterpriseAlarmSendPoliceIncInput), args["_set"].(*model.EnterpriseAlarmSendPoliceSetInput), args["enterprise_alarm_send_police_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseAlarmSendPolice)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPolice2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseAlarmSendPolice(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_alarm_send_police_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_alarm_send_police_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseAlarmSendPoliceByUnionPk(rctx, args["enterprise_alarm_send_police_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseAlarmSendPolice)
	fc.Result = res
	return ec.marshalOEnterpriseAlarmSendPolice2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseAlarmSendPolice(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_contact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_contact_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseContact(rctx, args["where"].(model.EnterpriseContactBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseContactMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseContactMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_contact_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_contact_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseContactByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseContact)
	fc.Result = res
	return ec.marshalOEnterpriseContact2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseContact(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise_contact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_contact_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterpriseContact(rctx, args["objects"].([]*model.EnterpriseContactInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseContactMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseContactMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise_contact_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_contact_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterpriseContactOne(rctx, args["objects"].(model.EnterpriseContactInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseContact)
	fc.Result = res
	return ec.marshalOEnterpriseContact2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseContact(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_contact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_contact_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseContact(rctx, args["_inc"].(*model.EnterpriseContactIncInput), args["_set"].(*model.EnterpriseContactSetInput), args["where"].(model.EnterpriseContactBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseContactMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseContactMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_contact_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_contact_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseContactByPk(rctx, args["_inc"].(*model.EnterpriseContactIncInput), args["_set"].(*model.EnterpriseContactSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseContact)
	fc.Result = res
	return ec.marshalOEnterpriseContact2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseContact(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_contact_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_contact_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseContactByUnionPk(rctx, args["_inc"].(*model.EnterpriseContactIncInput), args["_set"].(*model.EnterpriseContactSetInput), args["contact_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseContact)
	fc.Result = res
	return ec.marshalOEnterpriseContact2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseContact(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_contact_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_contact_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseContactByUnionPk(rctx, args["contact_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseContact)
	fc.Result = res
	return ec.marshalOEnterpriseContact2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseContact(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_muck_trunk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_muck_trunk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseMuckTrunk(rctx, args["where"].(model.EnterpriseMuckTrunkBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMuckTrunkMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseMuckTrunkMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_muck_trunk_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_muck_trunk_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseMuckTrunkByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseMuckTrunk)
	fc.Result = res
	return ec.marshalOEnterpriseMuckTrunk2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseMuckTrunk(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise_muck_trunk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_muck_trunk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterpriseMuckTrunk(rctx, args["objects"].([]*model.EnterpriseMuckTrunkInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMuckTrunkMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseMuckTrunkMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise_muck_trunk_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_muck_trunk_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterpriseMuckTrunkOne(rctx, args["objects"].(model.EnterpriseMuckTrunkInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseMuckTrunk)
	fc.Result = res
	return ec.marshalOEnterpriseMuckTrunk2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseMuckTrunk(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_muck_trunk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_muck_trunk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseMuckTrunk(rctx, args["_inc"].(*model.EnterpriseMuckTrunkIncInput), args["_set"].(*model.EnterpriseMuckTrunkSetInput), args["where"].(model.EnterpriseMuckTrunkBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMuckTrunkMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseMuckTrunkMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_muck_trunk_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_muck_trunk_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseMuckTrunkByPk(rctx, args["_inc"].(*model.EnterpriseMuckTrunkIncInput), args["_set"].(*model.EnterpriseMuckTrunkSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseMuckTrunk)
	fc.Result = res
	return ec.marshalOEnterpriseMuckTrunk2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseMuckTrunk(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_muck_trunk_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_muck_trunk_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseMuckTrunkByUnionPk(rctx, args["_inc"].(*model.EnterpriseMuckTrunkIncInput), args["_set"].(*model.EnterpriseMuckTrunkSetInput), args["enterprise_muck_trunk_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseMuckTrunk)
	fc.Result = res
	return ec.marshalOEnterpriseMuckTrunk2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseMuckTrunk(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_muck_trunk_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_muck_trunk_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseMuckTrunkByUnionPk(rctx, args["enterprise_muck_trunk_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseMuckTrunk)
	fc.Result = res
	return ec.marshalOEnterpriseMuckTrunk2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseMuckTrunk(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_score_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_score_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseScoreLog(rctx, args["where"].(model.EnterpriseScoreLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreLogMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseScoreLogMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_score_log_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_score_log_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseScoreLogByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseScoreLog)
	fc.Result = res
	return ec.marshalOEnterpriseScoreLog2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseScoreLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise_score_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_score_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterpriseScoreLog(rctx, args["objects"].([]*model.EnterpriseScoreLogInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreLogMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseScoreLogMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise_score_log_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_score_log_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterpriseScoreLogOne(rctx, args["objects"].(model.EnterpriseScoreLogInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseScoreLog)
	fc.Result = res
	return ec.marshalOEnterpriseScoreLog2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseScoreLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_score_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_score_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseScoreLog(rctx, args["_inc"].(*model.EnterpriseScoreLogIncInput), args["_set"].(*model.EnterpriseScoreLogSetInput), args["where"].(model.EnterpriseScoreLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreLogMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseScoreLogMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_score_log_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_score_log_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseScoreLogByPk(rctx, args["_inc"].(*model.EnterpriseScoreLogIncInput), args["_set"].(*model.EnterpriseScoreLogSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseScoreLog)
	fc.Result = res
	return ec.marshalOEnterpriseScoreLog2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseScoreLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_score_log_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_score_log_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseScoreLogByUnionPk(rctx, args["_inc"].(*model.EnterpriseScoreLogIncInput), args["_set"].(*model.EnterpriseScoreLogSetInput), args["log_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseScoreLog)
	fc.Result = res
	return ec.marshalOEnterpriseScoreLog2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseScoreLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_score_log_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_score_log_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseScoreLogByUnionPk(rctx, args["log_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseScoreLog)
	fc.Result = res
	return ec.marshalOEnterpriseScoreLog2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseScoreLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_score_set(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_score_set_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseScoreSet(rctx, args["where"].(model.EnterpriseScoreSetBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreSetMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseScoreSetMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_score_set_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_score_set_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseScoreSetByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseScoreSet)
	fc.Result = res
	return ec.marshalOEnterpriseScoreSet2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseScoreSet(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise_score_set(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_score_set_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterpriseScoreSet(rctx, args["objects"].([]*model.EnterpriseScoreSetInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreSetMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseScoreSetMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise_score_set_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_score_set_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterpriseScoreSetOne(rctx, args["objects"].(model.EnterpriseScoreSetInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseScoreSet)
	fc.Result = res
	return ec.marshalOEnterpriseScoreSet2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseScoreSet(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_score_set(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_score_set_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseScoreSet(rctx, args["_inc"].(*model.EnterpriseScoreSetIncInput), args["_set"].(*model.EnterpriseScoreSetSetInput), args["where"].(model.EnterpriseScoreSetBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreSetMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseScoreSetMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_score_set_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_score_set_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseScoreSetByPk(rctx, args["_inc"].(*model.EnterpriseScoreSetIncInput), args["_set"].(*model.EnterpriseScoreSetSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseScoreSet)
	fc.Result = res
	return ec.marshalOEnterpriseScoreSet2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseScoreSet(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_score_set_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_score_set_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseScoreSetByUnionPk(rctx, args["_inc"].(*model.EnterpriseScoreSetIncInput), args["_set"].(*model.EnterpriseScoreSetSetInput), args["score_set_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseScoreSet)
	fc.Result = res
	return ec.marshalOEnterpriseScoreSet2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseScoreSet(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_score_set_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_score_set_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseScoreSetByUnionPk(rctx, args["score_set_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseScoreSet)
	fc.Result = res
	return ec.marshalOEnterpriseScoreSet2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseScoreSet(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_state_his(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_state_his_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseStateHis(rctx, args["where"].(model.EnterpriseStateHisBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseStateHisMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseStateHisMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_state_his_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_state_his_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseStateHisByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseStateHis)
	fc.Result = res
	return ec.marshalOEnterpriseStateHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseStateHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise_state_his(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_state_his_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterpriseStateHis(rctx, args["objects"].([]*model.EnterpriseStateHisInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseStateHisMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseStateHisMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise_state_his_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_state_his_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterpriseStateHisOne(rctx, args["objects"].(model.EnterpriseStateHisInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseStateHis)
	fc.Result = res
	return ec.marshalOEnterpriseStateHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseStateHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_state_his(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_state_his_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseStateHis(rctx, args["_inc"].(*model.EnterpriseStateHisIncInput), args["_set"].(*model.EnterpriseStateHisSetInput), args["where"].(model.EnterpriseStateHisBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseStateHisMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseStateHisMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_state_his_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_state_his_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseStateHisByPk(rctx, args["_inc"].(*model.EnterpriseStateHisIncInput), args["_set"].(*model.EnterpriseStateHisSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseStateHis)
	fc.Result = res
	return ec.marshalOEnterpriseStateHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseStateHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_state_his_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_state_his_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseStateHisByUnionPk(rctx, args["_inc"].(*model.EnterpriseStateHisIncInput), args["_set"].(*model.EnterpriseStateHisSetInput), args["state_his_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseStateHis)
	fc.Result = res
	return ec.marshalOEnterpriseStateHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseStateHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_state_his_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_state_his_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseStateHisByUnionPk(rctx, args["state_his_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseStateHis)
	fc.Result = res
	return ec.marshalOEnterpriseStateHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseStateHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_ukey(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_ukey_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseUkey(rctx, args["where"].(model.EnterpriseUkeyBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseUkeyMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseUkeyMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_ukey_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_ukey_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseUkeyByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseUkey)
	fc.Result = res
	return ec.marshalOEnterpriseUkey2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseUkey(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise_ukey(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_ukey_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterpriseUkey(rctx, args["objects"].([]*model.EnterpriseUkeyInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseUkeyMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseUkeyMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise_ukey_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_ukey_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterpriseUkeyOne(rctx, args["objects"].(model.EnterpriseUkeyInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseUkey)
	fc.Result = res
	return ec.marshalOEnterpriseUkey2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseUkey(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_ukey(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_ukey_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseUkey(rctx, args["_inc"].(*model.EnterpriseUkeyIncInput), args["_set"].(*model.EnterpriseUkeySetInput), args["where"].(model.EnterpriseUkeyBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseUkeyMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseUkeyMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_ukey_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_ukey_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseUkeyByPk(rctx, args["_inc"].(*model.EnterpriseUkeyIncInput), args["_set"].(*model.EnterpriseUkeySetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseUkey)
	fc.Result = res
	return ec.marshalOEnterpriseUkey2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseUkey(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_ukey_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_ukey_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseUkeyByUnionPk(rctx, args["_inc"].(*model.EnterpriseUkeyIncInput), args["_set"].(*model.EnterpriseUkeySetInput), args["ukey_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseUkey)
	fc.Result = res
	return ec.marshalOEnterpriseUkey2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseUkey(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_ukey_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_ukey_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseUkeyByUnionPk(rctx, args["ukey_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseUkey)
	fc.Result = res
	return ec.marshalOEnterpriseUkey2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseUkey(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_system_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_system_user_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSystemUser(rctx, args["where"].(model.SystemUserBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserMutationResponse)
	fc.Result = res
	return ec.marshalOSystemUserMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_system_user_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_system_user_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSystemUserByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SystemUser)
	fc.Result = res
	return ec.marshalOSystemUser2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_system_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_system_user_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertSystemUser(rctx, args["objects"].([]*model.SystemUserInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserMutationResponse)
	fc.Result = res
	return ec.marshalOSystemUserMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_system_user_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_system_user_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertSystemUserOne(rctx, args["objects"].(model.SystemUserInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SystemUser)
	fc.Result = res
	return ec.marshalOSystemUser2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_system_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_system_user_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSystemUser(rctx, args["_inc"].(*model.SystemUserIncInput), args["_set"].(*model.SystemUserSetInput), args["where"].(model.SystemUserBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserMutationResponse)
	fc.Result = res
	return ec.marshalOSystemUserMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_system_user_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_system_user_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSystemUserByPk(rctx, args["_inc"].(*model.SystemUserIncInput), args["_set"].(*model.SystemUserSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SystemUser)
	fc.Result = res
	return ec.marshalOSystemUser2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_system_user_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_system_user_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSystemUserByUnionPk(rctx, args["_inc"].(*model.SystemUserIncInput), args["_set"].(*model.SystemUserSetInput), args["user_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SystemUser)
	fc.Result = res
	return ec.marshalOSystemUser2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_system_user_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_system_user_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSystemUserByUnionPk(rctx, args["user_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SystemUser)
	fc.Result = res
	return ec.marshalOSystemUser2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_department(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_department_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Department(rctx, args["distinct_on"].([]model.DepartmentSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DepartmentOrderBy), args["where"].(*model.DepartmentBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.Department)
	fc.Result = res
	return ec.marshalNDepartment2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_department_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_department_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DepartmentAggregate(rctx, args["distinct_on"].([]model.DepartmentSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DepartmentOrderBy), args["where"].(*model.DepartmentBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentAggregate)
	fc.Result = res
	return ec.marshalNDepartmentAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_department_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_department_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DepartmentByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.Department)
	fc.Result = res
	return ec.marshalNDepartment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_department_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_department_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DepartmentByUnionPk(rctx, args["department_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.Department)
	fc.Result = res
	return ec.marshalNDepartment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Enterprise(rctx, args["distinct_on"].([]model.EnterpriseSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseOrderBy), args["where"].(*model.EnterpriseBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.Enterprise)
	fc.Result = res
	return ec.marshalNEnterprise2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseAggregate(rctx, args["distinct_on"].([]model.EnterpriseSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseOrderBy), args["where"].(*model.EnterpriseBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAggregate)
	fc.Result = res
	return ec.marshalNEnterpriseAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.Enterprise)
	fc.Result = res
	return ec.marshalNEnterprise2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseByUnionPk(rctx, args["enterprise_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.Enterprise)
	fc.Result = res
	return ec.marshalNEnterprise2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_alarm_send_police(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_alarm_send_police_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseAlarmSendPolice(rctx, args["distinct_on"].([]model.EnterpriseAlarmSendPoliceSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseAlarmSendPoliceOrderBy), args["where"].(*model.EnterpriseAlarmSendPoliceBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EnterpriseAlarmSendPolice)
	fc.Result = res
	return ec.marshalNEnterpriseAlarmSendPolice2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseAlarmSendPoliceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_alarm_send_police_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_alarm_send_police_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseAlarmSendPoliceAggregate(rctx, args["distinct_on"].([]model.EnterpriseAlarmSendPoliceSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseAlarmSendPoliceOrderBy), args["where"].(*model.EnterpriseAlarmSendPoliceBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAlarmSendPoliceAggregate)
	fc.Result = res
	return ec.marshalNEnterpriseAlarmSendPoliceAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_alarm_send_police_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_alarm_send_police_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseAlarmSendPoliceByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseAlarmSendPolice)
	fc.Result = res
	return ec.marshalNEnterpriseAlarmSendPolice2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseAlarmSendPolice(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_alarm_send_police_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_alarm_send_police_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseAlarmSendPoliceByUnionPk(rctx, args["enterprise_alarm_send_police_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseAlarmSendPolice)
	fc.Result = res
	return ec.marshalNEnterpriseAlarmSendPolice2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseAlarmSendPolice(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_contact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_contact_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseContact(rctx, args["distinct_on"].([]model.EnterpriseContactSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseContactOrderBy), args["where"].(*model.EnterpriseContactBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EnterpriseContact)
	fc.Result = res
	return ec.marshalNEnterpriseContact2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseContactᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_contact_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_contact_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseContactAggregate(rctx, args["distinct_on"].([]model.EnterpriseContactSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseContactOrderBy), args["where"].(*model.EnterpriseContactBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseContactAggregate)
	fc.Result = res
	return ec.marshalNEnterpriseContactAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_contact_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_contact_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseContactByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseContact)
	fc.Result = res
	return ec.marshalNEnterpriseContact2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseContact(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_contact_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_contact_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseContactByUnionPk(rctx, args["contact_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseContact)
	fc.Result = res
	return ec.marshalNEnterpriseContact2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseContact(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_muck_trunk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_muck_trunk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseMuckTrunk(rctx, args["distinct_on"].([]model.EnterpriseMuckTrunkSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseMuckTrunkOrderBy), args["where"].(*model.EnterpriseMuckTrunkBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EnterpriseMuckTrunk)
	fc.Result = res
	return ec.marshalNEnterpriseMuckTrunk2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseMuckTrunkᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_muck_trunk_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_muck_trunk_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseMuckTrunkAggregate(rctx, args["distinct_on"].([]model.EnterpriseMuckTrunkSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseMuckTrunkOrderBy), args["where"].(*model.EnterpriseMuckTrunkBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMuckTrunkAggregate)
	fc.Result = res
	return ec.marshalNEnterpriseMuckTrunkAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_muck_trunk_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_muck_trunk_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseMuckTrunkByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseMuckTrunk)
	fc.Result = res
	return ec.marshalNEnterpriseMuckTrunk2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseMuckTrunk(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_muck_trunk_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_muck_trunk_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseMuckTrunkByUnionPk(rctx, args["enterprise_muck_trunk_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseMuckTrunk)
	fc.Result = res
	return ec.marshalNEnterpriseMuckTrunk2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseMuckTrunk(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_score_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_score_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseScoreLog(rctx, args["distinct_on"].([]model.EnterpriseScoreLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseScoreLogOrderBy), args["where"].(*model.EnterpriseScoreLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EnterpriseScoreLog)
	fc.Result = res
	return ec.marshalNEnterpriseScoreLog2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseScoreLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_score_log_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_score_log_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseScoreLogAggregate(rctx, args["distinct_on"].([]model.EnterpriseScoreLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseScoreLogOrderBy), args["where"].(*model.EnterpriseScoreLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreLogAggregate)
	fc.Result = res
	return ec.marshalNEnterpriseScoreLogAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_score_log_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_score_log_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseScoreLogByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseScoreLog)
	fc.Result = res
	return ec.marshalNEnterpriseScoreLog2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseScoreLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_score_log_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_score_log_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseScoreLogByUnionPk(rctx, args["log_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseScoreLog)
	fc.Result = res
	return ec.marshalNEnterpriseScoreLog2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseScoreLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_score_set(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_score_set_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseScoreSet(rctx, args["distinct_on"].([]model.EnterpriseScoreSetSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseScoreSetOrderBy), args["where"].(*model.EnterpriseScoreSetBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EnterpriseScoreSet)
	fc.Result = res
	return ec.marshalNEnterpriseScoreSet2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseScoreSetᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_score_set_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_score_set_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseScoreSetAggregate(rctx, args["distinct_on"].([]model.EnterpriseScoreSetSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseScoreSetOrderBy), args["where"].(*model.EnterpriseScoreSetBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseScoreSetAggregate)
	fc.Result = res
	return ec.marshalNEnterpriseScoreSetAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_score_set_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_score_set_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseScoreSetByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseScoreSet)
	fc.Result = res
	return ec.marshalNEnterpriseScoreSet2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseScoreSet(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_score_set_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_score_set_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseScoreSetByUnionPk(rctx, args["score_set_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseScoreSet)
	fc.Result = res
	return ec.marshalNEnterpriseScoreSet2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseScoreSet(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_state_his(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_state_his_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseStateHis(rctx, args["distinct_on"].([]model.EnterpriseStateHisSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseStateHisOrderBy), args["where"].(*model.EnterpriseStateHisBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EnterpriseStateHis)
	fc.Result = res
	return ec.marshalNEnterpriseStateHis2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseStateHisᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_state_his_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_state_his_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseStateHisAggregate(rctx, args["distinct_on"].([]model.EnterpriseStateHisSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseStateHisOrderBy), args["where"].(*model.EnterpriseStateHisBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseStateHisAggregate)
	fc.Result = res
	return ec.marshalNEnterpriseStateHisAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_state_his_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_state_his_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseStateHisByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseStateHis)
	fc.Result = res
	return ec.marshalNEnterpriseStateHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseStateHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_state_his_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_state_his_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseStateHisByUnionPk(rctx, args["state_his_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseStateHis)
	fc.Result = res
	return ec.marshalNEnterpriseStateHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseStateHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_ukey(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_ukey_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseUkey(rctx, args["distinct_on"].([]model.EnterpriseUkeySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseUkeyOrderBy), args["where"].(*model.EnterpriseUkeyBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EnterpriseUkey)
	fc.Result = res
	return ec.marshalNEnterpriseUkey2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseUkeyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_ukey_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_ukey_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseUkeyAggregate(rctx, args["distinct_on"].([]model.EnterpriseUkeySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseUkeyOrderBy), args["where"].(*model.EnterpriseUkeyBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseUkeyAggregate)
	fc.Result = res
	return ec.marshalNEnterpriseUkeyAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_ukey_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_ukey_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseUkeyByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseUkey)
	fc.Result = res
	return ec.marshalNEnterpriseUkey2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseUkey(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_ukey_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_ukey_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseUkeyByUnionPk(rctx, args["ukey_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseUkey)
	fc.Result = res
	return ec.marshalNEnterpriseUkey2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseUkey(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_system_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_system_user_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SystemUser(rctx, args["distinct_on"].([]model.SystemUserSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SystemUserOrderBy), args["where"].(*model.SystemUserBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.SystemUser)
	fc.Result = res
	return ec.marshalNSystemUser2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_system_user_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_system_user_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SystemUserAggregate(rctx, args["distinct_on"].([]model.SystemUserSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SystemUserOrderBy), args["where"].(*model.SystemUserBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserAggregate)
	fc.Result = res
	return ec.marshalNSystemUserAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_system_user_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_system_user_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SystemUserByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.SystemUser)
	fc.Result = res
	return ec.marshalNSystemUser2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_system_user_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_system_user_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SystemUserByUnionPk(rctx, args["user_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.SystemUser)
	fc.Result = res
	return ec.marshalNSystemUser2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_id(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_user_id(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_password(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Password, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_uername(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Uername, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_department_id(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_grade(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_audit_level(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_user_type(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_is_valid(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsValid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_user_state(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_ip_address(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_is_bind_ip(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBindIP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_email(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_telephone(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_mobile(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mobile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_ukey(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ukey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_mkey(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mkey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_app_version(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserAggregateFields)
	fc.Result = res
	return ec.marshalOSystemUserAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserAvgFields)
	fc.Result = res
	return ec.marshalOSystemUserAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserMaxFields)
	fc.Result = res
	return ec.marshalOSystemUserMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserMinFields)
	fc.Result = res
	return ec.marshalOSystemUserMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserStddevFields)
	fc.Result = res
	return ec.marshalOSystemUserStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserStddevPopFields)
	fc.Result = res
	return ec.marshalOSystemUserStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserStddevSampFields)
	fc.Result = res
	return ec.marshalOSystemUserStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserSumFields)
	fc.Result = res
	return ec.marshalOSystemUserSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserVarPopFields)
	fc.Result = res
	return ec.marshalOSystemUserVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserVarSampFields)
	fc.Result = res
	return ec.marshalOSystemUserVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserVarianceFields)
	fc.Result = res
	return ec.marshalOSystemUserVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAvgFields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAvgFields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAvgFields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAvgFields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_user_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_password(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Password, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_uername(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Uername, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_department_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_is_valid(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsValid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_ip_address(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_is_bind_ip(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBindIP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_email(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_telephone(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_mobile(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mobile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_ukey(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ukey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_mkey(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mkey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_app_version(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_user_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_password(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Password, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_uername(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Uername, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_department_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_is_valid(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsValid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_ip_address(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_is_bind_ip(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBindIP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_email(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_telephone(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_mobile(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mobile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_ukey(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ukey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_mkey(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mkey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_app_version(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.SystemUser)
	fc.Result = res
	return ec.marshalNSystemUser2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevFields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevFields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevFields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevFields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevPopFields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevPopFields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevPopFields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevPopFields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevSampFields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevSampFields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevSampFields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevSampFields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserSumFields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserSumFields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserSumFields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserSumFields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarPopFields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarPopFields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarPopFields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarPopFields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarSampFields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarSampFields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarSampFields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarSampFields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarianceFields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarianceFields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarianceFields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarianceFields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBigintComparisonExp(ctx context.Context, obj interface{}) (model2.BigintComparisonExp, error) {
	var it model2.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBooleanComparisonExp(ctx context.Context, obj interface{}) (model2.BooleanComparisonExp, error) {
	var it model2.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentBoolExp(ctx context.Context, obj interface{}) (model.DepartmentBoolExp, error) {
	var it model.DepartmentBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalODepartmentBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalODepartmentBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalODepartmentBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_department_id"))
			it.SuperiorDepartmentID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_name"))
			it.DepartmentName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_code"))
			it.DepartmentCode, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentIncInput(ctx context.Context, obj interface{}) (model.DepartmentIncInput, error) {
	var it model.DepartmentIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentInsertInput(ctx context.Context, obj interface{}) (model.DepartmentInsertInput, error) {
	var it model.DepartmentInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_department_id"))
			it.SuperiorDepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_name"))
			it.DepartmentName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_code"))
			it.DepartmentCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentOrderBy(ctx context.Context, obj interface{}) (model.DepartmentOrderBy, error) {
	var it model.DepartmentOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_department_id"))
			it.SuperiorDepartmentID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_name"))
			it.DepartmentName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_code"))
			it.DepartmentCode, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentSetInput(ctx context.Context, obj interface{}) (model.DepartmentSetInput, error) {
	var it model.DepartmentSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_department_id"))
			it.SuperiorDepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_name"))
			it.DepartmentName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_code"))
			it.DepartmentCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseAlarmSendPoliceBoolExp(ctx context.Context, obj interface{}) (model.EnterpriseAlarmSendPoliceBoolExp, error) {
	var it model.EnterpriseAlarmSendPoliceBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOEnterpriseAlarmSendPoliceBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOEnterpriseAlarmSendPoliceBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOEnterpriseAlarmSendPoliceBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_alarm_send_police_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_alarm_send_police_id"))
			it.EnterpriseAlarmSendPoliceID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_contact":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_contact"))
			it.EnterpriseContact, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_phone"))
			it.EnterprisePhone, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "police":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police"))
			it.Police, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "police_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police_phone"))
			it.PolicePhone, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "phlice_department":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phlice_department"))
			it.PhliceDepartment, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseAlarmSendPoliceIncInput(ctx context.Context, obj interface{}) (model.EnterpriseAlarmSendPoliceIncInput, error) {
	var it model.EnterpriseAlarmSendPoliceIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseAlarmSendPoliceInsertInput(ctx context.Context, obj interface{}) (model.EnterpriseAlarmSendPoliceInsertInput, error) {
	var it model.EnterpriseAlarmSendPoliceInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "enterprise_alarm_send_police_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_alarm_send_police_id"))
			it.EnterpriseAlarmSendPoliceID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_contact":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_contact"))
			it.EnterpriseContact, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_phone"))
			it.EnterprisePhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "police":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police"))
			it.Police, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "police_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police_phone"))
			it.PolicePhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phlice_department":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phlice_department"))
			it.PhliceDepartment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseAlarmSendPoliceOrderBy(ctx context.Context, obj interface{}) (model.EnterpriseAlarmSendPoliceOrderBy, error) {
	var it model.EnterpriseAlarmSendPoliceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_alarm_send_police_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_alarm_send_police_id"))
			it.EnterpriseAlarmSendPoliceID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_contact":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_contact"))
			it.EnterpriseContact, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_phone"))
			it.EnterprisePhone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "police":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police"))
			it.Police, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "police_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police_phone"))
			it.PolicePhone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "phlice_department":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phlice_department"))
			it.PhliceDepartment, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseAlarmSendPoliceSetInput(ctx context.Context, obj interface{}) (model.EnterpriseAlarmSendPoliceSetInput, error) {
	var it model.EnterpriseAlarmSendPoliceSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_alarm_send_police_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_alarm_send_police_id"))
			it.EnterpriseAlarmSendPoliceID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_contact":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_contact"))
			it.EnterpriseContact, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_phone"))
			it.EnterprisePhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "police":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police"))
			it.Police, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "police_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police_phone"))
			it.PolicePhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phlice_department":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phlice_department"))
			it.PhliceDepartment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseBoolExp(ctx context.Context, obj interface{}) (model.EnterpriseBoolExp, error) {
	var it model.EnterpriseBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOEnterpriseBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOEnterpriseBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOEnterpriseBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_enterprise_id"))
			it.SuperiorEnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_code"))
			it.EnterpriseCode, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_address"))
			it.EnterpriseAddress, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "fax_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fax_number"))
			it.FaxNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_license_photo"))
			it.OperatingLicensePhoto, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_photo"))
			it.BusinessLicensePhoto, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_issuance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_issuance_date"))
			it.BusinessLicenseIssuanceDate, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_expiry_date"))
			it.BusinessLicenseExpiryDate, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative"))
			it.LegalRepresentative, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_phone"))
			it.LegalRepresentativePhone, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card_photo"))
			it.LegalRepresentativeIDCardPhoto, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card"))
			it.LegalRepresentativeIDCard, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent"))
			it.EntrustedAgent, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_phone"))
			it.EntrustedAgentPhone, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card_photo"))
			it.EntrustedAgentIDCardPhoto, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card"))
			it.EntrustedAgentIDCard, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code_certificate_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code_certificate_photo"))
			it.OrganizationCodeCertificatePhoto, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_photo"))
			it.BusinessPhoto, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_black":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_black"))
			it.IsBlack, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_install":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_install"))
			it.IsInstall, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_upload_province":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_upload_province"))
			it.IsUploadProvince, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_id"))
			it.BrigadeID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "police_station_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police_station_id"))
			it.PoliceStationID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_opinion"))
			it.BrigadeReviewOpinion, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_time"))
			it.BrigadeReviewTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_by"))
			it.BrigadeReviewBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_opinion"))
			it.AssociationReviewOpinion, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_time"))
			it.AssociationReviewTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_by"))
			it.AssociationReviewBy, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_key_point":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_key_point"))
			it.IsKeyPoint, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_type"))
			it.EnterpriseType, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_catalog":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_catalog"))
			it.IsCatalog, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "proxy_enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proxy_enterprise_id"))
			it.ProxyEnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_expire":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_expire"))
			it.IsExpire, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "credit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("credit_level"))
			it.CreditLevel, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "credit_level_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("credit_level_remark"))
			it.CreditLevelRemark, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseContactBoolExp(ctx context.Context, obj interface{}) (model.EnterpriseContactBoolExp, error) {
	var it model.EnterpriseContactBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOEnterpriseContactBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOEnterpriseContactBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOEnterpriseContactBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_id"))
			it.ContactID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile"))
			it.Mobile, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort_num"))
			it.SortNum, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseContactIncInput(ctx context.Context, obj interface{}) (model.EnterpriseContactIncInput, error) {
	var it model.EnterpriseContactIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort_num"))
			it.SortNum, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseContactInsertInput(ctx context.Context, obj interface{}) (model.EnterpriseContactInsertInput, error) {
	var it model.EnterpriseContactInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "contact_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_id"))
			it.ContactID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile"))
			it.Mobile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort_num"))
			it.SortNum, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseContactOrderBy(ctx context.Context, obj interface{}) (model.EnterpriseContactOrderBy, error) {
	var it model.EnterpriseContactOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_id"))
			it.ContactID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile"))
			it.Mobile, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort_num"))
			it.SortNum, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseContactSetInput(ctx context.Context, obj interface{}) (model.EnterpriseContactSetInput, error) {
	var it model.EnterpriseContactSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_id"))
			it.ContactID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile"))
			it.Mobile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort_num"))
			it.SortNum, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseIncInput(ctx context.Context, obj interface{}) (model.EnterpriseIncInput, error) {
	var it model.EnterpriseIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_type"))
			it.EnterpriseType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "credit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("credit_level"))
			it.CreditLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseInsertInput(ctx context.Context, obj interface{}) (model.EnterpriseInsertInput, error) {
	var it model.EnterpriseInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_enterprise_id"))
			it.SuperiorEnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_code"))
			it.EnterpriseCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_address"))
			it.EnterpriseAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "fax_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fax_number"))
			it.FaxNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_license_photo"))
			it.OperatingLicensePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_photo"))
			it.BusinessLicensePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_issuance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_issuance_date"))
			it.BusinessLicenseIssuanceDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_expiry_date"))
			it.BusinessLicenseExpiryDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative"))
			it.LegalRepresentative, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_phone"))
			it.LegalRepresentativePhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card_photo"))
			it.LegalRepresentativeIDCardPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card"))
			it.LegalRepresentativeIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent"))
			it.EntrustedAgent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_phone"))
			it.EntrustedAgentPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card_photo"))
			it.EntrustedAgentIDCardPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card"))
			it.EntrustedAgentIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code_certificate_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code_certificate_photo"))
			it.OrganizationCodeCertificatePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_photo"))
			it.BusinessPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_black":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_black"))
			it.IsBlack, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_install":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_install"))
			it.IsInstall, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_upload_province":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_upload_province"))
			it.IsUploadProvince, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_id"))
			it.BrigadeID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "police_station_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police_station_id"))
			it.PoliceStationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_opinion"))
			it.BrigadeReviewOpinion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_time"))
			it.BrigadeReviewTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_by"))
			it.BrigadeReviewBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_opinion"))
			it.AssociationReviewOpinion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_time"))
			it.AssociationReviewTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_by"))
			it.AssociationReviewBy, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_key_point":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_key_point"))
			it.IsKeyPoint, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_type"))
			it.EnterpriseType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_catalog":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_catalog"))
			it.IsCatalog, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "proxy_enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proxy_enterprise_id"))
			it.ProxyEnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_expire":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_expire"))
			it.IsExpire, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "credit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("credit_level"))
			it.CreditLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "credit_level_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("credit_level_remark"))
			it.CreditLevelRemark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseMuckTrunkBoolExp(ctx context.Context, obj interface{}) (model.EnterpriseMuckTrunkBoolExp, error) {
	var it model.EnterpriseMuckTrunkBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOEnterpriseMuckTrunkBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOEnterpriseMuckTrunkBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOEnterpriseMuckTrunkBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_muck_trunk_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_muck_trunk_id"))
			it.EnterpriseMuckTrunkID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "company_manager":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_manager"))
			it.CompanyManager, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "company_manager_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_manager_phone"))
			it.CompanyManagerPhone, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "company_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_manager_id_card"))
			it.CompanyManagerIDCard, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "company_safe_manager":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_safe_manager"))
			it.CompanySafeManager, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "company_safe_manger_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_safe_manger_phone"))
			it.CompanySafeMangerPhone, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "company_safe_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_safe_manager_id_card"))
			it.CompanySafeManagerIDCard, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_license"))
			it.RoadLicense, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_license_photo"))
			it.RoadLicensePhoto, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "office_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("office_address"))
			it.OfficeAddress, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "office_area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("office_area"))
			it.OfficeArea, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "office_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("office_photo"))
			it.OfficePhoto, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "parking_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parking_address"))
			it.ParkingAddress, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "parking_area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parking_area"))
			it.ParkingArea, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "parking_single_area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parking_single_area"))
			it.ParkingSingleArea, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "smart_car_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smart_car_count"))
			it.SmartCarCount, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_transport_add":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_transport_add"))
			it.IsTransportAdd, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "county_check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("county_check_state"))
			it.CountyCheckState, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_check_state"))
			it.CityCheckState, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "allow_generate_preview_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allow_generate_preview_num"))
			it.AllowGeneratePreviewNum, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "promise_book_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promise_book_url"))
			it.PromiseBookURL, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "promise_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promise_remark"))
			it.PromiseRemark, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "transport_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transport_type"))
			it.TransportType, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "routeline_card_promise_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("routeline_card_promise_photo"))
			it.RoutelineCardPromisePhoto, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "transport_liable_promise_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transport_liable_promise_photo"))
			it.TransportLiablePromisePhoto, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_type_a":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_type_a"))
			it.IsTypeA, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_type_b":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_type_b"))
			it.IsTypeB, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_type_c":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_type_c"))
			it.IsTypeC, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_type_d":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_type_d"))
			it.IsTypeD, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_type_e":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_type_e"))
			it.IsTypeE, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseMuckTrunkIncInput(ctx context.Context, obj interface{}) (model.EnterpriseMuckTrunkIncInput, error) {
	var it model.EnterpriseMuckTrunkIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "smart_car_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smart_car_count"))
			it.SmartCarCount, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "transport_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transport_type"))
			it.TransportType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseMuckTrunkInsertInput(ctx context.Context, obj interface{}) (model.EnterpriseMuckTrunkInsertInput, error) {
	var it model.EnterpriseMuckTrunkInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "enterprise_muck_trunk_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_muck_trunk_id"))
			it.EnterpriseMuckTrunkID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "company_manager":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_manager"))
			it.CompanyManager, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "company_manager_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_manager_phone"))
			it.CompanyManagerPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "company_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_manager_id_card"))
			it.CompanyManagerIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "company_safe_manager":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_safe_manager"))
			it.CompanySafeManager, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "company_safe_manger_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_safe_manger_phone"))
			it.CompanySafeMangerPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "company_safe_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_safe_manager_id_card"))
			it.CompanySafeManagerIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_license"))
			it.RoadLicense, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_license_photo"))
			it.RoadLicensePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "office_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("office_address"))
			it.OfficeAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "office_area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("office_area"))
			it.OfficeArea, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "office_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("office_photo"))
			it.OfficePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parking_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parking_address"))
			it.ParkingAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parking_area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parking_area"))
			it.ParkingArea, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parking_single_area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parking_single_area"))
			it.ParkingSingleArea, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smart_car_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smart_car_count"))
			it.SmartCarCount, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_transport_add":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_transport_add"))
			it.IsTransportAdd, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "county_check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("county_check_state"))
			it.CountyCheckState, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_check_state"))
			it.CityCheckState, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "allow_generate_preview_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allow_generate_preview_num"))
			it.AllowGeneratePreviewNum, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "promise_book_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promise_book_url"))
			it.PromiseBookURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "promise_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promise_remark"))
			it.PromiseRemark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "transport_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transport_type"))
			it.TransportType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "routeline_card_promise_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("routeline_card_promise_photo"))
			it.RoutelineCardPromisePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "transport_liable_promise_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transport_liable_promise_photo"))
			it.TransportLiablePromisePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_type_a":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_type_a"))
			it.IsTypeA, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_type_b":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_type_b"))
			it.IsTypeB, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_type_c":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_type_c"))
			it.IsTypeC, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_type_d":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_type_d"))
			it.IsTypeD, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_type_e":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_type_e"))
			it.IsTypeE, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseMuckTrunkOrderBy(ctx context.Context, obj interface{}) (model.EnterpriseMuckTrunkOrderBy, error) {
	var it model.EnterpriseMuckTrunkOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_muck_trunk_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_muck_trunk_id"))
			it.EnterpriseMuckTrunkID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "company_manager":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_manager"))
			it.CompanyManager, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "company_manager_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_manager_phone"))
			it.CompanyManagerPhone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "company_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_manager_id_card"))
			it.CompanyManagerIDCard, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "company_safe_manager":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_safe_manager"))
			it.CompanySafeManager, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "company_safe_manger_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_safe_manger_phone"))
			it.CompanySafeMangerPhone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "company_safe_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_safe_manager_id_card"))
			it.CompanySafeManagerIDCard, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_license"))
			it.RoadLicense, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_license_photo"))
			it.RoadLicensePhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "office_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("office_address"))
			it.OfficeAddress, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "office_area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("office_area"))
			it.OfficeArea, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "office_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("office_photo"))
			it.OfficePhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "parking_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parking_address"))
			it.ParkingAddress, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "parking_area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parking_area"))
			it.ParkingArea, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "parking_single_area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parking_single_area"))
			it.ParkingSingleArea, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "smart_car_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smart_car_count"))
			it.SmartCarCount, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_transport_add":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_transport_add"))
			it.IsTransportAdd, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "county_check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("county_check_state"))
			it.CountyCheckState, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_check_state"))
			it.CityCheckState, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "allow_generate_preview_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allow_generate_preview_num"))
			it.AllowGeneratePreviewNum, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "promise_book_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promise_book_url"))
			it.PromiseBookURL, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "promise_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promise_remark"))
			it.PromiseRemark, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "transport_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transport_type"))
			it.TransportType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "routeline_card_promise_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("routeline_card_promise_photo"))
			it.RoutelineCardPromisePhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "transport_liable_promise_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transport_liable_promise_photo"))
			it.TransportLiablePromisePhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_type_a":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_type_a"))
			it.IsTypeA, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_type_b":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_type_b"))
			it.IsTypeB, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_type_c":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_type_c"))
			it.IsTypeC, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_type_d":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_type_d"))
			it.IsTypeD, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_type_e":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_type_e"))
			it.IsTypeE, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseMuckTrunkSetInput(ctx context.Context, obj interface{}) (model.EnterpriseMuckTrunkSetInput, error) {
	var it model.EnterpriseMuckTrunkSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_muck_trunk_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_muck_trunk_id"))
			it.EnterpriseMuckTrunkID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "company_manager":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_manager"))
			it.CompanyManager, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "company_manager_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_manager_phone"))
			it.CompanyManagerPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "company_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_manager_id_card"))
			it.CompanyManagerIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "company_safe_manager":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_safe_manager"))
			it.CompanySafeManager, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "company_safe_manger_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_safe_manger_phone"))
			it.CompanySafeMangerPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "company_safe_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_safe_manager_id_card"))
			it.CompanySafeManagerIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_license"))
			it.RoadLicense, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_license_photo"))
			it.RoadLicensePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "office_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("office_address"))
			it.OfficeAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "office_area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("office_area"))
			it.OfficeArea, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "office_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("office_photo"))
			it.OfficePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parking_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parking_address"))
			it.ParkingAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parking_area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parking_area"))
			it.ParkingArea, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parking_single_area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parking_single_area"))
			it.ParkingSingleArea, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "smart_car_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("smart_car_count"))
			it.SmartCarCount, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_transport_add":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_transport_add"))
			it.IsTransportAdd, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "county_check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("county_check_state"))
			it.CountyCheckState, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_check_state"))
			it.CityCheckState, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "allow_generate_preview_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allow_generate_preview_num"))
			it.AllowGeneratePreviewNum, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "promise_book_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promise_book_url"))
			it.PromiseBookURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "promise_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promise_remark"))
			it.PromiseRemark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "transport_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transport_type"))
			it.TransportType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "routeline_card_promise_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("routeline_card_promise_photo"))
			it.RoutelineCardPromisePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "transport_liable_promise_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transport_liable_promise_photo"))
			it.TransportLiablePromisePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_type_a":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_type_a"))
			it.IsTypeA, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_type_b":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_type_b"))
			it.IsTypeB, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_type_c":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_type_c"))
			it.IsTypeC, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_type_d":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_type_d"))
			it.IsTypeD, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_type_e":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_type_e"))
			it.IsTypeE, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseOrderBy(ctx context.Context, obj interface{}) (model.EnterpriseOrderBy, error) {
	var it model.EnterpriseOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_enterprise_id"))
			it.SuperiorEnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_code"))
			it.EnterpriseCode, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_address"))
			it.EnterpriseAddress, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fax_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fax_number"))
			it.FaxNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_license_photo"))
			it.OperatingLicensePhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_photo"))
			it.BusinessLicensePhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_issuance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_issuance_date"))
			it.BusinessLicenseIssuanceDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_expiry_date"))
			it.BusinessLicenseExpiryDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative"))
			it.LegalRepresentative, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_phone"))
			it.LegalRepresentativePhone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card_photo"))
			it.LegalRepresentativeIDCardPhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card"))
			it.LegalRepresentativeIDCard, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent"))
			it.EntrustedAgent, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_phone"))
			it.EntrustedAgentPhone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card_photo"))
			it.EntrustedAgentIDCardPhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card"))
			it.EntrustedAgentIDCard, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code_certificate_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code_certificate_photo"))
			it.OrganizationCodeCertificatePhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_photo"))
			it.BusinessPhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_black":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_black"))
			it.IsBlack, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_install":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_install"))
			it.IsInstall, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_upload_province":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_upload_province"))
			it.IsUploadProvince, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_id"))
			it.BrigadeID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "police_station_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police_station_id"))
			it.PoliceStationID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_opinion"))
			it.BrigadeReviewOpinion, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_time"))
			it.BrigadeReviewTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_by"))
			it.BrigadeReviewBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_opinion"))
			it.AssociationReviewOpinion, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_time"))
			it.AssociationReviewTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_by"))
			it.AssociationReviewBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_key_point":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_key_point"))
			it.IsKeyPoint, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_type"))
			it.EnterpriseType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_catalog":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_catalog"))
			it.IsCatalog, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "proxy_enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proxy_enterprise_id"))
			it.ProxyEnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_expire":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_expire"))
			it.IsExpire, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "credit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("credit_level"))
			it.CreditLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "credit_level_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("credit_level_remark"))
			it.CreditLevelRemark, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseScoreLogBoolExp(ctx context.Context, obj interface{}) (model.EnterpriseScoreLogBoolExp, error) {
	var it model.EnterpriseScoreLogBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOEnterpriseScoreLogBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOEnterpriseScoreLogBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOEnterpriseScoreLogBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("log_id"))
			it.LogID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "current_score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("current_score"))
			it.CurrentScore, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "add_score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("add_score"))
			it.AddScore, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_url"))
			it.FileURL, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "score_set_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score_set_id"))
			it.ScoreSetID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseScoreLogIncInput(ctx context.Context, obj interface{}) (model.EnterpriseScoreLogIncInput, error) {
	var it model.EnterpriseScoreLogIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "current_score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("current_score"))
			it.CurrentScore, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "add_score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("add_score"))
			it.AddScore, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseScoreLogInsertInput(ctx context.Context, obj interface{}) (model.EnterpriseScoreLogInsertInput, error) {
	var it model.EnterpriseScoreLogInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("log_id"))
			it.LogID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "current_score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("current_score"))
			it.CurrentScore, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "add_score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("add_score"))
			it.AddScore, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_url"))
			it.FileURL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "score_set_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score_set_id"))
			it.ScoreSetID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseScoreLogOrderBy(ctx context.Context, obj interface{}) (model.EnterpriseScoreLogOrderBy, error) {
	var it model.EnterpriseScoreLogOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("log_id"))
			it.LogID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "current_score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("current_score"))
			it.CurrentScore, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "add_score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("add_score"))
			it.AddScore, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_url"))
			it.FileURL, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score_set_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score_set_id"))
			it.ScoreSetID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseScoreLogSetInput(ctx context.Context, obj interface{}) (model.EnterpriseScoreLogSetInput, error) {
	var it model.EnterpriseScoreLogSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("log_id"))
			it.LogID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "current_score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("current_score"))
			it.CurrentScore, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "add_score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("add_score"))
			it.AddScore, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_url"))
			it.FileURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "score_set_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score_set_id"))
			it.ScoreSetID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseScoreSetBoolExp(ctx context.Context, obj interface{}) (model.EnterpriseScoreSetBoolExp, error) {
	var it model.EnterpriseScoreSetBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOEnterpriseScoreSetBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOEnterpriseScoreSetBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOEnterpriseScoreSetBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "score_set_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score_set_id"))
			it.ScoreSetID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOFloatComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐFloatComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseScoreSetIncInput(ctx context.Context, obj interface{}) (model.EnterpriseScoreSetIncInput, error) {
	var it model.EnterpriseScoreSetIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseScoreSetInsertInput(ctx context.Context, obj interface{}) (model.EnterpriseScoreSetInsertInput, error) {
	var it model.EnterpriseScoreSetInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "score_set_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score_set_id"))
			it.ScoreSetID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseScoreSetOrderBy(ctx context.Context, obj interface{}) (model.EnterpriseScoreSetOrderBy, error) {
	var it model.EnterpriseScoreSetOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score_set_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score_set_id"))
			it.ScoreSetID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseScoreSetSetInput(ctx context.Context, obj interface{}) (model.EnterpriseScoreSetSetInput, error) {
	var it model.EnterpriseScoreSetSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "score_set_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score_set_id"))
			it.ScoreSetID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseSetInput(ctx context.Context, obj interface{}) (model.EnterpriseSetInput, error) {
	var it model.EnterpriseSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_enterprise_id"))
			it.SuperiorEnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_code"))
			it.EnterpriseCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_address"))
			it.EnterpriseAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "fax_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fax_number"))
			it.FaxNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_license_photo"))
			it.OperatingLicensePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_photo"))
			it.BusinessLicensePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_issuance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_issuance_date"))
			it.BusinessLicenseIssuanceDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_expiry_date"))
			it.BusinessLicenseExpiryDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative"))
			it.LegalRepresentative, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_phone"))
			it.LegalRepresentativePhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card_photo"))
			it.LegalRepresentativeIDCardPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card"))
			it.LegalRepresentativeIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent"))
			it.EntrustedAgent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_phone"))
			it.EntrustedAgentPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card_photo"))
			it.EntrustedAgentIDCardPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card"))
			it.EntrustedAgentIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code_certificate_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code_certificate_photo"))
			it.OrganizationCodeCertificatePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_photo"))
			it.BusinessPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_black":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_black"))
			it.IsBlack, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_install":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_install"))
			it.IsInstall, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_upload_province":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_upload_province"))
			it.IsUploadProvince, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_id"))
			it.BrigadeID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "police_station_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police_station_id"))
			it.PoliceStationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_opinion"))
			it.BrigadeReviewOpinion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_time"))
			it.BrigadeReviewTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_by"))
			it.BrigadeReviewBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_opinion"))
			it.AssociationReviewOpinion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_time"))
			it.AssociationReviewTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_by"))
			it.AssociationReviewBy, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_key_point":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_key_point"))
			it.IsKeyPoint, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_type"))
			it.EnterpriseType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_catalog":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_catalog"))
			it.IsCatalog, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "proxy_enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proxy_enterprise_id"))
			it.ProxyEnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_expire":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_expire"))
			it.IsExpire, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "credit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("credit_level"))
			it.CreditLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "credit_level_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("credit_level_remark"))
			it.CreditLevelRemark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseStateHisBoolExp(ctx context.Context, obj interface{}) (model.EnterpriseStateHisBoolExp, error) {
	var it model.EnterpriseStateHisBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOEnterpriseStateHisBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOEnterpriseStateHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOEnterpriseStateHisBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "state_his_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state_his_id"))
			it.StateHisID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
			it.Reason, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_url"))
			it.FileURL, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseStateHisIncInput(ctx context.Context, obj interface{}) (model.EnterpriseStateHisIncInput, error) {
	var it model.EnterpriseStateHisIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseStateHisInsertInput(ctx context.Context, obj interface{}) (model.EnterpriseStateHisInsertInput, error) {
	var it model.EnterpriseStateHisInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "state_his_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state_his_id"))
			it.StateHisID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
			it.Reason, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_url"))
			it.FileURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseStateHisOrderBy(ctx context.Context, obj interface{}) (model.EnterpriseStateHisOrderBy, error) {
	var it model.EnterpriseStateHisOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "state_his_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state_his_id"))
			it.StateHisID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
			it.Reason, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_url"))
			it.FileURL, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseStateHisSetInput(ctx context.Context, obj interface{}) (model.EnterpriseStateHisSetInput, error) {
	var it model.EnterpriseStateHisSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "state_his_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state_his_id"))
			it.StateHisID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
			it.Reason, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_url"))
			it.FileURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseUkeyBoolExp(ctx context.Context, obj interface{}) (model.EnterpriseUkeyBoolExp, error) {
	var it model.EnterpriseUkeyBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOEnterpriseUkeyBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOEnterpriseUkeyBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOEnterpriseUkeyBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "ukey_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ukey_id"))
			it.UkeyID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseUkeyIncInput(ctx context.Context, obj interface{}) (model.EnterpriseUkeyIncInput, error) {
	var it model.EnterpriseUkeyIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseUkeyInsertInput(ctx context.Context, obj interface{}) (model.EnterpriseUkeyInsertInput, error) {
	var it model.EnterpriseUkeyInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "ukey_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ukey_id"))
			it.UkeyID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseUkeyOrderBy(ctx context.Context, obj interface{}) (model.EnterpriseUkeyOrderBy, error) {
	var it model.EnterpriseUkeyOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ukey_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ukey_id"))
			it.UkeyID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseUkeySetInput(ctx context.Context, obj interface{}) (model.EnterpriseUkeySetInput, error) {
	var it model.EnterpriseUkeySetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "ukey_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ukey_id"))
			it.UkeyID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFloatComparisonExp(ctx context.Context, obj interface{}) (model2.FloatComparisonExp, error) {
	var it model2.FloatComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIntComparisonExp(ctx context.Context, obj interface{}) (model2.IntComparisonExp, error) {
	var it model2.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJsonbComparisonExp(ctx context.Context, obj interface{}) (model2.JsonbComparisonExp, error) {
	var it model2.JsonbComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNumericComparisonExp(ctx context.Context, obj interface{}) (model2.NumericComparisonExp, error) {
	var it model2.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPointComparisonExp(ctx context.Context, obj interface{}) (model2.PointComparisonExp, error) {
	var it model2.PointComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringComparisonExp(ctx context.Context, obj interface{}) (model2.StringComparisonExp, error) {
	var it model2.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemUserBoolExp(ctx context.Context, obj interface{}) (model.SystemUserBoolExp, error) {
	var it model.SystemUserBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOSystemUserBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOSystemUserBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOSystemUserBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "uername":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uername"))
			it.Uername, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_valid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_valid"))
			it.IsValid, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "ip_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ip_address"))
			it.IPAddress, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_bind_ip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_bind_ip"))
			it.IsBindIP, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile"))
			it.Mobile, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "ukey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ukey"))
			it.Ukey, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "mkey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mkey"))
			it.Mkey, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_version"))
			it.AppVersion, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemUserIncInput(ctx context.Context, obj interface{}) (model.SystemUserIncInput, error) {
	var it model.SystemUserIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemUserInsertInput(ctx context.Context, obj interface{}) (model.SystemUserInsertInput, error) {
	var it model.SystemUserInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "uername":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uername"))
			it.Uername, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_valid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_valid"))
			it.IsValid, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ip_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ip_address"))
			it.IPAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_bind_ip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_bind_ip"))
			it.IsBindIP, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile"))
			it.Mobile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ukey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ukey"))
			it.Ukey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mkey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mkey"))
			it.Mkey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_version"))
			it.AppVersion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemUserOrderBy(ctx context.Context, obj interface{}) (model.SystemUserOrderBy, error) {
	var it model.SystemUserOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "uername":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uername"))
			it.Uername, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_valid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_valid"))
			it.IsValid, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ip_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ip_address"))
			it.IPAddress, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_bind_ip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_bind_ip"))
			it.IsBindIP, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile"))
			it.Mobile, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ukey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ukey"))
			it.Ukey, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mkey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mkey"))
			it.Mkey, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_version"))
			it.AppVersion, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemUserSetInput(ctx context.Context, obj interface{}) (model.SystemUserSetInput, error) {
	var it model.SystemUserSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "uername":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uername"))
			it.Uername, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_valid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_valid"))
			it.IsValid, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ip_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ip_address"))
			it.IPAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_bind_ip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_bind_ip"))
			it.IsBindIP, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile"))
			it.Mobile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ukey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ukey"))
			it.Ukey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mkey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mkey"))
			it.Mkey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_version"))
			it.AppVersion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTimestamptzComparisonExp(ctx context.Context, obj interface{}) (model2.TimestamptzComparisonExp, error) {
	var it model2.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var departmentImplementors = []string{"Department"}

func (ec *executionContext) _Department(ctx context.Context, sel ast.SelectionSet, obj *model1.Department) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Department")
		case "id":
			out.Values[i] = ec._Department_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "department_id":
			out.Values[i] = ec._Department_department_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "enterprise":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Department_enterprise(ctx, field, obj)
				return res
			})
		case "superior_department":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Department_superior_department(ctx, field, obj)
				return res
			})
		case "department_name":
			out.Values[i] = ec._Department_department_name(ctx, field, obj)
		case "department_code":
			out.Values[i] = ec._Department_department_code(ctx, field, obj)
		case "department_category":
			out.Values[i] = ec._Department_department_category(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._Department_internal_number(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._Department_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._Department_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._Department_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._Department_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._Department_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._Department_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._Department_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "remarks":
			out.Values[i] = ec._Department_remarks(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentAggregateImplementors = []string{"DepartmentAggregate"}

func (ec *executionContext) _DepartmentAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentAggregate")
		case "aggregate":
			out.Values[i] = ec._DepartmentAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentAggregateFieldsImplementors = []string{"DepartmentAggregateFields"}

func (ec *executionContext) _DepartmentAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentAggregateFields")
		case "avg":
			out.Values[i] = ec._DepartmentAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._DepartmentAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._DepartmentAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._DepartmentAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._DepartmentAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._DepartmentAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._DepartmentAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._DepartmentAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._DepartmentAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._DepartmentAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._DepartmentAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentAvgFieldsImplementors = []string{"DepartmentAvgFields"}

func (ec *executionContext) _DepartmentAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentAvgFields")
		case "id":
			out.Values[i] = ec._DepartmentAvgFields_id(ctx, field, obj)
		case "department_category":
			out.Values[i] = ec._DepartmentAvgFields_department_category(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._DepartmentAvgFields_internal_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentMaxFieldsImplementors = []string{"DepartmentMaxFields"}

func (ec *executionContext) _DepartmentMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentMaxFields")
		case "id":
			out.Values[i] = ec._DepartmentMaxFields_id(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._DepartmentMaxFields_department_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._DepartmentMaxFields_enterprise_id(ctx, field, obj)
		case "superior_department_id":
			out.Values[i] = ec._DepartmentMaxFields_superior_department_id(ctx, field, obj)
		case "department_name":
			out.Values[i] = ec._DepartmentMaxFields_department_name(ctx, field, obj)
		case "department_code":
			out.Values[i] = ec._DepartmentMaxFields_department_code(ctx, field, obj)
		case "department_category":
			out.Values[i] = ec._DepartmentMaxFields_department_category(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._DepartmentMaxFields_internal_number(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._DepartmentMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._DepartmentMaxFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._DepartmentMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._DepartmentMaxFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._DepartmentMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._DepartmentMaxFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._DepartmentMaxFields_is_delete(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._DepartmentMaxFields_remarks(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentMinFieldsImplementors = []string{"DepartmentMinFields"}

func (ec *executionContext) _DepartmentMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentMinFields")
		case "id":
			out.Values[i] = ec._DepartmentMinFields_id(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._DepartmentMinFields_department_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._DepartmentMinFields_enterprise_id(ctx, field, obj)
		case "superior_department_id":
			out.Values[i] = ec._DepartmentMinFields_superior_department_id(ctx, field, obj)
		case "department_name":
			out.Values[i] = ec._DepartmentMinFields_department_name(ctx, field, obj)
		case "department_code":
			out.Values[i] = ec._DepartmentMinFields_department_code(ctx, field, obj)
		case "department_category":
			out.Values[i] = ec._DepartmentMinFields_department_category(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._DepartmentMinFields_internal_number(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._DepartmentMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._DepartmentMinFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._DepartmentMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._DepartmentMinFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._DepartmentMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._DepartmentMinFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._DepartmentMinFields_is_delete(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._DepartmentMinFields_remarks(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentMutationResponseImplementors = []string{"DepartmentMutationResponse"}

func (ec *executionContext) _DepartmentMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._DepartmentMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._DepartmentMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentStddevFieldsImplementors = []string{"DepartmentStddevFields"}

func (ec *executionContext) _DepartmentStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentStddevFields")
		case "id":
			out.Values[i] = ec._DepartmentStddevFields_id(ctx, field, obj)
		case "department_category":
			out.Values[i] = ec._DepartmentStddevFields_department_category(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._DepartmentStddevFields_internal_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentStddevPopFieldsImplementors = []string{"DepartmentStddevPopFields"}

func (ec *executionContext) _DepartmentStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentStddevPopFields")
		case "id":
			out.Values[i] = ec._DepartmentStddevPopFields_id(ctx, field, obj)
		case "department_category":
			out.Values[i] = ec._DepartmentStddevPopFields_department_category(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._DepartmentStddevPopFields_internal_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentStddevSampFieldsImplementors = []string{"DepartmentStddevSampFields"}

func (ec *executionContext) _DepartmentStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentStddevSampFields")
		case "id":
			out.Values[i] = ec._DepartmentStddevSampFields_id(ctx, field, obj)
		case "department_category":
			out.Values[i] = ec._DepartmentStddevSampFields_department_category(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._DepartmentStddevSampFields_internal_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentSumFieldsImplementors = []string{"DepartmentSumFields"}

func (ec *executionContext) _DepartmentSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentSumFields")
		case "id":
			out.Values[i] = ec._DepartmentSumFields_id(ctx, field, obj)
		case "department_category":
			out.Values[i] = ec._DepartmentSumFields_department_category(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._DepartmentSumFields_internal_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentVarPopFieldsImplementors = []string{"DepartmentVarPopFields"}

func (ec *executionContext) _DepartmentVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentVarPopFields")
		case "id":
			out.Values[i] = ec._DepartmentVarPopFields_id(ctx, field, obj)
		case "department_category":
			out.Values[i] = ec._DepartmentVarPopFields_department_category(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._DepartmentVarPopFields_internal_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentVarSampFieldsImplementors = []string{"DepartmentVarSampFields"}

func (ec *executionContext) _DepartmentVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentVarSampFields")
		case "id":
			out.Values[i] = ec._DepartmentVarSampFields_id(ctx, field, obj)
		case "department_category":
			out.Values[i] = ec._DepartmentVarSampFields_department_category(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._DepartmentVarSampFields_internal_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentVarianceFieldsImplementors = []string{"DepartmentVarianceFields"}

func (ec *executionContext) _DepartmentVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentVarianceFields")
		case "id":
			out.Values[i] = ec._DepartmentVarianceFields_id(ctx, field, obj)
		case "department_category":
			out.Values[i] = ec._DepartmentVarianceFields_department_category(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._DepartmentVarianceFields_internal_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseImplementors = []string{"Enterprise"}

func (ec *executionContext) _Enterprise(ctx context.Context, sel ast.SelectionSet, obj *model1.Enterprise) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Enterprise")
		case "id":
			out.Values[i] = ec._Enterprise_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise_id":
			out.Values[i] = ec._Enterprise_enterprise_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "superior_enterprise_id":
			out.Values[i] = ec._Enterprise_superior_enterprise_id(ctx, field, obj)
		case "enterprise_code":
			out.Values[i] = ec._Enterprise_enterprise_code(ctx, field, obj)
		case "enterprise_name":
			out.Values[i] = ec._Enterprise_enterprise_name(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._Enterprise_enterprise_level(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._Enterprise_display_number(ctx, field, obj)
		case "enterprise_address":
			out.Values[i] = ec._Enterprise_enterprise_address(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._Enterprise_business_scope(ctx, field, obj)
		case "fax_number":
			out.Values[i] = ec._Enterprise_fax_number(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._Enterprise_province_id(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._Enterprise_city_id(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._Enterprise_district_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._Enterprise_institution_category(ctx, field, obj)
		case "operating_license_photo":
			out.Values[i] = ec._Enterprise_operating_license_photo(ctx, field, obj)
		case "business_license_photo":
			out.Values[i] = ec._Enterprise_business_license_photo(ctx, field, obj)
		case "business_license_issuance_date":
			out.Values[i] = ec._Enterprise_business_license_issuance_date(ctx, field, obj)
		case "business_license_expiry_date":
			out.Values[i] = ec._Enterprise_business_license_expiry_date(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._Enterprise_enterprise_nature(ctx, field, obj)
		case "legal_representative":
			out.Values[i] = ec._Enterprise_legal_representative(ctx, field, obj)
		case "legal_representative_phone":
			out.Values[i] = ec._Enterprise_legal_representative_phone(ctx, field, obj)
		case "legal_representative_id_card_photo":
			out.Values[i] = ec._Enterprise_legal_representative_id_card_photo(ctx, field, obj)
		case "legal_representative_id_card":
			out.Values[i] = ec._Enterprise_legal_representative_id_card(ctx, field, obj)
		case "entrusted_agent":
			out.Values[i] = ec._Enterprise_entrusted_agent(ctx, field, obj)
		case "entrusted_agent_phone":
			out.Values[i] = ec._Enterprise_entrusted_agent_phone(ctx, field, obj)
		case "entrusted_agent_id_card_photo":
			out.Values[i] = ec._Enterprise_entrusted_agent_id_card_photo(ctx, field, obj)
		case "entrusted_agent_id_card":
			out.Values[i] = ec._Enterprise_entrusted_agent_id_card(ctx, field, obj)
		case "organization_code":
			out.Values[i] = ec._Enterprise_organization_code(ctx, field, obj)
		case "organization_code_certificate_photo":
			out.Values[i] = ec._Enterprise_organization_code_certificate_photo(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._Enterprise_update_time_in(ctx, field, obj)
		case "business_photo":
			out.Values[i] = ec._Enterprise_business_photo(ctx, field, obj)
		case "is_black":
			out.Values[i] = ec._Enterprise_is_black(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "check_status":
			out.Values[i] = ec._Enterprise_check_status(ctx, field, obj)
		case "is_install":
			out.Values[i] = ec._Enterprise_is_install(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_input":
			out.Values[i] = ec._Enterprise_is_input(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_upload_province":
			out.Values[i] = ec._Enterprise_is_upload_province(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "score":
			out.Values[i] = ec._Enterprise_score(ctx, field, obj)
		case "brigade_id":
			out.Values[i] = ec._Enterprise_brigade_id(ctx, field, obj)
		case "police_station_id":
			out.Values[i] = ec._Enterprise_police_station_id(ctx, field, obj)
		case "brigade_review_opinion":
			out.Values[i] = ec._Enterprise_brigade_review_opinion(ctx, field, obj)
		case "brigade_review_time":
			out.Values[i] = ec._Enterprise_brigade_review_time(ctx, field, obj)
		case "brigade_review_by":
			out.Values[i] = ec._Enterprise_brigade_review_by(ctx, field, obj)
		case "association_review_opinion":
			out.Values[i] = ec._Enterprise_association_review_opinion(ctx, field, obj)
		case "association_review_time":
			out.Values[i] = ec._Enterprise_association_review_time(ctx, field, obj)
		case "association_review_by":
			out.Values[i] = ec._Enterprise_association_review_by(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._Enterprise_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._Enterprise_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._Enterprise_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._Enterprise_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._Enterprise_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._Enterprise_delete_by(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._Enterprise_remarks(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._Enterprise_is_deleted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_key_point":
			out.Values[i] = ec._Enterprise_is_key_point(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise_type":
			out.Values[i] = ec._Enterprise_enterprise_type(ctx, field, obj)
		case "is_catalog":
			out.Values[i] = ec._Enterprise_is_catalog(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "state":
			out.Values[i] = ec._Enterprise_state(ctx, field, obj)
		case "proxy_enterprise_id":
			out.Values[i] = ec._Enterprise_proxy_enterprise_id(ctx, field, obj)
		case "is_expire":
			out.Values[i] = ec._Enterprise_is_expire(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "credit_level":
			out.Values[i] = ec._Enterprise_credit_level(ctx, field, obj)
		case "credit_level_remark":
			out.Values[i] = ec._Enterprise_credit_level_remark(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAggregateImplementors = []string{"EnterpriseAggregate"}

func (ec *executionContext) _EnterpriseAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAggregate")
		case "aggregate":
			out.Values[i] = ec._EnterpriseAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAggregateFieldsImplementors = []string{"EnterpriseAggregateFields"}

func (ec *executionContext) _EnterpriseAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAggregateFields")
		case "avg":
			out.Values[i] = ec._EnterpriseAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._EnterpriseAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._EnterpriseAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._EnterpriseAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._EnterpriseAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._EnterpriseAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._EnterpriseAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._EnterpriseAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._EnterpriseAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._EnterpriseAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._EnterpriseAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAlarmSendPoliceImplementors = []string{"EnterpriseAlarmSendPolice"}

func (ec *executionContext) _EnterpriseAlarmSendPolice(ctx context.Context, sel ast.SelectionSet, obj *model1.EnterpriseAlarmSendPolice) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAlarmSendPoliceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAlarmSendPolice")
		case "id":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise_alarm_send_police_id":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_enterprise_alarm_send_police_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_enterprise_id(ctx, field, obj)
		case "enterprise_name":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_enterprise_name(ctx, field, obj)
		case "enterprise_contact":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_enterprise_contact(ctx, field, obj)
		case "enterprise_phone":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_enterprise_phone(ctx, field, obj)
		case "police":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_police(ctx, field, obj)
		case "police_phone":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_police_phone(ctx, field, obj)
		case "phlice_department":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_phlice_department(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._EnterpriseAlarmSendPolice_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAlarmSendPoliceAggregateImplementors = []string{"EnterpriseAlarmSendPoliceAggregate"}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAlarmSendPoliceAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAlarmSendPoliceAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAlarmSendPoliceAggregate")
		case "aggregate":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAlarmSendPoliceAggregateFieldsImplementors = []string{"EnterpriseAlarmSendPoliceAggregateFields"}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAlarmSendPoliceAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAlarmSendPoliceAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAlarmSendPoliceAggregateFields")
		case "avg":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAlarmSendPoliceAvgFieldsImplementors = []string{"EnterpriseAlarmSendPoliceAvgFields"}

func (ec *executionContext) _EnterpriseAlarmSendPoliceAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAlarmSendPoliceAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAlarmSendPoliceAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAlarmSendPoliceAvgFields")
		case "id":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAlarmSendPoliceMaxFieldsImplementors = []string{"EnterpriseAlarmSendPoliceMaxFields"}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAlarmSendPoliceMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAlarmSendPoliceMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAlarmSendPoliceMaxFields")
		case "id":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_id(ctx, field, obj)
		case "enterprise_alarm_send_police_id":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_enterprise_alarm_send_police_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_enterprise_id(ctx, field, obj)
		case "enterprise_name":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_enterprise_name(ctx, field, obj)
		case "enterprise_contact":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_enterprise_contact(ctx, field, obj)
		case "enterprise_phone":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_enterprise_phone(ctx, field, obj)
		case "police":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_police(ctx, field, obj)
		case "police_phone":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_police_phone(ctx, field, obj)
		case "phlice_department":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_phlice_department(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAlarmSendPoliceMinFieldsImplementors = []string{"EnterpriseAlarmSendPoliceMinFields"}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAlarmSendPoliceMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAlarmSendPoliceMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAlarmSendPoliceMinFields")
		case "id":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_id(ctx, field, obj)
		case "enterprise_alarm_send_police_id":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_enterprise_alarm_send_police_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_enterprise_id(ctx, field, obj)
		case "enterprise_name":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_enterprise_name(ctx, field, obj)
		case "enterprise_contact":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_enterprise_contact(ctx, field, obj)
		case "enterprise_phone":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_enterprise_phone(ctx, field, obj)
		case "police":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_police(ctx, field, obj)
		case "police_phone":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_police_phone(ctx, field, obj)
		case "phlice_department":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_phlice_department(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAlarmSendPoliceMutationResponseImplementors = []string{"EnterpriseAlarmSendPoliceMutationResponse"}

func (ec *executionContext) _EnterpriseAlarmSendPoliceMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAlarmSendPoliceMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAlarmSendPoliceMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAlarmSendPoliceMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAlarmSendPoliceStddevFieldsImplementors = []string{"EnterpriseAlarmSendPoliceStddevFields"}

func (ec *executionContext) _EnterpriseAlarmSendPoliceStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAlarmSendPoliceStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAlarmSendPoliceStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAlarmSendPoliceStddevFields")
		case "id":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAlarmSendPoliceStddevPopFieldsImplementors = []string{"EnterpriseAlarmSendPoliceStddevPopFields"}

func (ec *executionContext) _EnterpriseAlarmSendPoliceStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAlarmSendPoliceStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAlarmSendPoliceStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAlarmSendPoliceStddevPopFields")
		case "id":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAlarmSendPoliceStddevSampFieldsImplementors = []string{"EnterpriseAlarmSendPoliceStddevSampFields"}

func (ec *executionContext) _EnterpriseAlarmSendPoliceStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAlarmSendPoliceStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAlarmSendPoliceStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAlarmSendPoliceStddevSampFields")
		case "id":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAlarmSendPoliceSumFieldsImplementors = []string{"EnterpriseAlarmSendPoliceSumFields"}

func (ec *executionContext) _EnterpriseAlarmSendPoliceSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAlarmSendPoliceSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAlarmSendPoliceSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAlarmSendPoliceSumFields")
		case "id":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAlarmSendPoliceVarPopFieldsImplementors = []string{"EnterpriseAlarmSendPoliceVarPopFields"}

func (ec *executionContext) _EnterpriseAlarmSendPoliceVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAlarmSendPoliceVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAlarmSendPoliceVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAlarmSendPoliceVarPopFields")
		case "id":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAlarmSendPoliceVarSampFieldsImplementors = []string{"EnterpriseAlarmSendPoliceVarSampFields"}

func (ec *executionContext) _EnterpriseAlarmSendPoliceVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAlarmSendPoliceVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAlarmSendPoliceVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAlarmSendPoliceVarSampFields")
		case "id":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAlarmSendPoliceVarianceFieldsImplementors = []string{"EnterpriseAlarmSendPoliceVarianceFields"}

func (ec *executionContext) _EnterpriseAlarmSendPoliceVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAlarmSendPoliceVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAlarmSendPoliceVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAlarmSendPoliceVarianceFields")
		case "id":
			out.Values[i] = ec._EnterpriseAlarmSendPoliceVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAvgFieldsImplementors = []string{"EnterpriseAvgFields"}

func (ec *executionContext) _EnterpriseAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAvgFields")
		case "id":
			out.Values[i] = ec._EnterpriseAvgFields_id(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._EnterpriseAvgFields_enterprise_level(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._EnterpriseAvgFields_display_number(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._EnterpriseAvgFields_business_scope(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._EnterpriseAvgFields_province_id(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._EnterpriseAvgFields_city_id(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._EnterpriseAvgFields_district_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._EnterpriseAvgFields_institution_category(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._EnterpriseAvgFields_enterprise_nature(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EnterpriseAvgFields_check_status(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseAvgFields_score(ctx, field, obj)
		case "enterprise_type":
			out.Values[i] = ec._EnterpriseAvgFields_enterprise_type(ctx, field, obj)
		case "state":
			out.Values[i] = ec._EnterpriseAvgFields_state(ctx, field, obj)
		case "credit_level":
			out.Values[i] = ec._EnterpriseAvgFields_credit_level(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseContactImplementors = []string{"EnterpriseContact"}

func (ec *executionContext) _EnterpriseContact(ctx context.Context, sel ast.SelectionSet, obj *model1.EnterpriseContact) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseContactImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseContact")
		case "id":
			out.Values[i] = ec._EnterpriseContact_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "contact_id":
			out.Values[i] = ec._EnterpriseContact_contact_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseContact_enterprise_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._EnterpriseContact_name(ctx, field, obj)
		case "mobile":
			out.Values[i] = ec._EnterpriseContact_mobile(ctx, field, obj)
		case "phone":
			out.Values[i] = ec._EnterpriseContact_phone(ctx, field, obj)
		case "email":
			out.Values[i] = ec._EnterpriseContact_email(ctx, field, obj)
		case "sort_num":
			out.Values[i] = ec._EnterpriseContact_sort_num(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EnterpriseContact_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._EnterpriseContact_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EnterpriseContact_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EnterpriseContact_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EnterpriseContact_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EnterpriseContact_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EnterpriseContact_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseContactAggregateImplementors = []string{"EnterpriseContactAggregate"}

func (ec *executionContext) _EnterpriseContactAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseContactAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseContactAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseContactAggregate")
		case "aggregate":
			out.Values[i] = ec._EnterpriseContactAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseContactAggregateFieldsImplementors = []string{"EnterpriseContactAggregateFields"}

func (ec *executionContext) _EnterpriseContactAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseContactAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseContactAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseContactAggregateFields")
		case "avg":
			out.Values[i] = ec._EnterpriseContactAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._EnterpriseContactAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._EnterpriseContactAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._EnterpriseContactAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._EnterpriseContactAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._EnterpriseContactAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._EnterpriseContactAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._EnterpriseContactAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._EnterpriseContactAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._EnterpriseContactAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._EnterpriseContactAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseContactAvgFieldsImplementors = []string{"EnterpriseContactAvgFields"}

func (ec *executionContext) _EnterpriseContactAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseContactAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseContactAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseContactAvgFields")
		case "id":
			out.Values[i] = ec._EnterpriseContactAvgFields_id(ctx, field, obj)
		case "sort_num":
			out.Values[i] = ec._EnterpriseContactAvgFields_sort_num(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseContactMaxFieldsImplementors = []string{"EnterpriseContactMaxFields"}

func (ec *executionContext) _EnterpriseContactMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseContactMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseContactMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseContactMaxFields")
		case "id":
			out.Values[i] = ec._EnterpriseContactMaxFields_id(ctx, field, obj)
		case "contact_id":
			out.Values[i] = ec._EnterpriseContactMaxFields_contact_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseContactMaxFields_enterprise_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._EnterpriseContactMaxFields_name(ctx, field, obj)
		case "mobile":
			out.Values[i] = ec._EnterpriseContactMaxFields_mobile(ctx, field, obj)
		case "phone":
			out.Values[i] = ec._EnterpriseContactMaxFields_phone(ctx, field, obj)
		case "email":
			out.Values[i] = ec._EnterpriseContactMaxFields_email(ctx, field, obj)
		case "sort_num":
			out.Values[i] = ec._EnterpriseContactMaxFields_sort_num(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EnterpriseContactMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EnterpriseContactMaxFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EnterpriseContactMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EnterpriseContactMaxFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EnterpriseContactMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EnterpriseContactMaxFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EnterpriseContactMaxFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseContactMinFieldsImplementors = []string{"EnterpriseContactMinFields"}

func (ec *executionContext) _EnterpriseContactMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseContactMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseContactMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseContactMinFields")
		case "id":
			out.Values[i] = ec._EnterpriseContactMinFields_id(ctx, field, obj)
		case "contact_id":
			out.Values[i] = ec._EnterpriseContactMinFields_contact_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseContactMinFields_enterprise_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._EnterpriseContactMinFields_name(ctx, field, obj)
		case "mobile":
			out.Values[i] = ec._EnterpriseContactMinFields_mobile(ctx, field, obj)
		case "phone":
			out.Values[i] = ec._EnterpriseContactMinFields_phone(ctx, field, obj)
		case "email":
			out.Values[i] = ec._EnterpriseContactMinFields_email(ctx, field, obj)
		case "sort_num":
			out.Values[i] = ec._EnterpriseContactMinFields_sort_num(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EnterpriseContactMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EnterpriseContactMinFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EnterpriseContactMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EnterpriseContactMinFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EnterpriseContactMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EnterpriseContactMinFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EnterpriseContactMinFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseContactMutationResponseImplementors = []string{"EnterpriseContactMutationResponse"}

func (ec *executionContext) _EnterpriseContactMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseContactMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseContactMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseContactMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._EnterpriseContactMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._EnterpriseContactMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseContactStddevFieldsImplementors = []string{"EnterpriseContactStddevFields"}

func (ec *executionContext) _EnterpriseContactStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseContactStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseContactStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseContactStddevFields")
		case "id":
			out.Values[i] = ec._EnterpriseContactStddevFields_id(ctx, field, obj)
		case "sort_num":
			out.Values[i] = ec._EnterpriseContactStddevFields_sort_num(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseContactStddevPopFieldsImplementors = []string{"EnterpriseContactStddevPopFields"}

func (ec *executionContext) _EnterpriseContactStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseContactStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseContactStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseContactStddevPopFields")
		case "id":
			out.Values[i] = ec._EnterpriseContactStddevPopFields_id(ctx, field, obj)
		case "sort_num":
			out.Values[i] = ec._EnterpriseContactStddevPopFields_sort_num(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseContactStddevSampFieldsImplementors = []string{"EnterpriseContactStddevSampFields"}

func (ec *executionContext) _EnterpriseContactStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseContactStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseContactStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseContactStddevSampFields")
		case "id":
			out.Values[i] = ec._EnterpriseContactStddevSampFields_id(ctx, field, obj)
		case "sort_num":
			out.Values[i] = ec._EnterpriseContactStddevSampFields_sort_num(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseContactSumFieldsImplementors = []string{"EnterpriseContactSumFields"}

func (ec *executionContext) _EnterpriseContactSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseContactSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseContactSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseContactSumFields")
		case "id":
			out.Values[i] = ec._EnterpriseContactSumFields_id(ctx, field, obj)
		case "sort_num":
			out.Values[i] = ec._EnterpriseContactSumFields_sort_num(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseContactVarPopFieldsImplementors = []string{"EnterpriseContactVarPopFields"}

func (ec *executionContext) _EnterpriseContactVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseContactVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseContactVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseContactVarPopFields")
		case "id":
			out.Values[i] = ec._EnterpriseContactVarPopFields_id(ctx, field, obj)
		case "sort_num":
			out.Values[i] = ec._EnterpriseContactVarPopFields_sort_num(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseContactVarSampFieldsImplementors = []string{"EnterpriseContactVarSampFields"}

func (ec *executionContext) _EnterpriseContactVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseContactVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseContactVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseContactVarSampFields")
		case "id":
			out.Values[i] = ec._EnterpriseContactVarSampFields_id(ctx, field, obj)
		case "sort_num":
			out.Values[i] = ec._EnterpriseContactVarSampFields_sort_num(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseContactVarianceFieldsImplementors = []string{"EnterpriseContactVarianceFields"}

func (ec *executionContext) _EnterpriseContactVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseContactVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseContactVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseContactVarianceFields")
		case "id":
			out.Values[i] = ec._EnterpriseContactVarianceFields_id(ctx, field, obj)
		case "sort_num":
			out.Values[i] = ec._EnterpriseContactVarianceFields_sort_num(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseMaxFieldsImplementors = []string{"EnterpriseMaxFields"}

func (ec *executionContext) _EnterpriseMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseMaxFields")
		case "id":
			out.Values[i] = ec._EnterpriseMaxFields_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseMaxFields_enterprise_id(ctx, field, obj)
		case "superior_enterprise_id":
			out.Values[i] = ec._EnterpriseMaxFields_superior_enterprise_id(ctx, field, obj)
		case "enterprise_code":
			out.Values[i] = ec._EnterpriseMaxFields_enterprise_code(ctx, field, obj)
		case "enterprise_name":
			out.Values[i] = ec._EnterpriseMaxFields_enterprise_name(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._EnterpriseMaxFields_enterprise_level(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._EnterpriseMaxFields_display_number(ctx, field, obj)
		case "enterprise_address":
			out.Values[i] = ec._EnterpriseMaxFields_enterprise_address(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._EnterpriseMaxFields_business_scope(ctx, field, obj)
		case "fax_number":
			out.Values[i] = ec._EnterpriseMaxFields_fax_number(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._EnterpriseMaxFields_province_id(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._EnterpriseMaxFields_city_id(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._EnterpriseMaxFields_district_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._EnterpriseMaxFields_institution_category(ctx, field, obj)
		case "operating_license_photo":
			out.Values[i] = ec._EnterpriseMaxFields_operating_license_photo(ctx, field, obj)
		case "business_license_photo":
			out.Values[i] = ec._EnterpriseMaxFields_business_license_photo(ctx, field, obj)
		case "business_license_issuance_date":
			out.Values[i] = ec._EnterpriseMaxFields_business_license_issuance_date(ctx, field, obj)
		case "business_license_expiry_date":
			out.Values[i] = ec._EnterpriseMaxFields_business_license_expiry_date(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._EnterpriseMaxFields_enterprise_nature(ctx, field, obj)
		case "legal_representative":
			out.Values[i] = ec._EnterpriseMaxFields_legal_representative(ctx, field, obj)
		case "legal_representative_phone":
			out.Values[i] = ec._EnterpriseMaxFields_legal_representative_phone(ctx, field, obj)
		case "legal_representative_id_card_photo":
			out.Values[i] = ec._EnterpriseMaxFields_legal_representative_id_card_photo(ctx, field, obj)
		case "legal_representative_id_card":
			out.Values[i] = ec._EnterpriseMaxFields_legal_representative_id_card(ctx, field, obj)
		case "entrusted_agent":
			out.Values[i] = ec._EnterpriseMaxFields_entrusted_agent(ctx, field, obj)
		case "entrusted_agent_phone":
			out.Values[i] = ec._EnterpriseMaxFields_entrusted_agent_phone(ctx, field, obj)
		case "entrusted_agent_id_card_photo":
			out.Values[i] = ec._EnterpriseMaxFields_entrusted_agent_id_card_photo(ctx, field, obj)
		case "entrusted_agent_id_card":
			out.Values[i] = ec._EnterpriseMaxFields_entrusted_agent_id_card(ctx, field, obj)
		case "organization_code":
			out.Values[i] = ec._EnterpriseMaxFields_organization_code(ctx, field, obj)
		case "organization_code_certificate_photo":
			out.Values[i] = ec._EnterpriseMaxFields_organization_code_certificate_photo(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._EnterpriseMaxFields_update_time_in(ctx, field, obj)
		case "business_photo":
			out.Values[i] = ec._EnterpriseMaxFields_business_photo(ctx, field, obj)
		case "is_black":
			out.Values[i] = ec._EnterpriseMaxFields_is_black(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EnterpriseMaxFields_check_status(ctx, field, obj)
		case "is_install":
			out.Values[i] = ec._EnterpriseMaxFields_is_install(ctx, field, obj)
		case "is_input":
			out.Values[i] = ec._EnterpriseMaxFields_is_input(ctx, field, obj)
		case "is_upload_province":
			out.Values[i] = ec._EnterpriseMaxFields_is_upload_province(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseMaxFields_score(ctx, field, obj)
		case "brigade_id":
			out.Values[i] = ec._EnterpriseMaxFields_brigade_id(ctx, field, obj)
		case "police_station_id":
			out.Values[i] = ec._EnterpriseMaxFields_police_station_id(ctx, field, obj)
		case "brigade_review_opinion":
			out.Values[i] = ec._EnterpriseMaxFields_brigade_review_opinion(ctx, field, obj)
		case "brigade_review_time":
			out.Values[i] = ec._EnterpriseMaxFields_brigade_review_time(ctx, field, obj)
		case "brigade_review_by":
			out.Values[i] = ec._EnterpriseMaxFields_brigade_review_by(ctx, field, obj)
		case "association_review_opinion":
			out.Values[i] = ec._EnterpriseMaxFields_association_review_opinion(ctx, field, obj)
		case "association_review_time":
			out.Values[i] = ec._EnterpriseMaxFields_association_review_time(ctx, field, obj)
		case "association_review_by":
			out.Values[i] = ec._EnterpriseMaxFields_association_review_by(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EnterpriseMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EnterpriseMaxFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EnterpriseMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EnterpriseMaxFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EnterpriseMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EnterpriseMaxFields_delete_by(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._EnterpriseMaxFields_remarks(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._EnterpriseMaxFields_is_deleted(ctx, field, obj)
		case "is_key_point":
			out.Values[i] = ec._EnterpriseMaxFields_is_key_point(ctx, field, obj)
		case "enterprise_type":
			out.Values[i] = ec._EnterpriseMaxFields_enterprise_type(ctx, field, obj)
		case "is_catalog":
			out.Values[i] = ec._EnterpriseMaxFields_is_catalog(ctx, field, obj)
		case "state":
			out.Values[i] = ec._EnterpriseMaxFields_state(ctx, field, obj)
		case "proxy_enterprise_id":
			out.Values[i] = ec._EnterpriseMaxFields_proxy_enterprise_id(ctx, field, obj)
		case "is_expire":
			out.Values[i] = ec._EnterpriseMaxFields_is_expire(ctx, field, obj)
		case "credit_level":
			out.Values[i] = ec._EnterpriseMaxFields_credit_level(ctx, field, obj)
		case "credit_level_remark":
			out.Values[i] = ec._EnterpriseMaxFields_credit_level_remark(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseMinFieldsImplementors = []string{"EnterpriseMinFields"}

func (ec *executionContext) _EnterpriseMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseMinFields")
		case "id":
			out.Values[i] = ec._EnterpriseMinFields_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseMinFields_enterprise_id(ctx, field, obj)
		case "superior_enterprise_id":
			out.Values[i] = ec._EnterpriseMinFields_superior_enterprise_id(ctx, field, obj)
		case "enterprise_code":
			out.Values[i] = ec._EnterpriseMinFields_enterprise_code(ctx, field, obj)
		case "enterprise_name":
			out.Values[i] = ec._EnterpriseMinFields_enterprise_name(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._EnterpriseMinFields_enterprise_level(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._EnterpriseMinFields_display_number(ctx, field, obj)
		case "enterprise_address":
			out.Values[i] = ec._EnterpriseMinFields_enterprise_address(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._EnterpriseMinFields_business_scope(ctx, field, obj)
		case "fax_number":
			out.Values[i] = ec._EnterpriseMinFields_fax_number(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._EnterpriseMinFields_province_id(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._EnterpriseMinFields_city_id(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._EnterpriseMinFields_district_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._EnterpriseMinFields_institution_category(ctx, field, obj)
		case "operating_license_photo":
			out.Values[i] = ec._EnterpriseMinFields_operating_license_photo(ctx, field, obj)
		case "business_license_photo":
			out.Values[i] = ec._EnterpriseMinFields_business_license_photo(ctx, field, obj)
		case "business_license_issuance_date":
			out.Values[i] = ec._EnterpriseMinFields_business_license_issuance_date(ctx, field, obj)
		case "business_license_expiry_date":
			out.Values[i] = ec._EnterpriseMinFields_business_license_expiry_date(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._EnterpriseMinFields_enterprise_nature(ctx, field, obj)
		case "legal_representative":
			out.Values[i] = ec._EnterpriseMinFields_legal_representative(ctx, field, obj)
		case "legal_representative_phone":
			out.Values[i] = ec._EnterpriseMinFields_legal_representative_phone(ctx, field, obj)
		case "legal_representative_id_card_photo":
			out.Values[i] = ec._EnterpriseMinFields_legal_representative_id_card_photo(ctx, field, obj)
		case "legal_representative_id_card":
			out.Values[i] = ec._EnterpriseMinFields_legal_representative_id_card(ctx, field, obj)
		case "entrusted_agent":
			out.Values[i] = ec._EnterpriseMinFields_entrusted_agent(ctx, field, obj)
		case "entrusted_agent_phone":
			out.Values[i] = ec._EnterpriseMinFields_entrusted_agent_phone(ctx, field, obj)
		case "entrusted_agent_id_card_photo":
			out.Values[i] = ec._EnterpriseMinFields_entrusted_agent_id_card_photo(ctx, field, obj)
		case "entrusted_agent_id_card":
			out.Values[i] = ec._EnterpriseMinFields_entrusted_agent_id_card(ctx, field, obj)
		case "organization_code":
			out.Values[i] = ec._EnterpriseMinFields_organization_code(ctx, field, obj)
		case "organization_code_certificate_photo":
			out.Values[i] = ec._EnterpriseMinFields_organization_code_certificate_photo(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._EnterpriseMinFields_update_time_in(ctx, field, obj)
		case "business_photo":
			out.Values[i] = ec._EnterpriseMinFields_business_photo(ctx, field, obj)
		case "is_black":
			out.Values[i] = ec._EnterpriseMinFields_is_black(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EnterpriseMinFields_check_status(ctx, field, obj)
		case "is_install":
			out.Values[i] = ec._EnterpriseMinFields_is_install(ctx, field, obj)
		case "is_input":
			out.Values[i] = ec._EnterpriseMinFields_is_input(ctx, field, obj)
		case "is_upload_province":
			out.Values[i] = ec._EnterpriseMinFields_is_upload_province(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseMinFields_score(ctx, field, obj)
		case "brigade_id":
			out.Values[i] = ec._EnterpriseMinFields_brigade_id(ctx, field, obj)
		case "police_station_id":
			out.Values[i] = ec._EnterpriseMinFields_police_station_id(ctx, field, obj)
		case "brigade_review_opinion":
			out.Values[i] = ec._EnterpriseMinFields_brigade_review_opinion(ctx, field, obj)
		case "brigade_review_time":
			out.Values[i] = ec._EnterpriseMinFields_brigade_review_time(ctx, field, obj)
		case "brigade_review_by":
			out.Values[i] = ec._EnterpriseMinFields_brigade_review_by(ctx, field, obj)
		case "association_review_opinion":
			out.Values[i] = ec._EnterpriseMinFields_association_review_opinion(ctx, field, obj)
		case "association_review_time":
			out.Values[i] = ec._EnterpriseMinFields_association_review_time(ctx, field, obj)
		case "association_review_by":
			out.Values[i] = ec._EnterpriseMinFields_association_review_by(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EnterpriseMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EnterpriseMinFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EnterpriseMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EnterpriseMinFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EnterpriseMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EnterpriseMinFields_delete_by(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._EnterpriseMinFields_remarks(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._EnterpriseMinFields_is_deleted(ctx, field, obj)
		case "is_key_point":
			out.Values[i] = ec._EnterpriseMinFields_is_key_point(ctx, field, obj)
		case "enterprise_type":
			out.Values[i] = ec._EnterpriseMinFields_enterprise_type(ctx, field, obj)
		case "is_catalog":
			out.Values[i] = ec._EnterpriseMinFields_is_catalog(ctx, field, obj)
		case "state":
			out.Values[i] = ec._EnterpriseMinFields_state(ctx, field, obj)
		case "proxy_enterprise_id":
			out.Values[i] = ec._EnterpriseMinFields_proxy_enterprise_id(ctx, field, obj)
		case "is_expire":
			out.Values[i] = ec._EnterpriseMinFields_is_expire(ctx, field, obj)
		case "credit_level":
			out.Values[i] = ec._EnterpriseMinFields_credit_level(ctx, field, obj)
		case "credit_level_remark":
			out.Values[i] = ec._EnterpriseMinFields_credit_level_remark(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseMuckTrunkImplementors = []string{"EnterpriseMuckTrunk"}

func (ec *executionContext) _EnterpriseMuckTrunk(ctx context.Context, sel ast.SelectionSet, obj *model1.EnterpriseMuckTrunk) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseMuckTrunkImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseMuckTrunk")
		case "id":
			out.Values[i] = ec._EnterpriseMuckTrunk_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise_muck_trunk_id":
			out.Values[i] = ec._EnterpriseMuckTrunk_enterprise_muck_trunk_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseMuckTrunk_enterprise_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "company_manager":
			out.Values[i] = ec._EnterpriseMuckTrunk_company_manager(ctx, field, obj)
		case "company_manager_phone":
			out.Values[i] = ec._EnterpriseMuckTrunk_company_manager_phone(ctx, field, obj)
		case "company_manager_id_card":
			out.Values[i] = ec._EnterpriseMuckTrunk_company_manager_id_card(ctx, field, obj)
		case "company_safe_manager":
			out.Values[i] = ec._EnterpriseMuckTrunk_company_safe_manager(ctx, field, obj)
		case "company_safe_manger_phone":
			out.Values[i] = ec._EnterpriseMuckTrunk_company_safe_manger_phone(ctx, field, obj)
		case "company_safe_manager_id_card":
			out.Values[i] = ec._EnterpriseMuckTrunk_company_safe_manager_id_card(ctx, field, obj)
		case "road_license":
			out.Values[i] = ec._EnterpriseMuckTrunk_road_license(ctx, field, obj)
		case "road_license_photo":
			out.Values[i] = ec._EnterpriseMuckTrunk_road_license_photo(ctx, field, obj)
		case "office_address":
			out.Values[i] = ec._EnterpriseMuckTrunk_office_address(ctx, field, obj)
		case "office_area":
			out.Values[i] = ec._EnterpriseMuckTrunk_office_area(ctx, field, obj)
		case "office_photo":
			out.Values[i] = ec._EnterpriseMuckTrunk_office_photo(ctx, field, obj)
		case "parking_address":
			out.Values[i] = ec._EnterpriseMuckTrunk_parking_address(ctx, field, obj)
		case "parking_area":
			out.Values[i] = ec._EnterpriseMuckTrunk_parking_area(ctx, field, obj)
		case "parking_single_area":
			out.Values[i] = ec._EnterpriseMuckTrunk_parking_single_area(ctx, field, obj)
		case "smart_car_count":
			out.Values[i] = ec._EnterpriseMuckTrunk_smart_car_count(ctx, field, obj)
		case "is_transport_add":
			out.Values[i] = ec._EnterpriseMuckTrunk_is_transport_add(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "county_check_state":
			out.Values[i] = ec._EnterpriseMuckTrunk_county_check_state(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "city_check_state":
			out.Values[i] = ec._EnterpriseMuckTrunk_city_check_state(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "allow_generate_preview_num":
			out.Values[i] = ec._EnterpriseMuckTrunk_allow_generate_preview_num(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "promise_book_url":
			out.Values[i] = ec._EnterpriseMuckTrunk_promise_book_url(ctx, field, obj)
		case "promise_remark":
			out.Values[i] = ec._EnterpriseMuckTrunk_promise_remark(ctx, field, obj)
		case "transport_type":
			out.Values[i] = ec._EnterpriseMuckTrunk_transport_type(ctx, field, obj)
		case "routeline_card_promise_photo":
			out.Values[i] = ec._EnterpriseMuckTrunk_routeline_card_promise_photo(ctx, field, obj)
		case "transport_liable_promise_photo":
			out.Values[i] = ec._EnterpriseMuckTrunk_transport_liable_promise_photo(ctx, field, obj)
		case "is_type_a":
			out.Values[i] = ec._EnterpriseMuckTrunk_is_type_a(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_type_b":
			out.Values[i] = ec._EnterpriseMuckTrunk_is_type_b(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_type_c":
			out.Values[i] = ec._EnterpriseMuckTrunk_is_type_c(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_type_d":
			out.Values[i] = ec._EnterpriseMuckTrunk_is_type_d(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_type_e":
			out.Values[i] = ec._EnterpriseMuckTrunk_is_type_e(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_at":
			out.Values[i] = ec._EnterpriseMuckTrunk_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._EnterpriseMuckTrunk_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EnterpriseMuckTrunk_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EnterpriseMuckTrunk_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EnterpriseMuckTrunk_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EnterpriseMuckTrunk_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EnterpriseMuckTrunk_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseMuckTrunkAggregateImplementors = []string{"EnterpriseMuckTrunkAggregate"}

func (ec *executionContext) _EnterpriseMuckTrunkAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseMuckTrunkAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseMuckTrunkAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseMuckTrunkAggregate")
		case "aggregate":
			out.Values[i] = ec._EnterpriseMuckTrunkAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseMuckTrunkAggregateFieldsImplementors = []string{"EnterpriseMuckTrunkAggregateFields"}

func (ec *executionContext) _EnterpriseMuckTrunkAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseMuckTrunkAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseMuckTrunkAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseMuckTrunkAggregateFields")
		case "avg":
			out.Values[i] = ec._EnterpriseMuckTrunkAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._EnterpriseMuckTrunkAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._EnterpriseMuckTrunkAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._EnterpriseMuckTrunkAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._EnterpriseMuckTrunkAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._EnterpriseMuckTrunkAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._EnterpriseMuckTrunkAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._EnterpriseMuckTrunkAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._EnterpriseMuckTrunkAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._EnterpriseMuckTrunkAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._EnterpriseMuckTrunkAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseMuckTrunkAvgFieldsImplementors = []string{"EnterpriseMuckTrunkAvgFields"}

func (ec *executionContext) _EnterpriseMuckTrunkAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseMuckTrunkAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseMuckTrunkAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseMuckTrunkAvgFields")
		case "id":
			out.Values[i] = ec._EnterpriseMuckTrunkAvgFields_id(ctx, field, obj)
		case "smart_car_count":
			out.Values[i] = ec._EnterpriseMuckTrunkAvgFields_smart_car_count(ctx, field, obj)
		case "transport_type":
			out.Values[i] = ec._EnterpriseMuckTrunkAvgFields_transport_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseMuckTrunkMaxFieldsImplementors = []string{"EnterpriseMuckTrunkMaxFields"}

func (ec *executionContext) _EnterpriseMuckTrunkMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseMuckTrunkMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseMuckTrunkMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseMuckTrunkMaxFields")
		case "id":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_id(ctx, field, obj)
		case "enterprise_muck_trunk_id":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_enterprise_muck_trunk_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_enterprise_id(ctx, field, obj)
		case "company_manager":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_company_manager(ctx, field, obj)
		case "company_manager_phone":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_company_manager_phone(ctx, field, obj)
		case "company_manager_id_card":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_company_manager_id_card(ctx, field, obj)
		case "company_safe_manager":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_company_safe_manager(ctx, field, obj)
		case "company_safe_manger_phone":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_company_safe_manger_phone(ctx, field, obj)
		case "company_safe_manager_id_card":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_company_safe_manager_id_card(ctx, field, obj)
		case "road_license":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_road_license(ctx, field, obj)
		case "road_license_photo":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_road_license_photo(ctx, field, obj)
		case "office_address":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_office_address(ctx, field, obj)
		case "office_area":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_office_area(ctx, field, obj)
		case "office_photo":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_office_photo(ctx, field, obj)
		case "parking_address":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_parking_address(ctx, field, obj)
		case "parking_area":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_parking_area(ctx, field, obj)
		case "parking_single_area":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_parking_single_area(ctx, field, obj)
		case "smart_car_count":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_smart_car_count(ctx, field, obj)
		case "is_transport_add":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_is_transport_add(ctx, field, obj)
		case "county_check_state":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_county_check_state(ctx, field, obj)
		case "city_check_state":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_city_check_state(ctx, field, obj)
		case "allow_generate_preview_num":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_allow_generate_preview_num(ctx, field, obj)
		case "promise_book_url":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_promise_book_url(ctx, field, obj)
		case "promise_remark":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_promise_remark(ctx, field, obj)
		case "transport_type":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_transport_type(ctx, field, obj)
		case "routeline_card_promise_photo":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_routeline_card_promise_photo(ctx, field, obj)
		case "transport_liable_promise_photo":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_transport_liable_promise_photo(ctx, field, obj)
		case "is_type_a":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_is_type_a(ctx, field, obj)
		case "is_type_b":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_is_type_b(ctx, field, obj)
		case "is_type_c":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_is_type_c(ctx, field, obj)
		case "is_type_d":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_is_type_d(ctx, field, obj)
		case "is_type_e":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_is_type_e(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EnterpriseMuckTrunkMaxFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseMuckTrunkMinFieldsImplementors = []string{"EnterpriseMuckTrunkMinFields"}

func (ec *executionContext) _EnterpriseMuckTrunkMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseMuckTrunkMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseMuckTrunkMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseMuckTrunkMinFields")
		case "id":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_id(ctx, field, obj)
		case "enterprise_muck_trunk_id":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_enterprise_muck_trunk_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_enterprise_id(ctx, field, obj)
		case "company_manager":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_company_manager(ctx, field, obj)
		case "company_manager_phone":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_company_manager_phone(ctx, field, obj)
		case "company_manager_id_card":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_company_manager_id_card(ctx, field, obj)
		case "company_safe_manager":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_company_safe_manager(ctx, field, obj)
		case "company_safe_manger_phone":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_company_safe_manger_phone(ctx, field, obj)
		case "company_safe_manager_id_card":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_company_safe_manager_id_card(ctx, field, obj)
		case "road_license":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_road_license(ctx, field, obj)
		case "road_license_photo":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_road_license_photo(ctx, field, obj)
		case "office_address":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_office_address(ctx, field, obj)
		case "office_area":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_office_area(ctx, field, obj)
		case "office_photo":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_office_photo(ctx, field, obj)
		case "parking_address":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_parking_address(ctx, field, obj)
		case "parking_area":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_parking_area(ctx, field, obj)
		case "parking_single_area":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_parking_single_area(ctx, field, obj)
		case "smart_car_count":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_smart_car_count(ctx, field, obj)
		case "is_transport_add":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_is_transport_add(ctx, field, obj)
		case "county_check_state":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_county_check_state(ctx, field, obj)
		case "city_check_state":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_city_check_state(ctx, field, obj)
		case "allow_generate_preview_num":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_allow_generate_preview_num(ctx, field, obj)
		case "promise_book_url":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_promise_book_url(ctx, field, obj)
		case "promise_remark":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_promise_remark(ctx, field, obj)
		case "transport_type":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_transport_type(ctx, field, obj)
		case "routeline_card_promise_photo":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_routeline_card_promise_photo(ctx, field, obj)
		case "transport_liable_promise_photo":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_transport_liable_promise_photo(ctx, field, obj)
		case "is_type_a":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_is_type_a(ctx, field, obj)
		case "is_type_b":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_is_type_b(ctx, field, obj)
		case "is_type_c":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_is_type_c(ctx, field, obj)
		case "is_type_d":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_is_type_d(ctx, field, obj)
		case "is_type_e":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_is_type_e(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EnterpriseMuckTrunkMinFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseMuckTrunkMutationResponseImplementors = []string{"EnterpriseMuckTrunkMutationResponse"}

func (ec *executionContext) _EnterpriseMuckTrunkMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseMuckTrunkMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseMuckTrunkMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseMuckTrunkMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._EnterpriseMuckTrunkMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._EnterpriseMuckTrunkMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseMuckTrunkStddevFieldsImplementors = []string{"EnterpriseMuckTrunkStddevFields"}

func (ec *executionContext) _EnterpriseMuckTrunkStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseMuckTrunkStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseMuckTrunkStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseMuckTrunkStddevFields")
		case "id":
			out.Values[i] = ec._EnterpriseMuckTrunkStddevFields_id(ctx, field, obj)
		case "smart_car_count":
			out.Values[i] = ec._EnterpriseMuckTrunkStddevFields_smart_car_count(ctx, field, obj)
		case "transport_type":
			out.Values[i] = ec._EnterpriseMuckTrunkStddevFields_transport_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseMuckTrunkStddevPopFieldsImplementors = []string{"EnterpriseMuckTrunkStddevPopFields"}

func (ec *executionContext) _EnterpriseMuckTrunkStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseMuckTrunkStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseMuckTrunkStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseMuckTrunkStddevPopFields")
		case "id":
			out.Values[i] = ec._EnterpriseMuckTrunkStddevPopFields_id(ctx, field, obj)
		case "smart_car_count":
			out.Values[i] = ec._EnterpriseMuckTrunkStddevPopFields_smart_car_count(ctx, field, obj)
		case "transport_type":
			out.Values[i] = ec._EnterpriseMuckTrunkStddevPopFields_transport_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseMuckTrunkStddevSampFieldsImplementors = []string{"EnterpriseMuckTrunkStddevSampFields"}

func (ec *executionContext) _EnterpriseMuckTrunkStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseMuckTrunkStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseMuckTrunkStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseMuckTrunkStddevSampFields")
		case "id":
			out.Values[i] = ec._EnterpriseMuckTrunkStddevSampFields_id(ctx, field, obj)
		case "smart_car_count":
			out.Values[i] = ec._EnterpriseMuckTrunkStddevSampFields_smart_car_count(ctx, field, obj)
		case "transport_type":
			out.Values[i] = ec._EnterpriseMuckTrunkStddevSampFields_transport_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseMuckTrunkSumFieldsImplementors = []string{"EnterpriseMuckTrunkSumFields"}

func (ec *executionContext) _EnterpriseMuckTrunkSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseMuckTrunkSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseMuckTrunkSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseMuckTrunkSumFields")
		case "id":
			out.Values[i] = ec._EnterpriseMuckTrunkSumFields_id(ctx, field, obj)
		case "smart_car_count":
			out.Values[i] = ec._EnterpriseMuckTrunkSumFields_smart_car_count(ctx, field, obj)
		case "transport_type":
			out.Values[i] = ec._EnterpriseMuckTrunkSumFields_transport_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseMuckTrunkVarPopFieldsImplementors = []string{"EnterpriseMuckTrunkVarPopFields"}

func (ec *executionContext) _EnterpriseMuckTrunkVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseMuckTrunkVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseMuckTrunkVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseMuckTrunkVarPopFields")
		case "id":
			out.Values[i] = ec._EnterpriseMuckTrunkVarPopFields_id(ctx, field, obj)
		case "smart_car_count":
			out.Values[i] = ec._EnterpriseMuckTrunkVarPopFields_smart_car_count(ctx, field, obj)
		case "transport_type":
			out.Values[i] = ec._EnterpriseMuckTrunkVarPopFields_transport_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseMuckTrunkVarSampFieldsImplementors = []string{"EnterpriseMuckTrunkVarSampFields"}

func (ec *executionContext) _EnterpriseMuckTrunkVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseMuckTrunkVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseMuckTrunkVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseMuckTrunkVarSampFields")
		case "id":
			out.Values[i] = ec._EnterpriseMuckTrunkVarSampFields_id(ctx, field, obj)
		case "smart_car_count":
			out.Values[i] = ec._EnterpriseMuckTrunkVarSampFields_smart_car_count(ctx, field, obj)
		case "transport_type":
			out.Values[i] = ec._EnterpriseMuckTrunkVarSampFields_transport_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseMuckTrunkVarianceFieldsImplementors = []string{"EnterpriseMuckTrunkVarianceFields"}

func (ec *executionContext) _EnterpriseMuckTrunkVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseMuckTrunkVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseMuckTrunkVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseMuckTrunkVarianceFields")
		case "id":
			out.Values[i] = ec._EnterpriseMuckTrunkVarianceFields_id(ctx, field, obj)
		case "smart_car_count":
			out.Values[i] = ec._EnterpriseMuckTrunkVarianceFields_smart_car_count(ctx, field, obj)
		case "transport_type":
			out.Values[i] = ec._EnterpriseMuckTrunkVarianceFields_transport_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseMutationResponseImplementors = []string{"EnterpriseMutationResponse"}

func (ec *executionContext) _EnterpriseMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._EnterpriseMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._EnterpriseMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseScoreLogImplementors = []string{"EnterpriseScoreLog"}

func (ec *executionContext) _EnterpriseScoreLog(ctx context.Context, sel ast.SelectionSet, obj *model1.EnterpriseScoreLog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseScoreLogImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseScoreLog")
		case "id":
			out.Values[i] = ec._EnterpriseScoreLog_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "log_id":
			out.Values[i] = ec._EnterpriseScoreLog_log_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseScoreLog_enterprise_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "current_score":
			out.Values[i] = ec._EnterpriseScoreLog_current_score(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "add_score":
			out.Values[i] = ec._EnterpriseScoreLog_add_score(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "content":
			out.Values[i] = ec._EnterpriseScoreLog_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "file_url":
			out.Values[i] = ec._EnterpriseScoreLog_file_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "score_set_id":
			out.Values[i] = ec._EnterpriseScoreLog_score_set_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_at":
			out.Values[i] = ec._EnterpriseScoreLog_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._EnterpriseScoreLog_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EnterpriseScoreLog_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EnterpriseScoreLog_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EnterpriseScoreLog_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EnterpriseScoreLog_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EnterpriseScoreLog_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseScoreLogAggregateImplementors = []string{"EnterpriseScoreLogAggregate"}

func (ec *executionContext) _EnterpriseScoreLogAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseScoreLogAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseScoreLogAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseScoreLogAggregate")
		case "aggregate":
			out.Values[i] = ec._EnterpriseScoreLogAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseScoreLogAggregateFieldsImplementors = []string{"EnterpriseScoreLogAggregateFields"}

func (ec *executionContext) _EnterpriseScoreLogAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseScoreLogAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseScoreLogAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseScoreLogAggregateFields")
		case "avg":
			out.Values[i] = ec._EnterpriseScoreLogAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._EnterpriseScoreLogAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._EnterpriseScoreLogAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._EnterpriseScoreLogAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._EnterpriseScoreLogAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._EnterpriseScoreLogAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._EnterpriseScoreLogAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._EnterpriseScoreLogAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._EnterpriseScoreLogAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._EnterpriseScoreLogAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._EnterpriseScoreLogAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseScoreLogAvgFieldsImplementors = []string{"EnterpriseScoreLogAvgFields"}

func (ec *executionContext) _EnterpriseScoreLogAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseScoreLogAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseScoreLogAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseScoreLogAvgFields")
		case "id":
			out.Values[i] = ec._EnterpriseScoreLogAvgFields_id(ctx, field, obj)
		case "current_score":
			out.Values[i] = ec._EnterpriseScoreLogAvgFields_current_score(ctx, field, obj)
		case "add_score":
			out.Values[i] = ec._EnterpriseScoreLogAvgFields_add_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseScoreLogMaxFieldsImplementors = []string{"EnterpriseScoreLogMaxFields"}

func (ec *executionContext) _EnterpriseScoreLogMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseScoreLogMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseScoreLogMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseScoreLogMaxFields")
		case "id":
			out.Values[i] = ec._EnterpriseScoreLogMaxFields_id(ctx, field, obj)
		case "log_id":
			out.Values[i] = ec._EnterpriseScoreLogMaxFields_log_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseScoreLogMaxFields_enterprise_id(ctx, field, obj)
		case "current_score":
			out.Values[i] = ec._EnterpriseScoreLogMaxFields_current_score(ctx, field, obj)
		case "add_score":
			out.Values[i] = ec._EnterpriseScoreLogMaxFields_add_score(ctx, field, obj)
		case "content":
			out.Values[i] = ec._EnterpriseScoreLogMaxFields_content(ctx, field, obj)
		case "file_url":
			out.Values[i] = ec._EnterpriseScoreLogMaxFields_file_url(ctx, field, obj)
		case "score_set_id":
			out.Values[i] = ec._EnterpriseScoreLogMaxFields_score_set_id(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EnterpriseScoreLogMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EnterpriseScoreLogMaxFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EnterpriseScoreLogMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EnterpriseScoreLogMaxFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EnterpriseScoreLogMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EnterpriseScoreLogMaxFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EnterpriseScoreLogMaxFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseScoreLogMinFieldsImplementors = []string{"EnterpriseScoreLogMinFields"}

func (ec *executionContext) _EnterpriseScoreLogMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseScoreLogMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseScoreLogMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseScoreLogMinFields")
		case "id":
			out.Values[i] = ec._EnterpriseScoreLogMinFields_id(ctx, field, obj)
		case "log_id":
			out.Values[i] = ec._EnterpriseScoreLogMinFields_log_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseScoreLogMinFields_enterprise_id(ctx, field, obj)
		case "current_score":
			out.Values[i] = ec._EnterpriseScoreLogMinFields_current_score(ctx, field, obj)
		case "add_score":
			out.Values[i] = ec._EnterpriseScoreLogMinFields_add_score(ctx, field, obj)
		case "content":
			out.Values[i] = ec._EnterpriseScoreLogMinFields_content(ctx, field, obj)
		case "file_url":
			out.Values[i] = ec._EnterpriseScoreLogMinFields_file_url(ctx, field, obj)
		case "score_set_id":
			out.Values[i] = ec._EnterpriseScoreLogMinFields_score_set_id(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EnterpriseScoreLogMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EnterpriseScoreLogMinFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EnterpriseScoreLogMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EnterpriseScoreLogMinFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EnterpriseScoreLogMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EnterpriseScoreLogMinFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EnterpriseScoreLogMinFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseScoreLogMutationResponseImplementors = []string{"EnterpriseScoreLogMutationResponse"}

func (ec *executionContext) _EnterpriseScoreLogMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseScoreLogMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseScoreLogMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseScoreLogMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._EnterpriseScoreLogMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._EnterpriseScoreLogMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseScoreLogStddevFieldsImplementors = []string{"EnterpriseScoreLogStddevFields"}

func (ec *executionContext) _EnterpriseScoreLogStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseScoreLogStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseScoreLogStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseScoreLogStddevFields")
		case "id":
			out.Values[i] = ec._EnterpriseScoreLogStddevFields_id(ctx, field, obj)
		case "current_score":
			out.Values[i] = ec._EnterpriseScoreLogStddevFields_current_score(ctx, field, obj)
		case "add_score":
			out.Values[i] = ec._EnterpriseScoreLogStddevFields_add_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseScoreLogStddevPopFieldsImplementors = []string{"EnterpriseScoreLogStddevPopFields"}

func (ec *executionContext) _EnterpriseScoreLogStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseScoreLogStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseScoreLogStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseScoreLogStddevPopFields")
		case "id":
			out.Values[i] = ec._EnterpriseScoreLogStddevPopFields_id(ctx, field, obj)
		case "current_score":
			out.Values[i] = ec._EnterpriseScoreLogStddevPopFields_current_score(ctx, field, obj)
		case "add_score":
			out.Values[i] = ec._EnterpriseScoreLogStddevPopFields_add_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseScoreLogStddevSampFieldsImplementors = []string{"EnterpriseScoreLogStddevSampFields"}

func (ec *executionContext) _EnterpriseScoreLogStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseScoreLogStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseScoreLogStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseScoreLogStddevSampFields")
		case "id":
			out.Values[i] = ec._EnterpriseScoreLogStddevSampFields_id(ctx, field, obj)
		case "current_score":
			out.Values[i] = ec._EnterpriseScoreLogStddevSampFields_current_score(ctx, field, obj)
		case "add_score":
			out.Values[i] = ec._EnterpriseScoreLogStddevSampFields_add_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseScoreLogSumFieldsImplementors = []string{"EnterpriseScoreLogSumFields"}

func (ec *executionContext) _EnterpriseScoreLogSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseScoreLogSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseScoreLogSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseScoreLogSumFields")
		case "id":
			out.Values[i] = ec._EnterpriseScoreLogSumFields_id(ctx, field, obj)
		case "current_score":
			out.Values[i] = ec._EnterpriseScoreLogSumFields_current_score(ctx, field, obj)
		case "add_score":
			out.Values[i] = ec._EnterpriseScoreLogSumFields_add_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseScoreLogVarPopFieldsImplementors = []string{"EnterpriseScoreLogVarPopFields"}

func (ec *executionContext) _EnterpriseScoreLogVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseScoreLogVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseScoreLogVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseScoreLogVarPopFields")
		case "id":
			out.Values[i] = ec._EnterpriseScoreLogVarPopFields_id(ctx, field, obj)
		case "current_score":
			out.Values[i] = ec._EnterpriseScoreLogVarPopFields_current_score(ctx, field, obj)
		case "add_score":
			out.Values[i] = ec._EnterpriseScoreLogVarPopFields_add_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseScoreLogVarSampFieldsImplementors = []string{"EnterpriseScoreLogVarSampFields"}

func (ec *executionContext) _EnterpriseScoreLogVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseScoreLogVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseScoreLogVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseScoreLogVarSampFields")
		case "id":
			out.Values[i] = ec._EnterpriseScoreLogVarSampFields_id(ctx, field, obj)
		case "current_score":
			out.Values[i] = ec._EnterpriseScoreLogVarSampFields_current_score(ctx, field, obj)
		case "add_score":
			out.Values[i] = ec._EnterpriseScoreLogVarSampFields_add_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseScoreLogVarianceFieldsImplementors = []string{"EnterpriseScoreLogVarianceFields"}

func (ec *executionContext) _EnterpriseScoreLogVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseScoreLogVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseScoreLogVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseScoreLogVarianceFields")
		case "id":
			out.Values[i] = ec._EnterpriseScoreLogVarianceFields_id(ctx, field, obj)
		case "current_score":
			out.Values[i] = ec._EnterpriseScoreLogVarianceFields_current_score(ctx, field, obj)
		case "add_score":
			out.Values[i] = ec._EnterpriseScoreLogVarianceFields_add_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseScoreSetImplementors = []string{"EnterpriseScoreSet"}

func (ec *executionContext) _EnterpriseScoreSet(ctx context.Context, sel ast.SelectionSet, obj *model1.EnterpriseScoreSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseScoreSetImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseScoreSet")
		case "id":
			out.Values[i] = ec._EnterpriseScoreSet_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "score_set_id":
			out.Values[i] = ec._EnterpriseScoreSet_score_set_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "content":
			out.Values[i] = ec._EnterpriseScoreSet_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._EnterpriseScoreSet_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "score":
			out.Values[i] = ec._EnterpriseScoreSet_score(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_at":
			out.Values[i] = ec._EnterpriseScoreSet_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._EnterpriseScoreSet_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EnterpriseScoreSet_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EnterpriseScoreSet_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EnterpriseScoreSet_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EnterpriseScoreSet_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EnterpriseScoreSet_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseScoreSetAggregateImplementors = []string{"EnterpriseScoreSetAggregate"}

func (ec *executionContext) _EnterpriseScoreSetAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseScoreSetAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseScoreSetAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseScoreSetAggregate")
		case "aggregate":
			out.Values[i] = ec._EnterpriseScoreSetAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseScoreSetAggregateFieldsImplementors = []string{"EnterpriseScoreSetAggregateFields"}

func (ec *executionContext) _EnterpriseScoreSetAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseScoreSetAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseScoreSetAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseScoreSetAggregateFields")
		case "avg":
			out.Values[i] = ec._EnterpriseScoreSetAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._EnterpriseScoreSetAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._EnterpriseScoreSetAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._EnterpriseScoreSetAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._EnterpriseScoreSetAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._EnterpriseScoreSetAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._EnterpriseScoreSetAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._EnterpriseScoreSetAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._EnterpriseScoreSetAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._EnterpriseScoreSetAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._EnterpriseScoreSetAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseScoreSetAvgFieldsImplementors = []string{"EnterpriseScoreSetAvgFields"}

func (ec *executionContext) _EnterpriseScoreSetAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseScoreSetAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseScoreSetAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseScoreSetAvgFields")
		case "id":
			out.Values[i] = ec._EnterpriseScoreSetAvgFields_id(ctx, field, obj)
		case "type":
			out.Values[i] = ec._EnterpriseScoreSetAvgFields_type(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseScoreSetAvgFields_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseScoreSetMaxFieldsImplementors = []string{"EnterpriseScoreSetMaxFields"}

func (ec *executionContext) _EnterpriseScoreSetMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseScoreSetMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseScoreSetMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseScoreSetMaxFields")
		case "id":
			out.Values[i] = ec._EnterpriseScoreSetMaxFields_id(ctx, field, obj)
		case "score_set_id":
			out.Values[i] = ec._EnterpriseScoreSetMaxFields_score_set_id(ctx, field, obj)
		case "content":
			out.Values[i] = ec._EnterpriseScoreSetMaxFields_content(ctx, field, obj)
		case "type":
			out.Values[i] = ec._EnterpriseScoreSetMaxFields_type(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseScoreSetMaxFields_score(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EnterpriseScoreSetMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EnterpriseScoreSetMaxFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EnterpriseScoreSetMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EnterpriseScoreSetMaxFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EnterpriseScoreSetMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EnterpriseScoreSetMaxFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EnterpriseScoreSetMaxFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseScoreSetMinFieldsImplementors = []string{"EnterpriseScoreSetMinFields"}

func (ec *executionContext) _EnterpriseScoreSetMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseScoreSetMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseScoreSetMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseScoreSetMinFields")
		case "id":
			out.Values[i] = ec._EnterpriseScoreSetMinFields_id(ctx, field, obj)
		case "score_set_id":
			out.Values[i] = ec._EnterpriseScoreSetMinFields_score_set_id(ctx, field, obj)
		case "content":
			out.Values[i] = ec._EnterpriseScoreSetMinFields_content(ctx, field, obj)
		case "type":
			out.Values[i] = ec._EnterpriseScoreSetMinFields_type(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseScoreSetMinFields_score(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EnterpriseScoreSetMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EnterpriseScoreSetMinFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EnterpriseScoreSetMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EnterpriseScoreSetMinFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EnterpriseScoreSetMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EnterpriseScoreSetMinFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EnterpriseScoreSetMinFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseScoreSetMutationResponseImplementors = []string{"EnterpriseScoreSetMutationResponse"}

func (ec *executionContext) _EnterpriseScoreSetMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseScoreSetMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseScoreSetMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseScoreSetMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._EnterpriseScoreSetMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._EnterpriseScoreSetMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseScoreSetStddevFieldsImplementors = []string{"EnterpriseScoreSetStddevFields"}

func (ec *executionContext) _EnterpriseScoreSetStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseScoreSetStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseScoreSetStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseScoreSetStddevFields")
		case "id":
			out.Values[i] = ec._EnterpriseScoreSetStddevFields_id(ctx, field, obj)
		case "type":
			out.Values[i] = ec._EnterpriseScoreSetStddevFields_type(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseScoreSetStddevFields_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseScoreSetStddevPopFieldsImplementors = []string{"EnterpriseScoreSetStddevPopFields"}

func (ec *executionContext) _EnterpriseScoreSetStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseScoreSetStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseScoreSetStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseScoreSetStddevPopFields")
		case "id":
			out.Values[i] = ec._EnterpriseScoreSetStddevPopFields_id(ctx, field, obj)
		case "type":
			out.Values[i] = ec._EnterpriseScoreSetStddevPopFields_type(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseScoreSetStddevPopFields_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseScoreSetStddevSampFieldsImplementors = []string{"EnterpriseScoreSetStddevSampFields"}

func (ec *executionContext) _EnterpriseScoreSetStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseScoreSetStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseScoreSetStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseScoreSetStddevSampFields")
		case "id":
			out.Values[i] = ec._EnterpriseScoreSetStddevSampFields_id(ctx, field, obj)
		case "type":
			out.Values[i] = ec._EnterpriseScoreSetStddevSampFields_type(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseScoreSetStddevSampFields_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseScoreSetSumFieldsImplementors = []string{"EnterpriseScoreSetSumFields"}

func (ec *executionContext) _EnterpriseScoreSetSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseScoreSetSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseScoreSetSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseScoreSetSumFields")
		case "id":
			out.Values[i] = ec._EnterpriseScoreSetSumFields_id(ctx, field, obj)
		case "type":
			out.Values[i] = ec._EnterpriseScoreSetSumFields_type(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseScoreSetSumFields_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseScoreSetVarPopFieldsImplementors = []string{"EnterpriseScoreSetVarPopFields"}

func (ec *executionContext) _EnterpriseScoreSetVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseScoreSetVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseScoreSetVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseScoreSetVarPopFields")
		case "id":
			out.Values[i] = ec._EnterpriseScoreSetVarPopFields_id(ctx, field, obj)
		case "type":
			out.Values[i] = ec._EnterpriseScoreSetVarPopFields_type(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseScoreSetVarPopFields_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseScoreSetVarSampFieldsImplementors = []string{"EnterpriseScoreSetVarSampFields"}

func (ec *executionContext) _EnterpriseScoreSetVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseScoreSetVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseScoreSetVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseScoreSetVarSampFields")
		case "id":
			out.Values[i] = ec._EnterpriseScoreSetVarSampFields_id(ctx, field, obj)
		case "type":
			out.Values[i] = ec._EnterpriseScoreSetVarSampFields_type(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseScoreSetVarSampFields_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseScoreSetVarianceFieldsImplementors = []string{"EnterpriseScoreSetVarianceFields"}

func (ec *executionContext) _EnterpriseScoreSetVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseScoreSetVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseScoreSetVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseScoreSetVarianceFields")
		case "id":
			out.Values[i] = ec._EnterpriseScoreSetVarianceFields_id(ctx, field, obj)
		case "type":
			out.Values[i] = ec._EnterpriseScoreSetVarianceFields_type(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseScoreSetVarianceFields_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseStateHisImplementors = []string{"EnterpriseStateHis"}

func (ec *executionContext) _EnterpriseStateHis(ctx context.Context, sel ast.SelectionSet, obj *model1.EnterpriseStateHis) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseStateHisImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseStateHis")
		case "id":
			out.Values[i] = ec._EnterpriseStateHis_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "state_his_id":
			out.Values[i] = ec._EnterpriseStateHis_state_his_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseStateHis_enterprise_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reason":
			out.Values[i] = ec._EnterpriseStateHis_reason(ctx, field, obj)
		case "state":
			out.Values[i] = ec._EnterpriseStateHis_state(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "file_url":
			out.Values[i] = ec._EnterpriseStateHis_file_url(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EnterpriseStateHis_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._EnterpriseStateHis_create_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseStateHisAggregateImplementors = []string{"EnterpriseStateHisAggregate"}

func (ec *executionContext) _EnterpriseStateHisAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseStateHisAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseStateHisAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseStateHisAggregate")
		case "aggregate":
			out.Values[i] = ec._EnterpriseStateHisAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseStateHisAggregateFieldsImplementors = []string{"EnterpriseStateHisAggregateFields"}

func (ec *executionContext) _EnterpriseStateHisAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseStateHisAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseStateHisAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseStateHisAggregateFields")
		case "avg":
			out.Values[i] = ec._EnterpriseStateHisAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._EnterpriseStateHisAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._EnterpriseStateHisAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._EnterpriseStateHisAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._EnterpriseStateHisAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._EnterpriseStateHisAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._EnterpriseStateHisAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._EnterpriseStateHisAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._EnterpriseStateHisAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._EnterpriseStateHisAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._EnterpriseStateHisAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseStateHisAvgFieldsImplementors = []string{"EnterpriseStateHisAvgFields"}

func (ec *executionContext) _EnterpriseStateHisAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseStateHisAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseStateHisAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseStateHisAvgFields")
		case "id":
			out.Values[i] = ec._EnterpriseStateHisAvgFields_id(ctx, field, obj)
		case "state":
			out.Values[i] = ec._EnterpriseStateHisAvgFields_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseStateHisMaxFieldsImplementors = []string{"EnterpriseStateHisMaxFields"}

func (ec *executionContext) _EnterpriseStateHisMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseStateHisMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseStateHisMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseStateHisMaxFields")
		case "id":
			out.Values[i] = ec._EnterpriseStateHisMaxFields_id(ctx, field, obj)
		case "state_his_id":
			out.Values[i] = ec._EnterpriseStateHisMaxFields_state_his_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseStateHisMaxFields_enterprise_id(ctx, field, obj)
		case "reason":
			out.Values[i] = ec._EnterpriseStateHisMaxFields_reason(ctx, field, obj)
		case "state":
			out.Values[i] = ec._EnterpriseStateHisMaxFields_state(ctx, field, obj)
		case "file_url":
			out.Values[i] = ec._EnterpriseStateHisMaxFields_file_url(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EnterpriseStateHisMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EnterpriseStateHisMaxFields_create_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseStateHisMinFieldsImplementors = []string{"EnterpriseStateHisMinFields"}

func (ec *executionContext) _EnterpriseStateHisMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseStateHisMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseStateHisMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseStateHisMinFields")
		case "id":
			out.Values[i] = ec._EnterpriseStateHisMinFields_id(ctx, field, obj)
		case "state_his_id":
			out.Values[i] = ec._EnterpriseStateHisMinFields_state_his_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseStateHisMinFields_enterprise_id(ctx, field, obj)
		case "reason":
			out.Values[i] = ec._EnterpriseStateHisMinFields_reason(ctx, field, obj)
		case "state":
			out.Values[i] = ec._EnterpriseStateHisMinFields_state(ctx, field, obj)
		case "file_url":
			out.Values[i] = ec._EnterpriseStateHisMinFields_file_url(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EnterpriseStateHisMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EnterpriseStateHisMinFields_create_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseStateHisMutationResponseImplementors = []string{"EnterpriseStateHisMutationResponse"}

func (ec *executionContext) _EnterpriseStateHisMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseStateHisMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseStateHisMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseStateHisMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._EnterpriseStateHisMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._EnterpriseStateHisMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseStateHisStddevFieldsImplementors = []string{"EnterpriseStateHisStddevFields"}

func (ec *executionContext) _EnterpriseStateHisStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseStateHisStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseStateHisStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseStateHisStddevFields")
		case "id":
			out.Values[i] = ec._EnterpriseStateHisStddevFields_id(ctx, field, obj)
		case "state":
			out.Values[i] = ec._EnterpriseStateHisStddevFields_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseStateHisStddevPopFieldsImplementors = []string{"EnterpriseStateHisStddevPopFields"}

func (ec *executionContext) _EnterpriseStateHisStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseStateHisStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseStateHisStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseStateHisStddevPopFields")
		case "id":
			out.Values[i] = ec._EnterpriseStateHisStddevPopFields_id(ctx, field, obj)
		case "state":
			out.Values[i] = ec._EnterpriseStateHisStddevPopFields_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseStateHisStddevSampFieldsImplementors = []string{"EnterpriseStateHisStddevSampFields"}

func (ec *executionContext) _EnterpriseStateHisStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseStateHisStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseStateHisStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseStateHisStddevSampFields")
		case "id":
			out.Values[i] = ec._EnterpriseStateHisStddevSampFields_id(ctx, field, obj)
		case "state":
			out.Values[i] = ec._EnterpriseStateHisStddevSampFields_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseStateHisSumFieldsImplementors = []string{"EnterpriseStateHisSumFields"}

func (ec *executionContext) _EnterpriseStateHisSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseStateHisSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseStateHisSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseStateHisSumFields")
		case "id":
			out.Values[i] = ec._EnterpriseStateHisSumFields_id(ctx, field, obj)
		case "state":
			out.Values[i] = ec._EnterpriseStateHisSumFields_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseStateHisVarPopFieldsImplementors = []string{"EnterpriseStateHisVarPopFields"}

func (ec *executionContext) _EnterpriseStateHisVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseStateHisVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseStateHisVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseStateHisVarPopFields")
		case "id":
			out.Values[i] = ec._EnterpriseStateHisVarPopFields_id(ctx, field, obj)
		case "state":
			out.Values[i] = ec._EnterpriseStateHisVarPopFields_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseStateHisVarSampFieldsImplementors = []string{"EnterpriseStateHisVarSampFields"}

func (ec *executionContext) _EnterpriseStateHisVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseStateHisVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseStateHisVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseStateHisVarSampFields")
		case "id":
			out.Values[i] = ec._EnterpriseStateHisVarSampFields_id(ctx, field, obj)
		case "state":
			out.Values[i] = ec._EnterpriseStateHisVarSampFields_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseStateHisVarianceFieldsImplementors = []string{"EnterpriseStateHisVarianceFields"}

func (ec *executionContext) _EnterpriseStateHisVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseStateHisVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseStateHisVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseStateHisVarianceFields")
		case "id":
			out.Values[i] = ec._EnterpriseStateHisVarianceFields_id(ctx, field, obj)
		case "state":
			out.Values[i] = ec._EnterpriseStateHisVarianceFields_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseStddevFieldsImplementors = []string{"EnterpriseStddevFields"}

func (ec *executionContext) _EnterpriseStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseStddevFields")
		case "id":
			out.Values[i] = ec._EnterpriseStddevFields_id(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._EnterpriseStddevFields_enterprise_level(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._EnterpriseStddevFields_display_number(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._EnterpriseStddevFields_business_scope(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._EnterpriseStddevFields_province_id(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._EnterpriseStddevFields_city_id(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._EnterpriseStddevFields_district_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._EnterpriseStddevFields_institution_category(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._EnterpriseStddevFields_enterprise_nature(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EnterpriseStddevFields_check_status(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseStddevFields_score(ctx, field, obj)
		case "enterprise_type":
			out.Values[i] = ec._EnterpriseStddevFields_enterprise_type(ctx, field, obj)
		case "state":
			out.Values[i] = ec._EnterpriseStddevFields_state(ctx, field, obj)
		case "credit_level":
			out.Values[i] = ec._EnterpriseStddevFields_credit_level(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseStddevPopFieldsImplementors = []string{"EnterpriseStddevPopFields"}

func (ec *executionContext) _EnterpriseStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseStddevPopFields")
		case "id":
			out.Values[i] = ec._EnterpriseStddevPopFields_id(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._EnterpriseStddevPopFields_enterprise_level(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._EnterpriseStddevPopFields_display_number(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._EnterpriseStddevPopFields_business_scope(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._EnterpriseStddevPopFields_province_id(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._EnterpriseStddevPopFields_city_id(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._EnterpriseStddevPopFields_district_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._EnterpriseStddevPopFields_institution_category(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._EnterpriseStddevPopFields_enterprise_nature(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EnterpriseStddevPopFields_check_status(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseStddevPopFields_score(ctx, field, obj)
		case "enterprise_type":
			out.Values[i] = ec._EnterpriseStddevPopFields_enterprise_type(ctx, field, obj)
		case "state":
			out.Values[i] = ec._EnterpriseStddevPopFields_state(ctx, field, obj)
		case "credit_level":
			out.Values[i] = ec._EnterpriseStddevPopFields_credit_level(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseStddevSampFieldsImplementors = []string{"EnterpriseStddevSampFields"}

func (ec *executionContext) _EnterpriseStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseStddevSampFields")
		case "id":
			out.Values[i] = ec._EnterpriseStddevSampFields_id(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._EnterpriseStddevSampFields_enterprise_level(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._EnterpriseStddevSampFields_display_number(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._EnterpriseStddevSampFields_business_scope(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._EnterpriseStddevSampFields_province_id(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._EnterpriseStddevSampFields_city_id(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._EnterpriseStddevSampFields_district_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._EnterpriseStddevSampFields_institution_category(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._EnterpriseStddevSampFields_enterprise_nature(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EnterpriseStddevSampFields_check_status(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseStddevSampFields_score(ctx, field, obj)
		case "enterprise_type":
			out.Values[i] = ec._EnterpriseStddevSampFields_enterprise_type(ctx, field, obj)
		case "state":
			out.Values[i] = ec._EnterpriseStddevSampFields_state(ctx, field, obj)
		case "credit_level":
			out.Values[i] = ec._EnterpriseStddevSampFields_credit_level(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseSumFieldsImplementors = []string{"EnterpriseSumFields"}

func (ec *executionContext) _EnterpriseSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseSumFields")
		case "id":
			out.Values[i] = ec._EnterpriseSumFields_id(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._EnterpriseSumFields_enterprise_level(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._EnterpriseSumFields_display_number(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._EnterpriseSumFields_business_scope(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._EnterpriseSumFields_province_id(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._EnterpriseSumFields_city_id(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._EnterpriseSumFields_district_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._EnterpriseSumFields_institution_category(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._EnterpriseSumFields_enterprise_nature(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EnterpriseSumFields_check_status(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseSumFields_score(ctx, field, obj)
		case "enterprise_type":
			out.Values[i] = ec._EnterpriseSumFields_enterprise_type(ctx, field, obj)
		case "state":
			out.Values[i] = ec._EnterpriseSumFields_state(ctx, field, obj)
		case "credit_level":
			out.Values[i] = ec._EnterpriseSumFields_credit_level(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseUkeyImplementors = []string{"EnterpriseUkey"}

func (ec *executionContext) _EnterpriseUkey(ctx context.Context, sel ast.SelectionSet, obj *model1.EnterpriseUkey) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseUkeyImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseUkey")
		case "id":
			out.Values[i] = ec._EnterpriseUkey_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ukey_id":
			out.Values[i] = ec._EnterpriseUkey_ukey_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseUkey_enterprise_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_at":
			out.Values[i] = ec._EnterpriseUkey_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._EnterpriseUkey_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EnterpriseUkey_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EnterpriseUkey_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EnterpriseUkey_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EnterpriseUkey_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EnterpriseUkey_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseUkeyAggregateImplementors = []string{"EnterpriseUkeyAggregate"}

func (ec *executionContext) _EnterpriseUkeyAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseUkeyAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseUkeyAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseUkeyAggregate")
		case "aggregate":
			out.Values[i] = ec._EnterpriseUkeyAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseUkeyAggregateFieldsImplementors = []string{"EnterpriseUkeyAggregateFields"}

func (ec *executionContext) _EnterpriseUkeyAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseUkeyAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseUkeyAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseUkeyAggregateFields")
		case "avg":
			out.Values[i] = ec._EnterpriseUkeyAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._EnterpriseUkeyAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._EnterpriseUkeyAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._EnterpriseUkeyAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._EnterpriseUkeyAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._EnterpriseUkeyAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._EnterpriseUkeyAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._EnterpriseUkeyAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._EnterpriseUkeyAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._EnterpriseUkeyAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._EnterpriseUkeyAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseUkeyAvgFieldsImplementors = []string{"EnterpriseUkeyAvgFields"}

func (ec *executionContext) _EnterpriseUkeyAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseUkeyAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseUkeyAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseUkeyAvgFields")
		case "id":
			out.Values[i] = ec._EnterpriseUkeyAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseUkeyMaxFieldsImplementors = []string{"EnterpriseUkeyMaxFields"}

func (ec *executionContext) _EnterpriseUkeyMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseUkeyMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseUkeyMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseUkeyMaxFields")
		case "id":
			out.Values[i] = ec._EnterpriseUkeyMaxFields_id(ctx, field, obj)
		case "ukey_id":
			out.Values[i] = ec._EnterpriseUkeyMaxFields_ukey_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseUkeyMaxFields_enterprise_id(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EnterpriseUkeyMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EnterpriseUkeyMaxFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EnterpriseUkeyMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EnterpriseUkeyMaxFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EnterpriseUkeyMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EnterpriseUkeyMaxFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EnterpriseUkeyMaxFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseUkeyMinFieldsImplementors = []string{"EnterpriseUkeyMinFields"}

func (ec *executionContext) _EnterpriseUkeyMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseUkeyMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseUkeyMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseUkeyMinFields")
		case "id":
			out.Values[i] = ec._EnterpriseUkeyMinFields_id(ctx, field, obj)
		case "ukey_id":
			out.Values[i] = ec._EnterpriseUkeyMinFields_ukey_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseUkeyMinFields_enterprise_id(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EnterpriseUkeyMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EnterpriseUkeyMinFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EnterpriseUkeyMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EnterpriseUkeyMinFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EnterpriseUkeyMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EnterpriseUkeyMinFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EnterpriseUkeyMinFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseUkeyMutationResponseImplementors = []string{"EnterpriseUkeyMutationResponse"}

func (ec *executionContext) _EnterpriseUkeyMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseUkeyMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseUkeyMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseUkeyMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._EnterpriseUkeyMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._EnterpriseUkeyMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseUkeyStddevFieldsImplementors = []string{"EnterpriseUkeyStddevFields"}

func (ec *executionContext) _EnterpriseUkeyStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseUkeyStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseUkeyStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseUkeyStddevFields")
		case "id":
			out.Values[i] = ec._EnterpriseUkeyStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseUkeyStddevPopFieldsImplementors = []string{"EnterpriseUkeyStddevPopFields"}

func (ec *executionContext) _EnterpriseUkeyStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseUkeyStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseUkeyStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseUkeyStddevPopFields")
		case "id":
			out.Values[i] = ec._EnterpriseUkeyStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseUkeyStddevSampFieldsImplementors = []string{"EnterpriseUkeyStddevSampFields"}

func (ec *executionContext) _EnterpriseUkeyStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseUkeyStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseUkeyStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseUkeyStddevSampFields")
		case "id":
			out.Values[i] = ec._EnterpriseUkeyStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseUkeySumFieldsImplementors = []string{"EnterpriseUkeySumFields"}

func (ec *executionContext) _EnterpriseUkeySumFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseUkeySumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseUkeySumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseUkeySumFields")
		case "id":
			out.Values[i] = ec._EnterpriseUkeySumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseUkeyVarPopFieldsImplementors = []string{"EnterpriseUkeyVarPopFields"}

func (ec *executionContext) _EnterpriseUkeyVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseUkeyVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseUkeyVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseUkeyVarPopFields")
		case "id":
			out.Values[i] = ec._EnterpriseUkeyVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseUkeyVarSampFieldsImplementors = []string{"EnterpriseUkeyVarSampFields"}

func (ec *executionContext) _EnterpriseUkeyVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseUkeyVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseUkeyVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseUkeyVarSampFields")
		case "id":
			out.Values[i] = ec._EnterpriseUkeyVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseUkeyVarianceFieldsImplementors = []string{"EnterpriseUkeyVarianceFields"}

func (ec *executionContext) _EnterpriseUkeyVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseUkeyVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseUkeyVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseUkeyVarianceFields")
		case "id":
			out.Values[i] = ec._EnterpriseUkeyVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseVarPopFieldsImplementors = []string{"EnterpriseVarPopFields"}

func (ec *executionContext) _EnterpriseVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseVarPopFields")
		case "id":
			out.Values[i] = ec._EnterpriseVarPopFields_id(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._EnterpriseVarPopFields_enterprise_level(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._EnterpriseVarPopFields_display_number(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._EnterpriseVarPopFields_business_scope(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._EnterpriseVarPopFields_province_id(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._EnterpriseVarPopFields_city_id(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._EnterpriseVarPopFields_district_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._EnterpriseVarPopFields_institution_category(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._EnterpriseVarPopFields_enterprise_nature(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EnterpriseVarPopFields_check_status(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseVarPopFields_score(ctx, field, obj)
		case "enterprise_type":
			out.Values[i] = ec._EnterpriseVarPopFields_enterprise_type(ctx, field, obj)
		case "state":
			out.Values[i] = ec._EnterpriseVarPopFields_state(ctx, field, obj)
		case "credit_level":
			out.Values[i] = ec._EnterpriseVarPopFields_credit_level(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseVarSampFieldsImplementors = []string{"EnterpriseVarSampFields"}

func (ec *executionContext) _EnterpriseVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseVarSampFields")
		case "id":
			out.Values[i] = ec._EnterpriseVarSampFields_id(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._EnterpriseVarSampFields_enterprise_level(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._EnterpriseVarSampFields_display_number(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._EnterpriseVarSampFields_business_scope(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._EnterpriseVarSampFields_province_id(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._EnterpriseVarSampFields_city_id(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._EnterpriseVarSampFields_district_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._EnterpriseVarSampFields_institution_category(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._EnterpriseVarSampFields_enterprise_nature(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EnterpriseVarSampFields_check_status(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseVarSampFields_score(ctx, field, obj)
		case "enterprise_type":
			out.Values[i] = ec._EnterpriseVarSampFields_enterprise_type(ctx, field, obj)
		case "state":
			out.Values[i] = ec._EnterpriseVarSampFields_state(ctx, field, obj)
		case "credit_level":
			out.Values[i] = ec._EnterpriseVarSampFields_credit_level(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseVarianceFieldsImplementors = []string{"EnterpriseVarianceFields"}

func (ec *executionContext) _EnterpriseVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseVarianceFields")
		case "id":
			out.Values[i] = ec._EnterpriseVarianceFields_id(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._EnterpriseVarianceFields_enterprise_level(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._EnterpriseVarianceFields_display_number(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._EnterpriseVarianceFields_business_scope(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._EnterpriseVarianceFields_province_id(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._EnterpriseVarianceFields_city_id(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._EnterpriseVarianceFields_district_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._EnterpriseVarianceFields_institution_category(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._EnterpriseVarianceFields_enterprise_nature(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EnterpriseVarianceFields_check_status(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseVarianceFields_score(ctx, field, obj)
		case "enterprise_type":
			out.Values[i] = ec._EnterpriseVarianceFields_enterprise_type(ctx, field, obj)
		case "state":
			out.Values[i] = ec._EnterpriseVarianceFields_state(ctx, field, obj)
		case "credit_level":
			out.Values[i] = ec._EnterpriseVarianceFields_credit_level(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "delete_department":
			out.Values[i] = ec._Mutation_delete_department(ctx, field)
		case "delete_department_by_pk":
			out.Values[i] = ec._Mutation_delete_department_by_pk(ctx, field)
		case "insert_department":
			out.Values[i] = ec._Mutation_insert_department(ctx, field)
		case "insert_department_one":
			out.Values[i] = ec._Mutation_insert_department_one(ctx, field)
		case "update_department":
			out.Values[i] = ec._Mutation_update_department(ctx, field)
		case "update_department_by_pk":
			out.Values[i] = ec._Mutation_update_department_by_pk(ctx, field)
		case "update_department_by_union_pk":
			out.Values[i] = ec._Mutation_update_department_by_union_pk(ctx, field)
		case "delete_department_by_union_pk":
			out.Values[i] = ec._Mutation_delete_department_by_union_pk(ctx, field)
		case "delete_enterprise":
			out.Values[i] = ec._Mutation_delete_enterprise(ctx, field)
		case "delete_enterprise_by_pk":
			out.Values[i] = ec._Mutation_delete_enterprise_by_pk(ctx, field)
		case "insert_enterprise":
			out.Values[i] = ec._Mutation_insert_enterprise(ctx, field)
		case "insert_enterprise_one":
			out.Values[i] = ec._Mutation_insert_enterprise_one(ctx, field)
		case "update_enterprise":
			out.Values[i] = ec._Mutation_update_enterprise(ctx, field)
		case "update_enterprise_by_pk":
			out.Values[i] = ec._Mutation_update_enterprise_by_pk(ctx, field)
		case "update_enterprise_by_union_pk":
			out.Values[i] = ec._Mutation_update_enterprise_by_union_pk(ctx, field)
		case "delete_enterprise_by_union_pk":
			out.Values[i] = ec._Mutation_delete_enterprise_by_union_pk(ctx, field)
		case "delete_enterprise_alarm_send_police":
			out.Values[i] = ec._Mutation_delete_enterprise_alarm_send_police(ctx, field)
		case "delete_enterprise_alarm_send_police_by_pk":
			out.Values[i] = ec._Mutation_delete_enterprise_alarm_send_police_by_pk(ctx, field)
		case "insert_enterprise_alarm_send_police":
			out.Values[i] = ec._Mutation_insert_enterprise_alarm_send_police(ctx, field)
		case "insert_enterprise_alarm_send_police_one":
			out.Values[i] = ec._Mutation_insert_enterprise_alarm_send_police_one(ctx, field)
		case "update_enterprise_alarm_send_police":
			out.Values[i] = ec._Mutation_update_enterprise_alarm_send_police(ctx, field)
		case "update_enterprise_alarm_send_police_by_pk":
			out.Values[i] = ec._Mutation_update_enterprise_alarm_send_police_by_pk(ctx, field)
		case "update_enterprise_alarm_send_police_by_union_pk":
			out.Values[i] = ec._Mutation_update_enterprise_alarm_send_police_by_union_pk(ctx, field)
		case "delete_enterprise_alarm_send_police_by_union_pk":
			out.Values[i] = ec._Mutation_delete_enterprise_alarm_send_police_by_union_pk(ctx, field)
		case "delete_enterprise_contact":
			out.Values[i] = ec._Mutation_delete_enterprise_contact(ctx, field)
		case "delete_enterprise_contact_by_pk":
			out.Values[i] = ec._Mutation_delete_enterprise_contact_by_pk(ctx, field)
		case "insert_enterprise_contact":
			out.Values[i] = ec._Mutation_insert_enterprise_contact(ctx, field)
		case "insert_enterprise_contact_one":
			out.Values[i] = ec._Mutation_insert_enterprise_contact_one(ctx, field)
		case "update_enterprise_contact":
			out.Values[i] = ec._Mutation_update_enterprise_contact(ctx, field)
		case "update_enterprise_contact_by_pk":
			out.Values[i] = ec._Mutation_update_enterprise_contact_by_pk(ctx, field)
		case "update_enterprise_contact_by_union_pk":
			out.Values[i] = ec._Mutation_update_enterprise_contact_by_union_pk(ctx, field)
		case "delete_enterprise_contact_by_union_pk":
			out.Values[i] = ec._Mutation_delete_enterprise_contact_by_union_pk(ctx, field)
		case "delete_enterprise_muck_trunk":
			out.Values[i] = ec._Mutation_delete_enterprise_muck_trunk(ctx, field)
		case "delete_enterprise_muck_trunk_by_pk":
			out.Values[i] = ec._Mutation_delete_enterprise_muck_trunk_by_pk(ctx, field)
		case "insert_enterprise_muck_trunk":
			out.Values[i] = ec._Mutation_insert_enterprise_muck_trunk(ctx, field)
		case "insert_enterprise_muck_trunk_one":
			out.Values[i] = ec._Mutation_insert_enterprise_muck_trunk_one(ctx, field)
		case "update_enterprise_muck_trunk":
			out.Values[i] = ec._Mutation_update_enterprise_muck_trunk(ctx, field)
		case "update_enterprise_muck_trunk_by_pk":
			out.Values[i] = ec._Mutation_update_enterprise_muck_trunk_by_pk(ctx, field)
		case "update_enterprise_muck_trunk_by_union_pk":
			out.Values[i] = ec._Mutation_update_enterprise_muck_trunk_by_union_pk(ctx, field)
		case "delete_enterprise_muck_trunk_by_union_pk":
			out.Values[i] = ec._Mutation_delete_enterprise_muck_trunk_by_union_pk(ctx, field)
		case "delete_enterprise_score_log":
			out.Values[i] = ec._Mutation_delete_enterprise_score_log(ctx, field)
		case "delete_enterprise_score_log_by_pk":
			out.Values[i] = ec._Mutation_delete_enterprise_score_log_by_pk(ctx, field)
		case "insert_enterprise_score_log":
			out.Values[i] = ec._Mutation_insert_enterprise_score_log(ctx, field)
		case "insert_enterprise_score_log_one":
			out.Values[i] = ec._Mutation_insert_enterprise_score_log_one(ctx, field)
		case "update_enterprise_score_log":
			out.Values[i] = ec._Mutation_update_enterprise_score_log(ctx, field)
		case "update_enterprise_score_log_by_pk":
			out.Values[i] = ec._Mutation_update_enterprise_score_log_by_pk(ctx, field)
		case "update_enterprise_score_log_by_union_pk":
			out.Values[i] = ec._Mutation_update_enterprise_score_log_by_union_pk(ctx, field)
		case "delete_enterprise_score_log_by_union_pk":
			out.Values[i] = ec._Mutation_delete_enterprise_score_log_by_union_pk(ctx, field)
		case "delete_enterprise_score_set":
			out.Values[i] = ec._Mutation_delete_enterprise_score_set(ctx, field)
		case "delete_enterprise_score_set_by_pk":
			out.Values[i] = ec._Mutation_delete_enterprise_score_set_by_pk(ctx, field)
		case "insert_enterprise_score_set":
			out.Values[i] = ec._Mutation_insert_enterprise_score_set(ctx, field)
		case "insert_enterprise_score_set_one":
			out.Values[i] = ec._Mutation_insert_enterprise_score_set_one(ctx, field)
		case "update_enterprise_score_set":
			out.Values[i] = ec._Mutation_update_enterprise_score_set(ctx, field)
		case "update_enterprise_score_set_by_pk":
			out.Values[i] = ec._Mutation_update_enterprise_score_set_by_pk(ctx, field)
		case "update_enterprise_score_set_by_union_pk":
			out.Values[i] = ec._Mutation_update_enterprise_score_set_by_union_pk(ctx, field)
		case "delete_enterprise_score_set_by_union_pk":
			out.Values[i] = ec._Mutation_delete_enterprise_score_set_by_union_pk(ctx, field)
		case "delete_enterprise_state_his":
			out.Values[i] = ec._Mutation_delete_enterprise_state_his(ctx, field)
		case "delete_enterprise_state_his_by_pk":
			out.Values[i] = ec._Mutation_delete_enterprise_state_his_by_pk(ctx, field)
		case "insert_enterprise_state_his":
			out.Values[i] = ec._Mutation_insert_enterprise_state_his(ctx, field)
		case "insert_enterprise_state_his_one":
			out.Values[i] = ec._Mutation_insert_enterprise_state_his_one(ctx, field)
		case "update_enterprise_state_his":
			out.Values[i] = ec._Mutation_update_enterprise_state_his(ctx, field)
		case "update_enterprise_state_his_by_pk":
			out.Values[i] = ec._Mutation_update_enterprise_state_his_by_pk(ctx, field)
		case "update_enterprise_state_his_by_union_pk":
			out.Values[i] = ec._Mutation_update_enterprise_state_his_by_union_pk(ctx, field)
		case "delete_enterprise_state_his_by_union_pk":
			out.Values[i] = ec._Mutation_delete_enterprise_state_his_by_union_pk(ctx, field)
		case "delete_enterprise_ukey":
			out.Values[i] = ec._Mutation_delete_enterprise_ukey(ctx, field)
		case "delete_enterprise_ukey_by_pk":
			out.Values[i] = ec._Mutation_delete_enterprise_ukey_by_pk(ctx, field)
		case "insert_enterprise_ukey":
			out.Values[i] = ec._Mutation_insert_enterprise_ukey(ctx, field)
		case "insert_enterprise_ukey_one":
			out.Values[i] = ec._Mutation_insert_enterprise_ukey_one(ctx, field)
		case "update_enterprise_ukey":
			out.Values[i] = ec._Mutation_update_enterprise_ukey(ctx, field)
		case "update_enterprise_ukey_by_pk":
			out.Values[i] = ec._Mutation_update_enterprise_ukey_by_pk(ctx, field)
		case "update_enterprise_ukey_by_union_pk":
			out.Values[i] = ec._Mutation_update_enterprise_ukey_by_union_pk(ctx, field)
		case "delete_enterprise_ukey_by_union_pk":
			out.Values[i] = ec._Mutation_delete_enterprise_ukey_by_union_pk(ctx, field)
		case "delete_system_user":
			out.Values[i] = ec._Mutation_delete_system_user(ctx, field)
		case "delete_system_user_by_pk":
			out.Values[i] = ec._Mutation_delete_system_user_by_pk(ctx, field)
		case "insert_system_user":
			out.Values[i] = ec._Mutation_insert_system_user(ctx, field)
		case "insert_system_user_one":
			out.Values[i] = ec._Mutation_insert_system_user_one(ctx, field)
		case "update_system_user":
			out.Values[i] = ec._Mutation_update_system_user(ctx, field)
		case "update_system_user_by_pk":
			out.Values[i] = ec._Mutation_update_system_user_by_pk(ctx, field)
		case "update_system_user_by_union_pk":
			out.Values[i] = ec._Mutation_update_system_user_by_union_pk(ctx, field)
		case "delete_system_user_by_union_pk":
			out.Values[i] = ec._Mutation_delete_system_user_by_union_pk(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "department":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_department(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "department_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_department_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "department_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_department_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "department_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_department_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_alarm_send_police":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_alarm_send_police(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_alarm_send_police_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_alarm_send_police_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_alarm_send_police_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_alarm_send_police_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_alarm_send_police_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_alarm_send_police_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_contact":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_contact(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_contact_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_contact_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_contact_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_contact_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_contact_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_contact_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_muck_trunk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_muck_trunk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_muck_trunk_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_muck_trunk_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_muck_trunk_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_muck_trunk_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_muck_trunk_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_muck_trunk_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_score_log":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_score_log(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_score_log_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_score_log_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_score_log_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_score_log_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_score_log_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_score_log_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_score_set":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_score_set(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_score_set_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_score_set_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_score_set_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_score_set_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_score_set_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_score_set_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_state_his":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_state_his(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_state_his_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_state_his_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_state_his_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_state_his_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_state_his_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_state_his_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_ukey":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_ukey(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_ukey_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_ukey_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_ukey_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_ukey_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_ukey_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_ukey_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "system_user":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_system_user(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "system_user_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_system_user_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "system_user_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_system_user_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "system_user_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_system_user_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserImplementors = []string{"SystemUser"}

func (ec *executionContext) _SystemUser(ctx context.Context, sel ast.SelectionSet, obj *model1.SystemUser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUser")
		case "id":
			out.Values[i] = ec._SystemUser_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_id":
			out.Values[i] = ec._SystemUser_user_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "password":
			out.Values[i] = ec._SystemUser_password(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "uername":
			out.Values[i] = ec._SystemUser_uername(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise_id":
			out.Values[i] = ec._SystemUser_enterprise_id(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._SystemUser_department_id(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._SystemUser_grade(ctx, field, obj)
		case "audit_level":
			out.Values[i] = ec._SystemUser_audit_level(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._SystemUser_user_type(ctx, field, obj)
		case "is_valid":
			out.Values[i] = ec._SystemUser_is_valid(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._SystemUser_user_state(ctx, field, obj)
		case "ip_address":
			out.Values[i] = ec._SystemUser_ip_address(ctx, field, obj)
		case "is_bind_ip":
			out.Values[i] = ec._SystemUser_is_bind_ip(ctx, field, obj)
		case "email":
			out.Values[i] = ec._SystemUser_email(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._SystemUser_telephone(ctx, field, obj)
		case "mobile":
			out.Values[i] = ec._SystemUser_mobile(ctx, field, obj)
		case "ukey":
			out.Values[i] = ec._SystemUser_ukey(ctx, field, obj)
		case "mkey":
			out.Values[i] = ec._SystemUser_mkey(ctx, field, obj)
		case "app_version":
			out.Values[i] = ec._SystemUser_app_version(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._SystemUser_created_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._SystemUser_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._SystemUser_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._SystemUser_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._SystemUser_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._SystemUser_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._SystemUser_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remarks":
			out.Values[i] = ec._SystemUser_remarks(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserAggregateImplementors = []string{"SystemUserAggregate"}

func (ec *executionContext) _SystemUserAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUserAggregate")
		case "aggregate":
			out.Values[i] = ec._SystemUserAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserAggregateFieldsImplementors = []string{"SystemUserAggregateFields"}

func (ec *executionContext) _SystemUserAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUserAggregateFields")
		case "avg":
			out.Values[i] = ec._SystemUserAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._SystemUserAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._SystemUserAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._SystemUserAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._SystemUserAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._SystemUserAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._SystemUserAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._SystemUserAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._SystemUserAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._SystemUserAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._SystemUserAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserAvgFieldsImplementors = []string{"SystemUserAvgFields"}

func (ec *executionContext) _SystemUserAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUserAvgFields")
		case "id":
			out.Values[i] = ec._SystemUserAvgFields_id(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._SystemUserAvgFields_grade(ctx, field, obj)
		case "audit_level":
			out.Values[i] = ec._SystemUserAvgFields_audit_level(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._SystemUserAvgFields_user_type(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._SystemUserAvgFields_user_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserMaxFieldsImplementors = []string{"SystemUserMaxFields"}

func (ec *executionContext) _SystemUserMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUserMaxFields")
		case "id":
			out.Values[i] = ec._SystemUserMaxFields_id(ctx, field, obj)
		case "user_id":
			out.Values[i] = ec._SystemUserMaxFields_user_id(ctx, field, obj)
		case "password":
			out.Values[i] = ec._SystemUserMaxFields_password(ctx, field, obj)
		case "uername":
			out.Values[i] = ec._SystemUserMaxFields_uername(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._SystemUserMaxFields_enterprise_id(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._SystemUserMaxFields_department_id(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._SystemUserMaxFields_grade(ctx, field, obj)
		case "audit_level":
			out.Values[i] = ec._SystemUserMaxFields_audit_level(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._SystemUserMaxFields_user_type(ctx, field, obj)
		case "is_valid":
			out.Values[i] = ec._SystemUserMaxFields_is_valid(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._SystemUserMaxFields_user_state(ctx, field, obj)
		case "ip_address":
			out.Values[i] = ec._SystemUserMaxFields_ip_address(ctx, field, obj)
		case "is_bind_ip":
			out.Values[i] = ec._SystemUserMaxFields_is_bind_ip(ctx, field, obj)
		case "email":
			out.Values[i] = ec._SystemUserMaxFields_email(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._SystemUserMaxFields_telephone(ctx, field, obj)
		case "mobile":
			out.Values[i] = ec._SystemUserMaxFields_mobile(ctx, field, obj)
		case "ukey":
			out.Values[i] = ec._SystemUserMaxFields_ukey(ctx, field, obj)
		case "mkey":
			out.Values[i] = ec._SystemUserMaxFields_mkey(ctx, field, obj)
		case "app_version":
			out.Values[i] = ec._SystemUserMaxFields_app_version(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._SystemUserMaxFields_created_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._SystemUserMaxFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._SystemUserMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._SystemUserMaxFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._SystemUserMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._SystemUserMaxFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._SystemUserMaxFields_is_delete(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._SystemUserMaxFields_remarks(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserMinFieldsImplementors = []string{"SystemUserMinFields"}

func (ec *executionContext) _SystemUserMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUserMinFields")
		case "id":
			out.Values[i] = ec._SystemUserMinFields_id(ctx, field, obj)
		case "user_id":
			out.Values[i] = ec._SystemUserMinFields_user_id(ctx, field, obj)
		case "password":
			out.Values[i] = ec._SystemUserMinFields_password(ctx, field, obj)
		case "uername":
			out.Values[i] = ec._SystemUserMinFields_uername(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._SystemUserMinFields_enterprise_id(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._SystemUserMinFields_department_id(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._SystemUserMinFields_grade(ctx, field, obj)
		case "audit_level":
			out.Values[i] = ec._SystemUserMinFields_audit_level(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._SystemUserMinFields_user_type(ctx, field, obj)
		case "is_valid":
			out.Values[i] = ec._SystemUserMinFields_is_valid(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._SystemUserMinFields_user_state(ctx, field, obj)
		case "ip_address":
			out.Values[i] = ec._SystemUserMinFields_ip_address(ctx, field, obj)
		case "is_bind_ip":
			out.Values[i] = ec._SystemUserMinFields_is_bind_ip(ctx, field, obj)
		case "email":
			out.Values[i] = ec._SystemUserMinFields_email(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._SystemUserMinFields_telephone(ctx, field, obj)
		case "mobile":
			out.Values[i] = ec._SystemUserMinFields_mobile(ctx, field, obj)
		case "ukey":
			out.Values[i] = ec._SystemUserMinFields_ukey(ctx, field, obj)
		case "mkey":
			out.Values[i] = ec._SystemUserMinFields_mkey(ctx, field, obj)
		case "app_version":
			out.Values[i] = ec._SystemUserMinFields_app_version(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._SystemUserMinFields_created_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._SystemUserMinFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._SystemUserMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._SystemUserMinFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._SystemUserMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._SystemUserMinFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._SystemUserMinFields_is_delete(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._SystemUserMinFields_remarks(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserMutationResponseImplementors = []string{"SystemUserMutationResponse"}

func (ec *executionContext) _SystemUserMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUserMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._SystemUserMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._SystemUserMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserStddevFieldsImplementors = []string{"SystemUserStddevFields"}

func (ec *executionContext) _SystemUserStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUserStddevFields")
		case "id":
			out.Values[i] = ec._SystemUserStddevFields_id(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._SystemUserStddevFields_grade(ctx, field, obj)
		case "audit_level":
			out.Values[i] = ec._SystemUserStddevFields_audit_level(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._SystemUserStddevFields_user_type(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._SystemUserStddevFields_user_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserStddevPopFieldsImplementors = []string{"SystemUserStddevPopFields"}

func (ec *executionContext) _SystemUserStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUserStddevPopFields")
		case "id":
			out.Values[i] = ec._SystemUserStddevPopFields_id(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._SystemUserStddevPopFields_grade(ctx, field, obj)
		case "audit_level":
			out.Values[i] = ec._SystemUserStddevPopFields_audit_level(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._SystemUserStddevPopFields_user_type(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._SystemUserStddevPopFields_user_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserStddevSampFieldsImplementors = []string{"SystemUserStddevSampFields"}

func (ec *executionContext) _SystemUserStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUserStddevSampFields")
		case "id":
			out.Values[i] = ec._SystemUserStddevSampFields_id(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._SystemUserStddevSampFields_grade(ctx, field, obj)
		case "audit_level":
			out.Values[i] = ec._SystemUserStddevSampFields_audit_level(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._SystemUserStddevSampFields_user_type(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._SystemUserStddevSampFields_user_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserSumFieldsImplementors = []string{"SystemUserSumFields"}

func (ec *executionContext) _SystemUserSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUserSumFields")
		case "id":
			out.Values[i] = ec._SystemUserSumFields_id(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._SystemUserSumFields_grade(ctx, field, obj)
		case "audit_level":
			out.Values[i] = ec._SystemUserSumFields_audit_level(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._SystemUserSumFields_user_type(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._SystemUserSumFields_user_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserVarPopFieldsImplementors = []string{"SystemUserVarPopFields"}

func (ec *executionContext) _SystemUserVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUserVarPopFields")
		case "id":
			out.Values[i] = ec._SystemUserVarPopFields_id(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._SystemUserVarPopFields_grade(ctx, field, obj)
		case "audit_level":
			out.Values[i] = ec._SystemUserVarPopFields_audit_level(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._SystemUserVarPopFields_user_type(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._SystemUserVarPopFields_user_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserVarSampFieldsImplementors = []string{"SystemUserVarSampFields"}

func (ec *executionContext) _SystemUserVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUserVarSampFields")
		case "id":
			out.Values[i] = ec._SystemUserVarSampFields_id(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._SystemUserVarSampFields_grade(ctx, field, obj)
		case "audit_level":
			out.Values[i] = ec._SystemUserVarSampFields_audit_level(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._SystemUserVarSampFields_user_type(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._SystemUserVarSampFields_user_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserVarianceFieldsImplementors = []string{"SystemUserVarianceFields"}

func (ec *executionContext) _SystemUserVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUserVarianceFields")
		case "id":
			out.Values[i] = ec._SystemUserVarianceFields_id(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._SystemUserVarianceFields_grade(ctx, field, obj)
		case "audit_level":
			out.Values[i] = ec._SystemUserVarianceFields_audit_level(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._SystemUserVarianceFields_user_type(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._SystemUserVarianceFields_user_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNDepartment2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartment(ctx context.Context, sel ast.SelectionSet, v model1.Department) graphql.Marshaler {
	return ec._Department(ctx, sel, &v)
}

func (ec *executionContext) marshalNDepartment2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.Department) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDepartment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDepartment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartment(ctx context.Context, sel ast.SelectionSet, v *model1.Department) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Department(ctx, sel, v)
}

func (ec *executionContext) marshalNDepartmentAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentAggregate(ctx context.Context, sel ast.SelectionSet, v model.DepartmentAggregate) graphql.Marshaler {
	return ec._DepartmentAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNDepartmentAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DepartmentAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDepartmentBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx context.Context, v interface{}) (model.DepartmentBoolExp, error) {
	res, err := ec.unmarshalInputDepartmentBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDepartmentInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentInsertInput(ctx context.Context, v interface{}) (model.DepartmentInsertInput, error) {
	res, err := ec.unmarshalInputDepartmentInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDepartmentInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DepartmentInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DepartmentInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDepartmentInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNDepartmentInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentInsertInput(ctx context.Context, v interface{}) (*model.DepartmentInsertInput, error) {
	res, err := ec.unmarshalInputDepartmentInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDepartmentOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentOrderBy(ctx context.Context, v interface{}) (*model.DepartmentOrderBy, error) {
	res, err := ec.unmarshalInputDepartmentOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDepartmentSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSelectColumn(ctx context.Context, v interface{}) (model.DepartmentSelectColumn, error) {
	var res model.DepartmentSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDepartmentSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DepartmentSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNEnterprise2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterprise(ctx context.Context, sel ast.SelectionSet, v model1.Enterprise) graphql.Marshaler {
	return ec._Enterprise(ctx, sel, &v)
}

func (ec *executionContext) marshalNEnterprise2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.Enterprise) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnterprise2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterprise(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNEnterprise2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterprise(ctx context.Context, sel ast.SelectionSet, v *model1.Enterprise) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Enterprise(ctx, sel, v)
}

func (ec *executionContext) marshalNEnterpriseAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAggregate(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseAggregate) graphql.Marshaler {
	return ec._EnterpriseAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNEnterpriseAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAggregate(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EnterpriseAggregate(ctx, sel, v)
}

func (ec *executionContext) marshalNEnterpriseAlarmSendPolice2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseAlarmSendPolice(ctx context.Context, sel ast.SelectionSet, v model1.EnterpriseAlarmSendPolice) graphql.Marshaler {
	return ec._EnterpriseAlarmSendPolice(ctx, sel, &v)
}

func (ec *executionContext) marshalNEnterpriseAlarmSendPolice2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseAlarmSendPoliceᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.EnterpriseAlarmSendPolice) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnterpriseAlarmSendPolice2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseAlarmSendPolice(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNEnterpriseAlarmSendPolice2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseAlarmSendPolice(ctx context.Context, sel ast.SelectionSet, v *model1.EnterpriseAlarmSendPolice) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPolice(ctx, sel, v)
}

func (ec *executionContext) marshalNEnterpriseAlarmSendPoliceAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceAggregate(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseAlarmSendPoliceAggregate) graphql.Marshaler {
	return ec._EnterpriseAlarmSendPoliceAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNEnterpriseAlarmSendPoliceAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceAggregate(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAlarmSendPoliceAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPoliceAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEnterpriseAlarmSendPoliceBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceBoolExp(ctx context.Context, v interface{}) (model.EnterpriseAlarmSendPoliceBoolExp, error) {
	res, err := ec.unmarshalInputEnterpriseAlarmSendPoliceBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseAlarmSendPoliceInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceInsertInput(ctx context.Context, v interface{}) (model.EnterpriseAlarmSendPoliceInsertInput, error) {
	res, err := ec.unmarshalInputEnterpriseAlarmSendPoliceInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseAlarmSendPoliceInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseAlarmSendPoliceInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseAlarmSendPoliceInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseAlarmSendPoliceInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNEnterpriseAlarmSendPoliceInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceInsertInput(ctx context.Context, v interface{}) (*model.EnterpriseAlarmSendPoliceInsertInput, error) {
	res, err := ec.unmarshalInputEnterpriseAlarmSendPoliceInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseAlarmSendPoliceOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseAlarmSendPoliceOrderBy, error) {
	res, err := ec.unmarshalInputEnterpriseAlarmSendPoliceOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseAlarmSendPoliceSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceSelectColumn(ctx context.Context, v interface{}) (model.EnterpriseAlarmSendPoliceSelectColumn, error) {
	var res model.EnterpriseAlarmSendPoliceSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEnterpriseAlarmSendPoliceSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseAlarmSendPoliceSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNEnterpriseBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx context.Context, v interface{}) (model.EnterpriseBoolExp, error) {
	res, err := ec.unmarshalInputEnterpriseBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEnterpriseContact2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseContact(ctx context.Context, sel ast.SelectionSet, v model1.EnterpriseContact) graphql.Marshaler {
	return ec._EnterpriseContact(ctx, sel, &v)
}

func (ec *executionContext) marshalNEnterpriseContact2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseContactᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.EnterpriseContact) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnterpriseContact2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseContact(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNEnterpriseContact2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseContact(ctx context.Context, sel ast.SelectionSet, v *model1.EnterpriseContact) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EnterpriseContact(ctx, sel, v)
}

func (ec *executionContext) marshalNEnterpriseContactAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactAggregate(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseContactAggregate) graphql.Marshaler {
	return ec._EnterpriseContactAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNEnterpriseContactAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactAggregate(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseContactAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EnterpriseContactAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEnterpriseContactBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactBoolExp(ctx context.Context, v interface{}) (model.EnterpriseContactBoolExp, error) {
	res, err := ec.unmarshalInputEnterpriseContactBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseContactInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactInsertInput(ctx context.Context, v interface{}) (model.EnterpriseContactInsertInput, error) {
	res, err := ec.unmarshalInputEnterpriseContactInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseContactInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseContactInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseContactInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseContactInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNEnterpriseContactInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactInsertInput(ctx context.Context, v interface{}) (*model.EnterpriseContactInsertInput, error) {
	res, err := ec.unmarshalInputEnterpriseContactInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseContactOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseContactOrderBy, error) {
	res, err := ec.unmarshalInputEnterpriseContactOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseContactSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactSelectColumn(ctx context.Context, v interface{}) (model.EnterpriseContactSelectColumn, error) {
	var res model.EnterpriseContactSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEnterpriseContactSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseContactSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNEnterpriseInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseInsertInput(ctx context.Context, v interface{}) (model.EnterpriseInsertInput, error) {
	res, err := ec.unmarshalInputEnterpriseInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNEnterpriseInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseInsertInput(ctx context.Context, v interface{}) (*model.EnterpriseInsertInput, error) {
	res, err := ec.unmarshalInputEnterpriseInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEnterpriseMuckTrunk2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseMuckTrunk(ctx context.Context, sel ast.SelectionSet, v model1.EnterpriseMuckTrunk) graphql.Marshaler {
	return ec._EnterpriseMuckTrunk(ctx, sel, &v)
}

func (ec *executionContext) marshalNEnterpriseMuckTrunk2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseMuckTrunkᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.EnterpriseMuckTrunk) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnterpriseMuckTrunk2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseMuckTrunk(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNEnterpriseMuckTrunk2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseMuckTrunk(ctx context.Context, sel ast.SelectionSet, v *model1.EnterpriseMuckTrunk) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EnterpriseMuckTrunk(ctx, sel, v)
}

func (ec *executionContext) marshalNEnterpriseMuckTrunkAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkAggregate(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseMuckTrunkAggregate) graphql.Marshaler {
	return ec._EnterpriseMuckTrunkAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNEnterpriseMuckTrunkAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkAggregate(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseMuckTrunkAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EnterpriseMuckTrunkAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEnterpriseMuckTrunkBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkBoolExp(ctx context.Context, v interface{}) (model.EnterpriseMuckTrunkBoolExp, error) {
	res, err := ec.unmarshalInputEnterpriseMuckTrunkBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseMuckTrunkInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkInsertInput(ctx context.Context, v interface{}) (model.EnterpriseMuckTrunkInsertInput, error) {
	res, err := ec.unmarshalInputEnterpriseMuckTrunkInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseMuckTrunkInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseMuckTrunkInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseMuckTrunkInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseMuckTrunkInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNEnterpriseMuckTrunkInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkInsertInput(ctx context.Context, v interface{}) (*model.EnterpriseMuckTrunkInsertInput, error) {
	res, err := ec.unmarshalInputEnterpriseMuckTrunkInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseMuckTrunkOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseMuckTrunkOrderBy, error) {
	res, err := ec.unmarshalInputEnterpriseMuckTrunkOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseMuckTrunkSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkSelectColumn(ctx context.Context, v interface{}) (model.EnterpriseMuckTrunkSelectColumn, error) {
	var res model.EnterpriseMuckTrunkSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEnterpriseMuckTrunkSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseMuckTrunkSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNEnterpriseOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseOrderBy, error) {
	res, err := ec.unmarshalInputEnterpriseOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEnterpriseScoreLog2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseScoreLog(ctx context.Context, sel ast.SelectionSet, v model1.EnterpriseScoreLog) graphql.Marshaler {
	return ec._EnterpriseScoreLog(ctx, sel, &v)
}

func (ec *executionContext) marshalNEnterpriseScoreLog2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseScoreLogᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.EnterpriseScoreLog) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnterpriseScoreLog2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseScoreLog(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNEnterpriseScoreLog2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseScoreLog(ctx context.Context, sel ast.SelectionSet, v *model1.EnterpriseScoreLog) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EnterpriseScoreLog(ctx, sel, v)
}

func (ec *executionContext) marshalNEnterpriseScoreLogAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogAggregate(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseScoreLogAggregate) graphql.Marshaler {
	return ec._EnterpriseScoreLogAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNEnterpriseScoreLogAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogAggregate(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseScoreLogAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EnterpriseScoreLogAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEnterpriseScoreLogBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogBoolExp(ctx context.Context, v interface{}) (model.EnterpriseScoreLogBoolExp, error) {
	res, err := ec.unmarshalInputEnterpriseScoreLogBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseScoreLogInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogInsertInput(ctx context.Context, v interface{}) (model.EnterpriseScoreLogInsertInput, error) {
	res, err := ec.unmarshalInputEnterpriseScoreLogInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseScoreLogInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseScoreLogInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseScoreLogInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseScoreLogInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNEnterpriseScoreLogInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogInsertInput(ctx context.Context, v interface{}) (*model.EnterpriseScoreLogInsertInput, error) {
	res, err := ec.unmarshalInputEnterpriseScoreLogInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseScoreLogOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseScoreLogOrderBy, error) {
	res, err := ec.unmarshalInputEnterpriseScoreLogOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseScoreLogSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogSelectColumn(ctx context.Context, v interface{}) (model.EnterpriseScoreLogSelectColumn, error) {
	var res model.EnterpriseScoreLogSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEnterpriseScoreLogSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseScoreLogSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNEnterpriseScoreSet2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseScoreSet(ctx context.Context, sel ast.SelectionSet, v model1.EnterpriseScoreSet) graphql.Marshaler {
	return ec._EnterpriseScoreSet(ctx, sel, &v)
}

func (ec *executionContext) marshalNEnterpriseScoreSet2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseScoreSetᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.EnterpriseScoreSet) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnterpriseScoreSet2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseScoreSet(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNEnterpriseScoreSet2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseScoreSet(ctx context.Context, sel ast.SelectionSet, v *model1.EnterpriseScoreSet) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EnterpriseScoreSet(ctx, sel, v)
}

func (ec *executionContext) marshalNEnterpriseScoreSetAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetAggregate(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseScoreSetAggregate) graphql.Marshaler {
	return ec._EnterpriseScoreSetAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNEnterpriseScoreSetAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetAggregate(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseScoreSetAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EnterpriseScoreSetAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEnterpriseScoreSetBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetBoolExp(ctx context.Context, v interface{}) (model.EnterpriseScoreSetBoolExp, error) {
	res, err := ec.unmarshalInputEnterpriseScoreSetBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseScoreSetInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetInsertInput(ctx context.Context, v interface{}) (model.EnterpriseScoreSetInsertInput, error) {
	res, err := ec.unmarshalInputEnterpriseScoreSetInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseScoreSetInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseScoreSetInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseScoreSetInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseScoreSetInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNEnterpriseScoreSetInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetInsertInput(ctx context.Context, v interface{}) (*model.EnterpriseScoreSetInsertInput, error) {
	res, err := ec.unmarshalInputEnterpriseScoreSetInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseScoreSetOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseScoreSetOrderBy, error) {
	res, err := ec.unmarshalInputEnterpriseScoreSetOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseScoreSetSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetSelectColumn(ctx context.Context, v interface{}) (model.EnterpriseScoreSetSelectColumn, error) {
	var res model.EnterpriseScoreSetSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEnterpriseScoreSetSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseScoreSetSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNEnterpriseSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSelectColumn(ctx context.Context, v interface{}) (model.EnterpriseSelectColumn, error) {
	var res model.EnterpriseSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEnterpriseSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNEnterpriseStateHis2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseStateHis(ctx context.Context, sel ast.SelectionSet, v model1.EnterpriseStateHis) graphql.Marshaler {
	return ec._EnterpriseStateHis(ctx, sel, &v)
}

func (ec *executionContext) marshalNEnterpriseStateHis2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseStateHisᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.EnterpriseStateHis) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnterpriseStateHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseStateHis(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNEnterpriseStateHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseStateHis(ctx context.Context, sel ast.SelectionSet, v *model1.EnterpriseStateHis) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EnterpriseStateHis(ctx, sel, v)
}

func (ec *executionContext) marshalNEnterpriseStateHisAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisAggregate(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseStateHisAggregate) graphql.Marshaler {
	return ec._EnterpriseStateHisAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNEnterpriseStateHisAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisAggregate(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseStateHisAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EnterpriseStateHisAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEnterpriseStateHisBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisBoolExp(ctx context.Context, v interface{}) (model.EnterpriseStateHisBoolExp, error) {
	res, err := ec.unmarshalInputEnterpriseStateHisBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseStateHisInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisInsertInput(ctx context.Context, v interface{}) (model.EnterpriseStateHisInsertInput, error) {
	res, err := ec.unmarshalInputEnterpriseStateHisInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseStateHisInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseStateHisInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseStateHisInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseStateHisInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNEnterpriseStateHisInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisInsertInput(ctx context.Context, v interface{}) (*model.EnterpriseStateHisInsertInput, error) {
	res, err := ec.unmarshalInputEnterpriseStateHisInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseStateHisOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseStateHisOrderBy, error) {
	res, err := ec.unmarshalInputEnterpriseStateHisOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseStateHisSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisSelectColumn(ctx context.Context, v interface{}) (model.EnterpriseStateHisSelectColumn, error) {
	var res model.EnterpriseStateHisSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEnterpriseStateHisSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseStateHisSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNEnterpriseUkey2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseUkey(ctx context.Context, sel ast.SelectionSet, v model1.EnterpriseUkey) graphql.Marshaler {
	return ec._EnterpriseUkey(ctx, sel, &v)
}

func (ec *executionContext) marshalNEnterpriseUkey2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseUkeyᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.EnterpriseUkey) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnterpriseUkey2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseUkey(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNEnterpriseUkey2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseUkey(ctx context.Context, sel ast.SelectionSet, v *model1.EnterpriseUkey) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EnterpriseUkey(ctx, sel, v)
}

func (ec *executionContext) marshalNEnterpriseUkeyAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyAggregate(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseUkeyAggregate) graphql.Marshaler {
	return ec._EnterpriseUkeyAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNEnterpriseUkeyAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyAggregate(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseUkeyAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EnterpriseUkeyAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEnterpriseUkeyBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyBoolExp(ctx context.Context, v interface{}) (model.EnterpriseUkeyBoolExp, error) {
	res, err := ec.unmarshalInputEnterpriseUkeyBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseUkeyInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyInsertInput(ctx context.Context, v interface{}) (model.EnterpriseUkeyInsertInput, error) {
	res, err := ec.unmarshalInputEnterpriseUkeyInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseUkeyInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseUkeyInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseUkeyInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseUkeyInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNEnterpriseUkeyInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyInsertInput(ctx context.Context, v interface{}) (*model.EnterpriseUkeyInsertInput, error) {
	res, err := ec.unmarshalInputEnterpriseUkeyInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseUkeyOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseUkeyOrderBy, error) {
	res, err := ec.unmarshalInputEnterpriseUkeyOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseUkeySelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeySelectColumn(ctx context.Context, v interface{}) (model.EnterpriseUkeySelectColumn, error) {
	var res model.EnterpriseUkeySelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEnterpriseUkeySelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeySelectColumn(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseUkeySelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNJsonb2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJsonb2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNNumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNPoint2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPoint2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNSystemUser2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUser(ctx context.Context, sel ast.SelectionSet, v model1.SystemUser) graphql.Marshaler {
	return ec._SystemUser(ctx, sel, &v)
}

func (ec *executionContext) marshalNSystemUser2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.SystemUser) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSystemUser2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNSystemUser2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUser(ctx context.Context, sel ast.SelectionSet, v *model1.SystemUser) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SystemUser(ctx, sel, v)
}

func (ec *executionContext) marshalNSystemUserAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserAggregate(ctx context.Context, sel ast.SelectionSet, v model.SystemUserAggregate) graphql.Marshaler {
	return ec._SystemUserAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNSystemUserAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserAggregate(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SystemUserAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSystemUserBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx context.Context, v interface{}) (model.SystemUserBoolExp, error) {
	res, err := ec.unmarshalInputSystemUserBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSystemUserInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserInsertInput(ctx context.Context, v interface{}) (model.SystemUserInsertInput, error) {
	res, err := ec.unmarshalInputSystemUserInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSystemUserInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.SystemUserInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SystemUserInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSystemUserInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNSystemUserInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserInsertInput(ctx context.Context, v interface{}) (*model.SystemUserInsertInput, error) {
	res, err := ec.unmarshalInputSystemUserInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSystemUserOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserOrderBy(ctx context.Context, v interface{}) (*model.SystemUserOrderBy, error) {
	res, err := ec.unmarshalInputSystemUserOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSystemUserSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSelectColumn(ctx context.Context, v interface{}) (model.SystemUserSelectColumn, error) {
	var res model.SystemUserSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemUserSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.SystemUserSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNTimestamptz2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamptz2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := scalar.MarshalTimestamptz(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model2.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBigintComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model2.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBooleanComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODepartment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartment(ctx context.Context, sel ast.SelectionSet, v *model1.Department) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Department(ctx, sel, v)
}

func (ec *executionContext) marshalODepartmentAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DepartmentAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalODepartmentAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DepartmentAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODepartmentBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx context.Context, v interface{}) ([]*model.DepartmentBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DepartmentBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODepartmentBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODepartmentBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx context.Context, v interface{}) (*model.DepartmentBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDepartmentBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODepartmentIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentIncInput(ctx context.Context, v interface{}) (*model.DepartmentIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDepartmentIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODepartmentMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DepartmentMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalODepartmentMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DepartmentMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalODepartmentMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DepartmentMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalODepartmentOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DepartmentOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DepartmentOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDepartmentOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODepartmentSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DepartmentSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DepartmentSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDepartmentSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODepartmentSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DepartmentSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDepartmentSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODepartmentSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSetInput(ctx context.Context, v interface{}) (*model.DepartmentSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDepartmentSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODepartmentStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DepartmentStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalODepartmentStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DepartmentStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODepartmentStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DepartmentStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODepartmentSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DepartmentSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalODepartmentVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DepartmentVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODepartmentVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DepartmentVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODepartmentVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DepartmentVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterprise2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterprise(ctx context.Context, sel ast.SelectionSet, v *model1.Enterprise) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Enterprise(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseAlarmSendPolice2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseAlarmSendPolice(ctx context.Context, sel ast.SelectionSet, v *model1.EnterpriseAlarmSendPolice) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPolice(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseAlarmSendPoliceAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAlarmSendPoliceAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPoliceAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseAlarmSendPoliceAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAlarmSendPoliceAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPoliceAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseAlarmSendPoliceBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceBoolExp(ctx context.Context, v interface{}) ([]*model.EnterpriseAlarmSendPoliceBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseAlarmSendPoliceBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEnterpriseAlarmSendPoliceBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEnterpriseAlarmSendPoliceBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceBoolExp(ctx context.Context, v interface{}) (*model.EnterpriseAlarmSendPoliceBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseAlarmSendPoliceBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEnterpriseAlarmSendPoliceIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceIncInput(ctx context.Context, v interface{}) (*model.EnterpriseAlarmSendPoliceIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseAlarmSendPoliceIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseAlarmSendPoliceMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAlarmSendPoliceMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPoliceMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseAlarmSendPoliceMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceMinFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAlarmSendPoliceMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPoliceMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseAlarmSendPoliceMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAlarmSendPoliceMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPoliceMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseAlarmSendPoliceOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceOrderByᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseAlarmSendPoliceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseAlarmSendPoliceOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseAlarmSendPoliceOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEnterpriseAlarmSendPoliceSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.EnterpriseAlarmSendPoliceSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EnterpriseAlarmSendPoliceSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseAlarmSendPoliceSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEnterpriseAlarmSendPoliceSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EnterpriseAlarmSendPoliceSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnterpriseAlarmSendPoliceSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOEnterpriseAlarmSendPoliceSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceSetInput(ctx context.Context, v interface{}) (*model.EnterpriseAlarmSendPoliceSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseAlarmSendPoliceSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseAlarmSendPoliceStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAlarmSendPoliceStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPoliceStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseAlarmSendPoliceStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAlarmSendPoliceStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPoliceStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseAlarmSendPoliceStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAlarmSendPoliceStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPoliceStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseAlarmSendPoliceSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceSumFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAlarmSendPoliceSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPoliceSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseAlarmSendPoliceVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAlarmSendPoliceVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPoliceVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseAlarmSendPoliceVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAlarmSendPoliceVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPoliceVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseAlarmSendPoliceVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAlarmSendPoliceVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAlarmSendPoliceVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAlarmSendPoliceVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx context.Context, v interface{}) ([]*model.EnterpriseBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEnterpriseBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEnterpriseBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx context.Context, v interface{}) (*model.EnterpriseBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseContact2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseContact(ctx context.Context, sel ast.SelectionSet, v *model1.EnterpriseContact) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseContact(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseContactAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseContactAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseContactAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseContactAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseContactAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseContactAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseContactBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactBoolExp(ctx context.Context, v interface{}) ([]*model.EnterpriseContactBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseContactBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEnterpriseContactBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEnterpriseContactBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactBoolExp(ctx context.Context, v interface{}) (*model.EnterpriseContactBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseContactBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEnterpriseContactIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactIncInput(ctx context.Context, v interface{}) (*model.EnterpriseContactIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseContactIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseContactMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseContactMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseContactMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseContactMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactMinFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseContactMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseContactMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseContactMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseContactMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseContactMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseContactOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactOrderByᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseContactOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseContactOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseContactOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEnterpriseContactSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.EnterpriseContactSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EnterpriseContactSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseContactSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEnterpriseContactSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EnterpriseContactSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnterpriseContactSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOEnterpriseContactSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactSetInput(ctx context.Context, v interface{}) (*model.EnterpriseContactSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseContactSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseContactStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseContactStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseContactStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseContactStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseContactStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseContactStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseContactStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseContactStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseContactStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseContactSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactSumFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseContactSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseContactSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseContactVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseContactVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseContactVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseContactVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseContactVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseContactVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseContactVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseContactVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseContactVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseContactVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseIncInput(ctx context.Context, v interface{}) (*model.EnterpriseIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMinFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseMuckTrunk2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseMuckTrunk(ctx context.Context, sel ast.SelectionSet, v *model1.EnterpriseMuckTrunk) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseMuckTrunk(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseMuckTrunkAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseMuckTrunkAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseMuckTrunkAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseMuckTrunkAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseMuckTrunkAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseMuckTrunkAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseMuckTrunkBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkBoolExp(ctx context.Context, v interface{}) ([]*model.EnterpriseMuckTrunkBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseMuckTrunkBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEnterpriseMuckTrunkBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEnterpriseMuckTrunkBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkBoolExp(ctx context.Context, v interface{}) (*model.EnterpriseMuckTrunkBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseMuckTrunkBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEnterpriseMuckTrunkIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkIncInput(ctx context.Context, v interface{}) (*model.EnterpriseMuckTrunkIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseMuckTrunkIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseMuckTrunkMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseMuckTrunkMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseMuckTrunkMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseMuckTrunkMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkMinFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseMuckTrunkMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseMuckTrunkMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseMuckTrunkMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseMuckTrunkMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseMuckTrunkMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseMuckTrunkOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkOrderByᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseMuckTrunkOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseMuckTrunkOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseMuckTrunkOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEnterpriseMuckTrunkSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.EnterpriseMuckTrunkSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EnterpriseMuckTrunkSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseMuckTrunkSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEnterpriseMuckTrunkSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EnterpriseMuckTrunkSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnterpriseMuckTrunkSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOEnterpriseMuckTrunkSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkSetInput(ctx context.Context, v interface{}) (*model.EnterpriseMuckTrunkSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseMuckTrunkSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseMuckTrunkStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseMuckTrunkStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseMuckTrunkStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseMuckTrunkStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseMuckTrunkStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseMuckTrunkStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseMuckTrunkStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseMuckTrunkStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseMuckTrunkStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseMuckTrunkSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkSumFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseMuckTrunkSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseMuckTrunkSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseMuckTrunkVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseMuckTrunkVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseMuckTrunkVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseMuckTrunkVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseMuckTrunkVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseMuckTrunkVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseMuckTrunkVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMuckTrunkVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseMuckTrunkVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseMuckTrunkVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseOrderByᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEnterpriseScoreLog2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseScoreLog(ctx context.Context, sel ast.SelectionSet, v *model1.EnterpriseScoreLog) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseScoreLog(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseScoreLogAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseScoreLogAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseScoreLogAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseScoreLogAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseScoreLogAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseScoreLogAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseScoreLogBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogBoolExp(ctx context.Context, v interface{}) ([]*model.EnterpriseScoreLogBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseScoreLogBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEnterpriseScoreLogBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEnterpriseScoreLogBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogBoolExp(ctx context.Context, v interface{}) (*model.EnterpriseScoreLogBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseScoreLogBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEnterpriseScoreLogIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogIncInput(ctx context.Context, v interface{}) (*model.EnterpriseScoreLogIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseScoreLogIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseScoreLogMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseScoreLogMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseScoreLogMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseScoreLogMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogMinFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseScoreLogMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseScoreLogMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseScoreLogMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseScoreLogMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseScoreLogMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseScoreLogOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogOrderByᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseScoreLogOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseScoreLogOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseScoreLogOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEnterpriseScoreLogSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.EnterpriseScoreLogSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EnterpriseScoreLogSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseScoreLogSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEnterpriseScoreLogSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EnterpriseScoreLogSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnterpriseScoreLogSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOEnterpriseScoreLogSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogSetInput(ctx context.Context, v interface{}) (*model.EnterpriseScoreLogSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseScoreLogSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseScoreLogStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseScoreLogStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseScoreLogStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseScoreLogStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseScoreLogStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseScoreLogStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseScoreLogStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseScoreLogStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseScoreLogStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseScoreLogSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogSumFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseScoreLogSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseScoreLogSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseScoreLogVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseScoreLogVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseScoreLogVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseScoreLogVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseScoreLogVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseScoreLogVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseScoreLogVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreLogVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseScoreLogVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseScoreLogVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseScoreSet2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseScoreSet(ctx context.Context, sel ast.SelectionSet, v *model1.EnterpriseScoreSet) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseScoreSet(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseScoreSetAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseScoreSetAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseScoreSetAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseScoreSetAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseScoreSetAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseScoreSetAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseScoreSetBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetBoolExp(ctx context.Context, v interface{}) ([]*model.EnterpriseScoreSetBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseScoreSetBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEnterpriseScoreSetBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEnterpriseScoreSetBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetBoolExp(ctx context.Context, v interface{}) (*model.EnterpriseScoreSetBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseScoreSetBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEnterpriseScoreSetIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetIncInput(ctx context.Context, v interface{}) (*model.EnterpriseScoreSetIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseScoreSetIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseScoreSetMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseScoreSetMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseScoreSetMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseScoreSetMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetMinFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseScoreSetMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseScoreSetMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseScoreSetMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseScoreSetMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseScoreSetMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseScoreSetOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetOrderByᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseScoreSetOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseScoreSetOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseScoreSetOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEnterpriseScoreSetSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.EnterpriseScoreSetSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EnterpriseScoreSetSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseScoreSetSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEnterpriseScoreSetSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EnterpriseScoreSetSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnterpriseScoreSetSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOEnterpriseScoreSetSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetSetInput(ctx context.Context, v interface{}) (*model.EnterpriseScoreSetSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseScoreSetSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseScoreSetStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseScoreSetStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseScoreSetStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseScoreSetStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseScoreSetStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseScoreSetStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseScoreSetStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseScoreSetStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseScoreSetStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseScoreSetSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetSumFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseScoreSetSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseScoreSetSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseScoreSetVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseScoreSetVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseScoreSetVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseScoreSetVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseScoreSetVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseScoreSetVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseScoreSetVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseScoreSetVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseScoreSetVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseScoreSetVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.EnterpriseSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EnterpriseSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEnterpriseSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EnterpriseSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnterpriseSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOEnterpriseSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSetInput(ctx context.Context, v interface{}) (*model.EnterpriseSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseStateHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseStateHis(ctx context.Context, sel ast.SelectionSet, v *model1.EnterpriseStateHis) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseStateHis(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseStateHisAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseStateHisAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseStateHisAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseStateHisAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseStateHisAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseStateHisAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseStateHisBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisBoolExp(ctx context.Context, v interface{}) ([]*model.EnterpriseStateHisBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseStateHisBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEnterpriseStateHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEnterpriseStateHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisBoolExp(ctx context.Context, v interface{}) (*model.EnterpriseStateHisBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseStateHisBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEnterpriseStateHisIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisIncInput(ctx context.Context, v interface{}) (*model.EnterpriseStateHisIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseStateHisIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseStateHisMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseStateHisMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseStateHisMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseStateHisMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisMinFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseStateHisMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseStateHisMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseStateHisMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseStateHisMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseStateHisMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseStateHisOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisOrderByᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseStateHisOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseStateHisOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseStateHisOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEnterpriseStateHisSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.EnterpriseStateHisSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EnterpriseStateHisSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseStateHisSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEnterpriseStateHisSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EnterpriseStateHisSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnterpriseStateHisSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOEnterpriseStateHisSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisSetInput(ctx context.Context, v interface{}) (*model.EnterpriseStateHisSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseStateHisSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseStateHisStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseStateHisStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseStateHisStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseStateHisStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseStateHisStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseStateHisStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseStateHisStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseStateHisStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseStateHisStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseStateHisSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisSumFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseStateHisSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseStateHisSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseStateHisVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseStateHisVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseStateHisVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseStateHisVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseStateHisVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseStateHisVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseStateHisVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStateHisVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseStateHisVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseStateHisVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSumFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseUkey2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseUkey(ctx context.Context, sel ast.SelectionSet, v *model1.EnterpriseUkey) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseUkey(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseUkeyAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseUkeyAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseUkeyAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseUkeyAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseUkeyAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseUkeyAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseUkeyBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyBoolExp(ctx context.Context, v interface{}) ([]*model.EnterpriseUkeyBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseUkeyBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEnterpriseUkeyBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEnterpriseUkeyBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyBoolExp(ctx context.Context, v interface{}) (*model.EnterpriseUkeyBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseUkeyBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEnterpriseUkeyIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyIncInput(ctx context.Context, v interface{}) (*model.EnterpriseUkeyIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseUkeyIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseUkeyMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseUkeyMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseUkeyMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseUkeyMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyMinFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseUkeyMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseUkeyMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseUkeyMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseUkeyMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseUkeyMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseUkeyOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyOrderByᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseUkeyOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseUkeyOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseUkeyOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEnterpriseUkeySelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeySelectColumnᚄ(ctx context.Context, v interface{}) ([]model.EnterpriseUkeySelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EnterpriseUkeySelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseUkeySelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeySelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEnterpriseUkeySelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeySelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EnterpriseUkeySelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnterpriseUkeySelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeySelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOEnterpriseUkeySetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeySetInput(ctx context.Context, v interface{}) (*model.EnterpriseUkeySetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseUkeySetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseUkeyStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseUkeyStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseUkeyStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseUkeyStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseUkeyStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseUkeyStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseUkeyStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseUkeyStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseUkeyStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseUkeySumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeySumFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseUkeySumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseUkeySumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseUkeyVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseUkeyVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseUkeyVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseUkeyVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseUkeyVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseUkeyVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseUkeyVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUkeyVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseUkeyVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseUkeyVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFloat2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNFloat2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOFloatComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐFloatComparisonExp(ctx context.Context, v interface{}) (*model2.FloatComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFloatComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx context.Context, v interface{}) (*model2.IntComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIntComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJsonb2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNJsonb2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOJsonb2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNJsonb2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOJsonb2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJsonb2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalONumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalONumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNNumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalONumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model2.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model2.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model2.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPoint2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPoint2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPoint2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNPoint2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOPoint2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPoint2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model2.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSystemUser2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUser(ctx context.Context, sel ast.SelectionSet, v *model1.SystemUser) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemUser(ctx, sel, v)
}

func (ec *executionContext) marshalOSystemUserAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemUserAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSystemUserAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemUserAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSystemUserBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx context.Context, v interface{}) ([]*model.SystemUserBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SystemUserBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOSystemUserBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSystemUserBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx context.Context, v interface{}) (*model.SystemUserBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSystemUserBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSystemUserIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserIncInput(ctx context.Context, v interface{}) (*model.SystemUserIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSystemUserIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSystemUserMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemUserMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSystemUserMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMinFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemUserMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSystemUserMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemUserMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSystemUserOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserOrderByᚄ(ctx context.Context, v interface{}) ([]*model.SystemUserOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SystemUserOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSystemUserOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSystemUserSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.SystemUserSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.SystemUserSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSystemUserSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOSystemUserSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.SystemUserSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSystemUserSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOSystemUserSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSetInput(ctx context.Context, v interface{}) (*model.SystemUserSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSystemUserSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSystemUserStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemUserStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSystemUserStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemUserStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSystemUserStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemUserStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSystemUserSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSumFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemUserSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSystemUserVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemUserVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSystemUserVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemUserVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSystemUserVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemUserVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNTimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model2.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTimestamptzComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
